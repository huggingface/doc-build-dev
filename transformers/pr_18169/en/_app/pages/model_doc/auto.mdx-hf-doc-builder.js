import{S as $Qt,i as kQt,s as SQt,e as a,k as l,w as F,t as o,M as RQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as PQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as rtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function BQt($){let g,v,p,m,_,d,h,Co,Li,Pf,lt,yi,xi,e7,Bf,Oe,We,$i,Pn,o7,Bn,In,r7,ki,Nn,t7,Si,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),Li=a("code"),Pf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),e7=o(")."),Bf=l(),Oe=a("p"),We=o("Likewise, if your "),$i=a("code"),Pn=o("NewModel"),o7=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),r7=o(`, make sure its
`),ki=a("code"),Nn=o("config_class"),t7=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var BS=s(p);m=r(BS,"NewModelConfig"),BS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),Co=r(Ae,`, make sure its
`),Li=n(Ae,"CODE",{});var IS=s(Li);Pf=r(IS,"model_type"),IS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),yi=n(Ae,"CODE",{});var NS=s(yi);xi=r(NS,'"new-model"'),NS.forEach(t),e7=r(Ae,")."),Ae.forEach(t),Bf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),$i=n(wo,"CODE",{});var Ra=s($i);Pn=r(Ra,"NewModel"),Ra.forEach(t),o7=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var qS=s(Bn);In=r(qS,"PreTrainedModel"),qS.forEach(t),r7=r(wo,`, make sure its
`),ki=n(wo,"CODE",{});var Nf=s(ki);Nn=r(Nf,"config_class"),Nf.forEach(t),t7=r(wo,` attribute is set to the same class you use when registering the model (here
`),Si=n(wo,"CODE",{});var jS=s(Si);If=r(jS,"NewModelConfig"),jS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,Li),e(Li,Pf),e(g,lt),e(g,yi),e(yi,xi),e(g,e7),b(He,Bf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,$i),e($i,Pn),e(Oe,o7),e(Oe,Bn),e(Bn,In),e(Oe,r7),e(Oe,ki),e(ki,Nn),e(Oe,t7),e(Oe,Si),e(Si,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Bf),He&&t(Oe)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_,d,h,Co,Li,Pf,lt,yi,xi,e7,Bf,Oe,We,$i,Pn,o7,Bn,In,r7,ki,Nn,t7,Si,If,Sa,He,Ae,BS,Ri,IS,NS,wo,Ra,qS,Nf,jS,mHe,YVe,Pi,qf,Cae,a7,gHe,wae,hHe,KVe,qn,pHe,Aae,_He,uHe,Lae,bHe,vHe,ZVe,n7,eXe,DS,FHe,oXe,jf,rXe,Bi,Df,yae,s7,THe,xae,MHe,tXe,Ao,l7,EHe,i7,CHe,GS,wHe,AHe,LHe,d7,yHe,$ae,xHe,$He,kHe,Lr,c7,SHe,kae,RHe,PHe,Ii,BHe,Sae,IHe,NHe,Rae,qHe,jHe,DHe,A,Gf,Pae,GHe,OHe,OS,VHe,XHe,zHe,Of,Bae,QHe,WHe,VS,HHe,UHe,JHe,Vf,Iae,YHe,KHe,XS,ZHe,eUe,oUe,Xf,Nae,rUe,tUe,zS,aUe,nUe,sUe,zf,qae,lUe,iUe,QS,dUe,cUe,fUe,Qf,jae,mUe,gUe,WS,hUe,pUe,_Ue,Wf,Dae,uUe,bUe,HS,vUe,FUe,TUe,Hf,Gae,MUe,EUe,US,CUe,wUe,AUe,Uf,Oae,LUe,yUe,JS,xUe,$Ue,kUe,Jf,Vae,SUe,RUe,YS,PUe,BUe,IUe,Yf,Xae,NUe,qUe,KS,jUe,DUe,GUe,Kf,zae,OUe,VUe,ZS,XUe,zUe,QUe,Zf,Qae,WUe,HUe,eR,UUe,JUe,YUe,em,Wae,KUe,ZUe,oR,eJe,oJe,rJe,om,Hae,tJe,aJe,rR,nJe,sJe,lJe,rm,Uae,iJe,dJe,tR,cJe,fJe,mJe,tm,Jae,gJe,hJe,aR,pJe,_Je,uJe,am,Yae,bJe,vJe,nR,FJe,TJe,MJe,nm,Kae,EJe,CJe,sR,wJe,AJe,LJe,sm,Zae,yJe,xJe,lR,$Je,kJe,SJe,lm,ene,RJe,PJe,iR,BJe,IJe,NJe,im,one,qJe,jJe,dR,DJe,GJe,OJe,dm,rne,VJe,XJe,cR,zJe,QJe,WJe,cm,tne,HJe,UJe,fR,JJe,YJe,KJe,fm,ane,ZJe,eYe,mR,oYe,rYe,tYe,mm,nne,aYe,nYe,gR,sYe,lYe,iYe,gm,sne,dYe,cYe,hR,fYe,mYe,gYe,hm,lne,hYe,pYe,pR,_Ye,uYe,bYe,pm,ine,vYe,FYe,_R,TYe,MYe,EYe,_m,dne,CYe,wYe,uR,AYe,LYe,yYe,um,cne,xYe,$Ye,bR,kYe,SYe,RYe,bm,fne,PYe,BYe,vR,IYe,NYe,qYe,vm,mne,jYe,DYe,FR,GYe,OYe,VYe,Fm,gne,XYe,zYe,TR,QYe,WYe,HYe,Tm,hne,UYe,JYe,MR,YYe,KYe,ZYe,Mm,pne,eKe,oKe,ER,rKe,tKe,aKe,Em,_ne,nKe,sKe,CR,lKe,iKe,dKe,Cm,une,cKe,fKe,wR,mKe,gKe,hKe,wm,bne,pKe,_Ke,AR,uKe,bKe,vKe,Am,vne,FKe,TKe,LR,MKe,EKe,CKe,Lm,Fne,wKe,AKe,yR,LKe,yKe,xKe,ym,Tne,$Ke,kKe,xR,SKe,RKe,PKe,xm,Mne,BKe,IKe,$R,NKe,qKe,jKe,$m,Ene,DKe,GKe,kR,OKe,VKe,XKe,km,Cne,zKe,QKe,SR,WKe,HKe,UKe,Sm,wne,JKe,YKe,RR,KKe,ZKe,eZe,Rm,Ane,oZe,rZe,PR,tZe,aZe,nZe,Pm,Lne,sZe,lZe,BR,iZe,dZe,cZe,Bm,yne,fZe,mZe,IR,gZe,hZe,pZe,Im,xne,_Ze,uZe,NR,bZe,vZe,FZe,Nm,$ne,TZe,MZe,qR,EZe,CZe,wZe,qm,kne,AZe,LZe,jR,yZe,xZe,$Ze,jm,Sne,kZe,SZe,DR,RZe,PZe,BZe,Dm,Rne,IZe,NZe,GR,qZe,jZe,DZe,Gm,Pne,GZe,OZe,OR,VZe,XZe,zZe,Om,Bne,QZe,WZe,VR,HZe,UZe,JZe,Vm,Ine,YZe,KZe,XR,ZZe,eeo,oeo,Xm,Nne,reo,teo,zR,aeo,neo,seo,zm,qne,leo,ieo,QR,deo,ceo,feo,Qm,jne,meo,geo,WR,heo,peo,_eo,Wm,Dne,ueo,beo,HR,veo,Feo,Teo,Hm,Gne,Meo,Eeo,UR,Ceo,weo,Aeo,Um,One,Leo,yeo,JR,xeo,$eo,keo,Jm,Vne,Seo,Reo,YR,Peo,Beo,Ieo,Ym,Xne,Neo,qeo,KR,jeo,Deo,Geo,Km,zne,Oeo,Veo,ZR,Xeo,zeo,Qeo,Zm,Qne,Weo,Heo,eP,Ueo,Jeo,Yeo,eg,Wne,Keo,Zeo,oP,eoo,ooo,roo,og,Hne,too,aoo,rP,noo,soo,loo,rg,Une,ioo,doo,tP,coo,foo,moo,tg,Jne,goo,hoo,aP,poo,_oo,uoo,ag,Yne,boo,voo,nP,Foo,Too,Moo,ng,Kne,Eoo,Coo,sP,woo,Aoo,Loo,sg,Zne,yoo,xoo,lP,$oo,koo,Soo,lg,ese,Roo,Poo,iP,Boo,Ioo,Noo,ig,ose,qoo,joo,dP,Doo,Goo,Ooo,dg,rse,Voo,Xoo,cP,zoo,Qoo,Woo,cg,tse,Hoo,Uoo,fP,Joo,Yoo,Koo,fg,ase,Zoo,ero,mP,oro,rro,tro,mg,nse,aro,nro,gP,sro,lro,iro,gg,sse,dro,cro,hP,fro,mro,gro,hg,lse,hro,pro,pP,_ro,uro,bro,pg,ise,vro,Fro,_P,Tro,Mro,Ero,_g,dse,Cro,wro,uP,Aro,Lro,yro,ug,cse,xro,$ro,bP,kro,Sro,Rro,bg,fse,Pro,Bro,vP,Iro,Nro,qro,vg,mse,jro,Dro,FP,Gro,Oro,Vro,Fg,gse,Xro,zro,TP,Qro,Wro,Hro,Tg,hse,Uro,Jro,MP,Yro,Kro,Zro,Mg,pse,eto,oto,EP,rto,tto,ato,Eg,_se,nto,sto,CP,lto,ito,dto,Cg,use,cto,fto,wP,mto,gto,hto,wg,bse,pto,_to,AP,uto,bto,vto,Ag,vse,Fto,Tto,LP,Mto,Eto,Cto,Lg,Fse,wto,Ato,yP,Lto,yto,xto,yg,Tse,$to,kto,xP,Sto,Rto,Pto,xg,Mse,Bto,Ito,$P,Nto,qto,jto,$g,Ese,Dto,Gto,kP,Oto,Vto,Xto,kg,Cse,zto,Qto,SP,Wto,Hto,Uto,Sg,wse,Jto,Yto,RP,Kto,Zto,eao,Rg,Ase,oao,rao,PP,tao,aao,nao,Pg,Lse,sao,lao,BP,iao,dao,cao,Bg,yse,fao,mao,IP,gao,hao,pao,Ig,xse,_ao,uao,NP,bao,vao,Fao,Ng,$se,Tao,Mao,qP,Eao,Cao,wao,qg,kse,Aao,Lao,jP,yao,xao,$ao,jg,Sse,kao,Sao,DP,Rao,Pao,Bao,Dg,Rse,Iao,Nao,GP,qao,jao,Dao,Gg,Pse,Gao,Oao,OP,Vao,Xao,zao,Og,Bse,Qao,Wao,VP,Hao,Uao,Jao,Vg,Ise,Yao,Kao,XP,Zao,eno,ono,Xg,Nse,rno,tno,zP,ano,nno,sno,zg,qse,lno,ino,QP,dno,cno,fno,Qg,jse,mno,gno,WP,hno,pno,_no,Wg,Dse,uno,bno,HP,vno,Fno,Tno,Hg,Gse,Mno,Eno,UP,Cno,wno,Ano,Ug,Ose,Lno,yno,JP,xno,$no,kno,Jg,Vse,Sno,Rno,YP,Pno,Bno,Ino,Yg,Nno,Kg,f7,qno,Xse,jno,aXe,Ni,Zg,zse,m7,Dno,Qse,Gno,nXe,Lo,g7,Ono,h7,Vno,KP,Xno,zno,Qno,p7,Wno,Wse,Hno,Uno,Jno,yr,_7,Yno,Hse,Kno,Zno,Pa,eso,Use,oso,rso,Jse,tso,aso,Yse,nso,sso,lso,k,jn,Kse,iso,dso,ZP,cso,fso,eB,mso,gso,hso,Dn,Zse,pso,_so,oB,uso,bso,rB,vso,Fso,Tso,Gn,ele,Mso,Eso,tB,Cso,wso,aB,Aso,Lso,yso,eh,ole,xso,$so,nB,kso,Sso,Rso,On,rle,Pso,Bso,sB,Iso,Nso,lB,qso,jso,Dso,oh,tle,Gso,Oso,iB,Vso,Xso,zso,rh,ale,Qso,Wso,dB,Hso,Uso,Jso,th,nle,Yso,Kso,cB,Zso,elo,olo,Vn,sle,rlo,tlo,fB,alo,nlo,mB,slo,llo,ilo,Xn,lle,dlo,clo,gB,flo,mlo,hB,glo,hlo,plo,zn,ile,_lo,ulo,pB,blo,vlo,_B,Flo,Tlo,Mlo,ah,dle,Elo,Clo,uB,wlo,Alo,Llo,nh,cle,ylo,xlo,bB,$lo,klo,Slo,sh,fle,Rlo,Plo,vB,Blo,Ilo,Nlo,Qn,mle,qlo,jlo,FB,Dlo,Glo,TB,Olo,Vlo,Xlo,lh,gle,zlo,Qlo,MB,Wlo,Hlo,Ulo,Wn,hle,Jlo,Ylo,EB,Klo,Zlo,CB,eio,oio,rio,Hn,ple,tio,aio,wB,nio,sio,AB,lio,iio,dio,Un,_le,cio,fio,LB,mio,gio,yB,hio,pio,_io,Jn,ule,uio,bio,xB,vio,Fio,$B,Tio,Mio,Eio,ih,ble,Cio,wio,kB,Aio,Lio,yio,Yn,vle,xio,$io,SB,kio,Sio,RB,Rio,Pio,Bio,Kn,Fle,Iio,Nio,PB,qio,jio,BB,Dio,Gio,Oio,Zn,Tle,Vio,Xio,IB,zio,Qio,NB,Wio,Hio,Uio,es,Mle,Jio,Yio,qB,Kio,Zio,jB,edo,odo,rdo,os,Ele,tdo,ado,DB,ndo,sdo,GB,ldo,ido,ddo,rs,Cle,cdo,fdo,OB,mdo,gdo,VB,hdo,pdo,_do,dh,wle,udo,bdo,XB,vdo,Fdo,Tdo,ts,Ale,Mdo,Edo,zB,Cdo,wdo,QB,Ado,Ldo,ydo,ch,Lle,xdo,$do,WB,kdo,Sdo,Rdo,as,yle,Pdo,Bdo,HB,Ido,Ndo,UB,qdo,jdo,Ddo,ns,xle,Gdo,Odo,JB,Vdo,Xdo,YB,zdo,Qdo,Wdo,ss,$le,Hdo,Udo,KB,Jdo,Ydo,ZB,Kdo,Zdo,eco,fh,kle,oco,rco,eI,tco,aco,nco,ls,Sle,sco,lco,oI,ico,dco,rI,cco,fco,mco,is,Rle,gco,hco,tI,pco,_co,aI,uco,bco,vco,ds,Ple,Fco,Tco,nI,Mco,Eco,sI,Cco,wco,Aco,mh,Ble,Lco,yco,lI,xco,$co,kco,cs,Ile,Sco,Rco,iI,Pco,Bco,dI,Ico,Nco,qco,fs,Nle,jco,Dco,cI,Gco,Oco,fI,Vco,Xco,zco,ms,qle,Qco,Wco,mI,Hco,Uco,gI,Jco,Yco,Kco,gs,jle,Zco,efo,hI,ofo,rfo,pI,tfo,afo,nfo,hs,Dle,sfo,lfo,_I,ifo,dfo,uI,cfo,ffo,mfo,ps,Gle,gfo,hfo,bI,pfo,_fo,vI,ufo,bfo,vfo,_s,Ole,Ffo,Tfo,FI,Mfo,Efo,TI,Cfo,wfo,Afo,us,Vle,Lfo,yfo,MI,xfo,$fo,EI,kfo,Sfo,Rfo,gh,Xle,Pfo,Bfo,CI,Ifo,Nfo,qfo,bs,zle,jfo,Dfo,wI,Gfo,Ofo,AI,Vfo,Xfo,zfo,hh,Qle,Qfo,Wfo,LI,Hfo,Ufo,Jfo,ph,Wle,Yfo,Kfo,yI,Zfo,emo,omo,vs,Hle,rmo,tmo,xI,amo,nmo,$I,smo,lmo,imo,Fs,Ule,dmo,cmo,kI,fmo,mmo,SI,gmo,hmo,pmo,Ts,Jle,_mo,umo,RI,bmo,vmo,PI,Fmo,Tmo,Mmo,_h,Yle,Emo,Cmo,BI,wmo,Amo,Lmo,Ms,Kle,ymo,xmo,II,$mo,kmo,NI,Smo,Rmo,Pmo,Es,Zle,Bmo,Imo,qI,Nmo,qmo,jI,jmo,Dmo,Gmo,Cs,eie,Omo,Vmo,DI,Xmo,zmo,GI,Qmo,Wmo,Hmo,ws,oie,Umo,Jmo,OI,Ymo,Kmo,VI,Zmo,ego,ogo,As,rie,rgo,tgo,XI,ago,ngo,zI,sgo,lgo,igo,Ls,tie,dgo,cgo,QI,fgo,mgo,WI,ggo,hgo,pgo,ys,aie,_go,ugo,HI,bgo,vgo,UI,Fgo,Tgo,Mgo,uh,nie,Ego,Cgo,JI,wgo,Ago,Lgo,xs,sie,ygo,xgo,YI,$go,kgo,KI,Sgo,Rgo,Pgo,bh,lie,Bgo,Igo,ZI,Ngo,qgo,jgo,vh,iie,Dgo,Ggo,eN,Ogo,Vgo,Xgo,Fh,die,zgo,Qgo,oN,Wgo,Hgo,Ugo,Th,cie,Jgo,Ygo,rN,Kgo,Zgo,eho,$s,fie,oho,rho,tN,tho,aho,aN,nho,sho,lho,Mh,mie,iho,dho,nN,cho,fho,mho,ks,gie,gho,hho,sN,pho,_ho,lN,uho,bho,vho,Ss,hie,Fho,Tho,iN,Mho,Eho,dN,Cho,who,Aho,Rs,pie,Lho,yho,cN,xho,$ho,fN,kho,Sho,Rho,Ps,_ie,Pho,Bho,mN,Iho,Nho,gN,qho,jho,Dho,Bs,uie,Gho,Oho,hN,Vho,Xho,pN,zho,Qho,Who,Is,bie,Hho,Uho,_N,Jho,Yho,uN,Kho,Zho,epo,Eh,vie,opo,rpo,bN,tpo,apo,npo,Ch,Fie,spo,lpo,vN,ipo,dpo,cpo,Ns,Tie,fpo,mpo,FN,gpo,hpo,TN,ppo,_po,upo,qs,Mie,bpo,vpo,MN,Fpo,Tpo,EN,Mpo,Epo,Cpo,js,Eie,wpo,Apo,CN,Lpo,ypo,wN,xpo,$po,kpo,wh,Cie,Spo,Rpo,AN,Ppo,Bpo,Ipo,Ah,wie,Npo,qpo,LN,jpo,Dpo,Gpo,Lh,Aie,Opo,Vpo,yN,Xpo,zpo,Qpo,Ds,Lie,Wpo,Hpo,xN,Upo,Jpo,$N,Ypo,Kpo,Zpo,Gs,yie,e_o,o_o,kN,r_o,t_o,SN,a_o,n_o,s_o,yh,xie,l_o,i_o,RN,d_o,c_o,f_o,xh,$ie,m_o,g_o,PN,h_o,p_o,__o,$h,kie,u_o,b_o,BN,v_o,F_o,T_o,Os,Sie,M_o,E_o,IN,C_o,w_o,NN,A_o,L_o,y_o,kh,Rie,x_o,$_o,qN,k_o,S_o,R_o,Sh,Pie,P_o,B_o,jN,I_o,N_o,q_o,Vs,Bie,j_o,D_o,DN,G_o,O_o,GN,V_o,X_o,z_o,Xs,Iie,Q_o,W_o,ON,H_o,U_o,VN,J_o,Y_o,K_o,zs,Nie,Z_o,euo,XN,ouo,ruo,zN,tuo,auo,nuo,Qs,qie,suo,luo,QN,iuo,duo,WN,cuo,fuo,muo,Rh,guo,Ph,u7,huo,jie,puo,sXe,qi,Bh,Die,b7,_uo,Gie,uuo,lXe,yo,v7,buo,F7,vuo,HN,Fuo,Tuo,Muo,T7,Euo,Oie,Cuo,wuo,Auo,Ue,M7,Luo,Vie,yuo,xuo,Ba,$uo,Xie,kuo,Suo,zie,Ruo,Puo,Qie,Buo,Iuo,Nuo,Y,Ih,Wie,quo,juo,UN,Duo,Guo,Ouo,Nh,Hie,Vuo,Xuo,JN,zuo,Quo,Wuo,qh,Uie,Huo,Uuo,YN,Juo,Yuo,Kuo,jh,Jie,Zuo,e1o,KN,o1o,r1o,t1o,Dh,Yie,a1o,n1o,ZN,s1o,l1o,i1o,Gh,Kie,d1o,c1o,eq,f1o,m1o,g1o,Oh,Zie,h1o,p1o,oq,_1o,u1o,b1o,Vh,ede,v1o,F1o,rq,T1o,M1o,E1o,Xh,ode,C1o,w1o,tq,A1o,L1o,y1o,zh,rde,x1o,$1o,aq,k1o,S1o,R1o,Qh,tde,P1o,B1o,nq,I1o,N1o,q1o,Wh,ade,j1o,D1o,sq,G1o,O1o,V1o,Hh,nde,X1o,z1o,lq,Q1o,W1o,H1o,Uh,sde,U1o,J1o,iq,Y1o,K1o,Z1o,Jh,lde,e2o,o2o,dq,r2o,t2o,a2o,Yh,ide,n2o,s2o,cq,l2o,i2o,d2o,Kh,dde,c2o,f2o,fq,m2o,g2o,h2o,Zh,cde,p2o,_2o,mq,u2o,b2o,v2o,ep,fde,F2o,T2o,gq,M2o,E2o,C2o,op,mde,w2o,A2o,hq,L2o,y2o,x2o,rp,gde,$2o,k2o,pq,S2o,R2o,P2o,tp,hde,B2o,I2o,_q,N2o,q2o,j2o,ap,pde,D2o,G2o,uq,O2o,V2o,X2o,np,_de,z2o,Q2o,bq,W2o,H2o,U2o,sp,ude,J2o,Y2o,vq,K2o,Z2o,ebo,lp,bde,obo,rbo,Fq,tbo,abo,nbo,ip,vde,sbo,lbo,Tq,ibo,dbo,cbo,dp,Fde,fbo,mbo,Mq,gbo,hbo,pbo,cp,Tde,_bo,ubo,Eq,bbo,vbo,Fbo,fp,Mde,Tbo,Mbo,Cq,Ebo,Cbo,wbo,mp,Ede,Abo,Lbo,wq,ybo,xbo,$bo,gp,Cde,kbo,Sbo,Aq,Rbo,Pbo,Bbo,hp,wde,Ibo,Nbo,Lq,qbo,jbo,Dbo,pp,Ade,Gbo,Obo,yq,Vbo,Xbo,zbo,_p,Qbo,up,Wbo,bp,E7,Hbo,Lde,Ubo,iXe,ji,vp,yde,C7,Jbo,xde,Ybo,dXe,xo,w7,Kbo,A7,Zbo,xq,evo,ovo,rvo,L7,tvo,$de,avo,nvo,svo,Je,y7,lvo,kde,ivo,dvo,Di,cvo,Sde,fvo,mvo,Rde,gvo,hvo,pvo,he,Fp,Pde,_vo,uvo,$q,bvo,vvo,Fvo,Tp,Bde,Tvo,Mvo,Ide,Evo,Cvo,wvo,Mp,Nde,Avo,Lvo,kq,yvo,xvo,$vo,Ep,qde,kvo,Svo,Sq,Rvo,Pvo,Bvo,Cp,jde,Ivo,Nvo,Rq,qvo,jvo,Dvo,wp,Dde,Gvo,Ovo,Pq,Vvo,Xvo,zvo,Ap,Gde,Qvo,Wvo,Bq,Hvo,Uvo,Jvo,Lp,Ode,Yvo,Kvo,Iq,Zvo,eFo,oFo,yp,Vde,rFo,tFo,Nq,aFo,nFo,sFo,xp,Xde,lFo,iFo,qq,dFo,cFo,fFo,$p,zde,mFo,gFo,jq,hFo,pFo,_Fo,kp,Qde,uFo,bFo,Dq,vFo,FFo,TFo,Sp,Wde,MFo,EFo,Gq,CFo,wFo,AFo,Rp,Hde,LFo,yFo,Oq,xFo,$Fo,kFo,Pp,Ude,SFo,RFo,Vq,PFo,BFo,IFo,Bp,Jde,NFo,qFo,Xq,jFo,DFo,GFo,Ip,Yde,OFo,VFo,zq,XFo,zFo,QFo,Np,Kde,WFo,HFo,Qq,UFo,JFo,YFo,qp,KFo,jp,ZFo,Dp,x7,e6o,Zde,o6o,cXe,Gi,Gp,ece,$7,r6o,oce,t6o,fXe,$o,k7,a6o,Oi,n6o,Wq,s6o,l6o,Hq,i6o,d6o,c6o,S7,f6o,rce,m6o,g6o,h6o,it,R7,p6o,tce,_6o,u6o,Vi,b6o,ace,v6o,F6o,Uq,T6o,M6o,E6o,Op,C6o,Ye,P7,w6o,nce,A6o,L6o,Ia,y6o,sce,x6o,$6o,lce,k6o,S6o,ice,R6o,P6o,B6o,y,Vp,dce,I6o,N6o,Jq,q6o,j6o,D6o,Xp,cce,G6o,O6o,Yq,V6o,X6o,z6o,zp,fce,Q6o,W6o,Kq,H6o,U6o,J6o,Qp,mce,Y6o,K6o,Zq,Z6o,eTo,oTo,Wp,gce,rTo,tTo,ej,aTo,nTo,sTo,Hp,hce,lTo,iTo,oj,dTo,cTo,fTo,Up,pce,mTo,gTo,rj,hTo,pTo,_To,Jp,_ce,uTo,bTo,tj,vTo,FTo,TTo,Yp,uce,MTo,ETo,aj,CTo,wTo,ATo,Kp,bce,LTo,yTo,nj,xTo,$To,kTo,Zp,vce,STo,RTo,sj,PTo,BTo,ITo,e_,Fce,NTo,qTo,lj,jTo,DTo,GTo,o_,Tce,OTo,VTo,ij,XTo,zTo,QTo,r_,Mce,WTo,HTo,dj,UTo,JTo,YTo,t_,Ece,KTo,ZTo,cj,e8o,o8o,r8o,a_,Cce,t8o,a8o,fj,n8o,s8o,l8o,n_,wce,i8o,d8o,mj,c8o,f8o,m8o,s_,Ace,g8o,h8o,gj,p8o,_8o,u8o,l_,Lce,b8o,v8o,hj,F8o,T8o,M8o,i_,yce,E8o,C8o,pj,w8o,A8o,L8o,d_,xce,y8o,x8o,_j,$8o,k8o,S8o,c_,$ce,R8o,P8o,uj,B8o,I8o,N8o,f_,kce,q8o,j8o,bj,D8o,G8o,O8o,m_,Sce,V8o,X8o,vj,z8o,Q8o,W8o,g_,Rce,H8o,U8o,Fj,J8o,Y8o,K8o,h_,Pce,Z8o,e9o,Tj,o9o,r9o,t9o,p_,Bce,a9o,n9o,Mj,s9o,l9o,i9o,__,Ice,d9o,c9o,Ej,f9o,m9o,g9o,u_,Nce,h9o,p9o,Cj,_9o,u9o,b9o,b_,qce,v9o,F9o,wj,T9o,M9o,E9o,v_,jce,C9o,w9o,Aj,A9o,L9o,y9o,F_,Dce,x9o,$9o,Lj,k9o,S9o,R9o,T_,Gce,P9o,B9o,yj,I9o,N9o,q9o,M_,Oce,j9o,D9o,xj,G9o,O9o,V9o,Ws,Vce,X9o,z9o,$j,Q9o,W9o,kj,H9o,U9o,J9o,E_,Xce,Y9o,K9o,Sj,Z9o,eMo,oMo,C_,zce,rMo,tMo,Rj,aMo,nMo,sMo,w_,Qce,lMo,iMo,Pj,dMo,cMo,fMo,A_,Wce,mMo,gMo,Bj,hMo,pMo,_Mo,L_,Hce,uMo,bMo,Ij,vMo,FMo,TMo,y_,Uce,MMo,EMo,Nj,CMo,wMo,AMo,x_,Jce,LMo,yMo,qj,xMo,$Mo,kMo,$_,Yce,SMo,RMo,jj,PMo,BMo,IMo,k_,Kce,NMo,qMo,Dj,jMo,DMo,GMo,S_,Zce,OMo,VMo,Gj,XMo,zMo,QMo,R_,efe,WMo,HMo,Oj,UMo,JMo,YMo,P_,ofe,KMo,ZMo,Vj,e4o,o4o,r4o,B_,rfe,t4o,a4o,Xj,n4o,s4o,l4o,I_,tfe,i4o,d4o,zj,c4o,f4o,m4o,N_,afe,g4o,h4o,Qj,p4o,_4o,u4o,q_,nfe,b4o,v4o,Wj,F4o,T4o,M4o,j_,sfe,E4o,C4o,Hj,w4o,A4o,L4o,D_,lfe,y4o,x4o,Uj,$4o,k4o,S4o,G_,ife,R4o,P4o,Jj,B4o,I4o,N4o,O_,dfe,q4o,j4o,Yj,D4o,G4o,O4o,V_,cfe,V4o,X4o,Kj,z4o,Q4o,W4o,X_,ffe,H4o,U4o,Zj,J4o,Y4o,K4o,z_,mfe,Z4o,eEo,eD,oEo,rEo,tEo,Q_,gfe,aEo,nEo,oD,sEo,lEo,iEo,W_,hfe,dEo,cEo,rD,fEo,mEo,gEo,H_,pfe,hEo,pEo,tD,_Eo,uEo,bEo,U_,_fe,vEo,FEo,aD,TEo,MEo,EEo,J_,ufe,CEo,wEo,nD,AEo,LEo,yEo,Y_,bfe,xEo,$Eo,sD,kEo,SEo,REo,K_,vfe,PEo,BEo,lD,IEo,NEo,qEo,Z_,Ffe,jEo,DEo,iD,GEo,OEo,VEo,eu,Tfe,XEo,zEo,dD,QEo,WEo,HEo,ou,Mfe,UEo,JEo,cD,YEo,KEo,ZEo,ru,Efe,eCo,oCo,fD,rCo,tCo,aCo,tu,Cfe,nCo,sCo,mD,lCo,iCo,dCo,au,wfe,cCo,fCo,gD,mCo,gCo,hCo,nu,Afe,pCo,_Co,hD,uCo,bCo,vCo,su,Lfe,FCo,TCo,pD,MCo,ECo,CCo,lu,yfe,wCo,ACo,_D,LCo,yCo,xCo,iu,xfe,$Co,kCo,uD,SCo,RCo,PCo,du,$fe,BCo,ICo,bD,NCo,qCo,jCo,cu,kfe,DCo,GCo,vD,OCo,VCo,XCo,fu,Sfe,zCo,QCo,FD,WCo,HCo,UCo,mu,Rfe,JCo,YCo,TD,KCo,ZCo,e3o,gu,Pfe,o3o,r3o,MD,t3o,a3o,n3o,hu,Bfe,s3o,l3o,ED,i3o,d3o,c3o,pu,Ife,f3o,m3o,CD,g3o,h3o,p3o,_u,Nfe,_3o,u3o,wD,b3o,v3o,F3o,uu,qfe,T3o,M3o,AD,E3o,C3o,w3o,bu,jfe,A3o,L3o,LD,y3o,x3o,$3o,vu,Dfe,k3o,S3o,yD,R3o,P3o,B3o,Fu,Gfe,I3o,N3o,xD,q3o,j3o,D3o,Tu,Ofe,G3o,O3o,$D,V3o,X3o,z3o,Mu,Vfe,Q3o,W3o,kD,H3o,U3o,J3o,Eu,Xfe,Y3o,K3o,SD,Z3o,e5o,o5o,Cu,zfe,r5o,t5o,RD,a5o,n5o,s5o,wu,Qfe,l5o,i5o,PD,d5o,c5o,f5o,Au,Wfe,m5o,g5o,BD,h5o,p5o,_5o,Lu,Hfe,u5o,b5o,ID,v5o,F5o,T5o,yu,Ufe,M5o,E5o,ND,C5o,w5o,A5o,xu,Jfe,L5o,y5o,qD,x5o,$5o,k5o,$u,Yfe,S5o,R5o,jD,P5o,B5o,I5o,ku,Kfe,N5o,q5o,DD,j5o,D5o,G5o,Su,Zfe,O5o,V5o,GD,X5o,z5o,Q5o,Ru,eme,W5o,H5o,OD,U5o,J5o,Y5o,Pu,ome,K5o,Z5o,VD,e0o,o0o,r0o,Bu,rme,t0o,a0o,XD,n0o,s0o,l0o,Iu,tme,i0o,d0o,zD,c0o,f0o,m0o,Nu,ame,g0o,h0o,QD,p0o,_0o,u0o,qu,nme,b0o,v0o,WD,F0o,T0o,M0o,ju,sme,E0o,C0o,HD,w0o,A0o,L0o,Du,lme,y0o,x0o,UD,$0o,k0o,S0o,Gu,ime,R0o,P0o,JD,B0o,I0o,N0o,Ou,dme,q0o,j0o,YD,D0o,G0o,O0o,Vu,cme,V0o,X0o,KD,z0o,Q0o,W0o,Xu,fme,H0o,U0o,ZD,J0o,Y0o,K0o,zu,Z0o,mme,ewo,owo,gme,rwo,two,Qu,mXe,Xi,Wu,hme,B7,awo,pme,nwo,gXe,ko,I7,swo,zi,lwo,eG,iwo,dwo,oG,cwo,fwo,mwo,N7,gwo,_me,hwo,pwo,_wo,dt,q7,uwo,ume,bwo,vwo,Qi,Fwo,bme,Two,Mwo,rG,Ewo,Cwo,wwo,Hu,Awo,Ke,j7,Lwo,vme,ywo,xwo,Na,$wo,Fme,kwo,Swo,Tme,Rwo,Pwo,Mme,Bwo,Iwo,Nwo,G,Uu,Eme,qwo,jwo,tG,Dwo,Gwo,Owo,Ju,Cme,Vwo,Xwo,aG,zwo,Qwo,Wwo,Yu,wme,Hwo,Uwo,nG,Jwo,Ywo,Kwo,Ku,Ame,Zwo,eAo,sG,oAo,rAo,tAo,Zu,Lme,aAo,nAo,lG,sAo,lAo,iAo,e1,yme,dAo,cAo,iG,fAo,mAo,gAo,o1,xme,hAo,pAo,dG,_Ao,uAo,bAo,r1,$me,vAo,FAo,cG,TAo,MAo,EAo,t1,kme,CAo,wAo,fG,AAo,LAo,yAo,a1,Sme,xAo,$Ao,mG,kAo,SAo,RAo,n1,Rme,PAo,BAo,gG,IAo,NAo,qAo,s1,Pme,jAo,DAo,hG,GAo,OAo,VAo,l1,Bme,XAo,zAo,pG,QAo,WAo,HAo,i1,Ime,UAo,JAo,_G,YAo,KAo,ZAo,d1,Nme,e7o,o7o,uG,r7o,t7o,a7o,c1,qme,n7o,s7o,bG,l7o,i7o,d7o,f1,jme,c7o,f7o,vG,m7o,g7o,h7o,m1,Dme,p7o,_7o,FG,u7o,b7o,v7o,g1,Gme,F7o,T7o,TG,M7o,E7o,C7o,h1,Ome,w7o,A7o,MG,L7o,y7o,x7o,p1,Vme,$7o,k7o,EG,S7o,R7o,P7o,_1,Xme,B7o,I7o,CG,N7o,q7o,j7o,u1,zme,D7o,G7o,wG,O7o,V7o,X7o,b1,Qme,z7o,Q7o,AG,W7o,H7o,U7o,v1,Wme,J7o,Y7o,LG,K7o,Z7o,eLo,F1,Hme,oLo,rLo,yG,tLo,aLo,nLo,T1,Ume,sLo,lLo,xG,iLo,dLo,cLo,M1,Jme,fLo,mLo,$G,gLo,hLo,pLo,E1,Yme,_Lo,uLo,kG,bLo,vLo,FLo,C1,Kme,TLo,MLo,SG,ELo,CLo,wLo,w1,Zme,ALo,LLo,RG,yLo,xLo,$Lo,A1,ege,kLo,SLo,PG,RLo,PLo,BLo,L1,oge,ILo,NLo,BG,qLo,jLo,DLo,y1,rge,GLo,OLo,IG,VLo,XLo,zLo,x1,tge,QLo,WLo,NG,HLo,ULo,JLo,$1,age,YLo,KLo,qG,ZLo,eyo,oyo,k1,nge,ryo,tyo,jG,ayo,nyo,syo,S1,sge,lyo,iyo,DG,dyo,cyo,fyo,R1,lge,myo,gyo,GG,hyo,pyo,_yo,P1,ige,uyo,byo,OG,vyo,Fyo,Tyo,B1,dge,Myo,Eyo,VG,Cyo,wyo,Ayo,I1,cge,Lyo,yyo,XG,xyo,$yo,kyo,N1,fge,Syo,Ryo,zG,Pyo,Byo,Iyo,q1,mge,Nyo,qyo,QG,jyo,Dyo,Gyo,j1,gge,Oyo,Vyo,WG,Xyo,zyo,Qyo,D1,Wyo,hge,Hyo,Uyo,pge,Jyo,Yyo,G1,hXe,Wi,O1,_ge,D7,Kyo,uge,Zyo,pXe,So,G7,exo,Hi,oxo,HG,rxo,txo,UG,axo,nxo,sxo,O7,lxo,bge,ixo,dxo,cxo,ct,V7,fxo,vge,mxo,gxo,Ui,hxo,Fge,pxo,_xo,JG,uxo,bxo,vxo,V1,Fxo,Ze,X7,Txo,Tge,Mxo,Exo,qa,Cxo,Mge,wxo,Axo,Ege,Lxo,yxo,Cge,xxo,$xo,kxo,z,X1,wge,Sxo,Rxo,YG,Pxo,Bxo,Ixo,z1,Age,Nxo,qxo,KG,jxo,Dxo,Gxo,Q1,Lge,Oxo,Vxo,ZG,Xxo,zxo,Qxo,W1,yge,Wxo,Hxo,eO,Uxo,Jxo,Yxo,H1,xge,Kxo,Zxo,oO,e$o,o$o,r$o,U1,$ge,t$o,a$o,rO,n$o,s$o,l$o,J1,kge,i$o,d$o,tO,c$o,f$o,m$o,Y1,Sge,g$o,h$o,aO,p$o,_$o,u$o,K1,Rge,b$o,v$o,nO,F$o,T$o,M$o,Z1,Pge,E$o,C$o,sO,w$o,A$o,L$o,e2,Bge,y$o,x$o,lO,$$o,k$o,S$o,o2,Ige,R$o,P$o,iO,B$o,I$o,N$o,r2,Nge,q$o,j$o,dO,D$o,G$o,O$o,t2,qge,V$o,X$o,cO,z$o,Q$o,W$o,a2,jge,H$o,U$o,fO,J$o,Y$o,K$o,n2,Dge,Z$o,eko,mO,oko,rko,tko,s2,Gge,ako,nko,gO,sko,lko,iko,l2,Oge,dko,cko,hO,fko,mko,gko,i2,Vge,hko,pko,pO,_ko,uko,bko,d2,Xge,vko,Fko,_O,Tko,Mko,Eko,c2,zge,Cko,wko,uO,Ako,Lko,yko,f2,Qge,xko,$ko,bO,kko,Sko,Rko,m2,Wge,Pko,Bko,vO,Iko,Nko,qko,g2,Hge,jko,Dko,FO,Gko,Oko,Vko,h2,Uge,Xko,zko,TO,Qko,Wko,Hko,p2,Jge,Uko,Jko,MO,Yko,Kko,Zko,_2,Yge,eSo,oSo,EO,rSo,tSo,aSo,u2,Kge,nSo,sSo,CO,lSo,iSo,dSo,b2,Zge,cSo,fSo,wO,mSo,gSo,hSo,v2,ehe,pSo,_So,AO,uSo,bSo,vSo,F2,ohe,FSo,TSo,LO,MSo,ESo,CSo,T2,rhe,wSo,ASo,yO,LSo,ySo,xSo,M2,the,$So,kSo,xO,SSo,RSo,PSo,E2,ahe,BSo,ISo,$O,NSo,qSo,jSo,C2,nhe,DSo,GSo,kO,OSo,VSo,XSo,w2,she,zSo,QSo,SO,WSo,HSo,USo,A2,lhe,JSo,YSo,RO,KSo,ZSo,eRo,L2,ihe,oRo,rRo,PO,tRo,aRo,nRo,y2,dhe,sRo,lRo,BO,iRo,dRo,cRo,x2,che,fRo,mRo,IO,gRo,hRo,pRo,$2,_Ro,fhe,uRo,bRo,mhe,vRo,FRo,k2,_Xe,Ji,S2,ghe,z7,TRo,hhe,MRo,uXe,Ro,Q7,ERo,Yi,CRo,NO,wRo,ARo,qO,LRo,yRo,xRo,W7,$Ro,phe,kRo,SRo,RRo,ft,H7,PRo,_he,BRo,IRo,Ki,NRo,uhe,qRo,jRo,jO,DRo,GRo,ORo,R2,VRo,eo,U7,XRo,bhe,zRo,QRo,ja,WRo,vhe,HRo,URo,Fhe,JRo,YRo,The,KRo,ZRo,ePo,W,P2,Mhe,oPo,rPo,DO,tPo,aPo,nPo,B2,Ehe,sPo,lPo,GO,iPo,dPo,cPo,I2,Che,fPo,mPo,OO,gPo,hPo,pPo,N2,whe,_Po,uPo,VO,bPo,vPo,FPo,q2,Ahe,TPo,MPo,XO,EPo,CPo,wPo,j2,Lhe,APo,LPo,zO,yPo,xPo,$Po,D2,yhe,kPo,SPo,QO,RPo,PPo,BPo,G2,xhe,IPo,NPo,WO,qPo,jPo,DPo,O2,$he,GPo,OPo,HO,VPo,XPo,zPo,V2,khe,QPo,WPo,UO,HPo,UPo,JPo,X2,She,YPo,KPo,JO,ZPo,eBo,oBo,z2,Rhe,rBo,tBo,YO,aBo,nBo,sBo,Q2,Phe,lBo,iBo,KO,dBo,cBo,fBo,W2,Bhe,mBo,gBo,ZO,hBo,pBo,_Bo,H2,Ihe,uBo,bBo,eV,vBo,FBo,TBo,U2,Nhe,MBo,EBo,oV,CBo,wBo,ABo,J2,qhe,LBo,yBo,rV,xBo,$Bo,kBo,Y2,jhe,SBo,RBo,tV,PBo,BBo,IBo,K2,Dhe,NBo,qBo,aV,jBo,DBo,GBo,Z2,Ghe,OBo,VBo,nV,XBo,zBo,QBo,eb,Ohe,WBo,HBo,sV,UBo,JBo,YBo,ob,Vhe,KBo,ZBo,lV,eIo,oIo,rIo,rb,Xhe,tIo,aIo,iV,nIo,sIo,lIo,tb,zhe,iIo,dIo,dV,cIo,fIo,mIo,ab,Qhe,gIo,hIo,cV,pIo,_Io,uIo,nb,Whe,bIo,vIo,fV,FIo,TIo,MIo,sb,Hhe,EIo,CIo,mV,wIo,AIo,LIo,lb,Uhe,yIo,xIo,gV,$Io,kIo,SIo,ib,Jhe,RIo,PIo,hV,BIo,IIo,NIo,db,Yhe,qIo,jIo,pV,DIo,GIo,OIo,cb,Khe,VIo,XIo,_V,zIo,QIo,WIo,fb,Zhe,HIo,UIo,uV,JIo,YIo,KIo,mb,epe,ZIo,eNo,bV,oNo,rNo,tNo,gb,ope,aNo,nNo,rpe,sNo,lNo,iNo,hb,tpe,dNo,cNo,vV,fNo,mNo,gNo,pb,ape,hNo,pNo,FV,_No,uNo,bNo,_b,npe,vNo,FNo,TV,TNo,MNo,ENo,ub,spe,CNo,wNo,MV,ANo,LNo,yNo,bb,xNo,lpe,$No,kNo,ipe,SNo,RNo,vb,bXe,Zi,Fb,dpe,J7,PNo,cpe,BNo,vXe,Po,Y7,INo,ed,NNo,EV,qNo,jNo,CV,DNo,GNo,ONo,K7,VNo,fpe,XNo,zNo,QNo,mt,Z7,WNo,mpe,HNo,UNo,od,JNo,gpe,YNo,KNo,wV,ZNo,eqo,oqo,Tb,rqo,oo,eL,tqo,hpe,aqo,nqo,Da,sqo,ppe,lqo,iqo,_pe,dqo,cqo,upe,fqo,mqo,gqo,pe,Mb,bpe,hqo,pqo,AV,_qo,uqo,bqo,Eb,vpe,vqo,Fqo,LV,Tqo,Mqo,Eqo,Cb,Fpe,Cqo,wqo,yV,Aqo,Lqo,yqo,wb,Tpe,xqo,$qo,xV,kqo,Sqo,Rqo,Ab,Mpe,Pqo,Bqo,$V,Iqo,Nqo,qqo,Lb,Epe,jqo,Dqo,kV,Gqo,Oqo,Vqo,yb,Cpe,Xqo,zqo,SV,Qqo,Wqo,Hqo,xb,wpe,Uqo,Jqo,RV,Yqo,Kqo,Zqo,$b,Ape,ejo,ojo,PV,rjo,tjo,ajo,kb,Lpe,njo,sjo,BV,ljo,ijo,djo,Sb,ype,cjo,fjo,IV,mjo,gjo,hjo,Rb,xpe,pjo,_jo,NV,ujo,bjo,vjo,Pb,$pe,Fjo,Tjo,qV,Mjo,Ejo,Cjo,Bb,kpe,wjo,Ajo,jV,Ljo,yjo,xjo,Ib,Spe,$jo,kjo,DV,Sjo,Rjo,Pjo,Nb,Rpe,Bjo,Ijo,GV,Njo,qjo,jjo,qb,Ppe,Djo,Gjo,OV,Ojo,Vjo,Xjo,jb,Bpe,zjo,Qjo,VV,Wjo,Hjo,Ujo,Db,Jjo,Ipe,Yjo,Kjo,Npe,Zjo,eDo,Gb,FXe,rd,Ob,qpe,oL,oDo,jpe,rDo,TXe,Bo,rL,tDo,td,aDo,XV,nDo,sDo,zV,lDo,iDo,dDo,tL,cDo,Dpe,fDo,mDo,gDo,gt,aL,hDo,Gpe,pDo,_Do,ad,uDo,Ope,bDo,vDo,QV,FDo,TDo,MDo,Vb,EDo,ro,nL,CDo,Vpe,wDo,ADo,Ga,LDo,Xpe,yDo,xDo,zpe,$Do,kDo,Qpe,SDo,RDo,PDo,N,Xb,Wpe,BDo,IDo,WV,NDo,qDo,jDo,zb,Hpe,DDo,GDo,HV,ODo,VDo,XDo,Qb,Upe,zDo,QDo,UV,WDo,HDo,UDo,Wb,Jpe,JDo,YDo,JV,KDo,ZDo,eGo,Hb,Ype,oGo,rGo,YV,tGo,aGo,nGo,Ub,Kpe,sGo,lGo,KV,iGo,dGo,cGo,Jb,Zpe,fGo,mGo,ZV,gGo,hGo,pGo,Yb,e_e,_Go,uGo,eX,bGo,vGo,FGo,Kb,o_e,TGo,MGo,oX,EGo,CGo,wGo,Zb,r_e,AGo,LGo,rX,yGo,xGo,$Go,ev,t_e,kGo,SGo,tX,RGo,PGo,BGo,ov,a_e,IGo,NGo,aX,qGo,jGo,DGo,rv,n_e,GGo,OGo,nX,VGo,XGo,zGo,tv,s_e,QGo,WGo,sX,HGo,UGo,JGo,av,l_e,YGo,KGo,lX,ZGo,eOo,oOo,nv,i_e,rOo,tOo,iX,aOo,nOo,sOo,sv,d_e,lOo,iOo,dX,dOo,cOo,fOo,lv,c_e,mOo,gOo,cX,hOo,pOo,_Oo,iv,f_e,uOo,bOo,fX,vOo,FOo,TOo,dv,m_e,MOo,EOo,mX,COo,wOo,AOo,cv,g_e,LOo,yOo,gX,xOo,$Oo,kOo,fv,h_e,SOo,ROo,hX,POo,BOo,IOo,mv,p_e,NOo,qOo,pX,jOo,DOo,GOo,gv,__e,OOo,VOo,_X,XOo,zOo,QOo,hv,u_e,WOo,HOo,uX,UOo,JOo,YOo,pv,b_e,KOo,ZOo,bX,eVo,oVo,rVo,_v,v_e,tVo,aVo,vX,nVo,sVo,lVo,uv,F_e,iVo,dVo,FX,cVo,fVo,mVo,bv,T_e,gVo,hVo,TX,pVo,_Vo,uVo,vv,M_e,bVo,vVo,MX,FVo,TVo,MVo,Fv,E_e,EVo,CVo,EX,wVo,AVo,LVo,Tv,C_e,yVo,xVo,CX,$Vo,kVo,SVo,Mv,w_e,RVo,PVo,wX,BVo,IVo,NVo,Ev,A_e,qVo,jVo,AX,DVo,GVo,OVo,Cv,L_e,VVo,XVo,LX,zVo,QVo,WVo,wv,y_e,HVo,UVo,yX,JVo,YVo,KVo,Av,x_e,ZVo,eXo,xX,oXo,rXo,tXo,Lv,$_e,aXo,nXo,$X,sXo,lXo,iXo,yv,k_e,dXo,cXo,kX,fXo,mXo,gXo,xv,S_e,hXo,pXo,SX,_Xo,uXo,bXo,$v,R_e,vXo,FXo,RX,TXo,MXo,EXo,kv,P_e,CXo,wXo,PX,AXo,LXo,yXo,Sv,B_e,xXo,$Xo,BX,kXo,SXo,RXo,Rv,I_e,PXo,BXo,IX,IXo,NXo,qXo,Pv,N_e,jXo,DXo,NX,GXo,OXo,VXo,Bv,q_e,XXo,zXo,qX,QXo,WXo,HXo,Iv,j_e,UXo,JXo,jX,YXo,KXo,ZXo,Nv,D_e,ezo,ozo,DX,rzo,tzo,azo,qv,G_e,nzo,szo,GX,lzo,izo,dzo,jv,O_e,czo,fzo,OX,mzo,gzo,hzo,Dv,pzo,V_e,_zo,uzo,X_e,bzo,vzo,Gv,MXe,nd,Ov,z_e,sL,Fzo,Q_e,Tzo,EXe,Io,lL,Mzo,sd,Ezo,VX,Czo,wzo,XX,Azo,Lzo,yzo,iL,xzo,W_e,$zo,kzo,Szo,ht,dL,Rzo,H_e,Pzo,Bzo,ld,Izo,U_e,Nzo,qzo,zX,jzo,Dzo,Gzo,Vv,Ozo,to,cL,Vzo,J_e,Xzo,zzo,Oa,Qzo,Y_e,Wzo,Hzo,K_e,Uzo,Jzo,Z_e,Yzo,Kzo,Zzo,Z,Xv,eue,eQo,oQo,QX,rQo,tQo,aQo,zv,oue,nQo,sQo,WX,lQo,iQo,dQo,Qv,rue,cQo,fQo,HX,mQo,gQo,hQo,Wv,tue,pQo,_Qo,UX,uQo,bQo,vQo,Hv,aue,FQo,TQo,JX,MQo,EQo,CQo,Uv,nue,wQo,AQo,YX,LQo,yQo,xQo,Jv,sue,$Qo,kQo,KX,SQo,RQo,PQo,Yv,lue,BQo,IQo,ZX,NQo,qQo,jQo,Kv,iue,DQo,GQo,ez,OQo,VQo,XQo,Zv,due,zQo,QQo,oz,WQo,HQo,UQo,eF,cue,JQo,YQo,rz,KQo,ZQo,eWo,oF,fue,oWo,rWo,tz,tWo,aWo,nWo,rF,mue,sWo,lWo,az,iWo,dWo,cWo,tF,gue,fWo,mWo,nz,gWo,hWo,pWo,aF,hue,_Wo,uWo,sz,bWo,vWo,FWo,nF,pue,TWo,MWo,lz,EWo,CWo,wWo,sF,_ue,AWo,LWo,iz,yWo,xWo,$Wo,lF,uue,kWo,SWo,dz,RWo,PWo,BWo,iF,bue,IWo,NWo,cz,qWo,jWo,DWo,dF,vue,GWo,OWo,fz,VWo,XWo,zWo,cF,Fue,QWo,WWo,mz,HWo,UWo,JWo,fF,Tue,YWo,KWo,gz,ZWo,eHo,oHo,mF,Mue,rHo,tHo,hz,aHo,nHo,sHo,gF,Eue,lHo,iHo,pz,dHo,cHo,fHo,hF,Cue,mHo,gHo,_z,hHo,pHo,_Ho,pF,wue,uHo,bHo,uz,vHo,FHo,THo,_F,Aue,MHo,EHo,bz,CHo,wHo,AHo,uF,Lue,LHo,yHo,vz,xHo,$Ho,kHo,bF,yue,SHo,RHo,Fz,PHo,BHo,IHo,vF,xue,NHo,qHo,Tz,jHo,DHo,GHo,FF,OHo,$ue,VHo,XHo,kue,zHo,QHo,TF,CXe,id,MF,Sue,fL,WHo,Rue,HHo,wXe,No,mL,UHo,dd,JHo,Mz,YHo,KHo,Ez,ZHo,eUo,oUo,gL,rUo,Pue,tUo,aUo,nUo,pt,hL,sUo,Bue,lUo,iUo,cd,dUo,Iue,cUo,fUo,Cz,mUo,gUo,hUo,EF,pUo,ao,pL,_Uo,Nue,uUo,bUo,Va,vUo,que,FUo,TUo,jue,MUo,EUo,Due,CUo,wUo,AUo,qo,CF,Gue,LUo,yUo,wz,xUo,$Uo,kUo,wF,Oue,SUo,RUo,Az,PUo,BUo,IUo,AF,Vue,NUo,qUo,Lz,jUo,DUo,GUo,LF,Xue,OUo,VUo,yz,XUo,zUo,QUo,yF,zue,WUo,HUo,xz,UUo,JUo,YUo,xF,Que,KUo,ZUo,$z,eJo,oJo,rJo,$F,tJo,Wue,aJo,nJo,Hue,sJo,lJo,kF,AXe,fd,SF,Uue,_L,iJo,Jue,dJo,LXe,jo,uL,cJo,md,fJo,kz,mJo,gJo,Sz,hJo,pJo,_Jo,bL,uJo,Yue,bJo,vJo,FJo,_t,vL,TJo,Kue,MJo,EJo,gd,CJo,Zue,wJo,AJo,Rz,LJo,yJo,xJo,RF,$Jo,no,FL,kJo,e1e,SJo,RJo,Xa,PJo,o1e,BJo,IJo,r1e,NJo,qJo,t1e,jJo,DJo,GJo,U,PF,a1e,OJo,VJo,Pz,XJo,zJo,QJo,BF,n1e,WJo,HJo,Bz,UJo,JJo,YJo,IF,s1e,KJo,ZJo,Iz,eYo,oYo,rYo,NF,l1e,tYo,aYo,Nz,nYo,sYo,lYo,qF,i1e,iYo,dYo,qz,cYo,fYo,mYo,jF,d1e,gYo,hYo,jz,pYo,_Yo,uYo,DF,c1e,bYo,vYo,Dz,FYo,TYo,MYo,GF,f1e,EYo,CYo,Gz,wYo,AYo,LYo,OF,m1e,yYo,xYo,Oz,$Yo,kYo,SYo,VF,g1e,RYo,PYo,Vz,BYo,IYo,NYo,XF,h1e,qYo,jYo,Xz,DYo,GYo,OYo,zF,p1e,VYo,XYo,zz,zYo,QYo,WYo,QF,_1e,HYo,UYo,Qz,JYo,YYo,KYo,WF,u1e,ZYo,eKo,Wz,oKo,rKo,tKo,HF,b1e,aKo,nKo,Hz,sKo,lKo,iKo,UF,v1e,dKo,cKo,Uz,fKo,mKo,gKo,JF,F1e,hKo,pKo,Jz,_Ko,uKo,bKo,YF,T1e,vKo,FKo,Yz,TKo,MKo,EKo,KF,M1e,CKo,wKo,Kz,AKo,LKo,yKo,ZF,E1e,xKo,$Ko,Zz,kKo,SKo,RKo,e6,C1e,PKo,BKo,eQ,IKo,NKo,qKo,o6,w1e,jKo,DKo,oQ,GKo,OKo,VKo,r6,A1e,XKo,zKo,rQ,QKo,WKo,HKo,t6,L1e,UKo,JKo,tQ,YKo,KKo,ZKo,a6,y1e,eZo,oZo,aQ,rZo,tZo,aZo,n6,x1e,nZo,sZo,nQ,lZo,iZo,dZo,s6,$1e,cZo,fZo,sQ,mZo,gZo,hZo,l6,k1e,pZo,_Zo,lQ,uZo,bZo,vZo,i6,S1e,FZo,TZo,iQ,MZo,EZo,CZo,d6,R1e,wZo,AZo,dQ,LZo,yZo,xZo,c6,P1e,$Zo,kZo,cQ,SZo,RZo,PZo,f6,B1e,BZo,IZo,fQ,NZo,qZo,jZo,m6,I1e,DZo,GZo,mQ,OZo,VZo,XZo,g6,N1e,zZo,QZo,gQ,WZo,HZo,UZo,h6,q1e,JZo,YZo,hQ,KZo,ZZo,eer,p6,j1e,oer,rer,pQ,ter,aer,ner,_6,ser,D1e,ler,ier,G1e,der,cer,u6,yXe,hd,b6,O1e,TL,fer,V1e,mer,xXe,Do,ML,ger,pd,her,_Q,per,_er,uQ,uer,ber,ver,EL,Fer,X1e,Ter,Mer,Eer,ut,CL,Cer,z1e,wer,Aer,_d,Ler,Q1e,yer,xer,bQ,$er,ker,Ser,v6,Rer,so,wL,Per,W1e,Ber,Ier,za,Ner,H1e,qer,jer,U1e,Der,Ger,J1e,Oer,Ver,Xer,V,F6,Y1e,zer,Qer,vQ,Wer,Her,Uer,T6,K1e,Jer,Yer,FQ,Ker,Zer,eor,M6,Z1e,oor,ror,TQ,tor,aor,nor,E6,e2e,sor,lor,MQ,ior,dor,cor,C6,o2e,mor,gor,EQ,hor,por,_or,w6,r2e,uor,bor,CQ,vor,For,Tor,A6,t2e,Mor,Eor,wQ,Cor,wor,Aor,L6,a2e,Lor,yor,AQ,xor,$or,kor,y6,n2e,Sor,Ror,LQ,Por,Bor,Ior,x6,s2e,Nor,qor,yQ,jor,Dor,Gor,$6,l2e,Oor,Vor,xQ,Xor,zor,Qor,k6,i2e,Wor,Hor,$Q,Uor,Jor,Yor,S6,d2e,Kor,Zor,kQ,err,orr,rrr,R6,c2e,trr,arr,SQ,nrr,srr,lrr,P6,f2e,irr,drr,RQ,crr,frr,mrr,B6,m2e,grr,hrr,PQ,prr,_rr,urr,I6,g2e,brr,vrr,BQ,Frr,Trr,Mrr,N6,h2e,Err,Crr,IQ,wrr,Arr,Lrr,q6,p2e,yrr,xrr,NQ,$rr,krr,Srr,j6,_2e,Rrr,Prr,qQ,Brr,Irr,Nrr,D6,u2e,qrr,jrr,jQ,Drr,Grr,Orr,G6,b2e,Vrr,Xrr,DQ,zrr,Qrr,Wrr,O6,v2e,Hrr,Urr,GQ,Jrr,Yrr,Krr,V6,F2e,Zrr,etr,OQ,otr,rtr,ttr,X6,T2e,atr,ntr,VQ,str,ltr,itr,z6,M2e,dtr,ctr,XQ,ftr,mtr,gtr,Q6,E2e,htr,ptr,zQ,_tr,utr,btr,W6,C2e,vtr,Ftr,QQ,Ttr,Mtr,Etr,H6,w2e,Ctr,wtr,WQ,Atr,Ltr,ytr,U6,A2e,xtr,$tr,HQ,ktr,Str,Rtr,J6,L2e,Ptr,Btr,UQ,Itr,Ntr,qtr,Y6,y2e,jtr,Dtr,JQ,Gtr,Otr,Vtr,K6,x2e,Xtr,ztr,YQ,Qtr,Wtr,Htr,Z6,$2e,Utr,Jtr,KQ,Ytr,Ktr,Ztr,eT,k2e,ear,oar,ZQ,rar,tar,aar,oT,S2e,nar,sar,eW,lar,iar,dar,rT,R2e,car,far,oW,mar,gar,har,tT,P2e,par,_ar,rW,uar,bar,Far,aT,B2e,Tar,Mar,tW,Ear,Car,war,nT,I2e,Aar,Lar,aW,yar,xar,$ar,sT,N2e,kar,Sar,nW,Rar,Par,Bar,lT,q2e,Iar,Nar,sW,qar,jar,Dar,iT,Gar,j2e,Oar,Var,D2e,Xar,zar,dT,$Xe,ud,cT,G2e,AL,Qar,O2e,War,kXe,Go,LL,Har,bd,Uar,lW,Jar,Yar,iW,Kar,Zar,enr,yL,onr,V2e,rnr,tnr,anr,bt,xL,nnr,X2e,snr,lnr,vd,inr,z2e,dnr,cnr,dW,fnr,mnr,gnr,fT,hnr,lo,$L,pnr,Q2e,_nr,unr,Qa,bnr,W2e,vnr,Fnr,H2e,Tnr,Mnr,U2e,Enr,Cnr,wnr,J2e,mT,Y2e,Anr,Lnr,cW,ynr,xnr,$nr,gT,knr,K2e,Snr,Rnr,Z2e,Pnr,Bnr,hT,SXe,Fd,pT,ebe,kL,Inr,obe,Nnr,RXe,Oo,SL,qnr,Td,jnr,fW,Dnr,Gnr,mW,Onr,Vnr,Xnr,RL,znr,rbe,Qnr,Wnr,Hnr,vt,PL,Unr,tbe,Jnr,Ynr,Md,Knr,abe,Znr,esr,gW,osr,rsr,tsr,_T,asr,io,BL,nsr,nbe,ssr,lsr,Wa,isr,sbe,dsr,csr,lbe,fsr,msr,ibe,gsr,hsr,psr,ve,uT,dbe,_sr,usr,hW,bsr,vsr,Fsr,bT,cbe,Tsr,Msr,pW,Esr,Csr,wsr,vT,fbe,Asr,Lsr,_W,ysr,xsr,$sr,FT,mbe,ksr,Ssr,uW,Rsr,Psr,Bsr,Hs,gbe,Isr,Nsr,bW,qsr,jsr,vW,Dsr,Gsr,Osr,TT,hbe,Vsr,Xsr,FW,zsr,Qsr,Wsr,Us,pbe,Hsr,Usr,TW,Jsr,Ysr,MW,Ksr,Zsr,elr,MT,_be,olr,rlr,EW,tlr,alr,nlr,Ft,ube,slr,llr,CW,ilr,dlr,wW,clr,flr,AW,mlr,glr,hlr,ET,bbe,plr,_lr,LW,ulr,blr,vlr,CT,vbe,Flr,Tlr,yW,Mlr,Elr,Clr,wT,Fbe,wlr,Alr,xW,Llr,ylr,xlr,AT,Tbe,$lr,klr,$W,Slr,Rlr,Plr,LT,Mbe,Blr,Ilr,kW,Nlr,qlr,jlr,yT,Ebe,Dlr,Glr,SW,Olr,Vlr,Xlr,xT,Cbe,zlr,Qlr,RW,Wlr,Hlr,Ulr,$T,Jlr,wbe,Ylr,Klr,Abe,Zlr,eir,kT,PXe,Ed,ST,Lbe,IL,oir,ybe,rir,BXe,Vo,NL,tir,Cd,air,PW,nir,sir,BW,lir,iir,dir,qL,cir,xbe,fir,mir,gir,Tt,jL,hir,$be,pir,_ir,wd,uir,kbe,bir,vir,IW,Fir,Tir,Mir,RT,Eir,co,DL,Cir,Sbe,wir,Air,Ha,Lir,Rbe,yir,xir,Pbe,$ir,kir,Bbe,Sir,Rir,Pir,Ibe,PT,Nbe,Bir,Iir,NW,Nir,qir,jir,BT,Dir,qbe,Gir,Oir,jbe,Vir,Xir,IT,IXe,Ad,NT,Dbe,GL,zir,Gbe,Qir,NXe,Xo,OL,Wir,Ld,Hir,qW,Uir,Jir,jW,Yir,Kir,Zir,VL,edr,Obe,odr,rdr,tdr,Mt,XL,adr,Vbe,ndr,sdr,yd,ldr,Xbe,idr,ddr,DW,cdr,fdr,mdr,qT,gdr,fo,zL,hdr,zbe,pdr,_dr,Ua,udr,Qbe,bdr,vdr,Wbe,Fdr,Tdr,Hbe,Mdr,Edr,Cdr,Ube,jT,Jbe,wdr,Adr,GW,Ldr,ydr,xdr,DT,$dr,Ybe,kdr,Sdr,Kbe,Rdr,Pdr,GT,qXe,xd,OT,Zbe,QL,Bdr,eve,Idr,jXe,zo,WL,Ndr,$d,qdr,OW,jdr,Ddr,VW,Gdr,Odr,Vdr,HL,Xdr,ove,zdr,Qdr,Wdr,Et,UL,Hdr,rve,Udr,Jdr,kd,Ydr,tve,Kdr,Zdr,XW,ecr,ocr,rcr,VT,tcr,mo,JL,acr,ave,ncr,scr,Ja,lcr,nve,icr,dcr,sve,ccr,fcr,lve,mcr,gcr,hcr,Pe,XT,ive,pcr,_cr,zW,ucr,bcr,vcr,zT,dve,Fcr,Tcr,QW,Mcr,Ecr,Ccr,QT,cve,wcr,Acr,WW,Lcr,ycr,xcr,WT,fve,$cr,kcr,HW,Scr,Rcr,Pcr,HT,mve,Bcr,Icr,UW,Ncr,qcr,jcr,UT,gve,Dcr,Gcr,JW,Ocr,Vcr,Xcr,JT,hve,zcr,Qcr,YW,Wcr,Hcr,Ucr,YT,pve,Jcr,Ycr,KW,Kcr,Zcr,efr,KT,_ve,ofr,rfr,ZW,tfr,afr,nfr,ZT,sfr,uve,lfr,ifr,bve,dfr,cfr,e8,DXe,Sd,o8,vve,YL,ffr,Fve,mfr,GXe,Qo,KL,gfr,Rd,hfr,eH,pfr,_fr,oH,ufr,bfr,vfr,ZL,Ffr,Tve,Tfr,Mfr,Efr,Ct,ey,Cfr,Mve,wfr,Afr,Pd,Lfr,Eve,yfr,xfr,rH,$fr,kfr,Sfr,r8,Rfr,go,oy,Pfr,Cve,Bfr,Ifr,Ya,Nfr,wve,qfr,jfr,Ave,Dfr,Gfr,Lve,Ofr,Vfr,Xfr,rt,t8,yve,zfr,Qfr,tH,Wfr,Hfr,Ufr,a8,xve,Jfr,Yfr,aH,Kfr,Zfr,emr,n8,$ve,omr,rmr,nH,tmr,amr,nmr,s8,kve,smr,lmr,sH,imr,dmr,cmr,l8,Sve,fmr,mmr,lH,gmr,hmr,pmr,i8,_mr,Rve,umr,bmr,Pve,vmr,Fmr,d8,OXe,Bd,c8,Bve,ry,Tmr,Ive,Mmr,VXe,Wo,ty,Emr,Id,Cmr,iH,wmr,Amr,dH,Lmr,ymr,xmr,ay,$mr,Nve,kmr,Smr,Rmr,wt,ny,Pmr,qve,Bmr,Imr,Nd,Nmr,jve,qmr,jmr,cH,Dmr,Gmr,Omr,f8,Vmr,ho,sy,Xmr,Dve,zmr,Qmr,Ka,Wmr,Gve,Hmr,Umr,Ove,Jmr,Ymr,Vve,Kmr,Zmr,egr,Le,m8,Xve,ogr,rgr,fH,tgr,agr,ngr,g8,zve,sgr,lgr,mH,igr,dgr,cgr,h8,Qve,fgr,mgr,gH,ggr,hgr,pgr,p8,Wve,_gr,ugr,hH,bgr,vgr,Fgr,_8,Hve,Tgr,Mgr,pH,Egr,Cgr,wgr,u8,Uve,Agr,Lgr,_H,ygr,xgr,$gr,b8,Jve,kgr,Sgr,uH,Rgr,Pgr,Bgr,v8,Yve,Igr,Ngr,bH,qgr,jgr,Dgr,F8,Kve,Ggr,Ogr,vH,Vgr,Xgr,zgr,T8,Zve,Qgr,Wgr,FH,Hgr,Ugr,Jgr,M8,Ygr,eFe,Kgr,Zgr,oFe,ehr,ohr,E8,XXe,qd,C8,rFe,ly,rhr,tFe,thr,zXe,Ho,iy,ahr,jd,nhr,TH,shr,lhr,MH,ihr,dhr,chr,dy,fhr,aFe,mhr,ghr,hhr,At,cy,phr,nFe,_hr,uhr,Dd,bhr,sFe,vhr,Fhr,EH,Thr,Mhr,Ehr,w8,Chr,po,fy,whr,lFe,Ahr,Lhr,Za,yhr,iFe,xhr,$hr,dFe,khr,Shr,cFe,Rhr,Phr,Bhr,my,A8,fFe,Ihr,Nhr,CH,qhr,jhr,Dhr,L8,mFe,Ghr,Ohr,wH,Vhr,Xhr,zhr,y8,Qhr,gFe,Whr,Hhr,hFe,Uhr,Jhr,x8,QXe,Gd,$8,pFe,gy,Yhr,_Fe,Khr,WXe,Uo,hy,Zhr,Od,epr,AH,opr,rpr,LH,tpr,apr,npr,py,spr,uFe,lpr,ipr,dpr,Lt,_y,cpr,bFe,fpr,mpr,Vd,gpr,vFe,hpr,ppr,yH,_pr,upr,bpr,k8,vpr,_o,uy,Fpr,FFe,Tpr,Mpr,en,Epr,TFe,Cpr,wpr,MFe,Apr,Lpr,EFe,ypr,xpr,$pr,tt,S8,CFe,kpr,Spr,xH,Rpr,Ppr,Bpr,R8,wFe,Ipr,Npr,$H,qpr,jpr,Dpr,P8,AFe,Gpr,Opr,kH,Vpr,Xpr,zpr,B8,LFe,Qpr,Wpr,SH,Hpr,Upr,Jpr,I8,yFe,Ypr,Kpr,RH,Zpr,e_r,o_r,N8,r_r,xFe,t_r,a_r,$Fe,n_r,s_r,q8,HXe,Xd,j8,kFe,by,l_r,SFe,i_r,UXe,Jo,vy,d_r,zd,c_r,PH,f_r,m_r,BH,g_r,h_r,p_r,Fy,__r,RFe,u_r,b_r,v_r,yt,Ty,F_r,PFe,T_r,M_r,Qd,E_r,BFe,C_r,w_r,IH,A_r,L_r,y_r,D8,x_r,uo,My,$_r,IFe,k_r,S_r,on,R_r,NFe,P_r,B_r,qFe,I_r,N_r,jFe,q_r,j_r,D_r,Wd,G8,DFe,G_r,O_r,NH,V_r,X_r,z_r,O8,GFe,Q_r,W_r,qH,H_r,U_r,J_r,V8,OFe,Y_r,K_r,jH,Z_r,eur,our,X8,rur,VFe,tur,aur,XFe,nur,sur,z8,JXe,Hd,Q8,zFe,Ey,lur,QFe,iur,YXe,Yo,Cy,dur,Ud,cur,DH,fur,mur,GH,gur,hur,pur,wy,_ur,WFe,uur,bur,vur,xt,Ay,Fur,HFe,Tur,Mur,Jd,Eur,UFe,Cur,wur,OH,Aur,Lur,yur,W8,xur,bo,Ly,$ur,JFe,kur,Sur,rn,Rur,YFe,Pur,Bur,KFe,Iur,Nur,ZFe,qur,jur,Dur,yy,H8,e6e,Gur,Our,VH,Vur,Xur,zur,U8,o6e,Qur,Wur,XH,Hur,Uur,Jur,J8,Yur,r6e,Kur,Zur,t6e,e1r,o1r,Y8,KXe,Yd,K8,a6e,xy,r1r,n6e,t1r,ZXe,Ko,$y,a1r,Kd,n1r,zH,s1r,l1r,QH,i1r,d1r,c1r,ky,f1r,s6e,m1r,g1r,h1r,$t,Sy,p1r,l6e,_1r,u1r,Zd,b1r,i6e,v1r,F1r,WH,T1r,M1r,E1r,Z8,C1r,vo,Ry,w1r,d6e,A1r,L1r,tn,y1r,c6e,x1r,$1r,f6e,k1r,S1r,m6e,R1r,P1r,B1r,g6e,e9,h6e,I1r,N1r,HH,q1r,j1r,D1r,o9,G1r,p6e,O1r,V1r,_6e,X1r,z1r,r9,eze,ec,t9,u6e,Py,Q1r,b6e,W1r,oze,Zo,By,H1r,oc,U1r,UH,J1r,Y1r,JH,K1r,Z1r,e2r,Iy,o2r,v6e,r2r,t2r,a2r,kt,Ny,n2r,F6e,s2r,l2r,rc,i2r,T6e,d2r,c2r,YH,f2r,m2r,g2r,a9,h2r,Fo,qy,p2r,M6e,_2r,u2r,an,b2r,E6e,v2r,F2r,C6e,T2r,M2r,w6e,E2r,C2r,w2r,at,n9,A6e,A2r,L2r,KH,y2r,x2r,$2r,s9,L6e,k2r,S2r,ZH,R2r,P2r,B2r,l9,y6e,I2r,N2r,eU,q2r,j2r,D2r,i9,x6e,G2r,O2r,oU,V2r,X2r,z2r,d9,$6e,Q2r,W2r,rU,H2r,U2r,J2r,c9,Y2r,k6e,K2r,Z2r,S6e,ebr,obr,f9,rze,tc,m9,R6e,jy,rbr,P6e,tbr,tze,er,Dy,abr,ac,nbr,tU,sbr,lbr,aU,ibr,dbr,cbr,Gy,fbr,B6e,mbr,gbr,hbr,St,Oy,pbr,I6e,_br,ubr,nc,bbr,N6e,vbr,Fbr,nU,Tbr,Mbr,Ebr,g9,Cbr,To,Vy,wbr,q6e,Abr,Lbr,nn,ybr,j6e,xbr,$br,D6e,kbr,Sbr,G6e,Rbr,Pbr,Bbr,O6e,h9,V6e,Ibr,Nbr,sU,qbr,jbr,Dbr,p9,Gbr,X6e,Obr,Vbr,z6e,Xbr,zbr,_9,aze,sc,u9,Q6e,Xy,Qbr,W6e,Wbr,nze,or,zy,Hbr,lc,Ubr,lU,Jbr,Ybr,iU,Kbr,Zbr,evr,Qy,ovr,H6e,rvr,tvr,avr,Rt,Wy,nvr,U6e,svr,lvr,ic,ivr,J6e,dvr,cvr,dU,fvr,mvr,gvr,b9,hvr,xr,Hy,pvr,Y6e,_vr,uvr,sn,bvr,K6e,vvr,Fvr,Z6e,Tvr,Mvr,eTe,Evr,Cvr,wvr,q,v9,oTe,Avr,Lvr,cU,yvr,xvr,$vr,F9,rTe,kvr,Svr,fU,Rvr,Pvr,Bvr,T9,tTe,Ivr,Nvr,mU,qvr,jvr,Dvr,M9,aTe,Gvr,Ovr,gU,Vvr,Xvr,zvr,E9,nTe,Qvr,Wvr,hU,Hvr,Uvr,Jvr,C9,sTe,Yvr,Kvr,pU,Zvr,eFr,oFr,w9,lTe,rFr,tFr,_U,aFr,nFr,sFr,A9,iTe,lFr,iFr,uU,dFr,cFr,fFr,L9,dTe,mFr,gFr,bU,hFr,pFr,_Fr,y9,cTe,uFr,bFr,vU,vFr,FFr,TFr,x9,fTe,MFr,EFr,FU,CFr,wFr,AFr,$9,mTe,LFr,yFr,TU,xFr,$Fr,kFr,k9,gTe,SFr,RFr,MU,PFr,BFr,IFr,S9,hTe,NFr,qFr,EU,jFr,DFr,GFr,R9,pTe,OFr,VFr,CU,XFr,zFr,QFr,P9,_Te,WFr,HFr,wU,UFr,JFr,YFr,B9,uTe,KFr,ZFr,AU,e6r,o6r,r6r,I9,bTe,t6r,a6r,LU,n6r,s6r,l6r,Js,vTe,i6r,d6r,yU,c6r,f6r,xU,m6r,g6r,h6r,N9,FTe,p6r,_6r,$U,u6r,b6r,v6r,q9,TTe,F6r,T6r,kU,M6r,E6r,C6r,j9,MTe,w6r,A6r,SU,L6r,y6r,x6r,D9,ETe,$6r,k6r,RU,S6r,R6r,P6r,G9,CTe,B6r,I6r,PU,N6r,q6r,j6r,O9,wTe,D6r,G6r,BU,O6r,V6r,X6r,V9,ATe,z6r,Q6r,IU,W6r,H6r,U6r,X9,LTe,J6r,Y6r,NU,K6r,Z6r,eTr,z9,yTe,oTr,rTr,qU,tTr,aTr,nTr,Q9,xTe,sTr,lTr,jU,iTr,dTr,cTr,W9,$Te,fTr,mTr,DU,gTr,hTr,pTr,H9,kTe,_Tr,uTr,GU,bTr,vTr,FTr,U9,STe,TTr,MTr,OU,ETr,CTr,wTr,J9,RTe,ATr,LTr,VU,yTr,xTr,$Tr,Y9,PTe,kTr,STr,XU,RTr,PTr,BTr,K9,BTe,ITr,NTr,zU,qTr,jTr,DTr,Z9,ITe,GTr,OTr,QU,VTr,XTr,zTr,eM,NTe,QTr,WTr,WU,HTr,UTr,JTr,oM,qTe,YTr,KTr,HU,ZTr,e8r,o8r,rM,jTe,r8r,t8r,UU,a8r,n8r,s8r,tM,DTe,l8r,i8r,JU,d8r,c8r,f8r,aM,GTe,m8r,g8r,YU,h8r,p8r,_8r,nM,OTe,u8r,b8r,KU,v8r,F8r,T8r,sM,VTe,M8r,E8r,ZU,C8r,w8r,A8r,lM,XTe,L8r,y8r,eJ,x8r,$8r,k8r,iM,zTe,S8r,R8r,oJ,P8r,B8r,I8r,dM,QTe,N8r,q8r,rJ,j8r,D8r,G8r,cM,WTe,O8r,V8r,tJ,X8r,z8r,Q8r,fM,HTe,W8r,H8r,aJ,U8r,J8r,Y8r,mM,UTe,K8r,Z8r,nJ,e9r,o9r,r9r,gM,JTe,t9r,a9r,sJ,n9r,s9r,l9r,hM,sze,dc,pM,YTe,Uy,i9r,KTe,d9r,lze,rr,Jy,c9r,cc,f9r,lJ,m9r,g9r,iJ,h9r,p9r,_9r,Yy,u9r,ZTe,b9r,v9r,F9r,Pt,Ky,T9r,e8e,M9r,E9r,fc,C9r,o8e,w9r,A9r,dJ,L9r,y9r,x9r,_M,$9r,$r,Zy,k9r,r8e,S9r,R9r,ln,P9r,t8e,B9r,I9r,a8e,N9r,q9r,n8e,j9r,D9r,G9r,se,uM,s8e,O9r,V9r,cJ,X9r,z9r,Q9r,bM,l8e,W9r,H9r,fJ,U9r,J9r,Y9r,vM,i8e,K9r,Z9r,mJ,eMr,oMr,rMr,FM,d8e,tMr,aMr,gJ,nMr,sMr,lMr,TM,c8e,iMr,dMr,hJ,cMr,fMr,mMr,MM,f8e,gMr,hMr,pJ,pMr,_Mr,uMr,EM,m8e,bMr,vMr,_J,FMr,TMr,MMr,CM,g8e,EMr,CMr,uJ,wMr,AMr,LMr,wM,h8e,yMr,xMr,bJ,$Mr,kMr,SMr,AM,p8e,RMr,PMr,vJ,BMr,IMr,NMr,LM,_8e,qMr,jMr,FJ,DMr,GMr,OMr,yM,u8e,VMr,XMr,TJ,zMr,QMr,WMr,xM,b8e,HMr,UMr,MJ,JMr,YMr,KMr,$M,v8e,ZMr,e4r,EJ,o4r,r4r,t4r,kM,F8e,a4r,n4r,CJ,s4r,l4r,i4r,SM,T8e,d4r,c4r,wJ,f4r,m4r,g4r,RM,M8e,h4r,p4r,AJ,_4r,u4r,b4r,PM,E8e,v4r,F4r,LJ,T4r,M4r,E4r,BM,C8e,C4r,w4r,yJ,A4r,L4r,y4r,IM,w8e,x4r,$4r,xJ,k4r,S4r,R4r,NM,A8e,P4r,B4r,$J,I4r,N4r,q4r,qM,L8e,j4r,D4r,kJ,G4r,O4r,V4r,jM,y8e,X4r,z4r,SJ,Q4r,W4r,H4r,DM,ize,mc,GM,x8e,ex,U4r,$8e,J4r,dze,tr,ox,Y4r,gc,K4r,RJ,Z4r,eEr,PJ,oEr,rEr,tEr,rx,aEr,k8e,nEr,sEr,lEr,Bt,tx,iEr,S8e,dEr,cEr,hc,fEr,R8e,mEr,gEr,BJ,hEr,pEr,_Er,OM,uEr,kr,ax,bEr,P8e,vEr,FEr,dn,TEr,B8e,MEr,EEr,I8e,CEr,wEr,N8e,AEr,LEr,yEr,Me,VM,q8e,xEr,$Er,IJ,kEr,SEr,REr,XM,j8e,PEr,BEr,NJ,IEr,NEr,qEr,zM,D8e,jEr,DEr,qJ,GEr,OEr,VEr,QM,G8e,XEr,zEr,jJ,QEr,WEr,HEr,WM,O8e,UEr,JEr,DJ,YEr,KEr,ZEr,HM,V8e,eCr,oCr,GJ,rCr,tCr,aCr,UM,X8e,nCr,sCr,OJ,lCr,iCr,dCr,JM,z8e,cCr,fCr,VJ,mCr,gCr,hCr,YM,Q8e,pCr,_Cr,XJ,uCr,bCr,vCr,KM,W8e,FCr,TCr,zJ,MCr,ECr,CCr,ZM,H8e,wCr,ACr,QJ,LCr,yCr,xCr,e4,U8e,$Cr,kCr,WJ,SCr,RCr,PCr,o4,J8e,BCr,ICr,HJ,NCr,qCr,jCr,r4,cze,pc,t4,Y8e,nx,DCr,K8e,GCr,fze,ar,sx,OCr,_c,VCr,UJ,XCr,zCr,JJ,QCr,WCr,HCr,lx,UCr,Z8e,JCr,YCr,KCr,It,ix,ZCr,e9e,e3r,o3r,uc,r3r,o9e,t3r,a3r,YJ,n3r,s3r,l3r,a4,i3r,Sr,dx,d3r,r9e,c3r,f3r,cn,m3r,t9e,g3r,h3r,a9e,p3r,_3r,n9e,u3r,b3r,v3r,Qe,n4,s9e,F3r,T3r,KJ,M3r,E3r,C3r,s4,l9e,w3r,A3r,ZJ,L3r,y3r,x3r,Ys,i9e,$3r,k3r,eY,S3r,R3r,oY,P3r,B3r,I3r,l4,d9e,N3r,q3r,rY,j3r,D3r,G3r,i4,c9e,O3r,V3r,tY,X3r,z3r,Q3r,d4,f9e,W3r,H3r,aY,U3r,J3r,Y3r,c4,m9e,K3r,Z3r,nY,e5r,o5r,r5r,f4,mze,bc,m4,g9e,cx,t5r,h9e,a5r,gze,nr,fx,n5r,vc,s5r,sY,l5r,i5r,lY,d5r,c5r,f5r,mx,m5r,p9e,g5r,h5r,p5r,Nt,gx,_5r,_9e,u5r,b5r,Fc,v5r,u9e,F5r,T5r,iY,M5r,E5r,C5r,g4,w5r,Rr,hx,A5r,b9e,L5r,y5r,fn,x5r,v9e,$5r,k5r,F9e,S5r,R5r,T9e,P5r,B5r,I5r,ie,h4,M9e,N5r,q5r,dY,j5r,D5r,G5r,p4,E9e,O5r,V5r,cY,X5r,z5r,Q5r,_4,C9e,W5r,H5r,fY,U5r,J5r,Y5r,u4,w9e,K5r,Z5r,mY,e0r,o0r,r0r,b4,A9e,t0r,a0r,gY,n0r,s0r,l0r,v4,L9e,i0r,d0r,hY,c0r,f0r,m0r,F4,y9e,g0r,h0r,pY,p0r,_0r,u0r,T4,x9e,b0r,v0r,_Y,F0r,T0r,M0r,M4,$9e,E0r,C0r,uY,w0r,A0r,L0r,E4,k9e,y0r,x0r,bY,$0r,k0r,S0r,C4,S9e,R0r,P0r,vY,B0r,I0r,N0r,w4,R9e,q0r,j0r,FY,D0r,G0r,O0r,A4,P9e,V0r,X0r,TY,z0r,Q0r,W0r,L4,B9e,H0r,U0r,MY,J0r,Y0r,K0r,y4,I9e,Z0r,ewr,EY,owr,rwr,twr,x4,N9e,awr,nwr,CY,swr,lwr,iwr,$4,q9e,dwr,cwr,wY,fwr,mwr,gwr,k4,j9e,hwr,pwr,AY,_wr,uwr,bwr,S4,D9e,vwr,Fwr,LY,Twr,Mwr,Ewr,R4,G9e,Cwr,wwr,yY,Awr,Lwr,ywr,P4,hze,Tc,B4,O9e,px,xwr,V9e,$wr,pze,sr,_x,kwr,Mc,Swr,xY,Rwr,Pwr,$Y,Bwr,Iwr,Nwr,ux,qwr,X9e,jwr,Dwr,Gwr,qt,bx,Owr,z9e,Vwr,Xwr,Ec,zwr,Q9e,Qwr,Wwr,kY,Hwr,Uwr,Jwr,I4,Ywr,Pr,vx,Kwr,W9e,Zwr,eAr,mn,oAr,H9e,rAr,tAr,U9e,aAr,nAr,J9e,sAr,lAr,iAr,ye,N4,Y9e,dAr,cAr,SY,fAr,mAr,gAr,q4,K9e,hAr,pAr,RY,_Ar,uAr,bAr,j4,Z9e,vAr,FAr,PY,TAr,MAr,EAr,D4,eMe,CAr,wAr,BY,AAr,LAr,yAr,G4,oMe,xAr,$Ar,IY,kAr,SAr,RAr,O4,rMe,PAr,BAr,NY,IAr,NAr,qAr,V4,tMe,jAr,DAr,qY,GAr,OAr,VAr,X4,aMe,XAr,zAr,jY,QAr,WAr,HAr,z4,nMe,UAr,JAr,DY,YAr,KAr,ZAr,Q4,sMe,e7r,o7r,GY,r7r,t7r,a7r,W4,_ze,Cc,H4,lMe,Fx,n7r,iMe,s7r,uze,lr,Tx,l7r,wc,i7r,OY,d7r,c7r,VY,f7r,m7r,g7r,Mx,h7r,dMe,p7r,_7r,u7r,jt,Ex,b7r,cMe,v7r,F7r,Ac,T7r,fMe,M7r,E7r,XY,C7r,w7r,A7r,U4,L7r,Br,Cx,y7r,mMe,x7r,$7r,gn,k7r,gMe,S7r,R7r,hMe,P7r,B7r,pMe,I7r,N7r,q7r,te,J4,_Me,j7r,D7r,zY,G7r,O7r,V7r,Y4,uMe,X7r,z7r,QY,Q7r,W7r,H7r,K4,bMe,U7r,J7r,WY,Y7r,K7r,Z7r,Z4,vMe,eLr,oLr,HY,rLr,tLr,aLr,eE,FMe,nLr,sLr,UY,lLr,iLr,dLr,oE,TMe,cLr,fLr,JY,mLr,gLr,hLr,rE,MMe,pLr,_Lr,YY,uLr,bLr,vLr,tE,EMe,FLr,TLr,KY,MLr,ELr,CLr,aE,CMe,wLr,ALr,ZY,LLr,yLr,xLr,nE,wMe,$Lr,kLr,eK,SLr,RLr,PLr,sE,AMe,BLr,ILr,oK,NLr,qLr,jLr,lE,LMe,DLr,GLr,rK,OLr,VLr,XLr,iE,yMe,zLr,QLr,tK,WLr,HLr,ULr,dE,xMe,JLr,YLr,aK,KLr,ZLr,eyr,cE,$Me,oyr,ryr,nK,tyr,ayr,nyr,fE,kMe,syr,lyr,sK,iyr,dyr,cyr,mE,SMe,fyr,myr,lK,gyr,hyr,pyr,gE,RMe,_yr,uyr,iK,byr,vyr,Fyr,hE,PMe,Tyr,Myr,dK,Eyr,Cyr,wyr,pE,BMe,Ayr,Lyr,cK,yyr,xyr,$yr,_E,IMe,kyr,Syr,fK,Ryr,Pyr,Byr,uE,NMe,Iyr,Nyr,mK,qyr,jyr,Dyr,bE,qMe,Gyr,Oyr,gK,Vyr,Xyr,zyr,vE,jMe,Qyr,Wyr,hK,Hyr,Uyr,Jyr,FE,DMe,Yyr,Kyr,pK,Zyr,exr,oxr,TE,GMe,rxr,txr,_K,axr,nxr,sxr,ME,bze,Lc,EE,OMe,wx,lxr,VMe,ixr,vze,ir,Ax,dxr,yc,cxr,uK,fxr,mxr,bK,gxr,hxr,pxr,Lx,_xr,XMe,uxr,bxr,vxr,Dt,yx,Fxr,zMe,Txr,Mxr,xc,Exr,QMe,Cxr,wxr,vK,Axr,Lxr,yxr,CE,xxr,Ir,xx,$xr,WMe,kxr,Sxr,hn,Rxr,HMe,Pxr,Bxr,UMe,Ixr,Nxr,JMe,qxr,jxr,Dxr,_e,wE,YMe,Gxr,Oxr,FK,Vxr,Xxr,zxr,AE,KMe,Qxr,Wxr,TK,Hxr,Uxr,Jxr,LE,ZMe,Yxr,Kxr,MK,Zxr,e$r,o$r,yE,e4e,r$r,t$r,EK,a$r,n$r,s$r,xE,o4e,l$r,i$r,CK,d$r,c$r,f$r,$E,r4e,m$r,g$r,wK,h$r,p$r,_$r,kE,t4e,u$r,b$r,AK,v$r,F$r,T$r,SE,a4e,M$r,E$r,LK,C$r,w$r,A$r,RE,n4e,L$r,y$r,yK,x$r,$$r,k$r,PE,s4e,S$r,R$r,xK,P$r,B$r,I$r,BE,l4e,N$r,q$r,$K,j$r,D$r,G$r,IE,i4e,O$r,V$r,kK,X$r,z$r,Q$r,NE,d4e,W$r,H$r,SK,U$r,J$r,Y$r,qE,c4e,K$r,Z$r,RK,ekr,okr,rkr,jE,f4e,tkr,akr,PK,nkr,skr,lkr,DE,m4e,ikr,dkr,BK,ckr,fkr,mkr,GE,g4e,gkr,hkr,IK,pkr,_kr,ukr,OE,Fze,$c,VE,h4e,$x,bkr,p4e,vkr,Tze,dr,kx,Fkr,kc,Tkr,NK,Mkr,Ekr,qK,Ckr,wkr,Akr,Sx,Lkr,_4e,ykr,xkr,$kr,Gt,Rx,kkr,u4e,Skr,Rkr,Sc,Pkr,b4e,Bkr,Ikr,jK,Nkr,qkr,jkr,XE,Dkr,Nr,Px,Gkr,v4e,Okr,Vkr,pn,Xkr,F4e,zkr,Qkr,T4e,Wkr,Hkr,M4e,Ukr,Jkr,Ykr,Bx,zE,E4e,Kkr,Zkr,DK,eSr,oSr,rSr,QE,C4e,tSr,aSr,GK,nSr,sSr,lSr,WE,Mze,Rc,HE,w4e,Ix,iSr,A4e,dSr,Eze,cr,Nx,cSr,Pc,fSr,OK,mSr,gSr,VK,hSr,pSr,_Sr,qx,uSr,L4e,bSr,vSr,FSr,Ot,jx,TSr,y4e,MSr,ESr,Bc,CSr,x4e,wSr,ASr,XK,LSr,ySr,xSr,UE,$Sr,qr,Dx,kSr,$4e,SSr,RSr,_n,PSr,k4e,BSr,ISr,S4e,NSr,qSr,R4e,jSr,DSr,GSr,P4e,JE,B4e,OSr,VSr,zK,XSr,zSr,QSr,YE,Cze,Ic,KE,I4e,Gx,WSr,N4e,HSr,wze,fr,Ox,USr,Nc,JSr,QK,YSr,KSr,WK,ZSr,eRr,oRr,Vx,rRr,q4e,tRr,aRr,nRr,Vt,Xx,sRr,j4e,lRr,iRr,qc,dRr,D4e,cRr,fRr,HK,mRr,gRr,hRr,ZE,pRr,jr,zx,_Rr,G4e,uRr,bRr,un,vRr,O4e,FRr,TRr,V4e,MRr,ERr,X4e,CRr,wRr,ARr,de,eC,z4e,LRr,yRr,UK,xRr,$Rr,kRr,oC,Q4e,SRr,RRr,JK,PRr,BRr,IRr,rC,W4e,NRr,qRr,YK,jRr,DRr,GRr,tC,H4e,ORr,VRr,KK,XRr,zRr,QRr,aC,U4e,WRr,HRr,ZK,URr,JRr,YRr,nC,J4e,KRr,ZRr,eZ,ePr,oPr,rPr,sC,Y4e,tPr,aPr,oZ,nPr,sPr,lPr,lC,K4e,iPr,dPr,rZ,cPr,fPr,mPr,iC,Z4e,gPr,hPr,tZ,pPr,_Pr,uPr,dC,eEe,bPr,vPr,aZ,FPr,TPr,MPr,cC,oEe,EPr,CPr,nZ,wPr,APr,LPr,fC,rEe,yPr,xPr,sZ,$Pr,kPr,SPr,mC,tEe,RPr,PPr,lZ,BPr,IPr,NPr,gC,aEe,qPr,jPr,iZ,DPr,GPr,OPr,hC,nEe,VPr,XPr,dZ,zPr,QPr,WPr,pC,sEe,HPr,UPr,cZ,JPr,YPr,KPr,_C,lEe,ZPr,eBr,fZ,oBr,rBr,tBr,uC,iEe,aBr,nBr,mZ,sBr,lBr,iBr,bC,dEe,dBr,cBr,gZ,fBr,mBr,gBr,vC,cEe,hBr,pBr,hZ,_Br,uBr,bBr,FC,Aze,jc,TC,fEe,Qx,vBr,mEe,FBr,Lze,mr,Wx,TBr,Dc,MBr,pZ,EBr,CBr,_Z,wBr,ABr,LBr,Hx,yBr,gEe,xBr,$Br,kBr,Xt,Ux,SBr,hEe,RBr,PBr,Gc,BBr,pEe,IBr,NBr,uZ,qBr,jBr,DBr,MC,GBr,Dr,Jx,OBr,_Ee,VBr,XBr,bn,zBr,uEe,QBr,WBr,bEe,HBr,UBr,vEe,JBr,YBr,KBr,ce,EC,FEe,ZBr,eIr,bZ,oIr,rIr,tIr,CC,TEe,aIr,nIr,vZ,sIr,lIr,iIr,wC,MEe,dIr,cIr,FZ,fIr,mIr,gIr,AC,EEe,hIr,pIr,TZ,_Ir,uIr,bIr,LC,CEe,vIr,FIr,MZ,TIr,MIr,EIr,yC,wEe,CIr,wIr,EZ,AIr,LIr,yIr,xC,AEe,xIr,$Ir,CZ,kIr,SIr,RIr,$C,LEe,PIr,BIr,wZ,IIr,NIr,qIr,kC,yEe,jIr,DIr,AZ,GIr,OIr,VIr,SC,xEe,XIr,zIr,LZ,QIr,WIr,HIr,RC,$Ee,UIr,JIr,yZ,YIr,KIr,ZIr,PC,kEe,eNr,oNr,xZ,rNr,tNr,aNr,BC,SEe,nNr,sNr,$Z,lNr,iNr,dNr,IC,REe,cNr,fNr,kZ,mNr,gNr,hNr,NC,PEe,pNr,_Nr,SZ,uNr,bNr,vNr,qC,BEe,FNr,TNr,RZ,MNr,ENr,CNr,jC,IEe,wNr,ANr,PZ,LNr,yNr,xNr,DC,NEe,$Nr,kNr,BZ,SNr,RNr,PNr,GC,qEe,BNr,INr,IZ,NNr,qNr,jNr,OC,jEe,DNr,GNr,NZ,ONr,VNr,XNr,VC,yze,Oc,XC,DEe,Yx,zNr,GEe,QNr,xze,gr,Kx,WNr,Vc,HNr,qZ,UNr,JNr,jZ,YNr,KNr,ZNr,Zx,eqr,OEe,oqr,rqr,tqr,zt,e$,aqr,VEe,nqr,sqr,Xc,lqr,XEe,iqr,dqr,DZ,cqr,fqr,mqr,zC,gqr,Gr,o$,hqr,zEe,pqr,_qr,vn,uqr,QEe,bqr,vqr,WEe,Fqr,Tqr,HEe,Mqr,Eqr,Cqr,UEe,QC,JEe,wqr,Aqr,GZ,Lqr,yqr,xqr,WC,$ze,zc,HC,YEe,r$,$qr,KEe,kqr,kze,hr,t$,Sqr,Qc,Rqr,OZ,Pqr,Bqr,VZ,Iqr,Nqr,qqr,a$,jqr,ZEe,Dqr,Gqr,Oqr,Qt,n$,Vqr,eCe,Xqr,zqr,Wc,Qqr,oCe,Wqr,Hqr,XZ,Uqr,Jqr,Yqr,UC,Kqr,Or,s$,Zqr,rCe,ejr,ojr,Fn,rjr,tCe,tjr,ajr,aCe,njr,sjr,nCe,ljr,ijr,djr,sCe,JC,lCe,cjr,fjr,zZ,mjr,gjr,hjr,YC,Sze,Hc,KC,iCe,l$,pjr,dCe,_jr,Rze,pr,i$,ujr,Uc,bjr,QZ,vjr,Fjr,WZ,Tjr,Mjr,Ejr,d$,Cjr,cCe,wjr,Ajr,Ljr,Wt,c$,yjr,fCe,xjr,$jr,Jc,kjr,mCe,Sjr,Rjr,HZ,Pjr,Bjr,Ijr,ZC,Njr,Vr,f$,qjr,gCe,jjr,Djr,Tn,Gjr,hCe,Ojr,Vjr,pCe,Xjr,zjr,_Ce,Qjr,Wjr,Hjr,oe,e3,uCe,Ujr,Jjr,UZ,Yjr,Kjr,Zjr,o3,bCe,eDr,oDr,JZ,rDr,tDr,aDr,r3,vCe,nDr,sDr,YZ,lDr,iDr,dDr,t3,FCe,cDr,fDr,KZ,mDr,gDr,hDr,a3,TCe,pDr,_Dr,ZZ,uDr,bDr,vDr,n3,MCe,FDr,TDr,eee,MDr,EDr,CDr,s3,ECe,wDr,ADr,oee,LDr,yDr,xDr,l3,CCe,$Dr,kDr,ree,SDr,RDr,PDr,i3,wCe,BDr,IDr,tee,NDr,qDr,jDr,d3,ACe,DDr,GDr,aee,ODr,VDr,XDr,c3,LCe,zDr,QDr,nee,WDr,HDr,UDr,f3,yCe,JDr,YDr,see,KDr,ZDr,eGr,m3,xCe,oGr,rGr,lee,tGr,aGr,nGr,g3,$Ce,sGr,lGr,iee,iGr,dGr,cGr,h3,kCe,fGr,mGr,dee,gGr,hGr,pGr,p3,SCe,_Gr,uGr,cee,bGr,vGr,FGr,_3,RCe,TGr,MGr,fee,EGr,CGr,wGr,u3,PCe,AGr,LGr,mee,yGr,xGr,$Gr,b3,BCe,kGr,SGr,gee,RGr,PGr,BGr,v3,ICe,IGr,NGr,hee,qGr,jGr,DGr,F3,NCe,GGr,OGr,pee,VGr,XGr,zGr,T3,qCe,QGr,WGr,_ee,HGr,UGr,JGr,M3,jCe,YGr,KGr,uee,ZGr,eOr,oOr,E3,DCe,rOr,tOr,bee,aOr,nOr,sOr,C3,GCe,lOr,iOr,vee,dOr,cOr,fOr,w3,OCe,mOr,gOr,Fee,hOr,pOr,_Or,A3,VCe,uOr,bOr,Tee,vOr,FOr,TOr,L3,Pze,Yc,y3,XCe,m$,MOr,zCe,EOr,Bze,_r,g$,COr,Kc,wOr,Mee,AOr,LOr,Eee,yOr,xOr,$Or,h$,kOr,QCe,SOr,ROr,POr,Ht,p$,BOr,WCe,IOr,NOr,Zc,qOr,HCe,jOr,DOr,Cee,GOr,OOr,VOr,x3,XOr,Xr,_$,zOr,UCe,QOr,WOr,Mn,HOr,JCe,UOr,JOr,YCe,YOr,KOr,KCe,ZOr,eVr,oVr,xe,$3,ZCe,rVr,tVr,wee,aVr,nVr,sVr,k3,e3e,lVr,iVr,Aee,dVr,cVr,fVr,S3,o3e,mVr,gVr,Lee,hVr,pVr,_Vr,R3,r3e,uVr,bVr,yee,vVr,FVr,TVr,P3,t3e,MVr,EVr,xee,CVr,wVr,AVr,B3,a3e,LVr,yVr,$ee,xVr,$Vr,kVr,I3,n3e,SVr,RVr,kee,PVr,BVr,IVr,N3,s3e,NVr,qVr,See,jVr,DVr,GVr,q3,l3e,OVr,VVr,Ree,XVr,zVr,QVr,j3,i3e,WVr,HVr,Pee,UVr,JVr,YVr,D3,Ize,ef,G3,d3e,u$,KVr,c3e,ZVr,Nze,ur,b$,eXr,of,oXr,Bee,rXr,tXr,Iee,aXr,nXr,sXr,v$,lXr,f3e,iXr,dXr,cXr,Ut,F$,fXr,m3e,mXr,gXr,rf,hXr,g3e,pXr,_Xr,Nee,uXr,bXr,vXr,O3,FXr,zr,T$,TXr,h3e,MXr,EXr,En,CXr,p3e,wXr,AXr,_3e,LXr,yXr,u3e,xXr,$Xr,kXr,Ee,V3,b3e,SXr,RXr,qee,PXr,BXr,IXr,X3,v3e,NXr,qXr,jee,jXr,DXr,GXr,z3,F3e,OXr,VXr,Dee,XXr,zXr,QXr,Q3,T3e,WXr,HXr,Gee,UXr,JXr,YXr,W3,M3e,KXr,ZXr,Oee,ezr,ozr,rzr,H3,E3e,tzr,azr,Vee,nzr,szr,lzr,U3,C3e,izr,dzr,Xee,czr,fzr,mzr,J3,w3e,gzr,hzr,zee,pzr,_zr,uzr,Y3,A3e,bzr,vzr,Qee,Fzr,Tzr,Mzr,K3,L3e,Ezr,Czr,Wee,wzr,Azr,Lzr,Z3,y3e,yzr,xzr,Hee,$zr,kzr,Szr,e5,x3e,Rzr,Pzr,Uee,Bzr,Izr,Nzr,o5,$3e,qzr,jzr,Jee,Dzr,Gzr,Ozr,r5,qze,tf,t5,k3e,M$,Vzr,S3e,Xzr,jze,br,E$,zzr,af,Qzr,Yee,Wzr,Hzr,Kee,Uzr,Jzr,Yzr,C$,Kzr,R3e,Zzr,eQr,oQr,Jt,w$,rQr,P3e,tQr,aQr,nf,nQr,B3e,sQr,lQr,Zee,iQr,dQr,cQr,a5,fQr,Qr,A$,mQr,I3e,gQr,hQr,Cn,pQr,N3e,_Qr,uQr,q3e,bQr,vQr,j3e,FQr,TQr,MQr,$e,n5,D3e,EQr,CQr,eoe,wQr,AQr,LQr,s5,G3e,yQr,xQr,ooe,$Qr,kQr,SQr,l5,O3e,RQr,PQr,roe,BQr,IQr,NQr,i5,V3e,qQr,jQr,toe,DQr,GQr,OQr,d5,X3e,VQr,XQr,aoe,zQr,QQr,WQr,c5,z3e,HQr,UQr,noe,JQr,YQr,KQr,f5,Q3e,ZQr,eWr,soe,oWr,rWr,tWr,m5,W3e,aWr,nWr,loe,sWr,lWr,iWr,g5,H3e,dWr,cWr,ioe,fWr,mWr,gWr,h5,U3e,hWr,pWr,doe,_Wr,uWr,bWr,p5,Dze,sf,_5,J3e,L$,vWr,Y3e,FWr,Gze,vr,y$,TWr,lf,MWr,coe,EWr,CWr,foe,wWr,AWr,LWr,x$,yWr,K3e,xWr,$Wr,kWr,Yt,$$,SWr,Z3e,RWr,PWr,df,BWr,e5e,IWr,NWr,moe,qWr,jWr,DWr,u5,GWr,Wr,k$,OWr,o5e,VWr,XWr,wn,zWr,r5e,QWr,WWr,t5e,HWr,UWr,a5e,JWr,YWr,KWr,ke,b5,n5e,ZWr,eHr,goe,oHr,rHr,tHr,v5,s5e,aHr,nHr,hoe,sHr,lHr,iHr,F5,l5e,dHr,cHr,poe,fHr,mHr,gHr,T5,i5e,hHr,pHr,_oe,_Hr,uHr,bHr,M5,d5e,vHr,FHr,uoe,THr,MHr,EHr,E5,c5e,CHr,wHr,boe,AHr,LHr,yHr,C5,f5e,xHr,$Hr,voe,kHr,SHr,RHr,w5,m5e,PHr,BHr,Foe,IHr,NHr,qHr,A5,g5e,jHr,DHr,Toe,GHr,OHr,VHr,L5,h5e,XHr,zHr,Moe,QHr,WHr,HHr,y5,Oze,cf,x5,p5e,S$,UHr,_5e,JHr,Vze,Fr,R$,YHr,ff,KHr,Eoe,ZHr,eUr,Coe,oUr,rUr,tUr,P$,aUr,u5e,nUr,sUr,lUr,Kt,B$,iUr,b5e,dUr,cUr,mf,fUr,v5e,mUr,gUr,woe,hUr,pUr,_Ur,$5,uUr,Hr,I$,bUr,F5e,vUr,FUr,An,TUr,T5e,MUr,EUr,M5e,CUr,wUr,E5e,AUr,LUr,yUr,Se,k5,C5e,xUr,$Ur,Aoe,kUr,SUr,RUr,S5,w5e,PUr,BUr,Loe,IUr,NUr,qUr,R5,A5e,jUr,DUr,yoe,GUr,OUr,VUr,P5,L5e,XUr,zUr,xoe,QUr,WUr,HUr,B5,y5e,UUr,JUr,$oe,YUr,KUr,ZUr,I5,x5e,eJr,oJr,koe,rJr,tJr,aJr,N5,$5e,nJr,sJr,Soe,lJr,iJr,dJr,q5,k5e,cJr,fJr,Roe,mJr,gJr,hJr,j5,S5e,pJr,_Jr,Poe,uJr,bJr,vJr,D5,R5e,FJr,TJr,Boe,MJr,EJr,CJr,G5,Xze,gf,O5,P5e,N$,wJr,B5e,AJr,zze,Tr,q$,LJr,hf,yJr,Ioe,xJr,$Jr,Noe,kJr,SJr,RJr,j$,PJr,I5e,BJr,IJr,NJr,Zt,D$,qJr,N5e,jJr,DJr,pf,GJr,q5e,OJr,VJr,qoe,XJr,zJr,QJr,V5,WJr,Ur,G$,HJr,j5e,UJr,JJr,Ln,YJr,D5e,KJr,ZJr,G5e,eYr,oYr,O5e,rYr,tYr,aYr,Re,X5,V5e,nYr,sYr,joe,lYr,iYr,dYr,z5,X5e,cYr,fYr,Doe,mYr,gYr,hYr,Q5,z5e,pYr,_Yr,Goe,uYr,bYr,vYr,W5,Q5e,FYr,TYr,Ooe,MYr,EYr,CYr,H5,W5e,wYr,AYr,Voe,LYr,yYr,xYr,U5,H5e,$Yr,kYr,Xoe,SYr,RYr,PYr,J5,U5e,BYr,IYr,zoe,NYr,qYr,jYr,Y5,J5e,DYr,GYr,Qoe,OYr,VYr,XYr,K5,Y5e,zYr,QYr,Woe,WYr,HYr,UYr,Z5,K5e,JYr,YYr,Hoe,KYr,ZYr,eKr,e0,Qze,_f,o0,Z5e,O$,oKr,e0e,rKr,Wze,Mr,V$,tKr,uf,aKr,Uoe,nKr,sKr,Joe,lKr,iKr,dKr,X$,cKr,o0e,fKr,mKr,gKr,ea,z$,hKr,r0e,pKr,_Kr,bf,uKr,t0e,bKr,vKr,Yoe,FKr,TKr,MKr,r0,EKr,Jr,Q$,CKr,a0e,wKr,AKr,yn,LKr,n0e,yKr,xKr,s0e,$Kr,kKr,l0e,SKr,RKr,PKr,Ve,t0,i0e,BKr,IKr,Koe,NKr,qKr,jKr,a0,d0e,DKr,GKr,Zoe,OKr,VKr,XKr,n0,c0e,zKr,QKr,ere,WKr,HKr,UKr,s0,f0e,JKr,YKr,ore,KKr,ZKr,eZr,l0,m0e,oZr,rZr,rre,tZr,aZr,nZr,i0,g0e,sZr,lZr,tre,iZr,dZr,cZr,d0,h0e,fZr,mZr,are,gZr,hZr,pZr,c0,p0e,_Zr,uZr,nre,bZr,vZr,FZr,f0,Hze,vf,m0,_0e,W$,TZr,u0e,MZr,Uze,Er,H$,EZr,Ff,CZr,sre,wZr,AZr,lre,LZr,yZr,xZr,U$,$Zr,b0e,kZr,SZr,RZr,oa,J$,PZr,v0e,BZr,IZr,Tf,NZr,F0e,qZr,jZr,ire,DZr,GZr,OZr,g0,VZr,Yr,Y$,XZr,T0e,zZr,QZr,xn,WZr,M0e,HZr,UZr,E0e,JZr,YZr,C0e,KZr,ZZr,eet,Xe,h0,w0e,oet,ret,dre,tet,aet,net,p0,A0e,set,iet,cre,det,cet,fet,_0,L0e,met,get,fre,het,pet,_et,u0,y0e,uet,bet,mre,vet,Fet,Tet,b0,x0e,Met,Eet,gre,Cet,wet,Aet,v0,$0e,Let,yet,hre,xet,$et,ket,F0,k0e,Set,Ret,pre,Pet,Bet,Iet,T0,S0e,Net,qet,_re,jet,Det,Get,M0,Jze,Mf,E0,R0e,K$,Oet,P0e,Vet,Yze,Cr,Z$,Xet,Ef,zet,ure,Qet,Wet,bre,Het,Uet,Jet,ek,Yet,B0e,Ket,Zet,eot,ra,ok,oot,I0e,rot,tot,Cf,aot,N0e,not,sot,vre,lot,iot,dot,C0,cot,Kr,rk,fot,q0e,mot,got,$n,hot,j0e,pot,_ot,D0e,uot,bot,G0e,vot,Fot,Tot,O0e,w0,V0e,Mot,Eot,Fre,Cot,wot,Aot,A0,Kze,wf,L0,X0e,tk,Lot,z0e,yot,Zze,wr,ak,xot,Af,$ot,Tre,kot,Sot,Mre,Rot,Pot,Bot,nk,Iot,Q0e,Not,qot,jot,ta,sk,Dot,W0e,Got,Oot,Lf,Vot,H0e,Xot,zot,Ere,Qot,Wot,Hot,y0,Uot,Zr,lk,Jot,U0e,Yot,Kot,kn,Zot,J0e,ert,ort,Y0e,rrt,trt,K0e,art,nrt,srt,ik,x0,Z0e,lrt,irt,Cre,drt,crt,frt,$0,ewe,mrt,grt,wre,hrt,prt,_rt,k0,eQe,yf,S0,owe,dk,urt,rwe,brt,oQe,Ar,ck,vrt,xf,Frt,Are,Trt,Mrt,Lre,Ert,Crt,wrt,fk,Art,twe,Lrt,yrt,xrt,aa,mk,$rt,awe,krt,Srt,$f,Rrt,nwe,Prt,Brt,yre,Irt,Nrt,qrt,R0,jrt,et,gk,Drt,swe,Grt,Ort,Sn,Vrt,lwe,Xrt,zrt,iwe,Qrt,Wrt,dwe,Hrt,Urt,Jrt,cwe,P0,fwe,Yrt,Krt,xre,Zrt,ett,ott,B0,rQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),a7=new re({}),n7=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new rtt({props:{warning:!0,$$slots:{default:[BQt]},$$scope:{ctx:$}}}),s7=new re({}),l7=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/configuration_auto.py#L610"}}),c7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/configuration_auto.py#L633"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),f7=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/configuration_auto.py#L756"}}),m7=new re({}),g7=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/tokenization_auto.py#L403"}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18169/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),u7=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/tokenization_auto.py#L616"}}),b7=new re({}),v7=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18169/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),_p=new rtt({props:{$$slots:{default:[qQt]},$$scope:{ctx:$}}}),up=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),E7=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),C7=new re({}),w7=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/processing_auto.py#L89"}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/processing_auto.py#L103"}}),qp=new rtt({props:{$$slots:{default:[DQt]},$$scope:{ctx:$}}}),jp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),x7=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/processing_auto.py#L256"}}),$7=new re({}),k7=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L782"}}),R7=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),Op=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),P7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),Qu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),B7=new re({}),I7=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L789"}}),q7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),Hu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),G1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),D7=new re({}),G7=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L804"}}),V7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),V1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),k2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),z7=new re({}),Q7=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L811"}}),H7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),R2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),U7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),vb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),J7=new re({}),Y7=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L818"}}),Z7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),Tb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),oL=new re({}),rL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L827"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),sL=new re({}),lL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L872"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),fL=new re({}),mL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L879"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L865"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L836"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),AL=new re({}),LL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L843"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L888"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L927"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L854"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L934"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L957"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L941"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),f8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L948"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L966"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),q8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L973"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),D8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L920"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),W8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),Y8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L895"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),r9=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L902"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),a9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_auto.py#L911"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),_9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),b9=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18169/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),e$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),n$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),N$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),O$=new re({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),W$=new re({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),K$=new re({}),Z$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),tk=new re({}),ak=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18169/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18169/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18169/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),Li=o("Auto Classes"),Pf=l(),lt=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),e7=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),$i=o("Instantiating one of "),Pn=a("a"),o7=o("AutoConfig"),Bn=o(", "),In=a("a"),r7=o("AutoModel"),ki=o(`, and
`),Nn=a("a"),t7=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),BS=o("will create a model that is an instance of "),Ri=a("a"),IS=o("BertModel"),NS=o("."),wo=l(),Ra=a("p"),qS=o("There is one class of "),Nf=a("code"),jS=o("AutoModel"),mHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),YVe=l(),Pi=a("h2"),qf=a("a"),Cae=a("span"),F(a7.$$.fragment),gHe=l(),wae=a("span"),hHe=o("Extending the Auto Classes"),KVe=l(),qn=a("p"),pHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aae=a("code"),_He=o("NewModel"),uHe=o(", make sure you have a "),Lae=a("code"),bHe=o("NewModelConfig"),vHe=o(` then you can add those to the auto
classes like this:`),ZVe=l(),F(n7.$$.fragment),eXe=l(),DS=a("p"),FHe=o("You will then be able to use the auto classes like you would usually do!"),oXe=l(),F(jf.$$.fragment),rXe=l(),Bi=a("h2"),Df=a("a"),yae=a("span"),F(s7.$$.fragment),THe=l(),xae=a("span"),MHe=o("AutoConfig"),tXe=l(),Ao=a("div"),F(l7.$$.fragment),EHe=l(),i7=a("p"),CHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=a("a"),wHe=o("from_pretrained()"),AHe=o(" class method."),LHe=l(),d7=a("p"),yHe=o("This class cannot be instantiated directly using "),$ae=a("code"),xHe=o("__init__()"),$He=o(" (throws an error)."),kHe=l(),Lr=a("div"),F(c7.$$.fragment),SHe=l(),kae=a("p"),RHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PHe=l(),Ii=a("p"),BHe=o("The configuration class to instantiate is selected based on the "),Sae=a("code"),IHe=o("model_type"),NHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rae=a("code"),qHe=o("pretrained_model_name_or_path"),jHe=o(":"),DHe=l(),A=a("ul"),Gf=a("li"),Pae=a("strong"),GHe=o("albert"),OHe=o(" \u2014 "),OS=a("a"),VHe=o("AlbertConfig"),XHe=o(" (ALBERT model)"),zHe=l(),Of=a("li"),Bae=a("strong"),QHe=o("bart"),WHe=o(" \u2014 "),VS=a("a"),HHe=o("BartConfig"),UHe=o(" (BART model)"),JHe=l(),Vf=a("li"),Iae=a("strong"),YHe=o("beit"),KHe=o(" \u2014 "),XS=a("a"),ZHe=o("BeitConfig"),eUe=o(" (BEiT model)"),oUe=l(),Xf=a("li"),Nae=a("strong"),rUe=o("bert"),tUe=o(" \u2014 "),zS=a("a"),aUe=o("BertConfig"),nUe=o(" (BERT model)"),sUe=l(),zf=a("li"),qae=a("strong"),lUe=o("bert-generation"),iUe=o(" \u2014 "),QS=a("a"),dUe=o("BertGenerationConfig"),cUe=o(" (Bert Generation model)"),fUe=l(),Qf=a("li"),jae=a("strong"),mUe=o("big_bird"),gUe=o(" \u2014 "),WS=a("a"),hUe=o("BigBirdConfig"),pUe=o(" (BigBird model)"),_Ue=l(),Wf=a("li"),Dae=a("strong"),uUe=o("bigbird_pegasus"),bUe=o(" \u2014 "),HS=a("a"),vUe=o("BigBirdPegasusConfig"),FUe=o(" (BigBird-Pegasus model)"),TUe=l(),Hf=a("li"),Gae=a("strong"),MUe=o("blenderbot"),EUe=o(" \u2014 "),US=a("a"),CUe=o("BlenderbotConfig"),wUe=o(" (Blenderbot model)"),AUe=l(),Uf=a("li"),Oae=a("strong"),LUe=o("blenderbot-small"),yUe=o(" \u2014 "),JS=a("a"),xUe=o("BlenderbotSmallConfig"),$Ue=o(" (BlenderbotSmall model)"),kUe=l(),Jf=a("li"),Vae=a("strong"),SUe=o("bloom"),RUe=o(" \u2014 "),YS=a("a"),PUe=o("BloomConfig"),BUe=o(" (BLOOM model)"),IUe=l(),Yf=a("li"),Xae=a("strong"),NUe=o("camembert"),qUe=o(" \u2014 "),KS=a("a"),jUe=o("CamembertConfig"),DUe=o(" (CamemBERT model)"),GUe=l(),Kf=a("li"),zae=a("strong"),OUe=o("canine"),VUe=o(" \u2014 "),ZS=a("a"),XUe=o("CanineConfig"),zUe=o(" (CANINE model)"),QUe=l(),Zf=a("li"),Qae=a("strong"),WUe=o("clip"),HUe=o(" \u2014 "),eR=a("a"),UUe=o("CLIPConfig"),JUe=o(" (CLIP model)"),YUe=l(),em=a("li"),Wae=a("strong"),KUe=o("codegen"),ZUe=o(" \u2014 "),oR=a("a"),eJe=o("CodeGenConfig"),oJe=o(" (CodeGen model)"),rJe=l(),om=a("li"),Hae=a("strong"),tJe=o("convbert"),aJe=o(" \u2014 "),rR=a("a"),nJe=o("ConvBertConfig"),sJe=o(" (ConvBERT model)"),lJe=l(),rm=a("li"),Uae=a("strong"),iJe=o("convnext"),dJe=o(" \u2014 "),tR=a("a"),cJe=o("ConvNextConfig"),fJe=o(" (ConvNeXT model)"),mJe=l(),tm=a("li"),Jae=a("strong"),gJe=o("ctrl"),hJe=o(" \u2014 "),aR=a("a"),pJe=o("CTRLConfig"),_Je=o(" (CTRL model)"),uJe=l(),am=a("li"),Yae=a("strong"),bJe=o("cvt"),vJe=o(" \u2014 "),nR=a("a"),FJe=o("CvtConfig"),TJe=o(" (CvT model)"),MJe=l(),nm=a("li"),Kae=a("strong"),EJe=o("data2vec-audio"),CJe=o(" \u2014 "),sR=a("a"),wJe=o("Data2VecAudioConfig"),AJe=o(" (Data2VecAudio model)"),LJe=l(),sm=a("li"),Zae=a("strong"),yJe=o("data2vec-text"),xJe=o(" \u2014 "),lR=a("a"),$Je=o("Data2VecTextConfig"),kJe=o(" (Data2VecText model)"),SJe=l(),lm=a("li"),ene=a("strong"),RJe=o("data2vec-vision"),PJe=o(" \u2014 "),iR=a("a"),BJe=o("Data2VecVisionConfig"),IJe=o(" (Data2VecVision model)"),NJe=l(),im=a("li"),one=a("strong"),qJe=o("deberta"),jJe=o(" \u2014 "),dR=a("a"),DJe=o("DebertaConfig"),GJe=o(" (DeBERTa model)"),OJe=l(),dm=a("li"),rne=a("strong"),VJe=o("deberta-v2"),XJe=o(" \u2014 "),cR=a("a"),zJe=o("DebertaV2Config"),QJe=o(" (DeBERTa-v2 model)"),WJe=l(),cm=a("li"),tne=a("strong"),HJe=o("decision_transformer"),UJe=o(" \u2014 "),fR=a("a"),JJe=o("DecisionTransformerConfig"),YJe=o(" (Decision Transformer model)"),KJe=l(),fm=a("li"),ane=a("strong"),ZJe=o("deit"),eYe=o(" \u2014 "),mR=a("a"),oYe=o("DeiTConfig"),rYe=o(" (DeiT model)"),tYe=l(),mm=a("li"),nne=a("strong"),aYe=o("detr"),nYe=o(" \u2014 "),gR=a("a"),sYe=o("DetrConfig"),lYe=o(" (DETR model)"),iYe=l(),gm=a("li"),sne=a("strong"),dYe=o("distilbert"),cYe=o(" \u2014 "),hR=a("a"),fYe=o("DistilBertConfig"),mYe=o(" (DistilBERT model)"),gYe=l(),hm=a("li"),lne=a("strong"),hYe=o("dpr"),pYe=o(" \u2014 "),pR=a("a"),_Ye=o("DPRConfig"),uYe=o(" (DPR model)"),bYe=l(),pm=a("li"),ine=a("strong"),vYe=o("dpt"),FYe=o(" \u2014 "),_R=a("a"),TYe=o("DPTConfig"),MYe=o(" (DPT model)"),EYe=l(),_m=a("li"),dne=a("strong"),CYe=o("electra"),wYe=o(" \u2014 "),uR=a("a"),AYe=o("ElectraConfig"),LYe=o(" (ELECTRA model)"),yYe=l(),um=a("li"),cne=a("strong"),xYe=o("encoder-decoder"),$Ye=o(" \u2014 "),bR=a("a"),kYe=o("EncoderDecoderConfig"),SYe=o(" (Encoder decoder model)"),RYe=l(),bm=a("li"),fne=a("strong"),PYe=o("flaubert"),BYe=o(" \u2014 "),vR=a("a"),IYe=o("FlaubertConfig"),NYe=o(" (FlauBERT model)"),qYe=l(),vm=a("li"),mne=a("strong"),jYe=o("flava"),DYe=o(" \u2014 "),FR=a("a"),GYe=o("FlavaConfig"),OYe=o(" (FLAVA model)"),VYe=l(),Fm=a("li"),gne=a("strong"),XYe=o("fnet"),zYe=o(" \u2014 "),TR=a("a"),QYe=o("FNetConfig"),WYe=o(" (FNet model)"),HYe=l(),Tm=a("li"),hne=a("strong"),UYe=o("fsmt"),JYe=o(" \u2014 "),MR=a("a"),YYe=o("FSMTConfig"),KYe=o(" (FairSeq Machine-Translation model)"),ZYe=l(),Mm=a("li"),pne=a("strong"),eKe=o("funnel"),oKe=o(" \u2014 "),ER=a("a"),rKe=o("FunnelConfig"),tKe=o(" (Funnel Transformer model)"),aKe=l(),Em=a("li"),_ne=a("strong"),nKe=o("glpn"),sKe=o(" \u2014 "),CR=a("a"),lKe=o("GLPNConfig"),iKe=o(" (GLPN model)"),dKe=l(),Cm=a("li"),une=a("strong"),cKe=o("gpt2"),fKe=o(" \u2014 "),wR=a("a"),mKe=o("GPT2Config"),gKe=o(" (OpenAI GPT-2 model)"),hKe=l(),wm=a("li"),bne=a("strong"),pKe=o("gpt_neo"),_Ke=o(" \u2014 "),AR=a("a"),uKe=o("GPTNeoConfig"),bKe=o(" (GPT Neo model)"),vKe=l(),Am=a("li"),vne=a("strong"),FKe=o("gpt_neox"),TKe=o(" \u2014 "),LR=a("a"),MKe=o("GPTNeoXConfig"),EKe=o(" (GPT NeoX model)"),CKe=l(),Lm=a("li"),Fne=a("strong"),wKe=o("gptj"),AKe=o(" \u2014 "),yR=a("a"),LKe=o("GPTJConfig"),yKe=o(" (GPT-J model)"),xKe=l(),ym=a("li"),Tne=a("strong"),$Ke=o("groupvit"),kKe=o(" \u2014 "),xR=a("a"),SKe=o("GroupViTConfig"),RKe=o(" (GroupViT model)"),PKe=l(),xm=a("li"),Mne=a("strong"),BKe=o("hubert"),IKe=o(" \u2014 "),$R=a("a"),NKe=o("HubertConfig"),qKe=o(" (Hubert model)"),jKe=l(),$m=a("li"),Ene=a("strong"),DKe=o("ibert"),GKe=o(" \u2014 "),kR=a("a"),OKe=o("IBertConfig"),VKe=o(" (I-BERT model)"),XKe=l(),km=a("li"),Cne=a("strong"),zKe=o("imagegpt"),QKe=o(" \u2014 "),SR=a("a"),WKe=o("ImageGPTConfig"),HKe=o(" (ImageGPT model)"),UKe=l(),Sm=a("li"),wne=a("strong"),JKe=o("layoutlm"),YKe=o(" \u2014 "),RR=a("a"),KKe=o("LayoutLMConfig"),ZKe=o(" (LayoutLM model)"),eZe=l(),Rm=a("li"),Ane=a("strong"),oZe=o("layoutlmv2"),rZe=o(" \u2014 "),PR=a("a"),tZe=o("LayoutLMv2Config"),aZe=o(" (LayoutLMv2 model)"),nZe=l(),Pm=a("li"),Lne=a("strong"),sZe=o("layoutlmv3"),lZe=o(" \u2014 "),BR=a("a"),iZe=o("LayoutLMv3Config"),dZe=o(" (LayoutLMv3 model)"),cZe=l(),Bm=a("li"),yne=a("strong"),fZe=o("led"),mZe=o(" \u2014 "),IR=a("a"),gZe=o("LEDConfig"),hZe=o(" (LED model)"),pZe=l(),Im=a("li"),xne=a("strong"),_Ze=o("levit"),uZe=o(" \u2014 "),NR=a("a"),bZe=o("LevitConfig"),vZe=o(" (LeViT model)"),FZe=l(),Nm=a("li"),$ne=a("strong"),TZe=o("longformer"),MZe=o(" \u2014 "),qR=a("a"),EZe=o("LongformerConfig"),CZe=o(" (Longformer model)"),wZe=l(),qm=a("li"),kne=a("strong"),AZe=o("longt5"),LZe=o(" \u2014 "),jR=a("a"),yZe=o("LongT5Config"),xZe=o(" (LongT5 model)"),$Ze=l(),jm=a("li"),Sne=a("strong"),kZe=o("luke"),SZe=o(" \u2014 "),DR=a("a"),RZe=o("LukeConfig"),PZe=o(" (LUKE model)"),BZe=l(),Dm=a("li"),Rne=a("strong"),IZe=o("lxmert"),NZe=o(" \u2014 "),GR=a("a"),qZe=o("LxmertConfig"),jZe=o(" (LXMERT model)"),DZe=l(),Gm=a("li"),Pne=a("strong"),GZe=o("m2m_100"),OZe=o(" \u2014 "),OR=a("a"),VZe=o("M2M100Config"),XZe=o(" (M2M100 model)"),zZe=l(),Om=a("li"),Bne=a("strong"),QZe=o("marian"),WZe=o(" \u2014 "),VR=a("a"),HZe=o("MarianConfig"),UZe=o(" (Marian model)"),JZe=l(),Vm=a("li"),Ine=a("strong"),YZe=o("maskformer"),KZe=o(" \u2014 "),XR=a("a"),ZZe=o("MaskFormerConfig"),eeo=o(" (MaskFormer model)"),oeo=l(),Xm=a("li"),Nne=a("strong"),reo=o("mbart"),teo=o(" \u2014 "),zR=a("a"),aeo=o("MBartConfig"),neo=o(" (mBART model)"),seo=l(),zm=a("li"),qne=a("strong"),leo=o("mctct"),ieo=o(" \u2014 "),QR=a("a"),deo=o("MCTCTConfig"),ceo=o(" (M-CTC-T model)"),feo=l(),Qm=a("li"),jne=a("strong"),meo=o("megatron-bert"),geo=o(" \u2014 "),WR=a("a"),heo=o("MegatronBertConfig"),peo=o(" (Megatron-BERT model)"),_eo=l(),Wm=a("li"),Dne=a("strong"),ueo=o("mobilebert"),beo=o(" \u2014 "),HR=a("a"),veo=o("MobileBertConfig"),Feo=o(" (MobileBERT model)"),Teo=l(),Hm=a("li"),Gne=a("strong"),Meo=o("mobilevit"),Eeo=o(" \u2014 "),UR=a("a"),Ceo=o("MobileViTConfig"),weo=o(" (MobileViT model)"),Aeo=l(),Um=a("li"),One=a("strong"),Leo=o("mpnet"),yeo=o(" \u2014 "),JR=a("a"),xeo=o("MPNetConfig"),$eo=o(" (MPNet model)"),keo=l(),Jm=a("li"),Vne=a("strong"),Seo=o("mt5"),Reo=o(" \u2014 "),YR=a("a"),Peo=o("MT5Config"),Beo=o(" (MT5 model)"),Ieo=l(),Ym=a("li"),Xne=a("strong"),Neo=o("mvp"),qeo=o(" \u2014 "),KR=a("a"),jeo=o("MvpConfig"),Deo=o(" (MVP model)"),Geo=l(),Km=a("li"),zne=a("strong"),Oeo=o("nezha"),Veo=o(" \u2014 "),ZR=a("a"),Xeo=o("NezhaConfig"),zeo=o(" (Nezha model)"),Qeo=l(),Zm=a("li"),Qne=a("strong"),Weo=o("nystromformer"),Heo=o(" \u2014 "),eP=a("a"),Ueo=o("NystromformerConfig"),Jeo=o(" (Nystr\xF6mformer model)"),Yeo=l(),eg=a("li"),Wne=a("strong"),Keo=o("openai-gpt"),Zeo=o(" \u2014 "),oP=a("a"),eoo=o("OpenAIGPTConfig"),ooo=o(" (OpenAI GPT model)"),roo=l(),og=a("li"),Hne=a("strong"),too=o("opt"),aoo=o(" \u2014 "),rP=a("a"),noo=o("OPTConfig"),soo=o(" (OPT model)"),loo=l(),rg=a("li"),Une=a("strong"),ioo=o("pegasus"),doo=o(" \u2014 "),tP=a("a"),coo=o("PegasusConfig"),foo=o(" (Pegasus model)"),moo=l(),tg=a("li"),Jne=a("strong"),goo=o("perceiver"),hoo=o(" \u2014 "),aP=a("a"),poo=o("PerceiverConfig"),_oo=o(" (Perceiver model)"),uoo=l(),ag=a("li"),Yne=a("strong"),boo=o("plbart"),voo=o(" \u2014 "),nP=a("a"),Foo=o("PLBartConfig"),Too=o(" (PLBart model)"),Moo=l(),ng=a("li"),Kne=a("strong"),Eoo=o("poolformer"),Coo=o(" \u2014 "),sP=a("a"),woo=o("PoolFormerConfig"),Aoo=o(" (PoolFormer model)"),Loo=l(),sg=a("li"),Zne=a("strong"),yoo=o("prophetnet"),xoo=o(" \u2014 "),lP=a("a"),$oo=o("ProphetNetConfig"),koo=o(" (ProphetNet model)"),Soo=l(),lg=a("li"),ese=a("strong"),Roo=o("qdqbert"),Poo=o(" \u2014 "),iP=a("a"),Boo=o("QDQBertConfig"),Ioo=o(" (QDQBert model)"),Noo=l(),ig=a("li"),ose=a("strong"),qoo=o("rag"),joo=o(" \u2014 "),dP=a("a"),Doo=o("RagConfig"),Goo=o(" (RAG model)"),Ooo=l(),dg=a("li"),rse=a("strong"),Voo=o("realm"),Xoo=o(" \u2014 "),cP=a("a"),zoo=o("RealmConfig"),Qoo=o(" (REALM model)"),Woo=l(),cg=a("li"),tse=a("strong"),Hoo=o("reformer"),Uoo=o(" \u2014 "),fP=a("a"),Joo=o("ReformerConfig"),Yoo=o(" (Reformer model)"),Koo=l(),fg=a("li"),ase=a("strong"),Zoo=o("regnet"),ero=o(" \u2014 "),mP=a("a"),oro=o("RegNetConfig"),rro=o(" (RegNet model)"),tro=l(),mg=a("li"),nse=a("strong"),aro=o("rembert"),nro=o(" \u2014 "),gP=a("a"),sro=o("RemBertConfig"),lro=o(" (RemBERT model)"),iro=l(),gg=a("li"),sse=a("strong"),dro=o("resnet"),cro=o(" \u2014 "),hP=a("a"),fro=o("ResNetConfig"),mro=o(" (ResNet model)"),gro=l(),hg=a("li"),lse=a("strong"),hro=o("retribert"),pro=o(" \u2014 "),pP=a("a"),_ro=o("RetriBertConfig"),uro=o(" (RetriBERT model)"),bro=l(),pg=a("li"),ise=a("strong"),vro=o("roberta"),Fro=o(" \u2014 "),_P=a("a"),Tro=o("RobertaConfig"),Mro=o(" (RoBERTa model)"),Ero=l(),_g=a("li"),dse=a("strong"),Cro=o("roformer"),wro=o(" \u2014 "),uP=a("a"),Aro=o("RoFormerConfig"),Lro=o(" (RoFormer model)"),yro=l(),ug=a("li"),cse=a("strong"),xro=o("segformer"),$ro=o(" \u2014 "),bP=a("a"),kro=o("SegformerConfig"),Sro=o(" (SegFormer model)"),Rro=l(),bg=a("li"),fse=a("strong"),Pro=o("sew"),Bro=o(" \u2014 "),vP=a("a"),Iro=o("SEWConfig"),Nro=o(" (SEW model)"),qro=l(),vg=a("li"),mse=a("strong"),jro=o("sew-d"),Dro=o(" \u2014 "),FP=a("a"),Gro=o("SEWDConfig"),Oro=o(" (SEW-D model)"),Vro=l(),Fg=a("li"),gse=a("strong"),Xro=o("speech-encoder-decoder"),zro=o(" \u2014 "),TP=a("a"),Qro=o("SpeechEncoderDecoderConfig"),Wro=o(" (Speech Encoder decoder model)"),Hro=l(),Tg=a("li"),hse=a("strong"),Uro=o("speech_to_text"),Jro=o(" \u2014 "),MP=a("a"),Yro=o("Speech2TextConfig"),Kro=o(" (Speech2Text model)"),Zro=l(),Mg=a("li"),pse=a("strong"),eto=o("speech_to_text_2"),oto=o(" \u2014 "),EP=a("a"),rto=o("Speech2Text2Config"),tto=o(" (Speech2Text2 model)"),ato=l(),Eg=a("li"),_se=a("strong"),nto=o("splinter"),sto=o(" \u2014 "),CP=a("a"),lto=o("SplinterConfig"),ito=o(" (Splinter model)"),dto=l(),Cg=a("li"),use=a("strong"),cto=o("squeezebert"),fto=o(" \u2014 "),wP=a("a"),mto=o("SqueezeBertConfig"),gto=o(" (SqueezeBERT model)"),hto=l(),wg=a("li"),bse=a("strong"),pto=o("swin"),_to=o(" \u2014 "),AP=a("a"),uto=o("SwinConfig"),bto=o(" (Swin Transformer model)"),vto=l(),Ag=a("li"),vse=a("strong"),Fto=o("t5"),Tto=o(" \u2014 "),LP=a("a"),Mto=o("T5Config"),Eto=o(" (T5 model)"),Cto=l(),Lg=a("li"),Fse=a("strong"),wto=o("tapas"),Ato=o(" \u2014 "),yP=a("a"),Lto=o("TapasConfig"),yto=o(" (TAPAS model)"),xto=l(),yg=a("li"),Tse=a("strong"),$to=o("trajectory_transformer"),kto=o(" \u2014 "),xP=a("a"),Sto=o("TrajectoryTransformerConfig"),Rto=o(" (Trajectory Transformer model)"),Pto=l(),xg=a("li"),Mse=a("strong"),Bto=o("transfo-xl"),Ito=o(" \u2014 "),$P=a("a"),Nto=o("TransfoXLConfig"),qto=o(" (Transformer-XL model)"),jto=l(),$g=a("li"),Ese=a("strong"),Dto=o("trocr"),Gto=o(" \u2014 "),kP=a("a"),Oto=o("TrOCRConfig"),Vto=o(" (TrOCR model)"),Xto=l(),kg=a("li"),Cse=a("strong"),zto=o("unispeech"),Qto=o(" \u2014 "),SP=a("a"),Wto=o("UniSpeechConfig"),Hto=o(" (UniSpeech model)"),Uto=l(),Sg=a("li"),wse=a("strong"),Jto=o("unispeech-sat"),Yto=o(" \u2014 "),RP=a("a"),Kto=o("UniSpeechSatConfig"),Zto=o(" (UniSpeechSat model)"),eao=l(),Rg=a("li"),Ase=a("strong"),oao=o("van"),rao=o(" \u2014 "),PP=a("a"),tao=o("VanConfig"),aao=o(" (VAN model)"),nao=l(),Pg=a("li"),Lse=a("strong"),sao=o("vilt"),lao=o(" \u2014 "),BP=a("a"),iao=o("ViltConfig"),dao=o(" (ViLT model)"),cao=l(),Bg=a("li"),yse=a("strong"),fao=o("vision-encoder-decoder"),mao=o(" \u2014 "),IP=a("a"),gao=o("VisionEncoderDecoderConfig"),hao=o(" (Vision Encoder decoder model)"),pao=l(),Ig=a("li"),xse=a("strong"),_ao=o("vision-text-dual-encoder"),uao=o(" \u2014 "),NP=a("a"),bao=o("VisionTextDualEncoderConfig"),vao=o(" (VisionTextDualEncoder model)"),Fao=l(),Ng=a("li"),$se=a("strong"),Tao=o("visual_bert"),Mao=o(" \u2014 "),qP=a("a"),Eao=o("VisualBertConfig"),Cao=o(" (VisualBERT model)"),wao=l(),qg=a("li"),kse=a("strong"),Aao=o("vit"),Lao=o(" \u2014 "),jP=a("a"),yao=o("ViTConfig"),xao=o(" (ViT model)"),$ao=l(),jg=a("li"),Sse=a("strong"),kao=o("vit_mae"),Sao=o(" \u2014 "),DP=a("a"),Rao=o("ViTMAEConfig"),Pao=o(" (ViTMAE model)"),Bao=l(),Dg=a("li"),Rse=a("strong"),Iao=o("wav2vec2"),Nao=o(" \u2014 "),GP=a("a"),qao=o("Wav2Vec2Config"),jao=o(" (Wav2Vec2 model)"),Dao=l(),Gg=a("li"),Pse=a("strong"),Gao=o("wav2vec2-conformer"),Oao=o(" \u2014 "),OP=a("a"),Vao=o("Wav2Vec2ConformerConfig"),Xao=o(" (Wav2Vec2-Conformer model)"),zao=l(),Og=a("li"),Bse=a("strong"),Qao=o("wavlm"),Wao=o(" \u2014 "),VP=a("a"),Hao=o("WavLMConfig"),Uao=o(" (WavLM model)"),Jao=l(),Vg=a("li"),Ise=a("strong"),Yao=o("xglm"),Kao=o(" \u2014 "),XP=a("a"),Zao=o("XGLMConfig"),eno=o(" (XGLM model)"),ono=l(),Xg=a("li"),Nse=a("strong"),rno=o("xlm"),tno=o(" \u2014 "),zP=a("a"),ano=o("XLMConfig"),nno=o(" (XLM model)"),sno=l(),zg=a("li"),qse=a("strong"),lno=o("xlm-prophetnet"),ino=o(" \u2014 "),QP=a("a"),dno=o("XLMProphetNetConfig"),cno=o(" (XLM-ProphetNet model)"),fno=l(),Qg=a("li"),jse=a("strong"),mno=o("xlm-roberta"),gno=o(" \u2014 "),WP=a("a"),hno=o("XLMRobertaConfig"),pno=o(" (XLM-RoBERTa model)"),_no=l(),Wg=a("li"),Dse=a("strong"),uno=o("xlm-roberta-xl"),bno=o(" \u2014 "),HP=a("a"),vno=o("XLMRobertaXLConfig"),Fno=o(" (XLM-RoBERTa-XL model)"),Tno=l(),Hg=a("li"),Gse=a("strong"),Mno=o("xlnet"),Eno=o(" \u2014 "),UP=a("a"),Cno=o("XLNetConfig"),wno=o(" (XLNet model)"),Ano=l(),Ug=a("li"),Ose=a("strong"),Lno=o("yolos"),yno=o(" \u2014 "),JP=a("a"),xno=o("YolosConfig"),$no=o(" (YOLOS model)"),kno=l(),Jg=a("li"),Vse=a("strong"),Sno=o("yoso"),Rno=o(" \u2014 "),YP=a("a"),Pno=o("YosoConfig"),Bno=o(" (YOSO model)"),Ino=l(),F(Yg.$$.fragment),Nno=l(),Kg=a("div"),F(f7.$$.fragment),qno=l(),Xse=a("p"),jno=o("Register a new configuration for this class."),aXe=l(),Ni=a("h2"),Zg=a("a"),zse=a("span"),F(m7.$$.fragment),Dno=l(),Qse=a("span"),Gno=o("AutoTokenizer"),nXe=l(),Lo=a("div"),F(g7.$$.fragment),Ono=l(),h7=a("p"),Vno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KP=a("a"),Xno=o("AutoTokenizer.from_pretrained()"),zno=o(" class method."),Qno=l(),p7=a("p"),Wno=o("This class cannot be instantiated directly using "),Wse=a("code"),Hno=o("__init__()"),Uno=o(" (throws an error)."),Jno=l(),yr=a("div"),F(_7.$$.fragment),Yno=l(),Hse=a("p"),Kno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Zno=l(),Pa=a("p"),eso=o("The tokenizer class to instantiate is selected based on the "),Use=a("code"),oso=o("model_type"),rso=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),tso=o("pretrained_model_name_or_path"),aso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=a("code"),nso=o("pretrained_model_name_or_path"),sso=o(":"),lso=l(),k=a("ul"),jn=a("li"),Kse=a("strong"),iso=o("albert"),dso=o(" \u2014 "),ZP=a("a"),cso=o("AlbertTokenizer"),fso=o(" or "),eB=a("a"),mso=o("AlbertTokenizerFast"),gso=o(" (ALBERT model)"),hso=l(),Dn=a("li"),Zse=a("strong"),pso=o("bart"),_so=o(" \u2014 "),oB=a("a"),uso=o("BartTokenizer"),bso=o(" or "),rB=a("a"),vso=o("BartTokenizerFast"),Fso=o(" (BART model)"),Tso=l(),Gn=a("li"),ele=a("strong"),Mso=o("barthez"),Eso=o(" \u2014 "),tB=a("a"),Cso=o("BarthezTokenizer"),wso=o(" or "),aB=a("a"),Aso=o("BarthezTokenizerFast"),Lso=o(" (BARThez model)"),yso=l(),eh=a("li"),ole=a("strong"),xso=o("bartpho"),$so=o(" \u2014 "),nB=a("a"),kso=o("BartphoTokenizer"),Sso=o(" (BARTpho model)"),Rso=l(),On=a("li"),rle=a("strong"),Pso=o("bert"),Bso=o(" \u2014 "),sB=a("a"),Iso=o("BertTokenizer"),Nso=o(" or "),lB=a("a"),qso=o("BertTokenizerFast"),jso=o(" (BERT model)"),Dso=l(),oh=a("li"),tle=a("strong"),Gso=o("bert-generation"),Oso=o(" \u2014 "),iB=a("a"),Vso=o("BertGenerationTokenizer"),Xso=o(" (Bert Generation model)"),zso=l(),rh=a("li"),ale=a("strong"),Qso=o("bert-japanese"),Wso=o(" \u2014 "),dB=a("a"),Hso=o("BertJapaneseTokenizer"),Uso=o(" (BertJapanese model)"),Jso=l(),th=a("li"),nle=a("strong"),Yso=o("bertweet"),Kso=o(" \u2014 "),cB=a("a"),Zso=o("BertweetTokenizer"),elo=o(" (BERTweet model)"),olo=l(),Vn=a("li"),sle=a("strong"),rlo=o("big_bird"),tlo=o(" \u2014 "),fB=a("a"),alo=o("BigBirdTokenizer"),nlo=o(" or "),mB=a("a"),slo=o("BigBirdTokenizerFast"),llo=o(" (BigBird model)"),ilo=l(),Xn=a("li"),lle=a("strong"),dlo=o("bigbird_pegasus"),clo=o(" \u2014 "),gB=a("a"),flo=o("PegasusTokenizer"),mlo=o(" or "),hB=a("a"),glo=o("PegasusTokenizerFast"),hlo=o(" (BigBird-Pegasus model)"),plo=l(),zn=a("li"),ile=a("strong"),_lo=o("blenderbot"),ulo=o(" \u2014 "),pB=a("a"),blo=o("BlenderbotTokenizer"),vlo=o(" or "),_B=a("a"),Flo=o("BlenderbotTokenizerFast"),Tlo=o(" (Blenderbot model)"),Mlo=l(),ah=a("li"),dle=a("strong"),Elo=o("blenderbot-small"),Clo=o(" \u2014 "),uB=a("a"),wlo=o("BlenderbotSmallTokenizer"),Alo=o(" (BlenderbotSmall model)"),Llo=l(),nh=a("li"),cle=a("strong"),ylo=o("bloom"),xlo=o(" \u2014 "),bB=a("a"),$lo=o("BloomTokenizerFast"),klo=o(" (BLOOM model)"),Slo=l(),sh=a("li"),fle=a("strong"),Rlo=o("byt5"),Plo=o(" \u2014 "),vB=a("a"),Blo=o("ByT5Tokenizer"),Ilo=o(" (ByT5 model)"),Nlo=l(),Qn=a("li"),mle=a("strong"),qlo=o("camembert"),jlo=o(" \u2014 "),FB=a("a"),Dlo=o("CamembertTokenizer"),Glo=o(" or "),TB=a("a"),Olo=o("CamembertTokenizerFast"),Vlo=o(" (CamemBERT model)"),Xlo=l(),lh=a("li"),gle=a("strong"),zlo=o("canine"),Qlo=o(" \u2014 "),MB=a("a"),Wlo=o("CanineTokenizer"),Hlo=o(" (CANINE model)"),Ulo=l(),Wn=a("li"),hle=a("strong"),Jlo=o("clip"),Ylo=o(" \u2014 "),EB=a("a"),Klo=o("CLIPTokenizer"),Zlo=o(" or "),CB=a("a"),eio=o("CLIPTokenizerFast"),oio=o(" (CLIP model)"),rio=l(),Hn=a("li"),ple=a("strong"),tio=o("codegen"),aio=o(" \u2014 "),wB=a("a"),nio=o("CodeGenTokenizer"),sio=o(" or "),AB=a("a"),lio=o("CodeGenTokenizerFast"),iio=o(" (CodeGen model)"),dio=l(),Un=a("li"),_le=a("strong"),cio=o("convbert"),fio=o(" \u2014 "),LB=a("a"),mio=o("ConvBertTokenizer"),gio=o(" or "),yB=a("a"),hio=o("ConvBertTokenizerFast"),pio=o(" (ConvBERT model)"),_io=l(),Jn=a("li"),ule=a("strong"),uio=o("cpm"),bio=o(" \u2014 "),xB=a("a"),vio=o("CpmTokenizer"),Fio=o(" or "),$B=a("a"),Tio=o("CpmTokenizerFast"),Mio=o(" (CPM model)"),Eio=l(),ih=a("li"),ble=a("strong"),Cio=o("ctrl"),wio=o(" \u2014 "),kB=a("a"),Aio=o("CTRLTokenizer"),Lio=o(" (CTRL model)"),yio=l(),Yn=a("li"),vle=a("strong"),xio=o("data2vec-text"),$io=o(" \u2014 "),SB=a("a"),kio=o("RobertaTokenizer"),Sio=o(" or "),RB=a("a"),Rio=o("RobertaTokenizerFast"),Pio=o(" (Data2VecText model)"),Bio=l(),Kn=a("li"),Fle=a("strong"),Iio=o("deberta"),Nio=o(" \u2014 "),PB=a("a"),qio=o("DebertaTokenizer"),jio=o(" or "),BB=a("a"),Dio=o("DebertaTokenizerFast"),Gio=o(" (DeBERTa model)"),Oio=l(),Zn=a("li"),Tle=a("strong"),Vio=o("deberta-v2"),Xio=o(" \u2014 "),IB=a("a"),zio=o("DebertaV2Tokenizer"),Qio=o(" or "),NB=a("a"),Wio=o("DebertaV2TokenizerFast"),Hio=o(" (DeBERTa-v2 model)"),Uio=l(),es=a("li"),Mle=a("strong"),Jio=o("distilbert"),Yio=o(" \u2014 "),qB=a("a"),Kio=o("DistilBertTokenizer"),Zio=o(" or "),jB=a("a"),edo=o("DistilBertTokenizerFast"),odo=o(" (DistilBERT model)"),rdo=l(),os=a("li"),Ele=a("strong"),tdo=o("dpr"),ado=o(" \u2014 "),DB=a("a"),ndo=o("DPRQuestionEncoderTokenizer"),sdo=o(" or "),GB=a("a"),ldo=o("DPRQuestionEncoderTokenizerFast"),ido=o(" (DPR model)"),ddo=l(),rs=a("li"),Cle=a("strong"),cdo=o("electra"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("ElectraTokenizer"),gdo=o(" or "),VB=a("a"),hdo=o("ElectraTokenizerFast"),pdo=o(" (ELECTRA model)"),_do=l(),dh=a("li"),wle=a("strong"),udo=o("flaubert"),bdo=o(" \u2014 "),XB=a("a"),vdo=o("FlaubertTokenizer"),Fdo=o(" (FlauBERT model)"),Tdo=l(),ts=a("li"),Ale=a("strong"),Mdo=o("fnet"),Edo=o(" \u2014 "),zB=a("a"),Cdo=o("FNetTokenizer"),wdo=o(" or "),QB=a("a"),Ado=o("FNetTokenizerFast"),Ldo=o(" (FNet model)"),ydo=l(),ch=a("li"),Lle=a("strong"),xdo=o("fsmt"),$do=o(" \u2014 "),WB=a("a"),kdo=o("FSMTTokenizer"),Sdo=o(" (FairSeq Machine-Translation model)"),Rdo=l(),as=a("li"),yle=a("strong"),Pdo=o("funnel"),Bdo=o(" \u2014 "),HB=a("a"),Ido=o("FunnelTokenizer"),Ndo=o(" or "),UB=a("a"),qdo=o("FunnelTokenizerFast"),jdo=o(" (Funnel Transformer model)"),Ddo=l(),ns=a("li"),xle=a("strong"),Gdo=o("gpt2"),Odo=o(" \u2014 "),JB=a("a"),Vdo=o("GPT2Tokenizer"),Xdo=o(" or "),YB=a("a"),zdo=o("GPT2TokenizerFast"),Qdo=o(" (OpenAI GPT-2 model)"),Wdo=l(),ss=a("li"),$le=a("strong"),Hdo=o("gpt_neo"),Udo=o(" \u2014 "),KB=a("a"),Jdo=o("GPT2Tokenizer"),Ydo=o(" or "),ZB=a("a"),Kdo=o("GPT2TokenizerFast"),Zdo=o(" (GPT Neo model)"),eco=l(),fh=a("li"),kle=a("strong"),oco=o("gpt_neox"),rco=o(" \u2014 "),eI=a("a"),tco=o("GPTNeoXTokenizerFast"),aco=o(" (GPT NeoX model)"),nco=l(),ls=a("li"),Sle=a("strong"),sco=o("gptj"),lco=o(" \u2014 "),oI=a("a"),ico=o("GPT2Tokenizer"),dco=o(" or "),rI=a("a"),cco=o("GPT2TokenizerFast"),fco=o(" (GPT-J model)"),mco=l(),is=a("li"),Rle=a("strong"),gco=o("groupvit"),hco=o(" \u2014 "),tI=a("a"),pco=o("CLIPTokenizer"),_co=o(" or "),aI=a("a"),uco=o("CLIPTokenizerFast"),bco=o(" (GroupViT model)"),vco=l(),ds=a("li"),Ple=a("strong"),Fco=o("herbert"),Tco=o(" \u2014 "),nI=a("a"),Mco=o("HerbertTokenizer"),Eco=o(" or "),sI=a("a"),Cco=o("HerbertTokenizerFast"),wco=o(" (HerBERT model)"),Aco=l(),mh=a("li"),Ble=a("strong"),Lco=o("hubert"),yco=o(" \u2014 "),lI=a("a"),xco=o("Wav2Vec2CTCTokenizer"),$co=o(" (Hubert model)"),kco=l(),cs=a("li"),Ile=a("strong"),Sco=o("ibert"),Rco=o(" \u2014 "),iI=a("a"),Pco=o("RobertaTokenizer"),Bco=o(" or "),dI=a("a"),Ico=o("RobertaTokenizerFast"),Nco=o(" (I-BERT model)"),qco=l(),fs=a("li"),Nle=a("strong"),jco=o("layoutlm"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("LayoutLMTokenizer"),Oco=o(" or "),fI=a("a"),Vco=o("LayoutLMTokenizerFast"),Xco=o(" (LayoutLM model)"),zco=l(),ms=a("li"),qle=a("strong"),Qco=o("layoutlmv2"),Wco=o(" \u2014 "),mI=a("a"),Hco=o("LayoutLMv2Tokenizer"),Uco=o(" or "),gI=a("a"),Jco=o("LayoutLMv2TokenizerFast"),Yco=o(" (LayoutLMv2 model)"),Kco=l(),gs=a("li"),jle=a("strong"),Zco=o("layoutlmv3"),efo=o(" \u2014 "),hI=a("a"),ofo=o("LayoutLMv3Tokenizer"),rfo=o(" or "),pI=a("a"),tfo=o("LayoutLMv3TokenizerFast"),afo=o(" (LayoutLMv3 model)"),nfo=l(),hs=a("li"),Dle=a("strong"),sfo=o("layoutxlm"),lfo=o(" \u2014 "),_I=a("a"),ifo=o("LayoutXLMTokenizer"),dfo=o(" or "),uI=a("a"),cfo=o("LayoutXLMTokenizerFast"),ffo=o(" (LayoutXLM model)"),mfo=l(),ps=a("li"),Gle=a("strong"),gfo=o("led"),hfo=o(" \u2014 "),bI=a("a"),pfo=o("LEDTokenizer"),_fo=o(" or "),vI=a("a"),ufo=o("LEDTokenizerFast"),bfo=o(" (LED model)"),vfo=l(),_s=a("li"),Ole=a("strong"),Ffo=o("longformer"),Tfo=o(" \u2014 "),FI=a("a"),Mfo=o("LongformerTokenizer"),Efo=o(" or "),TI=a("a"),Cfo=o("LongformerTokenizerFast"),wfo=o(" (Longformer model)"),Afo=l(),us=a("li"),Vle=a("strong"),Lfo=o("longt5"),yfo=o(" \u2014 "),MI=a("a"),xfo=o("T5Tokenizer"),$fo=o(" or "),EI=a("a"),kfo=o("T5TokenizerFast"),Sfo=o(" (LongT5 model)"),Rfo=l(),gh=a("li"),Xle=a("strong"),Pfo=o("luke"),Bfo=o(" \u2014 "),CI=a("a"),Ifo=o("LukeTokenizer"),Nfo=o(" (LUKE model)"),qfo=l(),bs=a("li"),zle=a("strong"),jfo=o("lxmert"),Dfo=o(" \u2014 "),wI=a("a"),Gfo=o("LxmertTokenizer"),Ofo=o(" or "),AI=a("a"),Vfo=o("LxmertTokenizerFast"),Xfo=o(" (LXMERT model)"),zfo=l(),hh=a("li"),Qle=a("strong"),Qfo=o("m2m_100"),Wfo=o(" \u2014 "),LI=a("a"),Hfo=o("M2M100Tokenizer"),Ufo=o(" (M2M100 model)"),Jfo=l(),ph=a("li"),Wle=a("strong"),Yfo=o("marian"),Kfo=o(" \u2014 "),yI=a("a"),Zfo=o("MarianTokenizer"),emo=o(" (Marian model)"),omo=l(),vs=a("li"),Hle=a("strong"),rmo=o("mbart"),tmo=o(" \u2014 "),xI=a("a"),amo=o("MBartTokenizer"),nmo=o(" or "),$I=a("a"),smo=o("MBartTokenizerFast"),lmo=o(" (mBART model)"),imo=l(),Fs=a("li"),Ule=a("strong"),dmo=o("mbart50"),cmo=o(" \u2014 "),kI=a("a"),fmo=o("MBart50Tokenizer"),mmo=o(" or "),SI=a("a"),gmo=o("MBart50TokenizerFast"),hmo=o(" (mBART-50 model)"),pmo=l(),Ts=a("li"),Jle=a("strong"),_mo=o("megatron-bert"),umo=o(" \u2014 "),RI=a("a"),bmo=o("BertTokenizer"),vmo=o(" or "),PI=a("a"),Fmo=o("BertTokenizerFast"),Tmo=o(" (Megatron-BERT model)"),Mmo=l(),_h=a("li"),Yle=a("strong"),Emo=o("mluke"),Cmo=o(" \u2014 "),BI=a("a"),wmo=o("MLukeTokenizer"),Amo=o(" (mLUKE model)"),Lmo=l(),Ms=a("li"),Kle=a("strong"),ymo=o("mobilebert"),xmo=o(" \u2014 "),II=a("a"),$mo=o("MobileBertTokenizer"),kmo=o(" or "),NI=a("a"),Smo=o("MobileBertTokenizerFast"),Rmo=o(" (MobileBERT model)"),Pmo=l(),Es=a("li"),Zle=a("strong"),Bmo=o("mpnet"),Imo=o(" \u2014 "),qI=a("a"),Nmo=o("MPNetTokenizer"),qmo=o(" or "),jI=a("a"),jmo=o("MPNetTokenizerFast"),Dmo=o(" (MPNet model)"),Gmo=l(),Cs=a("li"),eie=a("strong"),Omo=o("mt5"),Vmo=o(" \u2014 "),DI=a("a"),Xmo=o("MT5Tokenizer"),zmo=o(" or "),GI=a("a"),Qmo=o("MT5TokenizerFast"),Wmo=o(" (MT5 model)"),Hmo=l(),ws=a("li"),oie=a("strong"),Umo=o("mvp"),Jmo=o(" \u2014 "),OI=a("a"),Ymo=o("MvpTokenizer"),Kmo=o(" or "),VI=a("a"),Zmo=o("MvpTokenizerFast"),ego=o(" (MVP model)"),ogo=l(),As=a("li"),rie=a("strong"),rgo=o("nezha"),tgo=o(" \u2014 "),XI=a("a"),ago=o("BertTokenizer"),ngo=o(" or "),zI=a("a"),sgo=o("BertTokenizerFast"),lgo=o(" (Nezha model)"),igo=l(),Ls=a("li"),tie=a("strong"),dgo=o("nystromformer"),cgo=o(" \u2014 "),QI=a("a"),fgo=o("AlbertTokenizer"),mgo=o(" or "),WI=a("a"),ggo=o("AlbertTokenizerFast"),hgo=o(" (Nystr\xF6mformer model)"),pgo=l(),ys=a("li"),aie=a("strong"),_go=o("openai-gpt"),ugo=o(" \u2014 "),HI=a("a"),bgo=o("OpenAIGPTTokenizer"),vgo=o(" or "),UI=a("a"),Fgo=o("OpenAIGPTTokenizerFast"),Tgo=o(" (OpenAI GPT model)"),Mgo=l(),uh=a("li"),nie=a("strong"),Ego=o("opt"),Cgo=o(" \u2014 "),JI=a("a"),wgo=o("GPT2Tokenizer"),Ago=o(" (OPT model)"),Lgo=l(),xs=a("li"),sie=a("strong"),ygo=o("pegasus"),xgo=o(" \u2014 "),YI=a("a"),$go=o("PegasusTokenizer"),kgo=o(" or "),KI=a("a"),Sgo=o("PegasusTokenizerFast"),Rgo=o(" (Pegasus model)"),Pgo=l(),bh=a("li"),lie=a("strong"),Bgo=o("perceiver"),Igo=o(" \u2014 "),ZI=a("a"),Ngo=o("PerceiverTokenizer"),qgo=o(" (Perceiver model)"),jgo=l(),vh=a("li"),iie=a("strong"),Dgo=o("phobert"),Ggo=o(" \u2014 "),eN=a("a"),Ogo=o("PhobertTokenizer"),Vgo=o(" (PhoBERT model)"),Xgo=l(),Fh=a("li"),die=a("strong"),zgo=o("plbart"),Qgo=o(" \u2014 "),oN=a("a"),Wgo=o("PLBartTokenizer"),Hgo=o(" (PLBart model)"),Ugo=l(),Th=a("li"),cie=a("strong"),Jgo=o("prophetnet"),Ygo=o(" \u2014 "),rN=a("a"),Kgo=o("ProphetNetTokenizer"),Zgo=o(" (ProphetNet model)"),eho=l(),$s=a("li"),fie=a("strong"),oho=o("qdqbert"),rho=o(" \u2014 "),tN=a("a"),tho=o("BertTokenizer"),aho=o(" or "),aN=a("a"),nho=o("BertTokenizerFast"),sho=o(" (QDQBert model)"),lho=l(),Mh=a("li"),mie=a("strong"),iho=o("rag"),dho=o(" \u2014 "),nN=a("a"),cho=o("RagTokenizer"),fho=o(" (RAG model)"),mho=l(),ks=a("li"),gie=a("strong"),gho=o("realm"),hho=o(" \u2014 "),sN=a("a"),pho=o("RealmTokenizer"),_ho=o(" or "),lN=a("a"),uho=o("RealmTokenizerFast"),bho=o(" (REALM model)"),vho=l(),Ss=a("li"),hie=a("strong"),Fho=o("reformer"),Tho=o(" \u2014 "),iN=a("a"),Mho=o("ReformerTokenizer"),Eho=o(" or "),dN=a("a"),Cho=o("ReformerTokenizerFast"),who=o(" (Reformer model)"),Aho=l(),Rs=a("li"),pie=a("strong"),Lho=o("rembert"),yho=o(" \u2014 "),cN=a("a"),xho=o("RemBertTokenizer"),$ho=o(" or "),fN=a("a"),kho=o("RemBertTokenizerFast"),Sho=o(" (RemBERT model)"),Rho=l(),Ps=a("li"),_ie=a("strong"),Pho=o("retribert"),Bho=o(" \u2014 "),mN=a("a"),Iho=o("RetriBertTokenizer"),Nho=o(" or "),gN=a("a"),qho=o("RetriBertTokenizerFast"),jho=o(" (RetriBERT model)"),Dho=l(),Bs=a("li"),uie=a("strong"),Gho=o("roberta"),Oho=o(" \u2014 "),hN=a("a"),Vho=o("RobertaTokenizer"),Xho=o(" or "),pN=a("a"),zho=o("RobertaTokenizerFast"),Qho=o(" (RoBERTa model)"),Who=l(),Is=a("li"),bie=a("strong"),Hho=o("roformer"),Uho=o(" \u2014 "),_N=a("a"),Jho=o("RoFormerTokenizer"),Yho=o(" or "),uN=a("a"),Kho=o("RoFormerTokenizerFast"),Zho=o(" (RoFormer model)"),epo=l(),Eh=a("li"),vie=a("strong"),opo=o("speech_to_text"),rpo=o(" \u2014 "),bN=a("a"),tpo=o("Speech2TextTokenizer"),apo=o(" (Speech2Text model)"),npo=l(),Ch=a("li"),Fie=a("strong"),spo=o("speech_to_text_2"),lpo=o(" \u2014 "),vN=a("a"),ipo=o("Speech2Text2Tokenizer"),dpo=o(" (Speech2Text2 model)"),cpo=l(),Ns=a("li"),Tie=a("strong"),fpo=o("splinter"),mpo=o(" \u2014 "),FN=a("a"),gpo=o("SplinterTokenizer"),hpo=o(" or "),TN=a("a"),ppo=o("SplinterTokenizerFast"),_po=o(" (Splinter model)"),upo=l(),qs=a("li"),Mie=a("strong"),bpo=o("squeezebert"),vpo=o(" \u2014 "),MN=a("a"),Fpo=o("SqueezeBertTokenizer"),Tpo=o(" or "),EN=a("a"),Mpo=o("SqueezeBertTokenizerFast"),Epo=o(" (SqueezeBERT model)"),Cpo=l(),js=a("li"),Eie=a("strong"),wpo=o("t5"),Apo=o(" \u2014 "),CN=a("a"),Lpo=o("T5Tokenizer"),ypo=o(" or "),wN=a("a"),xpo=o("T5TokenizerFast"),$po=o(" (T5 model)"),kpo=l(),wh=a("li"),Cie=a("strong"),Spo=o("tapas"),Rpo=o(" \u2014 "),AN=a("a"),Ppo=o("TapasTokenizer"),Bpo=o(" (TAPAS model)"),Ipo=l(),Ah=a("li"),wie=a("strong"),Npo=o("tapex"),qpo=o(" \u2014 "),LN=a("a"),jpo=o("TapexTokenizer"),Dpo=o(" (TAPEX model)"),Gpo=l(),Lh=a("li"),Aie=a("strong"),Opo=o("transfo-xl"),Vpo=o(" \u2014 "),yN=a("a"),Xpo=o("TransfoXLTokenizer"),zpo=o(" (Transformer-XL model)"),Qpo=l(),Ds=a("li"),Lie=a("strong"),Wpo=o("vilt"),Hpo=o(" \u2014 "),xN=a("a"),Upo=o("BertTokenizer"),Jpo=o(" or "),$N=a("a"),Ypo=o("BertTokenizerFast"),Kpo=o(" (ViLT model)"),Zpo=l(),Gs=a("li"),yie=a("strong"),e_o=o("visual_bert"),o_o=o(" \u2014 "),kN=a("a"),r_o=o("BertTokenizer"),t_o=o(" or "),SN=a("a"),a_o=o("BertTokenizerFast"),n_o=o(" (VisualBERT model)"),s_o=l(),yh=a("li"),xie=a("strong"),l_o=o("wav2vec2"),i_o=o(" \u2014 "),RN=a("a"),d_o=o("Wav2Vec2CTCTokenizer"),c_o=o(" (Wav2Vec2 model)"),f_o=l(),xh=a("li"),$ie=a("strong"),m_o=o("wav2vec2-conformer"),g_o=o(" \u2014 "),PN=a("a"),h_o=o("Wav2Vec2CTCTokenizer"),p_o=o(" (Wav2Vec2-Conformer model)"),__o=l(),$h=a("li"),kie=a("strong"),u_o=o("wav2vec2_phoneme"),b_o=o(" \u2014 "),BN=a("a"),v_o=o("Wav2Vec2PhonemeCTCTokenizer"),F_o=o(" (Wav2Vec2Phoneme model)"),T_o=l(),Os=a("li"),Sie=a("strong"),M_o=o("xglm"),E_o=o(" \u2014 "),IN=a("a"),C_o=o("XGLMTokenizer"),w_o=o(" or "),NN=a("a"),A_o=o("XGLMTokenizerFast"),L_o=o(" (XGLM model)"),y_o=l(),kh=a("li"),Rie=a("strong"),x_o=o("xlm"),$_o=o(" \u2014 "),qN=a("a"),k_o=o("XLMTokenizer"),S_o=o(" (XLM model)"),R_o=l(),Sh=a("li"),Pie=a("strong"),P_o=o("xlm-prophetnet"),B_o=o(" \u2014 "),jN=a("a"),I_o=o("XLMProphetNetTokenizer"),N_o=o(" (XLM-ProphetNet model)"),q_o=l(),Vs=a("li"),Bie=a("strong"),j_o=o("xlm-roberta"),D_o=o(" \u2014 "),DN=a("a"),G_o=o("XLMRobertaTokenizer"),O_o=o(" or "),GN=a("a"),V_o=o("XLMRobertaTokenizerFast"),X_o=o(" (XLM-RoBERTa model)"),z_o=l(),Xs=a("li"),Iie=a("strong"),Q_o=o("xlm-roberta-xl"),W_o=o(" \u2014 "),ON=a("a"),H_o=o("RobertaTokenizer"),U_o=o(" or "),VN=a("a"),J_o=o("RobertaTokenizerFast"),Y_o=o(" (XLM-RoBERTa-XL model)"),K_o=l(),zs=a("li"),Nie=a("strong"),Z_o=o("xlnet"),euo=o(" \u2014 "),XN=a("a"),ouo=o("XLNetTokenizer"),ruo=o(" or "),zN=a("a"),tuo=o("XLNetTokenizerFast"),auo=o(" (XLNet model)"),nuo=l(),Qs=a("li"),qie=a("strong"),suo=o("yoso"),luo=o(" \u2014 "),QN=a("a"),iuo=o("AlbertTokenizer"),duo=o(" or "),WN=a("a"),cuo=o("AlbertTokenizerFast"),fuo=o(" (YOSO model)"),muo=l(),F(Rh.$$.fragment),guo=l(),Ph=a("div"),F(u7.$$.fragment),huo=l(),jie=a("p"),puo=o("Register a new tokenizer in this mapping."),sXe=l(),qi=a("h2"),Bh=a("a"),Die=a("span"),F(b7.$$.fragment),_uo=l(),Gie=a("span"),uuo=o("AutoFeatureExtractor"),lXe=l(),yo=a("div"),F(v7.$$.fragment),buo=l(),F7=a("p"),vuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HN=a("a"),Fuo=o("AutoFeatureExtractor.from_pretrained()"),Tuo=o(" class method."),Muo=l(),T7=a("p"),Euo=o("This class cannot be instantiated directly using "),Oie=a("code"),Cuo=o("__init__()"),wuo=o(" (throws an error)."),Auo=l(),Ue=a("div"),F(M7.$$.fragment),Luo=l(),Vie=a("p"),yuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xuo=l(),Ba=a("p"),$uo=o("The feature extractor class to instantiate is selected based on the "),Xie=a("code"),kuo=o("model_type"),Suo=o(` property of the config object
(either passed as an argument or loaded from `),zie=a("code"),Ruo=o("pretrained_model_name_or_path"),Puo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qie=a("code"),Buo=o("pretrained_model_name_or_path"),Iuo=o(":"),Nuo=l(),Y=a("ul"),Ih=a("li"),Wie=a("strong"),quo=o("beit"),juo=o(" \u2014 "),UN=a("a"),Duo=o("BeitFeatureExtractor"),Guo=o(" (BEiT model)"),Ouo=l(),Nh=a("li"),Hie=a("strong"),Vuo=o("clip"),Xuo=o(" \u2014 "),JN=a("a"),zuo=o("CLIPFeatureExtractor"),Quo=o(" (CLIP model)"),Wuo=l(),qh=a("li"),Uie=a("strong"),Huo=o("convnext"),Uuo=o(" \u2014 "),YN=a("a"),Juo=o("ConvNextFeatureExtractor"),Yuo=o(" (ConvNeXT model)"),Kuo=l(),jh=a("li"),Jie=a("strong"),Zuo=o("cvt"),e1o=o(" \u2014 "),KN=a("a"),o1o=o("ConvNextFeatureExtractor"),r1o=o(" (CvT model)"),t1o=l(),Dh=a("li"),Yie=a("strong"),a1o=o("data2vec-audio"),n1o=o(" \u2014 "),ZN=a("a"),s1o=o("Wav2Vec2FeatureExtractor"),l1o=o(" (Data2VecAudio model)"),i1o=l(),Gh=a("li"),Kie=a("strong"),d1o=o("data2vec-vision"),c1o=o(" \u2014 "),eq=a("a"),f1o=o("BeitFeatureExtractor"),m1o=o(" (Data2VecVision model)"),g1o=l(),Oh=a("li"),Zie=a("strong"),h1o=o("deit"),p1o=o(" \u2014 "),oq=a("a"),_1o=o("DeiTFeatureExtractor"),u1o=o(" (DeiT model)"),b1o=l(),Vh=a("li"),ede=a("strong"),v1o=o("detr"),F1o=o(" \u2014 "),rq=a("a"),T1o=o("DetrFeatureExtractor"),M1o=o(" (DETR model)"),E1o=l(),Xh=a("li"),ode=a("strong"),C1o=o("dpt"),w1o=o(" \u2014 "),tq=a("a"),A1o=o("DPTFeatureExtractor"),L1o=o(" (DPT model)"),y1o=l(),zh=a("li"),rde=a("strong"),x1o=o("flava"),$1o=o(" \u2014 "),aq=a("a"),k1o=o("FlavaFeatureExtractor"),S1o=o(" (FLAVA model)"),R1o=l(),Qh=a("li"),tde=a("strong"),P1o=o("glpn"),B1o=o(" \u2014 "),nq=a("a"),I1o=o("GLPNFeatureExtractor"),N1o=o(" (GLPN model)"),q1o=l(),Wh=a("li"),ade=a("strong"),j1o=o("groupvit"),D1o=o(" \u2014 "),sq=a("a"),G1o=o("CLIPFeatureExtractor"),O1o=o(" (GroupViT model)"),V1o=l(),Hh=a("li"),nde=a("strong"),X1o=o("hubert"),z1o=o(" \u2014 "),lq=a("a"),Q1o=o("Wav2Vec2FeatureExtractor"),W1o=o(" (Hubert model)"),H1o=l(),Uh=a("li"),sde=a("strong"),U1o=o("imagegpt"),J1o=o(" \u2014 "),iq=a("a"),Y1o=o("ImageGPTFeatureExtractor"),K1o=o(" (ImageGPT model)"),Z1o=l(),Jh=a("li"),lde=a("strong"),e2o=o("layoutlmv2"),o2o=o(" \u2014 "),dq=a("a"),r2o=o("LayoutLMv2FeatureExtractor"),t2o=o(" (LayoutLMv2 model)"),a2o=l(),Yh=a("li"),ide=a("strong"),n2o=o("layoutlmv3"),s2o=o(" \u2014 "),cq=a("a"),l2o=o("LayoutLMv3FeatureExtractor"),i2o=o(" (LayoutLMv3 model)"),d2o=l(),Kh=a("li"),dde=a("strong"),c2o=o("levit"),f2o=o(" \u2014 "),fq=a("a"),m2o=o("LevitFeatureExtractor"),g2o=o(" (LeViT model)"),h2o=l(),Zh=a("li"),cde=a("strong"),p2o=o("maskformer"),_2o=o(" \u2014 "),mq=a("a"),u2o=o("MaskFormerFeatureExtractor"),b2o=o(" (MaskFormer model)"),v2o=l(),ep=a("li"),fde=a("strong"),F2o=o("mctct"),T2o=o(" \u2014 "),gq=a("a"),M2o=o("MCTCTFeatureExtractor"),E2o=o(" (M-CTC-T model)"),C2o=l(),op=a("li"),mde=a("strong"),w2o=o("mobilevit"),A2o=o(" \u2014 "),hq=a("a"),L2o=o("MobileViTFeatureExtractor"),y2o=o(" (MobileViT model)"),x2o=l(),rp=a("li"),gde=a("strong"),$2o=o("perceiver"),k2o=o(" \u2014 "),pq=a("a"),S2o=o("PerceiverFeatureExtractor"),R2o=o(" (Perceiver model)"),P2o=l(),tp=a("li"),hde=a("strong"),B2o=o("poolformer"),I2o=o(" \u2014 "),_q=a("a"),N2o=o("PoolFormerFeatureExtractor"),q2o=o(" (PoolFormer model)"),j2o=l(),ap=a("li"),pde=a("strong"),D2o=o("regnet"),G2o=o(" \u2014 "),uq=a("a"),O2o=o("ConvNextFeatureExtractor"),V2o=o(" (RegNet model)"),X2o=l(),np=a("li"),_de=a("strong"),z2o=o("resnet"),Q2o=o(" \u2014 "),bq=a("a"),W2o=o("ConvNextFeatureExtractor"),H2o=o(" (ResNet model)"),U2o=l(),sp=a("li"),ude=a("strong"),J2o=o("segformer"),Y2o=o(" \u2014 "),vq=a("a"),K2o=o("SegformerFeatureExtractor"),Z2o=o(" (SegFormer model)"),ebo=l(),lp=a("li"),bde=a("strong"),obo=o("speech_to_text"),rbo=o(" \u2014 "),Fq=a("a"),tbo=o("Speech2TextFeatureExtractor"),abo=o(" (Speech2Text model)"),nbo=l(),ip=a("li"),vde=a("strong"),sbo=o("swin"),lbo=o(" \u2014 "),Tq=a("a"),ibo=o("ViTFeatureExtractor"),dbo=o(" (Swin Transformer model)"),cbo=l(),dp=a("li"),Fde=a("strong"),fbo=o("van"),mbo=o(" \u2014 "),Mq=a("a"),gbo=o("ConvNextFeatureExtractor"),hbo=o(" (VAN model)"),pbo=l(),cp=a("li"),Tde=a("strong"),_bo=o("vilt"),ubo=o(" \u2014 "),Eq=a("a"),bbo=o("ViltFeatureExtractor"),vbo=o(" (ViLT model)"),Fbo=l(),fp=a("li"),Mde=a("strong"),Tbo=o("vit"),Mbo=o(" \u2014 "),Cq=a("a"),Ebo=o("ViTFeatureExtractor"),Cbo=o(" (ViT model)"),wbo=l(),mp=a("li"),Ede=a("strong"),Abo=o("vit_mae"),Lbo=o(" \u2014 "),wq=a("a"),ybo=o("ViTFeatureExtractor"),xbo=o(" (ViTMAE model)"),$bo=l(),gp=a("li"),Cde=a("strong"),kbo=o("wav2vec2"),Sbo=o(" \u2014 "),Aq=a("a"),Rbo=o("Wav2Vec2FeatureExtractor"),Pbo=o(" (Wav2Vec2 model)"),Bbo=l(),hp=a("li"),wde=a("strong"),Ibo=o("wav2vec2-conformer"),Nbo=o(" \u2014 "),Lq=a("a"),qbo=o("Wav2Vec2FeatureExtractor"),jbo=o(" (Wav2Vec2-Conformer model)"),Dbo=l(),pp=a("li"),Ade=a("strong"),Gbo=o("yolos"),Obo=o(" \u2014 "),yq=a("a"),Vbo=o("YolosFeatureExtractor"),Xbo=o(" (YOLOS model)"),zbo=l(),F(_p.$$.fragment),Qbo=l(),F(up.$$.fragment),Wbo=l(),bp=a("div"),F(E7.$$.fragment),Hbo=l(),Lde=a("p"),Ubo=o("Register a new feature extractor for this class."),iXe=l(),ji=a("h2"),vp=a("a"),yde=a("span"),F(C7.$$.fragment),Jbo=l(),xde=a("span"),Ybo=o("AutoProcessor"),dXe=l(),xo=a("div"),F(w7.$$.fragment),Kbo=l(),A7=a("p"),Zbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xq=a("a"),evo=o("AutoProcessor.from_pretrained()"),ovo=o(" class method."),rvo=l(),L7=a("p"),tvo=o("This class cannot be instantiated directly using "),$de=a("code"),avo=o("__init__()"),nvo=o(" (throws an error)."),svo=l(),Je=a("div"),F(y7.$$.fragment),lvo=l(),kde=a("p"),ivo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dvo=l(),Di=a("p"),cvo=o("The processor class to instantiate is selected based on the "),Sde=a("code"),fvo=o("model_type"),mvo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),gvo=o("pretrained_model_name_or_path"),hvo=o(" if possible):"),pvo=l(),he=a("ul"),Fp=a("li"),Pde=a("strong"),_vo=o("clip"),uvo=o(" \u2014 "),$q=a("a"),bvo=o("CLIPProcessor"),vvo=o(" (CLIP model)"),Fvo=l(),Tp=a("li"),Bde=a("strong"),Tvo=o("flava"),Mvo=o(" \u2014 "),Ide=a("code"),Evo=o("FLAVAProcessor"),Cvo=o(" (FLAVA model)"),wvo=l(),Mp=a("li"),Nde=a("strong"),Avo=o("groupvit"),Lvo=o(" \u2014 "),kq=a("a"),yvo=o("CLIPProcessor"),xvo=o(" (GroupViT model)"),$vo=l(),Ep=a("li"),qde=a("strong"),kvo=o("layoutlmv2"),Svo=o(" \u2014 "),Sq=a("a"),Rvo=o("LayoutLMv2Processor"),Pvo=o(" (LayoutLMv2 model)"),Bvo=l(),Cp=a("li"),jde=a("strong"),Ivo=o("layoutlmv3"),Nvo=o(" \u2014 "),Rq=a("a"),qvo=o("LayoutLMv3Processor"),jvo=o(" (LayoutLMv3 model)"),Dvo=l(),wp=a("li"),Dde=a("strong"),Gvo=o("layoutxlm"),Ovo=o(" \u2014 "),Pq=a("a"),Vvo=o("LayoutXLMProcessor"),Xvo=o(" (LayoutXLM model)"),zvo=l(),Ap=a("li"),Gde=a("strong"),Qvo=o("sew"),Wvo=o(" \u2014 "),Bq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (SEW model)"),Jvo=l(),Lp=a("li"),Ode=a("strong"),Yvo=o("sew-d"),Kvo=o(" \u2014 "),Iq=a("a"),Zvo=o("Wav2Vec2Processor"),eFo=o(" (SEW-D model)"),oFo=l(),yp=a("li"),Vde=a("strong"),rFo=o("speech_to_text"),tFo=o(" \u2014 "),Nq=a("a"),aFo=o("Speech2TextProcessor"),nFo=o(" (Speech2Text model)"),sFo=l(),xp=a("li"),Xde=a("strong"),lFo=o("speech_to_text_2"),iFo=o(" \u2014 "),qq=a("a"),dFo=o("Speech2Text2Processor"),cFo=o(" (Speech2Text2 model)"),fFo=l(),$p=a("li"),zde=a("strong"),mFo=o("trocr"),gFo=o(" \u2014 "),jq=a("a"),hFo=o("TrOCRProcessor"),pFo=o(" (TrOCR model)"),_Fo=l(),kp=a("li"),Qde=a("strong"),uFo=o("unispeech"),bFo=o(" \u2014 "),Dq=a("a"),vFo=o("Wav2Vec2Processor"),FFo=o(" (UniSpeech model)"),TFo=l(),Sp=a("li"),Wde=a("strong"),MFo=o("unispeech-sat"),EFo=o(" \u2014 "),Gq=a("a"),CFo=o("Wav2Vec2Processor"),wFo=o(" (UniSpeechSat model)"),AFo=l(),Rp=a("li"),Hde=a("strong"),LFo=o("vilt"),yFo=o(" \u2014 "),Oq=a("a"),xFo=o("ViltProcessor"),$Fo=o(" (ViLT model)"),kFo=l(),Pp=a("li"),Ude=a("strong"),SFo=o("vision-text-dual-encoder"),RFo=o(" \u2014 "),Vq=a("a"),PFo=o("VisionTextDualEncoderProcessor"),BFo=o(" (VisionTextDualEncoder model)"),IFo=l(),Bp=a("li"),Jde=a("strong"),NFo=o("wav2vec2"),qFo=o(" \u2014 "),Xq=a("a"),jFo=o("Wav2Vec2Processor"),DFo=o(" (Wav2Vec2 model)"),GFo=l(),Ip=a("li"),Yde=a("strong"),OFo=o("wav2vec2-conformer"),VFo=o(" \u2014 "),zq=a("a"),XFo=o("Wav2Vec2Processor"),zFo=o(" (Wav2Vec2-Conformer model)"),QFo=l(),Np=a("li"),Kde=a("strong"),WFo=o("wavlm"),HFo=o(" \u2014 "),Qq=a("a"),UFo=o("Wav2Vec2Processor"),JFo=o(" (WavLM model)"),YFo=l(),F(qp.$$.fragment),KFo=l(),F(jp.$$.fragment),ZFo=l(),Dp=a("div"),F(x7.$$.fragment),e6o=l(),Zde=a("p"),o6o=o("Register a new processor for this class."),cXe=l(),Gi=a("h2"),Gp=a("a"),ece=a("span"),F($7.$$.fragment),r6o=l(),oce=a("span"),t6o=o("AutoModel"),fXe=l(),$o=a("div"),F(k7.$$.fragment),a6o=l(),Oi=a("p"),n6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wq=a("a"),s6o=o("from_pretrained()"),l6o=o(" class method or the "),Hq=a("a"),i6o=o("from_config()"),d6o=o(` class
method.`),c6o=l(),S7=a("p"),f6o=o("This class cannot be instantiated directly using "),rce=a("code"),m6o=o("__init__()"),g6o=o(" (throws an error)."),h6o=l(),it=a("div"),F(R7.$$.fragment),p6o=l(),tce=a("p"),_6o=o("Instantiates one of the base model classes of the library from a configuration."),u6o=l(),Vi=a("p"),b6o=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),v6o=o("not"),F6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=a("a"),T6o=o("from_pretrained()"),M6o=o(" to load the model weights."),E6o=l(),F(Op.$$.fragment),C6o=l(),Ye=a("div"),F(P7.$$.fragment),w6o=l(),nce=a("p"),A6o=o("Instantiate one of the base model classes of the library from a pretrained model."),L6o=l(),Ia=a("p"),y6o=o("The model class to instantiate is selected based on the "),sce=a("code"),x6o=o("model_type"),$6o=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),k6o=o("pretrained_model_name_or_path"),S6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),R6o=o("pretrained_model_name_or_path"),P6o=o(":"),B6o=l(),y=a("ul"),Vp=a("li"),dce=a("strong"),I6o=o("albert"),N6o=o(" \u2014 "),Jq=a("a"),q6o=o("AlbertModel"),j6o=o(" (ALBERT model)"),D6o=l(),Xp=a("li"),cce=a("strong"),G6o=o("bart"),O6o=o(" \u2014 "),Yq=a("a"),V6o=o("BartModel"),X6o=o(" (BART model)"),z6o=l(),zp=a("li"),fce=a("strong"),Q6o=o("beit"),W6o=o(" \u2014 "),Kq=a("a"),H6o=o("BeitModel"),U6o=o(" (BEiT model)"),J6o=l(),Qp=a("li"),mce=a("strong"),Y6o=o("bert"),K6o=o(" \u2014 "),Zq=a("a"),Z6o=o("BertModel"),eTo=o(" (BERT model)"),oTo=l(),Wp=a("li"),gce=a("strong"),rTo=o("bert-generation"),tTo=o(" \u2014 "),ej=a("a"),aTo=o("BertGenerationEncoder"),nTo=o(" (Bert Generation model)"),sTo=l(),Hp=a("li"),hce=a("strong"),lTo=o("big_bird"),iTo=o(" \u2014 "),oj=a("a"),dTo=o("BigBirdModel"),cTo=o(" (BigBird model)"),fTo=l(),Up=a("li"),pce=a("strong"),mTo=o("bigbird_pegasus"),gTo=o(" \u2014 "),rj=a("a"),hTo=o("BigBirdPegasusModel"),pTo=o(" (BigBird-Pegasus model)"),_To=l(),Jp=a("li"),_ce=a("strong"),uTo=o("blenderbot"),bTo=o(" \u2014 "),tj=a("a"),vTo=o("BlenderbotModel"),FTo=o(" (Blenderbot model)"),TTo=l(),Yp=a("li"),uce=a("strong"),MTo=o("blenderbot-small"),ETo=o(" \u2014 "),aj=a("a"),CTo=o("BlenderbotSmallModel"),wTo=o(" (BlenderbotSmall model)"),ATo=l(),Kp=a("li"),bce=a("strong"),LTo=o("bloom"),yTo=o(" \u2014 "),nj=a("a"),xTo=o("BloomModel"),$To=o(" (BLOOM model)"),kTo=l(),Zp=a("li"),vce=a("strong"),STo=o("camembert"),RTo=o(" \u2014 "),sj=a("a"),PTo=o("CamembertModel"),BTo=o(" (CamemBERT model)"),ITo=l(),e_=a("li"),Fce=a("strong"),NTo=o("canine"),qTo=o(" \u2014 "),lj=a("a"),jTo=o("CanineModel"),DTo=o(" (CANINE model)"),GTo=l(),o_=a("li"),Tce=a("strong"),OTo=o("clip"),VTo=o(" \u2014 "),ij=a("a"),XTo=o("CLIPModel"),zTo=o(" (CLIP model)"),QTo=l(),r_=a("li"),Mce=a("strong"),WTo=o("codegen"),HTo=o(" \u2014 "),dj=a("a"),UTo=o("CodeGenModel"),JTo=o(" (CodeGen model)"),YTo=l(),t_=a("li"),Ece=a("strong"),KTo=o("convbert"),ZTo=o(" \u2014 "),cj=a("a"),e8o=o("ConvBertModel"),o8o=o(" (ConvBERT model)"),r8o=l(),a_=a("li"),Cce=a("strong"),t8o=o("convnext"),a8o=o(" \u2014 "),fj=a("a"),n8o=o("ConvNextModel"),s8o=o(" (ConvNeXT model)"),l8o=l(),n_=a("li"),wce=a("strong"),i8o=o("ctrl"),d8o=o(" \u2014 "),mj=a("a"),c8o=o("CTRLModel"),f8o=o(" (CTRL model)"),m8o=l(),s_=a("li"),Ace=a("strong"),g8o=o("cvt"),h8o=o(" \u2014 "),gj=a("a"),p8o=o("CvtModel"),_8o=o(" (CvT model)"),u8o=l(),l_=a("li"),Lce=a("strong"),b8o=o("data2vec-audio"),v8o=o(" \u2014 "),hj=a("a"),F8o=o("Data2VecAudioModel"),T8o=o(" (Data2VecAudio model)"),M8o=l(),i_=a("li"),yce=a("strong"),E8o=o("data2vec-text"),C8o=o(" \u2014 "),pj=a("a"),w8o=o("Data2VecTextModel"),A8o=o(" (Data2VecText model)"),L8o=l(),d_=a("li"),xce=a("strong"),y8o=o("data2vec-vision"),x8o=o(" \u2014 "),_j=a("a"),$8o=o("Data2VecVisionModel"),k8o=o(" (Data2VecVision model)"),S8o=l(),c_=a("li"),$ce=a("strong"),R8o=o("deberta"),P8o=o(" \u2014 "),uj=a("a"),B8o=o("DebertaModel"),I8o=o(" (DeBERTa model)"),N8o=l(),f_=a("li"),kce=a("strong"),q8o=o("deberta-v2"),j8o=o(" \u2014 "),bj=a("a"),D8o=o("DebertaV2Model"),G8o=o(" (DeBERTa-v2 model)"),O8o=l(),m_=a("li"),Sce=a("strong"),V8o=o("decision_transformer"),X8o=o(" \u2014 "),vj=a("a"),z8o=o("DecisionTransformerModel"),Q8o=o(" (Decision Transformer model)"),W8o=l(),g_=a("li"),Rce=a("strong"),H8o=o("deit"),U8o=o(" \u2014 "),Fj=a("a"),J8o=o("DeiTModel"),Y8o=o(" (DeiT model)"),K8o=l(),h_=a("li"),Pce=a("strong"),Z8o=o("detr"),e9o=o(" \u2014 "),Tj=a("a"),o9o=o("DetrModel"),r9o=o(" (DETR model)"),t9o=l(),p_=a("li"),Bce=a("strong"),a9o=o("distilbert"),n9o=o(" \u2014 "),Mj=a("a"),s9o=o("DistilBertModel"),l9o=o(" (DistilBERT model)"),i9o=l(),__=a("li"),Ice=a("strong"),d9o=o("dpr"),c9o=o(" \u2014 "),Ej=a("a"),f9o=o("DPRQuestionEncoder"),m9o=o(" (DPR model)"),g9o=l(),u_=a("li"),Nce=a("strong"),h9o=o("dpt"),p9o=o(" \u2014 "),Cj=a("a"),_9o=o("DPTModel"),u9o=o(" (DPT model)"),b9o=l(),b_=a("li"),qce=a("strong"),v9o=o("electra"),F9o=o(" \u2014 "),wj=a("a"),T9o=o("ElectraModel"),M9o=o(" (ELECTRA model)"),E9o=l(),v_=a("li"),jce=a("strong"),C9o=o("flaubert"),w9o=o(" \u2014 "),Aj=a("a"),A9o=o("FlaubertModel"),L9o=o(" (FlauBERT model)"),y9o=l(),F_=a("li"),Dce=a("strong"),x9o=o("flava"),$9o=o(" \u2014 "),Lj=a("a"),k9o=o("FlavaModel"),S9o=o(" (FLAVA model)"),R9o=l(),T_=a("li"),Gce=a("strong"),P9o=o("fnet"),B9o=o(" \u2014 "),yj=a("a"),I9o=o("FNetModel"),N9o=o(" (FNet model)"),q9o=l(),M_=a("li"),Oce=a("strong"),j9o=o("fsmt"),D9o=o(" \u2014 "),xj=a("a"),G9o=o("FSMTModel"),O9o=o(" (FairSeq Machine-Translation model)"),V9o=l(),Ws=a("li"),Vce=a("strong"),X9o=o("funnel"),z9o=o(" \u2014 "),$j=a("a"),Q9o=o("FunnelModel"),W9o=o(" or "),kj=a("a"),H9o=o("FunnelBaseModel"),U9o=o(" (Funnel Transformer model)"),J9o=l(),E_=a("li"),Xce=a("strong"),Y9o=o("glpn"),K9o=o(" \u2014 "),Sj=a("a"),Z9o=o("GLPNModel"),eMo=o(" (GLPN model)"),oMo=l(),C_=a("li"),zce=a("strong"),rMo=o("gpt2"),tMo=o(" \u2014 "),Rj=a("a"),aMo=o("GPT2Model"),nMo=o(" (OpenAI GPT-2 model)"),sMo=l(),w_=a("li"),Qce=a("strong"),lMo=o("gpt_neo"),iMo=o(" \u2014 "),Pj=a("a"),dMo=o("GPTNeoModel"),cMo=o(" (GPT Neo model)"),fMo=l(),A_=a("li"),Wce=a("strong"),mMo=o("gpt_neox"),gMo=o(" \u2014 "),Bj=a("a"),hMo=o("GPTNeoXModel"),pMo=o(" (GPT NeoX model)"),_Mo=l(),L_=a("li"),Hce=a("strong"),uMo=o("gptj"),bMo=o(" \u2014 "),Ij=a("a"),vMo=o("GPTJModel"),FMo=o(" (GPT-J model)"),TMo=l(),y_=a("li"),Uce=a("strong"),MMo=o("groupvit"),EMo=o(" \u2014 "),Nj=a("a"),CMo=o("GroupViTModel"),wMo=o(" (GroupViT model)"),AMo=l(),x_=a("li"),Jce=a("strong"),LMo=o("hubert"),yMo=o(" \u2014 "),qj=a("a"),xMo=o("HubertModel"),$Mo=o(" (Hubert model)"),kMo=l(),$_=a("li"),Yce=a("strong"),SMo=o("ibert"),RMo=o(" \u2014 "),jj=a("a"),PMo=o("IBertModel"),BMo=o(" (I-BERT model)"),IMo=l(),k_=a("li"),Kce=a("strong"),NMo=o("imagegpt"),qMo=o(" \u2014 "),Dj=a("a"),jMo=o("ImageGPTModel"),DMo=o(" (ImageGPT model)"),GMo=l(),S_=a("li"),Zce=a("strong"),OMo=o("layoutlm"),VMo=o(" \u2014 "),Gj=a("a"),XMo=o("LayoutLMModel"),zMo=o(" (LayoutLM model)"),QMo=l(),R_=a("li"),efe=a("strong"),WMo=o("layoutlmv2"),HMo=o(" \u2014 "),Oj=a("a"),UMo=o("LayoutLMv2Model"),JMo=o(" (LayoutLMv2 model)"),YMo=l(),P_=a("li"),ofe=a("strong"),KMo=o("layoutlmv3"),ZMo=o(" \u2014 "),Vj=a("a"),e4o=o("LayoutLMv3Model"),o4o=o(" (LayoutLMv3 model)"),r4o=l(),B_=a("li"),rfe=a("strong"),t4o=o("led"),a4o=o(" \u2014 "),Xj=a("a"),n4o=o("LEDModel"),s4o=o(" (LED model)"),l4o=l(),I_=a("li"),tfe=a("strong"),i4o=o("levit"),d4o=o(" \u2014 "),zj=a("a"),c4o=o("LevitModel"),f4o=o(" (LeViT model)"),m4o=l(),N_=a("li"),afe=a("strong"),g4o=o("longformer"),h4o=o(" \u2014 "),Qj=a("a"),p4o=o("LongformerModel"),_4o=o(" (Longformer model)"),u4o=l(),q_=a("li"),nfe=a("strong"),b4o=o("longt5"),v4o=o(" \u2014 "),Wj=a("a"),F4o=o("LongT5Model"),T4o=o(" (LongT5 model)"),M4o=l(),j_=a("li"),sfe=a("strong"),E4o=o("luke"),C4o=o(" \u2014 "),Hj=a("a"),w4o=o("LukeModel"),A4o=o(" (LUKE model)"),L4o=l(),D_=a("li"),lfe=a("strong"),y4o=o("lxmert"),x4o=o(" \u2014 "),Uj=a("a"),$4o=o("LxmertModel"),k4o=o(" (LXMERT model)"),S4o=l(),G_=a("li"),ife=a("strong"),R4o=o("m2m_100"),P4o=o(" \u2014 "),Jj=a("a"),B4o=o("M2M100Model"),I4o=o(" (M2M100 model)"),N4o=l(),O_=a("li"),dfe=a("strong"),q4o=o("marian"),j4o=o(" \u2014 "),Yj=a("a"),D4o=o("MarianModel"),G4o=o(" (Marian model)"),O4o=l(),V_=a("li"),cfe=a("strong"),V4o=o("maskformer"),X4o=o(" \u2014 "),Kj=a("a"),z4o=o("MaskFormerModel"),Q4o=o(" (MaskFormer model)"),W4o=l(),X_=a("li"),ffe=a("strong"),H4o=o("mbart"),U4o=o(" \u2014 "),Zj=a("a"),J4o=o("MBartModel"),Y4o=o(" (mBART model)"),K4o=l(),z_=a("li"),mfe=a("strong"),Z4o=o("mctct"),eEo=o(" \u2014 "),eD=a("a"),oEo=o("MCTCTModel"),rEo=o(" (M-CTC-T model)"),tEo=l(),Q_=a("li"),gfe=a("strong"),aEo=o("megatron-bert"),nEo=o(" \u2014 "),oD=a("a"),sEo=o("MegatronBertModel"),lEo=o(" (Megatron-BERT model)"),iEo=l(),W_=a("li"),hfe=a("strong"),dEo=o("mobilebert"),cEo=o(" \u2014 "),rD=a("a"),fEo=o("MobileBertModel"),mEo=o(" (MobileBERT model)"),gEo=l(),H_=a("li"),pfe=a("strong"),hEo=o("mobilevit"),pEo=o(" \u2014 "),tD=a("a"),_Eo=o("MobileViTModel"),uEo=o(" (MobileViT model)"),bEo=l(),U_=a("li"),_fe=a("strong"),vEo=o("mpnet"),FEo=o(" \u2014 "),aD=a("a"),TEo=o("MPNetModel"),MEo=o(" (MPNet model)"),EEo=l(),J_=a("li"),ufe=a("strong"),CEo=o("mt5"),wEo=o(" \u2014 "),nD=a("a"),AEo=o("MT5Model"),LEo=o(" (MT5 model)"),yEo=l(),Y_=a("li"),bfe=a("strong"),xEo=o("mvp"),$Eo=o(" \u2014 "),sD=a("a"),kEo=o("MvpModel"),SEo=o(" (MVP model)"),REo=l(),K_=a("li"),vfe=a("strong"),PEo=o("nezha"),BEo=o(" \u2014 "),lD=a("a"),IEo=o("NezhaModel"),NEo=o(" (Nezha model)"),qEo=l(),Z_=a("li"),Ffe=a("strong"),jEo=o("nystromformer"),DEo=o(" \u2014 "),iD=a("a"),GEo=o("NystromformerModel"),OEo=o(" (Nystr\xF6mformer model)"),VEo=l(),eu=a("li"),Tfe=a("strong"),XEo=o("openai-gpt"),zEo=o(" \u2014 "),dD=a("a"),QEo=o("OpenAIGPTModel"),WEo=o(" (OpenAI GPT model)"),HEo=l(),ou=a("li"),Mfe=a("strong"),UEo=o("opt"),JEo=o(" \u2014 "),cD=a("a"),YEo=o("OPTModel"),KEo=o(" (OPT model)"),ZEo=l(),ru=a("li"),Efe=a("strong"),eCo=o("pegasus"),oCo=o(" \u2014 "),fD=a("a"),rCo=o("PegasusModel"),tCo=o(" (Pegasus model)"),aCo=l(),tu=a("li"),Cfe=a("strong"),nCo=o("perceiver"),sCo=o(" \u2014 "),mD=a("a"),lCo=o("PerceiverModel"),iCo=o(" (Perceiver model)"),dCo=l(),au=a("li"),wfe=a("strong"),cCo=o("plbart"),fCo=o(" \u2014 "),gD=a("a"),mCo=o("PLBartModel"),gCo=o(" (PLBart model)"),hCo=l(),nu=a("li"),Afe=a("strong"),pCo=o("poolformer"),_Co=o(" \u2014 "),hD=a("a"),uCo=o("PoolFormerModel"),bCo=o(" (PoolFormer model)"),vCo=l(),su=a("li"),Lfe=a("strong"),FCo=o("prophetnet"),TCo=o(" \u2014 "),pD=a("a"),MCo=o("ProphetNetModel"),ECo=o(" (ProphetNet model)"),CCo=l(),lu=a("li"),yfe=a("strong"),wCo=o("qdqbert"),ACo=o(" \u2014 "),_D=a("a"),LCo=o("QDQBertModel"),yCo=o(" (QDQBert model)"),xCo=l(),iu=a("li"),xfe=a("strong"),$Co=o("reformer"),kCo=o(" \u2014 "),uD=a("a"),SCo=o("ReformerModel"),RCo=o(" (Reformer model)"),PCo=l(),du=a("li"),$fe=a("strong"),BCo=o("regnet"),ICo=o(" \u2014 "),bD=a("a"),NCo=o("RegNetModel"),qCo=o(" (RegNet model)"),jCo=l(),cu=a("li"),kfe=a("strong"),DCo=o("rembert"),GCo=o(" \u2014 "),vD=a("a"),OCo=o("RemBertModel"),VCo=o(" (RemBERT model)"),XCo=l(),fu=a("li"),Sfe=a("strong"),zCo=o("resnet"),QCo=o(" \u2014 "),FD=a("a"),WCo=o("ResNetModel"),HCo=o(" (ResNet model)"),UCo=l(),mu=a("li"),Rfe=a("strong"),JCo=o("retribert"),YCo=o(" \u2014 "),TD=a("a"),KCo=o("RetriBertModel"),ZCo=o(" (RetriBERT model)"),e3o=l(),gu=a("li"),Pfe=a("strong"),o3o=o("roberta"),r3o=o(" \u2014 "),MD=a("a"),t3o=o("RobertaModel"),a3o=o(" (RoBERTa model)"),n3o=l(),hu=a("li"),Bfe=a("strong"),s3o=o("roformer"),l3o=o(" \u2014 "),ED=a("a"),i3o=o("RoFormerModel"),d3o=o(" (RoFormer model)"),c3o=l(),pu=a("li"),Ife=a("strong"),f3o=o("segformer"),m3o=o(" \u2014 "),CD=a("a"),g3o=o("SegformerModel"),h3o=o(" (SegFormer model)"),p3o=l(),_u=a("li"),Nfe=a("strong"),_3o=o("sew"),u3o=o(" \u2014 "),wD=a("a"),b3o=o("SEWModel"),v3o=o(" (SEW model)"),F3o=l(),uu=a("li"),qfe=a("strong"),T3o=o("sew-d"),M3o=o(" \u2014 "),AD=a("a"),E3o=o("SEWDModel"),C3o=o(" (SEW-D model)"),w3o=l(),bu=a("li"),jfe=a("strong"),A3o=o("speech_to_text"),L3o=o(" \u2014 "),LD=a("a"),y3o=o("Speech2TextModel"),x3o=o(" (Speech2Text model)"),$3o=l(),vu=a("li"),Dfe=a("strong"),k3o=o("splinter"),S3o=o(" \u2014 "),yD=a("a"),R3o=o("SplinterModel"),P3o=o(" (Splinter model)"),B3o=l(),Fu=a("li"),Gfe=a("strong"),I3o=o("squeezebert"),N3o=o(" \u2014 "),xD=a("a"),q3o=o("SqueezeBertModel"),j3o=o(" (SqueezeBERT model)"),D3o=l(),Tu=a("li"),Ofe=a("strong"),G3o=o("swin"),O3o=o(" \u2014 "),$D=a("a"),V3o=o("SwinModel"),X3o=o(" (Swin Transformer model)"),z3o=l(),Mu=a("li"),Vfe=a("strong"),Q3o=o("t5"),W3o=o(" \u2014 "),kD=a("a"),H3o=o("T5Model"),U3o=o(" (T5 model)"),J3o=l(),Eu=a("li"),Xfe=a("strong"),Y3o=o("tapas"),K3o=o(" \u2014 "),SD=a("a"),Z3o=o("TapasModel"),e5o=o(" (TAPAS model)"),o5o=l(),Cu=a("li"),zfe=a("strong"),r5o=o("trajectory_transformer"),t5o=o(" \u2014 "),RD=a("a"),a5o=o("TrajectoryTransformerModel"),n5o=o(" (Trajectory Transformer model)"),s5o=l(),wu=a("li"),Qfe=a("strong"),l5o=o("transfo-xl"),i5o=o(" \u2014 "),PD=a("a"),d5o=o("TransfoXLModel"),c5o=o(" (Transformer-XL model)"),f5o=l(),Au=a("li"),Wfe=a("strong"),m5o=o("unispeech"),g5o=o(" \u2014 "),BD=a("a"),h5o=o("UniSpeechModel"),p5o=o(" (UniSpeech model)"),_5o=l(),Lu=a("li"),Hfe=a("strong"),u5o=o("unispeech-sat"),b5o=o(" \u2014 "),ID=a("a"),v5o=o("UniSpeechSatModel"),F5o=o(" (UniSpeechSat model)"),T5o=l(),yu=a("li"),Ufe=a("strong"),M5o=o("van"),E5o=o(" \u2014 "),ND=a("a"),C5o=o("VanModel"),w5o=o(" (VAN model)"),A5o=l(),xu=a("li"),Jfe=a("strong"),L5o=o("vilt"),y5o=o(" \u2014 "),qD=a("a"),x5o=o("ViltModel"),$5o=o(" (ViLT model)"),k5o=l(),$u=a("li"),Yfe=a("strong"),S5o=o("vision-text-dual-encoder"),R5o=o(" \u2014 "),jD=a("a"),P5o=o("VisionTextDualEncoderModel"),B5o=o(" (VisionTextDualEncoder model)"),I5o=l(),ku=a("li"),Kfe=a("strong"),N5o=o("visual_bert"),q5o=o(" \u2014 "),DD=a("a"),j5o=o("VisualBertModel"),D5o=o(" (VisualBERT model)"),G5o=l(),Su=a("li"),Zfe=a("strong"),O5o=o("vit"),V5o=o(" \u2014 "),GD=a("a"),X5o=o("ViTModel"),z5o=o(" (ViT model)"),Q5o=l(),Ru=a("li"),eme=a("strong"),W5o=o("vit_mae"),H5o=o(" \u2014 "),OD=a("a"),U5o=o("ViTMAEModel"),J5o=o(" (ViTMAE model)"),Y5o=l(),Pu=a("li"),ome=a("strong"),K5o=o("wav2vec2"),Z5o=o(" \u2014 "),VD=a("a"),e0o=o("Wav2Vec2Model"),o0o=o(" (Wav2Vec2 model)"),r0o=l(),Bu=a("li"),rme=a("strong"),t0o=o("wav2vec2-conformer"),a0o=o(" \u2014 "),XD=a("a"),n0o=o("Wav2Vec2ConformerModel"),s0o=o(" (Wav2Vec2-Conformer model)"),l0o=l(),Iu=a("li"),tme=a("strong"),i0o=o("wavlm"),d0o=o(" \u2014 "),zD=a("a"),c0o=o("WavLMModel"),f0o=o(" (WavLM model)"),m0o=l(),Nu=a("li"),ame=a("strong"),g0o=o("xglm"),h0o=o(" \u2014 "),QD=a("a"),p0o=o("XGLMModel"),_0o=o(" (XGLM model)"),u0o=l(),qu=a("li"),nme=a("strong"),b0o=o("xlm"),v0o=o(" \u2014 "),WD=a("a"),F0o=o("XLMModel"),T0o=o(" (XLM model)"),M0o=l(),ju=a("li"),sme=a("strong"),E0o=o("xlm-prophetnet"),C0o=o(" \u2014 "),HD=a("a"),w0o=o("XLMProphetNetModel"),A0o=o(" (XLM-ProphetNet model)"),L0o=l(),Du=a("li"),lme=a("strong"),y0o=o("xlm-roberta"),x0o=o(" \u2014 "),UD=a("a"),$0o=o("XLMRobertaModel"),k0o=o(" (XLM-RoBERTa model)"),S0o=l(),Gu=a("li"),ime=a("strong"),R0o=o("xlm-roberta-xl"),P0o=o(" \u2014 "),JD=a("a"),B0o=o("XLMRobertaXLModel"),I0o=o(" (XLM-RoBERTa-XL model)"),N0o=l(),Ou=a("li"),dme=a("strong"),q0o=o("xlnet"),j0o=o(" \u2014 "),YD=a("a"),D0o=o("XLNetModel"),G0o=o(" (XLNet model)"),O0o=l(),Vu=a("li"),cme=a("strong"),V0o=o("yolos"),X0o=o(" \u2014 "),KD=a("a"),z0o=o("YolosModel"),Q0o=o(" (YOLOS model)"),W0o=l(),Xu=a("li"),fme=a("strong"),H0o=o("yoso"),U0o=o(" \u2014 "),ZD=a("a"),J0o=o("YosoModel"),Y0o=o(" (YOSO model)"),K0o=l(),zu=a("p"),Z0o=o("The model is set in evaluation mode by default using "),mme=a("code"),ewo=o("model.eval()"),owo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),rwo=o("model.train()"),two=l(),F(Qu.$$.fragment),mXe=l(),Xi=a("h2"),Wu=a("a"),hme=a("span"),F(B7.$$.fragment),awo=l(),pme=a("span"),nwo=o("AutoModelForPreTraining"),gXe=l(),ko=a("div"),F(I7.$$.fragment),swo=l(),zi=a("p"),lwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eG=a("a"),iwo=o("from_pretrained()"),dwo=o(" class method or the "),oG=a("a"),cwo=o("from_config()"),fwo=o(` class
method.`),mwo=l(),N7=a("p"),gwo=o("This class cannot be instantiated directly using "),_me=a("code"),hwo=o("__init__()"),pwo=o(" (throws an error)."),_wo=l(),dt=a("div"),F(q7.$$.fragment),uwo=l(),ume=a("p"),bwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vwo=l(),Qi=a("p"),Fwo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),Two=o("not"),Mwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),Ewo=o("from_pretrained()"),Cwo=o(" to load the model weights."),wwo=l(),F(Hu.$$.fragment),Awo=l(),Ke=a("div"),F(j7.$$.fragment),Lwo=l(),vme=a("p"),ywo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xwo=l(),Na=a("p"),$wo=o("The model class to instantiate is selected based on the "),Fme=a("code"),kwo=o("model_type"),Swo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),Rwo=o("pretrained_model_name_or_path"),Pwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),Bwo=o("pretrained_model_name_or_path"),Iwo=o(":"),Nwo=l(),G=a("ul"),Uu=a("li"),Eme=a("strong"),qwo=o("albert"),jwo=o(" \u2014 "),tG=a("a"),Dwo=o("AlbertForPreTraining"),Gwo=o(" (ALBERT model)"),Owo=l(),Ju=a("li"),Cme=a("strong"),Vwo=o("bart"),Xwo=o(" \u2014 "),aG=a("a"),zwo=o("BartForConditionalGeneration"),Qwo=o(" (BART model)"),Wwo=l(),Yu=a("li"),wme=a("strong"),Hwo=o("bert"),Uwo=o(" \u2014 "),nG=a("a"),Jwo=o("BertForPreTraining"),Ywo=o(" (BERT model)"),Kwo=l(),Ku=a("li"),Ame=a("strong"),Zwo=o("big_bird"),eAo=o(" \u2014 "),sG=a("a"),oAo=o("BigBirdForPreTraining"),rAo=o(" (BigBird model)"),tAo=l(),Zu=a("li"),Lme=a("strong"),aAo=o("bloom"),nAo=o(" \u2014 "),lG=a("a"),sAo=o("BloomForCausalLM"),lAo=o(" (BLOOM model)"),iAo=l(),e1=a("li"),yme=a("strong"),dAo=o("camembert"),cAo=o(" \u2014 "),iG=a("a"),fAo=o("CamembertForMaskedLM"),mAo=o(" (CamemBERT model)"),gAo=l(),o1=a("li"),xme=a("strong"),hAo=o("ctrl"),pAo=o(" \u2014 "),dG=a("a"),_Ao=o("CTRLLMHeadModel"),uAo=o(" (CTRL model)"),bAo=l(),r1=a("li"),$me=a("strong"),vAo=o("data2vec-text"),FAo=o(" \u2014 "),cG=a("a"),TAo=o("Data2VecTextForMaskedLM"),MAo=o(" (Data2VecText model)"),EAo=l(),t1=a("li"),kme=a("strong"),CAo=o("deberta"),wAo=o(" \u2014 "),fG=a("a"),AAo=o("DebertaForMaskedLM"),LAo=o(" (DeBERTa model)"),yAo=l(),a1=a("li"),Sme=a("strong"),xAo=o("deberta-v2"),$Ao=o(" \u2014 "),mG=a("a"),kAo=o("DebertaV2ForMaskedLM"),SAo=o(" (DeBERTa-v2 model)"),RAo=l(),n1=a("li"),Rme=a("strong"),PAo=o("distilbert"),BAo=o(" \u2014 "),gG=a("a"),IAo=o("DistilBertForMaskedLM"),NAo=o(" (DistilBERT model)"),qAo=l(),s1=a("li"),Pme=a("strong"),jAo=o("electra"),DAo=o(" \u2014 "),hG=a("a"),GAo=o("ElectraForPreTraining"),OAo=o(" (ELECTRA model)"),VAo=l(),l1=a("li"),Bme=a("strong"),XAo=o("flaubert"),zAo=o(" \u2014 "),pG=a("a"),QAo=o("FlaubertWithLMHeadModel"),WAo=o(" (FlauBERT model)"),HAo=l(),i1=a("li"),Ime=a("strong"),UAo=o("flava"),JAo=o(" \u2014 "),_G=a("a"),YAo=o("FlavaForPreTraining"),KAo=o(" (FLAVA model)"),ZAo=l(),d1=a("li"),Nme=a("strong"),e7o=o("fnet"),o7o=o(" \u2014 "),uG=a("a"),r7o=o("FNetForPreTraining"),t7o=o(" (FNet model)"),a7o=l(),c1=a("li"),qme=a("strong"),n7o=o("fsmt"),s7o=o(" \u2014 "),bG=a("a"),l7o=o("FSMTForConditionalGeneration"),i7o=o(" (FairSeq Machine-Translation model)"),d7o=l(),f1=a("li"),jme=a("strong"),c7o=o("funnel"),f7o=o(" \u2014 "),vG=a("a"),m7o=o("FunnelForPreTraining"),g7o=o(" (Funnel Transformer model)"),h7o=l(),m1=a("li"),Dme=a("strong"),p7o=o("gpt2"),_7o=o(" \u2014 "),FG=a("a"),u7o=o("GPT2LMHeadModel"),b7o=o(" (OpenAI GPT-2 model)"),v7o=l(),g1=a("li"),Gme=a("strong"),F7o=o("ibert"),T7o=o(" \u2014 "),TG=a("a"),M7o=o("IBertForMaskedLM"),E7o=o(" (I-BERT model)"),C7o=l(),h1=a("li"),Ome=a("strong"),w7o=o("layoutlm"),A7o=o(" \u2014 "),MG=a("a"),L7o=o("LayoutLMForMaskedLM"),y7o=o(" (LayoutLM model)"),x7o=l(),p1=a("li"),Vme=a("strong"),$7o=o("longformer"),k7o=o(" \u2014 "),EG=a("a"),S7o=o("LongformerForMaskedLM"),R7o=o(" (Longformer model)"),P7o=l(),_1=a("li"),Xme=a("strong"),B7o=o("lxmert"),I7o=o(" \u2014 "),CG=a("a"),N7o=o("LxmertForPreTraining"),q7o=o(" (LXMERT model)"),j7o=l(),u1=a("li"),zme=a("strong"),D7o=o("megatron-bert"),G7o=o(" \u2014 "),wG=a("a"),O7o=o("MegatronBertForPreTraining"),V7o=o(" (Megatron-BERT model)"),X7o=l(),b1=a("li"),Qme=a("strong"),z7o=o("mobilebert"),Q7o=o(" \u2014 "),AG=a("a"),W7o=o("MobileBertForPreTraining"),H7o=o(" (MobileBERT model)"),U7o=l(),v1=a("li"),Wme=a("strong"),J7o=o("mpnet"),Y7o=o(" \u2014 "),LG=a("a"),K7o=o("MPNetForMaskedLM"),Z7o=o(" (MPNet model)"),eLo=l(),F1=a("li"),Hme=a("strong"),oLo=o("mvp"),rLo=o(" \u2014 "),yG=a("a"),tLo=o("MvpForConditionalGeneration"),aLo=o(" (MVP model)"),nLo=l(),T1=a("li"),Ume=a("strong"),sLo=o("nezha"),lLo=o(" \u2014 "),xG=a("a"),iLo=o("NezhaForPreTraining"),dLo=o(" (Nezha model)"),cLo=l(),M1=a("li"),Jme=a("strong"),fLo=o("openai-gpt"),mLo=o(" \u2014 "),$G=a("a"),gLo=o("OpenAIGPTLMHeadModel"),hLo=o(" (OpenAI GPT model)"),pLo=l(),E1=a("li"),Yme=a("strong"),_Lo=o("retribert"),uLo=o(" \u2014 "),kG=a("a"),bLo=o("RetriBertModel"),vLo=o(" (RetriBERT model)"),FLo=l(),C1=a("li"),Kme=a("strong"),TLo=o("roberta"),MLo=o(" \u2014 "),SG=a("a"),ELo=o("RobertaForMaskedLM"),CLo=o(" (RoBERTa model)"),wLo=l(),w1=a("li"),Zme=a("strong"),ALo=o("splinter"),LLo=o(" \u2014 "),RG=a("a"),yLo=o("SplinterForPreTraining"),xLo=o(" (Splinter model)"),$Lo=l(),A1=a("li"),ege=a("strong"),kLo=o("squeezebert"),SLo=o(" \u2014 "),PG=a("a"),RLo=o("SqueezeBertForMaskedLM"),PLo=o(" (SqueezeBERT model)"),BLo=l(),L1=a("li"),oge=a("strong"),ILo=o("t5"),NLo=o(" \u2014 "),BG=a("a"),qLo=o("T5ForConditionalGeneration"),jLo=o(" (T5 model)"),DLo=l(),y1=a("li"),rge=a("strong"),GLo=o("tapas"),OLo=o(" \u2014 "),IG=a("a"),VLo=o("TapasForMaskedLM"),XLo=o(" (TAPAS model)"),zLo=l(),x1=a("li"),tge=a("strong"),QLo=o("transfo-xl"),WLo=o(" \u2014 "),NG=a("a"),HLo=o("TransfoXLLMHeadModel"),ULo=o(" (Transformer-XL model)"),JLo=l(),$1=a("li"),age=a("strong"),YLo=o("unispeech"),KLo=o(" \u2014 "),qG=a("a"),ZLo=o("UniSpeechForPreTraining"),eyo=o(" (UniSpeech model)"),oyo=l(),k1=a("li"),nge=a("strong"),ryo=o("unispeech-sat"),tyo=o(" \u2014 "),jG=a("a"),ayo=o("UniSpeechSatForPreTraining"),nyo=o(" (UniSpeechSat model)"),syo=l(),S1=a("li"),sge=a("strong"),lyo=o("visual_bert"),iyo=o(" \u2014 "),DG=a("a"),dyo=o("VisualBertForPreTraining"),cyo=o(" (VisualBERT model)"),fyo=l(),R1=a("li"),lge=a("strong"),myo=o("vit_mae"),gyo=o(" \u2014 "),GG=a("a"),hyo=o("ViTMAEForPreTraining"),pyo=o(" (ViTMAE model)"),_yo=l(),P1=a("li"),ige=a("strong"),uyo=o("wav2vec2"),byo=o(" \u2014 "),OG=a("a"),vyo=o("Wav2Vec2ForPreTraining"),Fyo=o(" (Wav2Vec2 model)"),Tyo=l(),B1=a("li"),dge=a("strong"),Myo=o("wav2vec2-conformer"),Eyo=o(" \u2014 "),VG=a("a"),Cyo=o("Wav2Vec2ConformerForPreTraining"),wyo=o(" (Wav2Vec2-Conformer model)"),Ayo=l(),I1=a("li"),cge=a("strong"),Lyo=o("xlm"),yyo=o(" \u2014 "),XG=a("a"),xyo=o("XLMWithLMHeadModel"),$yo=o(" (XLM model)"),kyo=l(),N1=a("li"),fge=a("strong"),Syo=o("xlm-roberta"),Ryo=o(" \u2014 "),zG=a("a"),Pyo=o("XLMRobertaForMaskedLM"),Byo=o(" (XLM-RoBERTa model)"),Iyo=l(),q1=a("li"),mge=a("strong"),Nyo=o("xlm-roberta-xl"),qyo=o(" \u2014 "),QG=a("a"),jyo=o("XLMRobertaXLForMaskedLM"),Dyo=o(" (XLM-RoBERTa-XL model)"),Gyo=l(),j1=a("li"),gge=a("strong"),Oyo=o("xlnet"),Vyo=o(" \u2014 "),WG=a("a"),Xyo=o("XLNetLMHeadModel"),zyo=o(" (XLNet model)"),Qyo=l(),D1=a("p"),Wyo=o("The model is set in evaluation mode by default using "),hge=a("code"),Hyo=o("model.eval()"),Uyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),Jyo=o("model.train()"),Yyo=l(),F(G1.$$.fragment),hXe=l(),Wi=a("h2"),O1=a("a"),_ge=a("span"),F(D7.$$.fragment),Kyo=l(),uge=a("span"),Zyo=o("AutoModelForCausalLM"),pXe=l(),So=a("div"),F(G7.$$.fragment),exo=l(),Hi=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HG=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),UG=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),O7=a("p"),lxo=o("This class cannot be instantiated directly using "),bge=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),ct=a("div"),F(V7.$$.fragment),fxo=l(),vge=a("p"),mxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gxo=l(),Ui=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),pxo=o("not"),_xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),uxo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),F(V1.$$.fragment),Fxo=l(),Ze=a("div"),F(X7.$$.fragment),Txo=l(),Tge=a("p"),Mxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Exo=l(),qa=a("p"),Cxo=o("The model class to instantiate is selected based on the "),Mge=a("code"),wxo=o("model_type"),Axo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),Lxo=o("pretrained_model_name_or_path"),yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(":"),kxo=l(),z=a("ul"),X1=a("li"),wge=a("strong"),Sxo=o("bart"),Rxo=o(" \u2014 "),YG=a("a"),Pxo=o("BartForCausalLM"),Bxo=o(" (BART model)"),Ixo=l(),z1=a("li"),Age=a("strong"),Nxo=o("bert"),qxo=o(" \u2014 "),KG=a("a"),jxo=o("BertLMHeadModel"),Dxo=o(" (BERT model)"),Gxo=l(),Q1=a("li"),Lge=a("strong"),Oxo=o("bert-generation"),Vxo=o(" \u2014 "),ZG=a("a"),Xxo=o("BertGenerationDecoder"),zxo=o(" (Bert Generation model)"),Qxo=l(),W1=a("li"),yge=a("strong"),Wxo=o("big_bird"),Hxo=o(" \u2014 "),eO=a("a"),Uxo=o("BigBirdForCausalLM"),Jxo=o(" (BigBird model)"),Yxo=l(),H1=a("li"),xge=a("strong"),Kxo=o("bigbird_pegasus"),Zxo=o(" \u2014 "),oO=a("a"),e$o=o("BigBirdPegasusForCausalLM"),o$o=o(" (BigBird-Pegasus model)"),r$o=l(),U1=a("li"),$ge=a("strong"),t$o=o("blenderbot"),a$o=o(" \u2014 "),rO=a("a"),n$o=o("BlenderbotForCausalLM"),s$o=o(" (Blenderbot model)"),l$o=l(),J1=a("li"),kge=a("strong"),i$o=o("blenderbot-small"),d$o=o(" \u2014 "),tO=a("a"),c$o=o("BlenderbotSmallForCausalLM"),f$o=o(" (BlenderbotSmall model)"),m$o=l(),Y1=a("li"),Sge=a("strong"),g$o=o("bloom"),h$o=o(" \u2014 "),aO=a("a"),p$o=o("BloomForCausalLM"),_$o=o(" (BLOOM model)"),u$o=l(),K1=a("li"),Rge=a("strong"),b$o=o("camembert"),v$o=o(" \u2014 "),nO=a("a"),F$o=o("CamembertForCausalLM"),T$o=o(" (CamemBERT model)"),M$o=l(),Z1=a("li"),Pge=a("strong"),E$o=o("codegen"),C$o=o(" \u2014 "),sO=a("a"),w$o=o("CodeGenForCausalLM"),A$o=o(" (CodeGen model)"),L$o=l(),e2=a("li"),Bge=a("strong"),y$o=o("ctrl"),x$o=o(" \u2014 "),lO=a("a"),$$o=o("CTRLLMHeadModel"),k$o=o(" (CTRL model)"),S$o=l(),o2=a("li"),Ige=a("strong"),R$o=o("data2vec-text"),P$o=o(" \u2014 "),iO=a("a"),B$o=o("Data2VecTextForCausalLM"),I$o=o(" (Data2VecText model)"),N$o=l(),r2=a("li"),Nge=a("strong"),q$o=o("electra"),j$o=o(" \u2014 "),dO=a("a"),D$o=o("ElectraForCausalLM"),G$o=o(" (ELECTRA model)"),O$o=l(),t2=a("li"),qge=a("strong"),V$o=o("gpt2"),X$o=o(" \u2014 "),cO=a("a"),z$o=o("GPT2LMHeadModel"),Q$o=o(" (OpenAI GPT-2 model)"),W$o=l(),a2=a("li"),jge=a("strong"),H$o=o("gpt_neo"),U$o=o(" \u2014 "),fO=a("a"),J$o=o("GPTNeoForCausalLM"),Y$o=o(" (GPT Neo model)"),K$o=l(),n2=a("li"),Dge=a("strong"),Z$o=o("gpt_neox"),eko=o(" \u2014 "),mO=a("a"),oko=o("GPTNeoXForCausalLM"),rko=o(" (GPT NeoX model)"),tko=l(),s2=a("li"),Gge=a("strong"),ako=o("gptj"),nko=o(" \u2014 "),gO=a("a"),sko=o("GPTJForCausalLM"),lko=o(" (GPT-J model)"),iko=l(),l2=a("li"),Oge=a("strong"),dko=o("marian"),cko=o(" \u2014 "),hO=a("a"),fko=o("MarianForCausalLM"),mko=o(" (Marian model)"),gko=l(),i2=a("li"),Vge=a("strong"),hko=o("mbart"),pko=o(" \u2014 "),pO=a("a"),_ko=o("MBartForCausalLM"),uko=o(" (mBART model)"),bko=l(),d2=a("li"),Xge=a("strong"),vko=o("megatron-bert"),Fko=o(" \u2014 "),_O=a("a"),Tko=o("MegatronBertForCausalLM"),Mko=o(" (Megatron-BERT model)"),Eko=l(),c2=a("li"),zge=a("strong"),Cko=o("mvp"),wko=o(" \u2014 "),uO=a("a"),Ako=o("MvpForCausalLM"),Lko=o(" (MVP model)"),yko=l(),f2=a("li"),Qge=a("strong"),xko=o("openai-gpt"),$ko=o(" \u2014 "),bO=a("a"),kko=o("OpenAIGPTLMHeadModel"),Sko=o(" (OpenAI GPT model)"),Rko=l(),m2=a("li"),Wge=a("strong"),Pko=o("opt"),Bko=o(" \u2014 "),vO=a("a"),Iko=o("OPTForCausalLM"),Nko=o(" (OPT model)"),qko=l(),g2=a("li"),Hge=a("strong"),jko=o("pegasus"),Dko=o(" \u2014 "),FO=a("a"),Gko=o("PegasusForCausalLM"),Oko=o(" (Pegasus model)"),Vko=l(),h2=a("li"),Uge=a("strong"),Xko=o("plbart"),zko=o(" \u2014 "),TO=a("a"),Qko=o("PLBartForCausalLM"),Wko=o(" (PLBart model)"),Hko=l(),p2=a("li"),Jge=a("strong"),Uko=o("prophetnet"),Jko=o(" \u2014 "),MO=a("a"),Yko=o("ProphetNetForCausalLM"),Kko=o(" (ProphetNet model)"),Zko=l(),_2=a("li"),Yge=a("strong"),eSo=o("qdqbert"),oSo=o(" \u2014 "),EO=a("a"),rSo=o("QDQBertLMHeadModel"),tSo=o(" (QDQBert model)"),aSo=l(),u2=a("li"),Kge=a("strong"),nSo=o("reformer"),sSo=o(" \u2014 "),CO=a("a"),lSo=o("ReformerModelWithLMHead"),iSo=o(" (Reformer model)"),dSo=l(),b2=a("li"),Zge=a("strong"),cSo=o("rembert"),fSo=o(" \u2014 "),wO=a("a"),mSo=o("RemBertForCausalLM"),gSo=o(" (RemBERT model)"),hSo=l(),v2=a("li"),ehe=a("strong"),pSo=o("roberta"),_So=o(" \u2014 "),AO=a("a"),uSo=o("RobertaForCausalLM"),bSo=o(" (RoBERTa model)"),vSo=l(),F2=a("li"),ohe=a("strong"),FSo=o("roformer"),TSo=o(" \u2014 "),LO=a("a"),MSo=o("RoFormerForCausalLM"),ESo=o(" (RoFormer model)"),CSo=l(),T2=a("li"),rhe=a("strong"),wSo=o("speech_to_text_2"),ASo=o(" \u2014 "),yO=a("a"),LSo=o("Speech2Text2ForCausalLM"),ySo=o(" (Speech2Text2 model)"),xSo=l(),M2=a("li"),the=a("strong"),$So=o("transfo-xl"),kSo=o(" \u2014 "),xO=a("a"),SSo=o("TransfoXLLMHeadModel"),RSo=o(" (Transformer-XL model)"),PSo=l(),E2=a("li"),ahe=a("strong"),BSo=o("trocr"),ISo=o(" \u2014 "),$O=a("a"),NSo=o("TrOCRForCausalLM"),qSo=o(" (TrOCR model)"),jSo=l(),C2=a("li"),nhe=a("strong"),DSo=o("xglm"),GSo=o(" \u2014 "),kO=a("a"),OSo=o("XGLMForCausalLM"),VSo=o(" (XGLM model)"),XSo=l(),w2=a("li"),she=a("strong"),zSo=o("xlm"),QSo=o(" \u2014 "),SO=a("a"),WSo=o("XLMWithLMHeadModel"),HSo=o(" (XLM model)"),USo=l(),A2=a("li"),lhe=a("strong"),JSo=o("xlm-prophetnet"),YSo=o(" \u2014 "),RO=a("a"),KSo=o("XLMProphetNetForCausalLM"),ZSo=o(" (XLM-ProphetNet model)"),eRo=l(),L2=a("li"),ihe=a("strong"),oRo=o("xlm-roberta"),rRo=o(" \u2014 "),PO=a("a"),tRo=o("XLMRobertaForCausalLM"),aRo=o(" (XLM-RoBERTa model)"),nRo=l(),y2=a("li"),dhe=a("strong"),sRo=o("xlm-roberta-xl"),lRo=o(" \u2014 "),BO=a("a"),iRo=o("XLMRobertaXLForCausalLM"),dRo=o(" (XLM-RoBERTa-XL model)"),cRo=l(),x2=a("li"),che=a("strong"),fRo=o("xlnet"),mRo=o(" \u2014 "),IO=a("a"),gRo=o("XLNetLMHeadModel"),hRo=o(" (XLNet model)"),pRo=l(),$2=a("p"),_Ro=o("The model is set in evaluation mode by default using "),fhe=a("code"),uRo=o("model.eval()"),bRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=a("code"),vRo=o("model.train()"),FRo=l(),F(k2.$$.fragment),_Xe=l(),Ji=a("h2"),S2=a("a"),ghe=a("span"),F(z7.$$.fragment),TRo=l(),hhe=a("span"),MRo=o("AutoModelForMaskedLM"),uXe=l(),Ro=a("div"),F(Q7.$$.fragment),ERo=l(),Yi=a("p"),CRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NO=a("a"),wRo=o("from_pretrained()"),ARo=o(" class method or the "),qO=a("a"),LRo=o("from_config()"),yRo=o(` class
method.`),xRo=l(),W7=a("p"),$Ro=o("This class cannot be instantiated directly using "),phe=a("code"),kRo=o("__init__()"),SRo=o(" (throws an error)."),RRo=l(),ft=a("div"),F(H7.$$.fragment),PRo=l(),_he=a("p"),BRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),IRo=l(),Ki=a("p"),NRo=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),qRo=o("not"),jRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=a("a"),DRo=o("from_pretrained()"),GRo=o(" to load the model weights."),ORo=l(),F(R2.$$.fragment),VRo=l(),eo=a("div"),F(U7.$$.fragment),XRo=l(),bhe=a("p"),zRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QRo=l(),ja=a("p"),WRo=o("The model class to instantiate is selected based on the "),vhe=a("code"),HRo=o("model_type"),URo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),JRo=o("pretrained_model_name_or_path"),YRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),KRo=o("pretrained_model_name_or_path"),ZRo=o(":"),ePo=l(),W=a("ul"),P2=a("li"),Mhe=a("strong"),oPo=o("albert"),rPo=o(" \u2014 "),DO=a("a"),tPo=o("AlbertForMaskedLM"),aPo=o(" (ALBERT model)"),nPo=l(),B2=a("li"),Ehe=a("strong"),sPo=o("bart"),lPo=o(" \u2014 "),GO=a("a"),iPo=o("BartForConditionalGeneration"),dPo=o(" (BART model)"),cPo=l(),I2=a("li"),Che=a("strong"),fPo=o("bert"),mPo=o(" \u2014 "),OO=a("a"),gPo=o("BertForMaskedLM"),hPo=o(" (BERT model)"),pPo=l(),N2=a("li"),whe=a("strong"),_Po=o("big_bird"),uPo=o(" \u2014 "),VO=a("a"),bPo=o("BigBirdForMaskedLM"),vPo=o(" (BigBird model)"),FPo=l(),q2=a("li"),Ahe=a("strong"),TPo=o("camembert"),MPo=o(" \u2014 "),XO=a("a"),EPo=o("CamembertForMaskedLM"),CPo=o(" (CamemBERT model)"),wPo=l(),j2=a("li"),Lhe=a("strong"),APo=o("convbert"),LPo=o(" \u2014 "),zO=a("a"),yPo=o("ConvBertForMaskedLM"),xPo=o(" (ConvBERT model)"),$Po=l(),D2=a("li"),yhe=a("strong"),kPo=o("data2vec-text"),SPo=o(" \u2014 "),QO=a("a"),RPo=o("Data2VecTextForMaskedLM"),PPo=o(" (Data2VecText model)"),BPo=l(),G2=a("li"),xhe=a("strong"),IPo=o("deberta"),NPo=o(" \u2014 "),WO=a("a"),qPo=o("DebertaForMaskedLM"),jPo=o(" (DeBERTa model)"),DPo=l(),O2=a("li"),$he=a("strong"),GPo=o("deberta-v2"),OPo=o(" \u2014 "),HO=a("a"),VPo=o("DebertaV2ForMaskedLM"),XPo=o(" (DeBERTa-v2 model)"),zPo=l(),V2=a("li"),khe=a("strong"),QPo=o("distilbert"),WPo=o(" \u2014 "),UO=a("a"),HPo=o("DistilBertForMaskedLM"),UPo=o(" (DistilBERT model)"),JPo=l(),X2=a("li"),She=a("strong"),YPo=o("electra"),KPo=o(" \u2014 "),JO=a("a"),ZPo=o("ElectraForMaskedLM"),eBo=o(" (ELECTRA model)"),oBo=l(),z2=a("li"),Rhe=a("strong"),rBo=o("flaubert"),tBo=o(" \u2014 "),YO=a("a"),aBo=o("FlaubertWithLMHeadModel"),nBo=o(" (FlauBERT model)"),sBo=l(),Q2=a("li"),Phe=a("strong"),lBo=o("fnet"),iBo=o(" \u2014 "),KO=a("a"),dBo=o("FNetForMaskedLM"),cBo=o(" (FNet model)"),fBo=l(),W2=a("li"),Bhe=a("strong"),mBo=o("funnel"),gBo=o(" \u2014 "),ZO=a("a"),hBo=o("FunnelForMaskedLM"),pBo=o(" (Funnel Transformer model)"),_Bo=l(),H2=a("li"),Ihe=a("strong"),uBo=o("ibert"),bBo=o(" \u2014 "),eV=a("a"),vBo=o("IBertForMaskedLM"),FBo=o(" (I-BERT model)"),TBo=l(),U2=a("li"),Nhe=a("strong"),MBo=o("layoutlm"),EBo=o(" \u2014 "),oV=a("a"),CBo=o("LayoutLMForMaskedLM"),wBo=o(" (LayoutLM model)"),ABo=l(),J2=a("li"),qhe=a("strong"),LBo=o("longformer"),yBo=o(" \u2014 "),rV=a("a"),xBo=o("LongformerForMaskedLM"),$Bo=o(" (Longformer model)"),kBo=l(),Y2=a("li"),jhe=a("strong"),SBo=o("luke"),RBo=o(" \u2014 "),tV=a("a"),PBo=o("LukeForMaskedLM"),BBo=o(" (LUKE model)"),IBo=l(),K2=a("li"),Dhe=a("strong"),NBo=o("mbart"),qBo=o(" \u2014 "),aV=a("a"),jBo=o("MBartForConditionalGeneration"),DBo=o(" (mBART model)"),GBo=l(),Z2=a("li"),Ghe=a("strong"),OBo=o("megatron-bert"),VBo=o(" \u2014 "),nV=a("a"),XBo=o("MegatronBertForMaskedLM"),zBo=o(" (Megatron-BERT model)"),QBo=l(),eb=a("li"),Ohe=a("strong"),WBo=o("mobilebert"),HBo=o(" \u2014 "),sV=a("a"),UBo=o("MobileBertForMaskedLM"),JBo=o(" (MobileBERT model)"),YBo=l(),ob=a("li"),Vhe=a("strong"),KBo=o("mpnet"),ZBo=o(" \u2014 "),lV=a("a"),eIo=o("MPNetForMaskedLM"),oIo=o(" (MPNet model)"),rIo=l(),rb=a("li"),Xhe=a("strong"),tIo=o("mvp"),aIo=o(" \u2014 "),iV=a("a"),nIo=o("MvpForConditionalGeneration"),sIo=o(" (MVP model)"),lIo=l(),tb=a("li"),zhe=a("strong"),iIo=o("nezha"),dIo=o(" \u2014 "),dV=a("a"),cIo=o("NezhaForMaskedLM"),fIo=o(" (Nezha model)"),mIo=l(),ab=a("li"),Qhe=a("strong"),gIo=o("nystromformer"),hIo=o(" \u2014 "),cV=a("a"),pIo=o("NystromformerForMaskedLM"),_Io=o(" (Nystr\xF6mformer model)"),uIo=l(),nb=a("li"),Whe=a("strong"),bIo=o("perceiver"),vIo=o(" \u2014 "),fV=a("a"),FIo=o("PerceiverForMaskedLM"),TIo=o(" (Perceiver model)"),MIo=l(),sb=a("li"),Hhe=a("strong"),EIo=o("qdqbert"),CIo=o(" \u2014 "),mV=a("a"),wIo=o("QDQBertForMaskedLM"),AIo=o(" (QDQBert model)"),LIo=l(),lb=a("li"),Uhe=a("strong"),yIo=o("reformer"),xIo=o(" \u2014 "),gV=a("a"),$Io=o("ReformerForMaskedLM"),kIo=o(" (Reformer model)"),SIo=l(),ib=a("li"),Jhe=a("strong"),RIo=o("rembert"),PIo=o(" \u2014 "),hV=a("a"),BIo=o("RemBertForMaskedLM"),IIo=o(" (RemBERT model)"),NIo=l(),db=a("li"),Yhe=a("strong"),qIo=o("roberta"),jIo=o(" \u2014 "),pV=a("a"),DIo=o("RobertaForMaskedLM"),GIo=o(" (RoBERTa model)"),OIo=l(),cb=a("li"),Khe=a("strong"),VIo=o("roformer"),XIo=o(" \u2014 "),_V=a("a"),zIo=o("RoFormerForMaskedLM"),QIo=o(" (RoFormer model)"),WIo=l(),fb=a("li"),Zhe=a("strong"),HIo=o("squeezebert"),UIo=o(" \u2014 "),uV=a("a"),JIo=o("SqueezeBertForMaskedLM"),YIo=o(" (SqueezeBERT model)"),KIo=l(),mb=a("li"),epe=a("strong"),ZIo=o("tapas"),eNo=o(" \u2014 "),bV=a("a"),oNo=o("TapasForMaskedLM"),rNo=o(" (TAPAS model)"),tNo=l(),gb=a("li"),ope=a("strong"),aNo=o("wav2vec2"),nNo=o(" \u2014 "),rpe=a("code"),sNo=o("Wav2Vec2ForMaskedLM"),lNo=o(" (Wav2Vec2 model)"),iNo=l(),hb=a("li"),tpe=a("strong"),dNo=o("xlm"),cNo=o(" \u2014 "),vV=a("a"),fNo=o("XLMWithLMHeadModel"),mNo=o(" (XLM model)"),gNo=l(),pb=a("li"),ape=a("strong"),hNo=o("xlm-roberta"),pNo=o(" \u2014 "),FV=a("a"),_No=o("XLMRobertaForMaskedLM"),uNo=o(" (XLM-RoBERTa model)"),bNo=l(),_b=a("li"),npe=a("strong"),vNo=o("xlm-roberta-xl"),FNo=o(" \u2014 "),TV=a("a"),TNo=o("XLMRobertaXLForMaskedLM"),MNo=o(" (XLM-RoBERTa-XL model)"),ENo=l(),ub=a("li"),spe=a("strong"),CNo=o("yoso"),wNo=o(" \u2014 "),MV=a("a"),ANo=o("YosoForMaskedLM"),LNo=o(" (YOSO model)"),yNo=l(),bb=a("p"),xNo=o("The model is set in evaluation mode by default using "),lpe=a("code"),$No=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=a("code"),SNo=o("model.train()"),RNo=l(),F(vb.$$.fragment),bXe=l(),Zi=a("h2"),Fb=a("a"),dpe=a("span"),F(J7.$$.fragment),PNo=l(),cpe=a("span"),BNo=o("AutoModelForSeq2SeqLM"),vXe=l(),Po=a("div"),F(Y7.$$.fragment),INo=l(),ed=a("p"),NNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EV=a("a"),qNo=o("from_pretrained()"),jNo=o(" class method or the "),CV=a("a"),DNo=o("from_config()"),GNo=o(` class
method.`),ONo=l(),K7=a("p"),VNo=o("This class cannot be instantiated directly using "),fpe=a("code"),XNo=o("__init__()"),zNo=o(" (throws an error)."),QNo=l(),mt=a("div"),F(Z7.$$.fragment),WNo=l(),mpe=a("p"),HNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UNo=l(),od=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),gpe=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),ZNo=o("from_pretrained()"),eqo=o(" to load the model weights."),oqo=l(),F(Tb.$$.fragment),rqo=l(),oo=a("div"),F(eL.$$.fragment),tqo=l(),hpe=a("p"),aqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nqo=l(),Da=a("p"),sqo=o("The model class to instantiate is selected based on the "),ppe=a("code"),lqo=o("model_type"),iqo=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),dqo=o("pretrained_model_name_or_path"),cqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),fqo=o("pretrained_model_name_or_path"),mqo=o(":"),gqo=l(),pe=a("ul"),Mb=a("li"),bpe=a("strong"),hqo=o("bart"),pqo=o(" \u2014 "),AV=a("a"),_qo=o("BartForConditionalGeneration"),uqo=o(" (BART model)"),bqo=l(),Eb=a("li"),vpe=a("strong"),vqo=o("bigbird_pegasus"),Fqo=o(" \u2014 "),LV=a("a"),Tqo=o("BigBirdPegasusForConditionalGeneration"),Mqo=o(" (BigBird-Pegasus model)"),Eqo=l(),Cb=a("li"),Fpe=a("strong"),Cqo=o("blenderbot"),wqo=o(" \u2014 "),yV=a("a"),Aqo=o("BlenderbotForConditionalGeneration"),Lqo=o(" (Blenderbot model)"),yqo=l(),wb=a("li"),Tpe=a("strong"),xqo=o("blenderbot-small"),$qo=o(" \u2014 "),xV=a("a"),kqo=o("BlenderbotSmallForConditionalGeneration"),Sqo=o(" (BlenderbotSmall model)"),Rqo=l(),Ab=a("li"),Mpe=a("strong"),Pqo=o("encoder-decoder"),Bqo=o(" \u2014 "),$V=a("a"),Iqo=o("EncoderDecoderModel"),Nqo=o(" (Encoder decoder model)"),qqo=l(),Lb=a("li"),Epe=a("strong"),jqo=o("fsmt"),Dqo=o(" \u2014 "),kV=a("a"),Gqo=o("FSMTForConditionalGeneration"),Oqo=o(" (FairSeq Machine-Translation model)"),Vqo=l(),yb=a("li"),Cpe=a("strong"),Xqo=o("led"),zqo=o(" \u2014 "),SV=a("a"),Qqo=o("LEDForConditionalGeneration"),Wqo=o(" (LED model)"),Hqo=l(),xb=a("li"),wpe=a("strong"),Uqo=o("longt5"),Jqo=o(" \u2014 "),RV=a("a"),Yqo=o("LongT5ForConditionalGeneration"),Kqo=o(" (LongT5 model)"),Zqo=l(),$b=a("li"),Ape=a("strong"),ejo=o("m2m_100"),ojo=o(" \u2014 "),PV=a("a"),rjo=o("M2M100ForConditionalGeneration"),tjo=o(" (M2M100 model)"),ajo=l(),kb=a("li"),Lpe=a("strong"),njo=o("marian"),sjo=o(" \u2014 "),BV=a("a"),ljo=o("MarianMTModel"),ijo=o(" (Marian model)"),djo=l(),Sb=a("li"),ype=a("strong"),cjo=o("mbart"),fjo=o(" \u2014 "),IV=a("a"),mjo=o("MBartForConditionalGeneration"),gjo=o(" (mBART model)"),hjo=l(),Rb=a("li"),xpe=a("strong"),pjo=o("mt5"),_jo=o(" \u2014 "),NV=a("a"),ujo=o("MT5ForConditionalGeneration"),bjo=o(" (MT5 model)"),vjo=l(),Pb=a("li"),$pe=a("strong"),Fjo=o("mvp"),Tjo=o(" \u2014 "),qV=a("a"),Mjo=o("MvpForConditionalGeneration"),Ejo=o(" (MVP model)"),Cjo=l(),Bb=a("li"),kpe=a("strong"),wjo=o("pegasus"),Ajo=o(" \u2014 "),jV=a("a"),Ljo=o("PegasusForConditionalGeneration"),yjo=o(" (Pegasus model)"),xjo=l(),Ib=a("li"),Spe=a("strong"),$jo=o("plbart"),kjo=o(" \u2014 "),DV=a("a"),Sjo=o("PLBartForConditionalGeneration"),Rjo=o(" (PLBart model)"),Pjo=l(),Nb=a("li"),Rpe=a("strong"),Bjo=o("prophetnet"),Ijo=o(" \u2014 "),GV=a("a"),Njo=o("ProphetNetForConditionalGeneration"),qjo=o(" (ProphetNet model)"),jjo=l(),qb=a("li"),Ppe=a("strong"),Djo=o("t5"),Gjo=o(" \u2014 "),OV=a("a"),Ojo=o("T5ForConditionalGeneration"),Vjo=o(" (T5 model)"),Xjo=l(),jb=a("li"),Bpe=a("strong"),zjo=o("xlm-prophetnet"),Qjo=o(" \u2014 "),VV=a("a"),Wjo=o("XLMProphetNetForConditionalGeneration"),Hjo=o(" (XLM-ProphetNet model)"),Ujo=l(),Db=a("p"),Jjo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),Yjo=o("model.eval()"),Kjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),Zjo=o("model.train()"),eDo=l(),F(Gb.$$.fragment),FXe=l(),rd=a("h2"),Ob=a("a"),qpe=a("span"),F(oL.$$.fragment),oDo=l(),jpe=a("span"),rDo=o("AutoModelForSequenceClassification"),TXe=l(),Bo=a("div"),F(rL.$$.fragment),tDo=l(),td=a("p"),aDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XV=a("a"),nDo=o("from_pretrained()"),sDo=o(" class method or the "),zV=a("a"),lDo=o("from_config()"),iDo=o(` class
method.`),dDo=l(),tL=a("p"),cDo=o("This class cannot be instantiated directly using "),Dpe=a("code"),fDo=o("__init__()"),mDo=o(" (throws an error)."),gDo=l(),gt=a("div"),F(aL.$$.fragment),hDo=l(),Gpe=a("p"),pDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Do=l(),ad=a("p"),uDo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),bDo=o("not"),vDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),FDo=o("from_pretrained()"),TDo=o(" to load the model weights."),MDo=l(),F(Vb.$$.fragment),EDo=l(),ro=a("div"),F(nL.$$.fragment),CDo=l(),Vpe=a("p"),wDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ADo=l(),Ga=a("p"),LDo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),yDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),$Do=o("pretrained_model_name_or_path"),kDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),SDo=o("pretrained_model_name_or_path"),RDo=o(":"),PDo=l(),N=a("ul"),Xb=a("li"),Wpe=a("strong"),BDo=o("albert"),IDo=o(" \u2014 "),WV=a("a"),NDo=o("AlbertForSequenceClassification"),qDo=o(" (ALBERT model)"),jDo=l(),zb=a("li"),Hpe=a("strong"),DDo=o("bart"),GDo=o(" \u2014 "),HV=a("a"),ODo=o("BartForSequenceClassification"),VDo=o(" (BART model)"),XDo=l(),Qb=a("li"),Upe=a("strong"),zDo=o("bert"),QDo=o(" \u2014 "),UV=a("a"),WDo=o("BertForSequenceClassification"),HDo=o(" (BERT model)"),UDo=l(),Wb=a("li"),Jpe=a("strong"),JDo=o("big_bird"),YDo=o(" \u2014 "),JV=a("a"),KDo=o("BigBirdForSequenceClassification"),ZDo=o(" (BigBird model)"),eGo=l(),Hb=a("li"),Ype=a("strong"),oGo=o("bigbird_pegasus"),rGo=o(" \u2014 "),YV=a("a"),tGo=o("BigBirdPegasusForSequenceClassification"),aGo=o(" (BigBird-Pegasus model)"),nGo=l(),Ub=a("li"),Kpe=a("strong"),sGo=o("bloom"),lGo=o(" \u2014 "),KV=a("a"),iGo=o("BloomForSequenceClassification"),dGo=o(" (BLOOM model)"),cGo=l(),Jb=a("li"),Zpe=a("strong"),fGo=o("camembert"),mGo=o(" \u2014 "),ZV=a("a"),gGo=o("CamembertForSequenceClassification"),hGo=o(" (CamemBERT model)"),pGo=l(),Yb=a("li"),e_e=a("strong"),_Go=o("canine"),uGo=o(" \u2014 "),eX=a("a"),bGo=o("CanineForSequenceClassification"),vGo=o(" (CANINE model)"),FGo=l(),Kb=a("li"),o_e=a("strong"),TGo=o("convbert"),MGo=o(" \u2014 "),oX=a("a"),EGo=o("ConvBertForSequenceClassification"),CGo=o(" (ConvBERT model)"),wGo=l(),Zb=a("li"),r_e=a("strong"),AGo=o("ctrl"),LGo=o(" \u2014 "),rX=a("a"),yGo=o("CTRLForSequenceClassification"),xGo=o(" (CTRL model)"),$Go=l(),ev=a("li"),t_e=a("strong"),kGo=o("data2vec-text"),SGo=o(" \u2014 "),tX=a("a"),RGo=o("Data2VecTextForSequenceClassification"),PGo=o(" (Data2VecText model)"),BGo=l(),ov=a("li"),a_e=a("strong"),IGo=o("deberta"),NGo=o(" \u2014 "),aX=a("a"),qGo=o("DebertaForSequenceClassification"),jGo=o(" (DeBERTa model)"),DGo=l(),rv=a("li"),n_e=a("strong"),GGo=o("deberta-v2"),OGo=o(" \u2014 "),nX=a("a"),VGo=o("DebertaV2ForSequenceClassification"),XGo=o(" (DeBERTa-v2 model)"),zGo=l(),tv=a("li"),s_e=a("strong"),QGo=o("distilbert"),WGo=o(" \u2014 "),sX=a("a"),HGo=o("DistilBertForSequenceClassification"),UGo=o(" (DistilBERT model)"),JGo=l(),av=a("li"),l_e=a("strong"),YGo=o("electra"),KGo=o(" \u2014 "),lX=a("a"),ZGo=o("ElectraForSequenceClassification"),eOo=o(" (ELECTRA model)"),oOo=l(),nv=a("li"),i_e=a("strong"),rOo=o("flaubert"),tOo=o(" \u2014 "),iX=a("a"),aOo=o("FlaubertForSequenceClassification"),nOo=o(" (FlauBERT model)"),sOo=l(),sv=a("li"),d_e=a("strong"),lOo=o("fnet"),iOo=o(" \u2014 "),dX=a("a"),dOo=o("FNetForSequenceClassification"),cOo=o(" (FNet model)"),fOo=l(),lv=a("li"),c_e=a("strong"),mOo=o("funnel"),gOo=o(" \u2014 "),cX=a("a"),hOo=o("FunnelForSequenceClassification"),pOo=o(" (Funnel Transformer model)"),_Oo=l(),iv=a("li"),f_e=a("strong"),uOo=o("gpt2"),bOo=o(" \u2014 "),fX=a("a"),vOo=o("GPT2ForSequenceClassification"),FOo=o(" (OpenAI GPT-2 model)"),TOo=l(),dv=a("li"),m_e=a("strong"),MOo=o("gpt_neo"),EOo=o(" \u2014 "),mX=a("a"),COo=o("GPTNeoForSequenceClassification"),wOo=o(" (GPT Neo model)"),AOo=l(),cv=a("li"),g_e=a("strong"),LOo=o("gptj"),yOo=o(" \u2014 "),gX=a("a"),xOo=o("GPTJForSequenceClassification"),$Oo=o(" (GPT-J model)"),kOo=l(),fv=a("li"),h_e=a("strong"),SOo=o("ibert"),ROo=o(" \u2014 "),hX=a("a"),POo=o("IBertForSequenceClassification"),BOo=o(" (I-BERT model)"),IOo=l(),mv=a("li"),p_e=a("strong"),NOo=o("layoutlm"),qOo=o(" \u2014 "),pX=a("a"),jOo=o("LayoutLMForSequenceClassification"),DOo=o(" (LayoutLM model)"),GOo=l(),gv=a("li"),__e=a("strong"),OOo=o("layoutlmv2"),VOo=o(" \u2014 "),_X=a("a"),XOo=o("LayoutLMv2ForSequenceClassification"),zOo=o(" (LayoutLMv2 model)"),QOo=l(),hv=a("li"),u_e=a("strong"),WOo=o("layoutlmv3"),HOo=o(" \u2014 "),uX=a("a"),UOo=o("LayoutLMv3ForSequenceClassification"),JOo=o(" (LayoutLMv3 model)"),YOo=l(),pv=a("li"),b_e=a("strong"),KOo=o("led"),ZOo=o(" \u2014 "),bX=a("a"),eVo=o("LEDForSequenceClassification"),oVo=o(" (LED model)"),rVo=l(),_v=a("li"),v_e=a("strong"),tVo=o("longformer"),aVo=o(" \u2014 "),vX=a("a"),nVo=o("LongformerForSequenceClassification"),sVo=o(" (Longformer model)"),lVo=l(),uv=a("li"),F_e=a("strong"),iVo=o("mbart"),dVo=o(" \u2014 "),FX=a("a"),cVo=o("MBartForSequenceClassification"),fVo=o(" (mBART model)"),mVo=l(),bv=a("li"),T_e=a("strong"),gVo=o("megatron-bert"),hVo=o(" \u2014 "),TX=a("a"),pVo=o("MegatronBertForSequenceClassification"),_Vo=o(" (Megatron-BERT model)"),uVo=l(),vv=a("li"),M_e=a("strong"),bVo=o("mobilebert"),vVo=o(" \u2014 "),MX=a("a"),FVo=o("MobileBertForSequenceClassification"),TVo=o(" (MobileBERT model)"),MVo=l(),Fv=a("li"),E_e=a("strong"),EVo=o("mpnet"),CVo=o(" \u2014 "),EX=a("a"),wVo=o("MPNetForSequenceClassification"),AVo=o(" (MPNet model)"),LVo=l(),Tv=a("li"),C_e=a("strong"),yVo=o("mvp"),xVo=o(" \u2014 "),CX=a("a"),$Vo=o("MvpForSequenceClassification"),kVo=o(" (MVP model)"),SVo=l(),Mv=a("li"),w_e=a("strong"),RVo=o("nezha"),PVo=o(" \u2014 "),wX=a("a"),BVo=o("NezhaForSequenceClassification"),IVo=o(" (Nezha model)"),NVo=l(),Ev=a("li"),A_e=a("strong"),qVo=o("nystromformer"),jVo=o(" \u2014 "),AX=a("a"),DVo=o("NystromformerForSequenceClassification"),GVo=o(" (Nystr\xF6mformer model)"),OVo=l(),Cv=a("li"),L_e=a("strong"),VVo=o("openai-gpt"),XVo=o(" \u2014 "),LX=a("a"),zVo=o("OpenAIGPTForSequenceClassification"),QVo=o(" (OpenAI GPT model)"),WVo=l(),wv=a("li"),y_e=a("strong"),HVo=o("perceiver"),UVo=o(" \u2014 "),yX=a("a"),JVo=o("PerceiverForSequenceClassification"),YVo=o(" (Perceiver model)"),KVo=l(),Av=a("li"),x_e=a("strong"),ZVo=o("plbart"),eXo=o(" \u2014 "),xX=a("a"),oXo=o("PLBartForSequenceClassification"),rXo=o(" (PLBart model)"),tXo=l(),Lv=a("li"),$_e=a("strong"),aXo=o("qdqbert"),nXo=o(" \u2014 "),$X=a("a"),sXo=o("QDQBertForSequenceClassification"),lXo=o(" (QDQBert model)"),iXo=l(),yv=a("li"),k_e=a("strong"),dXo=o("reformer"),cXo=o(" \u2014 "),kX=a("a"),fXo=o("ReformerForSequenceClassification"),mXo=o(" (Reformer model)"),gXo=l(),xv=a("li"),S_e=a("strong"),hXo=o("rembert"),pXo=o(" \u2014 "),SX=a("a"),_Xo=o("RemBertForSequenceClassification"),uXo=o(" (RemBERT model)"),bXo=l(),$v=a("li"),R_e=a("strong"),vXo=o("roberta"),FXo=o(" \u2014 "),RX=a("a"),TXo=o("RobertaForSequenceClassification"),MXo=o(" (RoBERTa model)"),EXo=l(),kv=a("li"),P_e=a("strong"),CXo=o("roformer"),wXo=o(" \u2014 "),PX=a("a"),AXo=o("RoFormerForSequenceClassification"),LXo=o(" (RoFormer model)"),yXo=l(),Sv=a("li"),B_e=a("strong"),xXo=o("squeezebert"),$Xo=o(" \u2014 "),BX=a("a"),kXo=o("SqueezeBertForSequenceClassification"),SXo=o(" (SqueezeBERT model)"),RXo=l(),Rv=a("li"),I_e=a("strong"),PXo=o("tapas"),BXo=o(" \u2014 "),IX=a("a"),IXo=o("TapasForSequenceClassification"),NXo=o(" (TAPAS model)"),qXo=l(),Pv=a("li"),N_e=a("strong"),jXo=o("transfo-xl"),DXo=o(" \u2014 "),NX=a("a"),GXo=o("TransfoXLForSequenceClassification"),OXo=o(" (Transformer-XL model)"),VXo=l(),Bv=a("li"),q_e=a("strong"),XXo=o("xlm"),zXo=o(" \u2014 "),qX=a("a"),QXo=o("XLMForSequenceClassification"),WXo=o(" (XLM model)"),HXo=l(),Iv=a("li"),j_e=a("strong"),UXo=o("xlm-roberta"),JXo=o(" \u2014 "),jX=a("a"),YXo=o("XLMRobertaForSequenceClassification"),KXo=o(" (XLM-RoBERTa model)"),ZXo=l(),Nv=a("li"),D_e=a("strong"),ezo=o("xlm-roberta-xl"),ozo=o(" \u2014 "),DX=a("a"),rzo=o("XLMRobertaXLForSequenceClassification"),tzo=o(" (XLM-RoBERTa-XL model)"),azo=l(),qv=a("li"),G_e=a("strong"),nzo=o("xlnet"),szo=o(" \u2014 "),GX=a("a"),lzo=o("XLNetForSequenceClassification"),izo=o(" (XLNet model)"),dzo=l(),jv=a("li"),O_e=a("strong"),czo=o("yoso"),fzo=o(" \u2014 "),OX=a("a"),mzo=o("YosoForSequenceClassification"),gzo=o(" (YOSO model)"),hzo=l(),Dv=a("p"),pzo=o("The model is set in evaluation mode by default using "),V_e=a("code"),_zo=o("model.eval()"),uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),bzo=o("model.train()"),vzo=l(),F(Gv.$$.fragment),MXe=l(),nd=a("h2"),Ov=a("a"),z_e=a("span"),F(sL.$$.fragment),Fzo=l(),Q_e=a("span"),Tzo=o("AutoModelForMultipleChoice"),EXe=l(),Io=a("div"),F(lL.$$.fragment),Mzo=l(),sd=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=a("a"),Czo=o("from_pretrained()"),wzo=o(" class method or the "),XX=a("a"),Azo=o("from_config()"),Lzo=o(` class
method.`),yzo=l(),iL=a("p"),xzo=o("This class cannot be instantiated directly using "),W_e=a("code"),$zo=o("__init__()"),kzo=o(" (throws an error)."),Szo=l(),ht=a("div"),F(dL.$$.fragment),Rzo=l(),H_e=a("p"),Pzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bzo=l(),ld=a("p"),Izo=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),Nzo=o("not"),qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),jzo=o("from_pretrained()"),Dzo=o(" to load the model weights."),Gzo=l(),F(Vv.$$.fragment),Ozo=l(),to=a("div"),F(cL.$$.fragment),Vzo=l(),J_e=a("p"),Xzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zzo=l(),Oa=a("p"),Qzo=o("The model class to instantiate is selected based on the "),Y_e=a("code"),Wzo=o("model_type"),Hzo=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(":"),Zzo=l(),Z=a("ul"),Xv=a("li"),eue=a("strong"),eQo=o("albert"),oQo=o(" \u2014 "),QX=a("a"),rQo=o("AlbertForMultipleChoice"),tQo=o(" (ALBERT model)"),aQo=l(),zv=a("li"),oue=a("strong"),nQo=o("bert"),sQo=o(" \u2014 "),WX=a("a"),lQo=o("BertForMultipleChoice"),iQo=o(" (BERT model)"),dQo=l(),Qv=a("li"),rue=a("strong"),cQo=o("big_bird"),fQo=o(" \u2014 "),HX=a("a"),mQo=o("BigBirdForMultipleChoice"),gQo=o(" (BigBird model)"),hQo=l(),Wv=a("li"),tue=a("strong"),pQo=o("camembert"),_Qo=o(" \u2014 "),UX=a("a"),uQo=o("CamembertForMultipleChoice"),bQo=o(" (CamemBERT model)"),vQo=l(),Hv=a("li"),aue=a("strong"),FQo=o("canine"),TQo=o(" \u2014 "),JX=a("a"),MQo=o("CanineForMultipleChoice"),EQo=o(" (CANINE model)"),CQo=l(),Uv=a("li"),nue=a("strong"),wQo=o("convbert"),AQo=o(" \u2014 "),YX=a("a"),LQo=o("ConvBertForMultipleChoice"),yQo=o(" (ConvBERT model)"),xQo=l(),Jv=a("li"),sue=a("strong"),$Qo=o("data2vec-text"),kQo=o(" \u2014 "),KX=a("a"),SQo=o("Data2VecTextForMultipleChoice"),RQo=o(" (Data2VecText model)"),PQo=l(),Yv=a("li"),lue=a("strong"),BQo=o("deberta-v2"),IQo=o(" \u2014 "),ZX=a("a"),NQo=o("DebertaV2ForMultipleChoice"),qQo=o(" (DeBERTa-v2 model)"),jQo=l(),Kv=a("li"),iue=a("strong"),DQo=o("distilbert"),GQo=o(" \u2014 "),ez=a("a"),OQo=o("DistilBertForMultipleChoice"),VQo=o(" (DistilBERT model)"),XQo=l(),Zv=a("li"),due=a("strong"),zQo=o("electra"),QQo=o(" \u2014 "),oz=a("a"),WQo=o("ElectraForMultipleChoice"),HQo=o(" (ELECTRA model)"),UQo=l(),eF=a("li"),cue=a("strong"),JQo=o("flaubert"),YQo=o(" \u2014 "),rz=a("a"),KQo=o("FlaubertForMultipleChoice"),ZQo=o(" (FlauBERT model)"),eWo=l(),oF=a("li"),fue=a("strong"),oWo=o("fnet"),rWo=o(" \u2014 "),tz=a("a"),tWo=o("FNetForMultipleChoice"),aWo=o(" (FNet model)"),nWo=l(),rF=a("li"),mue=a("strong"),sWo=o("funnel"),lWo=o(" \u2014 "),az=a("a"),iWo=o("FunnelForMultipleChoice"),dWo=o(" (Funnel Transformer model)"),cWo=l(),tF=a("li"),gue=a("strong"),fWo=o("ibert"),mWo=o(" \u2014 "),nz=a("a"),gWo=o("IBertForMultipleChoice"),hWo=o(" (I-BERT model)"),pWo=l(),aF=a("li"),hue=a("strong"),_Wo=o("longformer"),uWo=o(" \u2014 "),sz=a("a"),bWo=o("LongformerForMultipleChoice"),vWo=o(" (Longformer model)"),FWo=l(),nF=a("li"),pue=a("strong"),TWo=o("megatron-bert"),MWo=o(" \u2014 "),lz=a("a"),EWo=o("MegatronBertForMultipleChoice"),CWo=o(" (Megatron-BERT model)"),wWo=l(),sF=a("li"),_ue=a("strong"),AWo=o("mobilebert"),LWo=o(" \u2014 "),iz=a("a"),yWo=o("MobileBertForMultipleChoice"),xWo=o(" (MobileBERT model)"),$Wo=l(),lF=a("li"),uue=a("strong"),kWo=o("mpnet"),SWo=o(" \u2014 "),dz=a("a"),RWo=o("MPNetForMultipleChoice"),PWo=o(" (MPNet model)"),BWo=l(),iF=a("li"),bue=a("strong"),IWo=o("nezha"),NWo=o(" \u2014 "),cz=a("a"),qWo=o("NezhaForMultipleChoice"),jWo=o(" (Nezha model)"),DWo=l(),dF=a("li"),vue=a("strong"),GWo=o("nystromformer"),OWo=o(" \u2014 "),fz=a("a"),VWo=o("NystromformerForMultipleChoice"),XWo=o(" (Nystr\xF6mformer model)"),zWo=l(),cF=a("li"),Fue=a("strong"),QWo=o("qdqbert"),WWo=o(" \u2014 "),mz=a("a"),HWo=o("QDQBertForMultipleChoice"),UWo=o(" (QDQBert model)"),JWo=l(),fF=a("li"),Tue=a("strong"),YWo=o("rembert"),KWo=o(" \u2014 "),gz=a("a"),ZWo=o("RemBertForMultipleChoice"),eHo=o(" (RemBERT model)"),oHo=l(),mF=a("li"),Mue=a("strong"),rHo=o("roberta"),tHo=o(" \u2014 "),hz=a("a"),aHo=o("RobertaForMultipleChoice"),nHo=o(" (RoBERTa model)"),sHo=l(),gF=a("li"),Eue=a("strong"),lHo=o("roformer"),iHo=o(" \u2014 "),pz=a("a"),dHo=o("RoFormerForMultipleChoice"),cHo=o(" (RoFormer model)"),fHo=l(),hF=a("li"),Cue=a("strong"),mHo=o("squeezebert"),gHo=o(" \u2014 "),_z=a("a"),hHo=o("SqueezeBertForMultipleChoice"),pHo=o(" (SqueezeBERT model)"),_Ho=l(),pF=a("li"),wue=a("strong"),uHo=o("xlm"),bHo=o(" \u2014 "),uz=a("a"),vHo=o("XLMForMultipleChoice"),FHo=o(" (XLM model)"),THo=l(),_F=a("li"),Aue=a("strong"),MHo=o("xlm-roberta"),EHo=o(" \u2014 "),bz=a("a"),CHo=o("XLMRobertaForMultipleChoice"),wHo=o(" (XLM-RoBERTa model)"),AHo=l(),uF=a("li"),Lue=a("strong"),LHo=o("xlm-roberta-xl"),yHo=o(" \u2014 "),vz=a("a"),xHo=o("XLMRobertaXLForMultipleChoice"),$Ho=o(" (XLM-RoBERTa-XL model)"),kHo=l(),bF=a("li"),yue=a("strong"),SHo=o("xlnet"),RHo=o(" \u2014 "),Fz=a("a"),PHo=o("XLNetForMultipleChoice"),BHo=o(" (XLNet model)"),IHo=l(),vF=a("li"),xue=a("strong"),NHo=o("yoso"),qHo=o(" \u2014 "),Tz=a("a"),jHo=o("YosoForMultipleChoice"),DHo=o(" (YOSO model)"),GHo=l(),FF=a("p"),OHo=o("The model is set in evaluation mode by default using "),$ue=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=a("code"),zHo=o("model.train()"),QHo=l(),F(TF.$$.fragment),CXe=l(),id=a("h2"),MF=a("a"),Sue=a("span"),F(fL.$$.fragment),WHo=l(),Rue=a("span"),HHo=o("AutoModelForNextSentencePrediction"),wXe=l(),No=a("div"),F(mL.$$.fragment),UHo=l(),dd=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mz=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),Ez=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),gL=a("p"),rUo=o("This class cannot be instantiated directly using "),Pue=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),pt=a("div"),F(hL.$$.fragment),sUo=l(),Bue=a("p"),lUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iUo=l(),cd=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),mUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(EF.$$.fragment),pUo=l(),ao=a("div"),F(pL.$$.fragment),_Uo=l(),Nue=a("p"),uUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bUo=l(),Va=a("p"),vUo=o("The model class to instantiate is selected based on the "),que=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),qo=a("ul"),CF=a("li"),Gue=a("strong"),LUo=o("bert"),yUo=o(" \u2014 "),wz=a("a"),xUo=o("BertForNextSentencePrediction"),$Uo=o(" (BERT model)"),kUo=l(),wF=a("li"),Oue=a("strong"),SUo=o("fnet"),RUo=o(" \u2014 "),Az=a("a"),PUo=o("FNetForNextSentencePrediction"),BUo=o(" (FNet model)"),IUo=l(),AF=a("li"),Vue=a("strong"),NUo=o("megatron-bert"),qUo=o(" \u2014 "),Lz=a("a"),jUo=o("MegatronBertForNextSentencePrediction"),DUo=o(" (Megatron-BERT model)"),GUo=l(),LF=a("li"),Xue=a("strong"),OUo=o("mobilebert"),VUo=o(" \u2014 "),yz=a("a"),XUo=o("MobileBertForNextSentencePrediction"),zUo=o(" (MobileBERT model)"),QUo=l(),yF=a("li"),zue=a("strong"),WUo=o("nezha"),HUo=o(" \u2014 "),xz=a("a"),UUo=o("NezhaForNextSentencePrediction"),JUo=o(" (Nezha model)"),YUo=l(),xF=a("li"),Que=a("strong"),KUo=o("qdqbert"),ZUo=o(" \u2014 "),$z=a("a"),eJo=o("QDQBertForNextSentencePrediction"),oJo=o(" (QDQBert model)"),rJo=l(),$F=a("p"),tJo=o("The model is set in evaluation mode by default using "),Wue=a("code"),aJo=o("model.eval()"),nJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),sJo=o("model.train()"),lJo=l(),F(kF.$$.fragment),AXe=l(),fd=a("h2"),SF=a("a"),Uue=a("span"),F(_L.$$.fragment),iJo=l(),Jue=a("span"),dJo=o("AutoModelForTokenClassification"),LXe=l(),jo=a("div"),F(uL.$$.fragment),cJo=l(),md=a("p"),fJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kz=a("a"),mJo=o("from_pretrained()"),gJo=o(" class method or the "),Sz=a("a"),hJo=o("from_config()"),pJo=o(` class
method.`),_Jo=l(),bL=a("p"),uJo=o("This class cannot be instantiated directly using "),Yue=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),FJo=l(),_t=a("div"),F(vL.$$.fragment),TJo=l(),Kue=a("p"),MJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EJo=l(),gd=a("p"),CJo=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),wJo=o("not"),AJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),LJo=o("from_pretrained()"),yJo=o(" to load the model weights."),xJo=l(),F(RF.$$.fragment),$Jo=l(),no=a("div"),F(FL.$$.fragment),kJo=l(),e1e=a("p"),SJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RJo=l(),Xa=a("p"),PJo=o("The model class to instantiate is selected based on the "),o1e=a("code"),BJo=o("model_type"),IJo=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),NJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(":"),GJo=l(),U=a("ul"),PF=a("li"),a1e=a("strong"),OJo=o("albert"),VJo=o(" \u2014 "),Pz=a("a"),XJo=o("AlbertForTokenClassification"),zJo=o(" (ALBERT model)"),QJo=l(),BF=a("li"),n1e=a("strong"),WJo=o("bert"),HJo=o(" \u2014 "),Bz=a("a"),UJo=o("BertForTokenClassification"),JJo=o(" (BERT model)"),YJo=l(),IF=a("li"),s1e=a("strong"),KJo=o("big_bird"),ZJo=o(" \u2014 "),Iz=a("a"),eYo=o("BigBirdForTokenClassification"),oYo=o(" (BigBird model)"),rYo=l(),NF=a("li"),l1e=a("strong"),tYo=o("bloom"),aYo=o(" \u2014 "),Nz=a("a"),nYo=o("BloomForTokenClassification"),sYo=o(" (BLOOM model)"),lYo=l(),qF=a("li"),i1e=a("strong"),iYo=o("camembert"),dYo=o(" \u2014 "),qz=a("a"),cYo=o("CamembertForTokenClassification"),fYo=o(" (CamemBERT model)"),mYo=l(),jF=a("li"),d1e=a("strong"),gYo=o("canine"),hYo=o(" \u2014 "),jz=a("a"),pYo=o("CanineForTokenClassification"),_Yo=o(" (CANINE model)"),uYo=l(),DF=a("li"),c1e=a("strong"),bYo=o("convbert"),vYo=o(" \u2014 "),Dz=a("a"),FYo=o("ConvBertForTokenClassification"),TYo=o(" (ConvBERT model)"),MYo=l(),GF=a("li"),f1e=a("strong"),EYo=o("data2vec-text"),CYo=o(" \u2014 "),Gz=a("a"),wYo=o("Data2VecTextForTokenClassification"),AYo=o(" (Data2VecText model)"),LYo=l(),OF=a("li"),m1e=a("strong"),yYo=o("deberta"),xYo=o(" \u2014 "),Oz=a("a"),$Yo=o("DebertaForTokenClassification"),kYo=o(" (DeBERTa model)"),SYo=l(),VF=a("li"),g1e=a("strong"),RYo=o("deberta-v2"),PYo=o(" \u2014 "),Vz=a("a"),BYo=o("DebertaV2ForTokenClassification"),IYo=o(" (DeBERTa-v2 model)"),NYo=l(),XF=a("li"),h1e=a("strong"),qYo=o("distilbert"),jYo=o(" \u2014 "),Xz=a("a"),DYo=o("DistilBertForTokenClassification"),GYo=o(" (DistilBERT model)"),OYo=l(),zF=a("li"),p1e=a("strong"),VYo=o("electra"),XYo=o(" \u2014 "),zz=a("a"),zYo=o("ElectraForTokenClassification"),QYo=o(" (ELECTRA model)"),WYo=l(),QF=a("li"),_1e=a("strong"),HYo=o("flaubert"),UYo=o(" \u2014 "),Qz=a("a"),JYo=o("FlaubertForTokenClassification"),YYo=o(" (FlauBERT model)"),KYo=l(),WF=a("li"),u1e=a("strong"),ZYo=o("fnet"),eKo=o(" \u2014 "),Wz=a("a"),oKo=o("FNetForTokenClassification"),rKo=o(" (FNet model)"),tKo=l(),HF=a("li"),b1e=a("strong"),aKo=o("funnel"),nKo=o(" \u2014 "),Hz=a("a"),sKo=o("FunnelForTokenClassification"),lKo=o(" (Funnel Transformer model)"),iKo=l(),UF=a("li"),v1e=a("strong"),dKo=o("gpt2"),cKo=o(" \u2014 "),Uz=a("a"),fKo=o("GPT2ForTokenClassification"),mKo=o(" (OpenAI GPT-2 model)"),gKo=l(),JF=a("li"),F1e=a("strong"),hKo=o("ibert"),pKo=o(" \u2014 "),Jz=a("a"),_Ko=o("IBertForTokenClassification"),uKo=o(" (I-BERT model)"),bKo=l(),YF=a("li"),T1e=a("strong"),vKo=o("layoutlm"),FKo=o(" \u2014 "),Yz=a("a"),TKo=o("LayoutLMForTokenClassification"),MKo=o(" (LayoutLM model)"),EKo=l(),KF=a("li"),M1e=a("strong"),CKo=o("layoutlmv2"),wKo=o(" \u2014 "),Kz=a("a"),AKo=o("LayoutLMv2ForTokenClassification"),LKo=o(" (LayoutLMv2 model)"),yKo=l(),ZF=a("li"),E1e=a("strong"),xKo=o("layoutlmv3"),$Ko=o(" \u2014 "),Zz=a("a"),kKo=o("LayoutLMv3ForTokenClassification"),SKo=o(" (LayoutLMv3 model)"),RKo=l(),e6=a("li"),C1e=a("strong"),PKo=o("longformer"),BKo=o(" \u2014 "),eQ=a("a"),IKo=o("LongformerForTokenClassification"),NKo=o(" (Longformer model)"),qKo=l(),o6=a("li"),w1e=a("strong"),jKo=o("megatron-bert"),DKo=o(" \u2014 "),oQ=a("a"),GKo=o("MegatronBertForTokenClassification"),OKo=o(" (Megatron-BERT model)"),VKo=l(),r6=a("li"),A1e=a("strong"),XKo=o("mobilebert"),zKo=o(" \u2014 "),rQ=a("a"),QKo=o("MobileBertForTokenClassification"),WKo=o(" (MobileBERT model)"),HKo=l(),t6=a("li"),L1e=a("strong"),UKo=o("mpnet"),JKo=o(" \u2014 "),tQ=a("a"),YKo=o("MPNetForTokenClassification"),KKo=o(" (MPNet model)"),ZKo=l(),a6=a("li"),y1e=a("strong"),eZo=o("nezha"),oZo=o(" \u2014 "),aQ=a("a"),rZo=o("NezhaForTokenClassification"),tZo=o(" (Nezha model)"),aZo=l(),n6=a("li"),x1e=a("strong"),nZo=o("nystromformer"),sZo=o(" \u2014 "),nQ=a("a"),lZo=o("NystromformerForTokenClassification"),iZo=o(" (Nystr\xF6mformer model)"),dZo=l(),s6=a("li"),$1e=a("strong"),cZo=o("qdqbert"),fZo=o(" \u2014 "),sQ=a("a"),mZo=o("QDQBertForTokenClassification"),gZo=o(" (QDQBert model)"),hZo=l(),l6=a("li"),k1e=a("strong"),pZo=o("rembert"),_Zo=o(" \u2014 "),lQ=a("a"),uZo=o("RemBertForTokenClassification"),bZo=o(" (RemBERT model)"),vZo=l(),i6=a("li"),S1e=a("strong"),FZo=o("roberta"),TZo=o(" \u2014 "),iQ=a("a"),MZo=o("RobertaForTokenClassification"),EZo=o(" (RoBERTa model)"),CZo=l(),d6=a("li"),R1e=a("strong"),wZo=o("roformer"),AZo=o(" \u2014 "),dQ=a("a"),LZo=o("RoFormerForTokenClassification"),yZo=o(" (RoFormer model)"),xZo=l(),c6=a("li"),P1e=a("strong"),$Zo=o("squeezebert"),kZo=o(" \u2014 "),cQ=a("a"),SZo=o("SqueezeBertForTokenClassification"),RZo=o(" (SqueezeBERT model)"),PZo=l(),f6=a("li"),B1e=a("strong"),BZo=o("xlm"),IZo=o(" \u2014 "),fQ=a("a"),NZo=o("XLMForTokenClassification"),qZo=o(" (XLM model)"),jZo=l(),m6=a("li"),I1e=a("strong"),DZo=o("xlm-roberta"),GZo=o(" \u2014 "),mQ=a("a"),OZo=o("XLMRobertaForTokenClassification"),VZo=o(" (XLM-RoBERTa model)"),XZo=l(),g6=a("li"),N1e=a("strong"),zZo=o("xlm-roberta-xl"),QZo=o(" \u2014 "),gQ=a("a"),WZo=o("XLMRobertaXLForTokenClassification"),HZo=o(" (XLM-RoBERTa-XL model)"),UZo=l(),h6=a("li"),q1e=a("strong"),JZo=o("xlnet"),YZo=o(" \u2014 "),hQ=a("a"),KZo=o("XLNetForTokenClassification"),ZZo=o(" (XLNet model)"),eer=l(),p6=a("li"),j1e=a("strong"),oer=o("yoso"),rer=o(" \u2014 "),pQ=a("a"),ter=o("YosoForTokenClassification"),aer=o(" (YOSO model)"),ner=l(),_6=a("p"),ser=o("The model is set in evaluation mode by default using "),D1e=a("code"),ler=o("model.eval()"),ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),der=o("model.train()"),cer=l(),F(u6.$$.fragment),yXe=l(),hd=a("h2"),b6=a("a"),O1e=a("span"),F(TL.$$.fragment),fer=l(),V1e=a("span"),mer=o("AutoModelForQuestionAnswering"),xXe=l(),Do=a("div"),F(ML.$$.fragment),ger=l(),pd=a("p"),her=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_Q=a("a"),per=o("from_pretrained()"),_er=o(" class method or the "),uQ=a("a"),uer=o("from_config()"),ber=o(` class
method.`),ver=l(),EL=a("p"),Fer=o("This class cannot be instantiated directly using "),X1e=a("code"),Ter=o("__init__()"),Mer=o(" (throws an error)."),Eer=l(),ut=a("div"),F(CL.$$.fragment),Cer=l(),z1e=a("p"),wer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Aer=l(),_d=a("p"),Ler=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),yer=o("not"),xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),$er=o("from_pretrained()"),ker=o(" to load the model weights."),Ser=l(),F(v6.$$.fragment),Rer=l(),so=a("div"),F(wL.$$.fragment),Per=l(),W1e=a("p"),Ber=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ier=l(),za=a("p"),Ner=o("The model class to instantiate is selected based on the "),H1e=a("code"),qer=o("model_type"),jer=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),Oer=o("pretrained_model_name_or_path"),Ver=o(":"),Xer=l(),V=a("ul"),F6=a("li"),Y1e=a("strong"),zer=o("albert"),Qer=o(" \u2014 "),vQ=a("a"),Wer=o("AlbertForQuestionAnswering"),Her=o(" (ALBERT model)"),Uer=l(),T6=a("li"),K1e=a("strong"),Jer=o("bart"),Yer=o(" \u2014 "),FQ=a("a"),Ker=o("BartForQuestionAnswering"),Zer=o(" (BART model)"),eor=l(),M6=a("li"),Z1e=a("strong"),oor=o("bert"),ror=o(" \u2014 "),TQ=a("a"),tor=o("BertForQuestionAnswering"),aor=o(" (BERT model)"),nor=l(),E6=a("li"),e2e=a("strong"),sor=o("big_bird"),lor=o(" \u2014 "),MQ=a("a"),ior=o("BigBirdForQuestionAnswering"),dor=o(" (BigBird model)"),cor=l(),C6=a("li"),o2e=a("strong"),mor=o("bigbird_pegasus"),gor=o(" \u2014 "),EQ=a("a"),hor=o("BigBirdPegasusForQuestionAnswering"),por=o(" (BigBird-Pegasus model)"),_or=l(),w6=a("li"),r2e=a("strong"),uor=o("camembert"),bor=o(" \u2014 "),CQ=a("a"),vor=o("CamembertForQuestionAnswering"),For=o(" (CamemBERT model)"),Tor=l(),A6=a("li"),t2e=a("strong"),Mor=o("canine"),Eor=o(" \u2014 "),wQ=a("a"),Cor=o("CanineForQuestionAnswering"),wor=o(" (CANINE model)"),Aor=l(),L6=a("li"),a2e=a("strong"),Lor=o("convbert"),yor=o(" \u2014 "),AQ=a("a"),xor=o("ConvBertForQuestionAnswering"),$or=o(" (ConvBERT model)"),kor=l(),y6=a("li"),n2e=a("strong"),Sor=o("data2vec-text"),Ror=o(" \u2014 "),LQ=a("a"),Por=o("Data2VecTextForQuestionAnswering"),Bor=o(" (Data2VecText model)"),Ior=l(),x6=a("li"),s2e=a("strong"),Nor=o("deberta"),qor=o(" \u2014 "),yQ=a("a"),jor=o("DebertaForQuestionAnswering"),Dor=o(" (DeBERTa model)"),Gor=l(),$6=a("li"),l2e=a("strong"),Oor=o("deberta-v2"),Vor=o(" \u2014 "),xQ=a("a"),Xor=o("DebertaV2ForQuestionAnswering"),zor=o(" (DeBERTa-v2 model)"),Qor=l(),k6=a("li"),i2e=a("strong"),Wor=o("distilbert"),Hor=o(" \u2014 "),$Q=a("a"),Uor=o("DistilBertForQuestionAnswering"),Jor=o(" (DistilBERT model)"),Yor=l(),S6=a("li"),d2e=a("strong"),Kor=o("electra"),Zor=o(" \u2014 "),kQ=a("a"),err=o("ElectraForQuestionAnswering"),orr=o(" (ELECTRA model)"),rrr=l(),R6=a("li"),c2e=a("strong"),trr=o("flaubert"),arr=o(" \u2014 "),SQ=a("a"),nrr=o("FlaubertForQuestionAnsweringSimple"),srr=o(" (FlauBERT model)"),lrr=l(),P6=a("li"),f2e=a("strong"),irr=o("fnet"),drr=o(" \u2014 "),RQ=a("a"),crr=o("FNetForQuestionAnswering"),frr=o(" (FNet model)"),mrr=l(),B6=a("li"),m2e=a("strong"),grr=o("funnel"),hrr=o(" \u2014 "),PQ=a("a"),prr=o("FunnelForQuestionAnswering"),_rr=o(" (Funnel Transformer model)"),urr=l(),I6=a("li"),g2e=a("strong"),brr=o("gptj"),vrr=o(" \u2014 "),BQ=a("a"),Frr=o("GPTJForQuestionAnswering"),Trr=o(" (GPT-J model)"),Mrr=l(),N6=a("li"),h2e=a("strong"),Err=o("ibert"),Crr=o(" \u2014 "),IQ=a("a"),wrr=o("IBertForQuestionAnswering"),Arr=o(" (I-BERT model)"),Lrr=l(),q6=a("li"),p2e=a("strong"),yrr=o("layoutlmv2"),xrr=o(" \u2014 "),NQ=a("a"),$rr=o("LayoutLMv2ForQuestionAnswering"),krr=o(" (LayoutLMv2 model)"),Srr=l(),j6=a("li"),_2e=a("strong"),Rrr=o("layoutlmv3"),Prr=o(" \u2014 "),qQ=a("a"),Brr=o("LayoutLMv3ForQuestionAnswering"),Irr=o(" (LayoutLMv3 model)"),Nrr=l(),D6=a("li"),u2e=a("strong"),qrr=o("led"),jrr=o(" \u2014 "),jQ=a("a"),Drr=o("LEDForQuestionAnswering"),Grr=o(" (LED model)"),Orr=l(),G6=a("li"),b2e=a("strong"),Vrr=o("longformer"),Xrr=o(" \u2014 "),DQ=a("a"),zrr=o("LongformerForQuestionAnswering"),Qrr=o(" (Longformer model)"),Wrr=l(),O6=a("li"),v2e=a("strong"),Hrr=o("lxmert"),Urr=o(" \u2014 "),GQ=a("a"),Jrr=o("LxmertForQuestionAnswering"),Yrr=o(" (LXMERT model)"),Krr=l(),V6=a("li"),F2e=a("strong"),Zrr=o("mbart"),etr=o(" \u2014 "),OQ=a("a"),otr=o("MBartForQuestionAnswering"),rtr=o(" (mBART model)"),ttr=l(),X6=a("li"),T2e=a("strong"),atr=o("megatron-bert"),ntr=o(" \u2014 "),VQ=a("a"),str=o("MegatronBertForQuestionAnswering"),ltr=o(" (Megatron-BERT model)"),itr=l(),z6=a("li"),M2e=a("strong"),dtr=o("mobilebert"),ctr=o(" \u2014 "),XQ=a("a"),ftr=o("MobileBertForQuestionAnswering"),mtr=o(" (MobileBERT model)"),gtr=l(),Q6=a("li"),E2e=a("strong"),htr=o("mpnet"),ptr=o(" \u2014 "),zQ=a("a"),_tr=o("MPNetForQuestionAnswering"),utr=o(" (MPNet model)"),btr=l(),W6=a("li"),C2e=a("strong"),vtr=o("mvp"),Ftr=o(" \u2014 "),QQ=a("a"),Ttr=o("MvpForQuestionAnswering"),Mtr=o(" (MVP model)"),Etr=l(),H6=a("li"),w2e=a("strong"),Ctr=o("nezha"),wtr=o(" \u2014 "),WQ=a("a"),Atr=o("NezhaForQuestionAnswering"),Ltr=o(" (Nezha model)"),ytr=l(),U6=a("li"),A2e=a("strong"),xtr=o("nystromformer"),$tr=o(" \u2014 "),HQ=a("a"),ktr=o("NystromformerForQuestionAnswering"),Str=o(" (Nystr\xF6mformer model)"),Rtr=l(),J6=a("li"),L2e=a("strong"),Ptr=o("qdqbert"),Btr=o(" \u2014 "),UQ=a("a"),Itr=o("QDQBertForQuestionAnswering"),Ntr=o(" (QDQBert model)"),qtr=l(),Y6=a("li"),y2e=a("strong"),jtr=o("reformer"),Dtr=o(" \u2014 "),JQ=a("a"),Gtr=o("ReformerForQuestionAnswering"),Otr=o(" (Reformer model)"),Vtr=l(),K6=a("li"),x2e=a("strong"),Xtr=o("rembert"),ztr=o(" \u2014 "),YQ=a("a"),Qtr=o("RemBertForQuestionAnswering"),Wtr=o(" (RemBERT model)"),Htr=l(),Z6=a("li"),$2e=a("strong"),Utr=o("roberta"),Jtr=o(" \u2014 "),KQ=a("a"),Ytr=o("RobertaForQuestionAnswering"),Ktr=o(" (RoBERTa model)"),Ztr=l(),eT=a("li"),k2e=a("strong"),ear=o("roformer"),oar=o(" \u2014 "),ZQ=a("a"),rar=o("RoFormerForQuestionAnswering"),tar=o(" (RoFormer model)"),aar=l(),oT=a("li"),S2e=a("strong"),nar=o("splinter"),sar=o(" \u2014 "),eW=a("a"),lar=o("SplinterForQuestionAnswering"),iar=o(" (Splinter model)"),dar=l(),rT=a("li"),R2e=a("strong"),car=o("squeezebert"),far=o(" \u2014 "),oW=a("a"),mar=o("SqueezeBertForQuestionAnswering"),gar=o(" (SqueezeBERT model)"),har=l(),tT=a("li"),P2e=a("strong"),par=o("xlm"),_ar=o(" \u2014 "),rW=a("a"),uar=o("XLMForQuestionAnsweringSimple"),bar=o(" (XLM model)"),Far=l(),aT=a("li"),B2e=a("strong"),Tar=o("xlm-roberta"),Mar=o(" \u2014 "),tW=a("a"),Ear=o("XLMRobertaForQuestionAnswering"),Car=o(" (XLM-RoBERTa model)"),war=l(),nT=a("li"),I2e=a("strong"),Aar=o("xlm-roberta-xl"),Lar=o(" \u2014 "),aW=a("a"),yar=o("XLMRobertaXLForQuestionAnswering"),xar=o(" (XLM-RoBERTa-XL model)"),$ar=l(),sT=a("li"),N2e=a("strong"),kar=o("xlnet"),Sar=o(" \u2014 "),nW=a("a"),Rar=o("XLNetForQuestionAnsweringSimple"),Par=o(" (XLNet model)"),Bar=l(),lT=a("li"),q2e=a("strong"),Iar=o("yoso"),Nar=o(" \u2014 "),sW=a("a"),qar=o("YosoForQuestionAnswering"),jar=o(" (YOSO model)"),Dar=l(),iT=a("p"),Gar=o("The model is set in evaluation mode by default using "),j2e=a("code"),Oar=o("model.eval()"),Var=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D2e=a("code"),Xar=o("model.train()"),zar=l(),F(dT.$$.fragment),$Xe=l(),ud=a("h2"),cT=a("a"),G2e=a("span"),F(AL.$$.fragment),Qar=l(),O2e=a("span"),War=o("AutoModelForTableQuestionAnswering"),kXe=l(),Go=a("div"),F(LL.$$.fragment),Har=l(),bd=a("p"),Uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lW=a("a"),Jar=o("from_pretrained()"),Yar=o(" class method or the "),iW=a("a"),Kar=o("from_config()"),Zar=o(` class
method.`),enr=l(),yL=a("p"),onr=o("This class cannot be instantiated directly using "),V2e=a("code"),rnr=o("__init__()"),tnr=o(" (throws an error)."),anr=l(),bt=a("div"),F(xL.$$.fragment),nnr=l(),X2e=a("p"),snr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lnr=l(),vd=a("p"),inr=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),dnr=o("not"),cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),fnr=o("from_pretrained()"),mnr=o(" to load the model weights."),gnr=l(),F(fT.$$.fragment),hnr=l(),lo=a("div"),F($L.$$.fragment),pnr=l(),Q2e=a("p"),_nr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),unr=l(),Qa=a("p"),bnr=o("The model class to instantiate is selected based on the "),W2e=a("code"),vnr=o("model_type"),Fnr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),Tnr=o("pretrained_model_name_or_path"),Mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),Enr=o("pretrained_model_name_or_path"),Cnr=o(":"),wnr=l(),J2e=a("ul"),mT=a("li"),Y2e=a("strong"),Anr=o("tapas"),Lnr=o(" \u2014 "),cW=a("a"),ynr=o("TapasForQuestionAnswering"),xnr=o(" (TAPAS model)"),$nr=l(),gT=a("p"),knr=o("The model is set in evaluation mode by default using "),K2e=a("code"),Snr=o("model.eval()"),Rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z2e=a("code"),Pnr=o("model.train()"),Bnr=l(),F(hT.$$.fragment),SXe=l(),Fd=a("h2"),pT=a("a"),ebe=a("span"),F(kL.$$.fragment),Inr=l(),obe=a("span"),Nnr=o("AutoModelForImageClassification"),RXe=l(),Oo=a("div"),F(SL.$$.fragment),qnr=l(),Td=a("p"),jnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fW=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" class method or the "),mW=a("a"),Onr=o("from_config()"),Vnr=o(` class
method.`),Xnr=l(),RL=a("p"),znr=o("This class cannot be instantiated directly using "),rbe=a("code"),Qnr=o("__init__()"),Wnr=o(" (throws an error)."),Hnr=l(),vt=a("div"),F(PL.$$.fragment),Unr=l(),tbe=a("p"),Jnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ynr=l(),Md=a("p"),Knr=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),Znr=o("not"),esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),osr=o("from_pretrained()"),rsr=o(" to load the model weights."),tsr=l(),F(_T.$$.fragment),asr=l(),io=a("div"),F(BL.$$.fragment),nsr=l(),nbe=a("p"),ssr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lsr=l(),Wa=a("p"),isr=o("The model class to instantiate is selected based on the "),sbe=a("code"),dsr=o("model_type"),csr=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),fsr=o("pretrained_model_name_or_path"),msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),gsr=o("pretrained_model_name_or_path"),hsr=o(":"),psr=l(),ve=a("ul"),uT=a("li"),dbe=a("strong"),_sr=o("beit"),usr=o(" \u2014 "),hW=a("a"),bsr=o("BeitForImageClassification"),vsr=o(" (BEiT model)"),Fsr=l(),bT=a("li"),cbe=a("strong"),Tsr=o("convnext"),Msr=o(" \u2014 "),pW=a("a"),Esr=o("ConvNextForImageClassification"),Csr=o(" (ConvNeXT model)"),wsr=l(),vT=a("li"),fbe=a("strong"),Asr=o("cvt"),Lsr=o(" \u2014 "),_W=a("a"),ysr=o("CvtForImageClassification"),xsr=o(" (CvT model)"),$sr=l(),FT=a("li"),mbe=a("strong"),ksr=o("data2vec-vision"),Ssr=o(" \u2014 "),uW=a("a"),Rsr=o("Data2VecVisionForImageClassification"),Psr=o(" (Data2VecVision model)"),Bsr=l(),Hs=a("li"),gbe=a("strong"),Isr=o("deit"),Nsr=o(" \u2014 "),bW=a("a"),qsr=o("DeiTForImageClassification"),jsr=o(" or "),vW=a("a"),Dsr=o("DeiTForImageClassificationWithTeacher"),Gsr=o(" (DeiT model)"),Osr=l(),TT=a("li"),hbe=a("strong"),Vsr=o("imagegpt"),Xsr=o(" \u2014 "),FW=a("a"),zsr=o("ImageGPTForImageClassification"),Qsr=o(" (ImageGPT model)"),Wsr=l(),Us=a("li"),pbe=a("strong"),Hsr=o("levit"),Usr=o(" \u2014 "),TW=a("a"),Jsr=o("LevitForImageClassification"),Ysr=o(" or "),MW=a("a"),Ksr=o("LevitForImageClassificationWithTeacher"),Zsr=o(" (LeViT model)"),elr=l(),MT=a("li"),_be=a("strong"),olr=o("mobilevit"),rlr=o(" \u2014 "),EW=a("a"),tlr=o("MobileViTForImageClassification"),alr=o(" (MobileViT model)"),nlr=l(),Ft=a("li"),ube=a("strong"),slr=o("perceiver"),llr=o(" \u2014 "),CW=a("a"),ilr=o("PerceiverForImageClassificationLearned"),dlr=o(" or "),wW=a("a"),clr=o("PerceiverForImageClassificationFourier"),flr=o(" or "),AW=a("a"),mlr=o("PerceiverForImageClassificationConvProcessing"),glr=o(" (Perceiver model)"),hlr=l(),ET=a("li"),bbe=a("strong"),plr=o("poolformer"),_lr=o(" \u2014 "),LW=a("a"),ulr=o("PoolFormerForImageClassification"),blr=o(" (PoolFormer model)"),vlr=l(),CT=a("li"),vbe=a("strong"),Flr=o("regnet"),Tlr=o(" \u2014 "),yW=a("a"),Mlr=o("RegNetForImageClassification"),Elr=o(" (RegNet model)"),Clr=l(),wT=a("li"),Fbe=a("strong"),wlr=o("resnet"),Alr=o(" \u2014 "),xW=a("a"),Llr=o("ResNetForImageClassification"),ylr=o(" (ResNet model)"),xlr=l(),AT=a("li"),Tbe=a("strong"),$lr=o("segformer"),klr=o(" \u2014 "),$W=a("a"),Slr=o("SegformerForImageClassification"),Rlr=o(" (SegFormer model)"),Plr=l(),LT=a("li"),Mbe=a("strong"),Blr=o("swin"),Ilr=o(" \u2014 "),kW=a("a"),Nlr=o("SwinForImageClassification"),qlr=o(" (Swin Transformer model)"),jlr=l(),yT=a("li"),Ebe=a("strong"),Dlr=o("van"),Glr=o(" \u2014 "),SW=a("a"),Olr=o("VanForImageClassification"),Vlr=o(" (VAN model)"),Xlr=l(),xT=a("li"),Cbe=a("strong"),zlr=o("vit"),Qlr=o(" \u2014 "),RW=a("a"),Wlr=o("ViTForImageClassification"),Hlr=o(" (ViT model)"),Ulr=l(),$T=a("p"),Jlr=o("The model is set in evaluation mode by default using "),wbe=a("code"),Ylr=o("model.eval()"),Klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),Zlr=o("model.train()"),eir=l(),F(kT.$$.fragment),PXe=l(),Ed=a("h2"),ST=a("a"),Lbe=a("span"),F(IL.$$.fragment),oir=l(),ybe=a("span"),rir=o("AutoModelForVision2Seq"),BXe=l(),Vo=a("div"),F(NL.$$.fragment),tir=l(),Cd=a("p"),air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PW=a("a"),nir=o("from_pretrained()"),sir=o(" class method or the "),BW=a("a"),lir=o("from_config()"),iir=o(` class
method.`),dir=l(),qL=a("p"),cir=o("This class cannot be instantiated directly using "),xbe=a("code"),fir=o("__init__()"),mir=o(" (throws an error)."),gir=l(),Tt=a("div"),F(jL.$$.fragment),hir=l(),$be=a("p"),pir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_ir=l(),wd=a("p"),uir=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),bir=o("not"),vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),Fir=o("from_pretrained()"),Tir=o(" to load the model weights."),Mir=l(),F(RT.$$.fragment),Eir=l(),co=a("div"),F(DL.$$.fragment),Cir=l(),Sbe=a("p"),wir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Air=l(),Ha=a("p"),Lir=o("The model class to instantiate is selected based on the "),Rbe=a("code"),yir=o("model_type"),xir=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(":"),Pir=l(),Ibe=a("ul"),PT=a("li"),Nbe=a("strong"),Bir=o("vision-encoder-decoder"),Iir=o(" \u2014 "),NW=a("a"),Nir=o("VisionEncoderDecoderModel"),qir=o(" (Vision Encoder decoder model)"),jir=l(),BT=a("p"),Dir=o("The model is set in evaluation mode by default using "),qbe=a("code"),Gir=o("model.eval()"),Oir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),Vir=o("model.train()"),Xir=l(),F(IT.$$.fragment),IXe=l(),Ad=a("h2"),NT=a("a"),Dbe=a("span"),F(GL.$$.fragment),zir=l(),Gbe=a("span"),Qir=o("AutoModelForVisualQuestionAnswering"),NXe=l(),Xo=a("div"),F(OL.$$.fragment),Wir=l(),Ld=a("p"),Hir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),qW=a("a"),Uir=o("from_pretrained()"),Jir=o(" class method or the "),jW=a("a"),Yir=o("from_config()"),Kir=o(` class
method.`),Zir=l(),VL=a("p"),edr=o("This class cannot be instantiated directly using "),Obe=a("code"),odr=o("__init__()"),rdr=o(" (throws an error)."),tdr=l(),Mt=a("div"),F(XL.$$.fragment),adr=l(),Vbe=a("p"),ndr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sdr=l(),yd=a("p"),ldr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),idr=o("not"),ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),cdr=o("from_pretrained()"),fdr=o(" to load the model weights."),mdr=l(),F(qT.$$.fragment),gdr=l(),fo=a("div"),F(zL.$$.fragment),hdr=l(),zbe=a("p"),pdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),_dr=l(),Ua=a("p"),udr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),bdr=o("model_type"),vdr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),Fdr=o("pretrained_model_name_or_path"),Tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),Mdr=o("pretrained_model_name_or_path"),Edr=o(":"),Cdr=l(),Ube=a("ul"),jT=a("li"),Jbe=a("strong"),wdr=o("vilt"),Adr=o(" \u2014 "),GW=a("a"),Ldr=o("ViltForQuestionAnswering"),ydr=o(" (ViLT model)"),xdr=l(),DT=a("p"),$dr=o("The model is set in evaluation mode by default using "),Ybe=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=a("code"),Rdr=o("model.train()"),Pdr=l(),F(GT.$$.fragment),qXe=l(),xd=a("h2"),OT=a("a"),Zbe=a("span"),F(QL.$$.fragment),Bdr=l(),eve=a("span"),Idr=o("AutoModelForAudioClassification"),jXe=l(),zo=a("div"),F(WL.$$.fragment),Ndr=l(),$d=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OW=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),VW=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),HL=a("p"),Xdr=o("This class cannot be instantiated directly using "),ove=a("code"),zdr=o("__init__()"),Qdr=o(" (throws an error)."),Wdr=l(),Et=a("div"),F(UL.$$.fragment),Hdr=l(),rve=a("p"),Udr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Jdr=l(),kd=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(VT.$$.fragment),tcr=l(),mo=a("div"),F(JL.$$.fragment),acr=l(),ave=a("p"),ncr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),scr=l(),Ja=a("p"),lcr=o("The model class to instantiate is selected based on the "),nve=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),Pe=a("ul"),XT=a("li"),ive=a("strong"),pcr=o("data2vec-audio"),_cr=o(" \u2014 "),zW=a("a"),ucr=o("Data2VecAudioForSequenceClassification"),bcr=o(" (Data2VecAudio model)"),vcr=l(),zT=a("li"),dve=a("strong"),Fcr=o("hubert"),Tcr=o(" \u2014 "),QW=a("a"),Mcr=o("HubertForSequenceClassification"),Ecr=o(" (Hubert model)"),Ccr=l(),QT=a("li"),cve=a("strong"),wcr=o("sew"),Acr=o(" \u2014 "),WW=a("a"),Lcr=o("SEWForSequenceClassification"),ycr=o(" (SEW model)"),xcr=l(),WT=a("li"),fve=a("strong"),$cr=o("sew-d"),kcr=o(" \u2014 "),HW=a("a"),Scr=o("SEWDForSequenceClassification"),Rcr=o(" (SEW-D model)"),Pcr=l(),HT=a("li"),mve=a("strong"),Bcr=o("unispeech"),Icr=o(" \u2014 "),UW=a("a"),Ncr=o("UniSpeechForSequenceClassification"),qcr=o(" (UniSpeech model)"),jcr=l(),UT=a("li"),gve=a("strong"),Dcr=o("unispeech-sat"),Gcr=o(" \u2014 "),JW=a("a"),Ocr=o("UniSpeechSatForSequenceClassification"),Vcr=o(" (UniSpeechSat model)"),Xcr=l(),JT=a("li"),hve=a("strong"),zcr=o("wav2vec2"),Qcr=o(" \u2014 "),YW=a("a"),Wcr=o("Wav2Vec2ForSequenceClassification"),Hcr=o(" (Wav2Vec2 model)"),Ucr=l(),YT=a("li"),pve=a("strong"),Jcr=o("wav2vec2-conformer"),Ycr=o(" \u2014 "),KW=a("a"),Kcr=o("Wav2Vec2ConformerForSequenceClassification"),Zcr=o(" (Wav2Vec2-Conformer model)"),efr=l(),KT=a("li"),_ve=a("strong"),ofr=o("wavlm"),rfr=o(" \u2014 "),ZW=a("a"),tfr=o("WavLMForSequenceClassification"),afr=o(" (WavLM model)"),nfr=l(),ZT=a("p"),sfr=o("The model is set in evaluation mode by default using "),uve=a("code"),lfr=o("model.eval()"),ifr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bve=a("code"),dfr=o("model.train()"),cfr=l(),F(e8.$$.fragment),DXe=l(),Sd=a("h2"),o8=a("a"),vve=a("span"),F(YL.$$.fragment),ffr=l(),Fve=a("span"),mfr=o("AutoModelForAudioFrameClassification"),GXe=l(),Qo=a("div"),F(KL.$$.fragment),gfr=l(),Rd=a("p"),hfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),eH=a("a"),pfr=o("from_pretrained()"),_fr=o(" class method or the "),oH=a("a"),ufr=o("from_config()"),bfr=o(` class
method.`),vfr=l(),ZL=a("p"),Ffr=o("This class cannot be instantiated directly using "),Tve=a("code"),Tfr=o("__init__()"),Mfr=o(" (throws an error)."),Efr=l(),Ct=a("div"),F(ey.$$.fragment),Cfr=l(),Mve=a("p"),wfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Afr=l(),Pd=a("p"),Lfr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),yfr=o("not"),xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),$fr=o("from_pretrained()"),kfr=o(" to load the model weights."),Sfr=l(),F(r8.$$.fragment),Rfr=l(),go=a("div"),F(oy.$$.fragment),Pfr=l(),Cve=a("p"),Bfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ifr=l(),Ya=a("p"),Nfr=o("The model class to instantiate is selected based on the "),wve=a("code"),qfr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),Dfr=o("pretrained_model_name_or_path"),Gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),Ofr=o("pretrained_model_name_or_path"),Vfr=o(":"),Xfr=l(),rt=a("ul"),t8=a("li"),yve=a("strong"),zfr=o("data2vec-audio"),Qfr=o(" \u2014 "),tH=a("a"),Wfr=o("Data2VecAudioForAudioFrameClassification"),Hfr=o(" (Data2VecAudio model)"),Ufr=l(),a8=a("li"),xve=a("strong"),Jfr=o("unispeech-sat"),Yfr=o(" \u2014 "),aH=a("a"),Kfr=o("UniSpeechSatForAudioFrameClassification"),Zfr=o(" (UniSpeechSat model)"),emr=l(),n8=a("li"),$ve=a("strong"),omr=o("wav2vec2"),rmr=o(" \u2014 "),nH=a("a"),tmr=o("Wav2Vec2ForAudioFrameClassification"),amr=o(" (Wav2Vec2 model)"),nmr=l(),s8=a("li"),kve=a("strong"),smr=o("wav2vec2-conformer"),lmr=o(" \u2014 "),sH=a("a"),imr=o("Wav2Vec2ConformerForAudioFrameClassification"),dmr=o(" (Wav2Vec2-Conformer model)"),cmr=l(),l8=a("li"),Sve=a("strong"),fmr=o("wavlm"),mmr=o(" \u2014 "),lH=a("a"),gmr=o("WavLMForAudioFrameClassification"),hmr=o(" (WavLM model)"),pmr=l(),i8=a("p"),_mr=o("The model is set in evaluation mode by default using "),Rve=a("code"),umr=o("model.eval()"),bmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),vmr=o("model.train()"),Fmr=l(),F(d8.$$.fragment),OXe=l(),Bd=a("h2"),c8=a("a"),Bve=a("span"),F(ry.$$.fragment),Tmr=l(),Ive=a("span"),Mmr=o("AutoModelForCTC"),VXe=l(),Wo=a("div"),F(ty.$$.fragment),Emr=l(),Id=a("p"),Cmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iH=a("a"),wmr=o("from_pretrained()"),Amr=o(" class method or the "),dH=a("a"),Lmr=o("from_config()"),ymr=o(` class
method.`),xmr=l(),ay=a("p"),$mr=o("This class cannot be instantiated directly using "),Nve=a("code"),kmr=o("__init__()"),Smr=o(" (throws an error)."),Rmr=l(),wt=a("div"),F(ny.$$.fragment),Pmr=l(),qve=a("p"),Bmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Imr=l(),Nd=a("p"),Nmr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),qmr=o("not"),jmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" to load the model weights."),Omr=l(),F(f8.$$.fragment),Vmr=l(),ho=a("div"),F(sy.$$.fragment),Xmr=l(),Dve=a("p"),zmr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Qmr=l(),Ka=a("p"),Wmr=o("The model class to instantiate is selected based on the "),Gve=a("code"),Hmr=o("model_type"),Umr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),Jmr=o("pretrained_model_name_or_path"),Ymr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(":"),egr=l(),Le=a("ul"),m8=a("li"),Xve=a("strong"),ogr=o("data2vec-audio"),rgr=o(" \u2014 "),fH=a("a"),tgr=o("Data2VecAudioForCTC"),agr=o(" (Data2VecAudio model)"),ngr=l(),g8=a("li"),zve=a("strong"),sgr=o("hubert"),lgr=o(" \u2014 "),mH=a("a"),igr=o("HubertForCTC"),dgr=o(" (Hubert model)"),cgr=l(),h8=a("li"),Qve=a("strong"),fgr=o("mctct"),mgr=o(" \u2014 "),gH=a("a"),ggr=o("MCTCTForCTC"),hgr=o(" (M-CTC-T model)"),pgr=l(),p8=a("li"),Wve=a("strong"),_gr=o("sew"),ugr=o(" \u2014 "),hH=a("a"),bgr=o("SEWForCTC"),vgr=o(" (SEW model)"),Fgr=l(),_8=a("li"),Hve=a("strong"),Tgr=o("sew-d"),Mgr=o(" \u2014 "),pH=a("a"),Egr=o("SEWDForCTC"),Cgr=o(" (SEW-D model)"),wgr=l(),u8=a("li"),Uve=a("strong"),Agr=o("unispeech"),Lgr=o(" \u2014 "),_H=a("a"),ygr=o("UniSpeechForCTC"),xgr=o(" (UniSpeech model)"),$gr=l(),b8=a("li"),Jve=a("strong"),kgr=o("unispeech-sat"),Sgr=o(" \u2014 "),uH=a("a"),Rgr=o("UniSpeechSatForCTC"),Pgr=o(" (UniSpeechSat model)"),Bgr=l(),v8=a("li"),Yve=a("strong"),Igr=o("wav2vec2"),Ngr=o(" \u2014 "),bH=a("a"),qgr=o("Wav2Vec2ForCTC"),jgr=o(" (Wav2Vec2 model)"),Dgr=l(),F8=a("li"),Kve=a("strong"),Ggr=o("wav2vec2-conformer"),Ogr=o(" \u2014 "),vH=a("a"),Vgr=o("Wav2Vec2ConformerForCTC"),Xgr=o(" (Wav2Vec2-Conformer model)"),zgr=l(),T8=a("li"),Zve=a("strong"),Qgr=o("wavlm"),Wgr=o(" \u2014 "),FH=a("a"),Hgr=o("WavLMForCTC"),Ugr=o(" (WavLM model)"),Jgr=l(),M8=a("p"),Ygr=o("The model is set in evaluation mode by default using "),eFe=a("code"),Kgr=o("model.eval()"),Zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=a("code"),ehr=o("model.train()"),ohr=l(),F(E8.$$.fragment),XXe=l(),qd=a("h2"),C8=a("a"),rFe=a("span"),F(ly.$$.fragment),rhr=l(),tFe=a("span"),thr=o("AutoModelForSpeechSeq2Seq"),zXe=l(),Ho=a("div"),F(iy.$$.fragment),ahr=l(),jd=a("p"),nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=a("a"),shr=o("from_pretrained()"),lhr=o(" class method or the "),MH=a("a"),ihr=o("from_config()"),dhr=o(` class
method.`),chr=l(),dy=a("p"),fhr=o("This class cannot be instantiated directly using "),aFe=a("code"),mhr=o("__init__()"),ghr=o(" (throws an error)."),hhr=l(),At=a("div"),F(cy.$$.fragment),phr=l(),nFe=a("p"),_hr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uhr=l(),Dd=a("p"),bhr=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),vhr=o("not"),Fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Thr=o("from_pretrained()"),Mhr=o(" to load the model weights."),Ehr=l(),F(w8.$$.fragment),Chr=l(),po=a("div"),F(fy.$$.fragment),whr=l(),lFe=a("p"),Ahr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lhr=l(),Za=a("p"),yhr=o("The model class to instantiate is selected based on the "),iFe=a("code"),xhr=o("model_type"),$hr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),Rhr=o("pretrained_model_name_or_path"),Phr=o(":"),Bhr=l(),my=a("ul"),A8=a("li"),fFe=a("strong"),Ihr=o("speech-encoder-decoder"),Nhr=o(" \u2014 "),CH=a("a"),qhr=o("SpeechEncoderDecoderModel"),jhr=o(" (Speech Encoder decoder model)"),Dhr=l(),L8=a("li"),mFe=a("strong"),Ghr=o("speech_to_text"),Ohr=o(" \u2014 "),wH=a("a"),Vhr=o("Speech2TextForConditionalGeneration"),Xhr=o(" (Speech2Text model)"),zhr=l(),y8=a("p"),Qhr=o("The model is set in evaluation mode by default using "),gFe=a("code"),Whr=o("model.eval()"),Hhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),Uhr=o("model.train()"),Jhr=l(),F(x8.$$.fragment),QXe=l(),Gd=a("h2"),$8=a("a"),pFe=a("span"),F(gy.$$.fragment),Yhr=l(),_Fe=a("span"),Khr=o("AutoModelForAudioXVector"),WXe=l(),Uo=a("div"),F(hy.$$.fragment),Zhr=l(),Od=a("p"),epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AH=a("a"),opr=o("from_pretrained()"),rpr=o(" class method or the "),LH=a("a"),tpr=o("from_config()"),apr=o(` class
method.`),npr=l(),py=a("p"),spr=o("This class cannot be instantiated directly using "),uFe=a("code"),lpr=o("__init__()"),ipr=o(" (throws an error)."),dpr=l(),Lt=a("div"),F(_y.$$.fragment),cpr=l(),bFe=a("p"),fpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mpr=l(),Vd=a("p"),gpr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),hpr=o("not"),ppr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),_pr=o("from_pretrained()"),upr=o(" to load the model weights."),bpr=l(),F(k8.$$.fragment),vpr=l(),_o=a("div"),F(uy.$$.fragment),Fpr=l(),FFe=a("p"),Tpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mpr=l(),en=a("p"),Epr=o("The model class to instantiate is selected based on the "),TFe=a("code"),Cpr=o("model_type"),wpr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),Apr=o("pretrained_model_name_or_path"),Lpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),ypr=o("pretrained_model_name_or_path"),xpr=o(":"),$pr=l(),tt=a("ul"),S8=a("li"),CFe=a("strong"),kpr=o("data2vec-audio"),Spr=o(" \u2014 "),xH=a("a"),Rpr=o("Data2VecAudioForXVector"),Ppr=o(" (Data2VecAudio model)"),Bpr=l(),R8=a("li"),wFe=a("strong"),Ipr=o("unispeech-sat"),Npr=o(" \u2014 "),$H=a("a"),qpr=o("UniSpeechSatForXVector"),jpr=o(" (UniSpeechSat model)"),Dpr=l(),P8=a("li"),AFe=a("strong"),Gpr=o("wav2vec2"),Opr=o(" \u2014 "),kH=a("a"),Vpr=o("Wav2Vec2ForXVector"),Xpr=o(" (Wav2Vec2 model)"),zpr=l(),B8=a("li"),LFe=a("strong"),Qpr=o("wav2vec2-conformer"),Wpr=o(" \u2014 "),SH=a("a"),Hpr=o("Wav2Vec2ConformerForXVector"),Upr=o(" (Wav2Vec2-Conformer model)"),Jpr=l(),I8=a("li"),yFe=a("strong"),Ypr=o("wavlm"),Kpr=o(" \u2014 "),RH=a("a"),Zpr=o("WavLMForXVector"),e_r=o(" (WavLM model)"),o_r=l(),N8=a("p"),r_r=o("The model is set in evaluation mode by default using "),xFe=a("code"),t_r=o("model.eval()"),a_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=a("code"),n_r=o("model.train()"),s_r=l(),F(q8.$$.fragment),HXe=l(),Xd=a("h2"),j8=a("a"),kFe=a("span"),F(by.$$.fragment),l_r=l(),SFe=a("span"),i_r=o("AutoModelForMaskedImageModeling"),UXe=l(),Jo=a("div"),F(vy.$$.fragment),d_r=l(),zd=a("p"),c_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PH=a("a"),f_r=o("from_pretrained()"),m_r=o(" class method or the "),BH=a("a"),g_r=o("from_config()"),h_r=o(` class
method.`),p_r=l(),Fy=a("p"),__r=o("This class cannot be instantiated directly using "),RFe=a("code"),u_r=o("__init__()"),b_r=o(" (throws an error)."),v_r=l(),yt=a("div"),F(Ty.$$.fragment),F_r=l(),PFe=a("p"),T_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),M_r=l(),Qd=a("p"),E_r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),C_r=o("not"),w_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),A_r=o("from_pretrained()"),L_r=o(" to load the model weights."),y_r=l(),F(D8.$$.fragment),x_r=l(),uo=a("div"),F(My.$$.fragment),$_r=l(),IFe=a("p"),k_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),S_r=l(),on=a("p"),R_r=o("The model class to instantiate is selected based on the "),NFe=a("code"),P_r=o("model_type"),B_r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),I_r=o("pretrained_model_name_or_path"),N_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),q_r=o("pretrained_model_name_or_path"),j_r=o(":"),D_r=l(),Wd=a("ul"),G8=a("li"),DFe=a("strong"),G_r=o("deit"),O_r=o(" \u2014 "),NH=a("a"),V_r=o("DeiTForMaskedImageModeling"),X_r=o(" (DeiT model)"),z_r=l(),O8=a("li"),GFe=a("strong"),Q_r=o("swin"),W_r=o(" \u2014 "),qH=a("a"),H_r=o("SwinForMaskedImageModeling"),U_r=o(" (Swin Transformer model)"),J_r=l(),V8=a("li"),OFe=a("strong"),Y_r=o("vit"),K_r=o(" \u2014 "),jH=a("a"),Z_r=o("ViTForMaskedImageModeling"),eur=o(" (ViT model)"),our=l(),X8=a("p"),rur=o("The model is set in evaluation mode by default using "),VFe=a("code"),tur=o("model.eval()"),aur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=a("code"),nur=o("model.train()"),sur=l(),F(z8.$$.fragment),JXe=l(),Hd=a("h2"),Q8=a("a"),zFe=a("span"),F(Ey.$$.fragment),lur=l(),QFe=a("span"),iur=o("AutoModelForObjectDetection"),YXe=l(),Yo=a("div"),F(Cy.$$.fragment),dur=l(),Ud=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DH=a("a"),fur=o("from_pretrained()"),mur=o(" class method or the "),GH=a("a"),gur=o("from_config()"),hur=o(` class
method.`),pur=l(),wy=a("p"),_ur=o("This class cannot be instantiated directly using "),WFe=a("code"),uur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),xt=a("div"),F(Ay.$$.fragment),Fur=l(),HFe=a("p"),Tur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mur=l(),Jd=a("p"),Eur=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Cur=o("not"),wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),Aur=o("from_pretrained()"),Lur=o(" to load the model weights."),yur=l(),F(W8.$$.fragment),xur=l(),bo=a("div"),F(Ly.$$.fragment),$ur=l(),JFe=a("p"),kur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Sur=l(),rn=a("p"),Rur=o("The model class to instantiate is selected based on the "),YFe=a("code"),Pur=o("model_type"),Bur=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),Iur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),qur=o("pretrained_model_name_or_path"),jur=o(":"),Dur=l(),yy=a("ul"),H8=a("li"),e6e=a("strong"),Gur=o("detr"),Our=o(" \u2014 "),VH=a("a"),Vur=o("DetrForObjectDetection"),Xur=o(" (DETR model)"),zur=l(),U8=a("li"),o6e=a("strong"),Qur=o("yolos"),Wur=o(" \u2014 "),XH=a("a"),Hur=o("YolosForObjectDetection"),Uur=o(" (YOLOS model)"),Jur=l(),J8=a("p"),Yur=o("The model is set in evaluation mode by default using "),r6e=a("code"),Kur=o("model.eval()"),Zur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t6e=a("code"),e1r=o("model.train()"),o1r=l(),F(Y8.$$.fragment),KXe=l(),Yd=a("h2"),K8=a("a"),a6e=a("span"),F(xy.$$.fragment),r1r=l(),n6e=a("span"),t1r=o("AutoModelForImageSegmentation"),ZXe=l(),Ko=a("div"),F($y.$$.fragment),a1r=l(),Kd=a("p"),n1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zH=a("a"),s1r=o("from_pretrained()"),l1r=o(" class method or the "),QH=a("a"),i1r=o("from_config()"),d1r=o(` class
method.`),c1r=l(),ky=a("p"),f1r=o("This class cannot be instantiated directly using "),s6e=a("code"),m1r=o("__init__()"),g1r=o(" (throws an error)."),h1r=l(),$t=a("div"),F(Sy.$$.fragment),p1r=l(),l6e=a("p"),_1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),u1r=l(),Zd=a("p"),b1r=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),v1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),T1r=o("from_pretrained()"),M1r=o(" to load the model weights."),E1r=l(),F(Z8.$$.fragment),C1r=l(),vo=a("div"),F(Ry.$$.fragment),w1r=l(),d6e=a("p"),A1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),L1r=l(),tn=a("p"),y1r=o("The model class to instantiate is selected based on the "),c6e=a("code"),x1r=o("model_type"),$1r=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),R1r=o("pretrained_model_name_or_path"),P1r=o(":"),B1r=l(),g6e=a("ul"),e9=a("li"),h6e=a("strong"),I1r=o("detr"),N1r=o(" \u2014 "),HH=a("a"),q1r=o("DetrForSegmentation"),j1r=o(" (DETR model)"),D1r=l(),o9=a("p"),G1r=o("The model is set in evaluation mode by default using "),p6e=a("code"),O1r=o("model.eval()"),V1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_6e=a("code"),X1r=o("model.train()"),z1r=l(),F(r9.$$.fragment),eze=l(),ec=a("h2"),t9=a("a"),u6e=a("span"),F(Py.$$.fragment),Q1r=l(),b6e=a("span"),W1r=o("AutoModelForSemanticSegmentation"),oze=l(),Zo=a("div"),F(By.$$.fragment),H1r=l(),oc=a("p"),U1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UH=a("a"),J1r=o("from_pretrained()"),Y1r=o(" class method or the "),JH=a("a"),K1r=o("from_config()"),Z1r=o(` class
method.`),e2r=l(),Iy=a("p"),o2r=o("This class cannot be instantiated directly using "),v6e=a("code"),r2r=o("__init__()"),t2r=o(" (throws an error)."),a2r=l(),kt=a("div"),F(Ny.$$.fragment),n2r=l(),F6e=a("p"),s2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),l2r=l(),rc=a("p"),i2r=o(`Note:
Loading a model from its configuration file does `),T6e=a("strong"),d2r=o("not"),c2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),f2r=o("from_pretrained()"),m2r=o(" to load the model weights."),g2r=l(),F(a9.$$.fragment),h2r=l(),Fo=a("div"),F(qy.$$.fragment),p2r=l(),M6e=a("p"),_2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),u2r=l(),an=a("p"),b2r=o("The model class to instantiate is selected based on the "),E6e=a("code"),v2r=o("model_type"),F2r=o(` property of the config object (either
passed as an argument or loaded from `),C6e=a("code"),T2r=o("pretrained_model_name_or_path"),M2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(":"),w2r=l(),at=a("ul"),n9=a("li"),A6e=a("strong"),A2r=o("beit"),L2r=o(" \u2014 "),KH=a("a"),y2r=o("BeitForSemanticSegmentation"),x2r=o(" (BEiT model)"),$2r=l(),s9=a("li"),L6e=a("strong"),k2r=o("data2vec-vision"),S2r=o(" \u2014 "),ZH=a("a"),R2r=o("Data2VecVisionForSemanticSegmentation"),P2r=o(" (Data2VecVision model)"),B2r=l(),l9=a("li"),y6e=a("strong"),I2r=o("dpt"),N2r=o(" \u2014 "),eU=a("a"),q2r=o("DPTForSemanticSegmentation"),j2r=o(" (DPT model)"),D2r=l(),i9=a("li"),x6e=a("strong"),G2r=o("mobilevit"),O2r=o(" \u2014 "),oU=a("a"),V2r=o("MobileViTForSemanticSegmentation"),X2r=o(" (MobileViT model)"),z2r=l(),d9=a("li"),$6e=a("strong"),Q2r=o("segformer"),W2r=o(" \u2014 "),rU=a("a"),H2r=o("SegformerForSemanticSegmentation"),U2r=o(" (SegFormer model)"),J2r=l(),c9=a("p"),Y2r=o("The model is set in evaluation mode by default using "),k6e=a("code"),K2r=o("model.eval()"),Z2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S6e=a("code"),ebr=o("model.train()"),obr=l(),F(f9.$$.fragment),rze=l(),tc=a("h2"),m9=a("a"),R6e=a("span"),F(jy.$$.fragment),rbr=l(),P6e=a("span"),tbr=o("AutoModelForInstanceSegmentation"),tze=l(),er=a("div"),F(Dy.$$.fragment),abr=l(),ac=a("p"),nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tU=a("a"),sbr=o("from_pretrained()"),lbr=o(" class method or the "),aU=a("a"),ibr=o("from_config()"),dbr=o(` class
method.`),cbr=l(),Gy=a("p"),fbr=o("This class cannot be instantiated directly using "),B6e=a("code"),mbr=o("__init__()"),gbr=o(" (throws an error)."),hbr=l(),St=a("div"),F(Oy.$$.fragment),pbr=l(),I6e=a("p"),_br=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ubr=l(),nc=a("p"),bbr=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),vbr=o("not"),Fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),Tbr=o("from_pretrained()"),Mbr=o(" to load the model weights."),Ebr=l(),F(g9.$$.fragment),Cbr=l(),To=a("div"),F(Vy.$$.fragment),wbr=l(),q6e=a("p"),Abr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Lbr=l(),nn=a("p"),ybr=o("The model class to instantiate is selected based on the "),j6e=a("code"),xbr=o("model_type"),$br=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),Rbr=o("pretrained_model_name_or_path"),Pbr=o(":"),Bbr=l(),O6e=a("ul"),h9=a("li"),V6e=a("strong"),Ibr=o("maskformer"),Nbr=o(" \u2014 "),sU=a("a"),qbr=o("MaskFormerForInstanceSegmentation"),jbr=o(" (MaskFormer model)"),Dbr=l(),p9=a("p"),Gbr=o("The model is set in evaluation mode by default using "),X6e=a("code"),Obr=o("model.eval()"),Vbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z6e=a("code"),Xbr=o("model.train()"),zbr=l(),F(_9.$$.fragment),aze=l(),sc=a("h2"),u9=a("a"),Q6e=a("span"),F(Xy.$$.fragment),Qbr=l(),W6e=a("span"),Wbr=o("TFAutoModel"),nze=l(),or=a("div"),F(zy.$$.fragment),Hbr=l(),lc=a("p"),Ubr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lU=a("a"),Jbr=o("from_pretrained()"),Ybr=o(" class method or the "),iU=a("a"),Kbr=o("from_config()"),Zbr=o(` class
method.`),evr=l(),Qy=a("p"),ovr=o("This class cannot be instantiated directly using "),H6e=a("code"),rvr=o("__init__()"),tvr=o(" (throws an error)."),avr=l(),Rt=a("div"),F(Wy.$$.fragment),nvr=l(),U6e=a("p"),svr=o("Instantiates one of the base model classes of the library from a configuration."),lvr=l(),ic=a("p"),ivr=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),dvr=o("not"),cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),fvr=o("from_pretrained()"),mvr=o(" to load the model weights."),gvr=l(),F(b9.$$.fragment),hvr=l(),xr=a("div"),F(Hy.$$.fragment),pvr=l(),Y6e=a("p"),_vr=o("Instantiate one of the base model classes of the library from a pretrained model."),uvr=l(),sn=a("p"),bvr=o("The model class to instantiate is selected based on the "),K6e=a("code"),vvr=o("model_type"),Fvr=o(` property of the config object (either
passed as an argument or loaded from `),Z6e=a("code"),Tvr=o("pretrained_model_name_or_path"),Mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),Evr=o("pretrained_model_name_or_path"),Cvr=o(":"),wvr=l(),q=a("ul"),v9=a("li"),oTe=a("strong"),Avr=o("albert"),Lvr=o(" \u2014 "),cU=a("a"),yvr=o("TFAlbertModel"),xvr=o(" (ALBERT model)"),$vr=l(),F9=a("li"),rTe=a("strong"),kvr=o("bart"),Svr=o(" \u2014 "),fU=a("a"),Rvr=o("TFBartModel"),Pvr=o(" (BART model)"),Bvr=l(),T9=a("li"),tTe=a("strong"),Ivr=o("bert"),Nvr=o(" \u2014 "),mU=a("a"),qvr=o("TFBertModel"),jvr=o(" (BERT model)"),Dvr=l(),M9=a("li"),aTe=a("strong"),Gvr=o("blenderbot"),Ovr=o(" \u2014 "),gU=a("a"),Vvr=o("TFBlenderbotModel"),Xvr=o(" (Blenderbot model)"),zvr=l(),E9=a("li"),nTe=a("strong"),Qvr=o("blenderbot-small"),Wvr=o(" \u2014 "),hU=a("a"),Hvr=o("TFBlenderbotSmallModel"),Uvr=o(" (BlenderbotSmall model)"),Jvr=l(),C9=a("li"),sTe=a("strong"),Yvr=o("camembert"),Kvr=o(" \u2014 "),pU=a("a"),Zvr=o("TFCamembertModel"),eFr=o(" (CamemBERT model)"),oFr=l(),w9=a("li"),lTe=a("strong"),rFr=o("clip"),tFr=o(" \u2014 "),_U=a("a"),aFr=o("TFCLIPModel"),nFr=o(" (CLIP model)"),sFr=l(),A9=a("li"),iTe=a("strong"),lFr=o("convbert"),iFr=o(" \u2014 "),uU=a("a"),dFr=o("TFConvBertModel"),cFr=o(" (ConvBERT model)"),fFr=l(),L9=a("li"),dTe=a("strong"),mFr=o("convnext"),gFr=o(" \u2014 "),bU=a("a"),hFr=o("TFConvNextModel"),pFr=o(" (ConvNeXT model)"),_Fr=l(),y9=a("li"),cTe=a("strong"),uFr=o("ctrl"),bFr=o(" \u2014 "),vU=a("a"),vFr=o("TFCTRLModel"),FFr=o(" (CTRL model)"),TFr=l(),x9=a("li"),fTe=a("strong"),MFr=o("data2vec-vision"),EFr=o(" \u2014 "),FU=a("a"),CFr=o("TFData2VecVisionModel"),wFr=o(" (Data2VecVision model)"),AFr=l(),$9=a("li"),mTe=a("strong"),LFr=o("deberta"),yFr=o(" \u2014 "),TU=a("a"),xFr=o("TFDebertaModel"),$Fr=o(" (DeBERTa model)"),kFr=l(),k9=a("li"),gTe=a("strong"),SFr=o("deberta-v2"),RFr=o(" \u2014 "),MU=a("a"),PFr=o("TFDebertaV2Model"),BFr=o(" (DeBERTa-v2 model)"),IFr=l(),S9=a("li"),hTe=a("strong"),NFr=o("deit"),qFr=o(" \u2014 "),EU=a("a"),jFr=o("TFDeiTModel"),DFr=o(" (DeiT model)"),GFr=l(),R9=a("li"),pTe=a("strong"),OFr=o("distilbert"),VFr=o(" \u2014 "),CU=a("a"),XFr=o("TFDistilBertModel"),zFr=o(" (DistilBERT model)"),QFr=l(),P9=a("li"),_Te=a("strong"),WFr=o("dpr"),HFr=o(" \u2014 "),wU=a("a"),UFr=o("TFDPRQuestionEncoder"),JFr=o(" (DPR model)"),YFr=l(),B9=a("li"),uTe=a("strong"),KFr=o("electra"),ZFr=o(" \u2014 "),AU=a("a"),e6r=o("TFElectraModel"),o6r=o(" (ELECTRA model)"),r6r=l(),I9=a("li"),bTe=a("strong"),t6r=o("flaubert"),a6r=o(" \u2014 "),LU=a("a"),n6r=o("TFFlaubertModel"),s6r=o(" (FlauBERT model)"),l6r=l(),Js=a("li"),vTe=a("strong"),i6r=o("funnel"),d6r=o(" \u2014 "),yU=a("a"),c6r=o("TFFunnelModel"),f6r=o(" or "),xU=a("a"),m6r=o("TFFunnelBaseModel"),g6r=o(" (Funnel Transformer model)"),h6r=l(),N9=a("li"),FTe=a("strong"),p6r=o("gpt2"),_6r=o(" \u2014 "),$U=a("a"),u6r=o("TFGPT2Model"),b6r=o(" (OpenAI GPT-2 model)"),v6r=l(),q9=a("li"),TTe=a("strong"),F6r=o("gptj"),T6r=o(" \u2014 "),kU=a("a"),M6r=o("TFGPTJModel"),E6r=o(" (GPT-J model)"),C6r=l(),j9=a("li"),MTe=a("strong"),w6r=o("hubert"),A6r=o(" \u2014 "),SU=a("a"),L6r=o("TFHubertModel"),y6r=o(" (Hubert model)"),x6r=l(),D9=a("li"),ETe=a("strong"),$6r=o("layoutlm"),k6r=o(" \u2014 "),RU=a("a"),S6r=o("TFLayoutLMModel"),R6r=o(" (LayoutLM model)"),P6r=l(),G9=a("li"),CTe=a("strong"),B6r=o("led"),I6r=o(" \u2014 "),PU=a("a"),N6r=o("TFLEDModel"),q6r=o(" (LED model)"),j6r=l(),O9=a("li"),wTe=a("strong"),D6r=o("longformer"),G6r=o(" \u2014 "),BU=a("a"),O6r=o("TFLongformerModel"),V6r=o(" (Longformer model)"),X6r=l(),V9=a("li"),ATe=a("strong"),z6r=o("lxmert"),Q6r=o(" \u2014 "),IU=a("a"),W6r=o("TFLxmertModel"),H6r=o(" (LXMERT model)"),U6r=l(),X9=a("li"),LTe=a("strong"),J6r=o("marian"),Y6r=o(" \u2014 "),NU=a("a"),K6r=o("TFMarianModel"),Z6r=o(" (Marian model)"),eTr=l(),z9=a("li"),yTe=a("strong"),oTr=o("mbart"),rTr=o(" \u2014 "),qU=a("a"),tTr=o("TFMBartModel"),aTr=o(" (mBART model)"),nTr=l(),Q9=a("li"),xTe=a("strong"),sTr=o("mobilebert"),lTr=o(" \u2014 "),jU=a("a"),iTr=o("TFMobileBertModel"),dTr=o(" (MobileBERT model)"),cTr=l(),W9=a("li"),$Te=a("strong"),fTr=o("mpnet"),mTr=o(" \u2014 "),DU=a("a"),gTr=o("TFMPNetModel"),hTr=o(" (MPNet model)"),pTr=l(),H9=a("li"),kTe=a("strong"),_Tr=o("mt5"),uTr=o(" \u2014 "),GU=a("a"),bTr=o("TFMT5Model"),vTr=o(" (MT5 model)"),FTr=l(),U9=a("li"),STe=a("strong"),TTr=o("openai-gpt"),MTr=o(" \u2014 "),OU=a("a"),ETr=o("TFOpenAIGPTModel"),CTr=o(" (OpenAI GPT model)"),wTr=l(),J9=a("li"),RTe=a("strong"),ATr=o("opt"),LTr=o(" \u2014 "),VU=a("a"),yTr=o("TFOPTModel"),xTr=o(" (OPT model)"),$Tr=l(),Y9=a("li"),PTe=a("strong"),kTr=o("pegasus"),STr=o(" \u2014 "),XU=a("a"),RTr=o("TFPegasusModel"),PTr=o(" (Pegasus model)"),BTr=l(),K9=a("li"),BTe=a("strong"),ITr=o("regnet"),NTr=o(" \u2014 "),zU=a("a"),qTr=o("TFRegNetModel"),jTr=o(" (RegNet model)"),DTr=l(),Z9=a("li"),ITe=a("strong"),GTr=o("rembert"),OTr=o(" \u2014 "),QU=a("a"),VTr=o("TFRemBertModel"),XTr=o(" (RemBERT model)"),zTr=l(),eM=a("li"),NTe=a("strong"),QTr=o("resnet"),WTr=o(" \u2014 "),WU=a("a"),HTr=o("TFResNetModel"),UTr=o(" (ResNet model)"),JTr=l(),oM=a("li"),qTe=a("strong"),YTr=o("roberta"),KTr=o(" \u2014 "),HU=a("a"),ZTr=o("TFRobertaModel"),e8r=o(" (RoBERTa model)"),o8r=l(),rM=a("li"),jTe=a("strong"),r8r=o("roformer"),t8r=o(" \u2014 "),UU=a("a"),a8r=o("TFRoFormerModel"),n8r=o(" (RoFormer model)"),s8r=l(),tM=a("li"),DTe=a("strong"),l8r=o("speech_to_text"),i8r=o(" \u2014 "),JU=a("a"),d8r=o("TFSpeech2TextModel"),c8r=o(" (Speech2Text model)"),f8r=l(),aM=a("li"),GTe=a("strong"),m8r=o("swin"),g8r=o(" \u2014 "),YU=a("a"),h8r=o("TFSwinModel"),p8r=o(" (Swin Transformer model)"),_8r=l(),nM=a("li"),OTe=a("strong"),u8r=o("t5"),b8r=o(" \u2014 "),KU=a("a"),v8r=o("TFT5Model"),F8r=o(" (T5 model)"),T8r=l(),sM=a("li"),VTe=a("strong"),M8r=o("tapas"),E8r=o(" \u2014 "),ZU=a("a"),C8r=o("TFTapasModel"),w8r=o(" (TAPAS model)"),A8r=l(),lM=a("li"),XTe=a("strong"),L8r=o("transfo-xl"),y8r=o(" \u2014 "),eJ=a("a"),x8r=o("TFTransfoXLModel"),$8r=o(" (Transformer-XL model)"),k8r=l(),iM=a("li"),zTe=a("strong"),S8r=o("vit"),R8r=o(" \u2014 "),oJ=a("a"),P8r=o("TFViTModel"),B8r=o(" (ViT model)"),I8r=l(),dM=a("li"),QTe=a("strong"),N8r=o("vit_mae"),q8r=o(" \u2014 "),rJ=a("a"),j8r=o("TFViTMAEModel"),D8r=o(" (ViTMAE model)"),G8r=l(),cM=a("li"),WTe=a("strong"),O8r=o("wav2vec2"),V8r=o(" \u2014 "),tJ=a("a"),X8r=o("TFWav2Vec2Model"),z8r=o(" (Wav2Vec2 model)"),Q8r=l(),fM=a("li"),HTe=a("strong"),W8r=o("xlm"),H8r=o(" \u2014 "),aJ=a("a"),U8r=o("TFXLMModel"),J8r=o(" (XLM model)"),Y8r=l(),mM=a("li"),UTe=a("strong"),K8r=o("xlm-roberta"),Z8r=o(" \u2014 "),nJ=a("a"),e9r=o("TFXLMRobertaModel"),o9r=o(" (XLM-RoBERTa model)"),r9r=l(),gM=a("li"),JTe=a("strong"),t9r=o("xlnet"),a9r=o(" \u2014 "),sJ=a("a"),n9r=o("TFXLNetModel"),s9r=o(" (XLNet model)"),l9r=l(),F(hM.$$.fragment),sze=l(),dc=a("h2"),pM=a("a"),YTe=a("span"),F(Uy.$$.fragment),i9r=l(),KTe=a("span"),d9r=o("TFAutoModelForPreTraining"),lze=l(),rr=a("div"),F(Jy.$$.fragment),c9r=l(),cc=a("p"),f9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=a("a"),m9r=o("from_pretrained()"),g9r=o(" class method or the "),iJ=a("a"),h9r=o("from_config()"),p9r=o(` class
method.`),_9r=l(),Yy=a("p"),u9r=o("This class cannot be instantiated directly using "),ZTe=a("code"),b9r=o("__init__()"),v9r=o(" (throws an error)."),F9r=l(),Pt=a("div"),F(Ky.$$.fragment),T9r=l(),e8e=a("p"),M9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E9r=l(),fc=a("p"),C9r=o(`Note:
Loading a model from its configuration file does `),o8e=a("strong"),w9r=o("not"),A9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),L9r=o("from_pretrained()"),y9r=o(" to load the model weights."),x9r=l(),F(_M.$$.fragment),$9r=l(),$r=a("div"),F(Zy.$$.fragment),k9r=l(),r8e=a("p"),S9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R9r=l(),ln=a("p"),P9r=o("The model class to instantiate is selected based on the "),t8e=a("code"),B9r=o("model_type"),I9r=o(` property of the config object (either
passed as an argument or loaded from `),a8e=a("code"),N9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(":"),G9r=l(),se=a("ul"),uM=a("li"),s8e=a("strong"),O9r=o("albert"),V9r=o(" \u2014 "),cJ=a("a"),X9r=o("TFAlbertForPreTraining"),z9r=o(" (ALBERT model)"),Q9r=l(),bM=a("li"),l8e=a("strong"),W9r=o("bart"),H9r=o(" \u2014 "),fJ=a("a"),U9r=o("TFBartForConditionalGeneration"),J9r=o(" (BART model)"),Y9r=l(),vM=a("li"),i8e=a("strong"),K9r=o("bert"),Z9r=o(" \u2014 "),mJ=a("a"),eMr=o("TFBertForPreTraining"),oMr=o(" (BERT model)"),rMr=l(),FM=a("li"),d8e=a("strong"),tMr=o("camembert"),aMr=o(" \u2014 "),gJ=a("a"),nMr=o("TFCamembertForMaskedLM"),sMr=o(" (CamemBERT model)"),lMr=l(),TM=a("li"),c8e=a("strong"),iMr=o("ctrl"),dMr=o(" \u2014 "),hJ=a("a"),cMr=o("TFCTRLLMHeadModel"),fMr=o(" (CTRL model)"),mMr=l(),MM=a("li"),f8e=a("strong"),gMr=o("distilbert"),hMr=o(" \u2014 "),pJ=a("a"),pMr=o("TFDistilBertForMaskedLM"),_Mr=o(" (DistilBERT model)"),uMr=l(),EM=a("li"),m8e=a("strong"),bMr=o("electra"),vMr=o(" \u2014 "),_J=a("a"),FMr=o("TFElectraForPreTraining"),TMr=o(" (ELECTRA model)"),MMr=l(),CM=a("li"),g8e=a("strong"),EMr=o("flaubert"),CMr=o(" \u2014 "),uJ=a("a"),wMr=o("TFFlaubertWithLMHeadModel"),AMr=o(" (FlauBERT model)"),LMr=l(),wM=a("li"),h8e=a("strong"),yMr=o("funnel"),xMr=o(" \u2014 "),bJ=a("a"),$Mr=o("TFFunnelForPreTraining"),kMr=o(" (Funnel Transformer model)"),SMr=l(),AM=a("li"),p8e=a("strong"),RMr=o("gpt2"),PMr=o(" \u2014 "),vJ=a("a"),BMr=o("TFGPT2LMHeadModel"),IMr=o(" (OpenAI GPT-2 model)"),NMr=l(),LM=a("li"),_8e=a("strong"),qMr=o("layoutlm"),jMr=o(" \u2014 "),FJ=a("a"),DMr=o("TFLayoutLMForMaskedLM"),GMr=o(" (LayoutLM model)"),OMr=l(),yM=a("li"),u8e=a("strong"),VMr=o("lxmert"),XMr=o(" \u2014 "),TJ=a("a"),zMr=o("TFLxmertForPreTraining"),QMr=o(" (LXMERT model)"),WMr=l(),xM=a("li"),b8e=a("strong"),HMr=o("mobilebert"),UMr=o(" \u2014 "),MJ=a("a"),JMr=o("TFMobileBertForPreTraining"),YMr=o(" (MobileBERT model)"),KMr=l(),$M=a("li"),v8e=a("strong"),ZMr=o("mpnet"),e4r=o(" \u2014 "),EJ=a("a"),o4r=o("TFMPNetForMaskedLM"),r4r=o(" (MPNet model)"),t4r=l(),kM=a("li"),F8e=a("strong"),a4r=o("openai-gpt"),n4r=o(" \u2014 "),CJ=a("a"),s4r=o("TFOpenAIGPTLMHeadModel"),l4r=o(" (OpenAI GPT model)"),i4r=l(),SM=a("li"),T8e=a("strong"),d4r=o("roberta"),c4r=o(" \u2014 "),wJ=a("a"),f4r=o("TFRobertaForMaskedLM"),m4r=o(" (RoBERTa model)"),g4r=l(),RM=a("li"),M8e=a("strong"),h4r=o("t5"),p4r=o(" \u2014 "),AJ=a("a"),_4r=o("TFT5ForConditionalGeneration"),u4r=o(" (T5 model)"),b4r=l(),PM=a("li"),E8e=a("strong"),v4r=o("tapas"),F4r=o(" \u2014 "),LJ=a("a"),T4r=o("TFTapasForMaskedLM"),M4r=o(" (TAPAS model)"),E4r=l(),BM=a("li"),C8e=a("strong"),C4r=o("transfo-xl"),w4r=o(" \u2014 "),yJ=a("a"),A4r=o("TFTransfoXLLMHeadModel"),L4r=o(" (Transformer-XL model)"),y4r=l(),IM=a("li"),w8e=a("strong"),x4r=o("vit_mae"),$4r=o(" \u2014 "),xJ=a("a"),k4r=o("TFViTMAEForPreTraining"),S4r=o(" (ViTMAE model)"),R4r=l(),NM=a("li"),A8e=a("strong"),P4r=o("xlm"),B4r=o(" \u2014 "),$J=a("a"),I4r=o("TFXLMWithLMHeadModel"),N4r=o(" (XLM model)"),q4r=l(),qM=a("li"),L8e=a("strong"),j4r=o("xlm-roberta"),D4r=o(" \u2014 "),kJ=a("a"),G4r=o("TFXLMRobertaForMaskedLM"),O4r=o(" (XLM-RoBERTa model)"),V4r=l(),jM=a("li"),y8e=a("strong"),X4r=o("xlnet"),z4r=o(" \u2014 "),SJ=a("a"),Q4r=o("TFXLNetLMHeadModel"),W4r=o(" (XLNet model)"),H4r=l(),F(DM.$$.fragment),ize=l(),mc=a("h2"),GM=a("a"),x8e=a("span"),F(ex.$$.fragment),U4r=l(),$8e=a("span"),J4r=o("TFAutoModelForCausalLM"),dze=l(),tr=a("div"),F(ox.$$.fragment),Y4r=l(),gc=a("p"),K4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=a("a"),Z4r=o("from_pretrained()"),eEr=o(" class method or the "),PJ=a("a"),oEr=o("from_config()"),rEr=o(` class
method.`),tEr=l(),rx=a("p"),aEr=o("This class cannot be instantiated directly using "),k8e=a("code"),nEr=o("__init__()"),sEr=o(" (throws an error)."),lEr=l(),Bt=a("div"),F(tx.$$.fragment),iEr=l(),S8e=a("p"),dEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cEr=l(),hc=a("p"),fEr=o(`Note:
Loading a model from its configuration file does `),R8e=a("strong"),mEr=o("not"),gEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),hEr=o("from_pretrained()"),pEr=o(" to load the model weights."),_Er=l(),F(OM.$$.fragment),uEr=l(),kr=a("div"),F(ax.$$.fragment),bEr=l(),P8e=a("p"),vEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FEr=l(),dn=a("p"),TEr=o("The model class to instantiate is selected based on the "),B8e=a("code"),MEr=o("model_type"),EEr=o(` property of the config object (either
passed as an argument or loaded from `),I8e=a("code"),CEr=o("pretrained_model_name_or_path"),wEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),AEr=o("pretrained_model_name_or_path"),LEr=o(":"),yEr=l(),Me=a("ul"),VM=a("li"),q8e=a("strong"),xEr=o("bert"),$Er=o(" \u2014 "),IJ=a("a"),kEr=o("TFBertLMHeadModel"),SEr=o(" (BERT model)"),REr=l(),XM=a("li"),j8e=a("strong"),PEr=o("camembert"),BEr=o(" \u2014 "),NJ=a("a"),IEr=o("TFCamembertForCausalLM"),NEr=o(" (CamemBERT model)"),qEr=l(),zM=a("li"),D8e=a("strong"),jEr=o("ctrl"),DEr=o(" \u2014 "),qJ=a("a"),GEr=o("TFCTRLLMHeadModel"),OEr=o(" (CTRL model)"),VEr=l(),QM=a("li"),G8e=a("strong"),XEr=o("gpt2"),zEr=o(" \u2014 "),jJ=a("a"),QEr=o("TFGPT2LMHeadModel"),WEr=o(" (OpenAI GPT-2 model)"),HEr=l(),WM=a("li"),O8e=a("strong"),UEr=o("gptj"),JEr=o(" \u2014 "),DJ=a("a"),YEr=o("TFGPTJForCausalLM"),KEr=o(" (GPT-J model)"),ZEr=l(),HM=a("li"),V8e=a("strong"),eCr=o("openai-gpt"),oCr=o(" \u2014 "),GJ=a("a"),rCr=o("TFOpenAIGPTLMHeadModel"),tCr=o(" (OpenAI GPT model)"),aCr=l(),UM=a("li"),X8e=a("strong"),nCr=o("opt"),sCr=o(" \u2014 "),OJ=a("a"),lCr=o("TFOPTForCausalLM"),iCr=o(" (OPT model)"),dCr=l(),JM=a("li"),z8e=a("strong"),cCr=o("rembert"),fCr=o(" \u2014 "),VJ=a("a"),mCr=o("TFRemBertForCausalLM"),gCr=o(" (RemBERT model)"),hCr=l(),YM=a("li"),Q8e=a("strong"),pCr=o("roberta"),_Cr=o(" \u2014 "),XJ=a("a"),uCr=o("TFRobertaForCausalLM"),bCr=o(" (RoBERTa model)"),vCr=l(),KM=a("li"),W8e=a("strong"),FCr=o("roformer"),TCr=o(" \u2014 "),zJ=a("a"),MCr=o("TFRoFormerForCausalLM"),ECr=o(" (RoFormer model)"),CCr=l(),ZM=a("li"),H8e=a("strong"),wCr=o("transfo-xl"),ACr=o(" \u2014 "),QJ=a("a"),LCr=o("TFTransfoXLLMHeadModel"),yCr=o(" (Transformer-XL model)"),xCr=l(),e4=a("li"),U8e=a("strong"),$Cr=o("xlm"),kCr=o(" \u2014 "),WJ=a("a"),SCr=o("TFXLMWithLMHeadModel"),RCr=o(" (XLM model)"),PCr=l(),o4=a("li"),J8e=a("strong"),BCr=o("xlnet"),ICr=o(" \u2014 "),HJ=a("a"),NCr=o("TFXLNetLMHeadModel"),qCr=o(" (XLNet model)"),jCr=l(),F(r4.$$.fragment),cze=l(),pc=a("h2"),t4=a("a"),Y8e=a("span"),F(nx.$$.fragment),DCr=l(),K8e=a("span"),GCr=o("TFAutoModelForImageClassification"),fze=l(),ar=a("div"),F(sx.$$.fragment),OCr=l(),_c=a("p"),VCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=a("a"),XCr=o("from_pretrained()"),zCr=o(" class method or the "),JJ=a("a"),QCr=o("from_config()"),WCr=o(` class
method.`),HCr=l(),lx=a("p"),UCr=o("This class cannot be instantiated directly using "),Z8e=a("code"),JCr=o("__init__()"),YCr=o(" (throws an error)."),KCr=l(),It=a("div"),F(ix.$$.fragment),ZCr=l(),e9e=a("p"),e3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o3r=l(),uc=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),o9e=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(a4.$$.fragment),i3r=l(),Sr=a("div"),F(dx.$$.fragment),d3r=l(),r9e=a("p"),c3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f3r=l(),cn=a("p"),m3r=o("The model class to instantiate is selected based on the "),t9e=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),a9e=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=a("code"),u3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),Qe=a("ul"),n4=a("li"),s9e=a("strong"),F3r=o("convnext"),T3r=o(" \u2014 "),KJ=a("a"),M3r=o("TFConvNextForImageClassification"),E3r=o(" (ConvNeXT model)"),C3r=l(),s4=a("li"),l9e=a("strong"),w3r=o("data2vec-vision"),A3r=o(" \u2014 "),ZJ=a("a"),L3r=o("TFData2VecVisionForImageClassification"),y3r=o(" (Data2VecVision model)"),x3r=l(),Ys=a("li"),i9e=a("strong"),$3r=o("deit"),k3r=o(" \u2014 "),eY=a("a"),S3r=o("TFDeiTForImageClassification"),R3r=o(" or "),oY=a("a"),P3r=o("TFDeiTForImageClassificationWithTeacher"),B3r=o(" (DeiT model)"),I3r=l(),l4=a("li"),d9e=a("strong"),N3r=o("regnet"),q3r=o(" \u2014 "),rY=a("a"),j3r=o("TFRegNetForImageClassification"),D3r=o(" (RegNet model)"),G3r=l(),i4=a("li"),c9e=a("strong"),O3r=o("resnet"),V3r=o(" \u2014 "),tY=a("a"),X3r=o("TFResNetForImageClassification"),z3r=o(" (ResNet model)"),Q3r=l(),d4=a("li"),f9e=a("strong"),W3r=o("swin"),H3r=o(" \u2014 "),aY=a("a"),U3r=o("TFSwinForImageClassification"),J3r=o(" (Swin Transformer model)"),Y3r=l(),c4=a("li"),m9e=a("strong"),K3r=o("vit"),Z3r=o(" \u2014 "),nY=a("a"),e5r=o("TFViTForImageClassification"),o5r=o(" (ViT model)"),r5r=l(),F(f4.$$.fragment),mze=l(),bc=a("h2"),m4=a("a"),g9e=a("span"),F(cx.$$.fragment),t5r=l(),h9e=a("span"),a5r=o("TFAutoModelForMaskedLM"),gze=l(),nr=a("div"),F(fx.$$.fragment),n5r=l(),vc=a("p"),s5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sY=a("a"),l5r=o("from_pretrained()"),i5r=o(" class method or the "),lY=a("a"),d5r=o("from_config()"),c5r=o(` class
method.`),f5r=l(),mx=a("p"),m5r=o("This class cannot be instantiated directly using "),p9e=a("code"),g5r=o("__init__()"),h5r=o(" (throws an error)."),p5r=l(),Nt=a("div"),F(gx.$$.fragment),_5r=l(),_9e=a("p"),u5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b5r=l(),Fc=a("p"),v5r=o(`Note:
Loading a model from its configuration file does `),u9e=a("strong"),F5r=o("not"),T5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),M5r=o("from_pretrained()"),E5r=o(" to load the model weights."),C5r=l(),F(g4.$$.fragment),w5r=l(),Rr=a("div"),F(hx.$$.fragment),A5r=l(),b9e=a("p"),L5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y5r=l(),fn=a("p"),x5r=o("The model class to instantiate is selected based on the "),v9e=a("code"),$5r=o("model_type"),k5r=o(` property of the config object (either
passed as an argument or loaded from `),F9e=a("code"),S5r=o("pretrained_model_name_or_path"),R5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=a("code"),P5r=o("pretrained_model_name_or_path"),B5r=o(":"),I5r=l(),ie=a("ul"),h4=a("li"),M9e=a("strong"),N5r=o("albert"),q5r=o(" \u2014 "),dY=a("a"),j5r=o("TFAlbertForMaskedLM"),D5r=o(" (ALBERT model)"),G5r=l(),p4=a("li"),E9e=a("strong"),O5r=o("bert"),V5r=o(" \u2014 "),cY=a("a"),X5r=o("TFBertForMaskedLM"),z5r=o(" (BERT model)"),Q5r=l(),_4=a("li"),C9e=a("strong"),W5r=o("camembert"),H5r=o(" \u2014 "),fY=a("a"),U5r=o("TFCamembertForMaskedLM"),J5r=o(" (CamemBERT model)"),Y5r=l(),u4=a("li"),w9e=a("strong"),K5r=o("convbert"),Z5r=o(" \u2014 "),mY=a("a"),e0r=o("TFConvBertForMaskedLM"),o0r=o(" (ConvBERT model)"),r0r=l(),b4=a("li"),A9e=a("strong"),t0r=o("deberta"),a0r=o(" \u2014 "),gY=a("a"),n0r=o("TFDebertaForMaskedLM"),s0r=o(" (DeBERTa model)"),l0r=l(),v4=a("li"),L9e=a("strong"),i0r=o("deberta-v2"),d0r=o(" \u2014 "),hY=a("a"),c0r=o("TFDebertaV2ForMaskedLM"),f0r=o(" (DeBERTa-v2 model)"),m0r=l(),F4=a("li"),y9e=a("strong"),g0r=o("distilbert"),h0r=o(" \u2014 "),pY=a("a"),p0r=o("TFDistilBertForMaskedLM"),_0r=o(" (DistilBERT model)"),u0r=l(),T4=a("li"),x9e=a("strong"),b0r=o("electra"),v0r=o(" \u2014 "),_Y=a("a"),F0r=o("TFElectraForMaskedLM"),T0r=o(" (ELECTRA model)"),M0r=l(),M4=a("li"),$9e=a("strong"),E0r=o("flaubert"),C0r=o(" \u2014 "),uY=a("a"),w0r=o("TFFlaubertWithLMHeadModel"),A0r=o(" (FlauBERT model)"),L0r=l(),E4=a("li"),k9e=a("strong"),y0r=o("funnel"),x0r=o(" \u2014 "),bY=a("a"),$0r=o("TFFunnelForMaskedLM"),k0r=o(" (Funnel Transformer model)"),S0r=l(),C4=a("li"),S9e=a("strong"),R0r=o("layoutlm"),P0r=o(" \u2014 "),vY=a("a"),B0r=o("TFLayoutLMForMaskedLM"),I0r=o(" (LayoutLM model)"),N0r=l(),w4=a("li"),R9e=a("strong"),q0r=o("longformer"),j0r=o(" \u2014 "),FY=a("a"),D0r=o("TFLongformerForMaskedLM"),G0r=o(" (Longformer model)"),O0r=l(),A4=a("li"),P9e=a("strong"),V0r=o("mobilebert"),X0r=o(" \u2014 "),TY=a("a"),z0r=o("TFMobileBertForMaskedLM"),Q0r=o(" (MobileBERT model)"),W0r=l(),L4=a("li"),B9e=a("strong"),H0r=o("mpnet"),U0r=o(" \u2014 "),MY=a("a"),J0r=o("TFMPNetForMaskedLM"),Y0r=o(" (MPNet model)"),K0r=l(),y4=a("li"),I9e=a("strong"),Z0r=o("rembert"),ewr=o(" \u2014 "),EY=a("a"),owr=o("TFRemBertForMaskedLM"),rwr=o(" (RemBERT model)"),twr=l(),x4=a("li"),N9e=a("strong"),awr=o("roberta"),nwr=o(" \u2014 "),CY=a("a"),swr=o("TFRobertaForMaskedLM"),lwr=o(" (RoBERTa model)"),iwr=l(),$4=a("li"),q9e=a("strong"),dwr=o("roformer"),cwr=o(" \u2014 "),wY=a("a"),fwr=o("TFRoFormerForMaskedLM"),mwr=o(" (RoFormer model)"),gwr=l(),k4=a("li"),j9e=a("strong"),hwr=o("tapas"),pwr=o(" \u2014 "),AY=a("a"),_wr=o("TFTapasForMaskedLM"),uwr=o(" (TAPAS model)"),bwr=l(),S4=a("li"),D9e=a("strong"),vwr=o("xlm"),Fwr=o(" \u2014 "),LY=a("a"),Twr=o("TFXLMWithLMHeadModel"),Mwr=o(" (XLM model)"),Ewr=l(),R4=a("li"),G9e=a("strong"),Cwr=o("xlm-roberta"),wwr=o(" \u2014 "),yY=a("a"),Awr=o("TFXLMRobertaForMaskedLM"),Lwr=o(" (XLM-RoBERTa model)"),ywr=l(),F(P4.$$.fragment),hze=l(),Tc=a("h2"),B4=a("a"),O9e=a("span"),F(px.$$.fragment),xwr=l(),V9e=a("span"),$wr=o("TFAutoModelForSeq2SeqLM"),pze=l(),sr=a("div"),F(_x.$$.fragment),kwr=l(),Mc=a("p"),Swr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=a("a"),Rwr=o("from_pretrained()"),Pwr=o(" class method or the "),$Y=a("a"),Bwr=o("from_config()"),Iwr=o(` class
method.`),Nwr=l(),ux=a("p"),qwr=o("This class cannot be instantiated directly using "),X9e=a("code"),jwr=o("__init__()"),Dwr=o(" (throws an error)."),Gwr=l(),qt=a("div"),F(bx.$$.fragment),Owr=l(),z9e=a("p"),Vwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xwr=l(),Ec=a("p"),zwr=o(`Note:
Loading a model from its configuration file does `),Q9e=a("strong"),Qwr=o("not"),Wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),Hwr=o("from_pretrained()"),Uwr=o(" to load the model weights."),Jwr=l(),F(I4.$$.fragment),Ywr=l(),Pr=a("div"),F(vx.$$.fragment),Kwr=l(),W9e=a("p"),Zwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eAr=l(),mn=a("p"),oAr=o("The model class to instantiate is selected based on the "),H9e=a("code"),rAr=o("model_type"),tAr=o(` property of the config object (either
passed as an argument or loaded from `),U9e=a("code"),aAr=o("pretrained_model_name_or_path"),nAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=a("code"),sAr=o("pretrained_model_name_or_path"),lAr=o(":"),iAr=l(),ye=a("ul"),N4=a("li"),Y9e=a("strong"),dAr=o("bart"),cAr=o(" \u2014 "),SY=a("a"),fAr=o("TFBartForConditionalGeneration"),mAr=o(" (BART model)"),gAr=l(),q4=a("li"),K9e=a("strong"),hAr=o("blenderbot"),pAr=o(" \u2014 "),RY=a("a"),_Ar=o("TFBlenderbotForConditionalGeneration"),uAr=o(" (Blenderbot model)"),bAr=l(),j4=a("li"),Z9e=a("strong"),vAr=o("blenderbot-small"),FAr=o(" \u2014 "),PY=a("a"),TAr=o("TFBlenderbotSmallForConditionalGeneration"),MAr=o(" (BlenderbotSmall model)"),EAr=l(),D4=a("li"),eMe=a("strong"),CAr=o("encoder-decoder"),wAr=o(" \u2014 "),BY=a("a"),AAr=o("TFEncoderDecoderModel"),LAr=o(" (Encoder decoder model)"),yAr=l(),G4=a("li"),oMe=a("strong"),xAr=o("led"),$Ar=o(" \u2014 "),IY=a("a"),kAr=o("TFLEDForConditionalGeneration"),SAr=o(" (LED model)"),RAr=l(),O4=a("li"),rMe=a("strong"),PAr=o("marian"),BAr=o(" \u2014 "),NY=a("a"),IAr=o("TFMarianMTModel"),NAr=o(" (Marian model)"),qAr=l(),V4=a("li"),tMe=a("strong"),jAr=o("mbart"),DAr=o(" \u2014 "),qY=a("a"),GAr=o("TFMBartForConditionalGeneration"),OAr=o(" (mBART model)"),VAr=l(),X4=a("li"),aMe=a("strong"),XAr=o("mt5"),zAr=o(" \u2014 "),jY=a("a"),QAr=o("TFMT5ForConditionalGeneration"),WAr=o(" (MT5 model)"),HAr=l(),z4=a("li"),nMe=a("strong"),UAr=o("pegasus"),JAr=o(" \u2014 "),DY=a("a"),YAr=o("TFPegasusForConditionalGeneration"),KAr=o(" (Pegasus model)"),ZAr=l(),Q4=a("li"),sMe=a("strong"),e7r=o("t5"),o7r=o(" \u2014 "),GY=a("a"),r7r=o("TFT5ForConditionalGeneration"),t7r=o(" (T5 model)"),a7r=l(),F(W4.$$.fragment),_ze=l(),Cc=a("h2"),H4=a("a"),lMe=a("span"),F(Fx.$$.fragment),n7r=l(),iMe=a("span"),s7r=o("TFAutoModelForSequenceClassification"),uze=l(),lr=a("div"),F(Tx.$$.fragment),l7r=l(),wc=a("p"),i7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OY=a("a"),d7r=o("from_pretrained()"),c7r=o(" class method or the "),VY=a("a"),f7r=o("from_config()"),m7r=o(` class
method.`),g7r=l(),Mx=a("p"),h7r=o("This class cannot be instantiated directly using "),dMe=a("code"),p7r=o("__init__()"),_7r=o(" (throws an error)."),u7r=l(),jt=a("div"),F(Ex.$$.fragment),b7r=l(),cMe=a("p"),v7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F7r=l(),Ac=a("p"),T7r=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),M7r=o("not"),E7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),C7r=o("from_pretrained()"),w7r=o(" to load the model weights."),A7r=l(),F(U4.$$.fragment),L7r=l(),Br=a("div"),F(Cx.$$.fragment),y7r=l(),mMe=a("p"),x7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$7r=l(),gn=a("p"),k7r=o("The model class to instantiate is selected based on the "),gMe=a("code"),S7r=o("model_type"),R7r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),P7r=o("pretrained_model_name_or_path"),B7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),I7r=o("pretrained_model_name_or_path"),N7r=o(":"),q7r=l(),te=a("ul"),J4=a("li"),_Me=a("strong"),j7r=o("albert"),D7r=o(" \u2014 "),zY=a("a"),G7r=o("TFAlbertForSequenceClassification"),O7r=o(" (ALBERT model)"),V7r=l(),Y4=a("li"),uMe=a("strong"),X7r=o("bert"),z7r=o(" \u2014 "),QY=a("a"),Q7r=o("TFBertForSequenceClassification"),W7r=o(" (BERT model)"),H7r=l(),K4=a("li"),bMe=a("strong"),U7r=o("camembert"),J7r=o(" \u2014 "),WY=a("a"),Y7r=o("TFCamembertForSequenceClassification"),K7r=o(" (CamemBERT model)"),Z7r=l(),Z4=a("li"),vMe=a("strong"),eLr=o("convbert"),oLr=o(" \u2014 "),HY=a("a"),rLr=o("TFConvBertForSequenceClassification"),tLr=o(" (ConvBERT model)"),aLr=l(),eE=a("li"),FMe=a("strong"),nLr=o("ctrl"),sLr=o(" \u2014 "),UY=a("a"),lLr=o("TFCTRLForSequenceClassification"),iLr=o(" (CTRL model)"),dLr=l(),oE=a("li"),TMe=a("strong"),cLr=o("deberta"),fLr=o(" \u2014 "),JY=a("a"),mLr=o("TFDebertaForSequenceClassification"),gLr=o(" (DeBERTa model)"),hLr=l(),rE=a("li"),MMe=a("strong"),pLr=o("deberta-v2"),_Lr=o(" \u2014 "),YY=a("a"),uLr=o("TFDebertaV2ForSequenceClassification"),bLr=o(" (DeBERTa-v2 model)"),vLr=l(),tE=a("li"),EMe=a("strong"),FLr=o("distilbert"),TLr=o(" \u2014 "),KY=a("a"),MLr=o("TFDistilBertForSequenceClassification"),ELr=o(" (DistilBERT model)"),CLr=l(),aE=a("li"),CMe=a("strong"),wLr=o("electra"),ALr=o(" \u2014 "),ZY=a("a"),LLr=o("TFElectraForSequenceClassification"),yLr=o(" (ELECTRA model)"),xLr=l(),nE=a("li"),wMe=a("strong"),$Lr=o("flaubert"),kLr=o(" \u2014 "),eK=a("a"),SLr=o("TFFlaubertForSequenceClassification"),RLr=o(" (FlauBERT model)"),PLr=l(),sE=a("li"),AMe=a("strong"),BLr=o("funnel"),ILr=o(" \u2014 "),oK=a("a"),NLr=o("TFFunnelForSequenceClassification"),qLr=o(" (Funnel Transformer model)"),jLr=l(),lE=a("li"),LMe=a("strong"),DLr=o("gpt2"),GLr=o(" \u2014 "),rK=a("a"),OLr=o("TFGPT2ForSequenceClassification"),VLr=o(" (OpenAI GPT-2 model)"),XLr=l(),iE=a("li"),yMe=a("strong"),zLr=o("gptj"),QLr=o(" \u2014 "),tK=a("a"),WLr=o("TFGPTJForSequenceClassification"),HLr=o(" (GPT-J model)"),ULr=l(),dE=a("li"),xMe=a("strong"),JLr=o("layoutlm"),YLr=o(" \u2014 "),aK=a("a"),KLr=o("TFLayoutLMForSequenceClassification"),ZLr=o(" (LayoutLM model)"),eyr=l(),cE=a("li"),$Me=a("strong"),oyr=o("longformer"),ryr=o(" \u2014 "),nK=a("a"),tyr=o("TFLongformerForSequenceClassification"),ayr=o(" (Longformer model)"),nyr=l(),fE=a("li"),kMe=a("strong"),syr=o("mobilebert"),lyr=o(" \u2014 "),sK=a("a"),iyr=o("TFMobileBertForSequenceClassification"),dyr=o(" (MobileBERT model)"),cyr=l(),mE=a("li"),SMe=a("strong"),fyr=o("mpnet"),myr=o(" \u2014 "),lK=a("a"),gyr=o("TFMPNetForSequenceClassification"),hyr=o(" (MPNet model)"),pyr=l(),gE=a("li"),RMe=a("strong"),_yr=o("openai-gpt"),uyr=o(" \u2014 "),iK=a("a"),byr=o("TFOpenAIGPTForSequenceClassification"),vyr=o(" (OpenAI GPT model)"),Fyr=l(),hE=a("li"),PMe=a("strong"),Tyr=o("rembert"),Myr=o(" \u2014 "),dK=a("a"),Eyr=o("TFRemBertForSequenceClassification"),Cyr=o(" (RemBERT model)"),wyr=l(),pE=a("li"),BMe=a("strong"),Ayr=o("roberta"),Lyr=o(" \u2014 "),cK=a("a"),yyr=o("TFRobertaForSequenceClassification"),xyr=o(" (RoBERTa model)"),$yr=l(),_E=a("li"),IMe=a("strong"),kyr=o("roformer"),Syr=o(" \u2014 "),fK=a("a"),Ryr=o("TFRoFormerForSequenceClassification"),Pyr=o(" (RoFormer model)"),Byr=l(),uE=a("li"),NMe=a("strong"),Iyr=o("tapas"),Nyr=o(" \u2014 "),mK=a("a"),qyr=o("TFTapasForSequenceClassification"),jyr=o(" (TAPAS model)"),Dyr=l(),bE=a("li"),qMe=a("strong"),Gyr=o("transfo-xl"),Oyr=o(" \u2014 "),gK=a("a"),Vyr=o("TFTransfoXLForSequenceClassification"),Xyr=o(" (Transformer-XL model)"),zyr=l(),vE=a("li"),jMe=a("strong"),Qyr=o("xlm"),Wyr=o(" \u2014 "),hK=a("a"),Hyr=o("TFXLMForSequenceClassification"),Uyr=o(" (XLM model)"),Jyr=l(),FE=a("li"),DMe=a("strong"),Yyr=o("xlm-roberta"),Kyr=o(" \u2014 "),pK=a("a"),Zyr=o("TFXLMRobertaForSequenceClassification"),exr=o(" (XLM-RoBERTa model)"),oxr=l(),TE=a("li"),GMe=a("strong"),rxr=o("xlnet"),txr=o(" \u2014 "),_K=a("a"),axr=o("TFXLNetForSequenceClassification"),nxr=o(" (XLNet model)"),sxr=l(),F(ME.$$.fragment),bze=l(),Lc=a("h2"),EE=a("a"),OMe=a("span"),F(wx.$$.fragment),lxr=l(),VMe=a("span"),ixr=o("TFAutoModelForMultipleChoice"),vze=l(),ir=a("div"),F(Ax.$$.fragment),dxr=l(),yc=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uK=a("a"),fxr=o("from_pretrained()"),mxr=o(" class method or the "),bK=a("a"),gxr=o("from_config()"),hxr=o(` class
method.`),pxr=l(),Lx=a("p"),_xr=o("This class cannot be instantiated directly using "),XMe=a("code"),uxr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),Dt=a("div"),F(yx.$$.fragment),Fxr=l(),zMe=a("p"),Txr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mxr=l(),xc=a("p"),Exr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),Cxr=o("not"),wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),Axr=o("from_pretrained()"),Lxr=o(" to load the model weights."),yxr=l(),F(CE.$$.fragment),xxr=l(),Ir=a("div"),F(xx.$$.fragment),$xr=l(),WMe=a("p"),kxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sxr=l(),hn=a("p"),Rxr=o("The model class to instantiate is selected based on the "),HMe=a("code"),Pxr=o("model_type"),Bxr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),Ixr=o("pretrained_model_name_or_path"),Nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),qxr=o("pretrained_model_name_or_path"),jxr=o(":"),Dxr=l(),_e=a("ul"),wE=a("li"),YMe=a("strong"),Gxr=o("albert"),Oxr=o(" \u2014 "),FK=a("a"),Vxr=o("TFAlbertForMultipleChoice"),Xxr=o(" (ALBERT model)"),zxr=l(),AE=a("li"),KMe=a("strong"),Qxr=o("bert"),Wxr=o(" \u2014 "),TK=a("a"),Hxr=o("TFBertForMultipleChoice"),Uxr=o(" (BERT model)"),Jxr=l(),LE=a("li"),ZMe=a("strong"),Yxr=o("camembert"),Kxr=o(" \u2014 "),MK=a("a"),Zxr=o("TFCamembertForMultipleChoice"),e$r=o(" (CamemBERT model)"),o$r=l(),yE=a("li"),e4e=a("strong"),r$r=o("convbert"),t$r=o(" \u2014 "),EK=a("a"),a$r=o("TFConvBertForMultipleChoice"),n$r=o(" (ConvBERT model)"),s$r=l(),xE=a("li"),o4e=a("strong"),l$r=o("distilbert"),i$r=o(" \u2014 "),CK=a("a"),d$r=o("TFDistilBertForMultipleChoice"),c$r=o(" (DistilBERT model)"),f$r=l(),$E=a("li"),r4e=a("strong"),m$r=o("electra"),g$r=o(" \u2014 "),wK=a("a"),h$r=o("TFElectraForMultipleChoice"),p$r=o(" (ELECTRA model)"),_$r=l(),kE=a("li"),t4e=a("strong"),u$r=o("flaubert"),b$r=o(" \u2014 "),AK=a("a"),v$r=o("TFFlaubertForMultipleChoice"),F$r=o(" (FlauBERT model)"),T$r=l(),SE=a("li"),a4e=a("strong"),M$r=o("funnel"),E$r=o(" \u2014 "),LK=a("a"),C$r=o("TFFunnelForMultipleChoice"),w$r=o(" (Funnel Transformer model)"),A$r=l(),RE=a("li"),n4e=a("strong"),L$r=o("longformer"),y$r=o(" \u2014 "),yK=a("a"),x$r=o("TFLongformerForMultipleChoice"),$$r=o(" (Longformer model)"),k$r=l(),PE=a("li"),s4e=a("strong"),S$r=o("mobilebert"),R$r=o(" \u2014 "),xK=a("a"),P$r=o("TFMobileBertForMultipleChoice"),B$r=o(" (MobileBERT model)"),I$r=l(),BE=a("li"),l4e=a("strong"),N$r=o("mpnet"),q$r=o(" \u2014 "),$K=a("a"),j$r=o("TFMPNetForMultipleChoice"),D$r=o(" (MPNet model)"),G$r=l(),IE=a("li"),i4e=a("strong"),O$r=o("rembert"),V$r=o(" \u2014 "),kK=a("a"),X$r=o("TFRemBertForMultipleChoice"),z$r=o(" (RemBERT model)"),Q$r=l(),NE=a("li"),d4e=a("strong"),W$r=o("roberta"),H$r=o(" \u2014 "),SK=a("a"),U$r=o("TFRobertaForMultipleChoice"),J$r=o(" (RoBERTa model)"),Y$r=l(),qE=a("li"),c4e=a("strong"),K$r=o("roformer"),Z$r=o(" \u2014 "),RK=a("a"),ekr=o("TFRoFormerForMultipleChoice"),okr=o(" (RoFormer model)"),rkr=l(),jE=a("li"),f4e=a("strong"),tkr=o("xlm"),akr=o(" \u2014 "),PK=a("a"),nkr=o("TFXLMForMultipleChoice"),skr=o(" (XLM model)"),lkr=l(),DE=a("li"),m4e=a("strong"),ikr=o("xlm-roberta"),dkr=o(" \u2014 "),BK=a("a"),ckr=o("TFXLMRobertaForMultipleChoice"),fkr=o(" (XLM-RoBERTa model)"),mkr=l(),GE=a("li"),g4e=a("strong"),gkr=o("xlnet"),hkr=o(" \u2014 "),IK=a("a"),pkr=o("TFXLNetForMultipleChoice"),_kr=o(" (XLNet model)"),ukr=l(),F(OE.$$.fragment),Fze=l(),$c=a("h2"),VE=a("a"),h4e=a("span"),F($x.$$.fragment),bkr=l(),p4e=a("span"),vkr=o("TFAutoModelForNextSentencePrediction"),Tze=l(),dr=a("div"),F(kx.$$.fragment),Fkr=l(),kc=a("p"),Tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NK=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" class method or the "),qK=a("a"),Ckr=o("from_config()"),wkr=o(` class
method.`),Akr=l(),Sx=a("p"),Lkr=o("This class cannot be instantiated directly using "),_4e=a("code"),ykr=o("__init__()"),xkr=o(" (throws an error)."),$kr=l(),Gt=a("div"),F(Rx.$$.fragment),kkr=l(),u4e=a("p"),Skr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rkr=l(),Sc=a("p"),Pkr=o(`Note:
Loading a model from its configuration file does `),b4e=a("strong"),Bkr=o("not"),Ikr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),Nkr=o("from_pretrained()"),qkr=o(" to load the model weights."),jkr=l(),F(XE.$$.fragment),Dkr=l(),Nr=a("div"),F(Px.$$.fragment),Gkr=l(),v4e=a("p"),Okr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vkr=l(),pn=a("p"),Xkr=o("The model class to instantiate is selected based on the "),F4e=a("code"),zkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),T4e=a("code"),Wkr=o("pretrained_model_name_or_path"),Hkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(":"),Ykr=l(),Bx=a("ul"),zE=a("li"),E4e=a("strong"),Kkr=o("bert"),Zkr=o(" \u2014 "),DK=a("a"),eSr=o("TFBertForNextSentencePrediction"),oSr=o(" (BERT model)"),rSr=l(),QE=a("li"),C4e=a("strong"),tSr=o("mobilebert"),aSr=o(" \u2014 "),GK=a("a"),nSr=o("TFMobileBertForNextSentencePrediction"),sSr=o(" (MobileBERT model)"),lSr=l(),F(WE.$$.fragment),Mze=l(),Rc=a("h2"),HE=a("a"),w4e=a("span"),F(Ix.$$.fragment),iSr=l(),A4e=a("span"),dSr=o("TFAutoModelForTableQuestionAnswering"),Eze=l(),cr=a("div"),F(Nx.$$.fragment),cSr=l(),Pc=a("p"),fSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OK=a("a"),mSr=o("from_pretrained()"),gSr=o(" class method or the "),VK=a("a"),hSr=o("from_config()"),pSr=o(` class
method.`),_Sr=l(),qx=a("p"),uSr=o("This class cannot be instantiated directly using "),L4e=a("code"),bSr=o("__init__()"),vSr=o(" (throws an error)."),FSr=l(),Ot=a("div"),F(jx.$$.fragment),TSr=l(),y4e=a("p"),MSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ESr=l(),Bc=a("p"),CSr=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),wSr=o("not"),ASr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),LSr=o("from_pretrained()"),ySr=o(" to load the model weights."),xSr=l(),F(UE.$$.fragment),$Sr=l(),qr=a("div"),F(Dx.$$.fragment),kSr=l(),$4e=a("p"),SSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RSr=l(),_n=a("p"),PSr=o("The model class to instantiate is selected based on the "),k4e=a("code"),BSr=o("model_type"),ISr=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),NSr=o("pretrained_model_name_or_path"),qSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),jSr=o("pretrained_model_name_or_path"),DSr=o(":"),GSr=l(),P4e=a("ul"),JE=a("li"),B4e=a("strong"),OSr=o("tapas"),VSr=o(" \u2014 "),zK=a("a"),XSr=o("TFTapasForQuestionAnswering"),zSr=o(" (TAPAS model)"),QSr=l(),F(YE.$$.fragment),Cze=l(),Ic=a("h2"),KE=a("a"),I4e=a("span"),F(Gx.$$.fragment),WSr=l(),N4e=a("span"),HSr=o("TFAutoModelForTokenClassification"),wze=l(),fr=a("div"),F(Ox.$$.fragment),USr=l(),Nc=a("p"),JSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=a("a"),YSr=o("from_pretrained()"),KSr=o(" class method or the "),WK=a("a"),ZSr=o("from_config()"),eRr=o(` class
method.`),oRr=l(),Vx=a("p"),rRr=o("This class cannot be instantiated directly using "),q4e=a("code"),tRr=o("__init__()"),aRr=o(" (throws an error)."),nRr=l(),Vt=a("div"),F(Xx.$$.fragment),sRr=l(),j4e=a("p"),lRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iRr=l(),qc=a("p"),dRr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),cRr=o("not"),fRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),mRr=o("from_pretrained()"),gRr=o(" to load the model weights."),hRr=l(),F(ZE.$$.fragment),pRr=l(),jr=a("div"),F(zx.$$.fragment),_Rr=l(),G4e=a("p"),uRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bRr=l(),un=a("p"),vRr=o("The model class to instantiate is selected based on the "),O4e=a("code"),FRr=o("model_type"),TRr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),CRr=o("pretrained_model_name_or_path"),wRr=o(":"),ARr=l(),de=a("ul"),eC=a("li"),z4e=a("strong"),LRr=o("albert"),yRr=o(" \u2014 "),UK=a("a"),xRr=o("TFAlbertForTokenClassification"),$Rr=o(" (ALBERT model)"),kRr=l(),oC=a("li"),Q4e=a("strong"),SRr=o("bert"),RRr=o(" \u2014 "),JK=a("a"),PRr=o("TFBertForTokenClassification"),BRr=o(" (BERT model)"),IRr=l(),rC=a("li"),W4e=a("strong"),NRr=o("camembert"),qRr=o(" \u2014 "),YK=a("a"),jRr=o("TFCamembertForTokenClassification"),DRr=o(" (CamemBERT model)"),GRr=l(),tC=a("li"),H4e=a("strong"),ORr=o("convbert"),VRr=o(" \u2014 "),KK=a("a"),XRr=o("TFConvBertForTokenClassification"),zRr=o(" (ConvBERT model)"),QRr=l(),aC=a("li"),U4e=a("strong"),WRr=o("deberta"),HRr=o(" \u2014 "),ZK=a("a"),URr=o("TFDebertaForTokenClassification"),JRr=o(" (DeBERTa model)"),YRr=l(),nC=a("li"),J4e=a("strong"),KRr=o("deberta-v2"),ZRr=o(" \u2014 "),eZ=a("a"),ePr=o("TFDebertaV2ForTokenClassification"),oPr=o(" (DeBERTa-v2 model)"),rPr=l(),sC=a("li"),Y4e=a("strong"),tPr=o("distilbert"),aPr=o(" \u2014 "),oZ=a("a"),nPr=o("TFDistilBertForTokenClassification"),sPr=o(" (DistilBERT model)"),lPr=l(),lC=a("li"),K4e=a("strong"),iPr=o("electra"),dPr=o(" \u2014 "),rZ=a("a"),cPr=o("TFElectraForTokenClassification"),fPr=o(" (ELECTRA model)"),mPr=l(),iC=a("li"),Z4e=a("strong"),gPr=o("flaubert"),hPr=o(" \u2014 "),tZ=a("a"),pPr=o("TFFlaubertForTokenClassification"),_Pr=o(" (FlauBERT model)"),uPr=l(),dC=a("li"),eEe=a("strong"),bPr=o("funnel"),vPr=o(" \u2014 "),aZ=a("a"),FPr=o("TFFunnelForTokenClassification"),TPr=o(" (Funnel Transformer model)"),MPr=l(),cC=a("li"),oEe=a("strong"),EPr=o("layoutlm"),CPr=o(" \u2014 "),nZ=a("a"),wPr=o("TFLayoutLMForTokenClassification"),APr=o(" (LayoutLM model)"),LPr=l(),fC=a("li"),rEe=a("strong"),yPr=o("longformer"),xPr=o(" \u2014 "),sZ=a("a"),$Pr=o("TFLongformerForTokenClassification"),kPr=o(" (Longformer model)"),SPr=l(),mC=a("li"),tEe=a("strong"),RPr=o("mobilebert"),PPr=o(" \u2014 "),lZ=a("a"),BPr=o("TFMobileBertForTokenClassification"),IPr=o(" (MobileBERT model)"),NPr=l(),gC=a("li"),aEe=a("strong"),qPr=o("mpnet"),jPr=o(" \u2014 "),iZ=a("a"),DPr=o("TFMPNetForTokenClassification"),GPr=o(" (MPNet model)"),OPr=l(),hC=a("li"),nEe=a("strong"),VPr=o("rembert"),XPr=o(" \u2014 "),dZ=a("a"),zPr=o("TFRemBertForTokenClassification"),QPr=o(" (RemBERT model)"),WPr=l(),pC=a("li"),sEe=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),cZ=a("a"),JPr=o("TFRobertaForTokenClassification"),YPr=o(" (RoBERTa model)"),KPr=l(),_C=a("li"),lEe=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),fZ=a("a"),oBr=o("TFRoFormerForTokenClassification"),rBr=o(" (RoFormer model)"),tBr=l(),uC=a("li"),iEe=a("strong"),aBr=o("xlm"),nBr=o(" \u2014 "),mZ=a("a"),sBr=o("TFXLMForTokenClassification"),lBr=o(" (XLM model)"),iBr=l(),bC=a("li"),dEe=a("strong"),dBr=o("xlm-roberta"),cBr=o(" \u2014 "),gZ=a("a"),fBr=o("TFXLMRobertaForTokenClassification"),mBr=o(" (XLM-RoBERTa model)"),gBr=l(),vC=a("li"),cEe=a("strong"),hBr=o("xlnet"),pBr=o(" \u2014 "),hZ=a("a"),_Br=o("TFXLNetForTokenClassification"),uBr=o(" (XLNet model)"),bBr=l(),F(FC.$$.fragment),Aze=l(),jc=a("h2"),TC=a("a"),fEe=a("span"),F(Qx.$$.fragment),vBr=l(),mEe=a("span"),FBr=o("TFAutoModelForQuestionAnswering"),Lze=l(),mr=a("div"),F(Wx.$$.fragment),TBr=l(),Dc=a("p"),MBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pZ=a("a"),EBr=o("from_pretrained()"),CBr=o(" class method or the "),_Z=a("a"),wBr=o("from_config()"),ABr=o(` class
method.`),LBr=l(),Hx=a("p"),yBr=o("This class cannot be instantiated directly using "),gEe=a("code"),xBr=o("__init__()"),$Br=o(" (throws an error)."),kBr=l(),Xt=a("div"),F(Ux.$$.fragment),SBr=l(),hEe=a("p"),RBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PBr=l(),Gc=a("p"),BBr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),IBr=o("not"),NBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),qBr=o("from_pretrained()"),jBr=o(" to load the model weights."),DBr=l(),F(MC.$$.fragment),GBr=l(),Dr=a("div"),F(Jx.$$.fragment),OBr=l(),_Ee=a("p"),VBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XBr=l(),bn=a("p"),zBr=o("The model class to instantiate is selected based on the "),uEe=a("code"),QBr=o("model_type"),WBr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),HBr=o("pretrained_model_name_or_path"),UBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),JBr=o("pretrained_model_name_or_path"),YBr=o(":"),KBr=l(),ce=a("ul"),EC=a("li"),FEe=a("strong"),ZBr=o("albert"),eIr=o(" \u2014 "),bZ=a("a"),oIr=o("TFAlbertForQuestionAnswering"),rIr=o(" (ALBERT model)"),tIr=l(),CC=a("li"),TEe=a("strong"),aIr=o("bert"),nIr=o(" \u2014 "),vZ=a("a"),sIr=o("TFBertForQuestionAnswering"),lIr=o(" (BERT model)"),iIr=l(),wC=a("li"),MEe=a("strong"),dIr=o("camembert"),cIr=o(" \u2014 "),FZ=a("a"),fIr=o("TFCamembertForQuestionAnswering"),mIr=o(" (CamemBERT model)"),gIr=l(),AC=a("li"),EEe=a("strong"),hIr=o("convbert"),pIr=o(" \u2014 "),TZ=a("a"),_Ir=o("TFConvBertForQuestionAnswering"),uIr=o(" (ConvBERT model)"),bIr=l(),LC=a("li"),CEe=a("strong"),vIr=o("deberta"),FIr=o(" \u2014 "),MZ=a("a"),TIr=o("TFDebertaForQuestionAnswering"),MIr=o(" (DeBERTa model)"),EIr=l(),yC=a("li"),wEe=a("strong"),CIr=o("deberta-v2"),wIr=o(" \u2014 "),EZ=a("a"),AIr=o("TFDebertaV2ForQuestionAnswering"),LIr=o(" (DeBERTa-v2 model)"),yIr=l(),xC=a("li"),AEe=a("strong"),xIr=o("distilbert"),$Ir=o(" \u2014 "),CZ=a("a"),kIr=o("TFDistilBertForQuestionAnswering"),SIr=o(" (DistilBERT model)"),RIr=l(),$C=a("li"),LEe=a("strong"),PIr=o("electra"),BIr=o(" \u2014 "),wZ=a("a"),IIr=o("TFElectraForQuestionAnswering"),NIr=o(" (ELECTRA model)"),qIr=l(),kC=a("li"),yEe=a("strong"),jIr=o("flaubert"),DIr=o(" \u2014 "),AZ=a("a"),GIr=o("TFFlaubertForQuestionAnsweringSimple"),OIr=o(" (FlauBERT model)"),VIr=l(),SC=a("li"),xEe=a("strong"),XIr=o("funnel"),zIr=o(" \u2014 "),LZ=a("a"),QIr=o("TFFunnelForQuestionAnswering"),WIr=o(" (Funnel Transformer model)"),HIr=l(),RC=a("li"),$Ee=a("strong"),UIr=o("gptj"),JIr=o(" \u2014 "),yZ=a("a"),YIr=o("TFGPTJForQuestionAnswering"),KIr=o(" (GPT-J model)"),ZIr=l(),PC=a("li"),kEe=a("strong"),eNr=o("longformer"),oNr=o(" \u2014 "),xZ=a("a"),rNr=o("TFLongformerForQuestionAnswering"),tNr=o(" (Longformer model)"),aNr=l(),BC=a("li"),SEe=a("strong"),nNr=o("mobilebert"),sNr=o(" \u2014 "),$Z=a("a"),lNr=o("TFMobileBertForQuestionAnswering"),iNr=o(" (MobileBERT model)"),dNr=l(),IC=a("li"),REe=a("strong"),cNr=o("mpnet"),fNr=o(" \u2014 "),kZ=a("a"),mNr=o("TFMPNetForQuestionAnswering"),gNr=o(" (MPNet model)"),hNr=l(),NC=a("li"),PEe=a("strong"),pNr=o("rembert"),_Nr=o(" \u2014 "),SZ=a("a"),uNr=o("TFRemBertForQuestionAnswering"),bNr=o(" (RemBERT model)"),vNr=l(),qC=a("li"),BEe=a("strong"),FNr=o("roberta"),TNr=o(" \u2014 "),RZ=a("a"),MNr=o("TFRobertaForQuestionAnswering"),ENr=o(" (RoBERTa model)"),CNr=l(),jC=a("li"),IEe=a("strong"),wNr=o("roformer"),ANr=o(" \u2014 "),PZ=a("a"),LNr=o("TFRoFormerForQuestionAnswering"),yNr=o(" (RoFormer model)"),xNr=l(),DC=a("li"),NEe=a("strong"),$Nr=o("xlm"),kNr=o(" \u2014 "),BZ=a("a"),SNr=o("TFXLMForQuestionAnsweringSimple"),RNr=o(" (XLM model)"),PNr=l(),GC=a("li"),qEe=a("strong"),BNr=o("xlm-roberta"),INr=o(" \u2014 "),IZ=a("a"),NNr=o("TFXLMRobertaForQuestionAnswering"),qNr=o(" (XLM-RoBERTa model)"),jNr=l(),OC=a("li"),jEe=a("strong"),DNr=o("xlnet"),GNr=o(" \u2014 "),NZ=a("a"),ONr=o("TFXLNetForQuestionAnsweringSimple"),VNr=o(" (XLNet model)"),XNr=l(),F(VC.$$.fragment),yze=l(),Oc=a("h2"),XC=a("a"),DEe=a("span"),F(Yx.$$.fragment),zNr=l(),GEe=a("span"),QNr=o("TFAutoModelForVision2Seq"),xze=l(),gr=a("div"),F(Kx.$$.fragment),WNr=l(),Vc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),jZ=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),Zx=a("p"),eqr=o("This class cannot be instantiated directly using "),OEe=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),zt=a("div"),F(e$.$$.fragment),aqr=l(),VEe=a("p"),nqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sqr=l(),Xc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(zC.$$.fragment),gqr=l(),Gr=a("div"),F(o$.$$.fragment),hqr=l(),zEe=a("p"),pqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_qr=l(),vn=a("p"),uqr=o("The model class to instantiate is selected based on the "),QEe=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),UEe=a("ul"),QC=a("li"),JEe=a("strong"),wqr=o("vision-encoder-decoder"),Aqr=o(" \u2014 "),GZ=a("a"),Lqr=o("TFVisionEncoderDecoderModel"),yqr=o(" (Vision Encoder decoder model)"),xqr=l(),F(WC.$$.fragment),$ze=l(),zc=a("h2"),HC=a("a"),YEe=a("span"),F(r$.$$.fragment),$qr=l(),KEe=a("span"),kqr=o("TFAutoModelForSpeechSeq2Seq"),kze=l(),hr=a("div"),F(t$.$$.fragment),Sqr=l(),Qc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OZ=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),VZ=a("a"),Iqr=o("from_config()"),Nqr=o(` class
method.`),qqr=l(),a$=a("p"),jqr=o("This class cannot be instantiated directly using "),ZEe=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),Qt=a("div"),F(n$.$$.fragment),Vqr=l(),eCe=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zqr=l(),Wc=a("p"),Qqr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),Wqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(UC.$$.fragment),Kqr=l(),Or=a("div"),F(s$.$$.fragment),Zqr=l(),rCe=a("p"),ejr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ojr=l(),Fn=a("p"),rjr=o("The model class to instantiate is selected based on the "),tCe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),sCe=a("ul"),JC=a("li"),lCe=a("strong"),cjr=o("speech_to_text"),fjr=o(" \u2014 "),zZ=a("a"),mjr=o("TFSpeech2TextForConditionalGeneration"),gjr=o(" (Speech2Text model)"),hjr=l(),F(YC.$$.fragment),Sze=l(),Hc=a("h2"),KC=a("a"),iCe=a("span"),F(l$.$$.fragment),pjr=l(),dCe=a("span"),_jr=o("FlaxAutoModel"),Rze=l(),pr=a("div"),F(i$.$$.fragment),ujr=l(),Uc=a("p"),bjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QZ=a("a"),vjr=o("from_pretrained()"),Fjr=o(" class method or the "),WZ=a("a"),Tjr=o("from_config()"),Mjr=o(` class
method.`),Ejr=l(),d$=a("p"),Cjr=o("This class cannot be instantiated directly using "),cCe=a("code"),wjr=o("__init__()"),Ajr=o(" (throws an error)."),Ljr=l(),Wt=a("div"),F(c$.$$.fragment),yjr=l(),fCe=a("p"),xjr=o("Instantiates one of the base model classes of the library from a configuration."),$jr=l(),Jc=a("p"),kjr=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),Sjr=o("not"),Rjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" to load the model weights."),Ijr=l(),F(ZC.$$.fragment),Njr=l(),Vr=a("div"),F(f$.$$.fragment),qjr=l(),gCe=a("p"),jjr=o("Instantiate one of the base model classes of the library from a pretrained model."),Djr=l(),Tn=a("p"),Gjr=o("The model class to instantiate is selected based on the "),hCe=a("code"),Ojr=o("model_type"),Vjr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),Qjr=o("pretrained_model_name_or_path"),Wjr=o(":"),Hjr=l(),oe=a("ul"),e3=a("li"),uCe=a("strong"),Ujr=o("albert"),Jjr=o(" \u2014 "),UZ=a("a"),Yjr=o("FlaxAlbertModel"),Kjr=o(" (ALBERT model)"),Zjr=l(),o3=a("li"),bCe=a("strong"),eDr=o("bart"),oDr=o(" \u2014 "),JZ=a("a"),rDr=o("FlaxBartModel"),tDr=o(" (BART model)"),aDr=l(),r3=a("li"),vCe=a("strong"),nDr=o("beit"),sDr=o(" \u2014 "),YZ=a("a"),lDr=o("FlaxBeitModel"),iDr=o(" (BEiT model)"),dDr=l(),t3=a("li"),FCe=a("strong"),cDr=o("bert"),fDr=o(" \u2014 "),KZ=a("a"),mDr=o("FlaxBertModel"),gDr=o(" (BERT model)"),hDr=l(),a3=a("li"),TCe=a("strong"),pDr=o("big_bird"),_Dr=o(" \u2014 "),ZZ=a("a"),uDr=o("FlaxBigBirdModel"),bDr=o(" (BigBird model)"),vDr=l(),n3=a("li"),MCe=a("strong"),FDr=o("blenderbot"),TDr=o(" \u2014 "),eee=a("a"),MDr=o("FlaxBlenderbotModel"),EDr=o(" (Blenderbot model)"),CDr=l(),s3=a("li"),ECe=a("strong"),wDr=o("blenderbot-small"),ADr=o(" \u2014 "),oee=a("a"),LDr=o("FlaxBlenderbotSmallModel"),yDr=o(" (BlenderbotSmall model)"),xDr=l(),l3=a("li"),CCe=a("strong"),$Dr=o("clip"),kDr=o(" \u2014 "),ree=a("a"),SDr=o("FlaxCLIPModel"),RDr=o(" (CLIP model)"),PDr=l(),i3=a("li"),wCe=a("strong"),BDr=o("distilbert"),IDr=o(" \u2014 "),tee=a("a"),NDr=o("FlaxDistilBertModel"),qDr=o(" (DistilBERT model)"),jDr=l(),d3=a("li"),ACe=a("strong"),DDr=o("electra"),GDr=o(" \u2014 "),aee=a("a"),ODr=o("FlaxElectraModel"),VDr=o(" (ELECTRA model)"),XDr=l(),c3=a("li"),LCe=a("strong"),zDr=o("gpt2"),QDr=o(" \u2014 "),nee=a("a"),WDr=o("FlaxGPT2Model"),HDr=o(" (OpenAI GPT-2 model)"),UDr=l(),f3=a("li"),yCe=a("strong"),JDr=o("gpt_neo"),YDr=o(" \u2014 "),see=a("a"),KDr=o("FlaxGPTNeoModel"),ZDr=o(" (GPT Neo model)"),eGr=l(),m3=a("li"),xCe=a("strong"),oGr=o("gptj"),rGr=o(" \u2014 "),lee=a("a"),tGr=o("FlaxGPTJModel"),aGr=o(" (GPT-J model)"),nGr=l(),g3=a("li"),$Ce=a("strong"),sGr=o("longt5"),lGr=o(" \u2014 "),iee=a("a"),iGr=o("FlaxLongT5Model"),dGr=o(" (LongT5 model)"),cGr=l(),h3=a("li"),kCe=a("strong"),fGr=o("marian"),mGr=o(" \u2014 "),dee=a("a"),gGr=o("FlaxMarianModel"),hGr=o(" (Marian model)"),pGr=l(),p3=a("li"),SCe=a("strong"),_Gr=o("mbart"),uGr=o(" \u2014 "),cee=a("a"),bGr=o("FlaxMBartModel"),vGr=o(" (mBART model)"),FGr=l(),_3=a("li"),RCe=a("strong"),TGr=o("mt5"),MGr=o(" \u2014 "),fee=a("a"),EGr=o("FlaxMT5Model"),CGr=o(" (MT5 model)"),wGr=l(),u3=a("li"),PCe=a("strong"),AGr=o("opt"),LGr=o(" \u2014 "),mee=a("a"),yGr=o("FlaxOPTModel"),xGr=o(" (OPT model)"),$Gr=l(),b3=a("li"),BCe=a("strong"),kGr=o("pegasus"),SGr=o(" \u2014 "),gee=a("a"),RGr=o("FlaxPegasusModel"),PGr=o(" (Pegasus model)"),BGr=l(),v3=a("li"),ICe=a("strong"),IGr=o("roberta"),NGr=o(" \u2014 "),hee=a("a"),qGr=o("FlaxRobertaModel"),jGr=o(" (RoBERTa model)"),DGr=l(),F3=a("li"),NCe=a("strong"),GGr=o("roformer"),OGr=o(" \u2014 "),pee=a("a"),VGr=o("FlaxRoFormerModel"),XGr=o(" (RoFormer model)"),zGr=l(),T3=a("li"),qCe=a("strong"),QGr=o("t5"),WGr=o(" \u2014 "),_ee=a("a"),HGr=o("FlaxT5Model"),UGr=o(" (T5 model)"),JGr=l(),M3=a("li"),jCe=a("strong"),YGr=o("vision-text-dual-encoder"),KGr=o(" \u2014 "),uee=a("a"),ZGr=o("FlaxVisionTextDualEncoderModel"),eOr=o(" (VisionTextDualEncoder model)"),oOr=l(),E3=a("li"),DCe=a("strong"),rOr=o("vit"),tOr=o(" \u2014 "),bee=a("a"),aOr=o("FlaxViTModel"),nOr=o(" (ViT model)"),sOr=l(),C3=a("li"),GCe=a("strong"),lOr=o("wav2vec2"),iOr=o(" \u2014 "),vee=a("a"),dOr=o("FlaxWav2Vec2Model"),cOr=o(" (Wav2Vec2 model)"),fOr=l(),w3=a("li"),OCe=a("strong"),mOr=o("xglm"),gOr=o(" \u2014 "),Fee=a("a"),hOr=o("FlaxXGLMModel"),pOr=o(" (XGLM model)"),_Or=l(),A3=a("li"),VCe=a("strong"),uOr=o("xlm-roberta"),bOr=o(" \u2014 "),Tee=a("a"),vOr=o("FlaxXLMRobertaModel"),FOr=o(" (XLM-RoBERTa model)"),TOr=l(),F(L3.$$.fragment),Pze=l(),Yc=a("h2"),y3=a("a"),XCe=a("span"),F(m$.$$.fragment),MOr=l(),zCe=a("span"),EOr=o("FlaxAutoModelForCausalLM"),Bze=l(),_r=a("div"),F(g$.$$.fragment),COr=l(),Kc=a("p"),wOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mee=a("a"),AOr=o("from_pretrained()"),LOr=o(" class method or the "),Eee=a("a"),yOr=o("from_config()"),xOr=o(` class
method.`),$Or=l(),h$=a("p"),kOr=o("This class cannot be instantiated directly using "),QCe=a("code"),SOr=o("__init__()"),ROr=o(" (throws an error)."),POr=l(),Ht=a("div"),F(p$.$$.fragment),BOr=l(),WCe=a("p"),IOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NOr=l(),Zc=a("p"),qOr=o(`Note:
Loading a model from its configuration file does `),HCe=a("strong"),jOr=o("not"),DOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),GOr=o("from_pretrained()"),OOr=o(" to load the model weights."),VOr=l(),F(x3.$$.fragment),XOr=l(),Xr=a("div"),F(_$.$$.fragment),zOr=l(),UCe=a("p"),QOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WOr=l(),Mn=a("p"),HOr=o("The model class to instantiate is selected based on the "),JCe=a("code"),UOr=o("model_type"),JOr=o(` property of the config object (either
passed as an argument or loaded from `),YCe=a("code"),YOr=o("pretrained_model_name_or_path"),KOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=a("code"),ZOr=o("pretrained_model_name_or_path"),eVr=o(":"),oVr=l(),xe=a("ul"),$3=a("li"),ZCe=a("strong"),rVr=o("bart"),tVr=o(" \u2014 "),wee=a("a"),aVr=o("FlaxBartForCausalLM"),nVr=o(" (BART model)"),sVr=l(),k3=a("li"),e3e=a("strong"),lVr=o("bert"),iVr=o(" \u2014 "),Aee=a("a"),dVr=o("FlaxBertForCausalLM"),cVr=o(" (BERT model)"),fVr=l(),S3=a("li"),o3e=a("strong"),mVr=o("big_bird"),gVr=o(" \u2014 "),Lee=a("a"),hVr=o("FlaxBigBirdForCausalLM"),pVr=o(" (BigBird model)"),_Vr=l(),R3=a("li"),r3e=a("strong"),uVr=o("electra"),bVr=o(" \u2014 "),yee=a("a"),vVr=o("FlaxElectraForCausalLM"),FVr=o(" (ELECTRA model)"),TVr=l(),P3=a("li"),t3e=a("strong"),MVr=o("gpt2"),EVr=o(" \u2014 "),xee=a("a"),CVr=o("FlaxGPT2LMHeadModel"),wVr=o(" (OpenAI GPT-2 model)"),AVr=l(),B3=a("li"),a3e=a("strong"),LVr=o("gpt_neo"),yVr=o(" \u2014 "),$ee=a("a"),xVr=o("FlaxGPTNeoForCausalLM"),$Vr=o(" (GPT Neo model)"),kVr=l(),I3=a("li"),n3e=a("strong"),SVr=o("gptj"),RVr=o(" \u2014 "),kee=a("a"),PVr=o("FlaxGPTJForCausalLM"),BVr=o(" (GPT-J model)"),IVr=l(),N3=a("li"),s3e=a("strong"),NVr=o("opt"),qVr=o(" \u2014 "),See=a("a"),jVr=o("FlaxOPTForCausalLM"),DVr=o(" (OPT model)"),GVr=l(),q3=a("li"),l3e=a("strong"),OVr=o("roberta"),VVr=o(" \u2014 "),Ree=a("a"),XVr=o("FlaxRobertaForCausalLM"),zVr=o(" (RoBERTa model)"),QVr=l(),j3=a("li"),i3e=a("strong"),WVr=o("xglm"),HVr=o(" \u2014 "),Pee=a("a"),UVr=o("FlaxXGLMForCausalLM"),JVr=o(" (XGLM model)"),YVr=l(),F(D3.$$.fragment),Ize=l(),ef=a("h2"),G3=a("a"),d3e=a("span"),F(u$.$$.fragment),KVr=l(),c3e=a("span"),ZVr=o("FlaxAutoModelForPreTraining"),Nze=l(),ur=a("div"),F(b$.$$.fragment),eXr=l(),of=a("p"),oXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bee=a("a"),rXr=o("from_pretrained()"),tXr=o(" class method or the "),Iee=a("a"),aXr=o("from_config()"),nXr=o(` class
method.`),sXr=l(),v$=a("p"),lXr=o("This class cannot be instantiated directly using "),f3e=a("code"),iXr=o("__init__()"),dXr=o(" (throws an error)."),cXr=l(),Ut=a("div"),F(F$.$$.fragment),fXr=l(),m3e=a("p"),mXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gXr=l(),rf=a("p"),hXr=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),pXr=o("not"),_Xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=a("a"),uXr=o("from_pretrained()"),bXr=o(" to load the model weights."),vXr=l(),F(O3.$$.fragment),FXr=l(),zr=a("div"),F(T$.$$.fragment),TXr=l(),h3e=a("p"),MXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EXr=l(),En=a("p"),CXr=o("The model class to instantiate is selected based on the "),p3e=a("code"),wXr=o("model_type"),AXr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),LXr=o("pretrained_model_name_or_path"),yXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),xXr=o("pretrained_model_name_or_path"),$Xr=o(":"),kXr=l(),Ee=a("ul"),V3=a("li"),b3e=a("strong"),SXr=o("albert"),RXr=o(" \u2014 "),qee=a("a"),PXr=o("FlaxAlbertForPreTraining"),BXr=o(" (ALBERT model)"),IXr=l(),X3=a("li"),v3e=a("strong"),NXr=o("bart"),qXr=o(" \u2014 "),jee=a("a"),jXr=o("FlaxBartForConditionalGeneration"),DXr=o(" (BART model)"),GXr=l(),z3=a("li"),F3e=a("strong"),OXr=o("bert"),VXr=o(" \u2014 "),Dee=a("a"),XXr=o("FlaxBertForPreTraining"),zXr=o(" (BERT model)"),QXr=l(),Q3=a("li"),T3e=a("strong"),WXr=o("big_bird"),HXr=o(" \u2014 "),Gee=a("a"),UXr=o("FlaxBigBirdForPreTraining"),JXr=o(" (BigBird model)"),YXr=l(),W3=a("li"),M3e=a("strong"),KXr=o("electra"),ZXr=o(" \u2014 "),Oee=a("a"),ezr=o("FlaxElectraForPreTraining"),ozr=o(" (ELECTRA model)"),rzr=l(),H3=a("li"),E3e=a("strong"),tzr=o("longt5"),azr=o(" \u2014 "),Vee=a("a"),nzr=o("FlaxLongT5ForConditionalGeneration"),szr=o(" (LongT5 model)"),lzr=l(),U3=a("li"),C3e=a("strong"),izr=o("mbart"),dzr=o(" \u2014 "),Xee=a("a"),czr=o("FlaxMBartForConditionalGeneration"),fzr=o(" (mBART model)"),mzr=l(),J3=a("li"),w3e=a("strong"),gzr=o("mt5"),hzr=o(" \u2014 "),zee=a("a"),pzr=o("FlaxMT5ForConditionalGeneration"),_zr=o(" (MT5 model)"),uzr=l(),Y3=a("li"),A3e=a("strong"),bzr=o("roberta"),vzr=o(" \u2014 "),Qee=a("a"),Fzr=o("FlaxRobertaForMaskedLM"),Tzr=o(" (RoBERTa model)"),Mzr=l(),K3=a("li"),L3e=a("strong"),Ezr=o("roformer"),Czr=o(" \u2014 "),Wee=a("a"),wzr=o("FlaxRoFormerForMaskedLM"),Azr=o(" (RoFormer model)"),Lzr=l(),Z3=a("li"),y3e=a("strong"),yzr=o("t5"),xzr=o(" \u2014 "),Hee=a("a"),$zr=o("FlaxT5ForConditionalGeneration"),kzr=o(" (T5 model)"),Szr=l(),e5=a("li"),x3e=a("strong"),Rzr=o("wav2vec2"),Pzr=o(" \u2014 "),Uee=a("a"),Bzr=o("FlaxWav2Vec2ForPreTraining"),Izr=o(" (Wav2Vec2 model)"),Nzr=l(),o5=a("li"),$3e=a("strong"),qzr=o("xlm-roberta"),jzr=o(" \u2014 "),Jee=a("a"),Dzr=o("FlaxXLMRobertaForMaskedLM"),Gzr=o(" (XLM-RoBERTa model)"),Ozr=l(),F(r5.$$.fragment),qze=l(),tf=a("h2"),t5=a("a"),k3e=a("span"),F(M$.$$.fragment),Vzr=l(),S3e=a("span"),Xzr=o("FlaxAutoModelForMaskedLM"),jze=l(),br=a("div"),F(E$.$$.fragment),zzr=l(),af=a("p"),Qzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yee=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" class method or the "),Kee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),C$=a("p"),Kzr=o("This class cannot be instantiated directly using "),R3e=a("code"),Zzr=o("__init__()"),eQr=o(" (throws an error)."),oQr=l(),Jt=a("div"),F(w$.$$.fragment),rQr=l(),P3e=a("p"),tQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aQr=l(),nf=a("p"),nQr=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),sQr=o("not"),lQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),iQr=o("from_pretrained()"),dQr=o(" to load the model weights."),cQr=l(),F(a5.$$.fragment),fQr=l(),Qr=a("div"),F(A$.$$.fragment),mQr=l(),I3e=a("p"),gQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hQr=l(),Cn=a("p"),pQr=o("The model class to instantiate is selected based on the "),N3e=a("code"),_Qr=o("model_type"),uQr=o(` property of the config object (either
passed as an argument or loaded from `),q3e=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(":"),MQr=l(),$e=a("ul"),n5=a("li"),D3e=a("strong"),EQr=o("albert"),CQr=o(" \u2014 "),eoe=a("a"),wQr=o("FlaxAlbertForMaskedLM"),AQr=o(" (ALBERT model)"),LQr=l(),s5=a("li"),G3e=a("strong"),yQr=o("bart"),xQr=o(" \u2014 "),ooe=a("a"),$Qr=o("FlaxBartForConditionalGeneration"),kQr=o(" (BART model)"),SQr=l(),l5=a("li"),O3e=a("strong"),RQr=o("bert"),PQr=o(" \u2014 "),roe=a("a"),BQr=o("FlaxBertForMaskedLM"),IQr=o(" (BERT model)"),NQr=l(),i5=a("li"),V3e=a("strong"),qQr=o("big_bird"),jQr=o(" \u2014 "),toe=a("a"),DQr=o("FlaxBigBirdForMaskedLM"),GQr=o(" (BigBird model)"),OQr=l(),d5=a("li"),X3e=a("strong"),VQr=o("distilbert"),XQr=o(" \u2014 "),aoe=a("a"),zQr=o("FlaxDistilBertForMaskedLM"),QQr=o(" (DistilBERT model)"),WQr=l(),c5=a("li"),z3e=a("strong"),HQr=o("electra"),UQr=o(" \u2014 "),noe=a("a"),JQr=o("FlaxElectraForMaskedLM"),YQr=o(" (ELECTRA model)"),KQr=l(),f5=a("li"),Q3e=a("strong"),ZQr=o("mbart"),eWr=o(" \u2014 "),soe=a("a"),oWr=o("FlaxMBartForConditionalGeneration"),rWr=o(" (mBART model)"),tWr=l(),m5=a("li"),W3e=a("strong"),aWr=o("roberta"),nWr=o(" \u2014 "),loe=a("a"),sWr=o("FlaxRobertaForMaskedLM"),lWr=o(" (RoBERTa model)"),iWr=l(),g5=a("li"),H3e=a("strong"),dWr=o("roformer"),cWr=o(" \u2014 "),ioe=a("a"),fWr=o("FlaxRoFormerForMaskedLM"),mWr=o(" (RoFormer model)"),gWr=l(),h5=a("li"),U3e=a("strong"),hWr=o("xlm-roberta"),pWr=o(" \u2014 "),doe=a("a"),_Wr=o("FlaxXLMRobertaForMaskedLM"),uWr=o(" (XLM-RoBERTa model)"),bWr=l(),F(p5.$$.fragment),Dze=l(),sf=a("h2"),_5=a("a"),J3e=a("span"),F(L$.$$.fragment),vWr=l(),Y3e=a("span"),FWr=o("FlaxAutoModelForSeq2SeqLM"),Gze=l(),vr=a("div"),F(y$.$$.fragment),TWr=l(),lf=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),coe=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),foe=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),x$=a("p"),yWr=o("This class cannot be instantiated directly using "),K3e=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Yt=a("div"),F($$.$$.fragment),SWr=l(),Z3e=a("p"),RWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PWr=l(),df=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(u5.$$.fragment),GWr=l(),Wr=a("div"),F(k$.$$.fragment),OWr=l(),o5e=a("p"),VWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XWr=l(),wn=a("p"),zWr=o("The model class to instantiate is selected based on the "),r5e=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),ke=a("ul"),b5=a("li"),n5e=a("strong"),ZWr=o("bart"),eHr=o(" \u2014 "),goe=a("a"),oHr=o("FlaxBartForConditionalGeneration"),rHr=o(" (BART model)"),tHr=l(),v5=a("li"),s5e=a("strong"),aHr=o("blenderbot"),nHr=o(" \u2014 "),hoe=a("a"),sHr=o("FlaxBlenderbotForConditionalGeneration"),lHr=o(" (Blenderbot model)"),iHr=l(),F5=a("li"),l5e=a("strong"),dHr=o("blenderbot-small"),cHr=o(" \u2014 "),poe=a("a"),fHr=o("FlaxBlenderbotSmallForConditionalGeneration"),mHr=o(" (BlenderbotSmall model)"),gHr=l(),T5=a("li"),i5e=a("strong"),hHr=o("encoder-decoder"),pHr=o(" \u2014 "),_oe=a("a"),_Hr=o("FlaxEncoderDecoderModel"),uHr=o(" (Encoder decoder model)"),bHr=l(),M5=a("li"),d5e=a("strong"),vHr=o("longt5"),FHr=o(" \u2014 "),uoe=a("a"),THr=o("FlaxLongT5ForConditionalGeneration"),MHr=o(" (LongT5 model)"),EHr=l(),E5=a("li"),c5e=a("strong"),CHr=o("marian"),wHr=o(" \u2014 "),boe=a("a"),AHr=o("FlaxMarianMTModel"),LHr=o(" (Marian model)"),yHr=l(),C5=a("li"),f5e=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),voe=a("a"),kHr=o("FlaxMBartForConditionalGeneration"),SHr=o(" (mBART model)"),RHr=l(),w5=a("li"),m5e=a("strong"),PHr=o("mt5"),BHr=o(" \u2014 "),Foe=a("a"),IHr=o("FlaxMT5ForConditionalGeneration"),NHr=o(" (MT5 model)"),qHr=l(),A5=a("li"),g5e=a("strong"),jHr=o("pegasus"),DHr=o(" \u2014 "),Toe=a("a"),GHr=o("FlaxPegasusForConditionalGeneration"),OHr=o(" (Pegasus model)"),VHr=l(),L5=a("li"),h5e=a("strong"),XHr=o("t5"),zHr=o(" \u2014 "),Moe=a("a"),QHr=o("FlaxT5ForConditionalGeneration"),WHr=o(" (T5 model)"),HHr=l(),F(y5.$$.fragment),Oze=l(),cf=a("h2"),x5=a("a"),p5e=a("span"),F(S$.$$.fragment),UHr=l(),_5e=a("span"),JHr=o("FlaxAutoModelForSequenceClassification"),Vze=l(),Fr=a("div"),F(R$.$$.fragment),YHr=l(),ff=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eoe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),Coe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),P$=a("p"),aUr=o("This class cannot be instantiated directly using "),u5e=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Kt=a("div"),F(B$.$$.fragment),iUr=l(),b5e=a("p"),dUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cUr=l(),mf=a("p"),fUr=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),mUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),hUr=o("from_pretrained()"),pUr=o(" to load the model weights."),_Ur=l(),F($5.$$.fragment),uUr=l(),Hr=a("div"),F(I$.$$.fragment),bUr=l(),F5e=a("p"),vUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FUr=l(),An=a("p"),TUr=o("The model class to instantiate is selected based on the "),T5e=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),Se=a("ul"),k5=a("li"),C5e=a("strong"),xUr=o("albert"),$Ur=o(" \u2014 "),Aoe=a("a"),kUr=o("FlaxAlbertForSequenceClassification"),SUr=o(" (ALBERT model)"),RUr=l(),S5=a("li"),w5e=a("strong"),PUr=o("bart"),BUr=o(" \u2014 "),Loe=a("a"),IUr=o("FlaxBartForSequenceClassification"),NUr=o(" (BART model)"),qUr=l(),R5=a("li"),A5e=a("strong"),jUr=o("bert"),DUr=o(" \u2014 "),yoe=a("a"),GUr=o("FlaxBertForSequenceClassification"),OUr=o(" (BERT model)"),VUr=l(),P5=a("li"),L5e=a("strong"),XUr=o("big_bird"),zUr=o(" \u2014 "),xoe=a("a"),QUr=o("FlaxBigBirdForSequenceClassification"),WUr=o(" (BigBird model)"),HUr=l(),B5=a("li"),y5e=a("strong"),UUr=o("distilbert"),JUr=o(" \u2014 "),$oe=a("a"),YUr=o("FlaxDistilBertForSequenceClassification"),KUr=o(" (DistilBERT model)"),ZUr=l(),I5=a("li"),x5e=a("strong"),eJr=o("electra"),oJr=o(" \u2014 "),koe=a("a"),rJr=o("FlaxElectraForSequenceClassification"),tJr=o(" (ELECTRA model)"),aJr=l(),N5=a("li"),$5e=a("strong"),nJr=o("mbart"),sJr=o(" \u2014 "),Soe=a("a"),lJr=o("FlaxMBartForSequenceClassification"),iJr=o(" (mBART model)"),dJr=l(),q5=a("li"),k5e=a("strong"),cJr=o("roberta"),fJr=o(" \u2014 "),Roe=a("a"),mJr=o("FlaxRobertaForSequenceClassification"),gJr=o(" (RoBERTa model)"),hJr=l(),j5=a("li"),S5e=a("strong"),pJr=o("roformer"),_Jr=o(" \u2014 "),Poe=a("a"),uJr=o("FlaxRoFormerForSequenceClassification"),bJr=o(" (RoFormer model)"),vJr=l(),D5=a("li"),R5e=a("strong"),FJr=o("xlm-roberta"),TJr=o(" \u2014 "),Boe=a("a"),MJr=o("FlaxXLMRobertaForSequenceClassification"),EJr=o(" (XLM-RoBERTa model)"),CJr=l(),F(G5.$$.fragment),Xze=l(),gf=a("h2"),O5=a("a"),P5e=a("span"),F(N$.$$.fragment),wJr=l(),B5e=a("span"),AJr=o("FlaxAutoModelForQuestionAnswering"),zze=l(),Tr=a("div"),F(q$.$$.fragment),LJr=l(),hf=a("p"),yJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ioe=a("a"),xJr=o("from_pretrained()"),$Jr=o(" class method or the "),Noe=a("a"),kJr=o("from_config()"),SJr=o(` class
method.`),RJr=l(),j$=a("p"),PJr=o("This class cannot be instantiated directly using "),I5e=a("code"),BJr=o("__init__()"),IJr=o(" (throws an error)."),NJr=l(),Zt=a("div"),F(D$.$$.fragment),qJr=l(),N5e=a("p"),jJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DJr=l(),pf=a("p"),GJr=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),OJr=o("not"),VJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=a("a"),XJr=o("from_pretrained()"),zJr=o(" to load the model weights."),QJr=l(),F(V5.$$.fragment),WJr=l(),Ur=a("div"),F(G$.$$.fragment),HJr=l(),j5e=a("p"),UJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JJr=l(),Ln=a("p"),YJr=o("The model class to instantiate is selected based on the "),D5e=a("code"),KJr=o("model_type"),ZJr=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),eYr=o("pretrained_model_name_or_path"),oYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=a("code"),rYr=o("pretrained_model_name_or_path"),tYr=o(":"),aYr=l(),Re=a("ul"),X5=a("li"),V5e=a("strong"),nYr=o("albert"),sYr=o(" \u2014 "),joe=a("a"),lYr=o("FlaxAlbertForQuestionAnswering"),iYr=o(" (ALBERT model)"),dYr=l(),z5=a("li"),X5e=a("strong"),cYr=o("bart"),fYr=o(" \u2014 "),Doe=a("a"),mYr=o("FlaxBartForQuestionAnswering"),gYr=o(" (BART model)"),hYr=l(),Q5=a("li"),z5e=a("strong"),pYr=o("bert"),_Yr=o(" \u2014 "),Goe=a("a"),uYr=o("FlaxBertForQuestionAnswering"),bYr=o(" (BERT model)"),vYr=l(),W5=a("li"),Q5e=a("strong"),FYr=o("big_bird"),TYr=o(" \u2014 "),Ooe=a("a"),MYr=o("FlaxBigBirdForQuestionAnswering"),EYr=o(" (BigBird model)"),CYr=l(),H5=a("li"),W5e=a("strong"),wYr=o("distilbert"),AYr=o(" \u2014 "),Voe=a("a"),LYr=o("FlaxDistilBertForQuestionAnswering"),yYr=o(" (DistilBERT model)"),xYr=l(),U5=a("li"),H5e=a("strong"),$Yr=o("electra"),kYr=o(" \u2014 "),Xoe=a("a"),SYr=o("FlaxElectraForQuestionAnswering"),RYr=o(" (ELECTRA model)"),PYr=l(),J5=a("li"),U5e=a("strong"),BYr=o("mbart"),IYr=o(" \u2014 "),zoe=a("a"),NYr=o("FlaxMBartForQuestionAnswering"),qYr=o(" (mBART model)"),jYr=l(),Y5=a("li"),J5e=a("strong"),DYr=o("roberta"),GYr=o(" \u2014 "),Qoe=a("a"),OYr=o("FlaxRobertaForQuestionAnswering"),VYr=o(" (RoBERTa model)"),XYr=l(),K5=a("li"),Y5e=a("strong"),zYr=o("roformer"),QYr=o(" \u2014 "),Woe=a("a"),WYr=o("FlaxRoFormerForQuestionAnswering"),HYr=o(" (RoFormer model)"),UYr=l(),Z5=a("li"),K5e=a("strong"),JYr=o("xlm-roberta"),YYr=o(" \u2014 "),Hoe=a("a"),KYr=o("FlaxXLMRobertaForQuestionAnswering"),ZYr=o(" (XLM-RoBERTa model)"),eKr=l(),F(e0.$$.fragment),Qze=l(),_f=a("h2"),o0=a("a"),Z5e=a("span"),F(O$.$$.fragment),oKr=l(),e0e=a("span"),rKr=o("FlaxAutoModelForTokenClassification"),Wze=l(),Mr=a("div"),F(V$.$$.fragment),tKr=l(),uf=a("p"),aKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uoe=a("a"),nKr=o("from_pretrained()"),sKr=o(" class method or the "),Joe=a("a"),lKr=o("from_config()"),iKr=o(` class
method.`),dKr=l(),X$=a("p"),cKr=o("This class cannot be instantiated directly using "),o0e=a("code"),fKr=o("__init__()"),mKr=o(" (throws an error)."),gKr=l(),ea=a("div"),F(z$.$$.fragment),hKr=l(),r0e=a("p"),pKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Kr=l(),bf=a("p"),uKr=o(`Note:
Loading a model from its configuration file does `),t0e=a("strong"),bKr=o("not"),vKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=a("a"),FKr=o("from_pretrained()"),TKr=o(" to load the model weights."),MKr=l(),F(r0.$$.fragment),EKr=l(),Jr=a("div"),F(Q$.$$.fragment),CKr=l(),a0e=a("p"),wKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AKr=l(),yn=a("p"),LKr=o("The model class to instantiate is selected based on the "),n0e=a("code"),yKr=o("model_type"),xKr=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),$Kr=o("pretrained_model_name_or_path"),kKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),SKr=o("pretrained_model_name_or_path"),RKr=o(":"),PKr=l(),Ve=a("ul"),t0=a("li"),i0e=a("strong"),BKr=o("albert"),IKr=o(" \u2014 "),Koe=a("a"),NKr=o("FlaxAlbertForTokenClassification"),qKr=o(" (ALBERT model)"),jKr=l(),a0=a("li"),d0e=a("strong"),DKr=o("bert"),GKr=o(" \u2014 "),Zoe=a("a"),OKr=o("FlaxBertForTokenClassification"),VKr=o(" (BERT model)"),XKr=l(),n0=a("li"),c0e=a("strong"),zKr=o("big_bird"),QKr=o(" \u2014 "),ere=a("a"),WKr=o("FlaxBigBirdForTokenClassification"),HKr=o(" (BigBird model)"),UKr=l(),s0=a("li"),f0e=a("strong"),JKr=o("distilbert"),YKr=o(" \u2014 "),ore=a("a"),KKr=o("FlaxDistilBertForTokenClassification"),ZKr=o(" (DistilBERT model)"),eZr=l(),l0=a("li"),m0e=a("strong"),oZr=o("electra"),rZr=o(" \u2014 "),rre=a("a"),tZr=o("FlaxElectraForTokenClassification"),aZr=o(" (ELECTRA model)"),nZr=l(),i0=a("li"),g0e=a("strong"),sZr=o("roberta"),lZr=o(" \u2014 "),tre=a("a"),iZr=o("FlaxRobertaForTokenClassification"),dZr=o(" (RoBERTa model)"),cZr=l(),d0=a("li"),h0e=a("strong"),fZr=o("roformer"),mZr=o(" \u2014 "),are=a("a"),gZr=o("FlaxRoFormerForTokenClassification"),hZr=o(" (RoFormer model)"),pZr=l(),c0=a("li"),p0e=a("strong"),_Zr=o("xlm-roberta"),uZr=o(" \u2014 "),nre=a("a"),bZr=o("FlaxXLMRobertaForTokenClassification"),vZr=o(" (XLM-RoBERTa model)"),FZr=l(),F(f0.$$.fragment),Hze=l(),vf=a("h2"),m0=a("a"),_0e=a("span"),F(W$.$$.fragment),TZr=l(),u0e=a("span"),MZr=o("FlaxAutoModelForMultipleChoice"),Uze=l(),Er=a("div"),F(H$.$$.fragment),EZr=l(),Ff=a("p"),CZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sre=a("a"),wZr=o("from_pretrained()"),AZr=o(" class method or the "),lre=a("a"),LZr=o("from_config()"),yZr=o(` class
method.`),xZr=l(),U$=a("p"),$Zr=o("This class cannot be instantiated directly using "),b0e=a("code"),kZr=o("__init__()"),SZr=o(" (throws an error)."),RZr=l(),oa=a("div"),F(J$.$$.fragment),PZr=l(),v0e=a("p"),BZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IZr=l(),Tf=a("p"),NZr=o(`Note:
Loading a model from its configuration file does `),F0e=a("strong"),qZr=o("not"),jZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=a("a"),DZr=o("from_pretrained()"),GZr=o(" to load the model weights."),OZr=l(),F(g0.$$.fragment),VZr=l(),Yr=a("div"),F(Y$.$$.fragment),XZr=l(),T0e=a("p"),zZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QZr=l(),xn=a("p"),WZr=o("The model class to instantiate is selected based on the "),M0e=a("code"),HZr=o("model_type"),UZr=o(` property of the config object (either
passed as an argument or loaded from `),E0e=a("code"),JZr=o("pretrained_model_name_or_path"),YZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=a("code"),KZr=o("pretrained_model_name_or_path"),ZZr=o(":"),eet=l(),Xe=a("ul"),h0=a("li"),w0e=a("strong"),oet=o("albert"),ret=o(" \u2014 "),dre=a("a"),tet=o("FlaxAlbertForMultipleChoice"),aet=o(" (ALBERT model)"),net=l(),p0=a("li"),A0e=a("strong"),set=o("bert"),iet=o(" \u2014 "),cre=a("a"),det=o("FlaxBertForMultipleChoice"),cet=o(" (BERT model)"),fet=l(),_0=a("li"),L0e=a("strong"),met=o("big_bird"),get=o(" \u2014 "),fre=a("a"),het=o("FlaxBigBirdForMultipleChoice"),pet=o(" (BigBird model)"),_et=l(),u0=a("li"),y0e=a("strong"),uet=o("distilbert"),bet=o(" \u2014 "),mre=a("a"),vet=o("FlaxDistilBertForMultipleChoice"),Fet=o(" (DistilBERT model)"),Tet=l(),b0=a("li"),x0e=a("strong"),Met=o("electra"),Eet=o(" \u2014 "),gre=a("a"),Cet=o("FlaxElectraForMultipleChoice"),wet=o(" (ELECTRA model)"),Aet=l(),v0=a("li"),$0e=a("strong"),Let=o("roberta"),yet=o(" \u2014 "),hre=a("a"),xet=o("FlaxRobertaForMultipleChoice"),$et=o(" (RoBERTa model)"),ket=l(),F0=a("li"),k0e=a("strong"),Set=o("roformer"),Ret=o(" \u2014 "),pre=a("a"),Pet=o("FlaxRoFormerForMultipleChoice"),Bet=o(" (RoFormer model)"),Iet=l(),T0=a("li"),S0e=a("strong"),Net=o("xlm-roberta"),qet=o(" \u2014 "),_re=a("a"),jet=o("FlaxXLMRobertaForMultipleChoice"),Det=o(" (XLM-RoBERTa model)"),Get=l(),F(M0.$$.fragment),Jze=l(),Mf=a("h2"),E0=a("a"),R0e=a("span"),F(K$.$$.fragment),Oet=l(),P0e=a("span"),Vet=o("FlaxAutoModelForNextSentencePrediction"),Yze=l(),Cr=a("div"),F(Z$.$$.fragment),Xet=l(),Ef=a("p"),zet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ure=a("a"),Qet=o("from_pretrained()"),Wet=o(" class method or the "),bre=a("a"),Het=o("from_config()"),Uet=o(` class
method.`),Jet=l(),ek=a("p"),Yet=o("This class cannot be instantiated directly using "),B0e=a("code"),Ket=o("__init__()"),Zet=o(" (throws an error)."),eot=l(),ra=a("div"),F(ok.$$.fragment),oot=l(),I0e=a("p"),rot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tot=l(),Cf=a("p"),aot=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),not=o("not"),sot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),lot=o("from_pretrained()"),iot=o(" to load the model weights."),dot=l(),F(C0.$$.fragment),cot=l(),Kr=a("div"),F(rk.$$.fragment),fot=l(),q0e=a("p"),mot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),got=l(),$n=a("p"),hot=o("The model class to instantiate is selected based on the "),j0e=a("code"),pot=o("model_type"),_ot=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),uot=o("pretrained_model_name_or_path"),bot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),vot=o("pretrained_model_name_or_path"),Fot=o(":"),Tot=l(),O0e=a("ul"),w0=a("li"),V0e=a("strong"),Mot=o("bert"),Eot=o(" \u2014 "),Fre=a("a"),Cot=o("FlaxBertForNextSentencePrediction"),wot=o(" (BERT model)"),Aot=l(),F(A0.$$.fragment),Kze=l(),wf=a("h2"),L0=a("a"),X0e=a("span"),F(tk.$$.fragment),Lot=l(),z0e=a("span"),yot=o("FlaxAutoModelForImageClassification"),Zze=l(),wr=a("div"),F(ak.$$.fragment),xot=l(),Af=a("p"),$ot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tre=a("a"),kot=o("from_pretrained()"),Sot=o(" class method or the "),Mre=a("a"),Rot=o("from_config()"),Pot=o(` class
method.`),Bot=l(),nk=a("p"),Iot=o("This class cannot be instantiated directly using "),Q0e=a("code"),Not=o("__init__()"),qot=o(" (throws an error)."),jot=l(),ta=a("div"),F(sk.$$.fragment),Dot=l(),W0e=a("p"),Got=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Oot=l(),Lf=a("p"),Vot=o(`Note:
Loading a model from its configuration file does `),H0e=a("strong"),Xot=o("not"),zot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),Qot=o("from_pretrained()"),Wot=o(" to load the model weights."),Hot=l(),F(y0.$$.fragment),Uot=l(),Zr=a("div"),F(lk.$$.fragment),Jot=l(),U0e=a("p"),Yot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kot=l(),kn=a("p"),Zot=o("The model class to instantiate is selected based on the "),J0e=a("code"),ert=o("model_type"),ort=o(` property of the config object (either
passed as an argument or loaded from `),Y0e=a("code"),rrt=o("pretrained_model_name_or_path"),trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K0e=a("code"),art=o("pretrained_model_name_or_path"),nrt=o(":"),srt=l(),ik=a("ul"),x0=a("li"),Z0e=a("strong"),lrt=o("beit"),irt=o(" \u2014 "),Cre=a("a"),drt=o("FlaxBeitForImageClassification"),crt=o(" (BEiT model)"),frt=l(),$0=a("li"),ewe=a("strong"),mrt=o("vit"),grt=o(" \u2014 "),wre=a("a"),hrt=o("FlaxViTForImageClassification"),prt=o(" (ViT model)"),_rt=l(),F(k0.$$.fragment),eQe=l(),yf=a("h2"),S0=a("a"),owe=a("span"),F(dk.$$.fragment),urt=l(),rwe=a("span"),brt=o("FlaxAutoModelForVision2Seq"),oQe=l(),Ar=a("div"),F(ck.$$.fragment),vrt=l(),xf=a("p"),Frt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Are=a("a"),Trt=o("from_pretrained()"),Mrt=o(" class method or the "),Lre=a("a"),Ert=o("from_config()"),Crt=o(` class
method.`),wrt=l(),fk=a("p"),Art=o("This class cannot be instantiated directly using "),twe=a("code"),Lrt=o("__init__()"),yrt=o(" (throws an error)."),xrt=l(),aa=a("div"),F(mk.$$.fragment),$rt=l(),awe=a("p"),krt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Srt=l(),$f=a("p"),Rrt=o(`Note:
Loading a model from its configuration file does `),nwe=a("strong"),Prt=o("not"),Brt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),Irt=o("from_pretrained()"),Nrt=o(" to load the model weights."),qrt=l(),F(R0.$$.fragment),jrt=l(),et=a("div"),F(gk.$$.fragment),Drt=l(),swe=a("p"),Grt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ort=l(),Sn=a("p"),Vrt=o("The model class to instantiate is selected based on the "),lwe=a("code"),Xrt=o("model_type"),zrt=o(` property of the config object (either
passed as an argument or loaded from `),iwe=a("code"),Qrt=o("pretrained_model_name_or_path"),Wrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=a("code"),Hrt=o("pretrained_model_name_or_path"),Urt=o(":"),Jrt=l(),cwe=a("ul"),P0=a("li"),fwe=a("strong"),Yrt=o("vision-encoder-decoder"),Krt=o(" \u2014 "),xre=a("a"),Zrt=o("FlaxVisionEncoderDecoderModel"),ett=o(" (Vision Encoder decoder model)"),ott=l(),F(B0.$$.fragment),this.h()},l(f){const u=RQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var hk=s(p);m=n(hk,"A",{id:!0,class:!0,href:!0});var mwe=s(m);_=n(mwe,"SPAN",{});var gwe=s(_);T(d.$$.fragment,gwe),gwe.forEach(t),mwe.forEach(t),h=i(hk),Co=n(hk,"SPAN",{});var hwe=s(Co);Li=r(hwe,"Auto Classes"),hwe.forEach(t),hk.forEach(t),Pf=i(f),lt=n(f,"P",{});var pk=s(lt);yi=r(pk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(pk,"CODE",{});var pwe=s(xi);e7=r(pwe,"from_pretrained()"),pwe.forEach(t),Bf=r(pk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),pk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);$i=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var _we=s(Pn);o7=r(_we,"AutoConfig"),_we.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var uwe=s(In);r7=r(uwe,"AutoModel"),uwe.forEach(t),ki=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var bwe=s(Nn);t7=r(bwe,"AutoTokenizer"),bwe.forEach(t),Si=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var _k=s(Ae);BS=r(_k,"will create a model that is an instance of "),Ri=n(_k,"A",{href:!0});var vwe=s(Ri);IS=r(vwe,"BertModel"),vwe.forEach(t),NS=r(_k,"."),_k.forEach(t),wo=i(f),Ra=n(f,"P",{});var uk=s(Ra);qS=r(uk,"There is one class of "),Nf=n(uk,"CODE",{});var Fwe=s(Nf);jS=r(Fwe,"AutoModel"),Fwe.forEach(t),mHe=r(uk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uk.forEach(t),YVe=i(f),Pi=n(f,"H2",{class:!0});var bk=s(Pi);qf=n(bk,"A",{id:!0,class:!0,href:!0});var Twe=s(qf);Cae=n(Twe,"SPAN",{});var Mwe=s(Cae);T(a7.$$.fragment,Mwe),Mwe.forEach(t),Twe.forEach(t),gHe=i(bk),wae=n(bk,"SPAN",{});var Ewe=s(wae);hHe=r(Ewe,"Extending the Auto Classes"),Ewe.forEach(t),bk.forEach(t),KVe=i(f),qn=n(f,"P",{});var kf=s(qn);pHe=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aae=n(kf,"CODE",{});var Cwe=s(Aae);_He=r(Cwe,"NewModel"),Cwe.forEach(t),uHe=r(kf,", make sure you have a "),Lae=n(kf,"CODE",{});var wwe=s(Lae);bHe=r(wwe,"NewModelConfig"),wwe.forEach(t),vHe=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),ZVe=i(f),T(n7.$$.fragment,f),eXe=i(f),DS=n(f,"P",{});var Awe=s(DS);FHe=r(Awe,"You will then be able to use the auto classes like you would usually do!"),Awe.forEach(t),oXe=i(f),T(jf.$$.fragment,f),rXe=i(f),Bi=n(f,"H2",{class:!0});var vk=s(Bi);Df=n(vk,"A",{id:!0,class:!0,href:!0});var Lwe=s(Df);yae=n(Lwe,"SPAN",{});var ywe=s(yae);T(s7.$$.fragment,ywe),ywe.forEach(t),Lwe.forEach(t),THe=i(vk),xae=n(vk,"SPAN",{});var xwe=s(xae);MHe=r(xwe,"AutoConfig"),xwe.forEach(t),vk.forEach(t),tXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(l7.$$.fragment,nt),EHe=i(nt),i7=n(nt,"P",{});var Fk=s(i7);CHe=r(Fk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=n(Fk,"A",{href:!0});var $we=s(GS);wHe=r($we,"from_pretrained()"),$we.forEach(t),AHe=r(Fk," class method."),Fk.forEach(t),LHe=i(nt),d7=n(nt,"P",{});var Tk=s(d7);yHe=r(Tk,"This class cannot be instantiated directly using "),$ae=n(Tk,"CODE",{});var kwe=s($ae);xHe=r(kwe,"__init__()"),kwe.forEach(t),$He=r(Tk," (throws an error)."),Tk.forEach(t),kHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(c7.$$.fragment,st),SHe=i(st),kae=n(st,"P",{});var Swe=s(kae);RHe=r(Swe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Swe.forEach(t),PHe=i(st),Ii=n(st,"P",{});var Sf=s(Ii);BHe=r(Sf,"The configuration class to instantiate is selected based on the "),Sae=n(Sf,"CODE",{});var Rwe=s(Sae);IHe=r(Rwe,"model_type"),Rwe.forEach(t),NHe=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rae=n(Sf,"CODE",{});var Pwe=s(Rae);qHe=r(Pwe,"pretrained_model_name_or_path"),Pwe.forEach(t),jHe=r(Sf,":"),Sf.forEach(t),DHe=i(st),A=n(st,"UL",{});var L=s(A);Gf=n(L,"LI",{});var I0=s(Gf);Pae=n(I0,"STRONG",{});var Bwe=s(Pae);GHe=r(Bwe,"albert"),Bwe.forEach(t),OHe=r(I0," \u2014 "),OS=n(I0,"A",{href:!0});var Iwe=s(OS);VHe=r(Iwe,"AlbertConfig"),Iwe.forEach(t),XHe=r(I0," (ALBERT model)"),I0.forEach(t),zHe=i(L),Of=n(L,"LI",{});var N0=s(Of);Bae=n(N0,"STRONG",{});var Nwe=s(Bae);QHe=r(Nwe,"bart"),Nwe.forEach(t),WHe=r(N0," \u2014 "),VS=n(N0,"A",{href:!0});var qwe=s(VS);HHe=r(qwe,"BartConfig"),qwe.forEach(t),UHe=r(N0," (BART model)"),N0.forEach(t),JHe=i(L),Vf=n(L,"LI",{});var q0=s(Vf);Iae=n(q0,"STRONG",{});var jwe=s(Iae);YHe=r(jwe,"beit"),jwe.forEach(t),KHe=r(q0," \u2014 "),XS=n(q0,"A",{href:!0});var Dwe=s(XS);ZHe=r(Dwe,"BeitConfig"),Dwe.forEach(t),eUe=r(q0," (BEiT model)"),q0.forEach(t),oUe=i(L),Xf=n(L,"LI",{});var j0=s(Xf);Nae=n(j0,"STRONG",{});var Gwe=s(Nae);rUe=r(Gwe,"bert"),Gwe.forEach(t),tUe=r(j0," \u2014 "),zS=n(j0,"A",{href:!0});var Owe=s(zS);aUe=r(Owe,"BertConfig"),Owe.forEach(t),nUe=r(j0," (BERT model)"),j0.forEach(t),sUe=i(L),zf=n(L,"LI",{});var D0=s(zf);qae=n(D0,"STRONG",{});var Vwe=s(qae);lUe=r(Vwe,"bert-generation"),Vwe.forEach(t),iUe=r(D0," \u2014 "),QS=n(D0,"A",{href:!0});var Xwe=s(QS);dUe=r(Xwe,"BertGenerationConfig"),Xwe.forEach(t),cUe=r(D0," (Bert Generation model)"),D0.forEach(t),fUe=i(L),Qf=n(L,"LI",{});var G0=s(Qf);jae=n(G0,"STRONG",{});var zwe=s(jae);mUe=r(zwe,"big_bird"),zwe.forEach(t),gUe=r(G0," \u2014 "),WS=n(G0,"A",{href:!0});var Qwe=s(WS);hUe=r(Qwe,"BigBirdConfig"),Qwe.forEach(t),pUe=r(G0," (BigBird model)"),G0.forEach(t),_Ue=i(L),Wf=n(L,"LI",{});var O0=s(Wf);Dae=n(O0,"STRONG",{});var Wwe=s(Dae);uUe=r(Wwe,"bigbird_pegasus"),Wwe.forEach(t),bUe=r(O0," \u2014 "),HS=n(O0,"A",{href:!0});var Hwe=s(HS);vUe=r(Hwe,"BigBirdPegasusConfig"),Hwe.forEach(t),FUe=r(O0," (BigBird-Pegasus model)"),O0.forEach(t),TUe=i(L),Hf=n(L,"LI",{});var V0=s(Hf);Gae=n(V0,"STRONG",{});var Uwe=s(Gae);MUe=r(Uwe,"blenderbot"),Uwe.forEach(t),EUe=r(V0," \u2014 "),US=n(V0,"A",{href:!0});var Jwe=s(US);CUe=r(Jwe,"BlenderbotConfig"),Jwe.forEach(t),wUe=r(V0," (Blenderbot model)"),V0.forEach(t),AUe=i(L),Uf=n(L,"LI",{});var X0=s(Uf);Oae=n(X0,"STRONG",{});var Ywe=s(Oae);LUe=r(Ywe,"blenderbot-small"),Ywe.forEach(t),yUe=r(X0," \u2014 "),JS=n(X0,"A",{href:!0});var Kwe=s(JS);xUe=r(Kwe,"BlenderbotSmallConfig"),Kwe.forEach(t),$Ue=r(X0," (BlenderbotSmall model)"),X0.forEach(t),kUe=i(L),Jf=n(L,"LI",{});var z0=s(Jf);Vae=n(z0,"STRONG",{});var Zwe=s(Vae);SUe=r(Zwe,"bloom"),Zwe.forEach(t),RUe=r(z0," \u2014 "),YS=n(z0,"A",{href:!0});var eAe=s(YS);PUe=r(eAe,"BloomConfig"),eAe.forEach(t),BUe=r(z0," (BLOOM model)"),z0.forEach(t),IUe=i(L),Yf=n(L,"LI",{});var Q0=s(Yf);Xae=n(Q0,"STRONG",{});var oAe=s(Xae);NUe=r(oAe,"camembert"),oAe.forEach(t),qUe=r(Q0," \u2014 "),KS=n(Q0,"A",{href:!0});var rAe=s(KS);jUe=r(rAe,"CamembertConfig"),rAe.forEach(t),DUe=r(Q0," (CamemBERT model)"),Q0.forEach(t),GUe=i(L),Kf=n(L,"LI",{});var W0=s(Kf);zae=n(W0,"STRONG",{});var tAe=s(zae);OUe=r(tAe,"canine"),tAe.forEach(t),VUe=r(W0," \u2014 "),ZS=n(W0,"A",{href:!0});var aAe=s(ZS);XUe=r(aAe,"CanineConfig"),aAe.forEach(t),zUe=r(W0," (CANINE model)"),W0.forEach(t),QUe=i(L),Zf=n(L,"LI",{});var H0=s(Zf);Qae=n(H0,"STRONG",{});var nAe=s(Qae);WUe=r(nAe,"clip"),nAe.forEach(t),HUe=r(H0," \u2014 "),eR=n(H0,"A",{href:!0});var sAe=s(eR);UUe=r(sAe,"CLIPConfig"),sAe.forEach(t),JUe=r(H0," (CLIP model)"),H0.forEach(t),YUe=i(L),em=n(L,"LI",{});var U0=s(em);Wae=n(U0,"STRONG",{});var lAe=s(Wae);KUe=r(lAe,"codegen"),lAe.forEach(t),ZUe=r(U0," \u2014 "),oR=n(U0,"A",{href:!0});var iAe=s(oR);eJe=r(iAe,"CodeGenConfig"),iAe.forEach(t),oJe=r(U0," (CodeGen model)"),U0.forEach(t),rJe=i(L),om=n(L,"LI",{});var J0=s(om);Hae=n(J0,"STRONG",{});var dAe=s(Hae);tJe=r(dAe,"convbert"),dAe.forEach(t),aJe=r(J0," \u2014 "),rR=n(J0,"A",{href:!0});var cAe=s(rR);nJe=r(cAe,"ConvBertConfig"),cAe.forEach(t),sJe=r(J0," (ConvBERT model)"),J0.forEach(t),lJe=i(L),rm=n(L,"LI",{});var Y0=s(rm);Uae=n(Y0,"STRONG",{});var fAe=s(Uae);iJe=r(fAe,"convnext"),fAe.forEach(t),dJe=r(Y0," \u2014 "),tR=n(Y0,"A",{href:!0});var mAe=s(tR);cJe=r(mAe,"ConvNextConfig"),mAe.forEach(t),fJe=r(Y0," (ConvNeXT model)"),Y0.forEach(t),mJe=i(L),tm=n(L,"LI",{});var K0=s(tm);Jae=n(K0,"STRONG",{});var gAe=s(Jae);gJe=r(gAe,"ctrl"),gAe.forEach(t),hJe=r(K0," \u2014 "),aR=n(K0,"A",{href:!0});var hAe=s(aR);pJe=r(hAe,"CTRLConfig"),hAe.forEach(t),_Je=r(K0," (CTRL model)"),K0.forEach(t),uJe=i(L),am=n(L,"LI",{});var Z0=s(am);Yae=n(Z0,"STRONG",{});var pAe=s(Yae);bJe=r(pAe,"cvt"),pAe.forEach(t),vJe=r(Z0," \u2014 "),nR=n(Z0,"A",{href:!0});var _Ae=s(nR);FJe=r(_Ae,"CvtConfig"),_Ae.forEach(t),TJe=r(Z0," (CvT model)"),Z0.forEach(t),MJe=i(L),nm=n(L,"LI",{});var ew=s(nm);Kae=n(ew,"STRONG",{});var uAe=s(Kae);EJe=r(uAe,"data2vec-audio"),uAe.forEach(t),CJe=r(ew," \u2014 "),sR=n(ew,"A",{href:!0});var bAe=s(sR);wJe=r(bAe,"Data2VecAudioConfig"),bAe.forEach(t),AJe=r(ew," (Data2VecAudio model)"),ew.forEach(t),LJe=i(L),sm=n(L,"LI",{});var ow=s(sm);Zae=n(ow,"STRONG",{});var vAe=s(Zae);yJe=r(vAe,"data2vec-text"),vAe.forEach(t),xJe=r(ow," \u2014 "),lR=n(ow,"A",{href:!0});var FAe=s(lR);$Je=r(FAe,"Data2VecTextConfig"),FAe.forEach(t),kJe=r(ow," (Data2VecText model)"),ow.forEach(t),SJe=i(L),lm=n(L,"LI",{});var rw=s(lm);ene=n(rw,"STRONG",{});var TAe=s(ene);RJe=r(TAe,"data2vec-vision"),TAe.forEach(t),PJe=r(rw," \u2014 "),iR=n(rw,"A",{href:!0});var MAe=s(iR);BJe=r(MAe,"Data2VecVisionConfig"),MAe.forEach(t),IJe=r(rw," (Data2VecVision model)"),rw.forEach(t),NJe=i(L),im=n(L,"LI",{});var tw=s(im);one=n(tw,"STRONG",{});var EAe=s(one);qJe=r(EAe,"deberta"),EAe.forEach(t),jJe=r(tw," \u2014 "),dR=n(tw,"A",{href:!0});var CAe=s(dR);DJe=r(CAe,"DebertaConfig"),CAe.forEach(t),GJe=r(tw," (DeBERTa model)"),tw.forEach(t),OJe=i(L),dm=n(L,"LI",{});var aw=s(dm);rne=n(aw,"STRONG",{});var wAe=s(rne);VJe=r(wAe,"deberta-v2"),wAe.forEach(t),XJe=r(aw," \u2014 "),cR=n(aw,"A",{href:!0});var AAe=s(cR);zJe=r(AAe,"DebertaV2Config"),AAe.forEach(t),QJe=r(aw," (DeBERTa-v2 model)"),aw.forEach(t),WJe=i(L),cm=n(L,"LI",{});var nw=s(cm);tne=n(nw,"STRONG",{});var ttt=s(tne);HJe=r(ttt,"decision_transformer"),ttt.forEach(t),UJe=r(nw," \u2014 "),fR=n(nw,"A",{href:!0});var att=s(fR);JJe=r(att,"DecisionTransformerConfig"),att.forEach(t),YJe=r(nw," (Decision Transformer model)"),nw.forEach(t),KJe=i(L),fm=n(L,"LI",{});var LAe=s(fm);ane=n(LAe,"STRONG",{});var ntt=s(ane);ZJe=r(ntt,"deit"),ntt.forEach(t),eYe=r(LAe," \u2014 "),mR=n(LAe,"A",{href:!0});var stt=s(mR);oYe=r(stt,"DeiTConfig"),stt.forEach(t),rYe=r(LAe," (DeiT model)"),LAe.forEach(t),tYe=i(L),mm=n(L,"LI",{});var yAe=s(mm);nne=n(yAe,"STRONG",{});var ltt=s(nne);aYe=r(ltt,"detr"),ltt.forEach(t),nYe=r(yAe," \u2014 "),gR=n(yAe,"A",{href:!0});var itt=s(gR);sYe=r(itt,"DetrConfig"),itt.forEach(t),lYe=r(yAe," (DETR model)"),yAe.forEach(t),iYe=i(L),gm=n(L,"LI",{});var xAe=s(gm);sne=n(xAe,"STRONG",{});var dtt=s(sne);dYe=r(dtt,"distilbert"),dtt.forEach(t),cYe=r(xAe," \u2014 "),hR=n(xAe,"A",{href:!0});var ctt=s(hR);fYe=r(ctt,"DistilBertConfig"),ctt.forEach(t),mYe=r(xAe," (DistilBERT model)"),xAe.forEach(t),gYe=i(L),hm=n(L,"LI",{});var $Ae=s(hm);lne=n($Ae,"STRONG",{});var ftt=s(lne);hYe=r(ftt,"dpr"),ftt.forEach(t),pYe=r($Ae," \u2014 "),pR=n($Ae,"A",{href:!0});var mtt=s(pR);_Ye=r(mtt,"DPRConfig"),mtt.forEach(t),uYe=r($Ae," (DPR model)"),$Ae.forEach(t),bYe=i(L),pm=n(L,"LI",{});var kAe=s(pm);ine=n(kAe,"STRONG",{});var gtt=s(ine);vYe=r(gtt,"dpt"),gtt.forEach(t),FYe=r(kAe," \u2014 "),_R=n(kAe,"A",{href:!0});var htt=s(_R);TYe=r(htt,"DPTConfig"),htt.forEach(t),MYe=r(kAe," (DPT model)"),kAe.forEach(t),EYe=i(L),_m=n(L,"LI",{});var SAe=s(_m);dne=n(SAe,"STRONG",{});var ptt=s(dne);CYe=r(ptt,"electra"),ptt.forEach(t),wYe=r(SAe," \u2014 "),uR=n(SAe,"A",{href:!0});var _tt=s(uR);AYe=r(_tt,"ElectraConfig"),_tt.forEach(t),LYe=r(SAe," (ELECTRA model)"),SAe.forEach(t),yYe=i(L),um=n(L,"LI",{});var RAe=s(um);cne=n(RAe,"STRONG",{});var utt=s(cne);xYe=r(utt,"encoder-decoder"),utt.forEach(t),$Ye=r(RAe," \u2014 "),bR=n(RAe,"A",{href:!0});var btt=s(bR);kYe=r(btt,"EncoderDecoderConfig"),btt.forEach(t),SYe=r(RAe," (Encoder decoder model)"),RAe.forEach(t),RYe=i(L),bm=n(L,"LI",{});var PAe=s(bm);fne=n(PAe,"STRONG",{});var vtt=s(fne);PYe=r(vtt,"flaubert"),vtt.forEach(t),BYe=r(PAe," \u2014 "),vR=n(PAe,"A",{href:!0});var Ftt=s(vR);IYe=r(Ftt,"FlaubertConfig"),Ftt.forEach(t),NYe=r(PAe," (FlauBERT model)"),PAe.forEach(t),qYe=i(L),vm=n(L,"LI",{});var BAe=s(vm);mne=n(BAe,"STRONG",{});var Ttt=s(mne);jYe=r(Ttt,"flava"),Ttt.forEach(t),DYe=r(BAe," \u2014 "),FR=n(BAe,"A",{href:!0});var Mtt=s(FR);GYe=r(Mtt,"FlavaConfig"),Mtt.forEach(t),OYe=r(BAe," (FLAVA model)"),BAe.forEach(t),VYe=i(L),Fm=n(L,"LI",{});var IAe=s(Fm);gne=n(IAe,"STRONG",{});var Ett=s(gne);XYe=r(Ett,"fnet"),Ett.forEach(t),zYe=r(IAe," \u2014 "),TR=n(IAe,"A",{href:!0});var Ctt=s(TR);QYe=r(Ctt,"FNetConfig"),Ctt.forEach(t),WYe=r(IAe," (FNet model)"),IAe.forEach(t),HYe=i(L),Tm=n(L,"LI",{});var NAe=s(Tm);hne=n(NAe,"STRONG",{});var wtt=s(hne);UYe=r(wtt,"fsmt"),wtt.forEach(t),JYe=r(NAe," \u2014 "),MR=n(NAe,"A",{href:!0});var Att=s(MR);YYe=r(Att,"FSMTConfig"),Att.forEach(t),KYe=r(NAe," (FairSeq Machine-Translation model)"),NAe.forEach(t),ZYe=i(L),Mm=n(L,"LI",{});var qAe=s(Mm);pne=n(qAe,"STRONG",{});var Ltt=s(pne);eKe=r(Ltt,"funnel"),Ltt.forEach(t),oKe=r(qAe," \u2014 "),ER=n(qAe,"A",{href:!0});var ytt=s(ER);rKe=r(ytt,"FunnelConfig"),ytt.forEach(t),tKe=r(qAe," (Funnel Transformer model)"),qAe.forEach(t),aKe=i(L),Em=n(L,"LI",{});var jAe=s(Em);_ne=n(jAe,"STRONG",{});var xtt=s(_ne);nKe=r(xtt,"glpn"),xtt.forEach(t),sKe=r(jAe," \u2014 "),CR=n(jAe,"A",{href:!0});var $tt=s(CR);lKe=r($tt,"GLPNConfig"),$tt.forEach(t),iKe=r(jAe," (GLPN model)"),jAe.forEach(t),dKe=i(L),Cm=n(L,"LI",{});var DAe=s(Cm);une=n(DAe,"STRONG",{});var ktt=s(une);cKe=r(ktt,"gpt2"),ktt.forEach(t),fKe=r(DAe," \u2014 "),wR=n(DAe,"A",{href:!0});var Stt=s(wR);mKe=r(Stt,"GPT2Config"),Stt.forEach(t),gKe=r(DAe," (OpenAI GPT-2 model)"),DAe.forEach(t),hKe=i(L),wm=n(L,"LI",{});var GAe=s(wm);bne=n(GAe,"STRONG",{});var Rtt=s(bne);pKe=r(Rtt,"gpt_neo"),Rtt.forEach(t),_Ke=r(GAe," \u2014 "),AR=n(GAe,"A",{href:!0});var Ptt=s(AR);uKe=r(Ptt,"GPTNeoConfig"),Ptt.forEach(t),bKe=r(GAe," (GPT Neo model)"),GAe.forEach(t),vKe=i(L),Am=n(L,"LI",{});var OAe=s(Am);vne=n(OAe,"STRONG",{});var Btt=s(vne);FKe=r(Btt,"gpt_neox"),Btt.forEach(t),TKe=r(OAe," \u2014 "),LR=n(OAe,"A",{href:!0});var Itt=s(LR);MKe=r(Itt,"GPTNeoXConfig"),Itt.forEach(t),EKe=r(OAe," (GPT NeoX model)"),OAe.forEach(t),CKe=i(L),Lm=n(L,"LI",{});var VAe=s(Lm);Fne=n(VAe,"STRONG",{});var Ntt=s(Fne);wKe=r(Ntt,"gptj"),Ntt.forEach(t),AKe=r(VAe," \u2014 "),yR=n(VAe,"A",{href:!0});var qtt=s(yR);LKe=r(qtt,"GPTJConfig"),qtt.forEach(t),yKe=r(VAe," (GPT-J model)"),VAe.forEach(t),xKe=i(L),ym=n(L,"LI",{});var XAe=s(ym);Tne=n(XAe,"STRONG",{});var jtt=s(Tne);$Ke=r(jtt,"groupvit"),jtt.forEach(t),kKe=r(XAe," \u2014 "),xR=n(XAe,"A",{href:!0});var Dtt=s(xR);SKe=r(Dtt,"GroupViTConfig"),Dtt.forEach(t),RKe=r(XAe," (GroupViT model)"),XAe.forEach(t),PKe=i(L),xm=n(L,"LI",{});var zAe=s(xm);Mne=n(zAe,"STRONG",{});var Gtt=s(Mne);BKe=r(Gtt,"hubert"),Gtt.forEach(t),IKe=r(zAe," \u2014 "),$R=n(zAe,"A",{href:!0});var Ott=s($R);NKe=r(Ott,"HubertConfig"),Ott.forEach(t),qKe=r(zAe," (Hubert model)"),zAe.forEach(t),jKe=i(L),$m=n(L,"LI",{});var QAe=s($m);Ene=n(QAe,"STRONG",{});var Vtt=s(Ene);DKe=r(Vtt,"ibert"),Vtt.forEach(t),GKe=r(QAe," \u2014 "),kR=n(QAe,"A",{href:!0});var Xtt=s(kR);OKe=r(Xtt,"IBertConfig"),Xtt.forEach(t),VKe=r(QAe," (I-BERT model)"),QAe.forEach(t),XKe=i(L),km=n(L,"LI",{});var WAe=s(km);Cne=n(WAe,"STRONG",{});var ztt=s(Cne);zKe=r(ztt,"imagegpt"),ztt.forEach(t),QKe=r(WAe," \u2014 "),SR=n(WAe,"A",{href:!0});var Qtt=s(SR);WKe=r(Qtt,"ImageGPTConfig"),Qtt.forEach(t),HKe=r(WAe," (ImageGPT model)"),WAe.forEach(t),UKe=i(L),Sm=n(L,"LI",{});var HAe=s(Sm);wne=n(HAe,"STRONG",{});var Wtt=s(wne);JKe=r(Wtt,"layoutlm"),Wtt.forEach(t),YKe=r(HAe," \u2014 "),RR=n(HAe,"A",{href:!0});var Htt=s(RR);KKe=r(Htt,"LayoutLMConfig"),Htt.forEach(t),ZKe=r(HAe," (LayoutLM model)"),HAe.forEach(t),eZe=i(L),Rm=n(L,"LI",{});var UAe=s(Rm);Ane=n(UAe,"STRONG",{});var Utt=s(Ane);oZe=r(Utt,"layoutlmv2"),Utt.forEach(t),rZe=r(UAe," \u2014 "),PR=n(UAe,"A",{href:!0});var Jtt=s(PR);tZe=r(Jtt,"LayoutLMv2Config"),Jtt.forEach(t),aZe=r(UAe," (LayoutLMv2 model)"),UAe.forEach(t),nZe=i(L),Pm=n(L,"LI",{});var JAe=s(Pm);Lne=n(JAe,"STRONG",{});var Ytt=s(Lne);sZe=r(Ytt,"layoutlmv3"),Ytt.forEach(t),lZe=r(JAe," \u2014 "),BR=n(JAe,"A",{href:!0});var Ktt=s(BR);iZe=r(Ktt,"LayoutLMv3Config"),Ktt.forEach(t),dZe=r(JAe," (LayoutLMv3 model)"),JAe.forEach(t),cZe=i(L),Bm=n(L,"LI",{});var YAe=s(Bm);yne=n(YAe,"STRONG",{});var Ztt=s(yne);fZe=r(Ztt,"led"),Ztt.forEach(t),mZe=r(YAe," \u2014 "),IR=n(YAe,"A",{href:!0});var eat=s(IR);gZe=r(eat,"LEDConfig"),eat.forEach(t),hZe=r(YAe," (LED model)"),YAe.forEach(t),pZe=i(L),Im=n(L,"LI",{});var KAe=s(Im);xne=n(KAe,"STRONG",{});var oat=s(xne);_Ze=r(oat,"levit"),oat.forEach(t),uZe=r(KAe," \u2014 "),NR=n(KAe,"A",{href:!0});var rat=s(NR);bZe=r(rat,"LevitConfig"),rat.forEach(t),vZe=r(KAe," (LeViT model)"),KAe.forEach(t),FZe=i(L),Nm=n(L,"LI",{});var ZAe=s(Nm);$ne=n(ZAe,"STRONG",{});var tat=s($ne);TZe=r(tat,"longformer"),tat.forEach(t),MZe=r(ZAe," \u2014 "),qR=n(ZAe,"A",{href:!0});var aat=s(qR);EZe=r(aat,"LongformerConfig"),aat.forEach(t),CZe=r(ZAe," (Longformer model)"),ZAe.forEach(t),wZe=i(L),qm=n(L,"LI",{});var e7e=s(qm);kne=n(e7e,"STRONG",{});var nat=s(kne);AZe=r(nat,"longt5"),nat.forEach(t),LZe=r(e7e," \u2014 "),jR=n(e7e,"A",{href:!0});var sat=s(jR);yZe=r(sat,"LongT5Config"),sat.forEach(t),xZe=r(e7e," (LongT5 model)"),e7e.forEach(t),$Ze=i(L),jm=n(L,"LI",{});var o7e=s(jm);Sne=n(o7e,"STRONG",{});var lat=s(Sne);kZe=r(lat,"luke"),lat.forEach(t),SZe=r(o7e," \u2014 "),DR=n(o7e,"A",{href:!0});var iat=s(DR);RZe=r(iat,"LukeConfig"),iat.forEach(t),PZe=r(o7e," (LUKE model)"),o7e.forEach(t),BZe=i(L),Dm=n(L,"LI",{});var r7e=s(Dm);Rne=n(r7e,"STRONG",{});var dat=s(Rne);IZe=r(dat,"lxmert"),dat.forEach(t),NZe=r(r7e," \u2014 "),GR=n(r7e,"A",{href:!0});var cat=s(GR);qZe=r(cat,"LxmertConfig"),cat.forEach(t),jZe=r(r7e," (LXMERT model)"),r7e.forEach(t),DZe=i(L),Gm=n(L,"LI",{});var t7e=s(Gm);Pne=n(t7e,"STRONG",{});var fat=s(Pne);GZe=r(fat,"m2m_100"),fat.forEach(t),OZe=r(t7e," \u2014 "),OR=n(t7e,"A",{href:!0});var mat=s(OR);VZe=r(mat,"M2M100Config"),mat.forEach(t),XZe=r(t7e," (M2M100 model)"),t7e.forEach(t),zZe=i(L),Om=n(L,"LI",{});var a7e=s(Om);Bne=n(a7e,"STRONG",{});var gat=s(Bne);QZe=r(gat,"marian"),gat.forEach(t),WZe=r(a7e," \u2014 "),VR=n(a7e,"A",{href:!0});var hat=s(VR);HZe=r(hat,"MarianConfig"),hat.forEach(t),UZe=r(a7e," (Marian model)"),a7e.forEach(t),JZe=i(L),Vm=n(L,"LI",{});var n7e=s(Vm);Ine=n(n7e,"STRONG",{});var pat=s(Ine);YZe=r(pat,"maskformer"),pat.forEach(t),KZe=r(n7e," \u2014 "),XR=n(n7e,"A",{href:!0});var _at=s(XR);ZZe=r(_at,"MaskFormerConfig"),_at.forEach(t),eeo=r(n7e," (MaskFormer model)"),n7e.forEach(t),oeo=i(L),Xm=n(L,"LI",{});var s7e=s(Xm);Nne=n(s7e,"STRONG",{});var uat=s(Nne);reo=r(uat,"mbart"),uat.forEach(t),teo=r(s7e," \u2014 "),zR=n(s7e,"A",{href:!0});var bat=s(zR);aeo=r(bat,"MBartConfig"),bat.forEach(t),neo=r(s7e," (mBART model)"),s7e.forEach(t),seo=i(L),zm=n(L,"LI",{});var l7e=s(zm);qne=n(l7e,"STRONG",{});var vat=s(qne);leo=r(vat,"mctct"),vat.forEach(t),ieo=r(l7e," \u2014 "),QR=n(l7e,"A",{href:!0});var Fat=s(QR);deo=r(Fat,"MCTCTConfig"),Fat.forEach(t),ceo=r(l7e," (M-CTC-T model)"),l7e.forEach(t),feo=i(L),Qm=n(L,"LI",{});var i7e=s(Qm);jne=n(i7e,"STRONG",{});var Tat=s(jne);meo=r(Tat,"megatron-bert"),Tat.forEach(t),geo=r(i7e," \u2014 "),WR=n(i7e,"A",{href:!0});var Mat=s(WR);heo=r(Mat,"MegatronBertConfig"),Mat.forEach(t),peo=r(i7e," (Megatron-BERT model)"),i7e.forEach(t),_eo=i(L),Wm=n(L,"LI",{});var d7e=s(Wm);Dne=n(d7e,"STRONG",{});var Eat=s(Dne);ueo=r(Eat,"mobilebert"),Eat.forEach(t),beo=r(d7e," \u2014 "),HR=n(d7e,"A",{href:!0});var Cat=s(HR);veo=r(Cat,"MobileBertConfig"),Cat.forEach(t),Feo=r(d7e," (MobileBERT model)"),d7e.forEach(t),Teo=i(L),Hm=n(L,"LI",{});var c7e=s(Hm);Gne=n(c7e,"STRONG",{});var wat=s(Gne);Meo=r(wat,"mobilevit"),wat.forEach(t),Eeo=r(c7e," \u2014 "),UR=n(c7e,"A",{href:!0});var Aat=s(UR);Ceo=r(Aat,"MobileViTConfig"),Aat.forEach(t),weo=r(c7e," (MobileViT model)"),c7e.forEach(t),Aeo=i(L),Um=n(L,"LI",{});var f7e=s(Um);One=n(f7e,"STRONG",{});var Lat=s(One);Leo=r(Lat,"mpnet"),Lat.forEach(t),yeo=r(f7e," \u2014 "),JR=n(f7e,"A",{href:!0});var yat=s(JR);xeo=r(yat,"MPNetConfig"),yat.forEach(t),$eo=r(f7e," (MPNet model)"),f7e.forEach(t),keo=i(L),Jm=n(L,"LI",{});var m7e=s(Jm);Vne=n(m7e,"STRONG",{});var xat=s(Vne);Seo=r(xat,"mt5"),xat.forEach(t),Reo=r(m7e," \u2014 "),YR=n(m7e,"A",{href:!0});var $at=s(YR);Peo=r($at,"MT5Config"),$at.forEach(t),Beo=r(m7e," (MT5 model)"),m7e.forEach(t),Ieo=i(L),Ym=n(L,"LI",{});var g7e=s(Ym);Xne=n(g7e,"STRONG",{});var kat=s(Xne);Neo=r(kat,"mvp"),kat.forEach(t),qeo=r(g7e," \u2014 "),KR=n(g7e,"A",{href:!0});var Sat=s(KR);jeo=r(Sat,"MvpConfig"),Sat.forEach(t),Deo=r(g7e," (MVP model)"),g7e.forEach(t),Geo=i(L),Km=n(L,"LI",{});var h7e=s(Km);zne=n(h7e,"STRONG",{});var Rat=s(zne);Oeo=r(Rat,"nezha"),Rat.forEach(t),Veo=r(h7e," \u2014 "),ZR=n(h7e,"A",{href:!0});var Pat=s(ZR);Xeo=r(Pat,"NezhaConfig"),Pat.forEach(t),zeo=r(h7e," (Nezha model)"),h7e.forEach(t),Qeo=i(L),Zm=n(L,"LI",{});var p7e=s(Zm);Qne=n(p7e,"STRONG",{});var Bat=s(Qne);Weo=r(Bat,"nystromformer"),Bat.forEach(t),Heo=r(p7e," \u2014 "),eP=n(p7e,"A",{href:!0});var Iat=s(eP);Ueo=r(Iat,"NystromformerConfig"),Iat.forEach(t),Jeo=r(p7e," (Nystr\xF6mformer model)"),p7e.forEach(t),Yeo=i(L),eg=n(L,"LI",{});var _7e=s(eg);Wne=n(_7e,"STRONG",{});var Nat=s(Wne);Keo=r(Nat,"openai-gpt"),Nat.forEach(t),Zeo=r(_7e," \u2014 "),oP=n(_7e,"A",{href:!0});var qat=s(oP);eoo=r(qat,"OpenAIGPTConfig"),qat.forEach(t),ooo=r(_7e," (OpenAI GPT model)"),_7e.forEach(t),roo=i(L),og=n(L,"LI",{});var u7e=s(og);Hne=n(u7e,"STRONG",{});var jat=s(Hne);too=r(jat,"opt"),jat.forEach(t),aoo=r(u7e," \u2014 "),rP=n(u7e,"A",{href:!0});var Dat=s(rP);noo=r(Dat,"OPTConfig"),Dat.forEach(t),soo=r(u7e," (OPT model)"),u7e.forEach(t),loo=i(L),rg=n(L,"LI",{});var b7e=s(rg);Une=n(b7e,"STRONG",{});var Gat=s(Une);ioo=r(Gat,"pegasus"),Gat.forEach(t),doo=r(b7e," \u2014 "),tP=n(b7e,"A",{href:!0});var Oat=s(tP);coo=r(Oat,"PegasusConfig"),Oat.forEach(t),foo=r(b7e," (Pegasus model)"),b7e.forEach(t),moo=i(L),tg=n(L,"LI",{});var v7e=s(tg);Jne=n(v7e,"STRONG",{});var Vat=s(Jne);goo=r(Vat,"perceiver"),Vat.forEach(t),hoo=r(v7e," \u2014 "),aP=n(v7e,"A",{href:!0});var Xat=s(aP);poo=r(Xat,"PerceiverConfig"),Xat.forEach(t),_oo=r(v7e," (Perceiver model)"),v7e.forEach(t),uoo=i(L),ag=n(L,"LI",{});var F7e=s(ag);Yne=n(F7e,"STRONG",{});var zat=s(Yne);boo=r(zat,"plbart"),zat.forEach(t),voo=r(F7e," \u2014 "),nP=n(F7e,"A",{href:!0});var Qat=s(nP);Foo=r(Qat,"PLBartConfig"),Qat.forEach(t),Too=r(F7e," (PLBart model)"),F7e.forEach(t),Moo=i(L),ng=n(L,"LI",{});var T7e=s(ng);Kne=n(T7e,"STRONG",{});var Wat=s(Kne);Eoo=r(Wat,"poolformer"),Wat.forEach(t),Coo=r(T7e," \u2014 "),sP=n(T7e,"A",{href:!0});var Hat=s(sP);woo=r(Hat,"PoolFormerConfig"),Hat.forEach(t),Aoo=r(T7e," (PoolFormer model)"),T7e.forEach(t),Loo=i(L),sg=n(L,"LI",{});var M7e=s(sg);Zne=n(M7e,"STRONG",{});var Uat=s(Zne);yoo=r(Uat,"prophetnet"),Uat.forEach(t),xoo=r(M7e," \u2014 "),lP=n(M7e,"A",{href:!0});var Jat=s(lP);$oo=r(Jat,"ProphetNetConfig"),Jat.forEach(t),koo=r(M7e," (ProphetNet model)"),M7e.forEach(t),Soo=i(L),lg=n(L,"LI",{});var E7e=s(lg);ese=n(E7e,"STRONG",{});var Yat=s(ese);Roo=r(Yat,"qdqbert"),Yat.forEach(t),Poo=r(E7e," \u2014 "),iP=n(E7e,"A",{href:!0});var Kat=s(iP);Boo=r(Kat,"QDQBertConfig"),Kat.forEach(t),Ioo=r(E7e," (QDQBert model)"),E7e.forEach(t),Noo=i(L),ig=n(L,"LI",{});var C7e=s(ig);ose=n(C7e,"STRONG",{});var Zat=s(ose);qoo=r(Zat,"rag"),Zat.forEach(t),joo=r(C7e," \u2014 "),dP=n(C7e,"A",{href:!0});var ent=s(dP);Doo=r(ent,"RagConfig"),ent.forEach(t),Goo=r(C7e," (RAG model)"),C7e.forEach(t),Ooo=i(L),dg=n(L,"LI",{});var w7e=s(dg);rse=n(w7e,"STRONG",{});var ont=s(rse);Voo=r(ont,"realm"),ont.forEach(t),Xoo=r(w7e," \u2014 "),cP=n(w7e,"A",{href:!0});var rnt=s(cP);zoo=r(rnt,"RealmConfig"),rnt.forEach(t),Qoo=r(w7e," (REALM model)"),w7e.forEach(t),Woo=i(L),cg=n(L,"LI",{});var A7e=s(cg);tse=n(A7e,"STRONG",{});var tnt=s(tse);Hoo=r(tnt,"reformer"),tnt.forEach(t),Uoo=r(A7e," \u2014 "),fP=n(A7e,"A",{href:!0});var ant=s(fP);Joo=r(ant,"ReformerConfig"),ant.forEach(t),Yoo=r(A7e," (Reformer model)"),A7e.forEach(t),Koo=i(L),fg=n(L,"LI",{});var L7e=s(fg);ase=n(L7e,"STRONG",{});var nnt=s(ase);Zoo=r(nnt,"regnet"),nnt.forEach(t),ero=r(L7e," \u2014 "),mP=n(L7e,"A",{href:!0});var snt=s(mP);oro=r(snt,"RegNetConfig"),snt.forEach(t),rro=r(L7e," (RegNet model)"),L7e.forEach(t),tro=i(L),mg=n(L,"LI",{});var y7e=s(mg);nse=n(y7e,"STRONG",{});var lnt=s(nse);aro=r(lnt,"rembert"),lnt.forEach(t),nro=r(y7e," \u2014 "),gP=n(y7e,"A",{href:!0});var int=s(gP);sro=r(int,"RemBertConfig"),int.forEach(t),lro=r(y7e," (RemBERT model)"),y7e.forEach(t),iro=i(L),gg=n(L,"LI",{});var x7e=s(gg);sse=n(x7e,"STRONG",{});var dnt=s(sse);dro=r(dnt,"resnet"),dnt.forEach(t),cro=r(x7e," \u2014 "),hP=n(x7e,"A",{href:!0});var cnt=s(hP);fro=r(cnt,"ResNetConfig"),cnt.forEach(t),mro=r(x7e," (ResNet model)"),x7e.forEach(t),gro=i(L),hg=n(L,"LI",{});var $7e=s(hg);lse=n($7e,"STRONG",{});var fnt=s(lse);hro=r(fnt,"retribert"),fnt.forEach(t),pro=r($7e," \u2014 "),pP=n($7e,"A",{href:!0});var mnt=s(pP);_ro=r(mnt,"RetriBertConfig"),mnt.forEach(t),uro=r($7e," (RetriBERT model)"),$7e.forEach(t),bro=i(L),pg=n(L,"LI",{});var k7e=s(pg);ise=n(k7e,"STRONG",{});var gnt=s(ise);vro=r(gnt,"roberta"),gnt.forEach(t),Fro=r(k7e," \u2014 "),_P=n(k7e,"A",{href:!0});var hnt=s(_P);Tro=r(hnt,"RobertaConfig"),hnt.forEach(t),Mro=r(k7e," (RoBERTa model)"),k7e.forEach(t),Ero=i(L),_g=n(L,"LI",{});var S7e=s(_g);dse=n(S7e,"STRONG",{});var pnt=s(dse);Cro=r(pnt,"roformer"),pnt.forEach(t),wro=r(S7e," \u2014 "),uP=n(S7e,"A",{href:!0});var _nt=s(uP);Aro=r(_nt,"RoFormerConfig"),_nt.forEach(t),Lro=r(S7e," (RoFormer model)"),S7e.forEach(t),yro=i(L),ug=n(L,"LI",{});var R7e=s(ug);cse=n(R7e,"STRONG",{});var unt=s(cse);xro=r(unt,"segformer"),unt.forEach(t),$ro=r(R7e," \u2014 "),bP=n(R7e,"A",{href:!0});var bnt=s(bP);kro=r(bnt,"SegformerConfig"),bnt.forEach(t),Sro=r(R7e," (SegFormer model)"),R7e.forEach(t),Rro=i(L),bg=n(L,"LI",{});var P7e=s(bg);fse=n(P7e,"STRONG",{});var vnt=s(fse);Pro=r(vnt,"sew"),vnt.forEach(t),Bro=r(P7e," \u2014 "),vP=n(P7e,"A",{href:!0});var Fnt=s(vP);Iro=r(Fnt,"SEWConfig"),Fnt.forEach(t),Nro=r(P7e," (SEW model)"),P7e.forEach(t),qro=i(L),vg=n(L,"LI",{});var B7e=s(vg);mse=n(B7e,"STRONG",{});var Tnt=s(mse);jro=r(Tnt,"sew-d"),Tnt.forEach(t),Dro=r(B7e," \u2014 "),FP=n(B7e,"A",{href:!0});var Mnt=s(FP);Gro=r(Mnt,"SEWDConfig"),Mnt.forEach(t),Oro=r(B7e," (SEW-D model)"),B7e.forEach(t),Vro=i(L),Fg=n(L,"LI",{});var I7e=s(Fg);gse=n(I7e,"STRONG",{});var Ent=s(gse);Xro=r(Ent,"speech-encoder-decoder"),Ent.forEach(t),zro=r(I7e," \u2014 "),TP=n(I7e,"A",{href:!0});var Cnt=s(TP);Qro=r(Cnt,"SpeechEncoderDecoderConfig"),Cnt.forEach(t),Wro=r(I7e," (Speech Encoder decoder model)"),I7e.forEach(t),Hro=i(L),Tg=n(L,"LI",{});var N7e=s(Tg);hse=n(N7e,"STRONG",{});var wnt=s(hse);Uro=r(wnt,"speech_to_text"),wnt.forEach(t),Jro=r(N7e," \u2014 "),MP=n(N7e,"A",{href:!0});var Ant=s(MP);Yro=r(Ant,"Speech2TextConfig"),Ant.forEach(t),Kro=r(N7e," (Speech2Text model)"),N7e.forEach(t),Zro=i(L),Mg=n(L,"LI",{});var q7e=s(Mg);pse=n(q7e,"STRONG",{});var Lnt=s(pse);eto=r(Lnt,"speech_to_text_2"),Lnt.forEach(t),oto=r(q7e," \u2014 "),EP=n(q7e,"A",{href:!0});var ynt=s(EP);rto=r(ynt,"Speech2Text2Config"),ynt.forEach(t),tto=r(q7e," (Speech2Text2 model)"),q7e.forEach(t),ato=i(L),Eg=n(L,"LI",{});var j7e=s(Eg);_se=n(j7e,"STRONG",{});var xnt=s(_se);nto=r(xnt,"splinter"),xnt.forEach(t),sto=r(j7e," \u2014 "),CP=n(j7e,"A",{href:!0});var $nt=s(CP);lto=r($nt,"SplinterConfig"),$nt.forEach(t),ito=r(j7e," (Splinter model)"),j7e.forEach(t),dto=i(L),Cg=n(L,"LI",{});var D7e=s(Cg);use=n(D7e,"STRONG",{});var knt=s(use);cto=r(knt,"squeezebert"),knt.forEach(t),fto=r(D7e," \u2014 "),wP=n(D7e,"A",{href:!0});var Snt=s(wP);mto=r(Snt,"SqueezeBertConfig"),Snt.forEach(t),gto=r(D7e," (SqueezeBERT model)"),D7e.forEach(t),hto=i(L),wg=n(L,"LI",{});var G7e=s(wg);bse=n(G7e,"STRONG",{});var Rnt=s(bse);pto=r(Rnt,"swin"),Rnt.forEach(t),_to=r(G7e," \u2014 "),AP=n(G7e,"A",{href:!0});var Pnt=s(AP);uto=r(Pnt,"SwinConfig"),Pnt.forEach(t),bto=r(G7e," (Swin Transformer model)"),G7e.forEach(t),vto=i(L),Ag=n(L,"LI",{});var O7e=s(Ag);vse=n(O7e,"STRONG",{});var Bnt=s(vse);Fto=r(Bnt,"t5"),Bnt.forEach(t),Tto=r(O7e," \u2014 "),LP=n(O7e,"A",{href:!0});var Int=s(LP);Mto=r(Int,"T5Config"),Int.forEach(t),Eto=r(O7e," (T5 model)"),O7e.forEach(t),Cto=i(L),Lg=n(L,"LI",{});var V7e=s(Lg);Fse=n(V7e,"STRONG",{});var Nnt=s(Fse);wto=r(Nnt,"tapas"),Nnt.forEach(t),Ato=r(V7e," \u2014 "),yP=n(V7e,"A",{href:!0});var qnt=s(yP);Lto=r(qnt,"TapasConfig"),qnt.forEach(t),yto=r(V7e," (TAPAS model)"),V7e.forEach(t),xto=i(L),yg=n(L,"LI",{});var X7e=s(yg);Tse=n(X7e,"STRONG",{});var jnt=s(Tse);$to=r(jnt,"trajectory_transformer"),jnt.forEach(t),kto=r(X7e," \u2014 "),xP=n(X7e,"A",{href:!0});var Dnt=s(xP);Sto=r(Dnt,"TrajectoryTransformerConfig"),Dnt.forEach(t),Rto=r(X7e," (Trajectory Transformer model)"),X7e.forEach(t),Pto=i(L),xg=n(L,"LI",{});var z7e=s(xg);Mse=n(z7e,"STRONG",{});var Gnt=s(Mse);Bto=r(Gnt,"transfo-xl"),Gnt.forEach(t),Ito=r(z7e," \u2014 "),$P=n(z7e,"A",{href:!0});var Ont=s($P);Nto=r(Ont,"TransfoXLConfig"),Ont.forEach(t),qto=r(z7e," (Transformer-XL model)"),z7e.forEach(t),jto=i(L),$g=n(L,"LI",{});var Q7e=s($g);Ese=n(Q7e,"STRONG",{});var Vnt=s(Ese);Dto=r(Vnt,"trocr"),Vnt.forEach(t),Gto=r(Q7e," \u2014 "),kP=n(Q7e,"A",{href:!0});var Xnt=s(kP);Oto=r(Xnt,"TrOCRConfig"),Xnt.forEach(t),Vto=r(Q7e," (TrOCR model)"),Q7e.forEach(t),Xto=i(L),kg=n(L,"LI",{});var W7e=s(kg);Cse=n(W7e,"STRONG",{});var znt=s(Cse);zto=r(znt,"unispeech"),znt.forEach(t),Qto=r(W7e," \u2014 "),SP=n(W7e,"A",{href:!0});var Qnt=s(SP);Wto=r(Qnt,"UniSpeechConfig"),Qnt.forEach(t),Hto=r(W7e," (UniSpeech model)"),W7e.forEach(t),Uto=i(L),Sg=n(L,"LI",{});var H7e=s(Sg);wse=n(H7e,"STRONG",{});var Wnt=s(wse);Jto=r(Wnt,"unispeech-sat"),Wnt.forEach(t),Yto=r(H7e," \u2014 "),RP=n(H7e,"A",{href:!0});var Hnt=s(RP);Kto=r(Hnt,"UniSpeechSatConfig"),Hnt.forEach(t),Zto=r(H7e," (UniSpeechSat model)"),H7e.forEach(t),eao=i(L),Rg=n(L,"LI",{});var U7e=s(Rg);Ase=n(U7e,"STRONG",{});var Unt=s(Ase);oao=r(Unt,"van"),Unt.forEach(t),rao=r(U7e," \u2014 "),PP=n(U7e,"A",{href:!0});var Jnt=s(PP);tao=r(Jnt,"VanConfig"),Jnt.forEach(t),aao=r(U7e," (VAN model)"),U7e.forEach(t),nao=i(L),Pg=n(L,"LI",{});var J7e=s(Pg);Lse=n(J7e,"STRONG",{});var Ynt=s(Lse);sao=r(Ynt,"vilt"),Ynt.forEach(t),lao=r(J7e," \u2014 "),BP=n(J7e,"A",{href:!0});var Knt=s(BP);iao=r(Knt,"ViltConfig"),Knt.forEach(t),dao=r(J7e," (ViLT model)"),J7e.forEach(t),cao=i(L),Bg=n(L,"LI",{});var Y7e=s(Bg);yse=n(Y7e,"STRONG",{});var Znt=s(yse);fao=r(Znt,"vision-encoder-decoder"),Znt.forEach(t),mao=r(Y7e," \u2014 "),IP=n(Y7e,"A",{href:!0});var est=s(IP);gao=r(est,"VisionEncoderDecoderConfig"),est.forEach(t),hao=r(Y7e," (Vision Encoder decoder model)"),Y7e.forEach(t),pao=i(L),Ig=n(L,"LI",{});var K7e=s(Ig);xse=n(K7e,"STRONG",{});var ost=s(xse);_ao=r(ost,"vision-text-dual-encoder"),ost.forEach(t),uao=r(K7e," \u2014 "),NP=n(K7e,"A",{href:!0});var rst=s(NP);bao=r(rst,"VisionTextDualEncoderConfig"),rst.forEach(t),vao=r(K7e," (VisionTextDualEncoder model)"),K7e.forEach(t),Fao=i(L),Ng=n(L,"LI",{});var Z7e=s(Ng);$se=n(Z7e,"STRONG",{});var tst=s($se);Tao=r(tst,"visual_bert"),tst.forEach(t),Mao=r(Z7e," \u2014 "),qP=n(Z7e,"A",{href:!0});var ast=s(qP);Eao=r(ast,"VisualBertConfig"),ast.forEach(t),Cao=r(Z7e," (VisualBERT model)"),Z7e.forEach(t),wao=i(L),qg=n(L,"LI",{});var eLe=s(qg);kse=n(eLe,"STRONG",{});var nst=s(kse);Aao=r(nst,"vit"),nst.forEach(t),Lao=r(eLe," \u2014 "),jP=n(eLe,"A",{href:!0});var sst=s(jP);yao=r(sst,"ViTConfig"),sst.forEach(t),xao=r(eLe," (ViT model)"),eLe.forEach(t),$ao=i(L),jg=n(L,"LI",{});var oLe=s(jg);Sse=n(oLe,"STRONG",{});var lst=s(Sse);kao=r(lst,"vit_mae"),lst.forEach(t),Sao=r(oLe," \u2014 "),DP=n(oLe,"A",{href:!0});var ist=s(DP);Rao=r(ist,"ViTMAEConfig"),ist.forEach(t),Pao=r(oLe," (ViTMAE model)"),oLe.forEach(t),Bao=i(L),Dg=n(L,"LI",{});var rLe=s(Dg);Rse=n(rLe,"STRONG",{});var dst=s(Rse);Iao=r(dst,"wav2vec2"),dst.forEach(t),Nao=r(rLe," \u2014 "),GP=n(rLe,"A",{href:!0});var cst=s(GP);qao=r(cst,"Wav2Vec2Config"),cst.forEach(t),jao=r(rLe," (Wav2Vec2 model)"),rLe.forEach(t),Dao=i(L),Gg=n(L,"LI",{});var tLe=s(Gg);Pse=n(tLe,"STRONG",{});var fst=s(Pse);Gao=r(fst,"wav2vec2-conformer"),fst.forEach(t),Oao=r(tLe," \u2014 "),OP=n(tLe,"A",{href:!0});var mst=s(OP);Vao=r(mst,"Wav2Vec2ConformerConfig"),mst.forEach(t),Xao=r(tLe," (Wav2Vec2-Conformer model)"),tLe.forEach(t),zao=i(L),Og=n(L,"LI",{});var aLe=s(Og);Bse=n(aLe,"STRONG",{});var gst=s(Bse);Qao=r(gst,"wavlm"),gst.forEach(t),Wao=r(aLe," \u2014 "),VP=n(aLe,"A",{href:!0});var hst=s(VP);Hao=r(hst,"WavLMConfig"),hst.forEach(t),Uao=r(aLe," (WavLM model)"),aLe.forEach(t),Jao=i(L),Vg=n(L,"LI",{});var nLe=s(Vg);Ise=n(nLe,"STRONG",{});var pst=s(Ise);Yao=r(pst,"xglm"),pst.forEach(t),Kao=r(nLe," \u2014 "),XP=n(nLe,"A",{href:!0});var _st=s(XP);Zao=r(_st,"XGLMConfig"),_st.forEach(t),eno=r(nLe," (XGLM model)"),nLe.forEach(t),ono=i(L),Xg=n(L,"LI",{});var sLe=s(Xg);Nse=n(sLe,"STRONG",{});var ust=s(Nse);rno=r(ust,"xlm"),ust.forEach(t),tno=r(sLe," \u2014 "),zP=n(sLe,"A",{href:!0});var bst=s(zP);ano=r(bst,"XLMConfig"),bst.forEach(t),nno=r(sLe," (XLM model)"),sLe.forEach(t),sno=i(L),zg=n(L,"LI",{});var lLe=s(zg);qse=n(lLe,"STRONG",{});var vst=s(qse);lno=r(vst,"xlm-prophetnet"),vst.forEach(t),ino=r(lLe," \u2014 "),QP=n(lLe,"A",{href:!0});var Fst=s(QP);dno=r(Fst,"XLMProphetNetConfig"),Fst.forEach(t),cno=r(lLe," (XLM-ProphetNet model)"),lLe.forEach(t),fno=i(L),Qg=n(L,"LI",{});var iLe=s(Qg);jse=n(iLe,"STRONG",{});var Tst=s(jse);mno=r(Tst,"xlm-roberta"),Tst.forEach(t),gno=r(iLe," \u2014 "),WP=n(iLe,"A",{href:!0});var Mst=s(WP);hno=r(Mst,"XLMRobertaConfig"),Mst.forEach(t),pno=r(iLe," (XLM-RoBERTa model)"),iLe.forEach(t),_no=i(L),Wg=n(L,"LI",{});var dLe=s(Wg);Dse=n(dLe,"STRONG",{});var Est=s(Dse);uno=r(Est,"xlm-roberta-xl"),Est.forEach(t),bno=r(dLe," \u2014 "),HP=n(dLe,"A",{href:!0});var Cst=s(HP);vno=r(Cst,"XLMRobertaXLConfig"),Cst.forEach(t),Fno=r(dLe," (XLM-RoBERTa-XL model)"),dLe.forEach(t),Tno=i(L),Hg=n(L,"LI",{});var cLe=s(Hg);Gse=n(cLe,"STRONG",{});var wst=s(Gse);Mno=r(wst,"xlnet"),wst.forEach(t),Eno=r(cLe," \u2014 "),UP=n(cLe,"A",{href:!0});var Ast=s(UP);Cno=r(Ast,"XLNetConfig"),Ast.forEach(t),wno=r(cLe," (XLNet model)"),cLe.forEach(t),Ano=i(L),Ug=n(L,"LI",{});var fLe=s(Ug);Ose=n(fLe,"STRONG",{});var Lst=s(Ose);Lno=r(Lst,"yolos"),Lst.forEach(t),yno=r(fLe," \u2014 "),JP=n(fLe,"A",{href:!0});var yst=s(JP);xno=r(yst,"YolosConfig"),yst.forEach(t),$no=r(fLe," (YOLOS model)"),fLe.forEach(t),kno=i(L),Jg=n(L,"LI",{});var mLe=s(Jg);Vse=n(mLe,"STRONG",{});var xst=s(Vse);Sno=r(xst,"yoso"),xst.forEach(t),Rno=r(mLe," \u2014 "),YP=n(mLe,"A",{href:!0});var $st=s(YP);Pno=r($st,"YosoConfig"),$st.forEach(t),Bno=r(mLe," (YOSO model)"),mLe.forEach(t),L.forEach(t),Ino=i(st),T(Yg.$$.fragment,st),st.forEach(t),Nno=i(nt),Kg=n(nt,"DIV",{class:!0});var tQe=s(Kg);T(f7.$$.fragment,tQe),qno=i(tQe),Xse=n(tQe,"P",{});var kst=s(Xse);jno=r(kst,"Register a new configuration for this class."),kst.forEach(t),tQe.forEach(t),nt.forEach(t),aXe=i(f),Ni=n(f,"H2",{class:!0});var aQe=s(Ni);Zg=n(aQe,"A",{id:!0,class:!0,href:!0});var Sst=s(Zg);zse=n(Sst,"SPAN",{});var Rst=s(zse);T(m7.$$.fragment,Rst),Rst.forEach(t),Sst.forEach(t),Dno=i(aQe),Qse=n(aQe,"SPAN",{});var Pst=s(Qse);Gno=r(Pst,"AutoTokenizer"),Pst.forEach(t),aQe.forEach(t),nXe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(g7.$$.fragment,Ks),Ono=i(Ks),h7=n(Ks,"P",{});var nQe=s(h7);Vno=r(nQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KP=n(nQe,"A",{href:!0});var Bst=s(KP);Xno=r(Bst,"AutoTokenizer.from_pretrained()"),Bst.forEach(t),zno=r(nQe," class method."),nQe.forEach(t),Qno=i(Ks),p7=n(Ks,"P",{});var sQe=s(p7);Wno=r(sQe,"This class cannot be instantiated directly using "),Wse=n(sQe,"CODE",{});var Ist=s(Wse);Hno=r(Ist,"__init__()"),Ist.forEach(t),Uno=r(sQe," (throws an error)."),sQe.forEach(t),Jno=i(Ks),yr=n(Ks,"DIV",{class:!0});var Zs=s(yr);T(_7.$$.fragment,Zs),Yno=i(Zs),Hse=n(Zs,"P",{});var Nst=s(Hse);Kno=r(Nst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Nst.forEach(t),Zno=i(Zs),Pa=n(Zs,"P",{});var sw=s(Pa);eso=r(sw,"The tokenizer class to instantiate is selected based on the "),Use=n(sw,"CODE",{});var qst=s(Use);oso=r(qst,"model_type"),qst.forEach(t),rso=r(sw,` property of the config object (either
passed as an argument or loaded from `),Jse=n(sw,"CODE",{});var jst=s(Jse);tso=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),aso=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=n(sw,"CODE",{});var Dst=s(Yse);nso=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),sso=r(sw,":"),sw.forEach(t),lso=i(Zs),k=n(Zs,"UL",{});var S=s(k);jn=n(S,"LI",{});var Mk=s(jn);Kse=n(Mk,"STRONG",{});var Gst=s(Kse);iso=r(Gst,"albert"),Gst.forEach(t),dso=r(Mk," \u2014 "),ZP=n(Mk,"A",{href:!0});var Ost=s(ZP);cso=r(Ost,"AlbertTokenizer"),Ost.forEach(t),fso=r(Mk," or "),eB=n(Mk,"A",{href:!0});var Vst=s(eB);mso=r(Vst,"AlbertTokenizerFast"),Vst.forEach(t),gso=r(Mk," (ALBERT model)"),Mk.forEach(t),hso=i(S),Dn=n(S,"LI",{});var Ek=s(Dn);Zse=n(Ek,"STRONG",{});var Xst=s(Zse);pso=r(Xst,"bart"),Xst.forEach(t),_so=r(Ek," \u2014 "),oB=n(Ek,"A",{href:!0});var zst=s(oB);uso=r(zst,"BartTokenizer"),zst.forEach(t),bso=r(Ek," or "),rB=n(Ek,"A",{href:!0});var Qst=s(rB);vso=r(Qst,"BartTokenizerFast"),Qst.forEach(t),Fso=r(Ek," (BART model)"),Ek.forEach(t),Tso=i(S),Gn=n(S,"LI",{});var Ck=s(Gn);ele=n(Ck,"STRONG",{});var Wst=s(ele);Mso=r(Wst,"barthez"),Wst.forEach(t),Eso=r(Ck," \u2014 "),tB=n(Ck,"A",{href:!0});var Hst=s(tB);Cso=r(Hst,"BarthezTokenizer"),Hst.forEach(t),wso=r(Ck," or "),aB=n(Ck,"A",{href:!0});var Ust=s(aB);Aso=r(Ust,"BarthezTokenizerFast"),Ust.forEach(t),Lso=r(Ck," (BARThez model)"),Ck.forEach(t),yso=i(S),eh=n(S,"LI",{});var gLe=s(eh);ole=n(gLe,"STRONG",{});var Jst=s(ole);xso=r(Jst,"bartpho"),Jst.forEach(t),$so=r(gLe," \u2014 "),nB=n(gLe,"A",{href:!0});var Yst=s(nB);kso=r(Yst,"BartphoTokenizer"),Yst.forEach(t),Sso=r(gLe," (BARTpho model)"),gLe.forEach(t),Rso=i(S),On=n(S,"LI",{});var wk=s(On);rle=n(wk,"STRONG",{});var Kst=s(rle);Pso=r(Kst,"bert"),Kst.forEach(t),Bso=r(wk," \u2014 "),sB=n(wk,"A",{href:!0});var Zst=s(sB);Iso=r(Zst,"BertTokenizer"),Zst.forEach(t),Nso=r(wk," or "),lB=n(wk,"A",{href:!0});var elt=s(lB);qso=r(elt,"BertTokenizerFast"),elt.forEach(t),jso=r(wk," (BERT model)"),wk.forEach(t),Dso=i(S),oh=n(S,"LI",{});var hLe=s(oh);tle=n(hLe,"STRONG",{});var olt=s(tle);Gso=r(olt,"bert-generation"),olt.forEach(t),Oso=r(hLe," \u2014 "),iB=n(hLe,"A",{href:!0});var rlt=s(iB);Vso=r(rlt,"BertGenerationTokenizer"),rlt.forEach(t),Xso=r(hLe," (Bert Generation model)"),hLe.forEach(t),zso=i(S),rh=n(S,"LI",{});var pLe=s(rh);ale=n(pLe,"STRONG",{});var tlt=s(ale);Qso=r(tlt,"bert-japanese"),tlt.forEach(t),Wso=r(pLe," \u2014 "),dB=n(pLe,"A",{href:!0});var alt=s(dB);Hso=r(alt,"BertJapaneseTokenizer"),alt.forEach(t),Uso=r(pLe," (BertJapanese model)"),pLe.forEach(t),Jso=i(S),th=n(S,"LI",{});var _Le=s(th);nle=n(_Le,"STRONG",{});var nlt=s(nle);Yso=r(nlt,"bertweet"),nlt.forEach(t),Kso=r(_Le," \u2014 "),cB=n(_Le,"A",{href:!0});var slt=s(cB);Zso=r(slt,"BertweetTokenizer"),slt.forEach(t),elo=r(_Le," (BERTweet model)"),_Le.forEach(t),olo=i(S),Vn=n(S,"LI",{});var Ak=s(Vn);sle=n(Ak,"STRONG",{});var llt=s(sle);rlo=r(llt,"big_bird"),llt.forEach(t),tlo=r(Ak," \u2014 "),fB=n(Ak,"A",{href:!0});var ilt=s(fB);alo=r(ilt,"BigBirdTokenizer"),ilt.forEach(t),nlo=r(Ak," or "),mB=n(Ak,"A",{href:!0});var dlt=s(mB);slo=r(dlt,"BigBirdTokenizerFast"),dlt.forEach(t),llo=r(Ak," (BigBird model)"),Ak.forEach(t),ilo=i(S),Xn=n(S,"LI",{});var Lk=s(Xn);lle=n(Lk,"STRONG",{});var clt=s(lle);dlo=r(clt,"bigbird_pegasus"),clt.forEach(t),clo=r(Lk," \u2014 "),gB=n(Lk,"A",{href:!0});var flt=s(gB);flo=r(flt,"PegasusTokenizer"),flt.forEach(t),mlo=r(Lk," or "),hB=n(Lk,"A",{href:!0});var mlt=s(hB);glo=r(mlt,"PegasusTokenizerFast"),mlt.forEach(t),hlo=r(Lk," (BigBird-Pegasus model)"),Lk.forEach(t),plo=i(S),zn=n(S,"LI",{});var yk=s(zn);ile=n(yk,"STRONG",{});var glt=s(ile);_lo=r(glt,"blenderbot"),glt.forEach(t),ulo=r(yk," \u2014 "),pB=n(yk,"A",{href:!0});var hlt=s(pB);blo=r(hlt,"BlenderbotTokenizer"),hlt.forEach(t),vlo=r(yk," or "),_B=n(yk,"A",{href:!0});var plt=s(_B);Flo=r(plt,"BlenderbotTokenizerFast"),plt.forEach(t),Tlo=r(yk," (Blenderbot model)"),yk.forEach(t),Mlo=i(S),ah=n(S,"LI",{});var uLe=s(ah);dle=n(uLe,"STRONG",{});var _lt=s(dle);Elo=r(_lt,"blenderbot-small"),_lt.forEach(t),Clo=r(uLe," \u2014 "),uB=n(uLe,"A",{href:!0});var ult=s(uB);wlo=r(ult,"BlenderbotSmallTokenizer"),ult.forEach(t),Alo=r(uLe," (BlenderbotSmall model)"),uLe.forEach(t),Llo=i(S),nh=n(S,"LI",{});var bLe=s(nh);cle=n(bLe,"STRONG",{});var blt=s(cle);ylo=r(blt,"bloom"),blt.forEach(t),xlo=r(bLe," \u2014 "),bB=n(bLe,"A",{href:!0});var vlt=s(bB);$lo=r(vlt,"BloomTokenizerFast"),vlt.forEach(t),klo=r(bLe," (BLOOM model)"),bLe.forEach(t),Slo=i(S),sh=n(S,"LI",{});var vLe=s(sh);fle=n(vLe,"STRONG",{});var Flt=s(fle);Rlo=r(Flt,"byt5"),Flt.forEach(t),Plo=r(vLe," \u2014 "),vB=n(vLe,"A",{href:!0});var Tlt=s(vB);Blo=r(Tlt,"ByT5Tokenizer"),Tlt.forEach(t),Ilo=r(vLe," (ByT5 model)"),vLe.forEach(t),Nlo=i(S),Qn=n(S,"LI",{});var xk=s(Qn);mle=n(xk,"STRONG",{});var Mlt=s(mle);qlo=r(Mlt,"camembert"),Mlt.forEach(t),jlo=r(xk," \u2014 "),FB=n(xk,"A",{href:!0});var Elt=s(FB);Dlo=r(Elt,"CamembertTokenizer"),Elt.forEach(t),Glo=r(xk," or "),TB=n(xk,"A",{href:!0});var Clt=s(TB);Olo=r(Clt,"CamembertTokenizerFast"),Clt.forEach(t),Vlo=r(xk," (CamemBERT model)"),xk.forEach(t),Xlo=i(S),lh=n(S,"LI",{});var FLe=s(lh);gle=n(FLe,"STRONG",{});var wlt=s(gle);zlo=r(wlt,"canine"),wlt.forEach(t),Qlo=r(FLe," \u2014 "),MB=n(FLe,"A",{href:!0});var Alt=s(MB);Wlo=r(Alt,"CanineTokenizer"),Alt.forEach(t),Hlo=r(FLe," (CANINE model)"),FLe.forEach(t),Ulo=i(S),Wn=n(S,"LI",{});var $k=s(Wn);hle=n($k,"STRONG",{});var Llt=s(hle);Jlo=r(Llt,"clip"),Llt.forEach(t),Ylo=r($k," \u2014 "),EB=n($k,"A",{href:!0});var ylt=s(EB);Klo=r(ylt,"CLIPTokenizer"),ylt.forEach(t),Zlo=r($k," or "),CB=n($k,"A",{href:!0});var xlt=s(CB);eio=r(xlt,"CLIPTokenizerFast"),xlt.forEach(t),oio=r($k," (CLIP model)"),$k.forEach(t),rio=i(S),Hn=n(S,"LI",{});var kk=s(Hn);ple=n(kk,"STRONG",{});var $lt=s(ple);tio=r($lt,"codegen"),$lt.forEach(t),aio=r(kk," \u2014 "),wB=n(kk,"A",{href:!0});var klt=s(wB);nio=r(klt,"CodeGenTokenizer"),klt.forEach(t),sio=r(kk," or "),AB=n(kk,"A",{href:!0});var Slt=s(AB);lio=r(Slt,"CodeGenTokenizerFast"),Slt.forEach(t),iio=r(kk," (CodeGen model)"),kk.forEach(t),dio=i(S),Un=n(S,"LI",{});var Sk=s(Un);_le=n(Sk,"STRONG",{});var Rlt=s(_le);cio=r(Rlt,"convbert"),Rlt.forEach(t),fio=r(Sk," \u2014 "),LB=n(Sk,"A",{href:!0});var Plt=s(LB);mio=r(Plt,"ConvBertTokenizer"),Plt.forEach(t),gio=r(Sk," or "),yB=n(Sk,"A",{href:!0});var Blt=s(yB);hio=r(Blt,"ConvBertTokenizerFast"),Blt.forEach(t),pio=r(Sk," (ConvBERT model)"),Sk.forEach(t),_io=i(S),Jn=n(S,"LI",{});var Rk=s(Jn);ule=n(Rk,"STRONG",{});var Ilt=s(ule);uio=r(Ilt,"cpm"),Ilt.forEach(t),bio=r(Rk," \u2014 "),xB=n(Rk,"A",{href:!0});var Nlt=s(xB);vio=r(Nlt,"CpmTokenizer"),Nlt.forEach(t),Fio=r(Rk," or "),$B=n(Rk,"A",{href:!0});var qlt=s($B);Tio=r(qlt,"CpmTokenizerFast"),qlt.forEach(t),Mio=r(Rk," (CPM model)"),Rk.forEach(t),Eio=i(S),ih=n(S,"LI",{});var TLe=s(ih);ble=n(TLe,"STRONG",{});var jlt=s(ble);Cio=r(jlt,"ctrl"),jlt.forEach(t),wio=r(TLe," \u2014 "),kB=n(TLe,"A",{href:!0});var Dlt=s(kB);Aio=r(Dlt,"CTRLTokenizer"),Dlt.forEach(t),Lio=r(TLe," (CTRL model)"),TLe.forEach(t),yio=i(S),Yn=n(S,"LI",{});var Pk=s(Yn);vle=n(Pk,"STRONG",{});var Glt=s(vle);xio=r(Glt,"data2vec-text"),Glt.forEach(t),$io=r(Pk," \u2014 "),SB=n(Pk,"A",{href:!0});var Olt=s(SB);kio=r(Olt,"RobertaTokenizer"),Olt.forEach(t),Sio=r(Pk," or "),RB=n(Pk,"A",{href:!0});var Vlt=s(RB);Rio=r(Vlt,"RobertaTokenizerFast"),Vlt.forEach(t),Pio=r(Pk," (Data2VecText model)"),Pk.forEach(t),Bio=i(S),Kn=n(S,"LI",{});var Bk=s(Kn);Fle=n(Bk,"STRONG",{});var Xlt=s(Fle);Iio=r(Xlt,"deberta"),Xlt.forEach(t),Nio=r(Bk," \u2014 "),PB=n(Bk,"A",{href:!0});var zlt=s(PB);qio=r(zlt,"DebertaTokenizer"),zlt.forEach(t),jio=r(Bk," or "),BB=n(Bk,"A",{href:!0});var Qlt=s(BB);Dio=r(Qlt,"DebertaTokenizerFast"),Qlt.forEach(t),Gio=r(Bk," (DeBERTa model)"),Bk.forEach(t),Oio=i(S),Zn=n(S,"LI",{});var Ik=s(Zn);Tle=n(Ik,"STRONG",{});var Wlt=s(Tle);Vio=r(Wlt,"deberta-v2"),Wlt.forEach(t),Xio=r(Ik," \u2014 "),IB=n(Ik,"A",{href:!0});var Hlt=s(IB);zio=r(Hlt,"DebertaV2Tokenizer"),Hlt.forEach(t),Qio=r(Ik," or "),NB=n(Ik,"A",{href:!0});var Ult=s(NB);Wio=r(Ult,"DebertaV2TokenizerFast"),Ult.forEach(t),Hio=r(Ik," (DeBERTa-v2 model)"),Ik.forEach(t),Uio=i(S),es=n(S,"LI",{});var Nk=s(es);Mle=n(Nk,"STRONG",{});var Jlt=s(Mle);Jio=r(Jlt,"distilbert"),Jlt.forEach(t),Yio=r(Nk," \u2014 "),qB=n(Nk,"A",{href:!0});var Ylt=s(qB);Kio=r(Ylt,"DistilBertTokenizer"),Ylt.forEach(t),Zio=r(Nk," or "),jB=n(Nk,"A",{href:!0});var Klt=s(jB);edo=r(Klt,"DistilBertTokenizerFast"),Klt.forEach(t),odo=r(Nk," (DistilBERT model)"),Nk.forEach(t),rdo=i(S),os=n(S,"LI",{});var qk=s(os);Ele=n(qk,"STRONG",{});var Zlt=s(Ele);tdo=r(Zlt,"dpr"),Zlt.forEach(t),ado=r(qk," \u2014 "),DB=n(qk,"A",{href:!0});var eit=s(DB);ndo=r(eit,"DPRQuestionEncoderTokenizer"),eit.forEach(t),sdo=r(qk," or "),GB=n(qk,"A",{href:!0});var oit=s(GB);ldo=r(oit,"DPRQuestionEncoderTokenizerFast"),oit.forEach(t),ido=r(qk," (DPR model)"),qk.forEach(t),ddo=i(S),rs=n(S,"LI",{});var jk=s(rs);Cle=n(jk,"STRONG",{});var rit=s(Cle);cdo=r(rit,"electra"),rit.forEach(t),fdo=r(jk," \u2014 "),OB=n(jk,"A",{href:!0});var tit=s(OB);mdo=r(tit,"ElectraTokenizer"),tit.forEach(t),gdo=r(jk," or "),VB=n(jk,"A",{href:!0});var ait=s(VB);hdo=r(ait,"ElectraTokenizerFast"),ait.forEach(t),pdo=r(jk," (ELECTRA model)"),jk.forEach(t),_do=i(S),dh=n(S,"LI",{});var MLe=s(dh);wle=n(MLe,"STRONG",{});var nit=s(wle);udo=r(nit,"flaubert"),nit.forEach(t),bdo=r(MLe," \u2014 "),XB=n(MLe,"A",{href:!0});var sit=s(XB);vdo=r(sit,"FlaubertTokenizer"),sit.forEach(t),Fdo=r(MLe," (FlauBERT model)"),MLe.forEach(t),Tdo=i(S),ts=n(S,"LI",{});var Dk=s(ts);Ale=n(Dk,"STRONG",{});var lit=s(Ale);Mdo=r(lit,"fnet"),lit.forEach(t),Edo=r(Dk," \u2014 "),zB=n(Dk,"A",{href:!0});var iit=s(zB);Cdo=r(iit,"FNetTokenizer"),iit.forEach(t),wdo=r(Dk," or "),QB=n(Dk,"A",{href:!0});var dit=s(QB);Ado=r(dit,"FNetTokenizerFast"),dit.forEach(t),Ldo=r(Dk," (FNet model)"),Dk.forEach(t),ydo=i(S),ch=n(S,"LI",{});var ELe=s(ch);Lle=n(ELe,"STRONG",{});var cit=s(Lle);xdo=r(cit,"fsmt"),cit.forEach(t),$do=r(ELe," \u2014 "),WB=n(ELe,"A",{href:!0});var fit=s(WB);kdo=r(fit,"FSMTTokenizer"),fit.forEach(t),Sdo=r(ELe," (FairSeq Machine-Translation model)"),ELe.forEach(t),Rdo=i(S),as=n(S,"LI",{});var Gk=s(as);yle=n(Gk,"STRONG",{});var mit=s(yle);Pdo=r(mit,"funnel"),mit.forEach(t),Bdo=r(Gk," \u2014 "),HB=n(Gk,"A",{href:!0});var git=s(HB);Ido=r(git,"FunnelTokenizer"),git.forEach(t),Ndo=r(Gk," or "),UB=n(Gk,"A",{href:!0});var hit=s(UB);qdo=r(hit,"FunnelTokenizerFast"),hit.forEach(t),jdo=r(Gk," (Funnel Transformer model)"),Gk.forEach(t),Ddo=i(S),ns=n(S,"LI",{});var Ok=s(ns);xle=n(Ok,"STRONG",{});var pit=s(xle);Gdo=r(pit,"gpt2"),pit.forEach(t),Odo=r(Ok," \u2014 "),JB=n(Ok,"A",{href:!0});var _it=s(JB);Vdo=r(_it,"GPT2Tokenizer"),_it.forEach(t),Xdo=r(Ok," or "),YB=n(Ok,"A",{href:!0});var uit=s(YB);zdo=r(uit,"GPT2TokenizerFast"),uit.forEach(t),Qdo=r(Ok," (OpenAI GPT-2 model)"),Ok.forEach(t),Wdo=i(S),ss=n(S,"LI",{});var Vk=s(ss);$le=n(Vk,"STRONG",{});var bit=s($le);Hdo=r(bit,"gpt_neo"),bit.forEach(t),Udo=r(Vk," \u2014 "),KB=n(Vk,"A",{href:!0});var vit=s(KB);Jdo=r(vit,"GPT2Tokenizer"),vit.forEach(t),Ydo=r(Vk," or "),ZB=n(Vk,"A",{href:!0});var Fit=s(ZB);Kdo=r(Fit,"GPT2TokenizerFast"),Fit.forEach(t),Zdo=r(Vk," (GPT Neo model)"),Vk.forEach(t),eco=i(S),fh=n(S,"LI",{});var CLe=s(fh);kle=n(CLe,"STRONG",{});var Tit=s(kle);oco=r(Tit,"gpt_neox"),Tit.forEach(t),rco=r(CLe," \u2014 "),eI=n(CLe,"A",{href:!0});var Mit=s(eI);tco=r(Mit,"GPTNeoXTokenizerFast"),Mit.forEach(t),aco=r(CLe," (GPT NeoX model)"),CLe.forEach(t),nco=i(S),ls=n(S,"LI",{});var Xk=s(ls);Sle=n(Xk,"STRONG",{});var Eit=s(Sle);sco=r(Eit,"gptj"),Eit.forEach(t),lco=r(Xk," \u2014 "),oI=n(Xk,"A",{href:!0});var Cit=s(oI);ico=r(Cit,"GPT2Tokenizer"),Cit.forEach(t),dco=r(Xk," or "),rI=n(Xk,"A",{href:!0});var wit=s(rI);cco=r(wit,"GPT2TokenizerFast"),wit.forEach(t),fco=r(Xk," (GPT-J model)"),Xk.forEach(t),mco=i(S),is=n(S,"LI",{});var zk=s(is);Rle=n(zk,"STRONG",{});var Ait=s(Rle);gco=r(Ait,"groupvit"),Ait.forEach(t),hco=r(zk," \u2014 "),tI=n(zk,"A",{href:!0});var Lit=s(tI);pco=r(Lit,"CLIPTokenizer"),Lit.forEach(t),_co=r(zk," or "),aI=n(zk,"A",{href:!0});var yit=s(aI);uco=r(yit,"CLIPTokenizerFast"),yit.forEach(t),bco=r(zk," (GroupViT model)"),zk.forEach(t),vco=i(S),ds=n(S,"LI",{});var Qk=s(ds);Ple=n(Qk,"STRONG",{});var xit=s(Ple);Fco=r(xit,"herbert"),xit.forEach(t),Tco=r(Qk," \u2014 "),nI=n(Qk,"A",{href:!0});var $it=s(nI);Mco=r($it,"HerbertTokenizer"),$it.forEach(t),Eco=r(Qk," or "),sI=n(Qk,"A",{href:!0});var kit=s(sI);Cco=r(kit,"HerbertTokenizerFast"),kit.forEach(t),wco=r(Qk," (HerBERT model)"),Qk.forEach(t),Aco=i(S),mh=n(S,"LI",{});var wLe=s(mh);Ble=n(wLe,"STRONG",{});var Sit=s(Ble);Lco=r(Sit,"hubert"),Sit.forEach(t),yco=r(wLe," \u2014 "),lI=n(wLe,"A",{href:!0});var Rit=s(lI);xco=r(Rit,"Wav2Vec2CTCTokenizer"),Rit.forEach(t),$co=r(wLe," (Hubert model)"),wLe.forEach(t),kco=i(S),cs=n(S,"LI",{});var Wk=s(cs);Ile=n(Wk,"STRONG",{});var Pit=s(Ile);Sco=r(Pit,"ibert"),Pit.forEach(t),Rco=r(Wk," \u2014 "),iI=n(Wk,"A",{href:!0});var Bit=s(iI);Pco=r(Bit,"RobertaTokenizer"),Bit.forEach(t),Bco=r(Wk," or "),dI=n(Wk,"A",{href:!0});var Iit=s(dI);Ico=r(Iit,"RobertaTokenizerFast"),Iit.forEach(t),Nco=r(Wk," (I-BERT model)"),Wk.forEach(t),qco=i(S),fs=n(S,"LI",{});var Hk=s(fs);Nle=n(Hk,"STRONG",{});var Nit=s(Nle);jco=r(Nit,"layoutlm"),Nit.forEach(t),Dco=r(Hk," \u2014 "),cI=n(Hk,"A",{href:!0});var qit=s(cI);Gco=r(qit,"LayoutLMTokenizer"),qit.forEach(t),Oco=r(Hk," or "),fI=n(Hk,"A",{href:!0});var jit=s(fI);Vco=r(jit,"LayoutLMTokenizerFast"),jit.forEach(t),Xco=r(Hk," (LayoutLM model)"),Hk.forEach(t),zco=i(S),ms=n(S,"LI",{});var Uk=s(ms);qle=n(Uk,"STRONG",{});var Dit=s(qle);Qco=r(Dit,"layoutlmv2"),Dit.forEach(t),Wco=r(Uk," \u2014 "),mI=n(Uk,"A",{href:!0});var Git=s(mI);Hco=r(Git,"LayoutLMv2Tokenizer"),Git.forEach(t),Uco=r(Uk," or "),gI=n(Uk,"A",{href:!0});var Oit=s(gI);Jco=r(Oit,"LayoutLMv2TokenizerFast"),Oit.forEach(t),Yco=r(Uk," (LayoutLMv2 model)"),Uk.forEach(t),Kco=i(S),gs=n(S,"LI",{});var Jk=s(gs);jle=n(Jk,"STRONG",{});var Vit=s(jle);Zco=r(Vit,"layoutlmv3"),Vit.forEach(t),efo=r(Jk," \u2014 "),hI=n(Jk,"A",{href:!0});var Xit=s(hI);ofo=r(Xit,"LayoutLMv3Tokenizer"),Xit.forEach(t),rfo=r(Jk," or "),pI=n(Jk,"A",{href:!0});var zit=s(pI);tfo=r(zit,"LayoutLMv3TokenizerFast"),zit.forEach(t),afo=r(Jk," (LayoutLMv3 model)"),Jk.forEach(t),nfo=i(S),hs=n(S,"LI",{});var Yk=s(hs);Dle=n(Yk,"STRONG",{});var Qit=s(Dle);sfo=r(Qit,"layoutxlm"),Qit.forEach(t),lfo=r(Yk," \u2014 "),_I=n(Yk,"A",{href:!0});var Wit=s(_I);ifo=r(Wit,"LayoutXLMTokenizer"),Wit.forEach(t),dfo=r(Yk," or "),uI=n(Yk,"A",{href:!0});var Hit=s(uI);cfo=r(Hit,"LayoutXLMTokenizerFast"),Hit.forEach(t),ffo=r(Yk," (LayoutXLM model)"),Yk.forEach(t),mfo=i(S),ps=n(S,"LI",{});var Kk=s(ps);Gle=n(Kk,"STRONG",{});var Uit=s(Gle);gfo=r(Uit,"led"),Uit.forEach(t),hfo=r(Kk," \u2014 "),bI=n(Kk,"A",{href:!0});var Jit=s(bI);pfo=r(Jit,"LEDTokenizer"),Jit.forEach(t),_fo=r(Kk," or "),vI=n(Kk,"A",{href:!0});var Yit=s(vI);ufo=r(Yit,"LEDTokenizerFast"),Yit.forEach(t),bfo=r(Kk," (LED model)"),Kk.forEach(t),vfo=i(S),_s=n(S,"LI",{});var Zk=s(_s);Ole=n(Zk,"STRONG",{});var Kit=s(Ole);Ffo=r(Kit,"longformer"),Kit.forEach(t),Tfo=r(Zk," \u2014 "),FI=n(Zk,"A",{href:!0});var Zit=s(FI);Mfo=r(Zit,"LongformerTokenizer"),Zit.forEach(t),Efo=r(Zk," or "),TI=n(Zk,"A",{href:!0});var edt=s(TI);Cfo=r(edt,"LongformerTokenizerFast"),edt.forEach(t),wfo=r(Zk," (Longformer model)"),Zk.forEach(t),Afo=i(S),us=n(S,"LI",{});var eS=s(us);Vle=n(eS,"STRONG",{});var odt=s(Vle);Lfo=r(odt,"longt5"),odt.forEach(t),yfo=r(eS," \u2014 "),MI=n(eS,"A",{href:!0});var rdt=s(MI);xfo=r(rdt,"T5Tokenizer"),rdt.forEach(t),$fo=r(eS," or "),EI=n(eS,"A",{href:!0});var tdt=s(EI);kfo=r(tdt,"T5TokenizerFast"),tdt.forEach(t),Sfo=r(eS," (LongT5 model)"),eS.forEach(t),Rfo=i(S),gh=n(S,"LI",{});var ALe=s(gh);Xle=n(ALe,"STRONG",{});var adt=s(Xle);Pfo=r(adt,"luke"),adt.forEach(t),Bfo=r(ALe," \u2014 "),CI=n(ALe,"A",{href:!0});var ndt=s(CI);Ifo=r(ndt,"LukeTokenizer"),ndt.forEach(t),Nfo=r(ALe," (LUKE model)"),ALe.forEach(t),qfo=i(S),bs=n(S,"LI",{});var oS=s(bs);zle=n(oS,"STRONG",{});var sdt=s(zle);jfo=r(sdt,"lxmert"),sdt.forEach(t),Dfo=r(oS," \u2014 "),wI=n(oS,"A",{href:!0});var ldt=s(wI);Gfo=r(ldt,"LxmertTokenizer"),ldt.forEach(t),Ofo=r(oS," or "),AI=n(oS,"A",{href:!0});var idt=s(AI);Vfo=r(idt,"LxmertTokenizerFast"),idt.forEach(t),Xfo=r(oS," (LXMERT model)"),oS.forEach(t),zfo=i(S),hh=n(S,"LI",{});var LLe=s(hh);Qle=n(LLe,"STRONG",{});var ddt=s(Qle);Qfo=r(ddt,"m2m_100"),ddt.forEach(t),Wfo=r(LLe," \u2014 "),LI=n(LLe,"A",{href:!0});var cdt=s(LI);Hfo=r(cdt,"M2M100Tokenizer"),cdt.forEach(t),Ufo=r(LLe," (M2M100 model)"),LLe.forEach(t),Jfo=i(S),ph=n(S,"LI",{});var yLe=s(ph);Wle=n(yLe,"STRONG",{});var fdt=s(Wle);Yfo=r(fdt,"marian"),fdt.forEach(t),Kfo=r(yLe," \u2014 "),yI=n(yLe,"A",{href:!0});var mdt=s(yI);Zfo=r(mdt,"MarianTokenizer"),mdt.forEach(t),emo=r(yLe," (Marian model)"),yLe.forEach(t),omo=i(S),vs=n(S,"LI",{});var rS=s(vs);Hle=n(rS,"STRONG",{});var gdt=s(Hle);rmo=r(gdt,"mbart"),gdt.forEach(t),tmo=r(rS," \u2014 "),xI=n(rS,"A",{href:!0});var hdt=s(xI);amo=r(hdt,"MBartTokenizer"),hdt.forEach(t),nmo=r(rS," or "),$I=n(rS,"A",{href:!0});var pdt=s($I);smo=r(pdt,"MBartTokenizerFast"),pdt.forEach(t),lmo=r(rS," (mBART model)"),rS.forEach(t),imo=i(S),Fs=n(S,"LI",{});var tS=s(Fs);Ule=n(tS,"STRONG",{});var _dt=s(Ule);dmo=r(_dt,"mbart50"),_dt.forEach(t),cmo=r(tS," \u2014 "),kI=n(tS,"A",{href:!0});var udt=s(kI);fmo=r(udt,"MBart50Tokenizer"),udt.forEach(t),mmo=r(tS," or "),SI=n(tS,"A",{href:!0});var bdt=s(SI);gmo=r(bdt,"MBart50TokenizerFast"),bdt.forEach(t),hmo=r(tS," (mBART-50 model)"),tS.forEach(t),pmo=i(S),Ts=n(S,"LI",{});var aS=s(Ts);Jle=n(aS,"STRONG",{});var vdt=s(Jle);_mo=r(vdt,"megatron-bert"),vdt.forEach(t),umo=r(aS," \u2014 "),RI=n(aS,"A",{href:!0});var Fdt=s(RI);bmo=r(Fdt,"BertTokenizer"),Fdt.forEach(t),vmo=r(aS," or "),PI=n(aS,"A",{href:!0});var Tdt=s(PI);Fmo=r(Tdt,"BertTokenizerFast"),Tdt.forEach(t),Tmo=r(aS," (Megatron-BERT model)"),aS.forEach(t),Mmo=i(S),_h=n(S,"LI",{});var xLe=s(_h);Yle=n(xLe,"STRONG",{});var Mdt=s(Yle);Emo=r(Mdt,"mluke"),Mdt.forEach(t),Cmo=r(xLe," \u2014 "),BI=n(xLe,"A",{href:!0});var Edt=s(BI);wmo=r(Edt,"MLukeTokenizer"),Edt.forEach(t),Amo=r(xLe," (mLUKE model)"),xLe.forEach(t),Lmo=i(S),Ms=n(S,"LI",{});var nS=s(Ms);Kle=n(nS,"STRONG",{});var Cdt=s(Kle);ymo=r(Cdt,"mobilebert"),Cdt.forEach(t),xmo=r(nS," \u2014 "),II=n(nS,"A",{href:!0});var wdt=s(II);$mo=r(wdt,"MobileBertTokenizer"),wdt.forEach(t),kmo=r(nS," or "),NI=n(nS,"A",{href:!0});var Adt=s(NI);Smo=r(Adt,"MobileBertTokenizerFast"),Adt.forEach(t),Rmo=r(nS," (MobileBERT model)"),nS.forEach(t),Pmo=i(S),Es=n(S,"LI",{});var sS=s(Es);Zle=n(sS,"STRONG",{});var Ldt=s(Zle);Bmo=r(Ldt,"mpnet"),Ldt.forEach(t),Imo=r(sS," \u2014 "),qI=n(sS,"A",{href:!0});var ydt=s(qI);Nmo=r(ydt,"MPNetTokenizer"),ydt.forEach(t),qmo=r(sS," or "),jI=n(sS,"A",{href:!0});var xdt=s(jI);jmo=r(xdt,"MPNetTokenizerFast"),xdt.forEach(t),Dmo=r(sS," (MPNet model)"),sS.forEach(t),Gmo=i(S),Cs=n(S,"LI",{});var lS=s(Cs);eie=n(lS,"STRONG",{});var $dt=s(eie);Omo=r($dt,"mt5"),$dt.forEach(t),Vmo=r(lS," \u2014 "),DI=n(lS,"A",{href:!0});var kdt=s(DI);Xmo=r(kdt,"MT5Tokenizer"),kdt.forEach(t),zmo=r(lS," or "),GI=n(lS,"A",{href:!0});var Sdt=s(GI);Qmo=r(Sdt,"MT5TokenizerFast"),Sdt.forEach(t),Wmo=r(lS," (MT5 model)"),lS.forEach(t),Hmo=i(S),ws=n(S,"LI",{});var iS=s(ws);oie=n(iS,"STRONG",{});var Rdt=s(oie);Umo=r(Rdt,"mvp"),Rdt.forEach(t),Jmo=r(iS," \u2014 "),OI=n(iS,"A",{href:!0});var Pdt=s(OI);Ymo=r(Pdt,"MvpTokenizer"),Pdt.forEach(t),Kmo=r(iS," or "),VI=n(iS,"A",{href:!0});var Bdt=s(VI);Zmo=r(Bdt,"MvpTokenizerFast"),Bdt.forEach(t),ego=r(iS," (MVP model)"),iS.forEach(t),ogo=i(S),As=n(S,"LI",{});var dS=s(As);rie=n(dS,"STRONG",{});var Idt=s(rie);rgo=r(Idt,"nezha"),Idt.forEach(t),tgo=r(dS," \u2014 "),XI=n(dS,"A",{href:!0});var Ndt=s(XI);ago=r(Ndt,"BertTokenizer"),Ndt.forEach(t),ngo=r(dS," or "),zI=n(dS,"A",{href:!0});var qdt=s(zI);sgo=r(qdt,"BertTokenizerFast"),qdt.forEach(t),lgo=r(dS," (Nezha model)"),dS.forEach(t),igo=i(S),Ls=n(S,"LI",{});var cS=s(Ls);tie=n(cS,"STRONG",{});var jdt=s(tie);dgo=r(jdt,"nystromformer"),jdt.forEach(t),cgo=r(cS," \u2014 "),QI=n(cS,"A",{href:!0});var Ddt=s(QI);fgo=r(Ddt,"AlbertTokenizer"),Ddt.forEach(t),mgo=r(cS," or "),WI=n(cS,"A",{href:!0});var Gdt=s(WI);ggo=r(Gdt,"AlbertTokenizerFast"),Gdt.forEach(t),hgo=r(cS," (Nystr\xF6mformer model)"),cS.forEach(t),pgo=i(S),ys=n(S,"LI",{});var fS=s(ys);aie=n(fS,"STRONG",{});var Odt=s(aie);_go=r(Odt,"openai-gpt"),Odt.forEach(t),ugo=r(fS," \u2014 "),HI=n(fS,"A",{href:!0});var Vdt=s(HI);bgo=r(Vdt,"OpenAIGPTTokenizer"),Vdt.forEach(t),vgo=r(fS," or "),UI=n(fS,"A",{href:!0});var Xdt=s(UI);Fgo=r(Xdt,"OpenAIGPTTokenizerFast"),Xdt.forEach(t),Tgo=r(fS," (OpenAI GPT model)"),fS.forEach(t),Mgo=i(S),uh=n(S,"LI",{});var $Le=s(uh);nie=n($Le,"STRONG",{});var zdt=s(nie);Ego=r(zdt,"opt"),zdt.forEach(t),Cgo=r($Le," \u2014 "),JI=n($Le,"A",{href:!0});var Qdt=s(JI);wgo=r(Qdt,"GPT2Tokenizer"),Qdt.forEach(t),Ago=r($Le," (OPT model)"),$Le.forEach(t),Lgo=i(S),xs=n(S,"LI",{});var mS=s(xs);sie=n(mS,"STRONG",{});var Wdt=s(sie);ygo=r(Wdt,"pegasus"),Wdt.forEach(t),xgo=r(mS," \u2014 "),YI=n(mS,"A",{href:!0});var Hdt=s(YI);$go=r(Hdt,"PegasusTokenizer"),Hdt.forEach(t),kgo=r(mS," or "),KI=n(mS,"A",{href:!0});var Udt=s(KI);Sgo=r(Udt,"PegasusTokenizerFast"),Udt.forEach(t),Rgo=r(mS," (Pegasus model)"),mS.forEach(t),Pgo=i(S),bh=n(S,"LI",{});var kLe=s(bh);lie=n(kLe,"STRONG",{});var Jdt=s(lie);Bgo=r(Jdt,"perceiver"),Jdt.forEach(t),Igo=r(kLe," \u2014 "),ZI=n(kLe,"A",{href:!0});var Ydt=s(ZI);Ngo=r(Ydt,"PerceiverTokenizer"),Ydt.forEach(t),qgo=r(kLe," (Perceiver model)"),kLe.forEach(t),jgo=i(S),vh=n(S,"LI",{});var SLe=s(vh);iie=n(SLe,"STRONG",{});var Kdt=s(iie);Dgo=r(Kdt,"phobert"),Kdt.forEach(t),Ggo=r(SLe," \u2014 "),eN=n(SLe,"A",{href:!0});var Zdt=s(eN);Ogo=r(Zdt,"PhobertTokenizer"),Zdt.forEach(t),Vgo=r(SLe," (PhoBERT model)"),SLe.forEach(t),Xgo=i(S),Fh=n(S,"LI",{});var RLe=s(Fh);die=n(RLe,"STRONG",{});var ect=s(die);zgo=r(ect,"plbart"),ect.forEach(t),Qgo=r(RLe," \u2014 "),oN=n(RLe,"A",{href:!0});var oct=s(oN);Wgo=r(oct,"PLBartTokenizer"),oct.forEach(t),Hgo=r(RLe," (PLBart model)"),RLe.forEach(t),Ugo=i(S),Th=n(S,"LI",{});var PLe=s(Th);cie=n(PLe,"STRONG",{});var rct=s(cie);Jgo=r(rct,"prophetnet"),rct.forEach(t),Ygo=r(PLe," \u2014 "),rN=n(PLe,"A",{href:!0});var tct=s(rN);Kgo=r(tct,"ProphetNetTokenizer"),tct.forEach(t),Zgo=r(PLe," (ProphetNet model)"),PLe.forEach(t),eho=i(S),$s=n(S,"LI",{});var gS=s($s);fie=n(gS,"STRONG",{});var act=s(fie);oho=r(act,"qdqbert"),act.forEach(t),rho=r(gS," \u2014 "),tN=n(gS,"A",{href:!0});var nct=s(tN);tho=r(nct,"BertTokenizer"),nct.forEach(t),aho=r(gS," or "),aN=n(gS,"A",{href:!0});var sct=s(aN);nho=r(sct,"BertTokenizerFast"),sct.forEach(t),sho=r(gS," (QDQBert model)"),gS.forEach(t),lho=i(S),Mh=n(S,"LI",{});var BLe=s(Mh);mie=n(BLe,"STRONG",{});var lct=s(mie);iho=r(lct,"rag"),lct.forEach(t),dho=r(BLe," \u2014 "),nN=n(BLe,"A",{href:!0});var ict=s(nN);cho=r(ict,"RagTokenizer"),ict.forEach(t),fho=r(BLe," (RAG model)"),BLe.forEach(t),mho=i(S),ks=n(S,"LI",{});var hS=s(ks);gie=n(hS,"STRONG",{});var dct=s(gie);gho=r(dct,"realm"),dct.forEach(t),hho=r(hS," \u2014 "),sN=n(hS,"A",{href:!0});var cct=s(sN);pho=r(cct,"RealmTokenizer"),cct.forEach(t),_ho=r(hS," or "),lN=n(hS,"A",{href:!0});var fct=s(lN);uho=r(fct,"RealmTokenizerFast"),fct.forEach(t),bho=r(hS," (REALM model)"),hS.forEach(t),vho=i(S),Ss=n(S,"LI",{});var pS=s(Ss);hie=n(pS,"STRONG",{});var mct=s(hie);Fho=r(mct,"reformer"),mct.forEach(t),Tho=r(pS," \u2014 "),iN=n(pS,"A",{href:!0});var gct=s(iN);Mho=r(gct,"ReformerTokenizer"),gct.forEach(t),Eho=r(pS," or "),dN=n(pS,"A",{href:!0});var hct=s(dN);Cho=r(hct,"ReformerTokenizerFast"),hct.forEach(t),who=r(pS," (Reformer model)"),pS.forEach(t),Aho=i(S),Rs=n(S,"LI",{});var _S=s(Rs);pie=n(_S,"STRONG",{});var pct=s(pie);Lho=r(pct,"rembert"),pct.forEach(t),yho=r(_S," \u2014 "),cN=n(_S,"A",{href:!0});var _ct=s(cN);xho=r(_ct,"RemBertTokenizer"),_ct.forEach(t),$ho=r(_S," or "),fN=n(_S,"A",{href:!0});var uct=s(fN);kho=r(uct,"RemBertTokenizerFast"),uct.forEach(t),Sho=r(_S," (RemBERT model)"),_S.forEach(t),Rho=i(S),Ps=n(S,"LI",{});var uS=s(Ps);_ie=n(uS,"STRONG",{});var bct=s(_ie);Pho=r(bct,"retribert"),bct.forEach(t),Bho=r(uS," \u2014 "),mN=n(uS,"A",{href:!0});var vct=s(mN);Iho=r(vct,"RetriBertTokenizer"),vct.forEach(t),Nho=r(uS," or "),gN=n(uS,"A",{href:!0});var Fct=s(gN);qho=r(Fct,"RetriBertTokenizerFast"),Fct.forEach(t),jho=r(uS," (RetriBERT model)"),uS.forEach(t),Dho=i(S),Bs=n(S,"LI",{});var bS=s(Bs);uie=n(bS,"STRONG",{});var Tct=s(uie);Gho=r(Tct,"roberta"),Tct.forEach(t),Oho=r(bS," \u2014 "),hN=n(bS,"A",{href:!0});var Mct=s(hN);Vho=r(Mct,"RobertaTokenizer"),Mct.forEach(t),Xho=r(bS," or "),pN=n(bS,"A",{href:!0});var Ect=s(pN);zho=r(Ect,"RobertaTokenizerFast"),Ect.forEach(t),Qho=r(bS," (RoBERTa model)"),bS.forEach(t),Who=i(S),Is=n(S,"LI",{});var vS=s(Is);bie=n(vS,"STRONG",{});var Cct=s(bie);Hho=r(Cct,"roformer"),Cct.forEach(t),Uho=r(vS," \u2014 "),_N=n(vS,"A",{href:!0});var wct=s(_N);Jho=r(wct,"RoFormerTokenizer"),wct.forEach(t),Yho=r(vS," or "),uN=n(vS,"A",{href:!0});var Act=s(uN);Kho=r(Act,"RoFormerTokenizerFast"),Act.forEach(t),Zho=r(vS," (RoFormer model)"),vS.forEach(t),epo=i(S),Eh=n(S,"LI",{});var ILe=s(Eh);vie=n(ILe,"STRONG",{});var Lct=s(vie);opo=r(Lct,"speech_to_text"),Lct.forEach(t),rpo=r(ILe," \u2014 "),bN=n(ILe,"A",{href:!0});var yct=s(bN);tpo=r(yct,"Speech2TextTokenizer"),yct.forEach(t),apo=r(ILe," (Speech2Text model)"),ILe.forEach(t),npo=i(S),Ch=n(S,"LI",{});var NLe=s(Ch);Fie=n(NLe,"STRONG",{});var xct=s(Fie);spo=r(xct,"speech_to_text_2"),xct.forEach(t),lpo=r(NLe," \u2014 "),vN=n(NLe,"A",{href:!0});var $ct=s(vN);ipo=r($ct,"Speech2Text2Tokenizer"),$ct.forEach(t),dpo=r(NLe," (Speech2Text2 model)"),NLe.forEach(t),cpo=i(S),Ns=n(S,"LI",{});var FS=s(Ns);Tie=n(FS,"STRONG",{});var kct=s(Tie);fpo=r(kct,"splinter"),kct.forEach(t),mpo=r(FS," \u2014 "),FN=n(FS,"A",{href:!0});var Sct=s(FN);gpo=r(Sct,"SplinterTokenizer"),Sct.forEach(t),hpo=r(FS," or "),TN=n(FS,"A",{href:!0});var Rct=s(TN);ppo=r(Rct,"SplinterTokenizerFast"),Rct.forEach(t),_po=r(FS," (Splinter model)"),FS.forEach(t),upo=i(S),qs=n(S,"LI",{});var TS=s(qs);Mie=n(TS,"STRONG",{});var Pct=s(Mie);bpo=r(Pct,"squeezebert"),Pct.forEach(t),vpo=r(TS," \u2014 "),MN=n(TS,"A",{href:!0});var Bct=s(MN);Fpo=r(Bct,"SqueezeBertTokenizer"),Bct.forEach(t),Tpo=r(TS," or "),EN=n(TS,"A",{href:!0});var Ict=s(EN);Mpo=r(Ict,"SqueezeBertTokenizerFast"),Ict.forEach(t),Epo=r(TS," (SqueezeBERT model)"),TS.forEach(t),Cpo=i(S),js=n(S,"LI",{});var MS=s(js);Eie=n(MS,"STRONG",{});var Nct=s(Eie);wpo=r(Nct,"t5"),Nct.forEach(t),Apo=r(MS," \u2014 "),CN=n(MS,"A",{href:!0});var qct=s(CN);Lpo=r(qct,"T5Tokenizer"),qct.forEach(t),ypo=r(MS," or "),wN=n(MS,"A",{href:!0});var jct=s(wN);xpo=r(jct,"T5TokenizerFast"),jct.forEach(t),$po=r(MS," (T5 model)"),MS.forEach(t),kpo=i(S),wh=n(S,"LI",{});var qLe=s(wh);Cie=n(qLe,"STRONG",{});var Dct=s(Cie);Spo=r(Dct,"tapas"),Dct.forEach(t),Rpo=r(qLe," \u2014 "),AN=n(qLe,"A",{href:!0});var Gct=s(AN);Ppo=r(Gct,"TapasTokenizer"),Gct.forEach(t),Bpo=r(qLe," (TAPAS model)"),qLe.forEach(t),Ipo=i(S),Ah=n(S,"LI",{});var jLe=s(Ah);wie=n(jLe,"STRONG",{});var Oct=s(wie);Npo=r(Oct,"tapex"),Oct.forEach(t),qpo=r(jLe," \u2014 "),LN=n(jLe,"A",{href:!0});var Vct=s(LN);jpo=r(Vct,"TapexTokenizer"),Vct.forEach(t),Dpo=r(jLe," (TAPEX model)"),jLe.forEach(t),Gpo=i(S),Lh=n(S,"LI",{});var DLe=s(Lh);Aie=n(DLe,"STRONG",{});var Xct=s(Aie);Opo=r(Xct,"transfo-xl"),Xct.forEach(t),Vpo=r(DLe," \u2014 "),yN=n(DLe,"A",{href:!0});var zct=s(yN);Xpo=r(zct,"TransfoXLTokenizer"),zct.forEach(t),zpo=r(DLe," (Transformer-XL model)"),DLe.forEach(t),Qpo=i(S),Ds=n(S,"LI",{});var ES=s(Ds);Lie=n(ES,"STRONG",{});var Qct=s(Lie);Wpo=r(Qct,"vilt"),Qct.forEach(t),Hpo=r(ES," \u2014 "),xN=n(ES,"A",{href:!0});var Wct=s(xN);Upo=r(Wct,"BertTokenizer"),Wct.forEach(t),Jpo=r(ES," or "),$N=n(ES,"A",{href:!0});var Hct=s($N);Ypo=r(Hct,"BertTokenizerFast"),Hct.forEach(t),Kpo=r(ES," (ViLT model)"),ES.forEach(t),Zpo=i(S),Gs=n(S,"LI",{});var CS=s(Gs);yie=n(CS,"STRONG",{});var Uct=s(yie);e_o=r(Uct,"visual_bert"),Uct.forEach(t),o_o=r(CS," \u2014 "),kN=n(CS,"A",{href:!0});var Jct=s(kN);r_o=r(Jct,"BertTokenizer"),Jct.forEach(t),t_o=r(CS," or "),SN=n(CS,"A",{href:!0});var Yct=s(SN);a_o=r(Yct,"BertTokenizerFast"),Yct.forEach(t),n_o=r(CS," (VisualBERT model)"),CS.forEach(t),s_o=i(S),yh=n(S,"LI",{});var GLe=s(yh);xie=n(GLe,"STRONG",{});var Kct=s(xie);l_o=r(Kct,"wav2vec2"),Kct.forEach(t),i_o=r(GLe," \u2014 "),RN=n(GLe,"A",{href:!0});var Zct=s(RN);d_o=r(Zct,"Wav2Vec2CTCTokenizer"),Zct.forEach(t),c_o=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),f_o=i(S),xh=n(S,"LI",{});var OLe=s(xh);$ie=n(OLe,"STRONG",{});var eft=s($ie);m_o=r(eft,"wav2vec2-conformer"),eft.forEach(t),g_o=r(OLe," \u2014 "),PN=n(OLe,"A",{href:!0});var oft=s(PN);h_o=r(oft,"Wav2Vec2CTCTokenizer"),oft.forEach(t),p_o=r(OLe," (Wav2Vec2-Conformer model)"),OLe.forEach(t),__o=i(S),$h=n(S,"LI",{});var VLe=s($h);kie=n(VLe,"STRONG",{});var rft=s(kie);u_o=r(rft,"wav2vec2_phoneme"),rft.forEach(t),b_o=r(VLe," \u2014 "),BN=n(VLe,"A",{href:!0});var tft=s(BN);v_o=r(tft,"Wav2Vec2PhonemeCTCTokenizer"),tft.forEach(t),F_o=r(VLe," (Wav2Vec2Phoneme model)"),VLe.forEach(t),T_o=i(S),Os=n(S,"LI",{});var wS=s(Os);Sie=n(wS,"STRONG",{});var aft=s(Sie);M_o=r(aft,"xglm"),aft.forEach(t),E_o=r(wS," \u2014 "),IN=n(wS,"A",{href:!0});var nft=s(IN);C_o=r(nft,"XGLMTokenizer"),nft.forEach(t),w_o=r(wS," or "),NN=n(wS,"A",{href:!0});var sft=s(NN);A_o=r(sft,"XGLMTokenizerFast"),sft.forEach(t),L_o=r(wS," (XGLM model)"),wS.forEach(t),y_o=i(S),kh=n(S,"LI",{});var XLe=s(kh);Rie=n(XLe,"STRONG",{});var lft=s(Rie);x_o=r(lft,"xlm"),lft.forEach(t),$_o=r(XLe," \u2014 "),qN=n(XLe,"A",{href:!0});var ift=s(qN);k_o=r(ift,"XLMTokenizer"),ift.forEach(t),S_o=r(XLe," (XLM model)"),XLe.forEach(t),R_o=i(S),Sh=n(S,"LI",{});var zLe=s(Sh);Pie=n(zLe,"STRONG",{});var dft=s(Pie);P_o=r(dft,"xlm-prophetnet"),dft.forEach(t),B_o=r(zLe," \u2014 "),jN=n(zLe,"A",{href:!0});var cft=s(jN);I_o=r(cft,"XLMProphetNetTokenizer"),cft.forEach(t),N_o=r(zLe," (XLM-ProphetNet model)"),zLe.forEach(t),q_o=i(S),Vs=n(S,"LI",{});var AS=s(Vs);Bie=n(AS,"STRONG",{});var fft=s(Bie);j_o=r(fft,"xlm-roberta"),fft.forEach(t),D_o=r(AS," \u2014 "),DN=n(AS,"A",{href:!0});var mft=s(DN);G_o=r(mft,"XLMRobertaTokenizer"),mft.forEach(t),O_o=r(AS," or "),GN=n(AS,"A",{href:!0});var gft=s(GN);V_o=r(gft,"XLMRobertaTokenizerFast"),gft.forEach(t),X_o=r(AS," (XLM-RoBERTa model)"),AS.forEach(t),z_o=i(S),Xs=n(S,"LI",{});var LS=s(Xs);Iie=n(LS,"STRONG",{});var hft=s(Iie);Q_o=r(hft,"xlm-roberta-xl"),hft.forEach(t),W_o=r(LS," \u2014 "),ON=n(LS,"A",{href:!0});var pft=s(ON);H_o=r(pft,"RobertaTokenizer"),pft.forEach(t),U_o=r(LS," or "),VN=n(LS,"A",{href:!0});var _ft=s(VN);J_o=r(_ft,"RobertaTokenizerFast"),_ft.forEach(t),Y_o=r(LS," (XLM-RoBERTa-XL model)"),LS.forEach(t),K_o=i(S),zs=n(S,"LI",{});var yS=s(zs);Nie=n(yS,"STRONG",{});var uft=s(Nie);Z_o=r(uft,"xlnet"),uft.forEach(t),euo=r(yS," \u2014 "),XN=n(yS,"A",{href:!0});var bft=s(XN);ouo=r(bft,"XLNetTokenizer"),bft.forEach(t),ruo=r(yS," or "),zN=n(yS,"A",{href:!0});var vft=s(zN);tuo=r(vft,"XLNetTokenizerFast"),vft.forEach(t),auo=r(yS," (XLNet model)"),yS.forEach(t),nuo=i(S),Qs=n(S,"LI",{});var xS=s(Qs);qie=n(xS,"STRONG",{});var Fft=s(qie);suo=r(Fft,"yoso"),Fft.forEach(t),luo=r(xS," \u2014 "),QN=n(xS,"A",{href:!0});var Tft=s(QN);iuo=r(Tft,"AlbertTokenizer"),Tft.forEach(t),duo=r(xS," or "),WN=n(xS,"A",{href:!0});var Mft=s(WN);cuo=r(Mft,"AlbertTokenizerFast"),Mft.forEach(t),fuo=r(xS," (YOSO model)"),xS.forEach(t),S.forEach(t),muo=i(Zs),T(Rh.$$.fragment,Zs),Zs.forEach(t),guo=i(Ks),Ph=n(Ks,"DIV",{class:!0});var lQe=s(Ph);T(u7.$$.fragment,lQe),huo=i(lQe),jie=n(lQe,"P",{});var Eft=s(jie);puo=r(Eft,"Register a new tokenizer in this mapping."),Eft.forEach(t),lQe.forEach(t),Ks.forEach(t),sXe=i(f),qi=n(f,"H2",{class:!0});var iQe=s(qi);Bh=n(iQe,"A",{id:!0,class:!0,href:!0});var Cft=s(Bh);Die=n(Cft,"SPAN",{});var wft=s(Die);T(b7.$$.fragment,wft),wft.forEach(t),Cft.forEach(t),_uo=i(iQe),Gie=n(iQe,"SPAN",{});var Aft=s(Gie);uuo=r(Aft,"AutoFeatureExtractor"),Aft.forEach(t),iQe.forEach(t),lXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(v7.$$.fragment,el),buo=i(el),F7=n(el,"P",{});var dQe=s(F7);vuo=r(dQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HN=n(dQe,"A",{href:!0});var Lft=s(HN);Fuo=r(Lft,"AutoFeatureExtractor.from_pretrained()"),Lft.forEach(t),Tuo=r(dQe," class method."),dQe.forEach(t),Muo=i(el),T7=n(el,"P",{});var cQe=s(T7);Euo=r(cQe,"This class cannot be instantiated directly using "),Oie=n(cQe,"CODE",{});var yft=s(Oie);Cuo=r(yft,"__init__()"),yft.forEach(t),wuo=r(cQe," (throws an error)."),cQe.forEach(t),Auo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(M7.$$.fragment,na),Luo=i(na),Vie=n(na,"P",{});var xft=s(Vie);yuo=r(xft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xft.forEach(t),xuo=i(na),Ba=n(na,"P",{});var lw=s(Ba);$uo=r(lw,"The feature extractor class to instantiate is selected based on the "),Xie=n(lw,"CODE",{});var $ft=s(Xie);kuo=r($ft,"model_type"),$ft.forEach(t),Suo=r(lw,` property of the config object
(either passed as an argument or loaded from `),zie=n(lw,"CODE",{});var kft=s(zie);Ruo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Puo=r(lw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qie=n(lw,"CODE",{});var Sft=s(Qie);Buo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Iuo=r(lw,":"),lw.forEach(t),Nuo=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var QLe=s(Ih);Wie=n(QLe,"STRONG",{});var Rft=s(Wie);quo=r(Rft,"beit"),Rft.forEach(t),juo=r(QLe," \u2014 "),UN=n(QLe,"A",{href:!0});var Pft=s(UN);Duo=r(Pft,"BeitFeatureExtractor"),Pft.forEach(t),Guo=r(QLe," (BEiT model)"),QLe.forEach(t),Ouo=i(K),Nh=n(K,"LI",{});var WLe=s(Nh);Hie=n(WLe,"STRONG",{});var Bft=s(Hie);Vuo=r(Bft,"clip"),Bft.forEach(t),Xuo=r(WLe," \u2014 "),JN=n(WLe,"A",{href:!0});var Ift=s(JN);zuo=r(Ift,"CLIPFeatureExtractor"),Ift.forEach(t),Quo=r(WLe," (CLIP model)"),WLe.forEach(t),Wuo=i(K),qh=n(K,"LI",{});var HLe=s(qh);Uie=n(HLe,"STRONG",{});var Nft=s(Uie);Huo=r(Nft,"convnext"),Nft.forEach(t),Uuo=r(HLe," \u2014 "),YN=n(HLe,"A",{href:!0});var qft=s(YN);Juo=r(qft,"ConvNextFeatureExtractor"),qft.forEach(t),Yuo=r(HLe," (ConvNeXT model)"),HLe.forEach(t),Kuo=i(K),jh=n(K,"LI",{});var ULe=s(jh);Jie=n(ULe,"STRONG",{});var jft=s(Jie);Zuo=r(jft,"cvt"),jft.forEach(t),e1o=r(ULe," \u2014 "),KN=n(ULe,"A",{href:!0});var Dft=s(KN);o1o=r(Dft,"ConvNextFeatureExtractor"),Dft.forEach(t),r1o=r(ULe," (CvT model)"),ULe.forEach(t),t1o=i(K),Dh=n(K,"LI",{});var JLe=s(Dh);Yie=n(JLe,"STRONG",{});var Gft=s(Yie);a1o=r(Gft,"data2vec-audio"),Gft.forEach(t),n1o=r(JLe," \u2014 "),ZN=n(JLe,"A",{href:!0});var Oft=s(ZN);s1o=r(Oft,"Wav2Vec2FeatureExtractor"),Oft.forEach(t),l1o=r(JLe," (Data2VecAudio model)"),JLe.forEach(t),i1o=i(K),Gh=n(K,"LI",{});var YLe=s(Gh);Kie=n(YLe,"STRONG",{});var Vft=s(Kie);d1o=r(Vft,"data2vec-vision"),Vft.forEach(t),c1o=r(YLe," \u2014 "),eq=n(YLe,"A",{href:!0});var Xft=s(eq);f1o=r(Xft,"BeitFeatureExtractor"),Xft.forEach(t),m1o=r(YLe," (Data2VecVision model)"),YLe.forEach(t),g1o=i(K),Oh=n(K,"LI",{});var KLe=s(Oh);Zie=n(KLe,"STRONG",{});var zft=s(Zie);h1o=r(zft,"deit"),zft.forEach(t),p1o=r(KLe," \u2014 "),oq=n(KLe,"A",{href:!0});var Qft=s(oq);_1o=r(Qft,"DeiTFeatureExtractor"),Qft.forEach(t),u1o=r(KLe," (DeiT model)"),KLe.forEach(t),b1o=i(K),Vh=n(K,"LI",{});var ZLe=s(Vh);ede=n(ZLe,"STRONG",{});var Wft=s(ede);v1o=r(Wft,"detr"),Wft.forEach(t),F1o=r(ZLe," \u2014 "),rq=n(ZLe,"A",{href:!0});var Hft=s(rq);T1o=r(Hft,"DetrFeatureExtractor"),Hft.forEach(t),M1o=r(ZLe," (DETR model)"),ZLe.forEach(t),E1o=i(K),Xh=n(K,"LI",{});var eye=s(Xh);ode=n(eye,"STRONG",{});var Uft=s(ode);C1o=r(Uft,"dpt"),Uft.forEach(t),w1o=r(eye," \u2014 "),tq=n(eye,"A",{href:!0});var Jft=s(tq);A1o=r(Jft,"DPTFeatureExtractor"),Jft.forEach(t),L1o=r(eye," (DPT model)"),eye.forEach(t),y1o=i(K),zh=n(K,"LI",{});var oye=s(zh);rde=n(oye,"STRONG",{});var Yft=s(rde);x1o=r(Yft,"flava"),Yft.forEach(t),$1o=r(oye," \u2014 "),aq=n(oye,"A",{href:!0});var Kft=s(aq);k1o=r(Kft,"FlavaFeatureExtractor"),Kft.forEach(t),S1o=r(oye," (FLAVA model)"),oye.forEach(t),R1o=i(K),Qh=n(K,"LI",{});var rye=s(Qh);tde=n(rye,"STRONG",{});var Zft=s(tde);P1o=r(Zft,"glpn"),Zft.forEach(t),B1o=r(rye," \u2014 "),nq=n(rye,"A",{href:!0});var emt=s(nq);I1o=r(emt,"GLPNFeatureExtractor"),emt.forEach(t),N1o=r(rye," (GLPN model)"),rye.forEach(t),q1o=i(K),Wh=n(K,"LI",{});var tye=s(Wh);ade=n(tye,"STRONG",{});var omt=s(ade);j1o=r(omt,"groupvit"),omt.forEach(t),D1o=r(tye," \u2014 "),sq=n(tye,"A",{href:!0});var rmt=s(sq);G1o=r(rmt,"CLIPFeatureExtractor"),rmt.forEach(t),O1o=r(tye," (GroupViT model)"),tye.forEach(t),V1o=i(K),Hh=n(K,"LI",{});var aye=s(Hh);nde=n(aye,"STRONG",{});var tmt=s(nde);X1o=r(tmt,"hubert"),tmt.forEach(t),z1o=r(aye," \u2014 "),lq=n(aye,"A",{href:!0});var amt=s(lq);Q1o=r(amt,"Wav2Vec2FeatureExtractor"),amt.forEach(t),W1o=r(aye," (Hubert model)"),aye.forEach(t),H1o=i(K),Uh=n(K,"LI",{});var nye=s(Uh);sde=n(nye,"STRONG",{});var nmt=s(sde);U1o=r(nmt,"imagegpt"),nmt.forEach(t),J1o=r(nye," \u2014 "),iq=n(nye,"A",{href:!0});var smt=s(iq);Y1o=r(smt,"ImageGPTFeatureExtractor"),smt.forEach(t),K1o=r(nye," (ImageGPT model)"),nye.forEach(t),Z1o=i(K),Jh=n(K,"LI",{});var sye=s(Jh);lde=n(sye,"STRONG",{});var lmt=s(lde);e2o=r(lmt,"layoutlmv2"),lmt.forEach(t),o2o=r(sye," \u2014 "),dq=n(sye,"A",{href:!0});var imt=s(dq);r2o=r(imt,"LayoutLMv2FeatureExtractor"),imt.forEach(t),t2o=r(sye," (LayoutLMv2 model)"),sye.forEach(t),a2o=i(K),Yh=n(K,"LI",{});var lye=s(Yh);ide=n(lye,"STRONG",{});var dmt=s(ide);n2o=r(dmt,"layoutlmv3"),dmt.forEach(t),s2o=r(lye," \u2014 "),cq=n(lye,"A",{href:!0});var cmt=s(cq);l2o=r(cmt,"LayoutLMv3FeatureExtractor"),cmt.forEach(t),i2o=r(lye," (LayoutLMv3 model)"),lye.forEach(t),d2o=i(K),Kh=n(K,"LI",{});var iye=s(Kh);dde=n(iye,"STRONG",{});var fmt=s(dde);c2o=r(fmt,"levit"),fmt.forEach(t),f2o=r(iye," \u2014 "),fq=n(iye,"A",{href:!0});var mmt=s(fq);m2o=r(mmt,"LevitFeatureExtractor"),mmt.forEach(t),g2o=r(iye," (LeViT model)"),iye.forEach(t),h2o=i(K),Zh=n(K,"LI",{});var dye=s(Zh);cde=n(dye,"STRONG",{});var gmt=s(cde);p2o=r(gmt,"maskformer"),gmt.forEach(t),_2o=r(dye," \u2014 "),mq=n(dye,"A",{href:!0});var hmt=s(mq);u2o=r(hmt,"MaskFormerFeatureExtractor"),hmt.forEach(t),b2o=r(dye," (MaskFormer model)"),dye.forEach(t),v2o=i(K),ep=n(K,"LI",{});var cye=s(ep);fde=n(cye,"STRONG",{});var pmt=s(fde);F2o=r(pmt,"mctct"),pmt.forEach(t),T2o=r(cye," \u2014 "),gq=n(cye,"A",{href:!0});var _mt=s(gq);M2o=r(_mt,"MCTCTFeatureExtractor"),_mt.forEach(t),E2o=r(cye," (M-CTC-T model)"),cye.forEach(t),C2o=i(K),op=n(K,"LI",{});var fye=s(op);mde=n(fye,"STRONG",{});var umt=s(mde);w2o=r(umt,"mobilevit"),umt.forEach(t),A2o=r(fye," \u2014 "),hq=n(fye,"A",{href:!0});var bmt=s(hq);L2o=r(bmt,"MobileViTFeatureExtractor"),bmt.forEach(t),y2o=r(fye," (MobileViT model)"),fye.forEach(t),x2o=i(K),rp=n(K,"LI",{});var mye=s(rp);gde=n(mye,"STRONG",{});var vmt=s(gde);$2o=r(vmt,"perceiver"),vmt.forEach(t),k2o=r(mye," \u2014 "),pq=n(mye,"A",{href:!0});var Fmt=s(pq);S2o=r(Fmt,"PerceiverFeatureExtractor"),Fmt.forEach(t),R2o=r(mye," (Perceiver model)"),mye.forEach(t),P2o=i(K),tp=n(K,"LI",{});var gye=s(tp);hde=n(gye,"STRONG",{});var Tmt=s(hde);B2o=r(Tmt,"poolformer"),Tmt.forEach(t),I2o=r(gye," \u2014 "),_q=n(gye,"A",{href:!0});var Mmt=s(_q);N2o=r(Mmt,"PoolFormerFeatureExtractor"),Mmt.forEach(t),q2o=r(gye," (PoolFormer model)"),gye.forEach(t),j2o=i(K),ap=n(K,"LI",{});var hye=s(ap);pde=n(hye,"STRONG",{});var Emt=s(pde);D2o=r(Emt,"regnet"),Emt.forEach(t),G2o=r(hye," \u2014 "),uq=n(hye,"A",{href:!0});var Cmt=s(uq);O2o=r(Cmt,"ConvNextFeatureExtractor"),Cmt.forEach(t),V2o=r(hye," (RegNet model)"),hye.forEach(t),X2o=i(K),np=n(K,"LI",{});var pye=s(np);_de=n(pye,"STRONG",{});var wmt=s(_de);z2o=r(wmt,"resnet"),wmt.forEach(t),Q2o=r(pye," \u2014 "),bq=n(pye,"A",{href:!0});var Amt=s(bq);W2o=r(Amt,"ConvNextFeatureExtractor"),Amt.forEach(t),H2o=r(pye," (ResNet model)"),pye.forEach(t),U2o=i(K),sp=n(K,"LI",{});var _ye=s(sp);ude=n(_ye,"STRONG",{});var Lmt=s(ude);J2o=r(Lmt,"segformer"),Lmt.forEach(t),Y2o=r(_ye," \u2014 "),vq=n(_ye,"A",{href:!0});var ymt=s(vq);K2o=r(ymt,"SegformerFeatureExtractor"),ymt.forEach(t),Z2o=r(_ye," (SegFormer model)"),_ye.forEach(t),ebo=i(K),lp=n(K,"LI",{});var uye=s(lp);bde=n(uye,"STRONG",{});var xmt=s(bde);obo=r(xmt,"speech_to_text"),xmt.forEach(t),rbo=r(uye," \u2014 "),Fq=n(uye,"A",{href:!0});var $mt=s(Fq);tbo=r($mt,"Speech2TextFeatureExtractor"),$mt.forEach(t),abo=r(uye," (Speech2Text model)"),uye.forEach(t),nbo=i(K),ip=n(K,"LI",{});var bye=s(ip);vde=n(bye,"STRONG",{});var kmt=s(vde);sbo=r(kmt,"swin"),kmt.forEach(t),lbo=r(bye," \u2014 "),Tq=n(bye,"A",{href:!0});var Smt=s(Tq);ibo=r(Smt,"ViTFeatureExtractor"),Smt.forEach(t),dbo=r(bye," (Swin Transformer model)"),bye.forEach(t),cbo=i(K),dp=n(K,"LI",{});var vye=s(dp);Fde=n(vye,"STRONG",{});var Rmt=s(Fde);fbo=r(Rmt,"van"),Rmt.forEach(t),mbo=r(vye," \u2014 "),Mq=n(vye,"A",{href:!0});var Pmt=s(Mq);gbo=r(Pmt,"ConvNextFeatureExtractor"),Pmt.forEach(t),hbo=r(vye," (VAN model)"),vye.forEach(t),pbo=i(K),cp=n(K,"LI",{});var Fye=s(cp);Tde=n(Fye,"STRONG",{});var Bmt=s(Tde);_bo=r(Bmt,"vilt"),Bmt.forEach(t),ubo=r(Fye," \u2014 "),Eq=n(Fye,"A",{href:!0});var Imt=s(Eq);bbo=r(Imt,"ViltFeatureExtractor"),Imt.forEach(t),vbo=r(Fye," (ViLT model)"),Fye.forEach(t),Fbo=i(K),fp=n(K,"LI",{});var Tye=s(fp);Mde=n(Tye,"STRONG",{});var Nmt=s(Mde);Tbo=r(Nmt,"vit"),Nmt.forEach(t),Mbo=r(Tye," \u2014 "),Cq=n(Tye,"A",{href:!0});var qmt=s(Cq);Ebo=r(qmt,"ViTFeatureExtractor"),qmt.forEach(t),Cbo=r(Tye," (ViT model)"),Tye.forEach(t),wbo=i(K),mp=n(K,"LI",{});var Mye=s(mp);Ede=n(Mye,"STRONG",{});var jmt=s(Ede);Abo=r(jmt,"vit_mae"),jmt.forEach(t),Lbo=r(Mye," \u2014 "),wq=n(Mye,"A",{href:!0});var Dmt=s(wq);ybo=r(Dmt,"ViTFeatureExtractor"),Dmt.forEach(t),xbo=r(Mye," (ViTMAE model)"),Mye.forEach(t),$bo=i(K),gp=n(K,"LI",{});var Eye=s(gp);Cde=n(Eye,"STRONG",{});var Gmt=s(Cde);kbo=r(Gmt,"wav2vec2"),Gmt.forEach(t),Sbo=r(Eye," \u2014 "),Aq=n(Eye,"A",{href:!0});var Omt=s(Aq);Rbo=r(Omt,"Wav2Vec2FeatureExtractor"),Omt.forEach(t),Pbo=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),Bbo=i(K),hp=n(K,"LI",{});var Cye=s(hp);wde=n(Cye,"STRONG",{});var Vmt=s(wde);Ibo=r(Vmt,"wav2vec2-conformer"),Vmt.forEach(t),Nbo=r(Cye," \u2014 "),Lq=n(Cye,"A",{href:!0});var Xmt=s(Lq);qbo=r(Xmt,"Wav2Vec2FeatureExtractor"),Xmt.forEach(t),jbo=r(Cye," (Wav2Vec2-Conformer model)"),Cye.forEach(t),Dbo=i(K),pp=n(K,"LI",{});var wye=s(pp);Ade=n(wye,"STRONG",{});var zmt=s(Ade);Gbo=r(zmt,"yolos"),zmt.forEach(t),Obo=r(wye," \u2014 "),yq=n(wye,"A",{href:!0});var Qmt=s(yq);Vbo=r(Qmt,"YolosFeatureExtractor"),Qmt.forEach(t),Xbo=r(wye," (YOLOS model)"),wye.forEach(t),K.forEach(t),zbo=i(na),T(_p.$$.fragment,na),Qbo=i(na),T(up.$$.fragment,na),na.forEach(t),Wbo=i(el),bp=n(el,"DIV",{class:!0});var fQe=s(bp);T(E7.$$.fragment,fQe),Hbo=i(fQe),Lde=n(fQe,"P",{});var Wmt=s(Lde);Ubo=r(Wmt,"Register a new feature extractor for this class."),Wmt.forEach(t),fQe.forEach(t),el.forEach(t),iXe=i(f),ji=n(f,"H2",{class:!0});var mQe=s(ji);vp=n(mQe,"A",{id:!0,class:!0,href:!0});var Hmt=s(vp);yde=n(Hmt,"SPAN",{});var Umt=s(yde);T(C7.$$.fragment,Umt),Umt.forEach(t),Hmt.forEach(t),Jbo=i(mQe),xde=n(mQe,"SPAN",{});var Jmt=s(xde);Ybo=r(Jmt,"AutoProcessor"),Jmt.forEach(t),mQe.forEach(t),dXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(w7.$$.fragment,ol),Kbo=i(ol),A7=n(ol,"P",{});var gQe=s(A7);Zbo=r(gQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xq=n(gQe,"A",{href:!0});var Ymt=s(xq);evo=r(Ymt,"AutoProcessor.from_pretrained()"),Ymt.forEach(t),ovo=r(gQe," class method."),gQe.forEach(t),rvo=i(ol),L7=n(ol,"P",{});var hQe=s(L7);tvo=r(hQe,"This class cannot be instantiated directly using "),$de=n(hQe,"CODE",{});var Kmt=s($de);avo=r(Kmt,"__init__()"),Kmt.forEach(t),nvo=r(hQe," (throws an error)."),hQe.forEach(t),svo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(y7.$$.fragment,sa),lvo=i(sa),kde=n(sa,"P",{});var Zmt=s(kde);ivo=r(Zmt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Zmt.forEach(t),dvo=i(sa),Di=n(sa,"P",{});var $re=s(Di);cvo=r($re,"The processor class to instantiate is selected based on the "),Sde=n($re,"CODE",{});var egt=s(Sde);fvo=r(egt,"model_type"),egt.forEach(t),mvo=r($re,` property of the config object (either
passed as an argument or loaded from `),Rde=n($re,"CODE",{});var ogt=s(Rde);gvo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),hvo=r($re," if possible):"),$re.forEach(t),pvo=i(sa),he=n(sa,"UL",{});var ue=s(he);Fp=n(ue,"LI",{});var Aye=s(Fp);Pde=n(Aye,"STRONG",{});var rgt=s(Pde);_vo=r(rgt,"clip"),rgt.forEach(t),uvo=r(Aye," \u2014 "),$q=n(Aye,"A",{href:!0});var tgt=s($q);bvo=r(tgt,"CLIPProcessor"),tgt.forEach(t),vvo=r(Aye," (CLIP model)"),Aye.forEach(t),Fvo=i(ue),Tp=n(ue,"LI",{});var Lye=s(Tp);Bde=n(Lye,"STRONG",{});var agt=s(Bde);Tvo=r(agt,"flava"),agt.forEach(t),Mvo=r(Lye," \u2014 "),Ide=n(Lye,"CODE",{});var ngt=s(Ide);Evo=r(ngt,"FLAVAProcessor"),ngt.forEach(t),Cvo=r(Lye," (FLAVA model)"),Lye.forEach(t),wvo=i(ue),Mp=n(ue,"LI",{});var yye=s(Mp);Nde=n(yye,"STRONG",{});var sgt=s(Nde);Avo=r(sgt,"groupvit"),sgt.forEach(t),Lvo=r(yye," \u2014 "),kq=n(yye,"A",{href:!0});var lgt=s(kq);yvo=r(lgt,"CLIPProcessor"),lgt.forEach(t),xvo=r(yye," (GroupViT model)"),yye.forEach(t),$vo=i(ue),Ep=n(ue,"LI",{});var xye=s(Ep);qde=n(xye,"STRONG",{});var igt=s(qde);kvo=r(igt,"layoutlmv2"),igt.forEach(t),Svo=r(xye," \u2014 "),Sq=n(xye,"A",{href:!0});var dgt=s(Sq);Rvo=r(dgt,"LayoutLMv2Processor"),dgt.forEach(t),Pvo=r(xye," (LayoutLMv2 model)"),xye.forEach(t),Bvo=i(ue),Cp=n(ue,"LI",{});var $ye=s(Cp);jde=n($ye,"STRONG",{});var cgt=s(jde);Ivo=r(cgt,"layoutlmv3"),cgt.forEach(t),Nvo=r($ye," \u2014 "),Rq=n($ye,"A",{href:!0});var fgt=s(Rq);qvo=r(fgt,"LayoutLMv3Processor"),fgt.forEach(t),jvo=r($ye," (LayoutLMv3 model)"),$ye.forEach(t),Dvo=i(ue),wp=n(ue,"LI",{});var kye=s(wp);Dde=n(kye,"STRONG",{});var mgt=s(Dde);Gvo=r(mgt,"layoutxlm"),mgt.forEach(t),Ovo=r(kye," \u2014 "),Pq=n(kye,"A",{href:!0});var ggt=s(Pq);Vvo=r(ggt,"LayoutXLMProcessor"),ggt.forEach(t),Xvo=r(kye," (LayoutXLM model)"),kye.forEach(t),zvo=i(ue),Ap=n(ue,"LI",{});var Sye=s(Ap);Gde=n(Sye,"STRONG",{});var hgt=s(Gde);Qvo=r(hgt,"sew"),hgt.forEach(t),Wvo=r(Sye," \u2014 "),Bq=n(Sye,"A",{href:!0});var pgt=s(Bq);Hvo=r(pgt,"Wav2Vec2Processor"),pgt.forEach(t),Uvo=r(Sye," (SEW model)"),Sye.forEach(t),Jvo=i(ue),Lp=n(ue,"LI",{});var Rye=s(Lp);Ode=n(Rye,"STRONG",{});var _gt=s(Ode);Yvo=r(_gt,"sew-d"),_gt.forEach(t),Kvo=r(Rye," \u2014 "),Iq=n(Rye,"A",{href:!0});var ugt=s(Iq);Zvo=r(ugt,"Wav2Vec2Processor"),ugt.forEach(t),eFo=r(Rye," (SEW-D model)"),Rye.forEach(t),oFo=i(ue),yp=n(ue,"LI",{});var Pye=s(yp);Vde=n(Pye,"STRONG",{});var bgt=s(Vde);rFo=r(bgt,"speech_to_text"),bgt.forEach(t),tFo=r(Pye," \u2014 "),Nq=n(Pye,"A",{href:!0});var vgt=s(Nq);aFo=r(vgt,"Speech2TextProcessor"),vgt.forEach(t),nFo=r(Pye," (Speech2Text model)"),Pye.forEach(t),sFo=i(ue),xp=n(ue,"LI",{});var Bye=s(xp);Xde=n(Bye,"STRONG",{});var Fgt=s(Xde);lFo=r(Fgt,"speech_to_text_2"),Fgt.forEach(t),iFo=r(Bye," \u2014 "),qq=n(Bye,"A",{href:!0});var Tgt=s(qq);dFo=r(Tgt,"Speech2Text2Processor"),Tgt.forEach(t),cFo=r(Bye," (Speech2Text2 model)"),Bye.forEach(t),fFo=i(ue),$p=n(ue,"LI",{});var Iye=s($p);zde=n(Iye,"STRONG",{});var Mgt=s(zde);mFo=r(Mgt,"trocr"),Mgt.forEach(t),gFo=r(Iye," \u2014 "),jq=n(Iye,"A",{href:!0});var Egt=s(jq);hFo=r(Egt,"TrOCRProcessor"),Egt.forEach(t),pFo=r(Iye," (TrOCR model)"),Iye.forEach(t),_Fo=i(ue),kp=n(ue,"LI",{});var Nye=s(kp);Qde=n(Nye,"STRONG",{});var Cgt=s(Qde);uFo=r(Cgt,"unispeech"),Cgt.forEach(t),bFo=r(Nye," \u2014 "),Dq=n(Nye,"A",{href:!0});var wgt=s(Dq);vFo=r(wgt,"Wav2Vec2Processor"),wgt.forEach(t),FFo=r(Nye," (UniSpeech model)"),Nye.forEach(t),TFo=i(ue),Sp=n(ue,"LI",{});var qye=s(Sp);Wde=n(qye,"STRONG",{});var Agt=s(Wde);MFo=r(Agt,"unispeech-sat"),Agt.forEach(t),EFo=r(qye," \u2014 "),Gq=n(qye,"A",{href:!0});var Lgt=s(Gq);CFo=r(Lgt,"Wav2Vec2Processor"),Lgt.forEach(t),wFo=r(qye," (UniSpeechSat model)"),qye.forEach(t),AFo=i(ue),Rp=n(ue,"LI",{});var jye=s(Rp);Hde=n(jye,"STRONG",{});var ygt=s(Hde);LFo=r(ygt,"vilt"),ygt.forEach(t),yFo=r(jye," \u2014 "),Oq=n(jye,"A",{href:!0});var xgt=s(Oq);xFo=r(xgt,"ViltProcessor"),xgt.forEach(t),$Fo=r(jye," (ViLT model)"),jye.forEach(t),kFo=i(ue),Pp=n(ue,"LI",{});var Dye=s(Pp);Ude=n(Dye,"STRONG",{});var $gt=s(Ude);SFo=r($gt,"vision-text-dual-encoder"),$gt.forEach(t),RFo=r(Dye," \u2014 "),Vq=n(Dye,"A",{href:!0});var kgt=s(Vq);PFo=r(kgt,"VisionTextDualEncoderProcessor"),kgt.forEach(t),BFo=r(Dye," (VisionTextDualEncoder model)"),Dye.forEach(t),IFo=i(ue),Bp=n(ue,"LI",{});var Gye=s(Bp);Jde=n(Gye,"STRONG",{});var Sgt=s(Jde);NFo=r(Sgt,"wav2vec2"),Sgt.forEach(t),qFo=r(Gye," \u2014 "),Xq=n(Gye,"A",{href:!0});var Rgt=s(Xq);jFo=r(Rgt,"Wav2Vec2Processor"),Rgt.forEach(t),DFo=r(Gye," (Wav2Vec2 model)"),Gye.forEach(t),GFo=i(ue),Ip=n(ue,"LI",{});var Oye=s(Ip);Yde=n(Oye,"STRONG",{});var Pgt=s(Yde);OFo=r(Pgt,"wav2vec2-conformer"),Pgt.forEach(t),VFo=r(Oye," \u2014 "),zq=n(Oye,"A",{href:!0});var Bgt=s(zq);XFo=r(Bgt,"Wav2Vec2Processor"),Bgt.forEach(t),zFo=r(Oye," (Wav2Vec2-Conformer model)"),Oye.forEach(t),QFo=i(ue),Np=n(ue,"LI",{});var Vye=s(Np);Kde=n(Vye,"STRONG",{});var Igt=s(Kde);WFo=r(Igt,"wavlm"),Igt.forEach(t),HFo=r(Vye," \u2014 "),Qq=n(Vye,"A",{href:!0});var Ngt=s(Qq);UFo=r(Ngt,"Wav2Vec2Processor"),Ngt.forEach(t),JFo=r(Vye," (WavLM model)"),Vye.forEach(t),ue.forEach(t),YFo=i(sa),T(qp.$$.fragment,sa),KFo=i(sa),T(jp.$$.fragment,sa),sa.forEach(t),ZFo=i(ol),Dp=n(ol,"DIV",{class:!0});var pQe=s(Dp);T(x7.$$.fragment,pQe),e6o=i(pQe),Zde=n(pQe,"P",{});var qgt=s(Zde);o6o=r(qgt,"Register a new processor for this class."),qgt.forEach(t),pQe.forEach(t),ol.forEach(t),cXe=i(f),Gi=n(f,"H2",{class:!0});var _Qe=s(Gi);Gp=n(_Qe,"A",{id:!0,class:!0,href:!0});var jgt=s(Gp);ece=n(jgt,"SPAN",{});var Dgt=s(ece);T($7.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),r6o=i(_Qe),oce=n(_Qe,"SPAN",{});var Ggt=s(oce);t6o=r(Ggt,"AutoModel"),Ggt.forEach(t),_Qe.forEach(t),fXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(k7.$$.fragment,rl),a6o=i(rl),Oi=n(rl,"P",{});var kre=s(Oi);n6o=r(kre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wq=n(kre,"A",{href:!0});var Ogt=s(Wq);s6o=r(Ogt,"from_pretrained()"),Ogt.forEach(t),l6o=r(kre," class method or the "),Hq=n(kre,"A",{href:!0});var Vgt=s(Hq);i6o=r(Vgt,"from_config()"),Vgt.forEach(t),d6o=r(kre,` class
method.`),kre.forEach(t),c6o=i(rl),S7=n(rl,"P",{});var uQe=s(S7);f6o=r(uQe,"This class cannot be instantiated directly using "),rce=n(uQe,"CODE",{});var Xgt=s(rce);m6o=r(Xgt,"__init__()"),Xgt.forEach(t),g6o=r(uQe," (throws an error)."),uQe.forEach(t),h6o=i(rl),it=n(rl,"DIV",{class:!0});var iw=s(it);T(R7.$$.fragment,iw),p6o=i(iw),tce=n(iw,"P",{});var zgt=s(tce);_6o=r(zgt,"Instantiates one of the base model classes of the library from a configuration."),zgt.forEach(t),u6o=i(iw),Vi=n(iw,"P",{});var Sre=s(Vi);b6o=r(Sre,`Note:
Loading a model from its configuration file does `),ace=n(Sre,"STRONG",{});var Qgt=s(ace);v6o=r(Qgt,"not"),Qgt.forEach(t),F6o=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=n(Sre,"A",{href:!0});var Wgt=s(Uq);T6o=r(Wgt,"from_pretrained()"),Wgt.forEach(t),M6o=r(Sre," to load the model weights."),Sre.forEach(t),E6o=i(iw),T(Op.$$.fragment,iw),iw.forEach(t),C6o=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(P7.$$.fragment,la),w6o=i(la),nce=n(la,"P",{});var Hgt=s(nce);A6o=r(Hgt,"Instantiate one of the base model classes of the library from a pretrained model."),Hgt.forEach(t),L6o=i(la),Ia=n(la,"P",{});var dw=s(Ia);y6o=r(dw,"The model class to instantiate is selected based on the "),sce=n(dw,"CODE",{});var Ugt=s(sce);x6o=r(Ugt,"model_type"),Ugt.forEach(t),$6o=r(dw,` property of the config object (either
passed as an argument or loaded from `),lce=n(dw,"CODE",{});var Jgt=s(lce);k6o=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),S6o=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(dw,"CODE",{});var Ygt=s(ice);R6o=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),P6o=r(dw,":"),dw.forEach(t),B6o=i(la),y=n(la,"UL",{});var x=s(y);Vp=n(x,"LI",{});var Xye=s(Vp);dce=n(Xye,"STRONG",{});var Kgt=s(dce);I6o=r(Kgt,"albert"),Kgt.forEach(t),N6o=r(Xye," \u2014 "),Jq=n(Xye,"A",{href:!0});var Zgt=s(Jq);q6o=r(Zgt,"AlbertModel"),Zgt.forEach(t),j6o=r(Xye," (ALBERT model)"),Xye.forEach(t),D6o=i(x),Xp=n(x,"LI",{});var zye=s(Xp);cce=n(zye,"STRONG",{});var eht=s(cce);G6o=r(eht,"bart"),eht.forEach(t),O6o=r(zye," \u2014 "),Yq=n(zye,"A",{href:!0});var oht=s(Yq);V6o=r(oht,"BartModel"),oht.forEach(t),X6o=r(zye," (BART model)"),zye.forEach(t),z6o=i(x),zp=n(x,"LI",{});var Qye=s(zp);fce=n(Qye,"STRONG",{});var rht=s(fce);Q6o=r(rht,"beit"),rht.forEach(t),W6o=r(Qye," \u2014 "),Kq=n(Qye,"A",{href:!0});var tht=s(Kq);H6o=r(tht,"BeitModel"),tht.forEach(t),U6o=r(Qye," (BEiT model)"),Qye.forEach(t),J6o=i(x),Qp=n(x,"LI",{});var Wye=s(Qp);mce=n(Wye,"STRONG",{});var aht=s(mce);Y6o=r(aht,"bert"),aht.forEach(t),K6o=r(Wye," \u2014 "),Zq=n(Wye,"A",{href:!0});var nht=s(Zq);Z6o=r(nht,"BertModel"),nht.forEach(t),eTo=r(Wye," (BERT model)"),Wye.forEach(t),oTo=i(x),Wp=n(x,"LI",{});var Hye=s(Wp);gce=n(Hye,"STRONG",{});var sht=s(gce);rTo=r(sht,"bert-generation"),sht.forEach(t),tTo=r(Hye," \u2014 "),ej=n(Hye,"A",{href:!0});var lht=s(ej);aTo=r(lht,"BertGenerationEncoder"),lht.forEach(t),nTo=r(Hye," (Bert Generation model)"),Hye.forEach(t),sTo=i(x),Hp=n(x,"LI",{});var Uye=s(Hp);hce=n(Uye,"STRONG",{});var iht=s(hce);lTo=r(iht,"big_bird"),iht.forEach(t),iTo=r(Uye," \u2014 "),oj=n(Uye,"A",{href:!0});var dht=s(oj);dTo=r(dht,"BigBirdModel"),dht.forEach(t),cTo=r(Uye," (BigBird model)"),Uye.forEach(t),fTo=i(x),Up=n(x,"LI",{});var Jye=s(Up);pce=n(Jye,"STRONG",{});var cht=s(pce);mTo=r(cht,"bigbird_pegasus"),cht.forEach(t),gTo=r(Jye," \u2014 "),rj=n(Jye,"A",{href:!0});var fht=s(rj);hTo=r(fht,"BigBirdPegasusModel"),fht.forEach(t),pTo=r(Jye," (BigBird-Pegasus model)"),Jye.forEach(t),_To=i(x),Jp=n(x,"LI",{});var Yye=s(Jp);_ce=n(Yye,"STRONG",{});var mht=s(_ce);uTo=r(mht,"blenderbot"),mht.forEach(t),bTo=r(Yye," \u2014 "),tj=n(Yye,"A",{href:!0});var ght=s(tj);vTo=r(ght,"BlenderbotModel"),ght.forEach(t),FTo=r(Yye," (Blenderbot model)"),Yye.forEach(t),TTo=i(x),Yp=n(x,"LI",{});var Kye=s(Yp);uce=n(Kye,"STRONG",{});var hht=s(uce);MTo=r(hht,"blenderbot-small"),hht.forEach(t),ETo=r(Kye," \u2014 "),aj=n(Kye,"A",{href:!0});var pht=s(aj);CTo=r(pht,"BlenderbotSmallModel"),pht.forEach(t),wTo=r(Kye," (BlenderbotSmall model)"),Kye.forEach(t),ATo=i(x),Kp=n(x,"LI",{});var Zye=s(Kp);bce=n(Zye,"STRONG",{});var _ht=s(bce);LTo=r(_ht,"bloom"),_ht.forEach(t),yTo=r(Zye," \u2014 "),nj=n(Zye,"A",{href:!0});var uht=s(nj);xTo=r(uht,"BloomModel"),uht.forEach(t),$To=r(Zye," (BLOOM model)"),Zye.forEach(t),kTo=i(x),Zp=n(x,"LI",{});var exe=s(Zp);vce=n(exe,"STRONG",{});var bht=s(vce);STo=r(bht,"camembert"),bht.forEach(t),RTo=r(exe," \u2014 "),sj=n(exe,"A",{href:!0});var vht=s(sj);PTo=r(vht,"CamembertModel"),vht.forEach(t),BTo=r(exe," (CamemBERT model)"),exe.forEach(t),ITo=i(x),e_=n(x,"LI",{});var oxe=s(e_);Fce=n(oxe,"STRONG",{});var Fht=s(Fce);NTo=r(Fht,"canine"),Fht.forEach(t),qTo=r(oxe," \u2014 "),lj=n(oxe,"A",{href:!0});var Tht=s(lj);jTo=r(Tht,"CanineModel"),Tht.forEach(t),DTo=r(oxe," (CANINE model)"),oxe.forEach(t),GTo=i(x),o_=n(x,"LI",{});var rxe=s(o_);Tce=n(rxe,"STRONG",{});var Mht=s(Tce);OTo=r(Mht,"clip"),Mht.forEach(t),VTo=r(rxe," \u2014 "),ij=n(rxe,"A",{href:!0});var Eht=s(ij);XTo=r(Eht,"CLIPModel"),Eht.forEach(t),zTo=r(rxe," (CLIP model)"),rxe.forEach(t),QTo=i(x),r_=n(x,"LI",{});var txe=s(r_);Mce=n(txe,"STRONG",{});var Cht=s(Mce);WTo=r(Cht,"codegen"),Cht.forEach(t),HTo=r(txe," \u2014 "),dj=n(txe,"A",{href:!0});var wht=s(dj);UTo=r(wht,"CodeGenModel"),wht.forEach(t),JTo=r(txe," (CodeGen model)"),txe.forEach(t),YTo=i(x),t_=n(x,"LI",{});var axe=s(t_);Ece=n(axe,"STRONG",{});var Aht=s(Ece);KTo=r(Aht,"convbert"),Aht.forEach(t),ZTo=r(axe," \u2014 "),cj=n(axe,"A",{href:!0});var Lht=s(cj);e8o=r(Lht,"ConvBertModel"),Lht.forEach(t),o8o=r(axe," (ConvBERT model)"),axe.forEach(t),r8o=i(x),a_=n(x,"LI",{});var nxe=s(a_);Cce=n(nxe,"STRONG",{});var yht=s(Cce);t8o=r(yht,"convnext"),yht.forEach(t),a8o=r(nxe," \u2014 "),fj=n(nxe,"A",{href:!0});var xht=s(fj);n8o=r(xht,"ConvNextModel"),xht.forEach(t),s8o=r(nxe," (ConvNeXT model)"),nxe.forEach(t),l8o=i(x),n_=n(x,"LI",{});var sxe=s(n_);wce=n(sxe,"STRONG",{});var $ht=s(wce);i8o=r($ht,"ctrl"),$ht.forEach(t),d8o=r(sxe," \u2014 "),mj=n(sxe,"A",{href:!0});var kht=s(mj);c8o=r(kht,"CTRLModel"),kht.forEach(t),f8o=r(sxe," (CTRL model)"),sxe.forEach(t),m8o=i(x),s_=n(x,"LI",{});var lxe=s(s_);Ace=n(lxe,"STRONG",{});var Sht=s(Ace);g8o=r(Sht,"cvt"),Sht.forEach(t),h8o=r(lxe," \u2014 "),gj=n(lxe,"A",{href:!0});var Rht=s(gj);p8o=r(Rht,"CvtModel"),Rht.forEach(t),_8o=r(lxe," (CvT model)"),lxe.forEach(t),u8o=i(x),l_=n(x,"LI",{});var ixe=s(l_);Lce=n(ixe,"STRONG",{});var Pht=s(Lce);b8o=r(Pht,"data2vec-audio"),Pht.forEach(t),v8o=r(ixe," \u2014 "),hj=n(ixe,"A",{href:!0});var Bht=s(hj);F8o=r(Bht,"Data2VecAudioModel"),Bht.forEach(t),T8o=r(ixe," (Data2VecAudio model)"),ixe.forEach(t),M8o=i(x),i_=n(x,"LI",{});var dxe=s(i_);yce=n(dxe,"STRONG",{});var Iht=s(yce);E8o=r(Iht,"data2vec-text"),Iht.forEach(t),C8o=r(dxe," \u2014 "),pj=n(dxe,"A",{href:!0});var Nht=s(pj);w8o=r(Nht,"Data2VecTextModel"),Nht.forEach(t),A8o=r(dxe," (Data2VecText model)"),dxe.forEach(t),L8o=i(x),d_=n(x,"LI",{});var cxe=s(d_);xce=n(cxe,"STRONG",{});var qht=s(xce);y8o=r(qht,"data2vec-vision"),qht.forEach(t),x8o=r(cxe," \u2014 "),_j=n(cxe,"A",{href:!0});var jht=s(_j);$8o=r(jht,"Data2VecVisionModel"),jht.forEach(t),k8o=r(cxe," (Data2VecVision model)"),cxe.forEach(t),S8o=i(x),c_=n(x,"LI",{});var fxe=s(c_);$ce=n(fxe,"STRONG",{});var Dht=s($ce);R8o=r(Dht,"deberta"),Dht.forEach(t),P8o=r(fxe," \u2014 "),uj=n(fxe,"A",{href:!0});var Ght=s(uj);B8o=r(Ght,"DebertaModel"),Ght.forEach(t),I8o=r(fxe," (DeBERTa model)"),fxe.forEach(t),N8o=i(x),f_=n(x,"LI",{});var mxe=s(f_);kce=n(mxe,"STRONG",{});var Oht=s(kce);q8o=r(Oht,"deberta-v2"),Oht.forEach(t),j8o=r(mxe," \u2014 "),bj=n(mxe,"A",{href:!0});var Vht=s(bj);D8o=r(Vht,"DebertaV2Model"),Vht.forEach(t),G8o=r(mxe," (DeBERTa-v2 model)"),mxe.forEach(t),O8o=i(x),m_=n(x,"LI",{});var gxe=s(m_);Sce=n(gxe,"STRONG",{});var Xht=s(Sce);V8o=r(Xht,"decision_transformer"),Xht.forEach(t),X8o=r(gxe," \u2014 "),vj=n(gxe,"A",{href:!0});var zht=s(vj);z8o=r(zht,"DecisionTransformerModel"),zht.forEach(t),Q8o=r(gxe," (Decision Transformer model)"),gxe.forEach(t),W8o=i(x),g_=n(x,"LI",{});var hxe=s(g_);Rce=n(hxe,"STRONG",{});var Qht=s(Rce);H8o=r(Qht,"deit"),Qht.forEach(t),U8o=r(hxe," \u2014 "),Fj=n(hxe,"A",{href:!0});var Wht=s(Fj);J8o=r(Wht,"DeiTModel"),Wht.forEach(t),Y8o=r(hxe," (DeiT model)"),hxe.forEach(t),K8o=i(x),h_=n(x,"LI",{});var pxe=s(h_);Pce=n(pxe,"STRONG",{});var Hht=s(Pce);Z8o=r(Hht,"detr"),Hht.forEach(t),e9o=r(pxe," \u2014 "),Tj=n(pxe,"A",{href:!0});var Uht=s(Tj);o9o=r(Uht,"DetrModel"),Uht.forEach(t),r9o=r(pxe," (DETR model)"),pxe.forEach(t),t9o=i(x),p_=n(x,"LI",{});var _xe=s(p_);Bce=n(_xe,"STRONG",{});var Jht=s(Bce);a9o=r(Jht,"distilbert"),Jht.forEach(t),n9o=r(_xe," \u2014 "),Mj=n(_xe,"A",{href:!0});var Yht=s(Mj);s9o=r(Yht,"DistilBertModel"),Yht.forEach(t),l9o=r(_xe," (DistilBERT model)"),_xe.forEach(t),i9o=i(x),__=n(x,"LI",{});var uxe=s(__);Ice=n(uxe,"STRONG",{});var Kht=s(Ice);d9o=r(Kht,"dpr"),Kht.forEach(t),c9o=r(uxe," \u2014 "),Ej=n(uxe,"A",{href:!0});var Zht=s(Ej);f9o=r(Zht,"DPRQuestionEncoder"),Zht.forEach(t),m9o=r(uxe," (DPR model)"),uxe.forEach(t),g9o=i(x),u_=n(x,"LI",{});var bxe=s(u_);Nce=n(bxe,"STRONG",{});var ept=s(Nce);h9o=r(ept,"dpt"),ept.forEach(t),p9o=r(bxe," \u2014 "),Cj=n(bxe,"A",{href:!0});var opt=s(Cj);_9o=r(opt,"DPTModel"),opt.forEach(t),u9o=r(bxe," (DPT model)"),bxe.forEach(t),b9o=i(x),b_=n(x,"LI",{});var vxe=s(b_);qce=n(vxe,"STRONG",{});var rpt=s(qce);v9o=r(rpt,"electra"),rpt.forEach(t),F9o=r(vxe," \u2014 "),wj=n(vxe,"A",{href:!0});var tpt=s(wj);T9o=r(tpt,"ElectraModel"),tpt.forEach(t),M9o=r(vxe," (ELECTRA model)"),vxe.forEach(t),E9o=i(x),v_=n(x,"LI",{});var Fxe=s(v_);jce=n(Fxe,"STRONG",{});var apt=s(jce);C9o=r(apt,"flaubert"),apt.forEach(t),w9o=r(Fxe," \u2014 "),Aj=n(Fxe,"A",{href:!0});var npt=s(Aj);A9o=r(npt,"FlaubertModel"),npt.forEach(t),L9o=r(Fxe," (FlauBERT model)"),Fxe.forEach(t),y9o=i(x),F_=n(x,"LI",{});var Txe=s(F_);Dce=n(Txe,"STRONG",{});var spt=s(Dce);x9o=r(spt,"flava"),spt.forEach(t),$9o=r(Txe," \u2014 "),Lj=n(Txe,"A",{href:!0});var lpt=s(Lj);k9o=r(lpt,"FlavaModel"),lpt.forEach(t),S9o=r(Txe," (FLAVA model)"),Txe.forEach(t),R9o=i(x),T_=n(x,"LI",{});var Mxe=s(T_);Gce=n(Mxe,"STRONG",{});var ipt=s(Gce);P9o=r(ipt,"fnet"),ipt.forEach(t),B9o=r(Mxe," \u2014 "),yj=n(Mxe,"A",{href:!0});var dpt=s(yj);I9o=r(dpt,"FNetModel"),dpt.forEach(t),N9o=r(Mxe," (FNet model)"),Mxe.forEach(t),q9o=i(x),M_=n(x,"LI",{});var Exe=s(M_);Oce=n(Exe,"STRONG",{});var cpt=s(Oce);j9o=r(cpt,"fsmt"),cpt.forEach(t),D9o=r(Exe," \u2014 "),xj=n(Exe,"A",{href:!0});var fpt=s(xj);G9o=r(fpt,"FSMTModel"),fpt.forEach(t),O9o=r(Exe," (FairSeq Machine-Translation model)"),Exe.forEach(t),V9o=i(x),Ws=n(x,"LI",{});var $S=s(Ws);Vce=n($S,"STRONG",{});var mpt=s(Vce);X9o=r(mpt,"funnel"),mpt.forEach(t),z9o=r($S," \u2014 "),$j=n($S,"A",{href:!0});var gpt=s($j);Q9o=r(gpt,"FunnelModel"),gpt.forEach(t),W9o=r($S," or "),kj=n($S,"A",{href:!0});var hpt=s(kj);H9o=r(hpt,"FunnelBaseModel"),hpt.forEach(t),U9o=r($S," (Funnel Transformer model)"),$S.forEach(t),J9o=i(x),E_=n(x,"LI",{});var Cxe=s(E_);Xce=n(Cxe,"STRONG",{});var ppt=s(Xce);Y9o=r(ppt,"glpn"),ppt.forEach(t),K9o=r(Cxe," \u2014 "),Sj=n(Cxe,"A",{href:!0});var _pt=s(Sj);Z9o=r(_pt,"GLPNModel"),_pt.forEach(t),eMo=r(Cxe," (GLPN model)"),Cxe.forEach(t),oMo=i(x),C_=n(x,"LI",{});var wxe=s(C_);zce=n(wxe,"STRONG",{});var upt=s(zce);rMo=r(upt,"gpt2"),upt.forEach(t),tMo=r(wxe," \u2014 "),Rj=n(wxe,"A",{href:!0});var bpt=s(Rj);aMo=r(bpt,"GPT2Model"),bpt.forEach(t),nMo=r(wxe," (OpenAI GPT-2 model)"),wxe.forEach(t),sMo=i(x),w_=n(x,"LI",{});var Axe=s(w_);Qce=n(Axe,"STRONG",{});var vpt=s(Qce);lMo=r(vpt,"gpt_neo"),vpt.forEach(t),iMo=r(Axe," \u2014 "),Pj=n(Axe,"A",{href:!0});var Fpt=s(Pj);dMo=r(Fpt,"GPTNeoModel"),Fpt.forEach(t),cMo=r(Axe," (GPT Neo model)"),Axe.forEach(t),fMo=i(x),A_=n(x,"LI",{});var Lxe=s(A_);Wce=n(Lxe,"STRONG",{});var Tpt=s(Wce);mMo=r(Tpt,"gpt_neox"),Tpt.forEach(t),gMo=r(Lxe," \u2014 "),Bj=n(Lxe,"A",{href:!0});var Mpt=s(Bj);hMo=r(Mpt,"GPTNeoXModel"),Mpt.forEach(t),pMo=r(Lxe," (GPT NeoX model)"),Lxe.forEach(t),_Mo=i(x),L_=n(x,"LI",{});var yxe=s(L_);Hce=n(yxe,"STRONG",{});var Ept=s(Hce);uMo=r(Ept,"gptj"),Ept.forEach(t),bMo=r(yxe," \u2014 "),Ij=n(yxe,"A",{href:!0});var Cpt=s(Ij);vMo=r(Cpt,"GPTJModel"),Cpt.forEach(t),FMo=r(yxe," (GPT-J model)"),yxe.forEach(t),TMo=i(x),y_=n(x,"LI",{});var xxe=s(y_);Uce=n(xxe,"STRONG",{});var wpt=s(Uce);MMo=r(wpt,"groupvit"),wpt.forEach(t),EMo=r(xxe," \u2014 "),Nj=n(xxe,"A",{href:!0});var Apt=s(Nj);CMo=r(Apt,"GroupViTModel"),Apt.forEach(t),wMo=r(xxe," (GroupViT model)"),xxe.forEach(t),AMo=i(x),x_=n(x,"LI",{});var $xe=s(x_);Jce=n($xe,"STRONG",{});var Lpt=s(Jce);LMo=r(Lpt,"hubert"),Lpt.forEach(t),yMo=r($xe," \u2014 "),qj=n($xe,"A",{href:!0});var ypt=s(qj);xMo=r(ypt,"HubertModel"),ypt.forEach(t),$Mo=r($xe," (Hubert model)"),$xe.forEach(t),kMo=i(x),$_=n(x,"LI",{});var kxe=s($_);Yce=n(kxe,"STRONG",{});var xpt=s(Yce);SMo=r(xpt,"ibert"),xpt.forEach(t),RMo=r(kxe," \u2014 "),jj=n(kxe,"A",{href:!0});var $pt=s(jj);PMo=r($pt,"IBertModel"),$pt.forEach(t),BMo=r(kxe," (I-BERT model)"),kxe.forEach(t),IMo=i(x),k_=n(x,"LI",{});var Sxe=s(k_);Kce=n(Sxe,"STRONG",{});var kpt=s(Kce);NMo=r(kpt,"imagegpt"),kpt.forEach(t),qMo=r(Sxe," \u2014 "),Dj=n(Sxe,"A",{href:!0});var Spt=s(Dj);jMo=r(Spt,"ImageGPTModel"),Spt.forEach(t),DMo=r(Sxe," (ImageGPT model)"),Sxe.forEach(t),GMo=i(x),S_=n(x,"LI",{});var Rxe=s(S_);Zce=n(Rxe,"STRONG",{});var Rpt=s(Zce);OMo=r(Rpt,"layoutlm"),Rpt.forEach(t),VMo=r(Rxe," \u2014 "),Gj=n(Rxe,"A",{href:!0});var Ppt=s(Gj);XMo=r(Ppt,"LayoutLMModel"),Ppt.forEach(t),zMo=r(Rxe," (LayoutLM model)"),Rxe.forEach(t),QMo=i(x),R_=n(x,"LI",{});var Pxe=s(R_);efe=n(Pxe,"STRONG",{});var Bpt=s(efe);WMo=r(Bpt,"layoutlmv2"),Bpt.forEach(t),HMo=r(Pxe," \u2014 "),Oj=n(Pxe,"A",{href:!0});var Ipt=s(Oj);UMo=r(Ipt,"LayoutLMv2Model"),Ipt.forEach(t),JMo=r(Pxe," (LayoutLMv2 model)"),Pxe.forEach(t),YMo=i(x),P_=n(x,"LI",{});var Bxe=s(P_);ofe=n(Bxe,"STRONG",{});var Npt=s(ofe);KMo=r(Npt,"layoutlmv3"),Npt.forEach(t),ZMo=r(Bxe," \u2014 "),Vj=n(Bxe,"A",{href:!0});var qpt=s(Vj);e4o=r(qpt,"LayoutLMv3Model"),qpt.forEach(t),o4o=r(Bxe," (LayoutLMv3 model)"),Bxe.forEach(t),r4o=i(x),B_=n(x,"LI",{});var Ixe=s(B_);rfe=n(Ixe,"STRONG",{});var jpt=s(rfe);t4o=r(jpt,"led"),jpt.forEach(t),a4o=r(Ixe," \u2014 "),Xj=n(Ixe,"A",{href:!0});var Dpt=s(Xj);n4o=r(Dpt,"LEDModel"),Dpt.forEach(t),s4o=r(Ixe," (LED model)"),Ixe.forEach(t),l4o=i(x),I_=n(x,"LI",{});var Nxe=s(I_);tfe=n(Nxe,"STRONG",{});var Gpt=s(tfe);i4o=r(Gpt,"levit"),Gpt.forEach(t),d4o=r(Nxe," \u2014 "),zj=n(Nxe,"A",{href:!0});var Opt=s(zj);c4o=r(Opt,"LevitModel"),Opt.forEach(t),f4o=r(Nxe," (LeViT model)"),Nxe.forEach(t),m4o=i(x),N_=n(x,"LI",{});var qxe=s(N_);afe=n(qxe,"STRONG",{});var Vpt=s(afe);g4o=r(Vpt,"longformer"),Vpt.forEach(t),h4o=r(qxe," \u2014 "),Qj=n(qxe,"A",{href:!0});var Xpt=s(Qj);p4o=r(Xpt,"LongformerModel"),Xpt.forEach(t),_4o=r(qxe," (Longformer model)"),qxe.forEach(t),u4o=i(x),q_=n(x,"LI",{});var jxe=s(q_);nfe=n(jxe,"STRONG",{});var zpt=s(nfe);b4o=r(zpt,"longt5"),zpt.forEach(t),v4o=r(jxe," \u2014 "),Wj=n(jxe,"A",{href:!0});var Qpt=s(Wj);F4o=r(Qpt,"LongT5Model"),Qpt.forEach(t),T4o=r(jxe," (LongT5 model)"),jxe.forEach(t),M4o=i(x),j_=n(x,"LI",{});var Dxe=s(j_);sfe=n(Dxe,"STRONG",{});var Wpt=s(sfe);E4o=r(Wpt,"luke"),Wpt.forEach(t),C4o=r(Dxe," \u2014 "),Hj=n(Dxe,"A",{href:!0});var Hpt=s(Hj);w4o=r(Hpt,"LukeModel"),Hpt.forEach(t),A4o=r(Dxe," (LUKE model)"),Dxe.forEach(t),L4o=i(x),D_=n(x,"LI",{});var Gxe=s(D_);lfe=n(Gxe,"STRONG",{});var Upt=s(lfe);y4o=r(Upt,"lxmert"),Upt.forEach(t),x4o=r(Gxe," \u2014 "),Uj=n(Gxe,"A",{href:!0});var Jpt=s(Uj);$4o=r(Jpt,"LxmertModel"),Jpt.forEach(t),k4o=r(Gxe," (LXMERT model)"),Gxe.forEach(t),S4o=i(x),G_=n(x,"LI",{});var Oxe=s(G_);ife=n(Oxe,"STRONG",{});var Ypt=s(ife);R4o=r(Ypt,"m2m_100"),Ypt.forEach(t),P4o=r(Oxe," \u2014 "),Jj=n(Oxe,"A",{href:!0});var Kpt=s(Jj);B4o=r(Kpt,"M2M100Model"),Kpt.forEach(t),I4o=r(Oxe," (M2M100 model)"),Oxe.forEach(t),N4o=i(x),O_=n(x,"LI",{});var Vxe=s(O_);dfe=n(Vxe,"STRONG",{});var Zpt=s(dfe);q4o=r(Zpt,"marian"),Zpt.forEach(t),j4o=r(Vxe," \u2014 "),Yj=n(Vxe,"A",{href:!0});var e_t=s(Yj);D4o=r(e_t,"MarianModel"),e_t.forEach(t),G4o=r(Vxe," (Marian model)"),Vxe.forEach(t),O4o=i(x),V_=n(x,"LI",{});var Xxe=s(V_);cfe=n(Xxe,"STRONG",{});var o_t=s(cfe);V4o=r(o_t,"maskformer"),o_t.forEach(t),X4o=r(Xxe," \u2014 "),Kj=n(Xxe,"A",{href:!0});var r_t=s(Kj);z4o=r(r_t,"MaskFormerModel"),r_t.forEach(t),Q4o=r(Xxe," (MaskFormer model)"),Xxe.forEach(t),W4o=i(x),X_=n(x,"LI",{});var zxe=s(X_);ffe=n(zxe,"STRONG",{});var t_t=s(ffe);H4o=r(t_t,"mbart"),t_t.forEach(t),U4o=r(zxe," \u2014 "),Zj=n(zxe,"A",{href:!0});var a_t=s(Zj);J4o=r(a_t,"MBartModel"),a_t.forEach(t),Y4o=r(zxe," (mBART model)"),zxe.forEach(t),K4o=i(x),z_=n(x,"LI",{});var Qxe=s(z_);mfe=n(Qxe,"STRONG",{});var n_t=s(mfe);Z4o=r(n_t,"mctct"),n_t.forEach(t),eEo=r(Qxe," \u2014 "),eD=n(Qxe,"A",{href:!0});var s_t=s(eD);oEo=r(s_t,"MCTCTModel"),s_t.forEach(t),rEo=r(Qxe," (M-CTC-T model)"),Qxe.forEach(t),tEo=i(x),Q_=n(x,"LI",{});var Wxe=s(Q_);gfe=n(Wxe,"STRONG",{});var l_t=s(gfe);aEo=r(l_t,"megatron-bert"),l_t.forEach(t),nEo=r(Wxe," \u2014 "),oD=n(Wxe,"A",{href:!0});var i_t=s(oD);sEo=r(i_t,"MegatronBertModel"),i_t.forEach(t),lEo=r(Wxe," (Megatron-BERT model)"),Wxe.forEach(t),iEo=i(x),W_=n(x,"LI",{});var Hxe=s(W_);hfe=n(Hxe,"STRONG",{});var d_t=s(hfe);dEo=r(d_t,"mobilebert"),d_t.forEach(t),cEo=r(Hxe," \u2014 "),rD=n(Hxe,"A",{href:!0});var c_t=s(rD);fEo=r(c_t,"MobileBertModel"),c_t.forEach(t),mEo=r(Hxe," (MobileBERT model)"),Hxe.forEach(t),gEo=i(x),H_=n(x,"LI",{});var Uxe=s(H_);pfe=n(Uxe,"STRONG",{});var f_t=s(pfe);hEo=r(f_t,"mobilevit"),f_t.forEach(t),pEo=r(Uxe," \u2014 "),tD=n(Uxe,"A",{href:!0});var m_t=s(tD);_Eo=r(m_t,"MobileViTModel"),m_t.forEach(t),uEo=r(Uxe," (MobileViT model)"),Uxe.forEach(t),bEo=i(x),U_=n(x,"LI",{});var Jxe=s(U_);_fe=n(Jxe,"STRONG",{});var g_t=s(_fe);vEo=r(g_t,"mpnet"),g_t.forEach(t),FEo=r(Jxe," \u2014 "),aD=n(Jxe,"A",{href:!0});var h_t=s(aD);TEo=r(h_t,"MPNetModel"),h_t.forEach(t),MEo=r(Jxe," (MPNet model)"),Jxe.forEach(t),EEo=i(x),J_=n(x,"LI",{});var Yxe=s(J_);ufe=n(Yxe,"STRONG",{});var p_t=s(ufe);CEo=r(p_t,"mt5"),p_t.forEach(t),wEo=r(Yxe," \u2014 "),nD=n(Yxe,"A",{href:!0});var __t=s(nD);AEo=r(__t,"MT5Model"),__t.forEach(t),LEo=r(Yxe," (MT5 model)"),Yxe.forEach(t),yEo=i(x),Y_=n(x,"LI",{});var Kxe=s(Y_);bfe=n(Kxe,"STRONG",{});var u_t=s(bfe);xEo=r(u_t,"mvp"),u_t.forEach(t),$Eo=r(Kxe," \u2014 "),sD=n(Kxe,"A",{href:!0});var b_t=s(sD);kEo=r(b_t,"MvpModel"),b_t.forEach(t),SEo=r(Kxe," (MVP model)"),Kxe.forEach(t),REo=i(x),K_=n(x,"LI",{});var Zxe=s(K_);vfe=n(Zxe,"STRONG",{});var v_t=s(vfe);PEo=r(v_t,"nezha"),v_t.forEach(t),BEo=r(Zxe," \u2014 "),lD=n(Zxe,"A",{href:!0});var F_t=s(lD);IEo=r(F_t,"NezhaModel"),F_t.forEach(t),NEo=r(Zxe," (Nezha model)"),Zxe.forEach(t),qEo=i(x),Z_=n(x,"LI",{});var e$e=s(Z_);Ffe=n(e$e,"STRONG",{});var T_t=s(Ffe);jEo=r(T_t,"nystromformer"),T_t.forEach(t),DEo=r(e$e," \u2014 "),iD=n(e$e,"A",{href:!0});var M_t=s(iD);GEo=r(M_t,"NystromformerModel"),M_t.forEach(t),OEo=r(e$e," (Nystr\xF6mformer model)"),e$e.forEach(t),VEo=i(x),eu=n(x,"LI",{});var o$e=s(eu);Tfe=n(o$e,"STRONG",{});var E_t=s(Tfe);XEo=r(E_t,"openai-gpt"),E_t.forEach(t),zEo=r(o$e," \u2014 "),dD=n(o$e,"A",{href:!0});var C_t=s(dD);QEo=r(C_t,"OpenAIGPTModel"),C_t.forEach(t),WEo=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),HEo=i(x),ou=n(x,"LI",{});var r$e=s(ou);Mfe=n(r$e,"STRONG",{});var w_t=s(Mfe);UEo=r(w_t,"opt"),w_t.forEach(t),JEo=r(r$e," \u2014 "),cD=n(r$e,"A",{href:!0});var A_t=s(cD);YEo=r(A_t,"OPTModel"),A_t.forEach(t),KEo=r(r$e," (OPT model)"),r$e.forEach(t),ZEo=i(x),ru=n(x,"LI",{});var t$e=s(ru);Efe=n(t$e,"STRONG",{});var L_t=s(Efe);eCo=r(L_t,"pegasus"),L_t.forEach(t),oCo=r(t$e," \u2014 "),fD=n(t$e,"A",{href:!0});var y_t=s(fD);rCo=r(y_t,"PegasusModel"),y_t.forEach(t),tCo=r(t$e," (Pegasus model)"),t$e.forEach(t),aCo=i(x),tu=n(x,"LI",{});var a$e=s(tu);Cfe=n(a$e,"STRONG",{});var x_t=s(Cfe);nCo=r(x_t,"perceiver"),x_t.forEach(t),sCo=r(a$e," \u2014 "),mD=n(a$e,"A",{href:!0});var $_t=s(mD);lCo=r($_t,"PerceiverModel"),$_t.forEach(t),iCo=r(a$e," (Perceiver model)"),a$e.forEach(t),dCo=i(x),au=n(x,"LI",{});var n$e=s(au);wfe=n(n$e,"STRONG",{});var k_t=s(wfe);cCo=r(k_t,"plbart"),k_t.forEach(t),fCo=r(n$e," \u2014 "),gD=n(n$e,"A",{href:!0});var S_t=s(gD);mCo=r(S_t,"PLBartModel"),S_t.forEach(t),gCo=r(n$e," (PLBart model)"),n$e.forEach(t),hCo=i(x),nu=n(x,"LI",{});var s$e=s(nu);Afe=n(s$e,"STRONG",{});var R_t=s(Afe);pCo=r(R_t,"poolformer"),R_t.forEach(t),_Co=r(s$e," \u2014 "),hD=n(s$e,"A",{href:!0});var P_t=s(hD);uCo=r(P_t,"PoolFormerModel"),P_t.forEach(t),bCo=r(s$e," (PoolFormer model)"),s$e.forEach(t),vCo=i(x),su=n(x,"LI",{});var l$e=s(su);Lfe=n(l$e,"STRONG",{});var B_t=s(Lfe);FCo=r(B_t,"prophetnet"),B_t.forEach(t),TCo=r(l$e," \u2014 "),pD=n(l$e,"A",{href:!0});var I_t=s(pD);MCo=r(I_t,"ProphetNetModel"),I_t.forEach(t),ECo=r(l$e," (ProphetNet model)"),l$e.forEach(t),CCo=i(x),lu=n(x,"LI",{});var i$e=s(lu);yfe=n(i$e,"STRONG",{});var N_t=s(yfe);wCo=r(N_t,"qdqbert"),N_t.forEach(t),ACo=r(i$e," \u2014 "),_D=n(i$e,"A",{href:!0});var q_t=s(_D);LCo=r(q_t,"QDQBertModel"),q_t.forEach(t),yCo=r(i$e," (QDQBert model)"),i$e.forEach(t),xCo=i(x),iu=n(x,"LI",{});var d$e=s(iu);xfe=n(d$e,"STRONG",{});var j_t=s(xfe);$Co=r(j_t,"reformer"),j_t.forEach(t),kCo=r(d$e," \u2014 "),uD=n(d$e,"A",{href:!0});var D_t=s(uD);SCo=r(D_t,"ReformerModel"),D_t.forEach(t),RCo=r(d$e," (Reformer model)"),d$e.forEach(t),PCo=i(x),du=n(x,"LI",{});var c$e=s(du);$fe=n(c$e,"STRONG",{});var G_t=s($fe);BCo=r(G_t,"regnet"),G_t.forEach(t),ICo=r(c$e," \u2014 "),bD=n(c$e,"A",{href:!0});var O_t=s(bD);NCo=r(O_t,"RegNetModel"),O_t.forEach(t),qCo=r(c$e," (RegNet model)"),c$e.forEach(t),jCo=i(x),cu=n(x,"LI",{});var f$e=s(cu);kfe=n(f$e,"STRONG",{});var V_t=s(kfe);DCo=r(V_t,"rembert"),V_t.forEach(t),GCo=r(f$e," \u2014 "),vD=n(f$e,"A",{href:!0});var X_t=s(vD);OCo=r(X_t,"RemBertModel"),X_t.forEach(t),VCo=r(f$e," (RemBERT model)"),f$e.forEach(t),XCo=i(x),fu=n(x,"LI",{});var m$e=s(fu);Sfe=n(m$e,"STRONG",{});var z_t=s(Sfe);zCo=r(z_t,"resnet"),z_t.forEach(t),QCo=r(m$e," \u2014 "),FD=n(m$e,"A",{href:!0});var Q_t=s(FD);WCo=r(Q_t,"ResNetModel"),Q_t.forEach(t),HCo=r(m$e," (ResNet model)"),m$e.forEach(t),UCo=i(x),mu=n(x,"LI",{});var g$e=s(mu);Rfe=n(g$e,"STRONG",{});var W_t=s(Rfe);JCo=r(W_t,"retribert"),W_t.forEach(t),YCo=r(g$e," \u2014 "),TD=n(g$e,"A",{href:!0});var H_t=s(TD);KCo=r(H_t,"RetriBertModel"),H_t.forEach(t),ZCo=r(g$e," (RetriBERT model)"),g$e.forEach(t),e3o=i(x),gu=n(x,"LI",{});var h$e=s(gu);Pfe=n(h$e,"STRONG",{});var U_t=s(Pfe);o3o=r(U_t,"roberta"),U_t.forEach(t),r3o=r(h$e," \u2014 "),MD=n(h$e,"A",{href:!0});var J_t=s(MD);t3o=r(J_t,"RobertaModel"),J_t.forEach(t),a3o=r(h$e," (RoBERTa model)"),h$e.forEach(t),n3o=i(x),hu=n(x,"LI",{});var p$e=s(hu);Bfe=n(p$e,"STRONG",{});var Y_t=s(Bfe);s3o=r(Y_t,"roformer"),Y_t.forEach(t),l3o=r(p$e," \u2014 "),ED=n(p$e,"A",{href:!0});var K_t=s(ED);i3o=r(K_t,"RoFormerModel"),K_t.forEach(t),d3o=r(p$e," (RoFormer model)"),p$e.forEach(t),c3o=i(x),pu=n(x,"LI",{});var _$e=s(pu);Ife=n(_$e,"STRONG",{});var Z_t=s(Ife);f3o=r(Z_t,"segformer"),Z_t.forEach(t),m3o=r(_$e," \u2014 "),CD=n(_$e,"A",{href:!0});var eut=s(CD);g3o=r(eut,"SegformerModel"),eut.forEach(t),h3o=r(_$e," (SegFormer model)"),_$e.forEach(t),p3o=i(x),_u=n(x,"LI",{});var u$e=s(_u);Nfe=n(u$e,"STRONG",{});var out=s(Nfe);_3o=r(out,"sew"),out.forEach(t),u3o=r(u$e," \u2014 "),wD=n(u$e,"A",{href:!0});var rut=s(wD);b3o=r(rut,"SEWModel"),rut.forEach(t),v3o=r(u$e," (SEW model)"),u$e.forEach(t),F3o=i(x),uu=n(x,"LI",{});var b$e=s(uu);qfe=n(b$e,"STRONG",{});var tut=s(qfe);T3o=r(tut,"sew-d"),tut.forEach(t),M3o=r(b$e," \u2014 "),AD=n(b$e,"A",{href:!0});var aut=s(AD);E3o=r(aut,"SEWDModel"),aut.forEach(t),C3o=r(b$e," (SEW-D model)"),b$e.forEach(t),w3o=i(x),bu=n(x,"LI",{});var v$e=s(bu);jfe=n(v$e,"STRONG",{});var nut=s(jfe);A3o=r(nut,"speech_to_text"),nut.forEach(t),L3o=r(v$e," \u2014 "),LD=n(v$e,"A",{href:!0});var sut=s(LD);y3o=r(sut,"Speech2TextModel"),sut.forEach(t),x3o=r(v$e," (Speech2Text model)"),v$e.forEach(t),$3o=i(x),vu=n(x,"LI",{});var F$e=s(vu);Dfe=n(F$e,"STRONG",{});var lut=s(Dfe);k3o=r(lut,"splinter"),lut.forEach(t),S3o=r(F$e," \u2014 "),yD=n(F$e,"A",{href:!0});var iut=s(yD);R3o=r(iut,"SplinterModel"),iut.forEach(t),P3o=r(F$e," (Splinter model)"),F$e.forEach(t),B3o=i(x),Fu=n(x,"LI",{});var T$e=s(Fu);Gfe=n(T$e,"STRONG",{});var dut=s(Gfe);I3o=r(dut,"squeezebert"),dut.forEach(t),N3o=r(T$e," \u2014 "),xD=n(T$e,"A",{href:!0});var cut=s(xD);q3o=r(cut,"SqueezeBertModel"),cut.forEach(t),j3o=r(T$e," (SqueezeBERT model)"),T$e.forEach(t),D3o=i(x),Tu=n(x,"LI",{});var M$e=s(Tu);Ofe=n(M$e,"STRONG",{});var fut=s(Ofe);G3o=r(fut,"swin"),fut.forEach(t),O3o=r(M$e," \u2014 "),$D=n(M$e,"A",{href:!0});var mut=s($D);V3o=r(mut,"SwinModel"),mut.forEach(t),X3o=r(M$e," (Swin Transformer model)"),M$e.forEach(t),z3o=i(x),Mu=n(x,"LI",{});var E$e=s(Mu);Vfe=n(E$e,"STRONG",{});var gut=s(Vfe);Q3o=r(gut,"t5"),gut.forEach(t),W3o=r(E$e," \u2014 "),kD=n(E$e,"A",{href:!0});var hut=s(kD);H3o=r(hut,"T5Model"),hut.forEach(t),U3o=r(E$e," (T5 model)"),E$e.forEach(t),J3o=i(x),Eu=n(x,"LI",{});var C$e=s(Eu);Xfe=n(C$e,"STRONG",{});var put=s(Xfe);Y3o=r(put,"tapas"),put.forEach(t),K3o=r(C$e," \u2014 "),SD=n(C$e,"A",{href:!0});var _ut=s(SD);Z3o=r(_ut,"TapasModel"),_ut.forEach(t),e5o=r(C$e," (TAPAS model)"),C$e.forEach(t),o5o=i(x),Cu=n(x,"LI",{});var w$e=s(Cu);zfe=n(w$e,"STRONG",{});var uut=s(zfe);r5o=r(uut,"trajectory_transformer"),uut.forEach(t),t5o=r(w$e," \u2014 "),RD=n(w$e,"A",{href:!0});var but=s(RD);a5o=r(but,"TrajectoryTransformerModel"),but.forEach(t),n5o=r(w$e," (Trajectory Transformer model)"),w$e.forEach(t),s5o=i(x),wu=n(x,"LI",{});var A$e=s(wu);Qfe=n(A$e,"STRONG",{});var vut=s(Qfe);l5o=r(vut,"transfo-xl"),vut.forEach(t),i5o=r(A$e," \u2014 "),PD=n(A$e,"A",{href:!0});var Fut=s(PD);d5o=r(Fut,"TransfoXLModel"),Fut.forEach(t),c5o=r(A$e," (Transformer-XL model)"),A$e.forEach(t),f5o=i(x),Au=n(x,"LI",{});var L$e=s(Au);Wfe=n(L$e,"STRONG",{});var Tut=s(Wfe);m5o=r(Tut,"unispeech"),Tut.forEach(t),g5o=r(L$e," \u2014 "),BD=n(L$e,"A",{href:!0});var Mut=s(BD);h5o=r(Mut,"UniSpeechModel"),Mut.forEach(t),p5o=r(L$e," (UniSpeech model)"),L$e.forEach(t),_5o=i(x),Lu=n(x,"LI",{});var y$e=s(Lu);Hfe=n(y$e,"STRONG",{});var Eut=s(Hfe);u5o=r(Eut,"unispeech-sat"),Eut.forEach(t),b5o=r(y$e," \u2014 "),ID=n(y$e,"A",{href:!0});var Cut=s(ID);v5o=r(Cut,"UniSpeechSatModel"),Cut.forEach(t),F5o=r(y$e," (UniSpeechSat model)"),y$e.forEach(t),T5o=i(x),yu=n(x,"LI",{});var x$e=s(yu);Ufe=n(x$e,"STRONG",{});var wut=s(Ufe);M5o=r(wut,"van"),wut.forEach(t),E5o=r(x$e," \u2014 "),ND=n(x$e,"A",{href:!0});var Aut=s(ND);C5o=r(Aut,"VanModel"),Aut.forEach(t),w5o=r(x$e," (VAN model)"),x$e.forEach(t),A5o=i(x),xu=n(x,"LI",{});var $$e=s(xu);Jfe=n($$e,"STRONG",{});var Lut=s(Jfe);L5o=r(Lut,"vilt"),Lut.forEach(t),y5o=r($$e," \u2014 "),qD=n($$e,"A",{href:!0});var yut=s(qD);x5o=r(yut,"ViltModel"),yut.forEach(t),$5o=r($$e," (ViLT model)"),$$e.forEach(t),k5o=i(x),$u=n(x,"LI",{});var k$e=s($u);Yfe=n(k$e,"STRONG",{});var xut=s(Yfe);S5o=r(xut,"vision-text-dual-encoder"),xut.forEach(t),R5o=r(k$e," \u2014 "),jD=n(k$e,"A",{href:!0});var $ut=s(jD);P5o=r($ut,"VisionTextDualEncoderModel"),$ut.forEach(t),B5o=r(k$e," (VisionTextDualEncoder model)"),k$e.forEach(t),I5o=i(x),ku=n(x,"LI",{});var S$e=s(ku);Kfe=n(S$e,"STRONG",{});var kut=s(Kfe);N5o=r(kut,"visual_bert"),kut.forEach(t),q5o=r(S$e," \u2014 "),DD=n(S$e,"A",{href:!0});var Sut=s(DD);j5o=r(Sut,"VisualBertModel"),Sut.forEach(t),D5o=r(S$e," (VisualBERT model)"),S$e.forEach(t),G5o=i(x),Su=n(x,"LI",{});var R$e=s(Su);Zfe=n(R$e,"STRONG",{});var Rut=s(Zfe);O5o=r(Rut,"vit"),Rut.forEach(t),V5o=r(R$e," \u2014 "),GD=n(R$e,"A",{href:!0});var Put=s(GD);X5o=r(Put,"ViTModel"),Put.forEach(t),z5o=r(R$e," (ViT model)"),R$e.forEach(t),Q5o=i(x),Ru=n(x,"LI",{});var P$e=s(Ru);eme=n(P$e,"STRONG",{});var But=s(eme);W5o=r(But,"vit_mae"),But.forEach(t),H5o=r(P$e," \u2014 "),OD=n(P$e,"A",{href:!0});var Iut=s(OD);U5o=r(Iut,"ViTMAEModel"),Iut.forEach(t),J5o=r(P$e," (ViTMAE model)"),P$e.forEach(t),Y5o=i(x),Pu=n(x,"LI",{});var B$e=s(Pu);ome=n(B$e,"STRONG",{});var Nut=s(ome);K5o=r(Nut,"wav2vec2"),Nut.forEach(t),Z5o=r(B$e," \u2014 "),VD=n(B$e,"A",{href:!0});var qut=s(VD);e0o=r(qut,"Wav2Vec2Model"),qut.forEach(t),o0o=r(B$e," (Wav2Vec2 model)"),B$e.forEach(t),r0o=i(x),Bu=n(x,"LI",{});var I$e=s(Bu);rme=n(I$e,"STRONG",{});var jut=s(rme);t0o=r(jut,"wav2vec2-conformer"),jut.forEach(t),a0o=r(I$e," \u2014 "),XD=n(I$e,"A",{href:!0});var Dut=s(XD);n0o=r(Dut,"Wav2Vec2ConformerModel"),Dut.forEach(t),s0o=r(I$e," (Wav2Vec2-Conformer model)"),I$e.forEach(t),l0o=i(x),Iu=n(x,"LI",{});var N$e=s(Iu);tme=n(N$e,"STRONG",{});var Gut=s(tme);i0o=r(Gut,"wavlm"),Gut.forEach(t),d0o=r(N$e," \u2014 "),zD=n(N$e,"A",{href:!0});var Out=s(zD);c0o=r(Out,"WavLMModel"),Out.forEach(t),f0o=r(N$e," (WavLM model)"),N$e.forEach(t),m0o=i(x),Nu=n(x,"LI",{});var q$e=s(Nu);ame=n(q$e,"STRONG",{});var Vut=s(ame);g0o=r(Vut,"xglm"),Vut.forEach(t),h0o=r(q$e," \u2014 "),QD=n(q$e,"A",{href:!0});var Xut=s(QD);p0o=r(Xut,"XGLMModel"),Xut.forEach(t),_0o=r(q$e," (XGLM model)"),q$e.forEach(t),u0o=i(x),qu=n(x,"LI",{});var j$e=s(qu);nme=n(j$e,"STRONG",{});var zut=s(nme);b0o=r(zut,"xlm"),zut.forEach(t),v0o=r(j$e," \u2014 "),WD=n(j$e,"A",{href:!0});var Qut=s(WD);F0o=r(Qut,"XLMModel"),Qut.forEach(t),T0o=r(j$e," (XLM model)"),j$e.forEach(t),M0o=i(x),ju=n(x,"LI",{});var D$e=s(ju);sme=n(D$e,"STRONG",{});var Wut=s(sme);E0o=r(Wut,"xlm-prophetnet"),Wut.forEach(t),C0o=r(D$e," \u2014 "),HD=n(D$e,"A",{href:!0});var Hut=s(HD);w0o=r(Hut,"XLMProphetNetModel"),Hut.forEach(t),A0o=r(D$e," (XLM-ProphetNet model)"),D$e.forEach(t),L0o=i(x),Du=n(x,"LI",{});var G$e=s(Du);lme=n(G$e,"STRONG",{});var Uut=s(lme);y0o=r(Uut,"xlm-roberta"),Uut.forEach(t),x0o=r(G$e," \u2014 "),UD=n(G$e,"A",{href:!0});var Jut=s(UD);$0o=r(Jut,"XLMRobertaModel"),Jut.forEach(t),k0o=r(G$e," (XLM-RoBERTa model)"),G$e.forEach(t),S0o=i(x),Gu=n(x,"LI",{});var O$e=s(Gu);ime=n(O$e,"STRONG",{});var Yut=s(ime);R0o=r(Yut,"xlm-roberta-xl"),Yut.forEach(t),P0o=r(O$e," \u2014 "),JD=n(O$e,"A",{href:!0});var Kut=s(JD);B0o=r(Kut,"XLMRobertaXLModel"),Kut.forEach(t),I0o=r(O$e," (XLM-RoBERTa-XL model)"),O$e.forEach(t),N0o=i(x),Ou=n(x,"LI",{});var V$e=s(Ou);dme=n(V$e,"STRONG",{});var Zut=s(dme);q0o=r(Zut,"xlnet"),Zut.forEach(t),j0o=r(V$e," \u2014 "),YD=n(V$e,"A",{href:!0});var e1t=s(YD);D0o=r(e1t,"XLNetModel"),e1t.forEach(t),G0o=r(V$e," (XLNet model)"),V$e.forEach(t),O0o=i(x),Vu=n(x,"LI",{});var X$e=s(Vu);cme=n(X$e,"STRONG",{});var o1t=s(cme);V0o=r(o1t,"yolos"),o1t.forEach(t),X0o=r(X$e," \u2014 "),KD=n(X$e,"A",{href:!0});var r1t=s(KD);z0o=r(r1t,"YolosModel"),r1t.forEach(t),Q0o=r(X$e," (YOLOS model)"),X$e.forEach(t),W0o=i(x),Xu=n(x,"LI",{});var z$e=s(Xu);fme=n(z$e,"STRONG",{});var t1t=s(fme);H0o=r(t1t,"yoso"),t1t.forEach(t),U0o=r(z$e," \u2014 "),ZD=n(z$e,"A",{href:!0});var a1t=s(ZD);J0o=r(a1t,"YosoModel"),a1t.forEach(t),Y0o=r(z$e," (YOSO model)"),z$e.forEach(t),x.forEach(t),K0o=i(la),zu=n(la,"P",{});var Q$e=s(zu);Z0o=r(Q$e,"The model is set in evaluation mode by default using "),mme=n(Q$e,"CODE",{});var n1t=s(mme);ewo=r(n1t,"model.eval()"),n1t.forEach(t),owo=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(Q$e,"CODE",{});var s1t=s(gme);rwo=r(s1t,"model.train()"),s1t.forEach(t),Q$e.forEach(t),two=i(la),T(Qu.$$.fragment,la),la.forEach(t),rl.forEach(t),mXe=i(f),Xi=n(f,"H2",{class:!0});var bQe=s(Xi);Wu=n(bQe,"A",{id:!0,class:!0,href:!0});var l1t=s(Wu);hme=n(l1t,"SPAN",{});var i1t=s(hme);T(B7.$$.fragment,i1t),i1t.forEach(t),l1t.forEach(t),awo=i(bQe),pme=n(bQe,"SPAN",{});var d1t=s(pme);nwo=r(d1t,"AutoModelForPreTraining"),d1t.forEach(t),bQe.forEach(t),gXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(I7.$$.fragment,tl),swo=i(tl),zi=n(tl,"P",{});var Rre=s(zi);lwo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eG=n(Rre,"A",{href:!0});var c1t=s(eG);iwo=r(c1t,"from_pretrained()"),c1t.forEach(t),dwo=r(Rre," class method or the "),oG=n(Rre,"A",{href:!0});var f1t=s(oG);cwo=r(f1t,"from_config()"),f1t.forEach(t),fwo=r(Rre,` class
method.`),Rre.forEach(t),mwo=i(tl),N7=n(tl,"P",{});var vQe=s(N7);gwo=r(vQe,"This class cannot be instantiated directly using "),_me=n(vQe,"CODE",{});var m1t=s(_me);hwo=r(m1t,"__init__()"),m1t.forEach(t),pwo=r(vQe," (throws an error)."),vQe.forEach(t),_wo=i(tl),dt=n(tl,"DIV",{class:!0});var cw=s(dt);T(q7.$$.fragment,cw),uwo=i(cw),ume=n(cw,"P",{});var g1t=s(ume);bwo=r(g1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g1t.forEach(t),vwo=i(cw),Qi=n(cw,"P",{});var Pre=s(Qi);Fwo=r(Pre,`Note:
Loading a model from its configuration file does `),bme=n(Pre,"STRONG",{});var h1t=s(bme);Two=r(h1t,"not"),h1t.forEach(t),Mwo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(Pre,"A",{href:!0});var p1t=s(rG);Ewo=r(p1t,"from_pretrained()"),p1t.forEach(t),Cwo=r(Pre," to load the model weights."),Pre.forEach(t),wwo=i(cw),T(Hu.$$.fragment,cw),cw.forEach(t),Awo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(j7.$$.fragment,ia),Lwo=i(ia),vme=n(ia,"P",{});var _1t=s(vme);ywo=r(_1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_1t.forEach(t),xwo=i(ia),Na=n(ia,"P",{});var fw=s(Na);$wo=r(fw,"The model class to instantiate is selected based on the "),Fme=n(fw,"CODE",{});var u1t=s(Fme);kwo=r(u1t,"model_type"),u1t.forEach(t),Swo=r(fw,` property of the config object (either
passed as an argument or loaded from `),Tme=n(fw,"CODE",{});var b1t=s(Tme);Rwo=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Pwo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(fw,"CODE",{});var v1t=s(Mme);Bwo=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Iwo=r(fw,":"),fw.forEach(t),Nwo=i(ia),G=n(ia,"UL",{});var O=s(G);Uu=n(O,"LI",{});var W$e=s(Uu);Eme=n(W$e,"STRONG",{});var F1t=s(Eme);qwo=r(F1t,"albert"),F1t.forEach(t),jwo=r(W$e," \u2014 "),tG=n(W$e,"A",{href:!0});var T1t=s(tG);Dwo=r(T1t,"AlbertForPreTraining"),T1t.forEach(t),Gwo=r(W$e," (ALBERT model)"),W$e.forEach(t),Owo=i(O),Ju=n(O,"LI",{});var H$e=s(Ju);Cme=n(H$e,"STRONG",{});var M1t=s(Cme);Vwo=r(M1t,"bart"),M1t.forEach(t),Xwo=r(H$e," \u2014 "),aG=n(H$e,"A",{href:!0});var E1t=s(aG);zwo=r(E1t,"BartForConditionalGeneration"),E1t.forEach(t),Qwo=r(H$e," (BART model)"),H$e.forEach(t),Wwo=i(O),Yu=n(O,"LI",{});var U$e=s(Yu);wme=n(U$e,"STRONG",{});var C1t=s(wme);Hwo=r(C1t,"bert"),C1t.forEach(t),Uwo=r(U$e," \u2014 "),nG=n(U$e,"A",{href:!0});var w1t=s(nG);Jwo=r(w1t,"BertForPreTraining"),w1t.forEach(t),Ywo=r(U$e," (BERT model)"),U$e.forEach(t),Kwo=i(O),Ku=n(O,"LI",{});var J$e=s(Ku);Ame=n(J$e,"STRONG",{});var A1t=s(Ame);Zwo=r(A1t,"big_bird"),A1t.forEach(t),eAo=r(J$e," \u2014 "),sG=n(J$e,"A",{href:!0});var L1t=s(sG);oAo=r(L1t,"BigBirdForPreTraining"),L1t.forEach(t),rAo=r(J$e," (BigBird model)"),J$e.forEach(t),tAo=i(O),Zu=n(O,"LI",{});var Y$e=s(Zu);Lme=n(Y$e,"STRONG",{});var y1t=s(Lme);aAo=r(y1t,"bloom"),y1t.forEach(t),nAo=r(Y$e," \u2014 "),lG=n(Y$e,"A",{href:!0});var x1t=s(lG);sAo=r(x1t,"BloomForCausalLM"),x1t.forEach(t),lAo=r(Y$e," (BLOOM model)"),Y$e.forEach(t),iAo=i(O),e1=n(O,"LI",{});var K$e=s(e1);yme=n(K$e,"STRONG",{});var $1t=s(yme);dAo=r($1t,"camembert"),$1t.forEach(t),cAo=r(K$e," \u2014 "),iG=n(K$e,"A",{href:!0});var k1t=s(iG);fAo=r(k1t,"CamembertForMaskedLM"),k1t.forEach(t),mAo=r(K$e," (CamemBERT model)"),K$e.forEach(t),gAo=i(O),o1=n(O,"LI",{});var Z$e=s(o1);xme=n(Z$e,"STRONG",{});var S1t=s(xme);hAo=r(S1t,"ctrl"),S1t.forEach(t),pAo=r(Z$e," \u2014 "),dG=n(Z$e,"A",{href:!0});var R1t=s(dG);_Ao=r(R1t,"CTRLLMHeadModel"),R1t.forEach(t),uAo=r(Z$e," (CTRL model)"),Z$e.forEach(t),bAo=i(O),r1=n(O,"LI",{});var eke=s(r1);$me=n(eke,"STRONG",{});var P1t=s($me);vAo=r(P1t,"data2vec-text"),P1t.forEach(t),FAo=r(eke," \u2014 "),cG=n(eke,"A",{href:!0});var B1t=s(cG);TAo=r(B1t,"Data2VecTextForMaskedLM"),B1t.forEach(t),MAo=r(eke," (Data2VecText model)"),eke.forEach(t),EAo=i(O),t1=n(O,"LI",{});var oke=s(t1);kme=n(oke,"STRONG",{});var I1t=s(kme);CAo=r(I1t,"deberta"),I1t.forEach(t),wAo=r(oke," \u2014 "),fG=n(oke,"A",{href:!0});var N1t=s(fG);AAo=r(N1t,"DebertaForMaskedLM"),N1t.forEach(t),LAo=r(oke," (DeBERTa model)"),oke.forEach(t),yAo=i(O),a1=n(O,"LI",{});var rke=s(a1);Sme=n(rke,"STRONG",{});var q1t=s(Sme);xAo=r(q1t,"deberta-v2"),q1t.forEach(t),$Ao=r(rke," \u2014 "),mG=n(rke,"A",{href:!0});var j1t=s(mG);kAo=r(j1t,"DebertaV2ForMaskedLM"),j1t.forEach(t),SAo=r(rke," (DeBERTa-v2 model)"),rke.forEach(t),RAo=i(O),n1=n(O,"LI",{});var tke=s(n1);Rme=n(tke,"STRONG",{});var D1t=s(Rme);PAo=r(D1t,"distilbert"),D1t.forEach(t),BAo=r(tke," \u2014 "),gG=n(tke,"A",{href:!0});var G1t=s(gG);IAo=r(G1t,"DistilBertForMaskedLM"),G1t.forEach(t),NAo=r(tke," (DistilBERT model)"),tke.forEach(t),qAo=i(O),s1=n(O,"LI",{});var ake=s(s1);Pme=n(ake,"STRONG",{});var O1t=s(Pme);jAo=r(O1t,"electra"),O1t.forEach(t),DAo=r(ake," \u2014 "),hG=n(ake,"A",{href:!0});var V1t=s(hG);GAo=r(V1t,"ElectraForPreTraining"),V1t.forEach(t),OAo=r(ake," (ELECTRA model)"),ake.forEach(t),VAo=i(O),l1=n(O,"LI",{});var nke=s(l1);Bme=n(nke,"STRONG",{});var X1t=s(Bme);XAo=r(X1t,"flaubert"),X1t.forEach(t),zAo=r(nke," \u2014 "),pG=n(nke,"A",{href:!0});var z1t=s(pG);QAo=r(z1t,"FlaubertWithLMHeadModel"),z1t.forEach(t),WAo=r(nke," (FlauBERT model)"),nke.forEach(t),HAo=i(O),i1=n(O,"LI",{});var ske=s(i1);Ime=n(ske,"STRONG",{});var Q1t=s(Ime);UAo=r(Q1t,"flava"),Q1t.forEach(t),JAo=r(ske," \u2014 "),_G=n(ske,"A",{href:!0});var W1t=s(_G);YAo=r(W1t,"FlavaForPreTraining"),W1t.forEach(t),KAo=r(ske," (FLAVA model)"),ske.forEach(t),ZAo=i(O),d1=n(O,"LI",{});var lke=s(d1);Nme=n(lke,"STRONG",{});var H1t=s(Nme);e7o=r(H1t,"fnet"),H1t.forEach(t),o7o=r(lke," \u2014 "),uG=n(lke,"A",{href:!0});var U1t=s(uG);r7o=r(U1t,"FNetForPreTraining"),U1t.forEach(t),t7o=r(lke," (FNet model)"),lke.forEach(t),a7o=i(O),c1=n(O,"LI",{});var ike=s(c1);qme=n(ike,"STRONG",{});var J1t=s(qme);n7o=r(J1t,"fsmt"),J1t.forEach(t),s7o=r(ike," \u2014 "),bG=n(ike,"A",{href:!0});var Y1t=s(bG);l7o=r(Y1t,"FSMTForConditionalGeneration"),Y1t.forEach(t),i7o=r(ike," (FairSeq Machine-Translation model)"),ike.forEach(t),d7o=i(O),f1=n(O,"LI",{});var dke=s(f1);jme=n(dke,"STRONG",{});var K1t=s(jme);c7o=r(K1t,"funnel"),K1t.forEach(t),f7o=r(dke," \u2014 "),vG=n(dke,"A",{href:!0});var Z1t=s(vG);m7o=r(Z1t,"FunnelForPreTraining"),Z1t.forEach(t),g7o=r(dke," (Funnel Transformer model)"),dke.forEach(t),h7o=i(O),m1=n(O,"LI",{});var cke=s(m1);Dme=n(cke,"STRONG",{});var e2t=s(Dme);p7o=r(e2t,"gpt2"),e2t.forEach(t),_7o=r(cke," \u2014 "),FG=n(cke,"A",{href:!0});var o2t=s(FG);u7o=r(o2t,"GPT2LMHeadModel"),o2t.forEach(t),b7o=r(cke," (OpenAI GPT-2 model)"),cke.forEach(t),v7o=i(O),g1=n(O,"LI",{});var fke=s(g1);Gme=n(fke,"STRONG",{});var r2t=s(Gme);F7o=r(r2t,"ibert"),r2t.forEach(t),T7o=r(fke," \u2014 "),TG=n(fke,"A",{href:!0});var t2t=s(TG);M7o=r(t2t,"IBertForMaskedLM"),t2t.forEach(t),E7o=r(fke," (I-BERT model)"),fke.forEach(t),C7o=i(O),h1=n(O,"LI",{});var mke=s(h1);Ome=n(mke,"STRONG",{});var a2t=s(Ome);w7o=r(a2t,"layoutlm"),a2t.forEach(t),A7o=r(mke," \u2014 "),MG=n(mke,"A",{href:!0});var n2t=s(MG);L7o=r(n2t,"LayoutLMForMaskedLM"),n2t.forEach(t),y7o=r(mke," (LayoutLM model)"),mke.forEach(t),x7o=i(O),p1=n(O,"LI",{});var gke=s(p1);Vme=n(gke,"STRONG",{});var s2t=s(Vme);$7o=r(s2t,"longformer"),s2t.forEach(t),k7o=r(gke," \u2014 "),EG=n(gke,"A",{href:!0});var l2t=s(EG);S7o=r(l2t,"LongformerForMaskedLM"),l2t.forEach(t),R7o=r(gke," (Longformer model)"),gke.forEach(t),P7o=i(O),_1=n(O,"LI",{});var hke=s(_1);Xme=n(hke,"STRONG",{});var i2t=s(Xme);B7o=r(i2t,"lxmert"),i2t.forEach(t),I7o=r(hke," \u2014 "),CG=n(hke,"A",{href:!0});var d2t=s(CG);N7o=r(d2t,"LxmertForPreTraining"),d2t.forEach(t),q7o=r(hke," (LXMERT model)"),hke.forEach(t),j7o=i(O),u1=n(O,"LI",{});var pke=s(u1);zme=n(pke,"STRONG",{});var c2t=s(zme);D7o=r(c2t,"megatron-bert"),c2t.forEach(t),G7o=r(pke," \u2014 "),wG=n(pke,"A",{href:!0});var f2t=s(wG);O7o=r(f2t,"MegatronBertForPreTraining"),f2t.forEach(t),V7o=r(pke," (Megatron-BERT model)"),pke.forEach(t),X7o=i(O),b1=n(O,"LI",{});var _ke=s(b1);Qme=n(_ke,"STRONG",{});var m2t=s(Qme);z7o=r(m2t,"mobilebert"),m2t.forEach(t),Q7o=r(_ke," \u2014 "),AG=n(_ke,"A",{href:!0});var g2t=s(AG);W7o=r(g2t,"MobileBertForPreTraining"),g2t.forEach(t),H7o=r(_ke," (MobileBERT model)"),_ke.forEach(t),U7o=i(O),v1=n(O,"LI",{});var uke=s(v1);Wme=n(uke,"STRONG",{});var h2t=s(Wme);J7o=r(h2t,"mpnet"),h2t.forEach(t),Y7o=r(uke," \u2014 "),LG=n(uke,"A",{href:!0});var p2t=s(LG);K7o=r(p2t,"MPNetForMaskedLM"),p2t.forEach(t),Z7o=r(uke," (MPNet model)"),uke.forEach(t),eLo=i(O),F1=n(O,"LI",{});var bke=s(F1);Hme=n(bke,"STRONG",{});var _2t=s(Hme);oLo=r(_2t,"mvp"),_2t.forEach(t),rLo=r(bke," \u2014 "),yG=n(bke,"A",{href:!0});var u2t=s(yG);tLo=r(u2t,"MvpForConditionalGeneration"),u2t.forEach(t),aLo=r(bke," (MVP model)"),bke.forEach(t),nLo=i(O),T1=n(O,"LI",{});var vke=s(T1);Ume=n(vke,"STRONG",{});var b2t=s(Ume);sLo=r(b2t,"nezha"),b2t.forEach(t),lLo=r(vke," \u2014 "),xG=n(vke,"A",{href:!0});var v2t=s(xG);iLo=r(v2t,"NezhaForPreTraining"),v2t.forEach(t),dLo=r(vke," (Nezha model)"),vke.forEach(t),cLo=i(O),M1=n(O,"LI",{});var Fke=s(M1);Jme=n(Fke,"STRONG",{});var F2t=s(Jme);fLo=r(F2t,"openai-gpt"),F2t.forEach(t),mLo=r(Fke," \u2014 "),$G=n(Fke,"A",{href:!0});var T2t=s($G);gLo=r(T2t,"OpenAIGPTLMHeadModel"),T2t.forEach(t),hLo=r(Fke," (OpenAI GPT model)"),Fke.forEach(t),pLo=i(O),E1=n(O,"LI",{});var Tke=s(E1);Yme=n(Tke,"STRONG",{});var M2t=s(Yme);_Lo=r(M2t,"retribert"),M2t.forEach(t),uLo=r(Tke," \u2014 "),kG=n(Tke,"A",{href:!0});var E2t=s(kG);bLo=r(E2t,"RetriBertModel"),E2t.forEach(t),vLo=r(Tke," (RetriBERT model)"),Tke.forEach(t),FLo=i(O),C1=n(O,"LI",{});var Mke=s(C1);Kme=n(Mke,"STRONG",{});var C2t=s(Kme);TLo=r(C2t,"roberta"),C2t.forEach(t),MLo=r(Mke," \u2014 "),SG=n(Mke,"A",{href:!0});var w2t=s(SG);ELo=r(w2t,"RobertaForMaskedLM"),w2t.forEach(t),CLo=r(Mke," (RoBERTa model)"),Mke.forEach(t),wLo=i(O),w1=n(O,"LI",{});var Eke=s(w1);Zme=n(Eke,"STRONG",{});var A2t=s(Zme);ALo=r(A2t,"splinter"),A2t.forEach(t),LLo=r(Eke," \u2014 "),RG=n(Eke,"A",{href:!0});var L2t=s(RG);yLo=r(L2t,"SplinterForPreTraining"),L2t.forEach(t),xLo=r(Eke," (Splinter model)"),Eke.forEach(t),$Lo=i(O),A1=n(O,"LI",{});var Cke=s(A1);ege=n(Cke,"STRONG",{});var y2t=s(ege);kLo=r(y2t,"squeezebert"),y2t.forEach(t),SLo=r(Cke," \u2014 "),PG=n(Cke,"A",{href:!0});var x2t=s(PG);RLo=r(x2t,"SqueezeBertForMaskedLM"),x2t.forEach(t),PLo=r(Cke," (SqueezeBERT model)"),Cke.forEach(t),BLo=i(O),L1=n(O,"LI",{});var wke=s(L1);oge=n(wke,"STRONG",{});var $2t=s(oge);ILo=r($2t,"t5"),$2t.forEach(t),NLo=r(wke," \u2014 "),BG=n(wke,"A",{href:!0});var k2t=s(BG);qLo=r(k2t,"T5ForConditionalGeneration"),k2t.forEach(t),jLo=r(wke," (T5 model)"),wke.forEach(t),DLo=i(O),y1=n(O,"LI",{});var Ake=s(y1);rge=n(Ake,"STRONG",{});var S2t=s(rge);GLo=r(S2t,"tapas"),S2t.forEach(t),OLo=r(Ake," \u2014 "),IG=n(Ake,"A",{href:!0});var R2t=s(IG);VLo=r(R2t,"TapasForMaskedLM"),R2t.forEach(t),XLo=r(Ake," (TAPAS model)"),Ake.forEach(t),zLo=i(O),x1=n(O,"LI",{});var Lke=s(x1);tge=n(Lke,"STRONG",{});var P2t=s(tge);QLo=r(P2t,"transfo-xl"),P2t.forEach(t),WLo=r(Lke," \u2014 "),NG=n(Lke,"A",{href:!0});var B2t=s(NG);HLo=r(B2t,"TransfoXLLMHeadModel"),B2t.forEach(t),ULo=r(Lke," (Transformer-XL model)"),Lke.forEach(t),JLo=i(O),$1=n(O,"LI",{});var yke=s($1);age=n(yke,"STRONG",{});var I2t=s(age);YLo=r(I2t,"unispeech"),I2t.forEach(t),KLo=r(yke," \u2014 "),qG=n(yke,"A",{href:!0});var N2t=s(qG);ZLo=r(N2t,"UniSpeechForPreTraining"),N2t.forEach(t),eyo=r(yke," (UniSpeech model)"),yke.forEach(t),oyo=i(O),k1=n(O,"LI",{});var xke=s(k1);nge=n(xke,"STRONG",{});var q2t=s(nge);ryo=r(q2t,"unispeech-sat"),q2t.forEach(t),tyo=r(xke," \u2014 "),jG=n(xke,"A",{href:!0});var j2t=s(jG);ayo=r(j2t,"UniSpeechSatForPreTraining"),j2t.forEach(t),nyo=r(xke," (UniSpeechSat model)"),xke.forEach(t),syo=i(O),S1=n(O,"LI",{});var $ke=s(S1);sge=n($ke,"STRONG",{});var D2t=s(sge);lyo=r(D2t,"visual_bert"),D2t.forEach(t),iyo=r($ke," \u2014 "),DG=n($ke,"A",{href:!0});var G2t=s(DG);dyo=r(G2t,"VisualBertForPreTraining"),G2t.forEach(t),cyo=r($ke," (VisualBERT model)"),$ke.forEach(t),fyo=i(O),R1=n(O,"LI",{});var kke=s(R1);lge=n(kke,"STRONG",{});var O2t=s(lge);myo=r(O2t,"vit_mae"),O2t.forEach(t),gyo=r(kke," \u2014 "),GG=n(kke,"A",{href:!0});var V2t=s(GG);hyo=r(V2t,"ViTMAEForPreTraining"),V2t.forEach(t),pyo=r(kke," (ViTMAE model)"),kke.forEach(t),_yo=i(O),P1=n(O,"LI",{});var Ske=s(P1);ige=n(Ske,"STRONG",{});var X2t=s(ige);uyo=r(X2t,"wav2vec2"),X2t.forEach(t),byo=r(Ske," \u2014 "),OG=n(Ske,"A",{href:!0});var z2t=s(OG);vyo=r(z2t,"Wav2Vec2ForPreTraining"),z2t.forEach(t),Fyo=r(Ske," (Wav2Vec2 model)"),Ske.forEach(t),Tyo=i(O),B1=n(O,"LI",{});var Rke=s(B1);dge=n(Rke,"STRONG",{});var Q2t=s(dge);Myo=r(Q2t,"wav2vec2-conformer"),Q2t.forEach(t),Eyo=r(Rke," \u2014 "),VG=n(Rke,"A",{href:!0});var W2t=s(VG);Cyo=r(W2t,"Wav2Vec2ConformerForPreTraining"),W2t.forEach(t),wyo=r(Rke," (Wav2Vec2-Conformer model)"),Rke.forEach(t),Ayo=i(O),I1=n(O,"LI",{});var Pke=s(I1);cge=n(Pke,"STRONG",{});var H2t=s(cge);Lyo=r(H2t,"xlm"),H2t.forEach(t),yyo=r(Pke," \u2014 "),XG=n(Pke,"A",{href:!0});var U2t=s(XG);xyo=r(U2t,"XLMWithLMHeadModel"),U2t.forEach(t),$yo=r(Pke," (XLM model)"),Pke.forEach(t),kyo=i(O),N1=n(O,"LI",{});var Bke=s(N1);fge=n(Bke,"STRONG",{});var J2t=s(fge);Syo=r(J2t,"xlm-roberta"),J2t.forEach(t),Ryo=r(Bke," \u2014 "),zG=n(Bke,"A",{href:!0});var Y2t=s(zG);Pyo=r(Y2t,"XLMRobertaForMaskedLM"),Y2t.forEach(t),Byo=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),Iyo=i(O),q1=n(O,"LI",{});var Ike=s(q1);mge=n(Ike,"STRONG",{});var K2t=s(mge);Nyo=r(K2t,"xlm-roberta-xl"),K2t.forEach(t),qyo=r(Ike," \u2014 "),QG=n(Ike,"A",{href:!0});var Z2t=s(QG);jyo=r(Z2t,"XLMRobertaXLForMaskedLM"),Z2t.forEach(t),Dyo=r(Ike," (XLM-RoBERTa-XL model)"),Ike.forEach(t),Gyo=i(O),j1=n(O,"LI",{});var Nke=s(j1);gge=n(Nke,"STRONG",{});var ebt=s(gge);Oyo=r(ebt,"xlnet"),ebt.forEach(t),Vyo=r(Nke," \u2014 "),WG=n(Nke,"A",{href:!0});var obt=s(WG);Xyo=r(obt,"XLNetLMHeadModel"),obt.forEach(t),zyo=r(Nke," (XLNet model)"),Nke.forEach(t),O.forEach(t),Qyo=i(ia),D1=n(ia,"P",{});var qke=s(D1);Wyo=r(qke,"The model is set in evaluation mode by default using "),hge=n(qke,"CODE",{});var rbt=s(hge);Hyo=r(rbt,"model.eval()"),rbt.forEach(t),Uyo=r(qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(qke,"CODE",{});var tbt=s(pge);Jyo=r(tbt,"model.train()"),tbt.forEach(t),qke.forEach(t),Yyo=i(ia),T(G1.$$.fragment,ia),ia.forEach(t),tl.forEach(t),hXe=i(f),Wi=n(f,"H2",{class:!0});var FQe=s(Wi);O1=n(FQe,"A",{id:!0,class:!0,href:!0});var abt=s(O1);_ge=n(abt,"SPAN",{});var nbt=s(_ge);T(D7.$$.fragment,nbt),nbt.forEach(t),abt.forEach(t),Kyo=i(FQe),uge=n(FQe,"SPAN",{});var sbt=s(uge);Zyo=r(sbt,"AutoModelForCausalLM"),sbt.forEach(t),FQe.forEach(t),pXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(G7.$$.fragment,al),exo=i(al),Hi=n(al,"P",{});var Bre=s(Hi);oxo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HG=n(Bre,"A",{href:!0});var lbt=s(HG);rxo=r(lbt,"from_pretrained()"),lbt.forEach(t),txo=r(Bre," class method or the "),UG=n(Bre,"A",{href:!0});var ibt=s(UG);axo=r(ibt,"from_config()"),ibt.forEach(t),nxo=r(Bre,` class
method.`),Bre.forEach(t),sxo=i(al),O7=n(al,"P",{});var TQe=s(O7);lxo=r(TQe,"This class cannot be instantiated directly using "),bge=n(TQe,"CODE",{});var dbt=s(bge);ixo=r(dbt,"__init__()"),dbt.forEach(t),dxo=r(TQe," (throws an error)."),TQe.forEach(t),cxo=i(al),ct=n(al,"DIV",{class:!0});var mw=s(ct);T(V7.$$.fragment,mw),fxo=i(mw),vge=n(mw,"P",{});var cbt=s(vge);mxo=r(cbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cbt.forEach(t),gxo=i(mw),Ui=n(mw,"P",{});var Ire=s(Ui);hxo=r(Ire,`Note:
Loading a model from its configuration file does `),Fge=n(Ire,"STRONG",{});var fbt=s(Fge);pxo=r(fbt,"not"),fbt.forEach(t),_xo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(Ire,"A",{href:!0});var mbt=s(JG);uxo=r(mbt,"from_pretrained()"),mbt.forEach(t),bxo=r(Ire," to load the model weights."),Ire.forEach(t),vxo=i(mw),T(V1.$$.fragment,mw),mw.forEach(t),Fxo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(X7.$$.fragment,da),Txo=i(da),Tge=n(da,"P",{});var gbt=s(Tge);Mxo=r(gbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gbt.forEach(t),Exo=i(da),qa=n(da,"P",{});var gw=s(qa);Cxo=r(gw,"The model class to instantiate is selected based on the "),Mge=n(gw,"CODE",{});var hbt=s(Mge);wxo=r(hbt,"model_type"),hbt.forEach(t),Axo=r(gw,` property of the config object (either
passed as an argument or loaded from `),Ege=n(gw,"CODE",{});var pbt=s(Ege);Lxo=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),yxo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(gw,"CODE",{});var _bt=s(Cge);xxo=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),$xo=r(gw,":"),gw.forEach(t),kxo=i(da),z=n(da,"UL",{});var Q=s(z);X1=n(Q,"LI",{});var jke=s(X1);wge=n(jke,"STRONG",{});var ubt=s(wge);Sxo=r(ubt,"bart"),ubt.forEach(t),Rxo=r(jke," \u2014 "),YG=n(jke,"A",{href:!0});var bbt=s(YG);Pxo=r(bbt,"BartForCausalLM"),bbt.forEach(t),Bxo=r(jke," (BART model)"),jke.forEach(t),Ixo=i(Q),z1=n(Q,"LI",{});var Dke=s(z1);Age=n(Dke,"STRONG",{});var vbt=s(Age);Nxo=r(vbt,"bert"),vbt.forEach(t),qxo=r(Dke," \u2014 "),KG=n(Dke,"A",{href:!0});var Fbt=s(KG);jxo=r(Fbt,"BertLMHeadModel"),Fbt.forEach(t),Dxo=r(Dke," (BERT model)"),Dke.forEach(t),Gxo=i(Q),Q1=n(Q,"LI",{});var Gke=s(Q1);Lge=n(Gke,"STRONG",{});var Tbt=s(Lge);Oxo=r(Tbt,"bert-generation"),Tbt.forEach(t),Vxo=r(Gke," \u2014 "),ZG=n(Gke,"A",{href:!0});var Mbt=s(ZG);Xxo=r(Mbt,"BertGenerationDecoder"),Mbt.forEach(t),zxo=r(Gke," (Bert Generation model)"),Gke.forEach(t),Qxo=i(Q),W1=n(Q,"LI",{});var Oke=s(W1);yge=n(Oke,"STRONG",{});var Ebt=s(yge);Wxo=r(Ebt,"big_bird"),Ebt.forEach(t),Hxo=r(Oke," \u2014 "),eO=n(Oke,"A",{href:!0});var Cbt=s(eO);Uxo=r(Cbt,"BigBirdForCausalLM"),Cbt.forEach(t),Jxo=r(Oke," (BigBird model)"),Oke.forEach(t),Yxo=i(Q),H1=n(Q,"LI",{});var Vke=s(H1);xge=n(Vke,"STRONG",{});var wbt=s(xge);Kxo=r(wbt,"bigbird_pegasus"),wbt.forEach(t),Zxo=r(Vke," \u2014 "),oO=n(Vke,"A",{href:!0});var Abt=s(oO);e$o=r(Abt,"BigBirdPegasusForCausalLM"),Abt.forEach(t),o$o=r(Vke," (BigBird-Pegasus model)"),Vke.forEach(t),r$o=i(Q),U1=n(Q,"LI",{});var Xke=s(U1);$ge=n(Xke,"STRONG",{});var Lbt=s($ge);t$o=r(Lbt,"blenderbot"),Lbt.forEach(t),a$o=r(Xke," \u2014 "),rO=n(Xke,"A",{href:!0});var ybt=s(rO);n$o=r(ybt,"BlenderbotForCausalLM"),ybt.forEach(t),s$o=r(Xke," (Blenderbot model)"),Xke.forEach(t),l$o=i(Q),J1=n(Q,"LI",{});var zke=s(J1);kge=n(zke,"STRONG",{});var xbt=s(kge);i$o=r(xbt,"blenderbot-small"),xbt.forEach(t),d$o=r(zke," \u2014 "),tO=n(zke,"A",{href:!0});var $bt=s(tO);c$o=r($bt,"BlenderbotSmallForCausalLM"),$bt.forEach(t),f$o=r(zke," (BlenderbotSmall model)"),zke.forEach(t),m$o=i(Q),Y1=n(Q,"LI",{});var Qke=s(Y1);Sge=n(Qke,"STRONG",{});var kbt=s(Sge);g$o=r(kbt,"bloom"),kbt.forEach(t),h$o=r(Qke," \u2014 "),aO=n(Qke,"A",{href:!0});var Sbt=s(aO);p$o=r(Sbt,"BloomForCausalLM"),Sbt.forEach(t),_$o=r(Qke," (BLOOM model)"),Qke.forEach(t),u$o=i(Q),K1=n(Q,"LI",{});var Wke=s(K1);Rge=n(Wke,"STRONG",{});var Rbt=s(Rge);b$o=r(Rbt,"camembert"),Rbt.forEach(t),v$o=r(Wke," \u2014 "),nO=n(Wke,"A",{href:!0});var Pbt=s(nO);F$o=r(Pbt,"CamembertForCausalLM"),Pbt.forEach(t),T$o=r(Wke," (CamemBERT model)"),Wke.forEach(t),M$o=i(Q),Z1=n(Q,"LI",{});var Hke=s(Z1);Pge=n(Hke,"STRONG",{});var Bbt=s(Pge);E$o=r(Bbt,"codegen"),Bbt.forEach(t),C$o=r(Hke," \u2014 "),sO=n(Hke,"A",{href:!0});var Ibt=s(sO);w$o=r(Ibt,"CodeGenForCausalLM"),Ibt.forEach(t),A$o=r(Hke," (CodeGen model)"),Hke.forEach(t),L$o=i(Q),e2=n(Q,"LI",{});var Uke=s(e2);Bge=n(Uke,"STRONG",{});var Nbt=s(Bge);y$o=r(Nbt,"ctrl"),Nbt.forEach(t),x$o=r(Uke," \u2014 "),lO=n(Uke,"A",{href:!0});var qbt=s(lO);$$o=r(qbt,"CTRLLMHeadModel"),qbt.forEach(t),k$o=r(Uke," (CTRL model)"),Uke.forEach(t),S$o=i(Q),o2=n(Q,"LI",{});var Jke=s(o2);Ige=n(Jke,"STRONG",{});var jbt=s(Ige);R$o=r(jbt,"data2vec-text"),jbt.forEach(t),P$o=r(Jke," \u2014 "),iO=n(Jke,"A",{href:!0});var Dbt=s(iO);B$o=r(Dbt,"Data2VecTextForCausalLM"),Dbt.forEach(t),I$o=r(Jke," (Data2VecText model)"),Jke.forEach(t),N$o=i(Q),r2=n(Q,"LI",{});var Yke=s(r2);Nge=n(Yke,"STRONG",{});var Gbt=s(Nge);q$o=r(Gbt,"electra"),Gbt.forEach(t),j$o=r(Yke," \u2014 "),dO=n(Yke,"A",{href:!0});var Obt=s(dO);D$o=r(Obt,"ElectraForCausalLM"),Obt.forEach(t),G$o=r(Yke," (ELECTRA model)"),Yke.forEach(t),O$o=i(Q),t2=n(Q,"LI",{});var Kke=s(t2);qge=n(Kke,"STRONG",{});var Vbt=s(qge);V$o=r(Vbt,"gpt2"),Vbt.forEach(t),X$o=r(Kke," \u2014 "),cO=n(Kke,"A",{href:!0});var Xbt=s(cO);z$o=r(Xbt,"GPT2LMHeadModel"),Xbt.forEach(t),Q$o=r(Kke," (OpenAI GPT-2 model)"),Kke.forEach(t),W$o=i(Q),a2=n(Q,"LI",{});var Zke=s(a2);jge=n(Zke,"STRONG",{});var zbt=s(jge);H$o=r(zbt,"gpt_neo"),zbt.forEach(t),U$o=r(Zke," \u2014 "),fO=n(Zke,"A",{href:!0});var Qbt=s(fO);J$o=r(Qbt,"GPTNeoForCausalLM"),Qbt.forEach(t),Y$o=r(Zke," (GPT Neo model)"),Zke.forEach(t),K$o=i(Q),n2=n(Q,"LI",{});var eSe=s(n2);Dge=n(eSe,"STRONG",{});var Wbt=s(Dge);Z$o=r(Wbt,"gpt_neox"),Wbt.forEach(t),eko=r(eSe," \u2014 "),mO=n(eSe,"A",{href:!0});var Hbt=s(mO);oko=r(Hbt,"GPTNeoXForCausalLM"),Hbt.forEach(t),rko=r(eSe," (GPT NeoX model)"),eSe.forEach(t),tko=i(Q),s2=n(Q,"LI",{});var oSe=s(s2);Gge=n(oSe,"STRONG",{});var Ubt=s(Gge);ako=r(Ubt,"gptj"),Ubt.forEach(t),nko=r(oSe," \u2014 "),gO=n(oSe,"A",{href:!0});var Jbt=s(gO);sko=r(Jbt,"GPTJForCausalLM"),Jbt.forEach(t),lko=r(oSe," (GPT-J model)"),oSe.forEach(t),iko=i(Q),l2=n(Q,"LI",{});var rSe=s(l2);Oge=n(rSe,"STRONG",{});var Ybt=s(Oge);dko=r(Ybt,"marian"),Ybt.forEach(t),cko=r(rSe," \u2014 "),hO=n(rSe,"A",{href:!0});var Kbt=s(hO);fko=r(Kbt,"MarianForCausalLM"),Kbt.forEach(t),mko=r(rSe," (Marian model)"),rSe.forEach(t),gko=i(Q),i2=n(Q,"LI",{});var tSe=s(i2);Vge=n(tSe,"STRONG",{});var Zbt=s(Vge);hko=r(Zbt,"mbart"),Zbt.forEach(t),pko=r(tSe," \u2014 "),pO=n(tSe,"A",{href:!0});var evt=s(pO);_ko=r(evt,"MBartForCausalLM"),evt.forEach(t),uko=r(tSe," (mBART model)"),tSe.forEach(t),bko=i(Q),d2=n(Q,"LI",{});var aSe=s(d2);Xge=n(aSe,"STRONG",{});var ovt=s(Xge);vko=r(ovt,"megatron-bert"),ovt.forEach(t),Fko=r(aSe," \u2014 "),_O=n(aSe,"A",{href:!0});var rvt=s(_O);Tko=r(rvt,"MegatronBertForCausalLM"),rvt.forEach(t),Mko=r(aSe," (Megatron-BERT model)"),aSe.forEach(t),Eko=i(Q),c2=n(Q,"LI",{});var nSe=s(c2);zge=n(nSe,"STRONG",{});var tvt=s(zge);Cko=r(tvt,"mvp"),tvt.forEach(t),wko=r(nSe," \u2014 "),uO=n(nSe,"A",{href:!0});var avt=s(uO);Ako=r(avt,"MvpForCausalLM"),avt.forEach(t),Lko=r(nSe," (MVP model)"),nSe.forEach(t),yko=i(Q),f2=n(Q,"LI",{});var sSe=s(f2);Qge=n(sSe,"STRONG",{});var nvt=s(Qge);xko=r(nvt,"openai-gpt"),nvt.forEach(t),$ko=r(sSe," \u2014 "),bO=n(sSe,"A",{href:!0});var svt=s(bO);kko=r(svt,"OpenAIGPTLMHeadModel"),svt.forEach(t),Sko=r(sSe," (OpenAI GPT model)"),sSe.forEach(t),Rko=i(Q),m2=n(Q,"LI",{});var lSe=s(m2);Wge=n(lSe,"STRONG",{});var lvt=s(Wge);Pko=r(lvt,"opt"),lvt.forEach(t),Bko=r(lSe," \u2014 "),vO=n(lSe,"A",{href:!0});var ivt=s(vO);Iko=r(ivt,"OPTForCausalLM"),ivt.forEach(t),Nko=r(lSe," (OPT model)"),lSe.forEach(t),qko=i(Q),g2=n(Q,"LI",{});var iSe=s(g2);Hge=n(iSe,"STRONG",{});var dvt=s(Hge);jko=r(dvt,"pegasus"),dvt.forEach(t),Dko=r(iSe," \u2014 "),FO=n(iSe,"A",{href:!0});var cvt=s(FO);Gko=r(cvt,"PegasusForCausalLM"),cvt.forEach(t),Oko=r(iSe," (Pegasus model)"),iSe.forEach(t),Vko=i(Q),h2=n(Q,"LI",{});var dSe=s(h2);Uge=n(dSe,"STRONG",{});var fvt=s(Uge);Xko=r(fvt,"plbart"),fvt.forEach(t),zko=r(dSe," \u2014 "),TO=n(dSe,"A",{href:!0});var mvt=s(TO);Qko=r(mvt,"PLBartForCausalLM"),mvt.forEach(t),Wko=r(dSe," (PLBart model)"),dSe.forEach(t),Hko=i(Q),p2=n(Q,"LI",{});var cSe=s(p2);Jge=n(cSe,"STRONG",{});var gvt=s(Jge);Uko=r(gvt,"prophetnet"),gvt.forEach(t),Jko=r(cSe," \u2014 "),MO=n(cSe,"A",{href:!0});var hvt=s(MO);Yko=r(hvt,"ProphetNetForCausalLM"),hvt.forEach(t),Kko=r(cSe," (ProphetNet model)"),cSe.forEach(t),Zko=i(Q),_2=n(Q,"LI",{});var fSe=s(_2);Yge=n(fSe,"STRONG",{});var pvt=s(Yge);eSo=r(pvt,"qdqbert"),pvt.forEach(t),oSo=r(fSe," \u2014 "),EO=n(fSe,"A",{href:!0});var _vt=s(EO);rSo=r(_vt,"QDQBertLMHeadModel"),_vt.forEach(t),tSo=r(fSe," (QDQBert model)"),fSe.forEach(t),aSo=i(Q),u2=n(Q,"LI",{});var mSe=s(u2);Kge=n(mSe,"STRONG",{});var uvt=s(Kge);nSo=r(uvt,"reformer"),uvt.forEach(t),sSo=r(mSe," \u2014 "),CO=n(mSe,"A",{href:!0});var bvt=s(CO);lSo=r(bvt,"ReformerModelWithLMHead"),bvt.forEach(t),iSo=r(mSe," (Reformer model)"),mSe.forEach(t),dSo=i(Q),b2=n(Q,"LI",{});var gSe=s(b2);Zge=n(gSe,"STRONG",{});var vvt=s(Zge);cSo=r(vvt,"rembert"),vvt.forEach(t),fSo=r(gSe," \u2014 "),wO=n(gSe,"A",{href:!0});var Fvt=s(wO);mSo=r(Fvt,"RemBertForCausalLM"),Fvt.forEach(t),gSo=r(gSe," (RemBERT model)"),gSe.forEach(t),hSo=i(Q),v2=n(Q,"LI",{});var hSe=s(v2);ehe=n(hSe,"STRONG",{});var Tvt=s(ehe);pSo=r(Tvt,"roberta"),Tvt.forEach(t),_So=r(hSe," \u2014 "),AO=n(hSe,"A",{href:!0});var Mvt=s(AO);uSo=r(Mvt,"RobertaForCausalLM"),Mvt.forEach(t),bSo=r(hSe," (RoBERTa model)"),hSe.forEach(t),vSo=i(Q),F2=n(Q,"LI",{});var pSe=s(F2);ohe=n(pSe,"STRONG",{});var Evt=s(ohe);FSo=r(Evt,"roformer"),Evt.forEach(t),TSo=r(pSe," \u2014 "),LO=n(pSe,"A",{href:!0});var Cvt=s(LO);MSo=r(Cvt,"RoFormerForCausalLM"),Cvt.forEach(t),ESo=r(pSe," (RoFormer model)"),pSe.forEach(t),CSo=i(Q),T2=n(Q,"LI",{});var _Se=s(T2);rhe=n(_Se,"STRONG",{});var wvt=s(rhe);wSo=r(wvt,"speech_to_text_2"),wvt.forEach(t),ASo=r(_Se," \u2014 "),yO=n(_Se,"A",{href:!0});var Avt=s(yO);LSo=r(Avt,"Speech2Text2ForCausalLM"),Avt.forEach(t),ySo=r(_Se," (Speech2Text2 model)"),_Se.forEach(t),xSo=i(Q),M2=n(Q,"LI",{});var uSe=s(M2);the=n(uSe,"STRONG",{});var Lvt=s(the);$So=r(Lvt,"transfo-xl"),Lvt.forEach(t),kSo=r(uSe," \u2014 "),xO=n(uSe,"A",{href:!0});var yvt=s(xO);SSo=r(yvt,"TransfoXLLMHeadModel"),yvt.forEach(t),RSo=r(uSe," (Transformer-XL model)"),uSe.forEach(t),PSo=i(Q),E2=n(Q,"LI",{});var bSe=s(E2);ahe=n(bSe,"STRONG",{});var xvt=s(ahe);BSo=r(xvt,"trocr"),xvt.forEach(t),ISo=r(bSe," \u2014 "),$O=n(bSe,"A",{href:!0});var $vt=s($O);NSo=r($vt,"TrOCRForCausalLM"),$vt.forEach(t),qSo=r(bSe," (TrOCR model)"),bSe.forEach(t),jSo=i(Q),C2=n(Q,"LI",{});var vSe=s(C2);nhe=n(vSe,"STRONG",{});var kvt=s(nhe);DSo=r(kvt,"xglm"),kvt.forEach(t),GSo=r(vSe," \u2014 "),kO=n(vSe,"A",{href:!0});var Svt=s(kO);OSo=r(Svt,"XGLMForCausalLM"),Svt.forEach(t),VSo=r(vSe," (XGLM model)"),vSe.forEach(t),XSo=i(Q),w2=n(Q,"LI",{});var FSe=s(w2);she=n(FSe,"STRONG",{});var Rvt=s(she);zSo=r(Rvt,"xlm"),Rvt.forEach(t),QSo=r(FSe," \u2014 "),SO=n(FSe,"A",{href:!0});var Pvt=s(SO);WSo=r(Pvt,"XLMWithLMHeadModel"),Pvt.forEach(t),HSo=r(FSe," (XLM model)"),FSe.forEach(t),USo=i(Q),A2=n(Q,"LI",{});var TSe=s(A2);lhe=n(TSe,"STRONG",{});var Bvt=s(lhe);JSo=r(Bvt,"xlm-prophetnet"),Bvt.forEach(t),YSo=r(TSe," \u2014 "),RO=n(TSe,"A",{href:!0});var Ivt=s(RO);KSo=r(Ivt,"XLMProphetNetForCausalLM"),Ivt.forEach(t),ZSo=r(TSe," (XLM-ProphetNet model)"),TSe.forEach(t),eRo=i(Q),L2=n(Q,"LI",{});var MSe=s(L2);ihe=n(MSe,"STRONG",{});var Nvt=s(ihe);oRo=r(Nvt,"xlm-roberta"),Nvt.forEach(t),rRo=r(MSe," \u2014 "),PO=n(MSe,"A",{href:!0});var qvt=s(PO);tRo=r(qvt,"XLMRobertaForCausalLM"),qvt.forEach(t),aRo=r(MSe," (XLM-RoBERTa model)"),MSe.forEach(t),nRo=i(Q),y2=n(Q,"LI",{});var ESe=s(y2);dhe=n(ESe,"STRONG",{});var jvt=s(dhe);sRo=r(jvt,"xlm-roberta-xl"),jvt.forEach(t),lRo=r(ESe," \u2014 "),BO=n(ESe,"A",{href:!0});var Dvt=s(BO);iRo=r(Dvt,"XLMRobertaXLForCausalLM"),Dvt.forEach(t),dRo=r(ESe," (XLM-RoBERTa-XL model)"),ESe.forEach(t),cRo=i(Q),x2=n(Q,"LI",{});var CSe=s(x2);che=n(CSe,"STRONG",{});var Gvt=s(che);fRo=r(Gvt,"xlnet"),Gvt.forEach(t),mRo=r(CSe," \u2014 "),IO=n(CSe,"A",{href:!0});var Ovt=s(IO);gRo=r(Ovt,"XLNetLMHeadModel"),Ovt.forEach(t),hRo=r(CSe," (XLNet model)"),CSe.forEach(t),Q.forEach(t),pRo=i(da),$2=n(da,"P",{});var wSe=s($2);_Ro=r(wSe,"The model is set in evaluation mode by default using "),fhe=n(wSe,"CODE",{});var Vvt=s(fhe);uRo=r(Vvt,"model.eval()"),Vvt.forEach(t),bRo=r(wSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=n(wSe,"CODE",{});var Xvt=s(mhe);vRo=r(Xvt,"model.train()"),Xvt.forEach(t),wSe.forEach(t),FRo=i(da),T(k2.$$.fragment,da),da.forEach(t),al.forEach(t),_Xe=i(f),Ji=n(f,"H2",{class:!0});var MQe=s(Ji);S2=n(MQe,"A",{id:!0,class:!0,href:!0});var zvt=s(S2);ghe=n(zvt,"SPAN",{});var Qvt=s(ghe);T(z7.$$.fragment,Qvt),Qvt.forEach(t),zvt.forEach(t),TRo=i(MQe),hhe=n(MQe,"SPAN",{});var Wvt=s(hhe);MRo=r(Wvt,"AutoModelForMaskedLM"),Wvt.forEach(t),MQe.forEach(t),uXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(Q7.$$.fragment,nl),ERo=i(nl),Yi=n(nl,"P",{});var Nre=s(Yi);CRo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NO=n(Nre,"A",{href:!0});var Hvt=s(NO);wRo=r(Hvt,"from_pretrained()"),Hvt.forEach(t),ARo=r(Nre," class method or the "),qO=n(Nre,"A",{href:!0});var Uvt=s(qO);LRo=r(Uvt,"from_config()"),Uvt.forEach(t),yRo=r(Nre,` class
method.`),Nre.forEach(t),xRo=i(nl),W7=n(nl,"P",{});var EQe=s(W7);$Ro=r(EQe,"This class cannot be instantiated directly using "),phe=n(EQe,"CODE",{});var Jvt=s(phe);kRo=r(Jvt,"__init__()"),Jvt.forEach(t),SRo=r(EQe," (throws an error)."),EQe.forEach(t),RRo=i(nl),ft=n(nl,"DIV",{class:!0});var hw=s(ft);T(H7.$$.fragment,hw),PRo=i(hw),_he=n(hw,"P",{});var Yvt=s(_he);BRo=r(Yvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yvt.forEach(t),IRo=i(hw),Ki=n(hw,"P",{});var qre=s(Ki);NRo=r(qre,`Note:
Loading a model from its configuration file does `),uhe=n(qre,"STRONG",{});var Kvt=s(uhe);qRo=r(Kvt,"not"),Kvt.forEach(t),jRo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=n(qre,"A",{href:!0});var Zvt=s(jO);DRo=r(Zvt,"from_pretrained()"),Zvt.forEach(t),GRo=r(qre," to load the model weights."),qre.forEach(t),ORo=i(hw),T(R2.$$.fragment,hw),hw.forEach(t),VRo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(U7.$$.fragment,ca),XRo=i(ca),bhe=n(ca,"P",{});var eFt=s(bhe);zRo=r(eFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eFt.forEach(t),QRo=i(ca),ja=n(ca,"P",{});var pw=s(ja);WRo=r(pw,"The model class to instantiate is selected based on the "),vhe=n(pw,"CODE",{});var oFt=s(vhe);HRo=r(oFt,"model_type"),oFt.forEach(t),URo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(pw,"CODE",{});var rFt=s(Fhe);JRo=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),YRo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(pw,"CODE",{});var tFt=s(The);KRo=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),ZRo=r(pw,":"),pw.forEach(t),ePo=i(ca),W=n(ca,"UL",{});var H=s(W);P2=n(H,"LI",{});var ASe=s(P2);Mhe=n(ASe,"STRONG",{});var aFt=s(Mhe);oPo=r(aFt,"albert"),aFt.forEach(t),rPo=r(ASe," \u2014 "),DO=n(ASe,"A",{href:!0});var nFt=s(DO);tPo=r(nFt,"AlbertForMaskedLM"),nFt.forEach(t),aPo=r(ASe," (ALBERT model)"),ASe.forEach(t),nPo=i(H),B2=n(H,"LI",{});var LSe=s(B2);Ehe=n(LSe,"STRONG",{});var sFt=s(Ehe);sPo=r(sFt,"bart"),sFt.forEach(t),lPo=r(LSe," \u2014 "),GO=n(LSe,"A",{href:!0});var lFt=s(GO);iPo=r(lFt,"BartForConditionalGeneration"),lFt.forEach(t),dPo=r(LSe," (BART model)"),LSe.forEach(t),cPo=i(H),I2=n(H,"LI",{});var ySe=s(I2);Che=n(ySe,"STRONG",{});var iFt=s(Che);fPo=r(iFt,"bert"),iFt.forEach(t),mPo=r(ySe," \u2014 "),OO=n(ySe,"A",{href:!0});var dFt=s(OO);gPo=r(dFt,"BertForMaskedLM"),dFt.forEach(t),hPo=r(ySe," (BERT model)"),ySe.forEach(t),pPo=i(H),N2=n(H,"LI",{});var xSe=s(N2);whe=n(xSe,"STRONG",{});var cFt=s(whe);_Po=r(cFt,"big_bird"),cFt.forEach(t),uPo=r(xSe," \u2014 "),VO=n(xSe,"A",{href:!0});var fFt=s(VO);bPo=r(fFt,"BigBirdForMaskedLM"),fFt.forEach(t),vPo=r(xSe," (BigBird model)"),xSe.forEach(t),FPo=i(H),q2=n(H,"LI",{});var $Se=s(q2);Ahe=n($Se,"STRONG",{});var mFt=s(Ahe);TPo=r(mFt,"camembert"),mFt.forEach(t),MPo=r($Se," \u2014 "),XO=n($Se,"A",{href:!0});var gFt=s(XO);EPo=r(gFt,"CamembertForMaskedLM"),gFt.forEach(t),CPo=r($Se," (CamemBERT model)"),$Se.forEach(t),wPo=i(H),j2=n(H,"LI",{});var kSe=s(j2);Lhe=n(kSe,"STRONG",{});var hFt=s(Lhe);APo=r(hFt,"convbert"),hFt.forEach(t),LPo=r(kSe," \u2014 "),zO=n(kSe,"A",{href:!0});var pFt=s(zO);yPo=r(pFt,"ConvBertForMaskedLM"),pFt.forEach(t),xPo=r(kSe," (ConvBERT model)"),kSe.forEach(t),$Po=i(H),D2=n(H,"LI",{});var SSe=s(D2);yhe=n(SSe,"STRONG",{});var _Ft=s(yhe);kPo=r(_Ft,"data2vec-text"),_Ft.forEach(t),SPo=r(SSe," \u2014 "),QO=n(SSe,"A",{href:!0});var uFt=s(QO);RPo=r(uFt,"Data2VecTextForMaskedLM"),uFt.forEach(t),PPo=r(SSe," (Data2VecText model)"),SSe.forEach(t),BPo=i(H),G2=n(H,"LI",{});var RSe=s(G2);xhe=n(RSe,"STRONG",{});var bFt=s(xhe);IPo=r(bFt,"deberta"),bFt.forEach(t),NPo=r(RSe," \u2014 "),WO=n(RSe,"A",{href:!0});var vFt=s(WO);qPo=r(vFt,"DebertaForMaskedLM"),vFt.forEach(t),jPo=r(RSe," (DeBERTa model)"),RSe.forEach(t),DPo=i(H),O2=n(H,"LI",{});var PSe=s(O2);$he=n(PSe,"STRONG",{});var FFt=s($he);GPo=r(FFt,"deberta-v2"),FFt.forEach(t),OPo=r(PSe," \u2014 "),HO=n(PSe,"A",{href:!0});var TFt=s(HO);VPo=r(TFt,"DebertaV2ForMaskedLM"),TFt.forEach(t),XPo=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),zPo=i(H),V2=n(H,"LI",{});var BSe=s(V2);khe=n(BSe,"STRONG",{});var MFt=s(khe);QPo=r(MFt,"distilbert"),MFt.forEach(t),WPo=r(BSe," \u2014 "),UO=n(BSe,"A",{href:!0});var EFt=s(UO);HPo=r(EFt,"DistilBertForMaskedLM"),EFt.forEach(t),UPo=r(BSe," (DistilBERT model)"),BSe.forEach(t),JPo=i(H),X2=n(H,"LI",{});var ISe=s(X2);She=n(ISe,"STRONG",{});var CFt=s(She);YPo=r(CFt,"electra"),CFt.forEach(t),KPo=r(ISe," \u2014 "),JO=n(ISe,"A",{href:!0});var wFt=s(JO);ZPo=r(wFt,"ElectraForMaskedLM"),wFt.forEach(t),eBo=r(ISe," (ELECTRA model)"),ISe.forEach(t),oBo=i(H),z2=n(H,"LI",{});var NSe=s(z2);Rhe=n(NSe,"STRONG",{});var AFt=s(Rhe);rBo=r(AFt,"flaubert"),AFt.forEach(t),tBo=r(NSe," \u2014 "),YO=n(NSe,"A",{href:!0});var LFt=s(YO);aBo=r(LFt,"FlaubertWithLMHeadModel"),LFt.forEach(t),nBo=r(NSe," (FlauBERT model)"),NSe.forEach(t),sBo=i(H),Q2=n(H,"LI",{});var qSe=s(Q2);Phe=n(qSe,"STRONG",{});var yFt=s(Phe);lBo=r(yFt,"fnet"),yFt.forEach(t),iBo=r(qSe," \u2014 "),KO=n(qSe,"A",{href:!0});var xFt=s(KO);dBo=r(xFt,"FNetForMaskedLM"),xFt.forEach(t),cBo=r(qSe," (FNet model)"),qSe.forEach(t),fBo=i(H),W2=n(H,"LI",{});var jSe=s(W2);Bhe=n(jSe,"STRONG",{});var $Ft=s(Bhe);mBo=r($Ft,"funnel"),$Ft.forEach(t),gBo=r(jSe," \u2014 "),ZO=n(jSe,"A",{href:!0});var kFt=s(ZO);hBo=r(kFt,"FunnelForMaskedLM"),kFt.forEach(t),pBo=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),_Bo=i(H),H2=n(H,"LI",{});var DSe=s(H2);Ihe=n(DSe,"STRONG",{});var SFt=s(Ihe);uBo=r(SFt,"ibert"),SFt.forEach(t),bBo=r(DSe," \u2014 "),eV=n(DSe,"A",{href:!0});var RFt=s(eV);vBo=r(RFt,"IBertForMaskedLM"),RFt.forEach(t),FBo=r(DSe," (I-BERT model)"),DSe.forEach(t),TBo=i(H),U2=n(H,"LI",{});var GSe=s(U2);Nhe=n(GSe,"STRONG",{});var PFt=s(Nhe);MBo=r(PFt,"layoutlm"),PFt.forEach(t),EBo=r(GSe," \u2014 "),oV=n(GSe,"A",{href:!0});var BFt=s(oV);CBo=r(BFt,"LayoutLMForMaskedLM"),BFt.forEach(t),wBo=r(GSe," (LayoutLM model)"),GSe.forEach(t),ABo=i(H),J2=n(H,"LI",{});var OSe=s(J2);qhe=n(OSe,"STRONG",{});var IFt=s(qhe);LBo=r(IFt,"longformer"),IFt.forEach(t),yBo=r(OSe," \u2014 "),rV=n(OSe,"A",{href:!0});var NFt=s(rV);xBo=r(NFt,"LongformerForMaskedLM"),NFt.forEach(t),$Bo=r(OSe," (Longformer model)"),OSe.forEach(t),kBo=i(H),Y2=n(H,"LI",{});var VSe=s(Y2);jhe=n(VSe,"STRONG",{});var qFt=s(jhe);SBo=r(qFt,"luke"),qFt.forEach(t),RBo=r(VSe," \u2014 "),tV=n(VSe,"A",{href:!0});var jFt=s(tV);PBo=r(jFt,"LukeForMaskedLM"),jFt.forEach(t),BBo=r(VSe," (LUKE model)"),VSe.forEach(t),IBo=i(H),K2=n(H,"LI",{});var XSe=s(K2);Dhe=n(XSe,"STRONG",{});var DFt=s(Dhe);NBo=r(DFt,"mbart"),DFt.forEach(t),qBo=r(XSe," \u2014 "),aV=n(XSe,"A",{href:!0});var GFt=s(aV);jBo=r(GFt,"MBartForConditionalGeneration"),GFt.forEach(t),DBo=r(XSe," (mBART model)"),XSe.forEach(t),GBo=i(H),Z2=n(H,"LI",{});var zSe=s(Z2);Ghe=n(zSe,"STRONG",{});var OFt=s(Ghe);OBo=r(OFt,"megatron-bert"),OFt.forEach(t),VBo=r(zSe," \u2014 "),nV=n(zSe,"A",{href:!0});var VFt=s(nV);XBo=r(VFt,"MegatronBertForMaskedLM"),VFt.forEach(t),zBo=r(zSe," (Megatron-BERT model)"),zSe.forEach(t),QBo=i(H),eb=n(H,"LI",{});var QSe=s(eb);Ohe=n(QSe,"STRONG",{});var XFt=s(Ohe);WBo=r(XFt,"mobilebert"),XFt.forEach(t),HBo=r(QSe," \u2014 "),sV=n(QSe,"A",{href:!0});var zFt=s(sV);UBo=r(zFt,"MobileBertForMaskedLM"),zFt.forEach(t),JBo=r(QSe," (MobileBERT model)"),QSe.forEach(t),YBo=i(H),ob=n(H,"LI",{});var WSe=s(ob);Vhe=n(WSe,"STRONG",{});var QFt=s(Vhe);KBo=r(QFt,"mpnet"),QFt.forEach(t),ZBo=r(WSe," \u2014 "),lV=n(WSe,"A",{href:!0});var WFt=s(lV);eIo=r(WFt,"MPNetForMaskedLM"),WFt.forEach(t),oIo=r(WSe," (MPNet model)"),WSe.forEach(t),rIo=i(H),rb=n(H,"LI",{});var HSe=s(rb);Xhe=n(HSe,"STRONG",{});var HFt=s(Xhe);tIo=r(HFt,"mvp"),HFt.forEach(t),aIo=r(HSe," \u2014 "),iV=n(HSe,"A",{href:!0});var UFt=s(iV);nIo=r(UFt,"MvpForConditionalGeneration"),UFt.forEach(t),sIo=r(HSe," (MVP model)"),HSe.forEach(t),lIo=i(H),tb=n(H,"LI",{});var USe=s(tb);zhe=n(USe,"STRONG",{});var JFt=s(zhe);iIo=r(JFt,"nezha"),JFt.forEach(t),dIo=r(USe," \u2014 "),dV=n(USe,"A",{href:!0});var YFt=s(dV);cIo=r(YFt,"NezhaForMaskedLM"),YFt.forEach(t),fIo=r(USe," (Nezha model)"),USe.forEach(t),mIo=i(H),ab=n(H,"LI",{});var JSe=s(ab);Qhe=n(JSe,"STRONG",{});var KFt=s(Qhe);gIo=r(KFt,"nystromformer"),KFt.forEach(t),hIo=r(JSe," \u2014 "),cV=n(JSe,"A",{href:!0});var ZFt=s(cV);pIo=r(ZFt,"NystromformerForMaskedLM"),ZFt.forEach(t),_Io=r(JSe," (Nystr\xF6mformer model)"),JSe.forEach(t),uIo=i(H),nb=n(H,"LI",{});var YSe=s(nb);Whe=n(YSe,"STRONG",{});var e6t=s(Whe);bIo=r(e6t,"perceiver"),e6t.forEach(t),vIo=r(YSe," \u2014 "),fV=n(YSe,"A",{href:!0});var o6t=s(fV);FIo=r(o6t,"PerceiverForMaskedLM"),o6t.forEach(t),TIo=r(YSe," (Perceiver model)"),YSe.forEach(t),MIo=i(H),sb=n(H,"LI",{});var KSe=s(sb);Hhe=n(KSe,"STRONG",{});var r6t=s(Hhe);EIo=r(r6t,"qdqbert"),r6t.forEach(t),CIo=r(KSe," \u2014 "),mV=n(KSe,"A",{href:!0});var t6t=s(mV);wIo=r(t6t,"QDQBertForMaskedLM"),t6t.forEach(t),AIo=r(KSe," (QDQBert model)"),KSe.forEach(t),LIo=i(H),lb=n(H,"LI",{});var ZSe=s(lb);Uhe=n(ZSe,"STRONG",{});var a6t=s(Uhe);yIo=r(a6t,"reformer"),a6t.forEach(t),xIo=r(ZSe," \u2014 "),gV=n(ZSe,"A",{href:!0});var n6t=s(gV);$Io=r(n6t,"ReformerForMaskedLM"),n6t.forEach(t),kIo=r(ZSe," (Reformer model)"),ZSe.forEach(t),SIo=i(H),ib=n(H,"LI",{});var eRe=s(ib);Jhe=n(eRe,"STRONG",{});var s6t=s(Jhe);RIo=r(s6t,"rembert"),s6t.forEach(t),PIo=r(eRe," \u2014 "),hV=n(eRe,"A",{href:!0});var l6t=s(hV);BIo=r(l6t,"RemBertForMaskedLM"),l6t.forEach(t),IIo=r(eRe," (RemBERT model)"),eRe.forEach(t),NIo=i(H),db=n(H,"LI",{});var oRe=s(db);Yhe=n(oRe,"STRONG",{});var i6t=s(Yhe);qIo=r(i6t,"roberta"),i6t.forEach(t),jIo=r(oRe," \u2014 "),pV=n(oRe,"A",{href:!0});var d6t=s(pV);DIo=r(d6t,"RobertaForMaskedLM"),d6t.forEach(t),GIo=r(oRe," (RoBERTa model)"),oRe.forEach(t),OIo=i(H),cb=n(H,"LI",{});var rRe=s(cb);Khe=n(rRe,"STRONG",{});var c6t=s(Khe);VIo=r(c6t,"roformer"),c6t.forEach(t),XIo=r(rRe," \u2014 "),_V=n(rRe,"A",{href:!0});var f6t=s(_V);zIo=r(f6t,"RoFormerForMaskedLM"),f6t.forEach(t),QIo=r(rRe," (RoFormer model)"),rRe.forEach(t),WIo=i(H),fb=n(H,"LI",{});var tRe=s(fb);Zhe=n(tRe,"STRONG",{});var m6t=s(Zhe);HIo=r(m6t,"squeezebert"),m6t.forEach(t),UIo=r(tRe," \u2014 "),uV=n(tRe,"A",{href:!0});var g6t=s(uV);JIo=r(g6t,"SqueezeBertForMaskedLM"),g6t.forEach(t),YIo=r(tRe," (SqueezeBERT model)"),tRe.forEach(t),KIo=i(H),mb=n(H,"LI",{});var aRe=s(mb);epe=n(aRe,"STRONG",{});var h6t=s(epe);ZIo=r(h6t,"tapas"),h6t.forEach(t),eNo=r(aRe," \u2014 "),bV=n(aRe,"A",{href:!0});var p6t=s(bV);oNo=r(p6t,"TapasForMaskedLM"),p6t.forEach(t),rNo=r(aRe," (TAPAS model)"),aRe.forEach(t),tNo=i(H),gb=n(H,"LI",{});var nRe=s(gb);ope=n(nRe,"STRONG",{});var _6t=s(ope);aNo=r(_6t,"wav2vec2"),_6t.forEach(t),nNo=r(nRe," \u2014 "),rpe=n(nRe,"CODE",{});var u6t=s(rpe);sNo=r(u6t,"Wav2Vec2ForMaskedLM"),u6t.forEach(t),lNo=r(nRe," (Wav2Vec2 model)"),nRe.forEach(t),iNo=i(H),hb=n(H,"LI",{});var sRe=s(hb);tpe=n(sRe,"STRONG",{});var b6t=s(tpe);dNo=r(b6t,"xlm"),b6t.forEach(t),cNo=r(sRe," \u2014 "),vV=n(sRe,"A",{href:!0});var v6t=s(vV);fNo=r(v6t,"XLMWithLMHeadModel"),v6t.forEach(t),mNo=r(sRe," (XLM model)"),sRe.forEach(t),gNo=i(H),pb=n(H,"LI",{});var lRe=s(pb);ape=n(lRe,"STRONG",{});var F6t=s(ape);hNo=r(F6t,"xlm-roberta"),F6t.forEach(t),pNo=r(lRe," \u2014 "),FV=n(lRe,"A",{href:!0});var T6t=s(FV);_No=r(T6t,"XLMRobertaForMaskedLM"),T6t.forEach(t),uNo=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),bNo=i(H),_b=n(H,"LI",{});var iRe=s(_b);npe=n(iRe,"STRONG",{});var M6t=s(npe);vNo=r(M6t,"xlm-roberta-xl"),M6t.forEach(t),FNo=r(iRe," \u2014 "),TV=n(iRe,"A",{href:!0});var E6t=s(TV);TNo=r(E6t,"XLMRobertaXLForMaskedLM"),E6t.forEach(t),MNo=r(iRe," (XLM-RoBERTa-XL model)"),iRe.forEach(t),ENo=i(H),ub=n(H,"LI",{});var dRe=s(ub);spe=n(dRe,"STRONG",{});var C6t=s(spe);CNo=r(C6t,"yoso"),C6t.forEach(t),wNo=r(dRe," \u2014 "),MV=n(dRe,"A",{href:!0});var w6t=s(MV);ANo=r(w6t,"YosoForMaskedLM"),w6t.forEach(t),LNo=r(dRe," (YOSO model)"),dRe.forEach(t),H.forEach(t),yNo=i(ca),bb=n(ca,"P",{});var cRe=s(bb);xNo=r(cRe,"The model is set in evaluation mode by default using "),lpe=n(cRe,"CODE",{});var A6t=s(lpe);$No=r(A6t,"model.eval()"),A6t.forEach(t),kNo=r(cRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=n(cRe,"CODE",{});var L6t=s(ipe);SNo=r(L6t,"model.train()"),L6t.forEach(t),cRe.forEach(t),RNo=i(ca),T(vb.$$.fragment,ca),ca.forEach(t),nl.forEach(t),bXe=i(f),Zi=n(f,"H2",{class:!0});var CQe=s(Zi);Fb=n(CQe,"A",{id:!0,class:!0,href:!0});var y6t=s(Fb);dpe=n(y6t,"SPAN",{});var x6t=s(dpe);T(J7.$$.fragment,x6t),x6t.forEach(t),y6t.forEach(t),PNo=i(CQe),cpe=n(CQe,"SPAN",{});var $6t=s(cpe);BNo=r($6t,"AutoModelForSeq2SeqLM"),$6t.forEach(t),CQe.forEach(t),vXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(Y7.$$.fragment,sl),INo=i(sl),ed=n(sl,"P",{});var jre=s(ed);NNo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EV=n(jre,"A",{href:!0});var k6t=s(EV);qNo=r(k6t,"from_pretrained()"),k6t.forEach(t),jNo=r(jre," class method or the "),CV=n(jre,"A",{href:!0});var S6t=s(CV);DNo=r(S6t,"from_config()"),S6t.forEach(t),GNo=r(jre,` class
method.`),jre.forEach(t),ONo=i(sl),K7=n(sl,"P",{});var wQe=s(K7);VNo=r(wQe,"This class cannot be instantiated directly using "),fpe=n(wQe,"CODE",{});var R6t=s(fpe);XNo=r(R6t,"__init__()"),R6t.forEach(t),zNo=r(wQe," (throws an error)."),wQe.forEach(t),QNo=i(sl),mt=n(sl,"DIV",{class:!0});var _w=s(mt);T(Z7.$$.fragment,_w),WNo=i(_w),mpe=n(_w,"P",{});var P6t=s(mpe);HNo=r(P6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P6t.forEach(t),UNo=i(_w),od=n(_w,"P",{});var Dre=s(od);JNo=r(Dre,`Note:
Loading a model from its configuration file does `),gpe=n(Dre,"STRONG",{});var B6t=s(gpe);YNo=r(B6t,"not"),B6t.forEach(t),KNo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(Dre,"A",{href:!0});var I6t=s(wV);ZNo=r(I6t,"from_pretrained()"),I6t.forEach(t),eqo=r(Dre," to load the model weights."),Dre.forEach(t),oqo=i(_w),T(Tb.$$.fragment,_w),_w.forEach(t),rqo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(eL.$$.fragment,fa),tqo=i(fa),hpe=n(fa,"P",{});var N6t=s(hpe);aqo=r(N6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),N6t.forEach(t),nqo=i(fa),Da=n(fa,"P",{});var uw=s(Da);sqo=r(uw,"The model class to instantiate is selected based on the "),ppe=n(uw,"CODE",{});var q6t=s(ppe);lqo=r(q6t,"model_type"),q6t.forEach(t),iqo=r(uw,` property of the config object (either
passed as an argument or loaded from `),_pe=n(uw,"CODE",{});var j6t=s(_pe);dqo=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),cqo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(uw,"CODE",{});var D6t=s(upe);fqo=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),mqo=r(uw,":"),uw.forEach(t),gqo=i(fa),pe=n(fa,"UL",{});var be=s(pe);Mb=n(be,"LI",{});var fRe=s(Mb);bpe=n(fRe,"STRONG",{});var G6t=s(bpe);hqo=r(G6t,"bart"),G6t.forEach(t),pqo=r(fRe," \u2014 "),AV=n(fRe,"A",{href:!0});var O6t=s(AV);_qo=r(O6t,"BartForConditionalGeneration"),O6t.forEach(t),uqo=r(fRe," (BART model)"),fRe.forEach(t),bqo=i(be),Eb=n(be,"LI",{});var mRe=s(Eb);vpe=n(mRe,"STRONG",{});var V6t=s(vpe);vqo=r(V6t,"bigbird_pegasus"),V6t.forEach(t),Fqo=r(mRe," \u2014 "),LV=n(mRe,"A",{href:!0});var X6t=s(LV);Tqo=r(X6t,"BigBirdPegasusForConditionalGeneration"),X6t.forEach(t),Mqo=r(mRe," (BigBird-Pegasus model)"),mRe.forEach(t),Eqo=i(be),Cb=n(be,"LI",{});var gRe=s(Cb);Fpe=n(gRe,"STRONG",{});var z6t=s(Fpe);Cqo=r(z6t,"blenderbot"),z6t.forEach(t),wqo=r(gRe," \u2014 "),yV=n(gRe,"A",{href:!0});var Q6t=s(yV);Aqo=r(Q6t,"BlenderbotForConditionalGeneration"),Q6t.forEach(t),Lqo=r(gRe," (Blenderbot model)"),gRe.forEach(t),yqo=i(be),wb=n(be,"LI",{});var hRe=s(wb);Tpe=n(hRe,"STRONG",{});var W6t=s(Tpe);xqo=r(W6t,"blenderbot-small"),W6t.forEach(t),$qo=r(hRe," \u2014 "),xV=n(hRe,"A",{href:!0});var H6t=s(xV);kqo=r(H6t,"BlenderbotSmallForConditionalGeneration"),H6t.forEach(t),Sqo=r(hRe," (BlenderbotSmall model)"),hRe.forEach(t),Rqo=i(be),Ab=n(be,"LI",{});var pRe=s(Ab);Mpe=n(pRe,"STRONG",{});var U6t=s(Mpe);Pqo=r(U6t,"encoder-decoder"),U6t.forEach(t),Bqo=r(pRe," \u2014 "),$V=n(pRe,"A",{href:!0});var J6t=s($V);Iqo=r(J6t,"EncoderDecoderModel"),J6t.forEach(t),Nqo=r(pRe," (Encoder decoder model)"),pRe.forEach(t),qqo=i(be),Lb=n(be,"LI",{});var _Re=s(Lb);Epe=n(_Re,"STRONG",{});var Y6t=s(Epe);jqo=r(Y6t,"fsmt"),Y6t.forEach(t),Dqo=r(_Re," \u2014 "),kV=n(_Re,"A",{href:!0});var K6t=s(kV);Gqo=r(K6t,"FSMTForConditionalGeneration"),K6t.forEach(t),Oqo=r(_Re," (FairSeq Machine-Translation model)"),_Re.forEach(t),Vqo=i(be),yb=n(be,"LI",{});var uRe=s(yb);Cpe=n(uRe,"STRONG",{});var Z6t=s(Cpe);Xqo=r(Z6t,"led"),Z6t.forEach(t),zqo=r(uRe," \u2014 "),SV=n(uRe,"A",{href:!0});var eTt=s(SV);Qqo=r(eTt,"LEDForConditionalGeneration"),eTt.forEach(t),Wqo=r(uRe," (LED model)"),uRe.forEach(t),Hqo=i(be),xb=n(be,"LI",{});var bRe=s(xb);wpe=n(bRe,"STRONG",{});var oTt=s(wpe);Uqo=r(oTt,"longt5"),oTt.forEach(t),Jqo=r(bRe," \u2014 "),RV=n(bRe,"A",{href:!0});var rTt=s(RV);Yqo=r(rTt,"LongT5ForConditionalGeneration"),rTt.forEach(t),Kqo=r(bRe," (LongT5 model)"),bRe.forEach(t),Zqo=i(be),$b=n(be,"LI",{});var vRe=s($b);Ape=n(vRe,"STRONG",{});var tTt=s(Ape);ejo=r(tTt,"m2m_100"),tTt.forEach(t),ojo=r(vRe," \u2014 "),PV=n(vRe,"A",{href:!0});var aTt=s(PV);rjo=r(aTt,"M2M100ForConditionalGeneration"),aTt.forEach(t),tjo=r(vRe," (M2M100 model)"),vRe.forEach(t),ajo=i(be),kb=n(be,"LI",{});var FRe=s(kb);Lpe=n(FRe,"STRONG",{});var nTt=s(Lpe);njo=r(nTt,"marian"),nTt.forEach(t),sjo=r(FRe," \u2014 "),BV=n(FRe,"A",{href:!0});var sTt=s(BV);ljo=r(sTt,"MarianMTModel"),sTt.forEach(t),ijo=r(FRe," (Marian model)"),FRe.forEach(t),djo=i(be),Sb=n(be,"LI",{});var TRe=s(Sb);ype=n(TRe,"STRONG",{});var lTt=s(ype);cjo=r(lTt,"mbart"),lTt.forEach(t),fjo=r(TRe," \u2014 "),IV=n(TRe,"A",{href:!0});var iTt=s(IV);mjo=r(iTt,"MBartForConditionalGeneration"),iTt.forEach(t),gjo=r(TRe," (mBART model)"),TRe.forEach(t),hjo=i(be),Rb=n(be,"LI",{});var MRe=s(Rb);xpe=n(MRe,"STRONG",{});var dTt=s(xpe);pjo=r(dTt,"mt5"),dTt.forEach(t),_jo=r(MRe," \u2014 "),NV=n(MRe,"A",{href:!0});var cTt=s(NV);ujo=r(cTt,"MT5ForConditionalGeneration"),cTt.forEach(t),bjo=r(MRe," (MT5 model)"),MRe.forEach(t),vjo=i(be),Pb=n(be,"LI",{});var ERe=s(Pb);$pe=n(ERe,"STRONG",{});var fTt=s($pe);Fjo=r(fTt,"mvp"),fTt.forEach(t),Tjo=r(ERe," \u2014 "),qV=n(ERe,"A",{href:!0});var mTt=s(qV);Mjo=r(mTt,"MvpForConditionalGeneration"),mTt.forEach(t),Ejo=r(ERe," (MVP model)"),ERe.forEach(t),Cjo=i(be),Bb=n(be,"LI",{});var CRe=s(Bb);kpe=n(CRe,"STRONG",{});var gTt=s(kpe);wjo=r(gTt,"pegasus"),gTt.forEach(t),Ajo=r(CRe," \u2014 "),jV=n(CRe,"A",{href:!0});var hTt=s(jV);Ljo=r(hTt,"PegasusForConditionalGeneration"),hTt.forEach(t),yjo=r(CRe," (Pegasus model)"),CRe.forEach(t),xjo=i(be),Ib=n(be,"LI",{});var wRe=s(Ib);Spe=n(wRe,"STRONG",{});var pTt=s(Spe);$jo=r(pTt,"plbart"),pTt.forEach(t),kjo=r(wRe," \u2014 "),DV=n(wRe,"A",{href:!0});var _Tt=s(DV);Sjo=r(_Tt,"PLBartForConditionalGeneration"),_Tt.forEach(t),Rjo=r(wRe," (PLBart model)"),wRe.forEach(t),Pjo=i(be),Nb=n(be,"LI",{});var ARe=s(Nb);Rpe=n(ARe,"STRONG",{});var uTt=s(Rpe);Bjo=r(uTt,"prophetnet"),uTt.forEach(t),Ijo=r(ARe," \u2014 "),GV=n(ARe,"A",{href:!0});var bTt=s(GV);Njo=r(bTt,"ProphetNetForConditionalGeneration"),bTt.forEach(t),qjo=r(ARe," (ProphetNet model)"),ARe.forEach(t),jjo=i(be),qb=n(be,"LI",{});var LRe=s(qb);Ppe=n(LRe,"STRONG",{});var vTt=s(Ppe);Djo=r(vTt,"t5"),vTt.forEach(t),Gjo=r(LRe," \u2014 "),OV=n(LRe,"A",{href:!0});var FTt=s(OV);Ojo=r(FTt,"T5ForConditionalGeneration"),FTt.forEach(t),Vjo=r(LRe," (T5 model)"),LRe.forEach(t),Xjo=i(be),jb=n(be,"LI",{});var yRe=s(jb);Bpe=n(yRe,"STRONG",{});var TTt=s(Bpe);zjo=r(TTt,"xlm-prophetnet"),TTt.forEach(t),Qjo=r(yRe," \u2014 "),VV=n(yRe,"A",{href:!0});var MTt=s(VV);Wjo=r(MTt,"XLMProphetNetForConditionalGeneration"),MTt.forEach(t),Hjo=r(yRe," (XLM-ProphetNet model)"),yRe.forEach(t),be.forEach(t),Ujo=i(fa),Db=n(fa,"P",{});var xRe=s(Db);Jjo=r(xRe,"The model is set in evaluation mode by default using "),Ipe=n(xRe,"CODE",{});var ETt=s(Ipe);Yjo=r(ETt,"model.eval()"),ETt.forEach(t),Kjo=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(xRe,"CODE",{});var CTt=s(Npe);Zjo=r(CTt,"model.train()"),CTt.forEach(t),xRe.forEach(t),eDo=i(fa),T(Gb.$$.fragment,fa),fa.forEach(t),sl.forEach(t),FXe=i(f),rd=n(f,"H2",{class:!0});var AQe=s(rd);Ob=n(AQe,"A",{id:!0,class:!0,href:!0});var wTt=s(Ob);qpe=n(wTt,"SPAN",{});var ATt=s(qpe);T(oL.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),oDo=i(AQe),jpe=n(AQe,"SPAN",{});var LTt=s(jpe);rDo=r(LTt,"AutoModelForSequenceClassification"),LTt.forEach(t),AQe.forEach(t),TXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(rL.$$.fragment,ll),tDo=i(ll),td=n(ll,"P",{});var Gre=s(td);aDo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XV=n(Gre,"A",{href:!0});var yTt=s(XV);nDo=r(yTt,"from_pretrained()"),yTt.forEach(t),sDo=r(Gre," class method or the "),zV=n(Gre,"A",{href:!0});var xTt=s(zV);lDo=r(xTt,"from_config()"),xTt.forEach(t),iDo=r(Gre,` class
method.`),Gre.forEach(t),dDo=i(ll),tL=n(ll,"P",{});var LQe=s(tL);cDo=r(LQe,"This class cannot be instantiated directly using "),Dpe=n(LQe,"CODE",{});var $Tt=s(Dpe);fDo=r($Tt,"__init__()"),$Tt.forEach(t),mDo=r(LQe," (throws an error)."),LQe.forEach(t),gDo=i(ll),gt=n(ll,"DIV",{class:!0});var bw=s(gt);T(aL.$$.fragment,bw),hDo=i(bw),Gpe=n(bw,"P",{});var kTt=s(Gpe);pDo=r(kTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kTt.forEach(t),_Do=i(bw),ad=n(bw,"P",{});var Ore=s(ad);uDo=r(Ore,`Note:
Loading a model from its configuration file does `),Ope=n(Ore,"STRONG",{});var STt=s(Ope);bDo=r(STt,"not"),STt.forEach(t),vDo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(Ore,"A",{href:!0});var RTt=s(QV);FDo=r(RTt,"from_pretrained()"),RTt.forEach(t),TDo=r(Ore," to load the model weights."),Ore.forEach(t),MDo=i(bw),T(Vb.$$.fragment,bw),bw.forEach(t),EDo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(nL.$$.fragment,ma),CDo=i(ma),Vpe=n(ma,"P",{});var PTt=s(Vpe);wDo=r(PTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PTt.forEach(t),ADo=i(ma),Ga=n(ma,"P",{});var vw=s(Ga);LDo=r(vw,"The model class to instantiate is selected based on the "),Xpe=n(vw,"CODE",{});var BTt=s(Xpe);yDo=r(BTt,"model_type"),BTt.forEach(t),xDo=r(vw,` property of the config object (either
passed as an argument or loaded from `),zpe=n(vw,"CODE",{});var ITt=s(zpe);$Do=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),kDo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(vw,"CODE",{});var NTt=s(Qpe);SDo=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),RDo=r(vw,":"),vw.forEach(t),PDo=i(ma),N=n(ma,"UL",{});var j=s(N);Xb=n(j,"LI",{});var $Re=s(Xb);Wpe=n($Re,"STRONG",{});var qTt=s(Wpe);BDo=r(qTt,"albert"),qTt.forEach(t),IDo=r($Re," \u2014 "),WV=n($Re,"A",{href:!0});var jTt=s(WV);NDo=r(jTt,"AlbertForSequenceClassification"),jTt.forEach(t),qDo=r($Re," (ALBERT model)"),$Re.forEach(t),jDo=i(j),zb=n(j,"LI",{});var kRe=s(zb);Hpe=n(kRe,"STRONG",{});var DTt=s(Hpe);DDo=r(DTt,"bart"),DTt.forEach(t),GDo=r(kRe," \u2014 "),HV=n(kRe,"A",{href:!0});var GTt=s(HV);ODo=r(GTt,"BartForSequenceClassification"),GTt.forEach(t),VDo=r(kRe," (BART model)"),kRe.forEach(t),XDo=i(j),Qb=n(j,"LI",{});var SRe=s(Qb);Upe=n(SRe,"STRONG",{});var OTt=s(Upe);zDo=r(OTt,"bert"),OTt.forEach(t),QDo=r(SRe," \u2014 "),UV=n(SRe,"A",{href:!0});var VTt=s(UV);WDo=r(VTt,"BertForSequenceClassification"),VTt.forEach(t),HDo=r(SRe," (BERT model)"),SRe.forEach(t),UDo=i(j),Wb=n(j,"LI",{});var RRe=s(Wb);Jpe=n(RRe,"STRONG",{});var XTt=s(Jpe);JDo=r(XTt,"big_bird"),XTt.forEach(t),YDo=r(RRe," \u2014 "),JV=n(RRe,"A",{href:!0});var zTt=s(JV);KDo=r(zTt,"BigBirdForSequenceClassification"),zTt.forEach(t),ZDo=r(RRe," (BigBird model)"),RRe.forEach(t),eGo=i(j),Hb=n(j,"LI",{});var PRe=s(Hb);Ype=n(PRe,"STRONG",{});var QTt=s(Ype);oGo=r(QTt,"bigbird_pegasus"),QTt.forEach(t),rGo=r(PRe," \u2014 "),YV=n(PRe,"A",{href:!0});var WTt=s(YV);tGo=r(WTt,"BigBirdPegasusForSequenceClassification"),WTt.forEach(t),aGo=r(PRe," (BigBird-Pegasus model)"),PRe.forEach(t),nGo=i(j),Ub=n(j,"LI",{});var BRe=s(Ub);Kpe=n(BRe,"STRONG",{});var HTt=s(Kpe);sGo=r(HTt,"bloom"),HTt.forEach(t),lGo=r(BRe," \u2014 "),KV=n(BRe,"A",{href:!0});var UTt=s(KV);iGo=r(UTt,"BloomForSequenceClassification"),UTt.forEach(t),dGo=r(BRe," (BLOOM model)"),BRe.forEach(t),cGo=i(j),Jb=n(j,"LI",{});var IRe=s(Jb);Zpe=n(IRe,"STRONG",{});var JTt=s(Zpe);fGo=r(JTt,"camembert"),JTt.forEach(t),mGo=r(IRe," \u2014 "),ZV=n(IRe,"A",{href:!0});var YTt=s(ZV);gGo=r(YTt,"CamembertForSequenceClassification"),YTt.forEach(t),hGo=r(IRe," (CamemBERT model)"),IRe.forEach(t),pGo=i(j),Yb=n(j,"LI",{});var NRe=s(Yb);e_e=n(NRe,"STRONG",{});var KTt=s(e_e);_Go=r(KTt,"canine"),KTt.forEach(t),uGo=r(NRe," \u2014 "),eX=n(NRe,"A",{href:!0});var ZTt=s(eX);bGo=r(ZTt,"CanineForSequenceClassification"),ZTt.forEach(t),vGo=r(NRe," (CANINE model)"),NRe.forEach(t),FGo=i(j),Kb=n(j,"LI",{});var qRe=s(Kb);o_e=n(qRe,"STRONG",{});var e8t=s(o_e);TGo=r(e8t,"convbert"),e8t.forEach(t),MGo=r(qRe," \u2014 "),oX=n(qRe,"A",{href:!0});var o8t=s(oX);EGo=r(o8t,"ConvBertForSequenceClassification"),o8t.forEach(t),CGo=r(qRe," (ConvBERT model)"),qRe.forEach(t),wGo=i(j),Zb=n(j,"LI",{});var jRe=s(Zb);r_e=n(jRe,"STRONG",{});var r8t=s(r_e);AGo=r(r8t,"ctrl"),r8t.forEach(t),LGo=r(jRe," \u2014 "),rX=n(jRe,"A",{href:!0});var t8t=s(rX);yGo=r(t8t,"CTRLForSequenceClassification"),t8t.forEach(t),xGo=r(jRe," (CTRL model)"),jRe.forEach(t),$Go=i(j),ev=n(j,"LI",{});var DRe=s(ev);t_e=n(DRe,"STRONG",{});var a8t=s(t_e);kGo=r(a8t,"data2vec-text"),a8t.forEach(t),SGo=r(DRe," \u2014 "),tX=n(DRe,"A",{href:!0});var n8t=s(tX);RGo=r(n8t,"Data2VecTextForSequenceClassification"),n8t.forEach(t),PGo=r(DRe," (Data2VecText model)"),DRe.forEach(t),BGo=i(j),ov=n(j,"LI",{});var GRe=s(ov);a_e=n(GRe,"STRONG",{});var s8t=s(a_e);IGo=r(s8t,"deberta"),s8t.forEach(t),NGo=r(GRe," \u2014 "),aX=n(GRe,"A",{href:!0});var l8t=s(aX);qGo=r(l8t,"DebertaForSequenceClassification"),l8t.forEach(t),jGo=r(GRe," (DeBERTa model)"),GRe.forEach(t),DGo=i(j),rv=n(j,"LI",{});var ORe=s(rv);n_e=n(ORe,"STRONG",{});var i8t=s(n_e);GGo=r(i8t,"deberta-v2"),i8t.forEach(t),OGo=r(ORe," \u2014 "),nX=n(ORe,"A",{href:!0});var d8t=s(nX);VGo=r(d8t,"DebertaV2ForSequenceClassification"),d8t.forEach(t),XGo=r(ORe," (DeBERTa-v2 model)"),ORe.forEach(t),zGo=i(j),tv=n(j,"LI",{});var VRe=s(tv);s_e=n(VRe,"STRONG",{});var c8t=s(s_e);QGo=r(c8t,"distilbert"),c8t.forEach(t),WGo=r(VRe," \u2014 "),sX=n(VRe,"A",{href:!0});var f8t=s(sX);HGo=r(f8t,"DistilBertForSequenceClassification"),f8t.forEach(t),UGo=r(VRe," (DistilBERT model)"),VRe.forEach(t),JGo=i(j),av=n(j,"LI",{});var XRe=s(av);l_e=n(XRe,"STRONG",{});var m8t=s(l_e);YGo=r(m8t,"electra"),m8t.forEach(t),KGo=r(XRe," \u2014 "),lX=n(XRe,"A",{href:!0});var g8t=s(lX);ZGo=r(g8t,"ElectraForSequenceClassification"),g8t.forEach(t),eOo=r(XRe," (ELECTRA model)"),XRe.forEach(t),oOo=i(j),nv=n(j,"LI",{});var zRe=s(nv);i_e=n(zRe,"STRONG",{});var h8t=s(i_e);rOo=r(h8t,"flaubert"),h8t.forEach(t),tOo=r(zRe," \u2014 "),iX=n(zRe,"A",{href:!0});var p8t=s(iX);aOo=r(p8t,"FlaubertForSequenceClassification"),p8t.forEach(t),nOo=r(zRe," (FlauBERT model)"),zRe.forEach(t),sOo=i(j),sv=n(j,"LI",{});var QRe=s(sv);d_e=n(QRe,"STRONG",{});var _8t=s(d_e);lOo=r(_8t,"fnet"),_8t.forEach(t),iOo=r(QRe," \u2014 "),dX=n(QRe,"A",{href:!0});var u8t=s(dX);dOo=r(u8t,"FNetForSequenceClassification"),u8t.forEach(t),cOo=r(QRe," (FNet model)"),QRe.forEach(t),fOo=i(j),lv=n(j,"LI",{});var WRe=s(lv);c_e=n(WRe,"STRONG",{});var b8t=s(c_e);mOo=r(b8t,"funnel"),b8t.forEach(t),gOo=r(WRe," \u2014 "),cX=n(WRe,"A",{href:!0});var v8t=s(cX);hOo=r(v8t,"FunnelForSequenceClassification"),v8t.forEach(t),pOo=r(WRe," (Funnel Transformer model)"),WRe.forEach(t),_Oo=i(j),iv=n(j,"LI",{});var HRe=s(iv);f_e=n(HRe,"STRONG",{});var F8t=s(f_e);uOo=r(F8t,"gpt2"),F8t.forEach(t),bOo=r(HRe," \u2014 "),fX=n(HRe,"A",{href:!0});var T8t=s(fX);vOo=r(T8t,"GPT2ForSequenceClassification"),T8t.forEach(t),FOo=r(HRe," (OpenAI GPT-2 model)"),HRe.forEach(t),TOo=i(j),dv=n(j,"LI",{});var URe=s(dv);m_e=n(URe,"STRONG",{});var M8t=s(m_e);MOo=r(M8t,"gpt_neo"),M8t.forEach(t),EOo=r(URe," \u2014 "),mX=n(URe,"A",{href:!0});var E8t=s(mX);COo=r(E8t,"GPTNeoForSequenceClassification"),E8t.forEach(t),wOo=r(URe," (GPT Neo model)"),URe.forEach(t),AOo=i(j),cv=n(j,"LI",{});var JRe=s(cv);g_e=n(JRe,"STRONG",{});var C8t=s(g_e);LOo=r(C8t,"gptj"),C8t.forEach(t),yOo=r(JRe," \u2014 "),gX=n(JRe,"A",{href:!0});var w8t=s(gX);xOo=r(w8t,"GPTJForSequenceClassification"),w8t.forEach(t),$Oo=r(JRe," (GPT-J model)"),JRe.forEach(t),kOo=i(j),fv=n(j,"LI",{});var YRe=s(fv);h_e=n(YRe,"STRONG",{});var A8t=s(h_e);SOo=r(A8t,"ibert"),A8t.forEach(t),ROo=r(YRe," \u2014 "),hX=n(YRe,"A",{href:!0});var L8t=s(hX);POo=r(L8t,"IBertForSequenceClassification"),L8t.forEach(t),BOo=r(YRe," (I-BERT model)"),YRe.forEach(t),IOo=i(j),mv=n(j,"LI",{});var KRe=s(mv);p_e=n(KRe,"STRONG",{});var y8t=s(p_e);NOo=r(y8t,"layoutlm"),y8t.forEach(t),qOo=r(KRe," \u2014 "),pX=n(KRe,"A",{href:!0});var x8t=s(pX);jOo=r(x8t,"LayoutLMForSequenceClassification"),x8t.forEach(t),DOo=r(KRe," (LayoutLM model)"),KRe.forEach(t),GOo=i(j),gv=n(j,"LI",{});var ZRe=s(gv);__e=n(ZRe,"STRONG",{});var $8t=s(__e);OOo=r($8t,"layoutlmv2"),$8t.forEach(t),VOo=r(ZRe," \u2014 "),_X=n(ZRe,"A",{href:!0});var k8t=s(_X);XOo=r(k8t,"LayoutLMv2ForSequenceClassification"),k8t.forEach(t),zOo=r(ZRe," (LayoutLMv2 model)"),ZRe.forEach(t),QOo=i(j),hv=n(j,"LI",{});var ePe=s(hv);u_e=n(ePe,"STRONG",{});var S8t=s(u_e);WOo=r(S8t,"layoutlmv3"),S8t.forEach(t),HOo=r(ePe," \u2014 "),uX=n(ePe,"A",{href:!0});var R8t=s(uX);UOo=r(R8t,"LayoutLMv3ForSequenceClassification"),R8t.forEach(t),JOo=r(ePe," (LayoutLMv3 model)"),ePe.forEach(t),YOo=i(j),pv=n(j,"LI",{});var oPe=s(pv);b_e=n(oPe,"STRONG",{});var P8t=s(b_e);KOo=r(P8t,"led"),P8t.forEach(t),ZOo=r(oPe," \u2014 "),bX=n(oPe,"A",{href:!0});var B8t=s(bX);eVo=r(B8t,"LEDForSequenceClassification"),B8t.forEach(t),oVo=r(oPe," (LED model)"),oPe.forEach(t),rVo=i(j),_v=n(j,"LI",{});var rPe=s(_v);v_e=n(rPe,"STRONG",{});var I8t=s(v_e);tVo=r(I8t,"longformer"),I8t.forEach(t),aVo=r(rPe," \u2014 "),vX=n(rPe,"A",{href:!0});var N8t=s(vX);nVo=r(N8t,"LongformerForSequenceClassification"),N8t.forEach(t),sVo=r(rPe," (Longformer model)"),rPe.forEach(t),lVo=i(j),uv=n(j,"LI",{});var tPe=s(uv);F_e=n(tPe,"STRONG",{});var q8t=s(F_e);iVo=r(q8t,"mbart"),q8t.forEach(t),dVo=r(tPe," \u2014 "),FX=n(tPe,"A",{href:!0});var j8t=s(FX);cVo=r(j8t,"MBartForSequenceClassification"),j8t.forEach(t),fVo=r(tPe," (mBART model)"),tPe.forEach(t),mVo=i(j),bv=n(j,"LI",{});var aPe=s(bv);T_e=n(aPe,"STRONG",{});var D8t=s(T_e);gVo=r(D8t,"megatron-bert"),D8t.forEach(t),hVo=r(aPe," \u2014 "),TX=n(aPe,"A",{href:!0});var G8t=s(TX);pVo=r(G8t,"MegatronBertForSequenceClassification"),G8t.forEach(t),_Vo=r(aPe," (Megatron-BERT model)"),aPe.forEach(t),uVo=i(j),vv=n(j,"LI",{});var nPe=s(vv);M_e=n(nPe,"STRONG",{});var O8t=s(M_e);bVo=r(O8t,"mobilebert"),O8t.forEach(t),vVo=r(nPe," \u2014 "),MX=n(nPe,"A",{href:!0});var V8t=s(MX);FVo=r(V8t,"MobileBertForSequenceClassification"),V8t.forEach(t),TVo=r(nPe," (MobileBERT model)"),nPe.forEach(t),MVo=i(j),Fv=n(j,"LI",{});var sPe=s(Fv);E_e=n(sPe,"STRONG",{});var X8t=s(E_e);EVo=r(X8t,"mpnet"),X8t.forEach(t),CVo=r(sPe," \u2014 "),EX=n(sPe,"A",{href:!0});var z8t=s(EX);wVo=r(z8t,"MPNetForSequenceClassification"),z8t.forEach(t),AVo=r(sPe," (MPNet model)"),sPe.forEach(t),LVo=i(j),Tv=n(j,"LI",{});var lPe=s(Tv);C_e=n(lPe,"STRONG",{});var Q8t=s(C_e);yVo=r(Q8t,"mvp"),Q8t.forEach(t),xVo=r(lPe," \u2014 "),CX=n(lPe,"A",{href:!0});var W8t=s(CX);$Vo=r(W8t,"MvpForSequenceClassification"),W8t.forEach(t),kVo=r(lPe," (MVP model)"),lPe.forEach(t),SVo=i(j),Mv=n(j,"LI",{});var iPe=s(Mv);w_e=n(iPe,"STRONG",{});var H8t=s(w_e);RVo=r(H8t,"nezha"),H8t.forEach(t),PVo=r(iPe," \u2014 "),wX=n(iPe,"A",{href:!0});var U8t=s(wX);BVo=r(U8t,"NezhaForSequenceClassification"),U8t.forEach(t),IVo=r(iPe," (Nezha model)"),iPe.forEach(t),NVo=i(j),Ev=n(j,"LI",{});var dPe=s(Ev);A_e=n(dPe,"STRONG",{});var J8t=s(A_e);qVo=r(J8t,"nystromformer"),J8t.forEach(t),jVo=r(dPe," \u2014 "),AX=n(dPe,"A",{href:!0});var Y8t=s(AX);DVo=r(Y8t,"NystromformerForSequenceClassification"),Y8t.forEach(t),GVo=r(dPe," (Nystr\xF6mformer model)"),dPe.forEach(t),OVo=i(j),Cv=n(j,"LI",{});var cPe=s(Cv);L_e=n(cPe,"STRONG",{});var K8t=s(L_e);VVo=r(K8t,"openai-gpt"),K8t.forEach(t),XVo=r(cPe," \u2014 "),LX=n(cPe,"A",{href:!0});var Z8t=s(LX);zVo=r(Z8t,"OpenAIGPTForSequenceClassification"),Z8t.forEach(t),QVo=r(cPe," (OpenAI GPT model)"),cPe.forEach(t),WVo=i(j),wv=n(j,"LI",{});var fPe=s(wv);y_e=n(fPe,"STRONG",{});var e9t=s(y_e);HVo=r(e9t,"perceiver"),e9t.forEach(t),UVo=r(fPe," \u2014 "),yX=n(fPe,"A",{href:!0});var o9t=s(yX);JVo=r(o9t,"PerceiverForSequenceClassification"),o9t.forEach(t),YVo=r(fPe," (Perceiver model)"),fPe.forEach(t),KVo=i(j),Av=n(j,"LI",{});var mPe=s(Av);x_e=n(mPe,"STRONG",{});var r9t=s(x_e);ZVo=r(r9t,"plbart"),r9t.forEach(t),eXo=r(mPe," \u2014 "),xX=n(mPe,"A",{href:!0});var t9t=s(xX);oXo=r(t9t,"PLBartForSequenceClassification"),t9t.forEach(t),rXo=r(mPe," (PLBart model)"),mPe.forEach(t),tXo=i(j),Lv=n(j,"LI",{});var gPe=s(Lv);$_e=n(gPe,"STRONG",{});var a9t=s($_e);aXo=r(a9t,"qdqbert"),a9t.forEach(t),nXo=r(gPe," \u2014 "),$X=n(gPe,"A",{href:!0});var n9t=s($X);sXo=r(n9t,"QDQBertForSequenceClassification"),n9t.forEach(t),lXo=r(gPe," (QDQBert model)"),gPe.forEach(t),iXo=i(j),yv=n(j,"LI",{});var hPe=s(yv);k_e=n(hPe,"STRONG",{});var s9t=s(k_e);dXo=r(s9t,"reformer"),s9t.forEach(t),cXo=r(hPe," \u2014 "),kX=n(hPe,"A",{href:!0});var l9t=s(kX);fXo=r(l9t,"ReformerForSequenceClassification"),l9t.forEach(t),mXo=r(hPe," (Reformer model)"),hPe.forEach(t),gXo=i(j),xv=n(j,"LI",{});var pPe=s(xv);S_e=n(pPe,"STRONG",{});var i9t=s(S_e);hXo=r(i9t,"rembert"),i9t.forEach(t),pXo=r(pPe," \u2014 "),SX=n(pPe,"A",{href:!0});var d9t=s(SX);_Xo=r(d9t,"RemBertForSequenceClassification"),d9t.forEach(t),uXo=r(pPe," (RemBERT model)"),pPe.forEach(t),bXo=i(j),$v=n(j,"LI",{});var _Pe=s($v);R_e=n(_Pe,"STRONG",{});var c9t=s(R_e);vXo=r(c9t,"roberta"),c9t.forEach(t),FXo=r(_Pe," \u2014 "),RX=n(_Pe,"A",{href:!0});var f9t=s(RX);TXo=r(f9t,"RobertaForSequenceClassification"),f9t.forEach(t),MXo=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),EXo=i(j),kv=n(j,"LI",{});var uPe=s(kv);P_e=n(uPe,"STRONG",{});var m9t=s(P_e);CXo=r(m9t,"roformer"),m9t.forEach(t),wXo=r(uPe," \u2014 "),PX=n(uPe,"A",{href:!0});var g9t=s(PX);AXo=r(g9t,"RoFormerForSequenceClassification"),g9t.forEach(t),LXo=r(uPe," (RoFormer model)"),uPe.forEach(t),yXo=i(j),Sv=n(j,"LI",{});var bPe=s(Sv);B_e=n(bPe,"STRONG",{});var h9t=s(B_e);xXo=r(h9t,"squeezebert"),h9t.forEach(t),$Xo=r(bPe," \u2014 "),BX=n(bPe,"A",{href:!0});var p9t=s(BX);kXo=r(p9t,"SqueezeBertForSequenceClassification"),p9t.forEach(t),SXo=r(bPe," (SqueezeBERT model)"),bPe.forEach(t),RXo=i(j),Rv=n(j,"LI",{});var vPe=s(Rv);I_e=n(vPe,"STRONG",{});var _9t=s(I_e);PXo=r(_9t,"tapas"),_9t.forEach(t),BXo=r(vPe," \u2014 "),IX=n(vPe,"A",{href:!0});var u9t=s(IX);IXo=r(u9t,"TapasForSequenceClassification"),u9t.forEach(t),NXo=r(vPe," (TAPAS model)"),vPe.forEach(t),qXo=i(j),Pv=n(j,"LI",{});var FPe=s(Pv);N_e=n(FPe,"STRONG",{});var b9t=s(N_e);jXo=r(b9t,"transfo-xl"),b9t.forEach(t),DXo=r(FPe," \u2014 "),NX=n(FPe,"A",{href:!0});var v9t=s(NX);GXo=r(v9t,"TransfoXLForSequenceClassification"),v9t.forEach(t),OXo=r(FPe," (Transformer-XL model)"),FPe.forEach(t),VXo=i(j),Bv=n(j,"LI",{});var TPe=s(Bv);q_e=n(TPe,"STRONG",{});var F9t=s(q_e);XXo=r(F9t,"xlm"),F9t.forEach(t),zXo=r(TPe," \u2014 "),qX=n(TPe,"A",{href:!0});var T9t=s(qX);QXo=r(T9t,"XLMForSequenceClassification"),T9t.forEach(t),WXo=r(TPe," (XLM model)"),TPe.forEach(t),HXo=i(j),Iv=n(j,"LI",{});var MPe=s(Iv);j_e=n(MPe,"STRONG",{});var M9t=s(j_e);UXo=r(M9t,"xlm-roberta"),M9t.forEach(t),JXo=r(MPe," \u2014 "),jX=n(MPe,"A",{href:!0});var E9t=s(jX);YXo=r(E9t,"XLMRobertaForSequenceClassification"),E9t.forEach(t),KXo=r(MPe," (XLM-RoBERTa model)"),MPe.forEach(t),ZXo=i(j),Nv=n(j,"LI",{});var EPe=s(Nv);D_e=n(EPe,"STRONG",{});var C9t=s(D_e);ezo=r(C9t,"xlm-roberta-xl"),C9t.forEach(t),ozo=r(EPe," \u2014 "),DX=n(EPe,"A",{href:!0});var w9t=s(DX);rzo=r(w9t,"XLMRobertaXLForSequenceClassification"),w9t.forEach(t),tzo=r(EPe," (XLM-RoBERTa-XL model)"),EPe.forEach(t),azo=i(j),qv=n(j,"LI",{});var CPe=s(qv);G_e=n(CPe,"STRONG",{});var A9t=s(G_e);nzo=r(A9t,"xlnet"),A9t.forEach(t),szo=r(CPe," \u2014 "),GX=n(CPe,"A",{href:!0});var L9t=s(GX);lzo=r(L9t,"XLNetForSequenceClassification"),L9t.forEach(t),izo=r(CPe," (XLNet model)"),CPe.forEach(t),dzo=i(j),jv=n(j,"LI",{});var wPe=s(jv);O_e=n(wPe,"STRONG",{});var y9t=s(O_e);czo=r(y9t,"yoso"),y9t.forEach(t),fzo=r(wPe," \u2014 "),OX=n(wPe,"A",{href:!0});var x9t=s(OX);mzo=r(x9t,"YosoForSequenceClassification"),x9t.forEach(t),gzo=r(wPe," (YOSO model)"),wPe.forEach(t),j.forEach(t),hzo=i(ma),Dv=n(ma,"P",{});var APe=s(Dv);pzo=r(APe,"The model is set in evaluation mode by default using "),V_e=n(APe,"CODE",{});var $9t=s(V_e);_zo=r($9t,"model.eval()"),$9t.forEach(t),uzo=r(APe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(APe,"CODE",{});var k9t=s(X_e);bzo=r(k9t,"model.train()"),k9t.forEach(t),APe.forEach(t),vzo=i(ma),T(Gv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),MXe=i(f),nd=n(f,"H2",{class:!0});var yQe=s(nd);Ov=n(yQe,"A",{id:!0,class:!0,href:!0});var S9t=s(Ov);z_e=n(S9t,"SPAN",{});var R9t=s(z_e);T(sL.$$.fragment,R9t),R9t.forEach(t),S9t.forEach(t),Fzo=i(yQe),Q_e=n(yQe,"SPAN",{});var P9t=s(Q_e);Tzo=r(P9t,"AutoModelForMultipleChoice"),P9t.forEach(t),yQe.forEach(t),EXe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(lL.$$.fragment,il),Mzo=i(il),sd=n(il,"P",{});var Vre=s(sd);Ezo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VX=n(Vre,"A",{href:!0});var B9t=s(VX);Czo=r(B9t,"from_pretrained()"),B9t.forEach(t),wzo=r(Vre," class method or the "),XX=n(Vre,"A",{href:!0});var I9t=s(XX);Azo=r(I9t,"from_config()"),I9t.forEach(t),Lzo=r(Vre,` class
method.`),Vre.forEach(t),yzo=i(il),iL=n(il,"P",{});var xQe=s(iL);xzo=r(xQe,"This class cannot be instantiated directly using "),W_e=n(xQe,"CODE",{});var N9t=s(W_e);$zo=r(N9t,"__init__()"),N9t.forEach(t),kzo=r(xQe," (throws an error)."),xQe.forEach(t),Szo=i(il),ht=n(il,"DIV",{class:!0});var Fw=s(ht);T(dL.$$.fragment,Fw),Rzo=i(Fw),H_e=n(Fw,"P",{});var q9t=s(H_e);Pzo=r(q9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q9t.forEach(t),Bzo=i(Fw),ld=n(Fw,"P",{});var Xre=s(ld);Izo=r(Xre,`Note:
Loading a model from its configuration file does `),U_e=n(Xre,"STRONG",{});var j9t=s(U_e);Nzo=r(j9t,"not"),j9t.forEach(t),qzo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(Xre,"A",{href:!0});var D9t=s(zX);jzo=r(D9t,"from_pretrained()"),D9t.forEach(t),Dzo=r(Xre," to load the model weights."),Xre.forEach(t),Gzo=i(Fw),T(Vv.$$.fragment,Fw),Fw.forEach(t),Ozo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(cL.$$.fragment,ga),Vzo=i(ga),J_e=n(ga,"P",{});var G9t=s(J_e);Xzo=r(G9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G9t.forEach(t),zzo=i(ga),Oa=n(ga,"P",{});var Tw=s(Oa);Qzo=r(Tw,"The model class to instantiate is selected based on the "),Y_e=n(Tw,"CODE",{});var O9t=s(Y_e);Wzo=r(O9t,"model_type"),O9t.forEach(t),Hzo=r(Tw,` property of the config object (either
passed as an argument or loaded from `),K_e=n(Tw,"CODE",{});var V9t=s(K_e);Uzo=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),Jzo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(Tw,"CODE",{});var X9t=s(Z_e);Yzo=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),Kzo=r(Tw,":"),Tw.forEach(t),Zzo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Xv=n(ee,"LI",{});var LPe=s(Xv);eue=n(LPe,"STRONG",{});var z9t=s(eue);eQo=r(z9t,"albert"),z9t.forEach(t),oQo=r(LPe," \u2014 "),QX=n(LPe,"A",{href:!0});var Q9t=s(QX);rQo=r(Q9t,"AlbertForMultipleChoice"),Q9t.forEach(t),tQo=r(LPe," (ALBERT model)"),LPe.forEach(t),aQo=i(ee),zv=n(ee,"LI",{});var yPe=s(zv);oue=n(yPe,"STRONG",{});var W9t=s(oue);nQo=r(W9t,"bert"),W9t.forEach(t),sQo=r(yPe," \u2014 "),WX=n(yPe,"A",{href:!0});var H9t=s(WX);lQo=r(H9t,"BertForMultipleChoice"),H9t.forEach(t),iQo=r(yPe," (BERT model)"),yPe.forEach(t),dQo=i(ee),Qv=n(ee,"LI",{});var xPe=s(Qv);rue=n(xPe,"STRONG",{});var U9t=s(rue);cQo=r(U9t,"big_bird"),U9t.forEach(t),fQo=r(xPe," \u2014 "),HX=n(xPe,"A",{href:!0});var J9t=s(HX);mQo=r(J9t,"BigBirdForMultipleChoice"),J9t.forEach(t),gQo=r(xPe," (BigBird model)"),xPe.forEach(t),hQo=i(ee),Wv=n(ee,"LI",{});var $Pe=s(Wv);tue=n($Pe,"STRONG",{});var Y9t=s(tue);pQo=r(Y9t,"camembert"),Y9t.forEach(t),_Qo=r($Pe," \u2014 "),UX=n($Pe,"A",{href:!0});var K9t=s(UX);uQo=r(K9t,"CamembertForMultipleChoice"),K9t.forEach(t),bQo=r($Pe," (CamemBERT model)"),$Pe.forEach(t),vQo=i(ee),Hv=n(ee,"LI",{});var kPe=s(Hv);aue=n(kPe,"STRONG",{});var Z9t=s(aue);FQo=r(Z9t,"canine"),Z9t.forEach(t),TQo=r(kPe," \u2014 "),JX=n(kPe,"A",{href:!0});var eMt=s(JX);MQo=r(eMt,"CanineForMultipleChoice"),eMt.forEach(t),EQo=r(kPe," (CANINE model)"),kPe.forEach(t),CQo=i(ee),Uv=n(ee,"LI",{});var SPe=s(Uv);nue=n(SPe,"STRONG",{});var oMt=s(nue);wQo=r(oMt,"convbert"),oMt.forEach(t),AQo=r(SPe," \u2014 "),YX=n(SPe,"A",{href:!0});var rMt=s(YX);LQo=r(rMt,"ConvBertForMultipleChoice"),rMt.forEach(t),yQo=r(SPe," (ConvBERT model)"),SPe.forEach(t),xQo=i(ee),Jv=n(ee,"LI",{});var RPe=s(Jv);sue=n(RPe,"STRONG",{});var tMt=s(sue);$Qo=r(tMt,"data2vec-text"),tMt.forEach(t),kQo=r(RPe," \u2014 "),KX=n(RPe,"A",{href:!0});var aMt=s(KX);SQo=r(aMt,"Data2VecTextForMultipleChoice"),aMt.forEach(t),RQo=r(RPe," (Data2VecText model)"),RPe.forEach(t),PQo=i(ee),Yv=n(ee,"LI",{});var PPe=s(Yv);lue=n(PPe,"STRONG",{});var nMt=s(lue);BQo=r(nMt,"deberta-v2"),nMt.forEach(t),IQo=r(PPe," \u2014 "),ZX=n(PPe,"A",{href:!0});var sMt=s(ZX);NQo=r(sMt,"DebertaV2ForMultipleChoice"),sMt.forEach(t),qQo=r(PPe," (DeBERTa-v2 model)"),PPe.forEach(t),jQo=i(ee),Kv=n(ee,"LI",{});var BPe=s(Kv);iue=n(BPe,"STRONG",{});var lMt=s(iue);DQo=r(lMt,"distilbert"),lMt.forEach(t),GQo=r(BPe," \u2014 "),ez=n(BPe,"A",{href:!0});var iMt=s(ez);OQo=r(iMt,"DistilBertForMultipleChoice"),iMt.forEach(t),VQo=r(BPe," (DistilBERT model)"),BPe.forEach(t),XQo=i(ee),Zv=n(ee,"LI",{});var IPe=s(Zv);due=n(IPe,"STRONG",{});var dMt=s(due);zQo=r(dMt,"electra"),dMt.forEach(t),QQo=r(IPe," \u2014 "),oz=n(IPe,"A",{href:!0});var cMt=s(oz);WQo=r(cMt,"ElectraForMultipleChoice"),cMt.forEach(t),HQo=r(IPe," (ELECTRA model)"),IPe.forEach(t),UQo=i(ee),eF=n(ee,"LI",{});var NPe=s(eF);cue=n(NPe,"STRONG",{});var fMt=s(cue);JQo=r(fMt,"flaubert"),fMt.forEach(t),YQo=r(NPe," \u2014 "),rz=n(NPe,"A",{href:!0});var mMt=s(rz);KQo=r(mMt,"FlaubertForMultipleChoice"),mMt.forEach(t),ZQo=r(NPe," (FlauBERT model)"),NPe.forEach(t),eWo=i(ee),oF=n(ee,"LI",{});var qPe=s(oF);fue=n(qPe,"STRONG",{});var gMt=s(fue);oWo=r(gMt,"fnet"),gMt.forEach(t),rWo=r(qPe," \u2014 "),tz=n(qPe,"A",{href:!0});var hMt=s(tz);tWo=r(hMt,"FNetForMultipleChoice"),hMt.forEach(t),aWo=r(qPe," (FNet model)"),qPe.forEach(t),nWo=i(ee),rF=n(ee,"LI",{});var jPe=s(rF);mue=n(jPe,"STRONG",{});var pMt=s(mue);sWo=r(pMt,"funnel"),pMt.forEach(t),lWo=r(jPe," \u2014 "),az=n(jPe,"A",{href:!0});var _Mt=s(az);iWo=r(_Mt,"FunnelForMultipleChoice"),_Mt.forEach(t),dWo=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),cWo=i(ee),tF=n(ee,"LI",{});var DPe=s(tF);gue=n(DPe,"STRONG",{});var uMt=s(gue);fWo=r(uMt,"ibert"),uMt.forEach(t),mWo=r(DPe," \u2014 "),nz=n(DPe,"A",{href:!0});var bMt=s(nz);gWo=r(bMt,"IBertForMultipleChoice"),bMt.forEach(t),hWo=r(DPe," (I-BERT model)"),DPe.forEach(t),pWo=i(ee),aF=n(ee,"LI",{});var GPe=s(aF);hue=n(GPe,"STRONG",{});var vMt=s(hue);_Wo=r(vMt,"longformer"),vMt.forEach(t),uWo=r(GPe," \u2014 "),sz=n(GPe,"A",{href:!0});var FMt=s(sz);bWo=r(FMt,"LongformerForMultipleChoice"),FMt.forEach(t),vWo=r(GPe," (Longformer model)"),GPe.forEach(t),FWo=i(ee),nF=n(ee,"LI",{});var OPe=s(nF);pue=n(OPe,"STRONG",{});var TMt=s(pue);TWo=r(TMt,"megatron-bert"),TMt.forEach(t),MWo=r(OPe," \u2014 "),lz=n(OPe,"A",{href:!0});var MMt=s(lz);EWo=r(MMt,"MegatronBertForMultipleChoice"),MMt.forEach(t),CWo=r(OPe," (Megatron-BERT model)"),OPe.forEach(t),wWo=i(ee),sF=n(ee,"LI",{});var VPe=s(sF);_ue=n(VPe,"STRONG",{});var EMt=s(_ue);AWo=r(EMt,"mobilebert"),EMt.forEach(t),LWo=r(VPe," \u2014 "),iz=n(VPe,"A",{href:!0});var CMt=s(iz);yWo=r(CMt,"MobileBertForMultipleChoice"),CMt.forEach(t),xWo=r(VPe," (MobileBERT model)"),VPe.forEach(t),$Wo=i(ee),lF=n(ee,"LI",{});var XPe=s(lF);uue=n(XPe,"STRONG",{});var wMt=s(uue);kWo=r(wMt,"mpnet"),wMt.forEach(t),SWo=r(XPe," \u2014 "),dz=n(XPe,"A",{href:!0});var AMt=s(dz);RWo=r(AMt,"MPNetForMultipleChoice"),AMt.forEach(t),PWo=r(XPe," (MPNet model)"),XPe.forEach(t),BWo=i(ee),iF=n(ee,"LI",{});var zPe=s(iF);bue=n(zPe,"STRONG",{});var LMt=s(bue);IWo=r(LMt,"nezha"),LMt.forEach(t),NWo=r(zPe," \u2014 "),cz=n(zPe,"A",{href:!0});var yMt=s(cz);qWo=r(yMt,"NezhaForMultipleChoice"),yMt.forEach(t),jWo=r(zPe," (Nezha model)"),zPe.forEach(t),DWo=i(ee),dF=n(ee,"LI",{});var QPe=s(dF);vue=n(QPe,"STRONG",{});var xMt=s(vue);GWo=r(xMt,"nystromformer"),xMt.forEach(t),OWo=r(QPe," \u2014 "),fz=n(QPe,"A",{href:!0});var $Mt=s(fz);VWo=r($Mt,"NystromformerForMultipleChoice"),$Mt.forEach(t),XWo=r(QPe," (Nystr\xF6mformer model)"),QPe.forEach(t),zWo=i(ee),cF=n(ee,"LI",{});var WPe=s(cF);Fue=n(WPe,"STRONG",{});var kMt=s(Fue);QWo=r(kMt,"qdqbert"),kMt.forEach(t),WWo=r(WPe," \u2014 "),mz=n(WPe,"A",{href:!0});var SMt=s(mz);HWo=r(SMt,"QDQBertForMultipleChoice"),SMt.forEach(t),UWo=r(WPe," (QDQBert model)"),WPe.forEach(t),JWo=i(ee),fF=n(ee,"LI",{});var HPe=s(fF);Tue=n(HPe,"STRONG",{});var RMt=s(Tue);YWo=r(RMt,"rembert"),RMt.forEach(t),KWo=r(HPe," \u2014 "),gz=n(HPe,"A",{href:!0});var PMt=s(gz);ZWo=r(PMt,"RemBertForMultipleChoice"),PMt.forEach(t),eHo=r(HPe," (RemBERT model)"),HPe.forEach(t),oHo=i(ee),mF=n(ee,"LI",{});var UPe=s(mF);Mue=n(UPe,"STRONG",{});var BMt=s(Mue);rHo=r(BMt,"roberta"),BMt.forEach(t),tHo=r(UPe," \u2014 "),hz=n(UPe,"A",{href:!0});var IMt=s(hz);aHo=r(IMt,"RobertaForMultipleChoice"),IMt.forEach(t),nHo=r(UPe," (RoBERTa model)"),UPe.forEach(t),sHo=i(ee),gF=n(ee,"LI",{});var JPe=s(gF);Eue=n(JPe,"STRONG",{});var NMt=s(Eue);lHo=r(NMt,"roformer"),NMt.forEach(t),iHo=r(JPe," \u2014 "),pz=n(JPe,"A",{href:!0});var qMt=s(pz);dHo=r(qMt,"RoFormerForMultipleChoice"),qMt.forEach(t),cHo=r(JPe," (RoFormer model)"),JPe.forEach(t),fHo=i(ee),hF=n(ee,"LI",{});var YPe=s(hF);Cue=n(YPe,"STRONG",{});var jMt=s(Cue);mHo=r(jMt,"squeezebert"),jMt.forEach(t),gHo=r(YPe," \u2014 "),_z=n(YPe,"A",{href:!0});var DMt=s(_z);hHo=r(DMt,"SqueezeBertForMultipleChoice"),DMt.forEach(t),pHo=r(YPe," (SqueezeBERT model)"),YPe.forEach(t),_Ho=i(ee),pF=n(ee,"LI",{});var KPe=s(pF);wue=n(KPe,"STRONG",{});var GMt=s(wue);uHo=r(GMt,"xlm"),GMt.forEach(t),bHo=r(KPe," \u2014 "),uz=n(KPe,"A",{href:!0});var OMt=s(uz);vHo=r(OMt,"XLMForMultipleChoice"),OMt.forEach(t),FHo=r(KPe," (XLM model)"),KPe.forEach(t),THo=i(ee),_F=n(ee,"LI",{});var ZPe=s(_F);Aue=n(ZPe,"STRONG",{});var VMt=s(Aue);MHo=r(VMt,"xlm-roberta"),VMt.forEach(t),EHo=r(ZPe," \u2014 "),bz=n(ZPe,"A",{href:!0});var XMt=s(bz);CHo=r(XMt,"XLMRobertaForMultipleChoice"),XMt.forEach(t),wHo=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),AHo=i(ee),uF=n(ee,"LI",{});var eBe=s(uF);Lue=n(eBe,"STRONG",{});var zMt=s(Lue);LHo=r(zMt,"xlm-roberta-xl"),zMt.forEach(t),yHo=r(eBe," \u2014 "),vz=n(eBe,"A",{href:!0});var QMt=s(vz);xHo=r(QMt,"XLMRobertaXLForMultipleChoice"),QMt.forEach(t),$Ho=r(eBe," (XLM-RoBERTa-XL model)"),eBe.forEach(t),kHo=i(ee),bF=n(ee,"LI",{});var oBe=s(bF);yue=n(oBe,"STRONG",{});var WMt=s(yue);SHo=r(WMt,"xlnet"),WMt.forEach(t),RHo=r(oBe," \u2014 "),Fz=n(oBe,"A",{href:!0});var HMt=s(Fz);PHo=r(HMt,"XLNetForMultipleChoice"),HMt.forEach(t),BHo=r(oBe," (XLNet model)"),oBe.forEach(t),IHo=i(ee),vF=n(ee,"LI",{});var rBe=s(vF);xue=n(rBe,"STRONG",{});var UMt=s(xue);NHo=r(UMt,"yoso"),UMt.forEach(t),qHo=r(rBe," \u2014 "),Tz=n(rBe,"A",{href:!0});var JMt=s(Tz);jHo=r(JMt,"YosoForMultipleChoice"),JMt.forEach(t),DHo=r(rBe," (YOSO model)"),rBe.forEach(t),ee.forEach(t),GHo=i(ga),FF=n(ga,"P",{});var tBe=s(FF);OHo=r(tBe,"The model is set in evaluation mode by default using "),$ue=n(tBe,"CODE",{});var YMt=s($ue);VHo=r(YMt,"model.eval()"),YMt.forEach(t),XHo=r(tBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=n(tBe,"CODE",{});var KMt=s(kue);zHo=r(KMt,"model.train()"),KMt.forEach(t),tBe.forEach(t),QHo=i(ga),T(TF.$$.fragment,ga),ga.forEach(t),il.forEach(t),CXe=i(f),id=n(f,"H2",{class:!0});var $Qe=s(id);MF=n($Qe,"A",{id:!0,class:!0,href:!0});var ZMt=s(MF);Sue=n(ZMt,"SPAN",{});var e4t=s(Sue);T(fL.$$.fragment,e4t),e4t.forEach(t),ZMt.forEach(t),WHo=i($Qe),Rue=n($Qe,"SPAN",{});var o4t=s(Rue);HHo=r(o4t,"AutoModelForNextSentencePrediction"),o4t.forEach(t),$Qe.forEach(t),wXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(mL.$$.fragment,dl),UHo=i(dl),dd=n(dl,"P",{});var zre=s(dd);JHo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mz=n(zre,"A",{href:!0});var r4t=s(Mz);YHo=r(r4t,"from_pretrained()"),r4t.forEach(t),KHo=r(zre," class method or the "),Ez=n(zre,"A",{href:!0});var t4t=s(Ez);ZHo=r(t4t,"from_config()"),t4t.forEach(t),eUo=r(zre,` class
method.`),zre.forEach(t),oUo=i(dl),gL=n(dl,"P",{});var kQe=s(gL);rUo=r(kQe,"This class cannot be instantiated directly using "),Pue=n(kQe,"CODE",{});var a4t=s(Pue);tUo=r(a4t,"__init__()"),a4t.forEach(t),aUo=r(kQe," (throws an error)."),kQe.forEach(t),nUo=i(dl),pt=n(dl,"DIV",{class:!0});var Mw=s(pt);T(hL.$$.fragment,Mw),sUo=i(Mw),Bue=n(Mw,"P",{});var n4t=s(Bue);lUo=r(n4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n4t.forEach(t),iUo=i(Mw),cd=n(Mw,"P",{});var Qre=s(cd);dUo=r(Qre,`Note:
Loading a model from its configuration file does `),Iue=n(Qre,"STRONG",{});var s4t=s(Iue);cUo=r(s4t,"not"),s4t.forEach(t),fUo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(Qre,"A",{href:!0});var l4t=s(Cz);mUo=r(l4t,"from_pretrained()"),l4t.forEach(t),gUo=r(Qre," to load the model weights."),Qre.forEach(t),hUo=i(Mw),T(EF.$$.fragment,Mw),Mw.forEach(t),pUo=i(dl),ao=n(dl,"DIV",{class:!0});var ha=s(ao);T(pL.$$.fragment,ha),_Uo=i(ha),Nue=n(ha,"P",{});var i4t=s(Nue);uUo=r(i4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),i4t.forEach(t),bUo=i(ha),Va=n(ha,"P",{});var Ew=s(Va);vUo=r(Ew,"The model class to instantiate is selected based on the "),que=n(Ew,"CODE",{});var d4t=s(que);FUo=r(d4t,"model_type"),d4t.forEach(t),TUo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),jue=n(Ew,"CODE",{});var c4t=s(jue);MUo=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),EUo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(Ew,"CODE",{});var f4t=s(Due);CUo=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),wUo=r(Ew,":"),Ew.forEach(t),AUo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);CF=n(pa,"LI",{});var aBe=s(CF);Gue=n(aBe,"STRONG",{});var m4t=s(Gue);LUo=r(m4t,"bert"),m4t.forEach(t),yUo=r(aBe," \u2014 "),wz=n(aBe,"A",{href:!0});var g4t=s(wz);xUo=r(g4t,"BertForNextSentencePrediction"),g4t.forEach(t),$Uo=r(aBe," (BERT model)"),aBe.forEach(t),kUo=i(pa),wF=n(pa,"LI",{});var nBe=s(wF);Oue=n(nBe,"STRONG",{});var h4t=s(Oue);SUo=r(h4t,"fnet"),h4t.forEach(t),RUo=r(nBe," \u2014 "),Az=n(nBe,"A",{href:!0});var p4t=s(Az);PUo=r(p4t,"FNetForNextSentencePrediction"),p4t.forEach(t),BUo=r(nBe," (FNet model)"),nBe.forEach(t),IUo=i(pa),AF=n(pa,"LI",{});var sBe=s(AF);Vue=n(sBe,"STRONG",{});var _4t=s(Vue);NUo=r(_4t,"megatron-bert"),_4t.forEach(t),qUo=r(sBe," \u2014 "),Lz=n(sBe,"A",{href:!0});var u4t=s(Lz);jUo=r(u4t,"MegatronBertForNextSentencePrediction"),u4t.forEach(t),DUo=r(sBe," (Megatron-BERT model)"),sBe.forEach(t),GUo=i(pa),LF=n(pa,"LI",{});var lBe=s(LF);Xue=n(lBe,"STRONG",{});var b4t=s(Xue);OUo=r(b4t,"mobilebert"),b4t.forEach(t),VUo=r(lBe," \u2014 "),yz=n(lBe,"A",{href:!0});var v4t=s(yz);XUo=r(v4t,"MobileBertForNextSentencePrediction"),v4t.forEach(t),zUo=r(lBe," (MobileBERT model)"),lBe.forEach(t),QUo=i(pa),yF=n(pa,"LI",{});var iBe=s(yF);zue=n(iBe,"STRONG",{});var F4t=s(zue);WUo=r(F4t,"nezha"),F4t.forEach(t),HUo=r(iBe," \u2014 "),xz=n(iBe,"A",{href:!0});var T4t=s(xz);UUo=r(T4t,"NezhaForNextSentencePrediction"),T4t.forEach(t),JUo=r(iBe," (Nezha model)"),iBe.forEach(t),YUo=i(pa),xF=n(pa,"LI",{});var dBe=s(xF);Que=n(dBe,"STRONG",{});var M4t=s(Que);KUo=r(M4t,"qdqbert"),M4t.forEach(t),ZUo=r(dBe," \u2014 "),$z=n(dBe,"A",{href:!0});var E4t=s($z);eJo=r(E4t,"QDQBertForNextSentencePrediction"),E4t.forEach(t),oJo=r(dBe," (QDQBert model)"),dBe.forEach(t),pa.forEach(t),rJo=i(ha),$F=n(ha,"P",{});var cBe=s($F);tJo=r(cBe,"The model is set in evaluation mode by default using "),Wue=n(cBe,"CODE",{});var C4t=s(Wue);aJo=r(C4t,"model.eval()"),C4t.forEach(t),nJo=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(cBe,"CODE",{});var w4t=s(Hue);sJo=r(w4t,"model.train()"),w4t.forEach(t),cBe.forEach(t),lJo=i(ha),T(kF.$$.fragment,ha),ha.forEach(t),dl.forEach(t),AXe=i(f),fd=n(f,"H2",{class:!0});var SQe=s(fd);SF=n(SQe,"A",{id:!0,class:!0,href:!0});var A4t=s(SF);Uue=n(A4t,"SPAN",{});var L4t=s(Uue);T(_L.$$.fragment,L4t),L4t.forEach(t),A4t.forEach(t),iJo=i(SQe),Jue=n(SQe,"SPAN",{});var y4t=s(Jue);dJo=r(y4t,"AutoModelForTokenClassification"),y4t.forEach(t),SQe.forEach(t),LXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(uL.$$.fragment,cl),cJo=i(cl),md=n(cl,"P",{});var Wre=s(md);fJo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kz=n(Wre,"A",{href:!0});var x4t=s(kz);mJo=r(x4t,"from_pretrained()"),x4t.forEach(t),gJo=r(Wre," class method or the "),Sz=n(Wre,"A",{href:!0});var $4t=s(Sz);hJo=r($4t,"from_config()"),$4t.forEach(t),pJo=r(Wre,` class
method.`),Wre.forEach(t),_Jo=i(cl),bL=n(cl,"P",{});var RQe=s(bL);uJo=r(RQe,"This class cannot be instantiated directly using "),Yue=n(RQe,"CODE",{});var k4t=s(Yue);bJo=r(k4t,"__init__()"),k4t.forEach(t),vJo=r(RQe," (throws an error)."),RQe.forEach(t),FJo=i(cl),_t=n(cl,"DIV",{class:!0});var Cw=s(_t);T(vL.$$.fragment,Cw),TJo=i(Cw),Kue=n(Cw,"P",{});var S4t=s(Kue);MJo=r(S4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S4t.forEach(t),EJo=i(Cw),gd=n(Cw,"P",{});var Hre=s(gd);CJo=r(Hre,`Note:
Loading a model from its configuration file does `),Zue=n(Hre,"STRONG",{});var R4t=s(Zue);wJo=r(R4t,"not"),R4t.forEach(t),AJo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(Hre,"A",{href:!0});var P4t=s(Rz);LJo=r(P4t,"from_pretrained()"),P4t.forEach(t),yJo=r(Hre," to load the model weights."),Hre.forEach(t),xJo=i(Cw),T(RF.$$.fragment,Cw),Cw.forEach(t),$Jo=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(FL.$$.fragment,_a),kJo=i(_a),e1e=n(_a,"P",{});var B4t=s(e1e);SJo=r(B4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B4t.forEach(t),RJo=i(_a),Xa=n(_a,"P",{});var ww=s(Xa);PJo=r(ww,"The model class to instantiate is selected based on the "),o1e=n(ww,"CODE",{});var I4t=s(o1e);BJo=r(I4t,"model_type"),I4t.forEach(t),IJo=r(ww,` property of the config object (either
passed as an argument or loaded from `),r1e=n(ww,"CODE",{});var N4t=s(r1e);NJo=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),qJo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(ww,"CODE",{});var q4t=s(t1e);jJo=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),DJo=r(ww,":"),ww.forEach(t),GJo=i(_a),U=n(_a,"UL",{});var J=s(U);PF=n(J,"LI",{});var fBe=s(PF);a1e=n(fBe,"STRONG",{});var j4t=s(a1e);OJo=r(j4t,"albert"),j4t.forEach(t),VJo=r(fBe," \u2014 "),Pz=n(fBe,"A",{href:!0});var D4t=s(Pz);XJo=r(D4t,"AlbertForTokenClassification"),D4t.forEach(t),zJo=r(fBe," (ALBERT model)"),fBe.forEach(t),QJo=i(J),BF=n(J,"LI",{});var mBe=s(BF);n1e=n(mBe,"STRONG",{});var G4t=s(n1e);WJo=r(G4t,"bert"),G4t.forEach(t),HJo=r(mBe," \u2014 "),Bz=n(mBe,"A",{href:!0});var O4t=s(Bz);UJo=r(O4t,"BertForTokenClassification"),O4t.forEach(t),JJo=r(mBe," (BERT model)"),mBe.forEach(t),YJo=i(J),IF=n(J,"LI",{});var gBe=s(IF);s1e=n(gBe,"STRONG",{});var V4t=s(s1e);KJo=r(V4t,"big_bird"),V4t.forEach(t),ZJo=r(gBe," \u2014 "),Iz=n(gBe,"A",{href:!0});var X4t=s(Iz);eYo=r(X4t,"BigBirdForTokenClassification"),X4t.forEach(t),oYo=r(gBe," (BigBird model)"),gBe.forEach(t),rYo=i(J),NF=n(J,"LI",{});var hBe=s(NF);l1e=n(hBe,"STRONG",{});var z4t=s(l1e);tYo=r(z4t,"bloom"),z4t.forEach(t),aYo=r(hBe," \u2014 "),Nz=n(hBe,"A",{href:!0});var Q4t=s(Nz);nYo=r(Q4t,"BloomForTokenClassification"),Q4t.forEach(t),sYo=r(hBe," (BLOOM model)"),hBe.forEach(t),lYo=i(J),qF=n(J,"LI",{});var pBe=s(qF);i1e=n(pBe,"STRONG",{});var W4t=s(i1e);iYo=r(W4t,"camembert"),W4t.forEach(t),dYo=r(pBe," \u2014 "),qz=n(pBe,"A",{href:!0});var H4t=s(qz);cYo=r(H4t,"CamembertForTokenClassification"),H4t.forEach(t),fYo=r(pBe," (CamemBERT model)"),pBe.forEach(t),mYo=i(J),jF=n(J,"LI",{});var _Be=s(jF);d1e=n(_Be,"STRONG",{});var U4t=s(d1e);gYo=r(U4t,"canine"),U4t.forEach(t),hYo=r(_Be," \u2014 "),jz=n(_Be,"A",{href:!0});var J4t=s(jz);pYo=r(J4t,"CanineForTokenClassification"),J4t.forEach(t),_Yo=r(_Be," (CANINE model)"),_Be.forEach(t),uYo=i(J),DF=n(J,"LI",{});var uBe=s(DF);c1e=n(uBe,"STRONG",{});var Y4t=s(c1e);bYo=r(Y4t,"convbert"),Y4t.forEach(t),vYo=r(uBe," \u2014 "),Dz=n(uBe,"A",{href:!0});var K4t=s(Dz);FYo=r(K4t,"ConvBertForTokenClassification"),K4t.forEach(t),TYo=r(uBe," (ConvBERT model)"),uBe.forEach(t),MYo=i(J),GF=n(J,"LI",{});var bBe=s(GF);f1e=n(bBe,"STRONG",{});var Z4t=s(f1e);EYo=r(Z4t,"data2vec-text"),Z4t.forEach(t),CYo=r(bBe," \u2014 "),Gz=n(bBe,"A",{href:!0});var eEt=s(Gz);wYo=r(eEt,"Data2VecTextForTokenClassification"),eEt.forEach(t),AYo=r(bBe," (Data2VecText model)"),bBe.forEach(t),LYo=i(J),OF=n(J,"LI",{});var vBe=s(OF);m1e=n(vBe,"STRONG",{});var oEt=s(m1e);yYo=r(oEt,"deberta"),oEt.forEach(t),xYo=r(vBe," \u2014 "),Oz=n(vBe,"A",{href:!0});var rEt=s(Oz);$Yo=r(rEt,"DebertaForTokenClassification"),rEt.forEach(t),kYo=r(vBe," (DeBERTa model)"),vBe.forEach(t),SYo=i(J),VF=n(J,"LI",{});var FBe=s(VF);g1e=n(FBe,"STRONG",{});var tEt=s(g1e);RYo=r(tEt,"deberta-v2"),tEt.forEach(t),PYo=r(FBe," \u2014 "),Vz=n(FBe,"A",{href:!0});var aEt=s(Vz);BYo=r(aEt,"DebertaV2ForTokenClassification"),aEt.forEach(t),IYo=r(FBe," (DeBERTa-v2 model)"),FBe.forEach(t),NYo=i(J),XF=n(J,"LI",{});var TBe=s(XF);h1e=n(TBe,"STRONG",{});var nEt=s(h1e);qYo=r(nEt,"distilbert"),nEt.forEach(t),jYo=r(TBe," \u2014 "),Xz=n(TBe,"A",{href:!0});var sEt=s(Xz);DYo=r(sEt,"DistilBertForTokenClassification"),sEt.forEach(t),GYo=r(TBe," (DistilBERT model)"),TBe.forEach(t),OYo=i(J),zF=n(J,"LI",{});var MBe=s(zF);p1e=n(MBe,"STRONG",{});var lEt=s(p1e);VYo=r(lEt,"electra"),lEt.forEach(t),XYo=r(MBe," \u2014 "),zz=n(MBe,"A",{href:!0});var iEt=s(zz);zYo=r(iEt,"ElectraForTokenClassification"),iEt.forEach(t),QYo=r(MBe," (ELECTRA model)"),MBe.forEach(t),WYo=i(J),QF=n(J,"LI",{});var EBe=s(QF);_1e=n(EBe,"STRONG",{});var dEt=s(_1e);HYo=r(dEt,"flaubert"),dEt.forEach(t),UYo=r(EBe," \u2014 "),Qz=n(EBe,"A",{href:!0});var cEt=s(Qz);JYo=r(cEt,"FlaubertForTokenClassification"),cEt.forEach(t),YYo=r(EBe," (FlauBERT model)"),EBe.forEach(t),KYo=i(J),WF=n(J,"LI",{});var CBe=s(WF);u1e=n(CBe,"STRONG",{});var fEt=s(u1e);ZYo=r(fEt,"fnet"),fEt.forEach(t),eKo=r(CBe," \u2014 "),Wz=n(CBe,"A",{href:!0});var mEt=s(Wz);oKo=r(mEt,"FNetForTokenClassification"),mEt.forEach(t),rKo=r(CBe," (FNet model)"),CBe.forEach(t),tKo=i(J),HF=n(J,"LI",{});var wBe=s(HF);b1e=n(wBe,"STRONG",{});var gEt=s(b1e);aKo=r(gEt,"funnel"),gEt.forEach(t),nKo=r(wBe," \u2014 "),Hz=n(wBe,"A",{href:!0});var hEt=s(Hz);sKo=r(hEt,"FunnelForTokenClassification"),hEt.forEach(t),lKo=r(wBe," (Funnel Transformer model)"),wBe.forEach(t),iKo=i(J),UF=n(J,"LI",{});var ABe=s(UF);v1e=n(ABe,"STRONG",{});var pEt=s(v1e);dKo=r(pEt,"gpt2"),pEt.forEach(t),cKo=r(ABe," \u2014 "),Uz=n(ABe,"A",{href:!0});var _Et=s(Uz);fKo=r(_Et,"GPT2ForTokenClassification"),_Et.forEach(t),mKo=r(ABe," (OpenAI GPT-2 model)"),ABe.forEach(t),gKo=i(J),JF=n(J,"LI",{});var LBe=s(JF);F1e=n(LBe,"STRONG",{});var uEt=s(F1e);hKo=r(uEt,"ibert"),uEt.forEach(t),pKo=r(LBe," \u2014 "),Jz=n(LBe,"A",{href:!0});var bEt=s(Jz);_Ko=r(bEt,"IBertForTokenClassification"),bEt.forEach(t),uKo=r(LBe," (I-BERT model)"),LBe.forEach(t),bKo=i(J),YF=n(J,"LI",{});var yBe=s(YF);T1e=n(yBe,"STRONG",{});var vEt=s(T1e);vKo=r(vEt,"layoutlm"),vEt.forEach(t),FKo=r(yBe," \u2014 "),Yz=n(yBe,"A",{href:!0});var FEt=s(Yz);TKo=r(FEt,"LayoutLMForTokenClassification"),FEt.forEach(t),MKo=r(yBe," (LayoutLM model)"),yBe.forEach(t),EKo=i(J),KF=n(J,"LI",{});var xBe=s(KF);M1e=n(xBe,"STRONG",{});var TEt=s(M1e);CKo=r(TEt,"layoutlmv2"),TEt.forEach(t),wKo=r(xBe," \u2014 "),Kz=n(xBe,"A",{href:!0});var MEt=s(Kz);AKo=r(MEt,"LayoutLMv2ForTokenClassification"),MEt.forEach(t),LKo=r(xBe," (LayoutLMv2 model)"),xBe.forEach(t),yKo=i(J),ZF=n(J,"LI",{});var $Be=s(ZF);E1e=n($Be,"STRONG",{});var EEt=s(E1e);xKo=r(EEt,"layoutlmv3"),EEt.forEach(t),$Ko=r($Be," \u2014 "),Zz=n($Be,"A",{href:!0});var CEt=s(Zz);kKo=r(CEt,"LayoutLMv3ForTokenClassification"),CEt.forEach(t),SKo=r($Be," (LayoutLMv3 model)"),$Be.forEach(t),RKo=i(J),e6=n(J,"LI",{});var kBe=s(e6);C1e=n(kBe,"STRONG",{});var wEt=s(C1e);PKo=r(wEt,"longformer"),wEt.forEach(t),BKo=r(kBe," \u2014 "),eQ=n(kBe,"A",{href:!0});var AEt=s(eQ);IKo=r(AEt,"LongformerForTokenClassification"),AEt.forEach(t),NKo=r(kBe," (Longformer model)"),kBe.forEach(t),qKo=i(J),o6=n(J,"LI",{});var SBe=s(o6);w1e=n(SBe,"STRONG",{});var LEt=s(w1e);jKo=r(LEt,"megatron-bert"),LEt.forEach(t),DKo=r(SBe," \u2014 "),oQ=n(SBe,"A",{href:!0});var yEt=s(oQ);GKo=r(yEt,"MegatronBertForTokenClassification"),yEt.forEach(t),OKo=r(SBe," (Megatron-BERT model)"),SBe.forEach(t),VKo=i(J),r6=n(J,"LI",{});var RBe=s(r6);A1e=n(RBe,"STRONG",{});var xEt=s(A1e);XKo=r(xEt,"mobilebert"),xEt.forEach(t),zKo=r(RBe," \u2014 "),rQ=n(RBe,"A",{href:!0});var $Et=s(rQ);QKo=r($Et,"MobileBertForTokenClassification"),$Et.forEach(t),WKo=r(RBe," (MobileBERT model)"),RBe.forEach(t),HKo=i(J),t6=n(J,"LI",{});var PBe=s(t6);L1e=n(PBe,"STRONG",{});var kEt=s(L1e);UKo=r(kEt,"mpnet"),kEt.forEach(t),JKo=r(PBe," \u2014 "),tQ=n(PBe,"A",{href:!0});var SEt=s(tQ);YKo=r(SEt,"MPNetForTokenClassification"),SEt.forEach(t),KKo=r(PBe," (MPNet model)"),PBe.forEach(t),ZKo=i(J),a6=n(J,"LI",{});var BBe=s(a6);y1e=n(BBe,"STRONG",{});var REt=s(y1e);eZo=r(REt,"nezha"),REt.forEach(t),oZo=r(BBe," \u2014 "),aQ=n(BBe,"A",{href:!0});var PEt=s(aQ);rZo=r(PEt,"NezhaForTokenClassification"),PEt.forEach(t),tZo=r(BBe," (Nezha model)"),BBe.forEach(t),aZo=i(J),n6=n(J,"LI",{});var IBe=s(n6);x1e=n(IBe,"STRONG",{});var BEt=s(x1e);nZo=r(BEt,"nystromformer"),BEt.forEach(t),sZo=r(IBe," \u2014 "),nQ=n(IBe,"A",{href:!0});var IEt=s(nQ);lZo=r(IEt,"NystromformerForTokenClassification"),IEt.forEach(t),iZo=r(IBe," (Nystr\xF6mformer model)"),IBe.forEach(t),dZo=i(J),s6=n(J,"LI",{});var NBe=s(s6);$1e=n(NBe,"STRONG",{});var NEt=s($1e);cZo=r(NEt,"qdqbert"),NEt.forEach(t),fZo=r(NBe," \u2014 "),sQ=n(NBe,"A",{href:!0});var qEt=s(sQ);mZo=r(qEt,"QDQBertForTokenClassification"),qEt.forEach(t),gZo=r(NBe," (QDQBert model)"),NBe.forEach(t),hZo=i(J),l6=n(J,"LI",{});var qBe=s(l6);k1e=n(qBe,"STRONG",{});var jEt=s(k1e);pZo=r(jEt,"rembert"),jEt.forEach(t),_Zo=r(qBe," \u2014 "),lQ=n(qBe,"A",{href:!0});var DEt=s(lQ);uZo=r(DEt,"RemBertForTokenClassification"),DEt.forEach(t),bZo=r(qBe," (RemBERT model)"),qBe.forEach(t),vZo=i(J),i6=n(J,"LI",{});var jBe=s(i6);S1e=n(jBe,"STRONG",{});var GEt=s(S1e);FZo=r(GEt,"roberta"),GEt.forEach(t),TZo=r(jBe," \u2014 "),iQ=n(jBe,"A",{href:!0});var OEt=s(iQ);MZo=r(OEt,"RobertaForTokenClassification"),OEt.forEach(t),EZo=r(jBe," (RoBERTa model)"),jBe.forEach(t),CZo=i(J),d6=n(J,"LI",{});var DBe=s(d6);R1e=n(DBe,"STRONG",{});var VEt=s(R1e);wZo=r(VEt,"roformer"),VEt.forEach(t),AZo=r(DBe," \u2014 "),dQ=n(DBe,"A",{href:!0});var XEt=s(dQ);LZo=r(XEt,"RoFormerForTokenClassification"),XEt.forEach(t),yZo=r(DBe," (RoFormer model)"),DBe.forEach(t),xZo=i(J),c6=n(J,"LI",{});var GBe=s(c6);P1e=n(GBe,"STRONG",{});var zEt=s(P1e);$Zo=r(zEt,"squeezebert"),zEt.forEach(t),kZo=r(GBe," \u2014 "),cQ=n(GBe,"A",{href:!0});var QEt=s(cQ);SZo=r(QEt,"SqueezeBertForTokenClassification"),QEt.forEach(t),RZo=r(GBe," (SqueezeBERT model)"),GBe.forEach(t),PZo=i(J),f6=n(J,"LI",{});var OBe=s(f6);B1e=n(OBe,"STRONG",{});var WEt=s(B1e);BZo=r(WEt,"xlm"),WEt.forEach(t),IZo=r(OBe," \u2014 "),fQ=n(OBe,"A",{href:!0});var HEt=s(fQ);NZo=r(HEt,"XLMForTokenClassification"),HEt.forEach(t),qZo=r(OBe," (XLM model)"),OBe.forEach(t),jZo=i(J),m6=n(J,"LI",{});var VBe=s(m6);I1e=n(VBe,"STRONG",{});var UEt=s(I1e);DZo=r(UEt,"xlm-roberta"),UEt.forEach(t),GZo=r(VBe," \u2014 "),mQ=n(VBe,"A",{href:!0});var JEt=s(mQ);OZo=r(JEt,"XLMRobertaForTokenClassification"),JEt.forEach(t),VZo=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),XZo=i(J),g6=n(J,"LI",{});var XBe=s(g6);N1e=n(XBe,"STRONG",{});var YEt=s(N1e);zZo=r(YEt,"xlm-roberta-xl"),YEt.forEach(t),QZo=r(XBe," \u2014 "),gQ=n(XBe,"A",{href:!0});var KEt=s(gQ);WZo=r(KEt,"XLMRobertaXLForTokenClassification"),KEt.forEach(t),HZo=r(XBe," (XLM-RoBERTa-XL model)"),XBe.forEach(t),UZo=i(J),h6=n(J,"LI",{});var zBe=s(h6);q1e=n(zBe,"STRONG",{});var ZEt=s(q1e);JZo=r(ZEt,"xlnet"),ZEt.forEach(t),YZo=r(zBe," \u2014 "),hQ=n(zBe,"A",{href:!0});var eCt=s(hQ);KZo=r(eCt,"XLNetForTokenClassification"),eCt.forEach(t),ZZo=r(zBe," (XLNet model)"),zBe.forEach(t),eer=i(J),p6=n(J,"LI",{});var QBe=s(p6);j1e=n(QBe,"STRONG",{});var oCt=s(j1e);oer=r(oCt,"yoso"),oCt.forEach(t),rer=r(QBe," \u2014 "),pQ=n(QBe,"A",{href:!0});var rCt=s(pQ);ter=r(rCt,"YosoForTokenClassification"),rCt.forEach(t),aer=r(QBe," (YOSO model)"),QBe.forEach(t),J.forEach(t),ner=i(_a),_6=n(_a,"P",{});var WBe=s(_6);ser=r(WBe,"The model is set in evaluation mode by default using "),D1e=n(WBe,"CODE",{});var tCt=s(D1e);ler=r(tCt,"model.eval()"),tCt.forEach(t),ier=r(WBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(WBe,"CODE",{});var aCt=s(G1e);der=r(aCt,"model.train()"),aCt.forEach(t),WBe.forEach(t),cer=i(_a),T(u6.$$.fragment,_a),_a.forEach(t),cl.forEach(t),yXe=i(f),hd=n(f,"H2",{class:!0});var PQe=s(hd);b6=n(PQe,"A",{id:!0,class:!0,href:!0});var nCt=s(b6);O1e=n(nCt,"SPAN",{});var sCt=s(O1e);T(TL.$$.fragment,sCt),sCt.forEach(t),nCt.forEach(t),fer=i(PQe),V1e=n(PQe,"SPAN",{});var lCt=s(V1e);mer=r(lCt,"AutoModelForQuestionAnswering"),lCt.forEach(t),PQe.forEach(t),xXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(ML.$$.fragment,fl),ger=i(fl),pd=n(fl,"P",{});var Ure=s(pd);her=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_Q=n(Ure,"A",{href:!0});var iCt=s(_Q);per=r(iCt,"from_pretrained()"),iCt.forEach(t),_er=r(Ure," class method or the "),uQ=n(Ure,"A",{href:!0});var dCt=s(uQ);uer=r(dCt,"from_config()"),dCt.forEach(t),ber=r(Ure,` class
method.`),Ure.forEach(t),ver=i(fl),EL=n(fl,"P",{});var BQe=s(EL);Fer=r(BQe,"This class cannot be instantiated directly using "),X1e=n(BQe,"CODE",{});var cCt=s(X1e);Ter=r(cCt,"__init__()"),cCt.forEach(t),Mer=r(BQe," (throws an error)."),BQe.forEach(t),Eer=i(fl),ut=n(fl,"DIV",{class:!0});var Aw=s(ut);T(CL.$$.fragment,Aw),Cer=i(Aw),z1e=n(Aw,"P",{});var fCt=s(z1e);wer=r(fCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fCt.forEach(t),Aer=i(Aw),_d=n(Aw,"P",{});var Jre=s(_d);Ler=r(Jre,`Note:
Loading a model from its configuration file does `),Q1e=n(Jre,"STRONG",{});var mCt=s(Q1e);yer=r(mCt,"not"),mCt.forEach(t),xer=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(Jre,"A",{href:!0});var gCt=s(bQ);$er=r(gCt,"from_pretrained()"),gCt.forEach(t),ker=r(Jre," to load the model weights."),Jre.forEach(t),Ser=i(Aw),T(v6.$$.fragment,Aw),Aw.forEach(t),Rer=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(wL.$$.fragment,ua),Per=i(ua),W1e=n(ua,"P",{});var hCt=s(W1e);Ber=r(hCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hCt.forEach(t),Ier=i(ua),za=n(ua,"P",{});var Lw=s(za);Ner=r(Lw,"The model class to instantiate is selected based on the "),H1e=n(Lw,"CODE",{});var pCt=s(H1e);qer=r(pCt,"model_type"),pCt.forEach(t),jer=r(Lw,` property of the config object (either
passed as an argument or loaded from `),U1e=n(Lw,"CODE",{});var _Ct=s(U1e);Der=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),Ger=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(Lw,"CODE",{});var uCt=s(J1e);Oer=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),Ver=r(Lw,":"),Lw.forEach(t),Xer=i(ua),V=n(ua,"UL",{});var X=s(V);F6=n(X,"LI",{});var HBe=s(F6);Y1e=n(HBe,"STRONG",{});var bCt=s(Y1e);zer=r(bCt,"albert"),bCt.forEach(t),Qer=r(HBe," \u2014 "),vQ=n(HBe,"A",{href:!0});var vCt=s(vQ);Wer=r(vCt,"AlbertForQuestionAnswering"),vCt.forEach(t),Her=r(HBe," (ALBERT model)"),HBe.forEach(t),Uer=i(X),T6=n(X,"LI",{});var UBe=s(T6);K1e=n(UBe,"STRONG",{});var FCt=s(K1e);Jer=r(FCt,"bart"),FCt.forEach(t),Yer=r(UBe," \u2014 "),FQ=n(UBe,"A",{href:!0});var TCt=s(FQ);Ker=r(TCt,"BartForQuestionAnswering"),TCt.forEach(t),Zer=r(UBe," (BART model)"),UBe.forEach(t),eor=i(X),M6=n(X,"LI",{});var JBe=s(M6);Z1e=n(JBe,"STRONG",{});var MCt=s(Z1e);oor=r(MCt,"bert"),MCt.forEach(t),ror=r(JBe," \u2014 "),TQ=n(JBe,"A",{href:!0});var ECt=s(TQ);tor=r(ECt,"BertForQuestionAnswering"),ECt.forEach(t),aor=r(JBe," (BERT model)"),JBe.forEach(t),nor=i(X),E6=n(X,"LI",{});var YBe=s(E6);e2e=n(YBe,"STRONG",{});var CCt=s(e2e);sor=r(CCt,"big_bird"),CCt.forEach(t),lor=r(YBe," \u2014 "),MQ=n(YBe,"A",{href:!0});var wCt=s(MQ);ior=r(wCt,"BigBirdForQuestionAnswering"),wCt.forEach(t),dor=r(YBe," (BigBird model)"),YBe.forEach(t),cor=i(X),C6=n(X,"LI",{});var KBe=s(C6);o2e=n(KBe,"STRONG",{});var ACt=s(o2e);mor=r(ACt,"bigbird_pegasus"),ACt.forEach(t),gor=r(KBe," \u2014 "),EQ=n(KBe,"A",{href:!0});var LCt=s(EQ);hor=r(LCt,"BigBirdPegasusForQuestionAnswering"),LCt.forEach(t),por=r(KBe," (BigBird-Pegasus model)"),KBe.forEach(t),_or=i(X),w6=n(X,"LI",{});var ZBe=s(w6);r2e=n(ZBe,"STRONG",{});var yCt=s(r2e);uor=r(yCt,"camembert"),yCt.forEach(t),bor=r(ZBe," \u2014 "),CQ=n(ZBe,"A",{href:!0});var xCt=s(CQ);vor=r(xCt,"CamembertForQuestionAnswering"),xCt.forEach(t),For=r(ZBe," (CamemBERT model)"),ZBe.forEach(t),Tor=i(X),A6=n(X,"LI",{});var eIe=s(A6);t2e=n(eIe,"STRONG",{});var $Ct=s(t2e);Mor=r($Ct,"canine"),$Ct.forEach(t),Eor=r(eIe," \u2014 "),wQ=n(eIe,"A",{href:!0});var kCt=s(wQ);Cor=r(kCt,"CanineForQuestionAnswering"),kCt.forEach(t),wor=r(eIe," (CANINE model)"),eIe.forEach(t),Aor=i(X),L6=n(X,"LI",{});var oIe=s(L6);a2e=n(oIe,"STRONG",{});var SCt=s(a2e);Lor=r(SCt,"convbert"),SCt.forEach(t),yor=r(oIe," \u2014 "),AQ=n(oIe,"A",{href:!0});var RCt=s(AQ);xor=r(RCt,"ConvBertForQuestionAnswering"),RCt.forEach(t),$or=r(oIe," (ConvBERT model)"),oIe.forEach(t),kor=i(X),y6=n(X,"LI",{});var rIe=s(y6);n2e=n(rIe,"STRONG",{});var PCt=s(n2e);Sor=r(PCt,"data2vec-text"),PCt.forEach(t),Ror=r(rIe," \u2014 "),LQ=n(rIe,"A",{href:!0});var BCt=s(LQ);Por=r(BCt,"Data2VecTextForQuestionAnswering"),BCt.forEach(t),Bor=r(rIe," (Data2VecText model)"),rIe.forEach(t),Ior=i(X),x6=n(X,"LI",{});var tIe=s(x6);s2e=n(tIe,"STRONG",{});var ICt=s(s2e);Nor=r(ICt,"deberta"),ICt.forEach(t),qor=r(tIe," \u2014 "),yQ=n(tIe,"A",{href:!0});var NCt=s(yQ);jor=r(NCt,"DebertaForQuestionAnswering"),NCt.forEach(t),Dor=r(tIe," (DeBERTa model)"),tIe.forEach(t),Gor=i(X),$6=n(X,"LI",{});var aIe=s($6);l2e=n(aIe,"STRONG",{});var qCt=s(l2e);Oor=r(qCt,"deberta-v2"),qCt.forEach(t),Vor=r(aIe," \u2014 "),xQ=n(aIe,"A",{href:!0});var jCt=s(xQ);Xor=r(jCt,"DebertaV2ForQuestionAnswering"),jCt.forEach(t),zor=r(aIe," (DeBERTa-v2 model)"),aIe.forEach(t),Qor=i(X),k6=n(X,"LI",{});var nIe=s(k6);i2e=n(nIe,"STRONG",{});var DCt=s(i2e);Wor=r(DCt,"distilbert"),DCt.forEach(t),Hor=r(nIe," \u2014 "),$Q=n(nIe,"A",{href:!0});var GCt=s($Q);Uor=r(GCt,"DistilBertForQuestionAnswering"),GCt.forEach(t),Jor=r(nIe," (DistilBERT model)"),nIe.forEach(t),Yor=i(X),S6=n(X,"LI",{});var sIe=s(S6);d2e=n(sIe,"STRONG",{});var OCt=s(d2e);Kor=r(OCt,"electra"),OCt.forEach(t),Zor=r(sIe," \u2014 "),kQ=n(sIe,"A",{href:!0});var VCt=s(kQ);err=r(VCt,"ElectraForQuestionAnswering"),VCt.forEach(t),orr=r(sIe," (ELECTRA model)"),sIe.forEach(t),rrr=i(X),R6=n(X,"LI",{});var lIe=s(R6);c2e=n(lIe,"STRONG",{});var XCt=s(c2e);trr=r(XCt,"flaubert"),XCt.forEach(t),arr=r(lIe," \u2014 "),SQ=n(lIe,"A",{href:!0});var zCt=s(SQ);nrr=r(zCt,"FlaubertForQuestionAnsweringSimple"),zCt.forEach(t),srr=r(lIe," (FlauBERT model)"),lIe.forEach(t),lrr=i(X),P6=n(X,"LI",{});var iIe=s(P6);f2e=n(iIe,"STRONG",{});var QCt=s(f2e);irr=r(QCt,"fnet"),QCt.forEach(t),drr=r(iIe," \u2014 "),RQ=n(iIe,"A",{href:!0});var WCt=s(RQ);crr=r(WCt,"FNetForQuestionAnswering"),WCt.forEach(t),frr=r(iIe," (FNet model)"),iIe.forEach(t),mrr=i(X),B6=n(X,"LI",{});var dIe=s(B6);m2e=n(dIe,"STRONG",{});var HCt=s(m2e);grr=r(HCt,"funnel"),HCt.forEach(t),hrr=r(dIe," \u2014 "),PQ=n(dIe,"A",{href:!0});var UCt=s(PQ);prr=r(UCt,"FunnelForQuestionAnswering"),UCt.forEach(t),_rr=r(dIe," (Funnel Transformer model)"),dIe.forEach(t),urr=i(X),I6=n(X,"LI",{});var cIe=s(I6);g2e=n(cIe,"STRONG",{});var JCt=s(g2e);brr=r(JCt,"gptj"),JCt.forEach(t),vrr=r(cIe," \u2014 "),BQ=n(cIe,"A",{href:!0});var YCt=s(BQ);Frr=r(YCt,"GPTJForQuestionAnswering"),YCt.forEach(t),Trr=r(cIe," (GPT-J model)"),cIe.forEach(t),Mrr=i(X),N6=n(X,"LI",{});var fIe=s(N6);h2e=n(fIe,"STRONG",{});var KCt=s(h2e);Err=r(KCt,"ibert"),KCt.forEach(t),Crr=r(fIe," \u2014 "),IQ=n(fIe,"A",{href:!0});var ZCt=s(IQ);wrr=r(ZCt,"IBertForQuestionAnswering"),ZCt.forEach(t),Arr=r(fIe," (I-BERT model)"),fIe.forEach(t),Lrr=i(X),q6=n(X,"LI",{});var mIe=s(q6);p2e=n(mIe,"STRONG",{});var e3t=s(p2e);yrr=r(e3t,"layoutlmv2"),e3t.forEach(t),xrr=r(mIe," \u2014 "),NQ=n(mIe,"A",{href:!0});var o3t=s(NQ);$rr=r(o3t,"LayoutLMv2ForQuestionAnswering"),o3t.forEach(t),krr=r(mIe," (LayoutLMv2 model)"),mIe.forEach(t),Srr=i(X),j6=n(X,"LI",{});var gIe=s(j6);_2e=n(gIe,"STRONG",{});var r3t=s(_2e);Rrr=r(r3t,"layoutlmv3"),r3t.forEach(t),Prr=r(gIe," \u2014 "),qQ=n(gIe,"A",{href:!0});var t3t=s(qQ);Brr=r(t3t,"LayoutLMv3ForQuestionAnswering"),t3t.forEach(t),Irr=r(gIe," (LayoutLMv3 model)"),gIe.forEach(t),Nrr=i(X),D6=n(X,"LI",{});var hIe=s(D6);u2e=n(hIe,"STRONG",{});var a3t=s(u2e);qrr=r(a3t,"led"),a3t.forEach(t),jrr=r(hIe," \u2014 "),jQ=n(hIe,"A",{href:!0});var n3t=s(jQ);Drr=r(n3t,"LEDForQuestionAnswering"),n3t.forEach(t),Grr=r(hIe," (LED model)"),hIe.forEach(t),Orr=i(X),G6=n(X,"LI",{});var pIe=s(G6);b2e=n(pIe,"STRONG",{});var s3t=s(b2e);Vrr=r(s3t,"longformer"),s3t.forEach(t),Xrr=r(pIe," \u2014 "),DQ=n(pIe,"A",{href:!0});var l3t=s(DQ);zrr=r(l3t,"LongformerForQuestionAnswering"),l3t.forEach(t),Qrr=r(pIe," (Longformer model)"),pIe.forEach(t),Wrr=i(X),O6=n(X,"LI",{});var _Ie=s(O6);v2e=n(_Ie,"STRONG",{});var i3t=s(v2e);Hrr=r(i3t,"lxmert"),i3t.forEach(t),Urr=r(_Ie," \u2014 "),GQ=n(_Ie,"A",{href:!0});var d3t=s(GQ);Jrr=r(d3t,"LxmertForQuestionAnswering"),d3t.forEach(t),Yrr=r(_Ie," (LXMERT model)"),_Ie.forEach(t),Krr=i(X),V6=n(X,"LI",{});var uIe=s(V6);F2e=n(uIe,"STRONG",{});var c3t=s(F2e);Zrr=r(c3t,"mbart"),c3t.forEach(t),etr=r(uIe," \u2014 "),OQ=n(uIe,"A",{href:!0});var f3t=s(OQ);otr=r(f3t,"MBartForQuestionAnswering"),f3t.forEach(t),rtr=r(uIe," (mBART model)"),uIe.forEach(t),ttr=i(X),X6=n(X,"LI",{});var bIe=s(X6);T2e=n(bIe,"STRONG",{});var m3t=s(T2e);atr=r(m3t,"megatron-bert"),m3t.forEach(t),ntr=r(bIe," \u2014 "),VQ=n(bIe,"A",{href:!0});var g3t=s(VQ);str=r(g3t,"MegatronBertForQuestionAnswering"),g3t.forEach(t),ltr=r(bIe," (Megatron-BERT model)"),bIe.forEach(t),itr=i(X),z6=n(X,"LI",{});var vIe=s(z6);M2e=n(vIe,"STRONG",{});var h3t=s(M2e);dtr=r(h3t,"mobilebert"),h3t.forEach(t),ctr=r(vIe," \u2014 "),XQ=n(vIe,"A",{href:!0});var p3t=s(XQ);ftr=r(p3t,"MobileBertForQuestionAnswering"),p3t.forEach(t),mtr=r(vIe," (MobileBERT model)"),vIe.forEach(t),gtr=i(X),Q6=n(X,"LI",{});var FIe=s(Q6);E2e=n(FIe,"STRONG",{});var _3t=s(E2e);htr=r(_3t,"mpnet"),_3t.forEach(t),ptr=r(FIe," \u2014 "),zQ=n(FIe,"A",{href:!0});var u3t=s(zQ);_tr=r(u3t,"MPNetForQuestionAnswering"),u3t.forEach(t),utr=r(FIe," (MPNet model)"),FIe.forEach(t),btr=i(X),W6=n(X,"LI",{});var TIe=s(W6);C2e=n(TIe,"STRONG",{});var b3t=s(C2e);vtr=r(b3t,"mvp"),b3t.forEach(t),Ftr=r(TIe," \u2014 "),QQ=n(TIe,"A",{href:!0});var v3t=s(QQ);Ttr=r(v3t,"MvpForQuestionAnswering"),v3t.forEach(t),Mtr=r(TIe," (MVP model)"),TIe.forEach(t),Etr=i(X),H6=n(X,"LI",{});var MIe=s(H6);w2e=n(MIe,"STRONG",{});var F3t=s(w2e);Ctr=r(F3t,"nezha"),F3t.forEach(t),wtr=r(MIe," \u2014 "),WQ=n(MIe,"A",{href:!0});var T3t=s(WQ);Atr=r(T3t,"NezhaForQuestionAnswering"),T3t.forEach(t),Ltr=r(MIe," (Nezha model)"),MIe.forEach(t),ytr=i(X),U6=n(X,"LI",{});var EIe=s(U6);A2e=n(EIe,"STRONG",{});var M3t=s(A2e);xtr=r(M3t,"nystromformer"),M3t.forEach(t),$tr=r(EIe," \u2014 "),HQ=n(EIe,"A",{href:!0});var E3t=s(HQ);ktr=r(E3t,"NystromformerForQuestionAnswering"),E3t.forEach(t),Str=r(EIe," (Nystr\xF6mformer model)"),EIe.forEach(t),Rtr=i(X),J6=n(X,"LI",{});var CIe=s(J6);L2e=n(CIe,"STRONG",{});var C3t=s(L2e);Ptr=r(C3t,"qdqbert"),C3t.forEach(t),Btr=r(CIe," \u2014 "),UQ=n(CIe,"A",{href:!0});var w3t=s(UQ);Itr=r(w3t,"QDQBertForQuestionAnswering"),w3t.forEach(t),Ntr=r(CIe," (QDQBert model)"),CIe.forEach(t),qtr=i(X),Y6=n(X,"LI",{});var wIe=s(Y6);y2e=n(wIe,"STRONG",{});var A3t=s(y2e);jtr=r(A3t,"reformer"),A3t.forEach(t),Dtr=r(wIe," \u2014 "),JQ=n(wIe,"A",{href:!0});var L3t=s(JQ);Gtr=r(L3t,"ReformerForQuestionAnswering"),L3t.forEach(t),Otr=r(wIe," (Reformer model)"),wIe.forEach(t),Vtr=i(X),K6=n(X,"LI",{});var AIe=s(K6);x2e=n(AIe,"STRONG",{});var y3t=s(x2e);Xtr=r(y3t,"rembert"),y3t.forEach(t),ztr=r(AIe," \u2014 "),YQ=n(AIe,"A",{href:!0});var x3t=s(YQ);Qtr=r(x3t,"RemBertForQuestionAnswering"),x3t.forEach(t),Wtr=r(AIe," (RemBERT model)"),AIe.forEach(t),Htr=i(X),Z6=n(X,"LI",{});var LIe=s(Z6);$2e=n(LIe,"STRONG",{});var $3t=s($2e);Utr=r($3t,"roberta"),$3t.forEach(t),Jtr=r(LIe," \u2014 "),KQ=n(LIe,"A",{href:!0});var k3t=s(KQ);Ytr=r(k3t,"RobertaForQuestionAnswering"),k3t.forEach(t),Ktr=r(LIe," (RoBERTa model)"),LIe.forEach(t),Ztr=i(X),eT=n(X,"LI",{});var yIe=s(eT);k2e=n(yIe,"STRONG",{});var S3t=s(k2e);ear=r(S3t,"roformer"),S3t.forEach(t),oar=r(yIe," \u2014 "),ZQ=n(yIe,"A",{href:!0});var R3t=s(ZQ);rar=r(R3t,"RoFormerForQuestionAnswering"),R3t.forEach(t),tar=r(yIe," (RoFormer model)"),yIe.forEach(t),aar=i(X),oT=n(X,"LI",{});var xIe=s(oT);S2e=n(xIe,"STRONG",{});var P3t=s(S2e);nar=r(P3t,"splinter"),P3t.forEach(t),sar=r(xIe," \u2014 "),eW=n(xIe,"A",{href:!0});var B3t=s(eW);lar=r(B3t,"SplinterForQuestionAnswering"),B3t.forEach(t),iar=r(xIe," (Splinter model)"),xIe.forEach(t),dar=i(X),rT=n(X,"LI",{});var $Ie=s(rT);R2e=n($Ie,"STRONG",{});var I3t=s(R2e);car=r(I3t,"squeezebert"),I3t.forEach(t),far=r($Ie," \u2014 "),oW=n($Ie,"A",{href:!0});var N3t=s(oW);mar=r(N3t,"SqueezeBertForQuestionAnswering"),N3t.forEach(t),gar=r($Ie," (SqueezeBERT model)"),$Ie.forEach(t),har=i(X),tT=n(X,"LI",{});var kIe=s(tT);P2e=n(kIe,"STRONG",{});var q3t=s(P2e);par=r(q3t,"xlm"),q3t.forEach(t),_ar=r(kIe," \u2014 "),rW=n(kIe,"A",{href:!0});var j3t=s(rW);uar=r(j3t,"XLMForQuestionAnsweringSimple"),j3t.forEach(t),bar=r(kIe," (XLM model)"),kIe.forEach(t),Far=i(X),aT=n(X,"LI",{});var SIe=s(aT);B2e=n(SIe,"STRONG",{});var D3t=s(B2e);Tar=r(D3t,"xlm-roberta"),D3t.forEach(t),Mar=r(SIe," \u2014 "),tW=n(SIe,"A",{href:!0});var G3t=s(tW);Ear=r(G3t,"XLMRobertaForQuestionAnswering"),G3t.forEach(t),Car=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),war=i(X),nT=n(X,"LI",{});var RIe=s(nT);I2e=n(RIe,"STRONG",{});var O3t=s(I2e);Aar=r(O3t,"xlm-roberta-xl"),O3t.forEach(t),Lar=r(RIe," \u2014 "),aW=n(RIe,"A",{href:!0});var V3t=s(aW);yar=r(V3t,"XLMRobertaXLForQuestionAnswering"),V3t.forEach(t),xar=r(RIe," (XLM-RoBERTa-XL model)"),RIe.forEach(t),$ar=i(X),sT=n(X,"LI",{});var PIe=s(sT);N2e=n(PIe,"STRONG",{});var X3t=s(N2e);kar=r(X3t,"xlnet"),X3t.forEach(t),Sar=r(PIe," \u2014 "),nW=n(PIe,"A",{href:!0});var z3t=s(nW);Rar=r(z3t,"XLNetForQuestionAnsweringSimple"),z3t.forEach(t),Par=r(PIe," (XLNet model)"),PIe.forEach(t),Bar=i(X),lT=n(X,"LI",{});var BIe=s(lT);q2e=n(BIe,"STRONG",{});var Q3t=s(q2e);Iar=r(Q3t,"yoso"),Q3t.forEach(t),Nar=r(BIe," \u2014 "),sW=n(BIe,"A",{href:!0});var W3t=s(sW);qar=r(W3t,"YosoForQuestionAnswering"),W3t.forEach(t),jar=r(BIe," (YOSO model)"),BIe.forEach(t),X.forEach(t),Dar=i(ua),iT=n(ua,"P",{});var IIe=s(iT);Gar=r(IIe,"The model is set in evaluation mode by default using "),j2e=n(IIe,"CODE",{});var H3t=s(j2e);Oar=r(H3t,"model.eval()"),H3t.forEach(t),Var=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D2e=n(IIe,"CODE",{});var U3t=s(D2e);Xar=r(U3t,"model.train()"),U3t.forEach(t),IIe.forEach(t),zar=i(ua),T(dT.$$.fragment,ua),ua.forEach(t),fl.forEach(t),$Xe=i(f),ud=n(f,"H2",{class:!0});var IQe=s(ud);cT=n(IQe,"A",{id:!0,class:!0,href:!0});var J3t=s(cT);G2e=n(J3t,"SPAN",{});var Y3t=s(G2e);T(AL.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),Qar=i(IQe),O2e=n(IQe,"SPAN",{});var K3t=s(O2e);War=r(K3t,"AutoModelForTableQuestionAnswering"),K3t.forEach(t),IQe.forEach(t),kXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(LL.$$.fragment,ml),Har=i(ml),bd=n(ml,"P",{});var Yre=s(bd);Uar=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lW=n(Yre,"A",{href:!0});var Z3t=s(lW);Jar=r(Z3t,"from_pretrained()"),Z3t.forEach(t),Yar=r(Yre," class method or the "),iW=n(Yre,"A",{href:!0});var e5t=s(iW);Kar=r(e5t,"from_config()"),e5t.forEach(t),Zar=r(Yre,` class
method.`),Yre.forEach(t),enr=i(ml),yL=n(ml,"P",{});var NQe=s(yL);onr=r(NQe,"This class cannot be instantiated directly using "),V2e=n(NQe,"CODE",{});var o5t=s(V2e);rnr=r(o5t,"__init__()"),o5t.forEach(t),tnr=r(NQe," (throws an error)."),NQe.forEach(t),anr=i(ml),bt=n(ml,"DIV",{class:!0});var yw=s(bt);T(xL.$$.fragment,yw),nnr=i(yw),X2e=n(yw,"P",{});var r5t=s(X2e);snr=r(r5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r5t.forEach(t),lnr=i(yw),vd=n(yw,"P",{});var Kre=s(vd);inr=r(Kre,`Note:
Loading a model from its configuration file does `),z2e=n(Kre,"STRONG",{});var t5t=s(z2e);dnr=r(t5t,"not"),t5t.forEach(t),cnr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(Kre,"A",{href:!0});var a5t=s(dW);fnr=r(a5t,"from_pretrained()"),a5t.forEach(t),mnr=r(Kre," to load the model weights."),Kre.forEach(t),gnr=i(yw),T(fT.$$.fragment,yw),yw.forEach(t),hnr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T($L.$$.fragment,ba),pnr=i(ba),Q2e=n(ba,"P",{});var n5t=s(Q2e);_nr=r(n5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),n5t.forEach(t),unr=i(ba),Qa=n(ba,"P",{});var xw=s(Qa);bnr=r(xw,"The model class to instantiate is selected based on the "),W2e=n(xw,"CODE",{});var s5t=s(W2e);vnr=r(s5t,"model_type"),s5t.forEach(t),Fnr=r(xw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(xw,"CODE",{});var l5t=s(H2e);Tnr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Mnr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(xw,"CODE",{});var i5t=s(U2e);Enr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),Cnr=r(xw,":"),xw.forEach(t),wnr=i(ba),J2e=n(ba,"UL",{});var d5t=s(J2e);mT=n(d5t,"LI",{});var NIe=s(mT);Y2e=n(NIe,"STRONG",{});var c5t=s(Y2e);Anr=r(c5t,"tapas"),c5t.forEach(t),Lnr=r(NIe," \u2014 "),cW=n(NIe,"A",{href:!0});var f5t=s(cW);ynr=r(f5t,"TapasForQuestionAnswering"),f5t.forEach(t),xnr=r(NIe," (TAPAS model)"),NIe.forEach(t),d5t.forEach(t),$nr=i(ba),gT=n(ba,"P",{});var qIe=s(gT);knr=r(qIe,"The model is set in evaluation mode by default using "),K2e=n(qIe,"CODE",{});var m5t=s(K2e);Snr=r(m5t,"model.eval()"),m5t.forEach(t),Rnr=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z2e=n(qIe,"CODE",{});var g5t=s(Z2e);Pnr=r(g5t,"model.train()"),g5t.forEach(t),qIe.forEach(t),Bnr=i(ba),T(hT.$$.fragment,ba),ba.forEach(t),ml.forEach(t),SXe=i(f),Fd=n(f,"H2",{class:!0});var qQe=s(Fd);pT=n(qQe,"A",{id:!0,class:!0,href:!0});var h5t=s(pT);ebe=n(h5t,"SPAN",{});var p5t=s(ebe);T(kL.$$.fragment,p5t),p5t.forEach(t),h5t.forEach(t),Inr=i(qQe),obe=n(qQe,"SPAN",{});var _5t=s(obe);Nnr=r(_5t,"AutoModelForImageClassification"),_5t.forEach(t),qQe.forEach(t),RXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(SL.$$.fragment,gl),qnr=i(gl),Td=n(gl,"P",{});var Zre=s(Td);jnr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fW=n(Zre,"A",{href:!0});var u5t=s(fW);Dnr=r(u5t,"from_pretrained()"),u5t.forEach(t),Gnr=r(Zre," class method or the "),mW=n(Zre,"A",{href:!0});var b5t=s(mW);Onr=r(b5t,"from_config()"),b5t.forEach(t),Vnr=r(Zre,` class
method.`),Zre.forEach(t),Xnr=i(gl),RL=n(gl,"P",{});var jQe=s(RL);znr=r(jQe,"This class cannot be instantiated directly using "),rbe=n(jQe,"CODE",{});var v5t=s(rbe);Qnr=r(v5t,"__init__()"),v5t.forEach(t),Wnr=r(jQe," (throws an error)."),jQe.forEach(t),Hnr=i(gl),vt=n(gl,"DIV",{class:!0});var $w=s(vt);T(PL.$$.fragment,$w),Unr=i($w),tbe=n($w,"P",{});var F5t=s(tbe);Jnr=r(F5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F5t.forEach(t),Ynr=i($w),Md=n($w,"P",{});var ete=s(Md);Knr=r(ete,`Note:
Loading a model from its configuration file does `),abe=n(ete,"STRONG",{});var T5t=s(abe);Znr=r(T5t,"not"),T5t.forEach(t),esr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(ete,"A",{href:!0});var M5t=s(gW);osr=r(M5t,"from_pretrained()"),M5t.forEach(t),rsr=r(ete," to load the model weights."),ete.forEach(t),tsr=i($w),T(_T.$$.fragment,$w),$w.forEach(t),asr=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(BL.$$.fragment,va),nsr=i(va),nbe=n(va,"P",{});var E5t=s(nbe);ssr=r(E5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E5t.forEach(t),lsr=i(va),Wa=n(va,"P",{});var kw=s(Wa);isr=r(kw,"The model class to instantiate is selected based on the "),sbe=n(kw,"CODE",{});var C5t=s(sbe);dsr=r(C5t,"model_type"),C5t.forEach(t),csr=r(kw,` property of the config object (either
passed as an argument or loaded from `),lbe=n(kw,"CODE",{});var w5t=s(lbe);fsr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),msr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(kw,"CODE",{});var A5t=s(ibe);gsr=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),hsr=r(kw,":"),kw.forEach(t),psr=i(va),ve=n(va,"UL",{});var Te=s(ve);uT=n(Te,"LI",{});var jIe=s(uT);dbe=n(jIe,"STRONG",{});var L5t=s(dbe);_sr=r(L5t,"beit"),L5t.forEach(t),usr=r(jIe," \u2014 "),hW=n(jIe,"A",{href:!0});var y5t=s(hW);bsr=r(y5t,"BeitForImageClassification"),y5t.forEach(t),vsr=r(jIe," (BEiT model)"),jIe.forEach(t),Fsr=i(Te),bT=n(Te,"LI",{});var DIe=s(bT);cbe=n(DIe,"STRONG",{});var x5t=s(cbe);Tsr=r(x5t,"convnext"),x5t.forEach(t),Msr=r(DIe," \u2014 "),pW=n(DIe,"A",{href:!0});var $5t=s(pW);Esr=r($5t,"ConvNextForImageClassification"),$5t.forEach(t),Csr=r(DIe," (ConvNeXT model)"),DIe.forEach(t),wsr=i(Te),vT=n(Te,"LI",{});var GIe=s(vT);fbe=n(GIe,"STRONG",{});var k5t=s(fbe);Asr=r(k5t,"cvt"),k5t.forEach(t),Lsr=r(GIe," \u2014 "),_W=n(GIe,"A",{href:!0});var S5t=s(_W);ysr=r(S5t,"CvtForImageClassification"),S5t.forEach(t),xsr=r(GIe," (CvT model)"),GIe.forEach(t),$sr=i(Te),FT=n(Te,"LI",{});var OIe=s(FT);mbe=n(OIe,"STRONG",{});var R5t=s(mbe);ksr=r(R5t,"data2vec-vision"),R5t.forEach(t),Ssr=r(OIe," \u2014 "),uW=n(OIe,"A",{href:!0});var P5t=s(uW);Rsr=r(P5t,"Data2VecVisionForImageClassification"),P5t.forEach(t),Psr=r(OIe," (Data2VecVision model)"),OIe.forEach(t),Bsr=i(Te),Hs=n(Te,"LI",{});var kS=s(Hs);gbe=n(kS,"STRONG",{});var B5t=s(gbe);Isr=r(B5t,"deit"),B5t.forEach(t),Nsr=r(kS," \u2014 "),bW=n(kS,"A",{href:!0});var I5t=s(bW);qsr=r(I5t,"DeiTForImageClassification"),I5t.forEach(t),jsr=r(kS," or "),vW=n(kS,"A",{href:!0});var N5t=s(vW);Dsr=r(N5t,"DeiTForImageClassificationWithTeacher"),N5t.forEach(t),Gsr=r(kS," (DeiT model)"),kS.forEach(t),Osr=i(Te),TT=n(Te,"LI",{});var VIe=s(TT);hbe=n(VIe,"STRONG",{});var q5t=s(hbe);Vsr=r(q5t,"imagegpt"),q5t.forEach(t),Xsr=r(VIe," \u2014 "),FW=n(VIe,"A",{href:!0});var j5t=s(FW);zsr=r(j5t,"ImageGPTForImageClassification"),j5t.forEach(t),Qsr=r(VIe," (ImageGPT model)"),VIe.forEach(t),Wsr=i(Te),Us=n(Te,"LI",{});var SS=s(Us);pbe=n(SS,"STRONG",{});var D5t=s(pbe);Hsr=r(D5t,"levit"),D5t.forEach(t),Usr=r(SS," \u2014 "),TW=n(SS,"A",{href:!0});var G5t=s(TW);Jsr=r(G5t,"LevitForImageClassification"),G5t.forEach(t),Ysr=r(SS," or "),MW=n(SS,"A",{href:!0});var O5t=s(MW);Ksr=r(O5t,"LevitForImageClassificationWithTeacher"),O5t.forEach(t),Zsr=r(SS," (LeViT model)"),SS.forEach(t),elr=i(Te),MT=n(Te,"LI",{});var XIe=s(MT);_be=n(XIe,"STRONG",{});var V5t=s(_be);olr=r(V5t,"mobilevit"),V5t.forEach(t),rlr=r(XIe," \u2014 "),EW=n(XIe,"A",{href:!0});var X5t=s(EW);tlr=r(X5t,"MobileViTForImageClassification"),X5t.forEach(t),alr=r(XIe," (MobileViT model)"),XIe.forEach(t),nlr=i(Te),Ft=n(Te,"LI",{});var Rf=s(Ft);ube=n(Rf,"STRONG",{});var z5t=s(ube);slr=r(z5t,"perceiver"),z5t.forEach(t),llr=r(Rf," \u2014 "),CW=n(Rf,"A",{href:!0});var Q5t=s(CW);ilr=r(Q5t,"PerceiverForImageClassificationLearned"),Q5t.forEach(t),dlr=r(Rf," or "),wW=n(Rf,"A",{href:!0});var W5t=s(wW);clr=r(W5t,"PerceiverForImageClassificationFourier"),W5t.forEach(t),flr=r(Rf," or "),AW=n(Rf,"A",{href:!0});var H5t=s(AW);mlr=r(H5t,"PerceiverForImageClassificationConvProcessing"),H5t.forEach(t),glr=r(Rf," (Perceiver model)"),Rf.forEach(t),hlr=i(Te),ET=n(Te,"LI",{});var zIe=s(ET);bbe=n(zIe,"STRONG",{});var U5t=s(bbe);plr=r(U5t,"poolformer"),U5t.forEach(t),_lr=r(zIe," \u2014 "),LW=n(zIe,"A",{href:!0});var J5t=s(LW);ulr=r(J5t,"PoolFormerForImageClassification"),J5t.forEach(t),blr=r(zIe," (PoolFormer model)"),zIe.forEach(t),vlr=i(Te),CT=n(Te,"LI",{});var QIe=s(CT);vbe=n(QIe,"STRONG",{});var Y5t=s(vbe);Flr=r(Y5t,"regnet"),Y5t.forEach(t),Tlr=r(QIe," \u2014 "),yW=n(QIe,"A",{href:!0});var K5t=s(yW);Mlr=r(K5t,"RegNetForImageClassification"),K5t.forEach(t),Elr=r(QIe," (RegNet model)"),QIe.forEach(t),Clr=i(Te),wT=n(Te,"LI",{});var WIe=s(wT);Fbe=n(WIe,"STRONG",{});var Z5t=s(Fbe);wlr=r(Z5t,"resnet"),Z5t.forEach(t),Alr=r(WIe," \u2014 "),xW=n(WIe,"A",{href:!0});var e0t=s(xW);Llr=r(e0t,"ResNetForImageClassification"),e0t.forEach(t),ylr=r(WIe," (ResNet model)"),WIe.forEach(t),xlr=i(Te),AT=n(Te,"LI",{});var HIe=s(AT);Tbe=n(HIe,"STRONG",{});var o0t=s(Tbe);$lr=r(o0t,"segformer"),o0t.forEach(t),klr=r(HIe," \u2014 "),$W=n(HIe,"A",{href:!0});var r0t=s($W);Slr=r(r0t,"SegformerForImageClassification"),r0t.forEach(t),Rlr=r(HIe," (SegFormer model)"),HIe.forEach(t),Plr=i(Te),LT=n(Te,"LI",{});var UIe=s(LT);Mbe=n(UIe,"STRONG",{});var t0t=s(Mbe);Blr=r(t0t,"swin"),t0t.forEach(t),Ilr=r(UIe," \u2014 "),kW=n(UIe,"A",{href:!0});var a0t=s(kW);Nlr=r(a0t,"SwinForImageClassification"),a0t.forEach(t),qlr=r(UIe," (Swin Transformer model)"),UIe.forEach(t),jlr=i(Te),yT=n(Te,"LI",{});var JIe=s(yT);Ebe=n(JIe,"STRONG",{});var n0t=s(Ebe);Dlr=r(n0t,"van"),n0t.forEach(t),Glr=r(JIe," \u2014 "),SW=n(JIe,"A",{href:!0});var s0t=s(SW);Olr=r(s0t,"VanForImageClassification"),s0t.forEach(t),Vlr=r(JIe," (VAN model)"),JIe.forEach(t),Xlr=i(Te),xT=n(Te,"LI",{});var YIe=s(xT);Cbe=n(YIe,"STRONG",{});var l0t=s(Cbe);zlr=r(l0t,"vit"),l0t.forEach(t),Qlr=r(YIe," \u2014 "),RW=n(YIe,"A",{href:!0});var i0t=s(RW);Wlr=r(i0t,"ViTForImageClassification"),i0t.forEach(t),Hlr=r(YIe," (ViT model)"),YIe.forEach(t),Te.forEach(t),Ulr=i(va),$T=n(va,"P",{});var KIe=s($T);Jlr=r(KIe,"The model is set in evaluation mode by default using "),wbe=n(KIe,"CODE",{});var d0t=s(wbe);Ylr=r(d0t,"model.eval()"),d0t.forEach(t),Klr=r(KIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(KIe,"CODE",{});var c0t=s(Abe);Zlr=r(c0t,"model.train()"),c0t.forEach(t),KIe.forEach(t),eir=i(va),T(kT.$$.fragment,va),va.forEach(t),gl.forEach(t),PXe=i(f),Ed=n(f,"H2",{class:!0});var DQe=s(Ed);ST=n(DQe,"A",{id:!0,class:!0,href:!0});var f0t=s(ST);Lbe=n(f0t,"SPAN",{});var m0t=s(Lbe);T(IL.$$.fragment,m0t),m0t.forEach(t),f0t.forEach(t),oir=i(DQe),ybe=n(DQe,"SPAN",{});var g0t=s(ybe);rir=r(g0t,"AutoModelForVision2Seq"),g0t.forEach(t),DQe.forEach(t),BXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(NL.$$.fragment,hl),tir=i(hl),Cd=n(hl,"P",{});var ote=s(Cd);air=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PW=n(ote,"A",{href:!0});var h0t=s(PW);nir=r(h0t,"from_pretrained()"),h0t.forEach(t),sir=r(ote," class method or the "),BW=n(ote,"A",{href:!0});var p0t=s(BW);lir=r(p0t,"from_config()"),p0t.forEach(t),iir=r(ote,` class
method.`),ote.forEach(t),dir=i(hl),qL=n(hl,"P",{});var GQe=s(qL);cir=r(GQe,"This class cannot be instantiated directly using "),xbe=n(GQe,"CODE",{});var _0t=s(xbe);fir=r(_0t,"__init__()"),_0t.forEach(t),mir=r(GQe," (throws an error)."),GQe.forEach(t),gir=i(hl),Tt=n(hl,"DIV",{class:!0});var Sw=s(Tt);T(jL.$$.fragment,Sw),hir=i(Sw),$be=n(Sw,"P",{});var u0t=s($be);pir=r(u0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u0t.forEach(t),_ir=i(Sw),wd=n(Sw,"P",{});var rte=s(wd);uir=r(rte,`Note:
Loading a model from its configuration file does `),kbe=n(rte,"STRONG",{});var b0t=s(kbe);bir=r(b0t,"not"),b0t.forEach(t),vir=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(rte,"A",{href:!0});var v0t=s(IW);Fir=r(v0t,"from_pretrained()"),v0t.forEach(t),Tir=r(rte," to load the model weights."),rte.forEach(t),Mir=i(Sw),T(RT.$$.fragment,Sw),Sw.forEach(t),Eir=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(DL.$$.fragment,Fa),Cir=i(Fa),Sbe=n(Fa,"P",{});var F0t=s(Sbe);wir=r(F0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),F0t.forEach(t),Air=i(Fa),Ha=n(Fa,"P",{});var Rw=s(Ha);Lir=r(Rw,"The model class to instantiate is selected based on the "),Rbe=n(Rw,"CODE",{});var T0t=s(Rbe);yir=r(T0t,"model_type"),T0t.forEach(t),xir=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(Rw,"CODE",{});var M0t=s(Pbe);$ir=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),kir=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(Rw,"CODE",{});var E0t=s(Bbe);Sir=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),Rir=r(Rw,":"),Rw.forEach(t),Pir=i(Fa),Ibe=n(Fa,"UL",{});var C0t=s(Ibe);PT=n(C0t,"LI",{});var ZIe=s(PT);Nbe=n(ZIe,"STRONG",{});var w0t=s(Nbe);Bir=r(w0t,"vision-encoder-decoder"),w0t.forEach(t),Iir=r(ZIe," \u2014 "),NW=n(ZIe,"A",{href:!0});var A0t=s(NW);Nir=r(A0t,"VisionEncoderDecoderModel"),A0t.forEach(t),qir=r(ZIe," (Vision Encoder decoder model)"),ZIe.forEach(t),C0t.forEach(t),jir=i(Fa),BT=n(Fa,"P",{});var eNe=s(BT);Dir=r(eNe,"The model is set in evaluation mode by default using "),qbe=n(eNe,"CODE",{});var L0t=s(qbe);Gir=r(L0t,"model.eval()"),L0t.forEach(t),Oir=r(eNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(eNe,"CODE",{});var y0t=s(jbe);Vir=r(y0t,"model.train()"),y0t.forEach(t),eNe.forEach(t),Xir=i(Fa),T(IT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),IXe=i(f),Ad=n(f,"H2",{class:!0});var OQe=s(Ad);NT=n(OQe,"A",{id:!0,class:!0,href:!0});var x0t=s(NT);Dbe=n(x0t,"SPAN",{});var $0t=s(Dbe);T(GL.$$.fragment,$0t),$0t.forEach(t),x0t.forEach(t),zir=i(OQe),Gbe=n(OQe,"SPAN",{});var k0t=s(Gbe);Qir=r(k0t,"AutoModelForVisualQuestionAnswering"),k0t.forEach(t),OQe.forEach(t),NXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(OL.$$.fragment,pl),Wir=i(pl),Ld=n(pl,"P",{});var tte=s(Ld);Hir=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),qW=n(tte,"A",{href:!0});var S0t=s(qW);Uir=r(S0t,"from_pretrained()"),S0t.forEach(t),Jir=r(tte," class method or the "),jW=n(tte,"A",{href:!0});var R0t=s(jW);Yir=r(R0t,"from_config()"),R0t.forEach(t),Kir=r(tte,` class
method.`),tte.forEach(t),Zir=i(pl),VL=n(pl,"P",{});var VQe=s(VL);edr=r(VQe,"This class cannot be instantiated directly using "),Obe=n(VQe,"CODE",{});var P0t=s(Obe);odr=r(P0t,"__init__()"),P0t.forEach(t),rdr=r(VQe," (throws an error)."),VQe.forEach(t),tdr=i(pl),Mt=n(pl,"DIV",{class:!0});var Pw=s(Mt);T(XL.$$.fragment,Pw),adr=i(Pw),Vbe=n(Pw,"P",{});var B0t=s(Vbe);ndr=r(B0t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),B0t.forEach(t),sdr=i(Pw),yd=n(Pw,"P",{});var ate=s(yd);ldr=r(ate,`Note:
Loading a model from its configuration file does `),Xbe=n(ate,"STRONG",{});var I0t=s(Xbe);idr=r(I0t,"not"),I0t.forEach(t),ddr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(ate,"A",{href:!0});var N0t=s(DW);cdr=r(N0t,"from_pretrained()"),N0t.forEach(t),fdr=r(ate," to load the model weights."),ate.forEach(t),mdr=i(Pw),T(qT.$$.fragment,Pw),Pw.forEach(t),gdr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(zL.$$.fragment,Ta),hdr=i(Ta),zbe=n(Ta,"P",{});var q0t=s(zbe);pdr=r(q0t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),q0t.forEach(t),_dr=i(Ta),Ua=n(Ta,"P",{});var Bw=s(Ua);udr=r(Bw,"The model class to instantiate is selected based on the "),Qbe=n(Bw,"CODE",{});var j0t=s(Qbe);bdr=r(j0t,"model_type"),j0t.forEach(t),vdr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(Bw,"CODE",{});var D0t=s(Wbe);Fdr=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),Tdr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(Bw,"CODE",{});var G0t=s(Hbe);Mdr=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),Edr=r(Bw,":"),Bw.forEach(t),Cdr=i(Ta),Ube=n(Ta,"UL",{});var O0t=s(Ube);jT=n(O0t,"LI",{});var oNe=s(jT);Jbe=n(oNe,"STRONG",{});var V0t=s(Jbe);wdr=r(V0t,"vilt"),V0t.forEach(t),Adr=r(oNe," \u2014 "),GW=n(oNe,"A",{href:!0});var X0t=s(GW);Ldr=r(X0t,"ViltForQuestionAnswering"),X0t.forEach(t),ydr=r(oNe," (ViLT model)"),oNe.forEach(t),O0t.forEach(t),xdr=i(Ta),DT=n(Ta,"P",{});var rNe=s(DT);$dr=r(rNe,"The model is set in evaluation mode by default using "),Ybe=n(rNe,"CODE",{});var z0t=s(Ybe);kdr=r(z0t,"model.eval()"),z0t.forEach(t),Sdr=r(rNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=n(rNe,"CODE",{});var Q0t=s(Kbe);Rdr=r(Q0t,"model.train()"),Q0t.forEach(t),rNe.forEach(t),Pdr=i(Ta),T(GT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),qXe=i(f),xd=n(f,"H2",{class:!0});var XQe=s(xd);OT=n(XQe,"A",{id:!0,class:!0,href:!0});var W0t=s(OT);Zbe=n(W0t,"SPAN",{});var H0t=s(Zbe);T(QL.$$.fragment,H0t),H0t.forEach(t),W0t.forEach(t),Bdr=i(XQe),eve=n(XQe,"SPAN",{});var U0t=s(eve);Idr=r(U0t,"AutoModelForAudioClassification"),U0t.forEach(t),XQe.forEach(t),jXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(WL.$$.fragment,_l),Ndr=i(_l),$d=n(_l,"P",{});var nte=s($d);qdr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OW=n(nte,"A",{href:!0});var J0t=s(OW);jdr=r(J0t,"from_pretrained()"),J0t.forEach(t),Ddr=r(nte," class method or the "),VW=n(nte,"A",{href:!0});var Y0t=s(VW);Gdr=r(Y0t,"from_config()"),Y0t.forEach(t),Odr=r(nte,` class
method.`),nte.forEach(t),Vdr=i(_l),HL=n(_l,"P",{});var zQe=s(HL);Xdr=r(zQe,"This class cannot be instantiated directly using "),ove=n(zQe,"CODE",{});var K0t=s(ove);zdr=r(K0t,"__init__()"),K0t.forEach(t),Qdr=r(zQe," (throws an error)."),zQe.forEach(t),Wdr=i(_l),Et=n(_l,"DIV",{class:!0});var Iw=s(Et);T(UL.$$.fragment,Iw),Hdr=i(Iw),rve=n(Iw,"P",{});var Z0t=s(rve);Udr=r(Z0t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Z0t.forEach(t),Jdr=i(Iw),kd=n(Iw,"P",{});var ste=s(kd);Ydr=r(ste,`Note:
Loading a model from its configuration file does `),tve=n(ste,"STRONG",{});var ewt=s(tve);Kdr=r(ewt,"not"),ewt.forEach(t),Zdr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(ste,"A",{href:!0});var owt=s(XW);ecr=r(owt,"from_pretrained()"),owt.forEach(t),ocr=r(ste," to load the model weights."),ste.forEach(t),rcr=i(Iw),T(VT.$$.fragment,Iw),Iw.forEach(t),tcr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(JL.$$.fragment,Ma),acr=i(Ma),ave=n(Ma,"P",{});var rwt=s(ave);ncr=r(rwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rwt.forEach(t),scr=i(Ma),Ja=n(Ma,"P",{});var Nw=s(Ja);lcr=r(Nw,"The model class to instantiate is selected based on the "),nve=n(Nw,"CODE",{});var twt=s(nve);icr=r(twt,"model_type"),twt.forEach(t),dcr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),sve=n(Nw,"CODE",{});var awt=s(sve);ccr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),fcr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(Nw,"CODE",{});var nwt=s(lve);mcr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),gcr=r(Nw,":"),Nw.forEach(t),hcr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);XT=n(ze,"LI",{});var tNe=s(XT);ive=n(tNe,"STRONG",{});var swt=s(ive);pcr=r(swt,"data2vec-audio"),swt.forEach(t),_cr=r(tNe," \u2014 "),zW=n(tNe,"A",{href:!0});var lwt=s(zW);ucr=r(lwt,"Data2VecAudioForSequenceClassification"),lwt.forEach(t),bcr=r(tNe," (Data2VecAudio model)"),tNe.forEach(t),vcr=i(ze),zT=n(ze,"LI",{});var aNe=s(zT);dve=n(aNe,"STRONG",{});var iwt=s(dve);Fcr=r(iwt,"hubert"),iwt.forEach(t),Tcr=r(aNe," \u2014 "),QW=n(aNe,"A",{href:!0});var dwt=s(QW);Mcr=r(dwt,"HubertForSequenceClassification"),dwt.forEach(t),Ecr=r(aNe," (Hubert model)"),aNe.forEach(t),Ccr=i(ze),QT=n(ze,"LI",{});var nNe=s(QT);cve=n(nNe,"STRONG",{});var cwt=s(cve);wcr=r(cwt,"sew"),cwt.forEach(t),Acr=r(nNe," \u2014 "),WW=n(nNe,"A",{href:!0});var fwt=s(WW);Lcr=r(fwt,"SEWForSequenceClassification"),fwt.forEach(t),ycr=r(nNe," (SEW model)"),nNe.forEach(t),xcr=i(ze),WT=n(ze,"LI",{});var sNe=s(WT);fve=n(sNe,"STRONG",{});var mwt=s(fve);$cr=r(mwt,"sew-d"),mwt.forEach(t),kcr=r(sNe," \u2014 "),HW=n(sNe,"A",{href:!0});var gwt=s(HW);Scr=r(gwt,"SEWDForSequenceClassification"),gwt.forEach(t),Rcr=r(sNe," (SEW-D model)"),sNe.forEach(t),Pcr=i(ze),HT=n(ze,"LI",{});var lNe=s(HT);mve=n(lNe,"STRONG",{});var hwt=s(mve);Bcr=r(hwt,"unispeech"),hwt.forEach(t),Icr=r(lNe," \u2014 "),UW=n(lNe,"A",{href:!0});var pwt=s(UW);Ncr=r(pwt,"UniSpeechForSequenceClassification"),pwt.forEach(t),qcr=r(lNe," (UniSpeech model)"),lNe.forEach(t),jcr=i(ze),UT=n(ze,"LI",{});var iNe=s(UT);gve=n(iNe,"STRONG",{});var _wt=s(gve);Dcr=r(_wt,"unispeech-sat"),_wt.forEach(t),Gcr=r(iNe," \u2014 "),JW=n(iNe,"A",{href:!0});var uwt=s(JW);Ocr=r(uwt,"UniSpeechSatForSequenceClassification"),uwt.forEach(t),Vcr=r(iNe," (UniSpeechSat model)"),iNe.forEach(t),Xcr=i(ze),JT=n(ze,"LI",{});var dNe=s(JT);hve=n(dNe,"STRONG",{});var bwt=s(hve);zcr=r(bwt,"wav2vec2"),bwt.forEach(t),Qcr=r(dNe," \u2014 "),YW=n(dNe,"A",{href:!0});var vwt=s(YW);Wcr=r(vwt,"Wav2Vec2ForSequenceClassification"),vwt.forEach(t),Hcr=r(dNe," (Wav2Vec2 model)"),dNe.forEach(t),Ucr=i(ze),YT=n(ze,"LI",{});var cNe=s(YT);pve=n(cNe,"STRONG",{});var Fwt=s(pve);Jcr=r(Fwt,"wav2vec2-conformer"),Fwt.forEach(t),Ycr=r(cNe," \u2014 "),KW=n(cNe,"A",{href:!0});var Twt=s(KW);Kcr=r(Twt,"Wav2Vec2ConformerForSequenceClassification"),Twt.forEach(t),Zcr=r(cNe," (Wav2Vec2-Conformer model)"),cNe.forEach(t),efr=i(ze),KT=n(ze,"LI",{});var fNe=s(KT);_ve=n(fNe,"STRONG",{});var Mwt=s(_ve);ofr=r(Mwt,"wavlm"),Mwt.forEach(t),rfr=r(fNe," \u2014 "),ZW=n(fNe,"A",{href:!0});var Ewt=s(ZW);tfr=r(Ewt,"WavLMForSequenceClassification"),Ewt.forEach(t),afr=r(fNe," (WavLM model)"),fNe.forEach(t),ze.forEach(t),nfr=i(Ma),ZT=n(Ma,"P",{});var mNe=s(ZT);sfr=r(mNe,"The model is set in evaluation mode by default using "),uve=n(mNe,"CODE",{});var Cwt=s(uve);lfr=r(Cwt,"model.eval()"),Cwt.forEach(t),ifr=r(mNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bve=n(mNe,"CODE",{});var wwt=s(bve);dfr=r(wwt,"model.train()"),wwt.forEach(t),mNe.forEach(t),cfr=i(Ma),T(e8.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),DXe=i(f),Sd=n(f,"H2",{class:!0});var QQe=s(Sd);o8=n(QQe,"A",{id:!0,class:!0,href:!0});var Awt=s(o8);vve=n(Awt,"SPAN",{});var Lwt=s(vve);T(YL.$$.fragment,Lwt),Lwt.forEach(t),Awt.forEach(t),ffr=i(QQe),Fve=n(QQe,"SPAN",{});var ywt=s(Fve);mfr=r(ywt,"AutoModelForAudioFrameClassification"),ywt.forEach(t),QQe.forEach(t),GXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(KL.$$.fragment,ul),gfr=i(ul),Rd=n(ul,"P",{});var lte=s(Rd);hfr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),eH=n(lte,"A",{href:!0});var xwt=s(eH);pfr=r(xwt,"from_pretrained()"),xwt.forEach(t),_fr=r(lte," class method or the "),oH=n(lte,"A",{href:!0});var $wt=s(oH);ufr=r($wt,"from_config()"),$wt.forEach(t),bfr=r(lte,` class
method.`),lte.forEach(t),vfr=i(ul),ZL=n(ul,"P",{});var WQe=s(ZL);Ffr=r(WQe,"This class cannot be instantiated directly using "),Tve=n(WQe,"CODE",{});var kwt=s(Tve);Tfr=r(kwt,"__init__()"),kwt.forEach(t),Mfr=r(WQe," (throws an error)."),WQe.forEach(t),Efr=i(ul),Ct=n(ul,"DIV",{class:!0});var qw=s(Ct);T(ey.$$.fragment,qw),Cfr=i(qw),Mve=n(qw,"P",{});var Swt=s(Mve);wfr=r(Swt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Swt.forEach(t),Afr=i(qw),Pd=n(qw,"P",{});var ite=s(Pd);Lfr=r(ite,`Note:
Loading a model from its configuration file does `),Eve=n(ite,"STRONG",{});var Rwt=s(Eve);yfr=r(Rwt,"not"),Rwt.forEach(t),xfr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(ite,"A",{href:!0});var Pwt=s(rH);$fr=r(Pwt,"from_pretrained()"),Pwt.forEach(t),kfr=r(ite," to load the model weights."),ite.forEach(t),Sfr=i(qw),T(r8.$$.fragment,qw),qw.forEach(t),Rfr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(oy.$$.fragment,Ea),Pfr=i(Ea),Cve=n(Ea,"P",{});var Bwt=s(Cve);Bfr=r(Bwt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Bwt.forEach(t),Ifr=i(Ea),Ya=n(Ea,"P",{});var jw=s(Ya);Nfr=r(jw,"The model class to instantiate is selected based on the "),wve=n(jw,"CODE",{});var Iwt=s(wve);qfr=r(Iwt,"model_type"),Iwt.forEach(t),jfr=r(jw,` property of the config object (either
passed as an argument or loaded from `),Ave=n(jw,"CODE",{});var Nwt=s(Ave);Dfr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),Gfr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(jw,"CODE",{});var qwt=s(Lve);Ofr=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),Vfr=r(jw,":"),jw.forEach(t),Xfr=i(Ea),rt=n(Ea,"UL",{});var bl=s(rt);t8=n(bl,"LI",{});var gNe=s(t8);yve=n(gNe,"STRONG",{});var jwt=s(yve);zfr=r(jwt,"data2vec-audio"),jwt.forEach(t),Qfr=r(gNe," \u2014 "),tH=n(gNe,"A",{href:!0});var Dwt=s(tH);Wfr=r(Dwt,"Data2VecAudioForAudioFrameClassification"),Dwt.forEach(t),Hfr=r(gNe," (Data2VecAudio model)"),gNe.forEach(t),Ufr=i(bl),a8=n(bl,"LI",{});var hNe=s(a8);xve=n(hNe,"STRONG",{});var Gwt=s(xve);Jfr=r(Gwt,"unispeech-sat"),Gwt.forEach(t),Yfr=r(hNe," \u2014 "),aH=n(hNe,"A",{href:!0});var Owt=s(aH);Kfr=r(Owt,"UniSpeechSatForAudioFrameClassification"),Owt.forEach(t),Zfr=r(hNe," (UniSpeechSat model)"),hNe.forEach(t),emr=i(bl),n8=n(bl,"LI",{});var pNe=s(n8);$ve=n(pNe,"STRONG",{});var Vwt=s($ve);omr=r(Vwt,"wav2vec2"),Vwt.forEach(t),rmr=r(pNe," \u2014 "),nH=n(pNe,"A",{href:!0});var Xwt=s(nH);tmr=r(Xwt,"Wav2Vec2ForAudioFrameClassification"),Xwt.forEach(t),amr=r(pNe," (Wav2Vec2 model)"),pNe.forEach(t),nmr=i(bl),s8=n(bl,"LI",{});var _Ne=s(s8);kve=n(_Ne,"STRONG",{});var zwt=s(kve);smr=r(zwt,"wav2vec2-conformer"),zwt.forEach(t),lmr=r(_Ne," \u2014 "),sH=n(_Ne,"A",{href:!0});var Qwt=s(sH);imr=r(Qwt,"Wav2Vec2ConformerForAudioFrameClassification"),Qwt.forEach(t),dmr=r(_Ne," (Wav2Vec2-Conformer model)"),_Ne.forEach(t),cmr=i(bl),l8=n(bl,"LI",{});var uNe=s(l8);Sve=n(uNe,"STRONG",{});var Wwt=s(Sve);fmr=r(Wwt,"wavlm"),Wwt.forEach(t),mmr=r(uNe," \u2014 "),lH=n(uNe,"A",{href:!0});var Hwt=s(lH);gmr=r(Hwt,"WavLMForAudioFrameClassification"),Hwt.forEach(t),hmr=r(uNe," (WavLM model)"),uNe.forEach(t),bl.forEach(t),pmr=i(Ea),i8=n(Ea,"P",{});var bNe=s(i8);_mr=r(bNe,"The model is set in evaluation mode by default using "),Rve=n(bNe,"CODE",{});var Uwt=s(Rve);umr=r(Uwt,"model.eval()"),Uwt.forEach(t),bmr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(bNe,"CODE",{});var Jwt=s(Pve);vmr=r(Jwt,"model.train()"),Jwt.forEach(t),bNe.forEach(t),Fmr=i(Ea),T(d8.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),OXe=i(f),Bd=n(f,"H2",{class:!0});var HQe=s(Bd);c8=n(HQe,"A",{id:!0,class:!0,href:!0});var Ywt=s(c8);Bve=n(Ywt,"SPAN",{});var Kwt=s(Bve);T(ry.$$.fragment,Kwt),Kwt.forEach(t),Ywt.forEach(t),Tmr=i(HQe),Ive=n(HQe,"SPAN",{});var Zwt=s(Ive);Mmr=r(Zwt,"AutoModelForCTC"),Zwt.forEach(t),HQe.forEach(t),VXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(ty.$$.fragment,vl),Emr=i(vl),Id=n(vl,"P",{});var dte=s(Id);Cmr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iH=n(dte,"A",{href:!0});var eAt=s(iH);wmr=r(eAt,"from_pretrained()"),eAt.forEach(t),Amr=r(dte," class method or the "),dH=n(dte,"A",{href:!0});var oAt=s(dH);Lmr=r(oAt,"from_config()"),oAt.forEach(t),ymr=r(dte,` class
method.`),dte.forEach(t),xmr=i(vl),ay=n(vl,"P",{});var UQe=s(ay);$mr=r(UQe,"This class cannot be instantiated directly using "),Nve=n(UQe,"CODE",{});var rAt=s(Nve);kmr=r(rAt,"__init__()"),rAt.forEach(t),Smr=r(UQe," (throws an error)."),UQe.forEach(t),Rmr=i(vl),wt=n(vl,"DIV",{class:!0});var Dw=s(wt);T(ny.$$.fragment,Dw),Pmr=i(Dw),qve=n(Dw,"P",{});var tAt=s(qve);Bmr=r(tAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tAt.forEach(t),Imr=i(Dw),Nd=n(Dw,"P",{});var cte=s(Nd);Nmr=r(cte,`Note:
Loading a model from its configuration file does `),jve=n(cte,"STRONG",{});var aAt=s(jve);qmr=r(aAt,"not"),aAt.forEach(t),jmr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(cte,"A",{href:!0});var nAt=s(cH);Dmr=r(nAt,"from_pretrained()"),nAt.forEach(t),Gmr=r(cte," to load the model weights."),cte.forEach(t),Omr=i(Dw),T(f8.$$.fragment,Dw),Dw.forEach(t),Vmr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(sy.$$.fragment,Ca),Xmr=i(Ca),Dve=n(Ca,"P",{});var sAt=s(Dve);zmr=r(sAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),sAt.forEach(t),Qmr=i(Ca),Ka=n(Ca,"P",{});var Gw=s(Ka);Wmr=r(Gw,"The model class to instantiate is selected based on the "),Gve=n(Gw,"CODE",{});var lAt=s(Gve);Hmr=r(lAt,"model_type"),lAt.forEach(t),Umr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Ove=n(Gw,"CODE",{});var iAt=s(Ove);Jmr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),Ymr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(Gw,"CODE",{});var dAt=s(Vve);Kmr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),Zmr=r(Gw,":"),Gw.forEach(t),egr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);m8=n(Be,"LI",{});var vNe=s(m8);Xve=n(vNe,"STRONG",{});var cAt=s(Xve);ogr=r(cAt,"data2vec-audio"),cAt.forEach(t),rgr=r(vNe," \u2014 "),fH=n(vNe,"A",{href:!0});var fAt=s(fH);tgr=r(fAt,"Data2VecAudioForCTC"),fAt.forEach(t),agr=r(vNe," (Data2VecAudio model)"),vNe.forEach(t),ngr=i(Be),g8=n(Be,"LI",{});var FNe=s(g8);zve=n(FNe,"STRONG",{});var mAt=s(zve);sgr=r(mAt,"hubert"),mAt.forEach(t),lgr=r(FNe," \u2014 "),mH=n(FNe,"A",{href:!0});var gAt=s(mH);igr=r(gAt,"HubertForCTC"),gAt.forEach(t),dgr=r(FNe," (Hubert model)"),FNe.forEach(t),cgr=i(Be),h8=n(Be,"LI",{});var TNe=s(h8);Qve=n(TNe,"STRONG",{});var hAt=s(Qve);fgr=r(hAt,"mctct"),hAt.forEach(t),mgr=r(TNe," \u2014 "),gH=n(TNe,"A",{href:!0});var pAt=s(gH);ggr=r(pAt,"MCTCTForCTC"),pAt.forEach(t),hgr=r(TNe," (M-CTC-T model)"),TNe.forEach(t),pgr=i(Be),p8=n(Be,"LI",{});var MNe=s(p8);Wve=n(MNe,"STRONG",{});var _At=s(Wve);_gr=r(_At,"sew"),_At.forEach(t),ugr=r(MNe," \u2014 "),hH=n(MNe,"A",{href:!0});var uAt=s(hH);bgr=r(uAt,"SEWForCTC"),uAt.forEach(t),vgr=r(MNe," (SEW model)"),MNe.forEach(t),Fgr=i(Be),_8=n(Be,"LI",{});var ENe=s(_8);Hve=n(ENe,"STRONG",{});var bAt=s(Hve);Tgr=r(bAt,"sew-d"),bAt.forEach(t),Mgr=r(ENe," \u2014 "),pH=n(ENe,"A",{href:!0});var vAt=s(pH);Egr=r(vAt,"SEWDForCTC"),vAt.forEach(t),Cgr=r(ENe," (SEW-D model)"),ENe.forEach(t),wgr=i(Be),u8=n(Be,"LI",{});var CNe=s(u8);Uve=n(CNe,"STRONG",{});var FAt=s(Uve);Agr=r(FAt,"unispeech"),FAt.forEach(t),Lgr=r(CNe," \u2014 "),_H=n(CNe,"A",{href:!0});var TAt=s(_H);ygr=r(TAt,"UniSpeechForCTC"),TAt.forEach(t),xgr=r(CNe," (UniSpeech model)"),CNe.forEach(t),$gr=i(Be),b8=n(Be,"LI",{});var wNe=s(b8);Jve=n(wNe,"STRONG",{});var MAt=s(Jve);kgr=r(MAt,"unispeech-sat"),MAt.forEach(t),Sgr=r(wNe," \u2014 "),uH=n(wNe,"A",{href:!0});var EAt=s(uH);Rgr=r(EAt,"UniSpeechSatForCTC"),EAt.forEach(t),Pgr=r(wNe," (UniSpeechSat model)"),wNe.forEach(t),Bgr=i(Be),v8=n(Be,"LI",{});var ANe=s(v8);Yve=n(ANe,"STRONG",{});var CAt=s(Yve);Igr=r(CAt,"wav2vec2"),CAt.forEach(t),Ngr=r(ANe," \u2014 "),bH=n(ANe,"A",{href:!0});var wAt=s(bH);qgr=r(wAt,"Wav2Vec2ForCTC"),wAt.forEach(t),jgr=r(ANe," (Wav2Vec2 model)"),ANe.forEach(t),Dgr=i(Be),F8=n(Be,"LI",{});var LNe=s(F8);Kve=n(LNe,"STRONG",{});var AAt=s(Kve);Ggr=r(AAt,"wav2vec2-conformer"),AAt.forEach(t),Ogr=r(LNe," \u2014 "),vH=n(LNe,"A",{href:!0});var LAt=s(vH);Vgr=r(LAt,"Wav2Vec2ConformerForCTC"),LAt.forEach(t),Xgr=r(LNe," (Wav2Vec2-Conformer model)"),LNe.forEach(t),zgr=i(Be),T8=n(Be,"LI",{});var yNe=s(T8);Zve=n(yNe,"STRONG",{});var yAt=s(Zve);Qgr=r(yAt,"wavlm"),yAt.forEach(t),Wgr=r(yNe," \u2014 "),FH=n(yNe,"A",{href:!0});var xAt=s(FH);Hgr=r(xAt,"WavLMForCTC"),xAt.forEach(t),Ugr=r(yNe," (WavLM model)"),yNe.forEach(t),Be.forEach(t),Jgr=i(Ca),M8=n(Ca,"P",{});var xNe=s(M8);Ygr=r(xNe,"The model is set in evaluation mode by default using "),eFe=n(xNe,"CODE",{});var $At=s(eFe);Kgr=r($At,"model.eval()"),$At.forEach(t),Zgr=r(xNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=n(xNe,"CODE",{});var kAt=s(oFe);ehr=r(kAt,"model.train()"),kAt.forEach(t),xNe.forEach(t),ohr=i(Ca),T(E8.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),XXe=i(f),qd=n(f,"H2",{class:!0});var JQe=s(qd);C8=n(JQe,"A",{id:!0,class:!0,href:!0});var SAt=s(C8);rFe=n(SAt,"SPAN",{});var RAt=s(rFe);T(ly.$$.fragment,RAt),RAt.forEach(t),SAt.forEach(t),rhr=i(JQe),tFe=n(JQe,"SPAN",{});var PAt=s(tFe);thr=r(PAt,"AutoModelForSpeechSeq2Seq"),PAt.forEach(t),JQe.forEach(t),zXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(iy.$$.fragment,Fl),ahr=i(Fl),jd=n(Fl,"P",{});var fte=s(jd);nhr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=n(fte,"A",{href:!0});var BAt=s(TH);shr=r(BAt,"from_pretrained()"),BAt.forEach(t),lhr=r(fte," class method or the "),MH=n(fte,"A",{href:!0});var IAt=s(MH);ihr=r(IAt,"from_config()"),IAt.forEach(t),dhr=r(fte,` class
method.`),fte.forEach(t),chr=i(Fl),dy=n(Fl,"P",{});var YQe=s(dy);fhr=r(YQe,"This class cannot be instantiated directly using "),aFe=n(YQe,"CODE",{});var NAt=s(aFe);mhr=r(NAt,"__init__()"),NAt.forEach(t),ghr=r(YQe," (throws an error)."),YQe.forEach(t),hhr=i(Fl),At=n(Fl,"DIV",{class:!0});var Ow=s(At);T(cy.$$.fragment,Ow),phr=i(Ow),nFe=n(Ow,"P",{});var qAt=s(nFe);_hr=r(qAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qAt.forEach(t),uhr=i(Ow),Dd=n(Ow,"P",{});var mte=s(Dd);bhr=r(mte,`Note:
Loading a model from its configuration file does `),sFe=n(mte,"STRONG",{});var jAt=s(sFe);vhr=r(jAt,"not"),jAt.forEach(t),Fhr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(mte,"A",{href:!0});var DAt=s(EH);Thr=r(DAt,"from_pretrained()"),DAt.forEach(t),Mhr=r(mte," to load the model weights."),mte.forEach(t),Ehr=i(Ow),T(w8.$$.fragment,Ow),Ow.forEach(t),Chr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(fy.$$.fragment,wa),whr=i(wa),lFe=n(wa,"P",{});var GAt=s(lFe);Ahr=r(GAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),GAt.forEach(t),Lhr=i(wa),Za=n(wa,"P",{});var Vw=s(Za);yhr=r(Vw,"The model class to instantiate is selected based on the "),iFe=n(Vw,"CODE",{});var OAt=s(iFe);xhr=r(OAt,"model_type"),OAt.forEach(t),$hr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),dFe=n(Vw,"CODE",{});var VAt=s(dFe);khr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),Shr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(Vw,"CODE",{});var XAt=s(cFe);Rhr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),Phr=r(Vw,":"),Vw.forEach(t),Bhr=i(wa),my=n(wa,"UL",{});var KQe=s(my);A8=n(KQe,"LI",{});var $Ne=s(A8);fFe=n($Ne,"STRONG",{});var zAt=s(fFe);Ihr=r(zAt,"speech-encoder-decoder"),zAt.forEach(t),Nhr=r($Ne," \u2014 "),CH=n($Ne,"A",{href:!0});var QAt=s(CH);qhr=r(QAt,"SpeechEncoderDecoderModel"),QAt.forEach(t),jhr=r($Ne," (Speech Encoder decoder model)"),$Ne.forEach(t),Dhr=i(KQe),L8=n(KQe,"LI",{});var kNe=s(L8);mFe=n(kNe,"STRONG",{});var WAt=s(mFe);Ghr=r(WAt,"speech_to_text"),WAt.forEach(t),Ohr=r(kNe," \u2014 "),wH=n(kNe,"A",{href:!0});var HAt=s(wH);Vhr=r(HAt,"Speech2TextForConditionalGeneration"),HAt.forEach(t),Xhr=r(kNe," (Speech2Text model)"),kNe.forEach(t),KQe.forEach(t),zhr=i(wa),y8=n(wa,"P",{});var SNe=s(y8);Qhr=r(SNe,"The model is set in evaluation mode by default using "),gFe=n(SNe,"CODE",{});var UAt=s(gFe);Whr=r(UAt,"model.eval()"),UAt.forEach(t),Hhr=r(SNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(SNe,"CODE",{});var JAt=s(hFe);Uhr=r(JAt,"model.train()"),JAt.forEach(t),SNe.forEach(t),Jhr=i(wa),T(x8.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),QXe=i(f),Gd=n(f,"H2",{class:!0});var ZQe=s(Gd);$8=n(ZQe,"A",{id:!0,class:!0,href:!0});var YAt=s($8);pFe=n(YAt,"SPAN",{});var KAt=s(pFe);T(gy.$$.fragment,KAt),KAt.forEach(t),YAt.forEach(t),Yhr=i(ZQe),_Fe=n(ZQe,"SPAN",{});var ZAt=s(_Fe);Khr=r(ZAt,"AutoModelForAudioXVector"),ZAt.forEach(t),ZQe.forEach(t),WXe=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(hy.$$.fragment,Tl),Zhr=i(Tl),Od=n(Tl,"P",{});var gte=s(Od);epr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AH=n(gte,"A",{href:!0});var e7t=s(AH);opr=r(e7t,"from_pretrained()"),e7t.forEach(t),rpr=r(gte," class method or the "),LH=n(gte,"A",{href:!0});var o7t=s(LH);tpr=r(o7t,"from_config()"),o7t.forEach(t),apr=r(gte,` class
method.`),gte.forEach(t),npr=i(Tl),py=n(Tl,"P",{});var eWe=s(py);spr=r(eWe,"This class cannot be instantiated directly using "),uFe=n(eWe,"CODE",{});var r7t=s(uFe);lpr=r(r7t,"__init__()"),r7t.forEach(t),ipr=r(eWe," (throws an error)."),eWe.forEach(t),dpr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var Xw=s(Lt);T(_y.$$.fragment,Xw),cpr=i(Xw),bFe=n(Xw,"P",{});var t7t=s(bFe);fpr=r(t7t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),t7t.forEach(t),mpr=i(Xw),Vd=n(Xw,"P",{});var hte=s(Vd);gpr=r(hte,`Note:
Loading a model from its configuration file does `),vFe=n(hte,"STRONG",{});var a7t=s(vFe);hpr=r(a7t,"not"),a7t.forEach(t),ppr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(hte,"A",{href:!0});var n7t=s(yH);_pr=r(n7t,"from_pretrained()"),n7t.forEach(t),upr=r(hte," to load the model weights."),hte.forEach(t),bpr=i(Xw),T(k8.$$.fragment,Xw),Xw.forEach(t),vpr=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(uy.$$.fragment,Aa),Fpr=i(Aa),FFe=n(Aa,"P",{});var s7t=s(FFe);Tpr=r(s7t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),s7t.forEach(t),Mpr=i(Aa),en=n(Aa,"P",{});var zw=s(en);Epr=r(zw,"The model class to instantiate is selected based on the "),TFe=n(zw,"CODE",{});var l7t=s(TFe);Cpr=r(l7t,"model_type"),l7t.forEach(t),wpr=r(zw,` property of the config object (either
passed as an argument or loaded from `),MFe=n(zw,"CODE",{});var i7t=s(MFe);Apr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),Lpr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(zw,"CODE",{});var d7t=s(EFe);ypr=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),xpr=r(zw,":"),zw.forEach(t),$pr=i(Aa),tt=n(Aa,"UL",{});var Ml=s(tt);S8=n(Ml,"LI",{});var RNe=s(S8);CFe=n(RNe,"STRONG",{});var c7t=s(CFe);kpr=r(c7t,"data2vec-audio"),c7t.forEach(t),Spr=r(RNe," \u2014 "),xH=n(RNe,"A",{href:!0});var f7t=s(xH);Rpr=r(f7t,"Data2VecAudioForXVector"),f7t.forEach(t),Ppr=r(RNe," (Data2VecAudio model)"),RNe.forEach(t),Bpr=i(Ml),R8=n(Ml,"LI",{});var PNe=s(R8);wFe=n(PNe,"STRONG",{});var m7t=s(wFe);Ipr=r(m7t,"unispeech-sat"),m7t.forEach(t),Npr=r(PNe," \u2014 "),$H=n(PNe,"A",{href:!0});var g7t=s($H);qpr=r(g7t,"UniSpeechSatForXVector"),g7t.forEach(t),jpr=r(PNe," (UniSpeechSat model)"),PNe.forEach(t),Dpr=i(Ml),P8=n(Ml,"LI",{});var BNe=s(P8);AFe=n(BNe,"STRONG",{});var h7t=s(AFe);Gpr=r(h7t,"wav2vec2"),h7t.forEach(t),Opr=r(BNe," \u2014 "),kH=n(BNe,"A",{href:!0});var p7t=s(kH);Vpr=r(p7t,"Wav2Vec2ForXVector"),p7t.forEach(t),Xpr=r(BNe," (Wav2Vec2 model)"),BNe.forEach(t),zpr=i(Ml),B8=n(Ml,"LI",{});var INe=s(B8);LFe=n(INe,"STRONG",{});var _7t=s(LFe);Qpr=r(_7t,"wav2vec2-conformer"),_7t.forEach(t),Wpr=r(INe," \u2014 "),SH=n(INe,"A",{href:!0});var u7t=s(SH);Hpr=r(u7t,"Wav2Vec2ConformerForXVector"),u7t.forEach(t),Upr=r(INe," (Wav2Vec2-Conformer model)"),INe.forEach(t),Jpr=i(Ml),I8=n(Ml,"LI",{});var NNe=s(I8);yFe=n(NNe,"STRONG",{});var b7t=s(yFe);Ypr=r(b7t,"wavlm"),b7t.forEach(t),Kpr=r(NNe," \u2014 "),RH=n(NNe,"A",{href:!0});var v7t=s(RH);Zpr=r(v7t,"WavLMForXVector"),v7t.forEach(t),e_r=r(NNe," (WavLM model)"),NNe.forEach(t),Ml.forEach(t),o_r=i(Aa),N8=n(Aa,"P",{});var qNe=s(N8);r_r=r(qNe,"The model is set in evaluation mode by default using "),xFe=n(qNe,"CODE",{});var F7t=s(xFe);t_r=r(F7t,"model.eval()"),F7t.forEach(t),a_r=r(qNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=n(qNe,"CODE",{});var T7t=s($Fe);n_r=r(T7t,"model.train()"),T7t.forEach(t),qNe.forEach(t),s_r=i(Aa),T(q8.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),HXe=i(f),Xd=n(f,"H2",{class:!0});var oWe=s(Xd);j8=n(oWe,"A",{id:!0,class:!0,href:!0});var M7t=s(j8);kFe=n(M7t,"SPAN",{});var E7t=s(kFe);T(by.$$.fragment,E7t),E7t.forEach(t),M7t.forEach(t),l_r=i(oWe),SFe=n(oWe,"SPAN",{});var C7t=s(SFe);i_r=r(C7t,"AutoModelForMaskedImageModeling"),C7t.forEach(t),oWe.forEach(t),UXe=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(vy.$$.fragment,El),d_r=i(El),zd=n(El,"P",{});var pte=s(zd);c_r=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PH=n(pte,"A",{href:!0});var w7t=s(PH);f_r=r(w7t,"from_pretrained()"),w7t.forEach(t),m_r=r(pte," class method or the "),BH=n(pte,"A",{href:!0});var A7t=s(BH);g_r=r(A7t,"from_config()"),A7t.forEach(t),h_r=r(pte,` class
method.`),pte.forEach(t),p_r=i(El),Fy=n(El,"P",{});var rWe=s(Fy);__r=r(rWe,"This class cannot be instantiated directly using "),RFe=n(rWe,"CODE",{});var L7t=s(RFe);u_r=r(L7t,"__init__()"),L7t.forEach(t),b_r=r(rWe," (throws an error)."),rWe.forEach(t),v_r=i(El),yt=n(El,"DIV",{class:!0});var Qw=s(yt);T(Ty.$$.fragment,Qw),F_r=i(Qw),PFe=n(Qw,"P",{});var y7t=s(PFe);T_r=r(y7t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),y7t.forEach(t),M_r=i(Qw),Qd=n(Qw,"P",{});var _te=s(Qd);E_r=r(_te,`Note:
Loading a model from its configuration file does `),BFe=n(_te,"STRONG",{});var x7t=s(BFe);C_r=r(x7t,"not"),x7t.forEach(t),w_r=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(_te,"A",{href:!0});var $7t=s(IH);A_r=r($7t,"from_pretrained()"),$7t.forEach(t),L_r=r(_te," to load the model weights."),_te.forEach(t),y_r=i(Qw),T(D8.$$.fragment,Qw),Qw.forEach(t),x_r=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(My.$$.fragment,La),$_r=i(La),IFe=n(La,"P",{});var k7t=s(IFe);k_r=r(k7t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),k7t.forEach(t),S_r=i(La),on=n(La,"P",{});var Ww=s(on);R_r=r(Ww,"The model class to instantiate is selected based on the "),NFe=n(Ww,"CODE",{});var S7t=s(NFe);P_r=r(S7t,"model_type"),S7t.forEach(t),B_r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),qFe=n(Ww,"CODE",{});var R7t=s(qFe);I_r=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),N_r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(Ww,"CODE",{});var P7t=s(jFe);q_r=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),j_r=r(Ww,":"),Ww.forEach(t),D_r=i(La),Wd=n(La,"UL",{});var ute=s(Wd);G8=n(ute,"LI",{});var jNe=s(G8);DFe=n(jNe,"STRONG",{});var B7t=s(DFe);G_r=r(B7t,"deit"),B7t.forEach(t),O_r=r(jNe," \u2014 "),NH=n(jNe,"A",{href:!0});var I7t=s(NH);V_r=r(I7t,"DeiTForMaskedImageModeling"),I7t.forEach(t),X_r=r(jNe," (DeiT model)"),jNe.forEach(t),z_r=i(ute),O8=n(ute,"LI",{});var DNe=s(O8);GFe=n(DNe,"STRONG",{});var N7t=s(GFe);Q_r=r(N7t,"swin"),N7t.forEach(t),W_r=r(DNe," \u2014 "),qH=n(DNe,"A",{href:!0});var q7t=s(qH);H_r=r(q7t,"SwinForMaskedImageModeling"),q7t.forEach(t),U_r=r(DNe," (Swin Transformer model)"),DNe.forEach(t),J_r=i(ute),V8=n(ute,"LI",{});var GNe=s(V8);OFe=n(GNe,"STRONG",{});var j7t=s(OFe);Y_r=r(j7t,"vit"),j7t.forEach(t),K_r=r(GNe," \u2014 "),jH=n(GNe,"A",{href:!0});var D7t=s(jH);Z_r=r(D7t,"ViTForMaskedImageModeling"),D7t.forEach(t),eur=r(GNe," (ViT model)"),GNe.forEach(t),ute.forEach(t),our=i(La),X8=n(La,"P",{});var ONe=s(X8);rur=r(ONe,"The model is set in evaluation mode by default using "),VFe=n(ONe,"CODE",{});var G7t=s(VFe);tur=r(G7t,"model.eval()"),G7t.forEach(t),aur=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=n(ONe,"CODE",{});var O7t=s(XFe);nur=r(O7t,"model.train()"),O7t.forEach(t),ONe.forEach(t),sur=i(La),T(z8.$$.fragment,La),La.forEach(t),El.forEach(t),JXe=i(f),Hd=n(f,"H2",{class:!0});var tWe=s(Hd);Q8=n(tWe,"A",{id:!0,class:!0,href:!0});var V7t=s(Q8);zFe=n(V7t,"SPAN",{});var X7t=s(zFe);T(Ey.$$.fragment,X7t),X7t.forEach(t),V7t.forEach(t),lur=i(tWe),QFe=n(tWe,"SPAN",{});var z7t=s(QFe);iur=r(z7t,"AutoModelForObjectDetection"),z7t.forEach(t),tWe.forEach(t),YXe=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(Cy.$$.fragment,Cl),dur=i(Cl),Ud=n(Cl,"P",{});var bte=s(Ud);cur=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DH=n(bte,"A",{href:!0});var Q7t=s(DH);fur=r(Q7t,"from_pretrained()"),Q7t.forEach(t),mur=r(bte," class method or the "),GH=n(bte,"A",{href:!0});var W7t=s(GH);gur=r(W7t,"from_config()"),W7t.forEach(t),hur=r(bte,` class
method.`),bte.forEach(t),pur=i(Cl),wy=n(Cl,"P",{});var aWe=s(wy);_ur=r(aWe,"This class cannot be instantiated directly using "),WFe=n(aWe,"CODE",{});var H7t=s(WFe);uur=r(H7t,"__init__()"),H7t.forEach(t),bur=r(aWe," (throws an error)."),aWe.forEach(t),vur=i(Cl),xt=n(Cl,"DIV",{class:!0});var Hw=s(xt);T(Ay.$$.fragment,Hw),Fur=i(Hw),HFe=n(Hw,"P",{});var U7t=s(HFe);Tur=r(U7t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),U7t.forEach(t),Mur=i(Hw),Jd=n(Hw,"P",{});var vte=s(Jd);Eur=r(vte,`Note:
Loading a model from its configuration file does `),UFe=n(vte,"STRONG",{});var J7t=s(UFe);Cur=r(J7t,"not"),J7t.forEach(t),wur=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(vte,"A",{href:!0});var Y7t=s(OH);Aur=r(Y7t,"from_pretrained()"),Y7t.forEach(t),Lur=r(vte," to load the model weights."),vte.forEach(t),yur=i(Hw),T(W8.$$.fragment,Hw),Hw.forEach(t),xur=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(Ly.$$.fragment,ya),$ur=i(ya),JFe=n(ya,"P",{});var K7t=s(JFe);kur=r(K7t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),K7t.forEach(t),Sur=i(ya),rn=n(ya,"P",{});var Uw=s(rn);Rur=r(Uw,"The model class to instantiate is selected based on the "),YFe=n(Uw,"CODE",{});var Z7t=s(YFe);Pur=r(Z7t,"model_type"),Z7t.forEach(t),Bur=r(Uw,` property of the config object (either
passed as an argument or loaded from `),KFe=n(Uw,"CODE",{});var eLt=s(KFe);Iur=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),Nur=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(Uw,"CODE",{});var oLt=s(ZFe);qur=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),jur=r(Uw,":"),Uw.forEach(t),Dur=i(ya),yy=n(ya,"UL",{});var nWe=s(yy);H8=n(nWe,"LI",{});var VNe=s(H8);e6e=n(VNe,"STRONG",{});var rLt=s(e6e);Gur=r(rLt,"detr"),rLt.forEach(t),Our=r(VNe," \u2014 "),VH=n(VNe,"A",{href:!0});var tLt=s(VH);Vur=r(tLt,"DetrForObjectDetection"),tLt.forEach(t),Xur=r(VNe," (DETR model)"),VNe.forEach(t),zur=i(nWe),U8=n(nWe,"LI",{});var XNe=s(U8);o6e=n(XNe,"STRONG",{});var aLt=s(o6e);Qur=r(aLt,"yolos"),aLt.forEach(t),Wur=r(XNe," \u2014 "),XH=n(XNe,"A",{href:!0});var nLt=s(XH);Hur=r(nLt,"YolosForObjectDetection"),nLt.forEach(t),Uur=r(XNe," (YOLOS model)"),XNe.forEach(t),nWe.forEach(t),Jur=i(ya),J8=n(ya,"P",{});var zNe=s(J8);Yur=r(zNe,"The model is set in evaluation mode by default using "),r6e=n(zNe,"CODE",{});var sLt=s(r6e);Kur=r(sLt,"model.eval()"),sLt.forEach(t),Zur=r(zNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t6e=n(zNe,"CODE",{});var lLt=s(t6e);e1r=r(lLt,"model.train()"),lLt.forEach(t),zNe.forEach(t),o1r=i(ya),T(Y8.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),KXe=i(f),Yd=n(f,"H2",{class:!0});var sWe=s(Yd);K8=n(sWe,"A",{id:!0,class:!0,href:!0});var iLt=s(K8);a6e=n(iLt,"SPAN",{});var dLt=s(a6e);T(xy.$$.fragment,dLt),dLt.forEach(t),iLt.forEach(t),r1r=i(sWe),n6e=n(sWe,"SPAN",{});var cLt=s(n6e);t1r=r(cLt,"AutoModelForImageSegmentation"),cLt.forEach(t),sWe.forEach(t),ZXe=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T($y.$$.fragment,wl),a1r=i(wl),Kd=n(wl,"P",{});var Fte=s(Kd);n1r=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zH=n(Fte,"A",{href:!0});var fLt=s(zH);s1r=r(fLt,"from_pretrained()"),fLt.forEach(t),l1r=r(Fte," class method or the "),QH=n(Fte,"A",{href:!0});var mLt=s(QH);i1r=r(mLt,"from_config()"),mLt.forEach(t),d1r=r(Fte,` class
method.`),Fte.forEach(t),c1r=i(wl),ky=n(wl,"P",{});var lWe=s(ky);f1r=r(lWe,"This class cannot be instantiated directly using "),s6e=n(lWe,"CODE",{});var gLt=s(s6e);m1r=r(gLt,"__init__()"),gLt.forEach(t),g1r=r(lWe," (throws an error)."),lWe.forEach(t),h1r=i(wl),$t=n(wl,"DIV",{class:!0});var Jw=s($t);T(Sy.$$.fragment,Jw),p1r=i(Jw),l6e=n(Jw,"P",{});var hLt=s(l6e);_1r=r(hLt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hLt.forEach(t),u1r=i(Jw),Zd=n(Jw,"P",{});var Tte=s(Zd);b1r=r(Tte,`Note:
Loading a model from its configuration file does `),i6e=n(Tte,"STRONG",{});var pLt=s(i6e);v1r=r(pLt,"not"),pLt.forEach(t),F1r=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(Tte,"A",{href:!0});var _Lt=s(WH);T1r=r(_Lt,"from_pretrained()"),_Lt.forEach(t),M1r=r(Tte," to load the model weights."),Tte.forEach(t),E1r=i(Jw),T(Z8.$$.fragment,Jw),Jw.forEach(t),C1r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(Ry.$$.fragment,xa),w1r=i(xa),d6e=n(xa,"P",{});var uLt=s(d6e);A1r=r(uLt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uLt.forEach(t),L1r=i(xa),tn=n(xa,"P",{});var Yw=s(tn);y1r=r(Yw,"The model class to instantiate is selected based on the "),c6e=n(Yw,"CODE",{});var bLt=s(c6e);x1r=r(bLt,"model_type"),bLt.forEach(t),$1r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),f6e=n(Yw,"CODE",{});var vLt=s(f6e);k1r=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),S1r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(Yw,"CODE",{});var FLt=s(m6e);R1r=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),P1r=r(Yw,":"),Yw.forEach(t),B1r=i(xa),g6e=n(xa,"UL",{});var TLt=s(g6e);e9=n(TLt,"LI",{});var QNe=s(e9);h6e=n(QNe,"STRONG",{});var MLt=s(h6e);I1r=r(MLt,"detr"),MLt.forEach(t),N1r=r(QNe," \u2014 "),HH=n(QNe,"A",{href:!0});var ELt=s(HH);q1r=r(ELt,"DetrForSegmentation"),ELt.forEach(t),j1r=r(QNe," (DETR model)"),QNe.forEach(t),TLt.forEach(t),D1r=i(xa),o9=n(xa,"P",{});var WNe=s(o9);G1r=r(WNe,"The model is set in evaluation mode by default using "),p6e=n(WNe,"CODE",{});var CLt=s(p6e);O1r=r(CLt,"model.eval()"),CLt.forEach(t),V1r=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_6e=n(WNe,"CODE",{});var wLt=s(_6e);X1r=r(wLt,"model.train()"),wLt.forEach(t),WNe.forEach(t),z1r=i(xa),T(r9.$$.fragment,xa),xa.forEach(t),wl.forEach(t),eze=i(f),ec=n(f,"H2",{class:!0});var iWe=s(ec);t9=n(iWe,"A",{id:!0,class:!0,href:!0});var ALt=s(t9);u6e=n(ALt,"SPAN",{});var LLt=s(u6e);T(Py.$$.fragment,LLt),LLt.forEach(t),ALt.forEach(t),Q1r=i(iWe),b6e=n(iWe,"SPAN",{});var yLt=s(b6e);W1r=r(yLt,"AutoModelForSemanticSegmentation"),yLt.forEach(t),iWe.forEach(t),oze=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(By.$$.fragment,Al),H1r=i(Al),oc=n(Al,"P",{});var Mte=s(oc);U1r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UH=n(Mte,"A",{href:!0});var xLt=s(UH);J1r=r(xLt,"from_pretrained()"),xLt.forEach(t),Y1r=r(Mte," class method or the "),JH=n(Mte,"A",{href:!0});var $Lt=s(JH);K1r=r($Lt,"from_config()"),$Lt.forEach(t),Z1r=r(Mte,` class
method.`),Mte.forEach(t),e2r=i(Al),Iy=n(Al,"P",{});var dWe=s(Iy);o2r=r(dWe,"This class cannot be instantiated directly using "),v6e=n(dWe,"CODE",{});var kLt=s(v6e);r2r=r(kLt,"__init__()"),kLt.forEach(t),t2r=r(dWe," (throws an error)."),dWe.forEach(t),a2r=i(Al),kt=n(Al,"DIV",{class:!0});var Kw=s(kt);T(Ny.$$.fragment,Kw),n2r=i(Kw),F6e=n(Kw,"P",{});var SLt=s(F6e);s2r=r(SLt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),SLt.forEach(t),l2r=i(Kw),rc=n(Kw,"P",{});var Ete=s(rc);i2r=r(Ete,`Note:
Loading a model from its configuration file does `),T6e=n(Ete,"STRONG",{});var RLt=s(T6e);d2r=r(RLt,"not"),RLt.forEach(t),c2r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Ete,"A",{href:!0});var PLt=s(YH);f2r=r(PLt,"from_pretrained()"),PLt.forEach(t),m2r=r(Ete," to load the model weights."),Ete.forEach(t),g2r=i(Kw),T(a9.$$.fragment,Kw),Kw.forEach(t),h2r=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(qy.$$.fragment,$a),p2r=i($a),M6e=n($a,"P",{});var BLt=s(M6e);_2r=r(BLt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),BLt.forEach(t),u2r=i($a),an=n($a,"P",{});var Zw=s(an);b2r=r(Zw,"The model class to instantiate is selected based on the "),E6e=n(Zw,"CODE",{});var ILt=s(E6e);v2r=r(ILt,"model_type"),ILt.forEach(t),F2r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),C6e=n(Zw,"CODE",{});var NLt=s(C6e);T2r=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),M2r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=n(Zw,"CODE",{});var qLt=s(w6e);E2r=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),C2r=r(Zw,":"),Zw.forEach(t),w2r=i($a),at=n($a,"UL",{});var Ll=s(at);n9=n(Ll,"LI",{});var HNe=s(n9);A6e=n(HNe,"STRONG",{});var jLt=s(A6e);A2r=r(jLt,"beit"),jLt.forEach(t),L2r=r(HNe," \u2014 "),KH=n(HNe,"A",{href:!0});var DLt=s(KH);y2r=r(DLt,"BeitForSemanticSegmentation"),DLt.forEach(t),x2r=r(HNe," (BEiT model)"),HNe.forEach(t),$2r=i(Ll),s9=n(Ll,"LI",{});var UNe=s(s9);L6e=n(UNe,"STRONG",{});var GLt=s(L6e);k2r=r(GLt,"data2vec-vision"),GLt.forEach(t),S2r=r(UNe," \u2014 "),ZH=n(UNe,"A",{href:!0});var OLt=s(ZH);R2r=r(OLt,"Data2VecVisionForSemanticSegmentation"),OLt.forEach(t),P2r=r(UNe," (Data2VecVision model)"),UNe.forEach(t),B2r=i(Ll),l9=n(Ll,"LI",{});var JNe=s(l9);y6e=n(JNe,"STRONG",{});var VLt=s(y6e);I2r=r(VLt,"dpt"),VLt.forEach(t),N2r=r(JNe," \u2014 "),eU=n(JNe,"A",{href:!0});var XLt=s(eU);q2r=r(XLt,"DPTForSemanticSegmentation"),XLt.forEach(t),j2r=r(JNe," (DPT model)"),JNe.forEach(t),D2r=i(Ll),i9=n(Ll,"LI",{});var YNe=s(i9);x6e=n(YNe,"STRONG",{});var zLt=s(x6e);G2r=r(zLt,"mobilevit"),zLt.forEach(t),O2r=r(YNe," \u2014 "),oU=n(YNe,"A",{href:!0});var QLt=s(oU);V2r=r(QLt,"MobileViTForSemanticSegmentation"),QLt.forEach(t),X2r=r(YNe," (MobileViT model)"),YNe.forEach(t),z2r=i(Ll),d9=n(Ll,"LI",{});var KNe=s(d9);$6e=n(KNe,"STRONG",{});var WLt=s($6e);Q2r=r(WLt,"segformer"),WLt.forEach(t),W2r=r(KNe," \u2014 "),rU=n(KNe,"A",{href:!0});var HLt=s(rU);H2r=r(HLt,"SegformerForSemanticSegmentation"),HLt.forEach(t),U2r=r(KNe," (SegFormer model)"),KNe.forEach(t),Ll.forEach(t),J2r=i($a),c9=n($a,"P",{});var ZNe=s(c9);Y2r=r(ZNe,"The model is set in evaluation mode by default using "),k6e=n(ZNe,"CODE",{});var ULt=s(k6e);K2r=r(ULt,"model.eval()"),ULt.forEach(t),Z2r=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S6e=n(ZNe,"CODE",{});var JLt=s(S6e);ebr=r(JLt,"model.train()"),JLt.forEach(t),ZNe.forEach(t),obr=i($a),T(f9.$$.fragment,$a),$a.forEach(t),Al.forEach(t),rze=i(f),tc=n(f,"H2",{class:!0});var cWe=s(tc);m9=n(cWe,"A",{id:!0,class:!0,href:!0});var YLt=s(m9);R6e=n(YLt,"SPAN",{});var KLt=s(R6e);T(jy.$$.fragment,KLt),KLt.forEach(t),YLt.forEach(t),rbr=i(cWe),P6e=n(cWe,"SPAN",{});var ZLt=s(P6e);tbr=r(ZLt,"AutoModelForInstanceSegmentation"),ZLt.forEach(t),cWe.forEach(t),tze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(Dy.$$.fragment,yl),abr=i(yl),ac=n(yl,"P",{});var Cte=s(ac);nbr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tU=n(Cte,"A",{href:!0});var eyt=s(tU);sbr=r(eyt,"from_pretrained()"),eyt.forEach(t),lbr=r(Cte," class method or the "),aU=n(Cte,"A",{href:!0});var oyt=s(aU);ibr=r(oyt,"from_config()"),oyt.forEach(t),dbr=r(Cte,` class
method.`),Cte.forEach(t),cbr=i(yl),Gy=n(yl,"P",{});var fWe=s(Gy);fbr=r(fWe,"This class cannot be instantiated directly using "),B6e=n(fWe,"CODE",{});var ryt=s(B6e);mbr=r(ryt,"__init__()"),ryt.forEach(t),gbr=r(fWe," (throws an error)."),fWe.forEach(t),hbr=i(yl),St=n(yl,"DIV",{class:!0});var eA=s(St);T(Oy.$$.fragment,eA),pbr=i(eA),I6e=n(eA,"P",{});var tyt=s(I6e);_br=r(tyt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),tyt.forEach(t),ubr=i(eA),nc=n(eA,"P",{});var wte=s(nc);bbr=r(wte,`Note:
Loading a model from its configuration file does `),N6e=n(wte,"STRONG",{});var ayt=s(N6e);vbr=r(ayt,"not"),ayt.forEach(t),Fbr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(wte,"A",{href:!0});var nyt=s(nU);Tbr=r(nyt,"from_pretrained()"),nyt.forEach(t),Mbr=r(wte," to load the model weights."),wte.forEach(t),Ebr=i(eA),T(g9.$$.fragment,eA),eA.forEach(t),Cbr=i(yl),To=n(yl,"DIV",{class:!0});var ka=s(To);T(Vy.$$.fragment,ka),wbr=i(ka),q6e=n(ka,"P",{});var syt=s(q6e);Abr=r(syt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),syt.forEach(t),Lbr=i(ka),nn=n(ka,"P",{});var oA=s(nn);ybr=r(oA,"The model class to instantiate is selected based on the "),j6e=n(oA,"CODE",{});var lyt=s(j6e);xbr=r(lyt,"model_type"),lyt.forEach(t),$br=r(oA,` property of the config object (either
passed as an argument or loaded from `),D6e=n(oA,"CODE",{});var iyt=s(D6e);kbr=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),Sbr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(oA,"CODE",{});var dyt=s(G6e);Rbr=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),Pbr=r(oA,":"),oA.forEach(t),Bbr=i(ka),O6e=n(ka,"UL",{});var cyt=s(O6e);h9=n(cyt,"LI",{});var eqe=s(h9);V6e=n(eqe,"STRONG",{});var fyt=s(V6e);Ibr=r(fyt,"maskformer"),fyt.forEach(t),Nbr=r(eqe," \u2014 "),sU=n(eqe,"A",{href:!0});var myt=s(sU);qbr=r(myt,"MaskFormerForInstanceSegmentation"),myt.forEach(t),jbr=r(eqe," (MaskFormer model)"),eqe.forEach(t),cyt.forEach(t),Dbr=i(ka),p9=n(ka,"P",{});var oqe=s(p9);Gbr=r(oqe,"The model is set in evaluation mode by default using "),X6e=n(oqe,"CODE",{});var gyt=s(X6e);Obr=r(gyt,"model.eval()"),gyt.forEach(t),Vbr=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z6e=n(oqe,"CODE",{});var hyt=s(z6e);Xbr=r(hyt,"model.train()"),hyt.forEach(t),oqe.forEach(t),zbr=i(ka),T(_9.$$.fragment,ka),ka.forEach(t),yl.forEach(t),aze=i(f),sc=n(f,"H2",{class:!0});var mWe=s(sc);u9=n(mWe,"A",{id:!0,class:!0,href:!0});var pyt=s(u9);Q6e=n(pyt,"SPAN",{});var _yt=s(Q6e);T(Xy.$$.fragment,_yt),_yt.forEach(t),pyt.forEach(t),Qbr=i(mWe),W6e=n(mWe,"SPAN",{});var uyt=s(W6e);Wbr=r(uyt,"TFAutoModel"),uyt.forEach(t),mWe.forEach(t),nze=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(zy.$$.fragment,xl),Hbr=i(xl),lc=n(xl,"P",{});var Ate=s(lc);Ubr=r(Ate,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lU=n(Ate,"A",{href:!0});var byt=s(lU);Jbr=r(byt,"from_pretrained()"),byt.forEach(t),Ybr=r(Ate," class method or the "),iU=n(Ate,"A",{href:!0});var vyt=s(iU);Kbr=r(vyt,"from_config()"),vyt.forEach(t),Zbr=r(Ate,` class
method.`),Ate.forEach(t),evr=i(xl),Qy=n(xl,"P",{});var gWe=s(Qy);ovr=r(gWe,"This class cannot be instantiated directly using "),H6e=n(gWe,"CODE",{});var Fyt=s(H6e);rvr=r(Fyt,"__init__()"),Fyt.forEach(t),tvr=r(gWe," (throws an error)."),gWe.forEach(t),avr=i(xl),Rt=n(xl,"DIV",{class:!0});var rA=s(Rt);T(Wy.$$.fragment,rA),nvr=i(rA),U6e=n(rA,"P",{});var Tyt=s(U6e);svr=r(Tyt,"Instantiates one of the base model classes of the library from a configuration."),Tyt.forEach(t),lvr=i(rA),ic=n(rA,"P",{});var Lte=s(ic);ivr=r(Lte,`Note:
Loading a model from its configuration file does `),J6e=n(Lte,"STRONG",{});var Myt=s(J6e);dvr=r(Myt,"not"),Myt.forEach(t),cvr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(Lte,"A",{href:!0});var Eyt=s(dU);fvr=r(Eyt,"from_pretrained()"),Eyt.forEach(t),mvr=r(Lte," to load the model weights."),Lte.forEach(t),gvr=i(rA),T(b9.$$.fragment,rA),rA.forEach(t),hvr=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(Hy.$$.fragment,$l),pvr=i($l),Y6e=n($l,"P",{});var Cyt=s(Y6e);_vr=r(Cyt,"Instantiate one of the base model classes of the library from a pretrained model."),Cyt.forEach(t),uvr=i($l),sn=n($l,"P",{});var tA=s(sn);bvr=r(tA,"The model class to instantiate is selected based on the "),K6e=n(tA,"CODE",{});var wyt=s(K6e);vvr=r(wyt,"model_type"),wyt.forEach(t),Fvr=r(tA,` property of the config object (either
passed as an argument or loaded from `),Z6e=n(tA,"CODE",{});var Ayt=s(Z6e);Tvr=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),Mvr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(tA,"CODE",{});var Lyt=s(eTe);Evr=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),Cvr=r(tA,":"),tA.forEach(t),wvr=i($l),q=n($l,"UL",{});var D=s(q);v9=n(D,"LI",{});var rqe=s(v9);oTe=n(rqe,"STRONG",{});var yyt=s(oTe);Avr=r(yyt,"albert"),yyt.forEach(t),Lvr=r(rqe," \u2014 "),cU=n(rqe,"A",{href:!0});var xyt=s(cU);yvr=r(xyt,"TFAlbertModel"),xyt.forEach(t),xvr=r(rqe," (ALBERT model)"),rqe.forEach(t),$vr=i(D),F9=n(D,"LI",{});var tqe=s(F9);rTe=n(tqe,"STRONG",{});var $yt=s(rTe);kvr=r($yt,"bart"),$yt.forEach(t),Svr=r(tqe," \u2014 "),fU=n(tqe,"A",{href:!0});var kyt=s(fU);Rvr=r(kyt,"TFBartModel"),kyt.forEach(t),Pvr=r(tqe," (BART model)"),tqe.forEach(t),Bvr=i(D),T9=n(D,"LI",{});var aqe=s(T9);tTe=n(aqe,"STRONG",{});var Syt=s(tTe);Ivr=r(Syt,"bert"),Syt.forEach(t),Nvr=r(aqe," \u2014 "),mU=n(aqe,"A",{href:!0});var Ryt=s(mU);qvr=r(Ryt,"TFBertModel"),Ryt.forEach(t),jvr=r(aqe," (BERT model)"),aqe.forEach(t),Dvr=i(D),M9=n(D,"LI",{});var nqe=s(M9);aTe=n(nqe,"STRONG",{});var Pyt=s(aTe);Gvr=r(Pyt,"blenderbot"),Pyt.forEach(t),Ovr=r(nqe," \u2014 "),gU=n(nqe,"A",{href:!0});var Byt=s(gU);Vvr=r(Byt,"TFBlenderbotModel"),Byt.forEach(t),Xvr=r(nqe," (Blenderbot model)"),nqe.forEach(t),zvr=i(D),E9=n(D,"LI",{});var sqe=s(E9);nTe=n(sqe,"STRONG",{});var Iyt=s(nTe);Qvr=r(Iyt,"blenderbot-small"),Iyt.forEach(t),Wvr=r(sqe," \u2014 "),hU=n(sqe,"A",{href:!0});var Nyt=s(hU);Hvr=r(Nyt,"TFBlenderbotSmallModel"),Nyt.forEach(t),Uvr=r(sqe," (BlenderbotSmall model)"),sqe.forEach(t),Jvr=i(D),C9=n(D,"LI",{});var lqe=s(C9);sTe=n(lqe,"STRONG",{});var qyt=s(sTe);Yvr=r(qyt,"camembert"),qyt.forEach(t),Kvr=r(lqe," \u2014 "),pU=n(lqe,"A",{href:!0});var jyt=s(pU);Zvr=r(jyt,"TFCamembertModel"),jyt.forEach(t),eFr=r(lqe," (CamemBERT model)"),lqe.forEach(t),oFr=i(D),w9=n(D,"LI",{});var iqe=s(w9);lTe=n(iqe,"STRONG",{});var Dyt=s(lTe);rFr=r(Dyt,"clip"),Dyt.forEach(t),tFr=r(iqe," \u2014 "),_U=n(iqe,"A",{href:!0});var Gyt=s(_U);aFr=r(Gyt,"TFCLIPModel"),Gyt.forEach(t),nFr=r(iqe," (CLIP model)"),iqe.forEach(t),sFr=i(D),A9=n(D,"LI",{});var dqe=s(A9);iTe=n(dqe,"STRONG",{});var Oyt=s(iTe);lFr=r(Oyt,"convbert"),Oyt.forEach(t),iFr=r(dqe," \u2014 "),uU=n(dqe,"A",{href:!0});var Vyt=s(uU);dFr=r(Vyt,"TFConvBertModel"),Vyt.forEach(t),cFr=r(dqe," (ConvBERT model)"),dqe.forEach(t),fFr=i(D),L9=n(D,"LI",{});var cqe=s(L9);dTe=n(cqe,"STRONG",{});var Xyt=s(dTe);mFr=r(Xyt,"convnext"),Xyt.forEach(t),gFr=r(cqe," \u2014 "),bU=n(cqe,"A",{href:!0});var zyt=s(bU);hFr=r(zyt,"TFConvNextModel"),zyt.forEach(t),pFr=r(cqe," (ConvNeXT model)"),cqe.forEach(t),_Fr=i(D),y9=n(D,"LI",{});var fqe=s(y9);cTe=n(fqe,"STRONG",{});var Qyt=s(cTe);uFr=r(Qyt,"ctrl"),Qyt.forEach(t),bFr=r(fqe," \u2014 "),vU=n(fqe,"A",{href:!0});var Wyt=s(vU);vFr=r(Wyt,"TFCTRLModel"),Wyt.forEach(t),FFr=r(fqe," (CTRL model)"),fqe.forEach(t),TFr=i(D),x9=n(D,"LI",{});var mqe=s(x9);fTe=n(mqe,"STRONG",{});var Hyt=s(fTe);MFr=r(Hyt,"data2vec-vision"),Hyt.forEach(t),EFr=r(mqe," \u2014 "),FU=n(mqe,"A",{href:!0});var Uyt=s(FU);CFr=r(Uyt,"TFData2VecVisionModel"),Uyt.forEach(t),wFr=r(mqe," (Data2VecVision model)"),mqe.forEach(t),AFr=i(D),$9=n(D,"LI",{});var gqe=s($9);mTe=n(gqe,"STRONG",{});var Jyt=s(mTe);LFr=r(Jyt,"deberta"),Jyt.forEach(t),yFr=r(gqe," \u2014 "),TU=n(gqe,"A",{href:!0});var Yyt=s(TU);xFr=r(Yyt,"TFDebertaModel"),Yyt.forEach(t),$Fr=r(gqe," (DeBERTa model)"),gqe.forEach(t),kFr=i(D),k9=n(D,"LI",{});var hqe=s(k9);gTe=n(hqe,"STRONG",{});var Kyt=s(gTe);SFr=r(Kyt,"deberta-v2"),Kyt.forEach(t),RFr=r(hqe," \u2014 "),MU=n(hqe,"A",{href:!0});var Zyt=s(MU);PFr=r(Zyt,"TFDebertaV2Model"),Zyt.forEach(t),BFr=r(hqe," (DeBERTa-v2 model)"),hqe.forEach(t),IFr=i(D),S9=n(D,"LI",{});var pqe=s(S9);hTe=n(pqe,"STRONG",{});var ext=s(hTe);NFr=r(ext,"deit"),ext.forEach(t),qFr=r(pqe," \u2014 "),EU=n(pqe,"A",{href:!0});var oxt=s(EU);jFr=r(oxt,"TFDeiTModel"),oxt.forEach(t),DFr=r(pqe," (DeiT model)"),pqe.forEach(t),GFr=i(D),R9=n(D,"LI",{});var _qe=s(R9);pTe=n(_qe,"STRONG",{});var rxt=s(pTe);OFr=r(rxt,"distilbert"),rxt.forEach(t),VFr=r(_qe," \u2014 "),CU=n(_qe,"A",{href:!0});var txt=s(CU);XFr=r(txt,"TFDistilBertModel"),txt.forEach(t),zFr=r(_qe," (DistilBERT model)"),_qe.forEach(t),QFr=i(D),P9=n(D,"LI",{});var uqe=s(P9);_Te=n(uqe,"STRONG",{});var axt=s(_Te);WFr=r(axt,"dpr"),axt.forEach(t),HFr=r(uqe," \u2014 "),wU=n(uqe,"A",{href:!0});var nxt=s(wU);UFr=r(nxt,"TFDPRQuestionEncoder"),nxt.forEach(t),JFr=r(uqe," (DPR model)"),uqe.forEach(t),YFr=i(D),B9=n(D,"LI",{});var bqe=s(B9);uTe=n(bqe,"STRONG",{});var sxt=s(uTe);KFr=r(sxt,"electra"),sxt.forEach(t),ZFr=r(bqe," \u2014 "),AU=n(bqe,"A",{href:!0});var lxt=s(AU);e6r=r(lxt,"TFElectraModel"),lxt.forEach(t),o6r=r(bqe," (ELECTRA model)"),bqe.forEach(t),r6r=i(D),I9=n(D,"LI",{});var vqe=s(I9);bTe=n(vqe,"STRONG",{});var ixt=s(bTe);t6r=r(ixt,"flaubert"),ixt.forEach(t),a6r=r(vqe," \u2014 "),LU=n(vqe,"A",{href:!0});var dxt=s(LU);n6r=r(dxt,"TFFlaubertModel"),dxt.forEach(t),s6r=r(vqe," (FlauBERT model)"),vqe.forEach(t),l6r=i(D),Js=n(D,"LI",{});var RS=s(Js);vTe=n(RS,"STRONG",{});var cxt=s(vTe);i6r=r(cxt,"funnel"),cxt.forEach(t),d6r=r(RS," \u2014 "),yU=n(RS,"A",{href:!0});var fxt=s(yU);c6r=r(fxt,"TFFunnelModel"),fxt.forEach(t),f6r=r(RS," or "),xU=n(RS,"A",{href:!0});var mxt=s(xU);m6r=r(mxt,"TFFunnelBaseModel"),mxt.forEach(t),g6r=r(RS," (Funnel Transformer model)"),RS.forEach(t),h6r=i(D),N9=n(D,"LI",{});var Fqe=s(N9);FTe=n(Fqe,"STRONG",{});var gxt=s(FTe);p6r=r(gxt,"gpt2"),gxt.forEach(t),_6r=r(Fqe," \u2014 "),$U=n(Fqe,"A",{href:!0});var hxt=s($U);u6r=r(hxt,"TFGPT2Model"),hxt.forEach(t),b6r=r(Fqe," (OpenAI GPT-2 model)"),Fqe.forEach(t),v6r=i(D),q9=n(D,"LI",{});var Tqe=s(q9);TTe=n(Tqe,"STRONG",{});var pxt=s(TTe);F6r=r(pxt,"gptj"),pxt.forEach(t),T6r=r(Tqe," \u2014 "),kU=n(Tqe,"A",{href:!0});var _xt=s(kU);M6r=r(_xt,"TFGPTJModel"),_xt.forEach(t),E6r=r(Tqe," (GPT-J model)"),Tqe.forEach(t),C6r=i(D),j9=n(D,"LI",{});var Mqe=s(j9);MTe=n(Mqe,"STRONG",{});var uxt=s(MTe);w6r=r(uxt,"hubert"),uxt.forEach(t),A6r=r(Mqe," \u2014 "),SU=n(Mqe,"A",{href:!0});var bxt=s(SU);L6r=r(bxt,"TFHubertModel"),bxt.forEach(t),y6r=r(Mqe," (Hubert model)"),Mqe.forEach(t),x6r=i(D),D9=n(D,"LI",{});var Eqe=s(D9);ETe=n(Eqe,"STRONG",{});var vxt=s(ETe);$6r=r(vxt,"layoutlm"),vxt.forEach(t),k6r=r(Eqe," \u2014 "),RU=n(Eqe,"A",{href:!0});var Fxt=s(RU);S6r=r(Fxt,"TFLayoutLMModel"),Fxt.forEach(t),R6r=r(Eqe," (LayoutLM model)"),Eqe.forEach(t),P6r=i(D),G9=n(D,"LI",{});var Cqe=s(G9);CTe=n(Cqe,"STRONG",{});var Txt=s(CTe);B6r=r(Txt,"led"),Txt.forEach(t),I6r=r(Cqe," \u2014 "),PU=n(Cqe,"A",{href:!0});var Mxt=s(PU);N6r=r(Mxt,"TFLEDModel"),Mxt.forEach(t),q6r=r(Cqe," (LED model)"),Cqe.forEach(t),j6r=i(D),O9=n(D,"LI",{});var wqe=s(O9);wTe=n(wqe,"STRONG",{});var Ext=s(wTe);D6r=r(Ext,"longformer"),Ext.forEach(t),G6r=r(wqe," \u2014 "),BU=n(wqe,"A",{href:!0});var Cxt=s(BU);O6r=r(Cxt,"TFLongformerModel"),Cxt.forEach(t),V6r=r(wqe," (Longformer model)"),wqe.forEach(t),X6r=i(D),V9=n(D,"LI",{});var Aqe=s(V9);ATe=n(Aqe,"STRONG",{});var wxt=s(ATe);z6r=r(wxt,"lxmert"),wxt.forEach(t),Q6r=r(Aqe," \u2014 "),IU=n(Aqe,"A",{href:!0});var Axt=s(IU);W6r=r(Axt,"TFLxmertModel"),Axt.forEach(t),H6r=r(Aqe," (LXMERT model)"),Aqe.forEach(t),U6r=i(D),X9=n(D,"LI",{});var Lqe=s(X9);LTe=n(Lqe,"STRONG",{});var Lxt=s(LTe);J6r=r(Lxt,"marian"),Lxt.forEach(t),Y6r=r(Lqe," \u2014 "),NU=n(Lqe,"A",{href:!0});var yxt=s(NU);K6r=r(yxt,"TFMarianModel"),yxt.forEach(t),Z6r=r(Lqe," (Marian model)"),Lqe.forEach(t),eTr=i(D),z9=n(D,"LI",{});var yqe=s(z9);yTe=n(yqe,"STRONG",{});var xxt=s(yTe);oTr=r(xxt,"mbart"),xxt.forEach(t),rTr=r(yqe," \u2014 "),qU=n(yqe,"A",{href:!0});var $xt=s(qU);tTr=r($xt,"TFMBartModel"),$xt.forEach(t),aTr=r(yqe," (mBART model)"),yqe.forEach(t),nTr=i(D),Q9=n(D,"LI",{});var xqe=s(Q9);xTe=n(xqe,"STRONG",{});var kxt=s(xTe);sTr=r(kxt,"mobilebert"),kxt.forEach(t),lTr=r(xqe," \u2014 "),jU=n(xqe,"A",{href:!0});var Sxt=s(jU);iTr=r(Sxt,"TFMobileBertModel"),Sxt.forEach(t),dTr=r(xqe," (MobileBERT model)"),xqe.forEach(t),cTr=i(D),W9=n(D,"LI",{});var $qe=s(W9);$Te=n($qe,"STRONG",{});var Rxt=s($Te);fTr=r(Rxt,"mpnet"),Rxt.forEach(t),mTr=r($qe," \u2014 "),DU=n($qe,"A",{href:!0});var Pxt=s(DU);gTr=r(Pxt,"TFMPNetModel"),Pxt.forEach(t),hTr=r($qe," (MPNet model)"),$qe.forEach(t),pTr=i(D),H9=n(D,"LI",{});var kqe=s(H9);kTe=n(kqe,"STRONG",{});var Bxt=s(kTe);_Tr=r(Bxt,"mt5"),Bxt.forEach(t),uTr=r(kqe," \u2014 "),GU=n(kqe,"A",{href:!0});var Ixt=s(GU);bTr=r(Ixt,"TFMT5Model"),Ixt.forEach(t),vTr=r(kqe," (MT5 model)"),kqe.forEach(t),FTr=i(D),U9=n(D,"LI",{});var Sqe=s(U9);STe=n(Sqe,"STRONG",{});var Nxt=s(STe);TTr=r(Nxt,"openai-gpt"),Nxt.forEach(t),MTr=r(Sqe," \u2014 "),OU=n(Sqe,"A",{href:!0});var qxt=s(OU);ETr=r(qxt,"TFOpenAIGPTModel"),qxt.forEach(t),CTr=r(Sqe," (OpenAI GPT model)"),Sqe.forEach(t),wTr=i(D),J9=n(D,"LI",{});var Rqe=s(J9);RTe=n(Rqe,"STRONG",{});var jxt=s(RTe);ATr=r(jxt,"opt"),jxt.forEach(t),LTr=r(Rqe," \u2014 "),VU=n(Rqe,"A",{href:!0});var Dxt=s(VU);yTr=r(Dxt,"TFOPTModel"),Dxt.forEach(t),xTr=r(Rqe," (OPT model)"),Rqe.forEach(t),$Tr=i(D),Y9=n(D,"LI",{});var Pqe=s(Y9);PTe=n(Pqe,"STRONG",{});var Gxt=s(PTe);kTr=r(Gxt,"pegasus"),Gxt.forEach(t),STr=r(Pqe," \u2014 "),XU=n(Pqe,"A",{href:!0});var Oxt=s(XU);RTr=r(Oxt,"TFPegasusModel"),Oxt.forEach(t),PTr=r(Pqe," (Pegasus model)"),Pqe.forEach(t),BTr=i(D),K9=n(D,"LI",{});var Bqe=s(K9);BTe=n(Bqe,"STRONG",{});var Vxt=s(BTe);ITr=r(Vxt,"regnet"),Vxt.forEach(t),NTr=r(Bqe," \u2014 "),zU=n(Bqe,"A",{href:!0});var Xxt=s(zU);qTr=r(Xxt,"TFRegNetModel"),Xxt.forEach(t),jTr=r(Bqe," (RegNet model)"),Bqe.forEach(t),DTr=i(D),Z9=n(D,"LI",{});var Iqe=s(Z9);ITe=n(Iqe,"STRONG",{});var zxt=s(ITe);GTr=r(zxt,"rembert"),zxt.forEach(t),OTr=r(Iqe," \u2014 "),QU=n(Iqe,"A",{href:!0});var Qxt=s(QU);VTr=r(Qxt,"TFRemBertModel"),Qxt.forEach(t),XTr=r(Iqe," (RemBERT model)"),Iqe.forEach(t),zTr=i(D),eM=n(D,"LI",{});var Nqe=s(eM);NTe=n(Nqe,"STRONG",{});var Wxt=s(NTe);QTr=r(Wxt,"resnet"),Wxt.forEach(t),WTr=r(Nqe," \u2014 "),WU=n(Nqe,"A",{href:!0});var Hxt=s(WU);HTr=r(Hxt,"TFResNetModel"),Hxt.forEach(t),UTr=r(Nqe," (ResNet model)"),Nqe.forEach(t),JTr=i(D),oM=n(D,"LI",{});var qqe=s(oM);qTe=n(qqe,"STRONG",{});var Uxt=s(qTe);YTr=r(Uxt,"roberta"),Uxt.forEach(t),KTr=r(qqe," \u2014 "),HU=n(qqe,"A",{href:!0});var Jxt=s(HU);ZTr=r(Jxt,"TFRobertaModel"),Jxt.forEach(t),e8r=r(qqe," (RoBERTa model)"),qqe.forEach(t),o8r=i(D),rM=n(D,"LI",{});var jqe=s(rM);jTe=n(jqe,"STRONG",{});var Yxt=s(jTe);r8r=r(Yxt,"roformer"),Yxt.forEach(t),t8r=r(jqe," \u2014 "),UU=n(jqe,"A",{href:!0});var Kxt=s(UU);a8r=r(Kxt,"TFRoFormerModel"),Kxt.forEach(t),n8r=r(jqe," (RoFormer model)"),jqe.forEach(t),s8r=i(D),tM=n(D,"LI",{});var Dqe=s(tM);DTe=n(Dqe,"STRONG",{});var Zxt=s(DTe);l8r=r(Zxt,"speech_to_text"),Zxt.forEach(t),i8r=r(Dqe," \u2014 "),JU=n(Dqe,"A",{href:!0});var e$t=s(JU);d8r=r(e$t,"TFSpeech2TextModel"),e$t.forEach(t),c8r=r(Dqe," (Speech2Text model)"),Dqe.forEach(t),f8r=i(D),aM=n(D,"LI",{});var Gqe=s(aM);GTe=n(Gqe,"STRONG",{});var o$t=s(GTe);m8r=r(o$t,"swin"),o$t.forEach(t),g8r=r(Gqe," \u2014 "),YU=n(Gqe,"A",{href:!0});var r$t=s(YU);h8r=r(r$t,"TFSwinModel"),r$t.forEach(t),p8r=r(Gqe," (Swin Transformer model)"),Gqe.forEach(t),_8r=i(D),nM=n(D,"LI",{});var Oqe=s(nM);OTe=n(Oqe,"STRONG",{});var t$t=s(OTe);u8r=r(t$t,"t5"),t$t.forEach(t),b8r=r(Oqe," \u2014 "),KU=n(Oqe,"A",{href:!0});var a$t=s(KU);v8r=r(a$t,"TFT5Model"),a$t.forEach(t),F8r=r(Oqe," (T5 model)"),Oqe.forEach(t),T8r=i(D),sM=n(D,"LI",{});var Vqe=s(sM);VTe=n(Vqe,"STRONG",{});var n$t=s(VTe);M8r=r(n$t,"tapas"),n$t.forEach(t),E8r=r(Vqe," \u2014 "),ZU=n(Vqe,"A",{href:!0});var s$t=s(ZU);C8r=r(s$t,"TFTapasModel"),s$t.forEach(t),w8r=r(Vqe," (TAPAS model)"),Vqe.forEach(t),A8r=i(D),lM=n(D,"LI",{});var Xqe=s(lM);XTe=n(Xqe,"STRONG",{});var l$t=s(XTe);L8r=r(l$t,"transfo-xl"),l$t.forEach(t),y8r=r(Xqe," \u2014 "),eJ=n(Xqe,"A",{href:!0});var i$t=s(eJ);x8r=r(i$t,"TFTransfoXLModel"),i$t.forEach(t),$8r=r(Xqe," (Transformer-XL model)"),Xqe.forEach(t),k8r=i(D),iM=n(D,"LI",{});var zqe=s(iM);zTe=n(zqe,"STRONG",{});var d$t=s(zTe);S8r=r(d$t,"vit"),d$t.forEach(t),R8r=r(zqe," \u2014 "),oJ=n(zqe,"A",{href:!0});var c$t=s(oJ);P8r=r(c$t,"TFViTModel"),c$t.forEach(t),B8r=r(zqe," (ViT model)"),zqe.forEach(t),I8r=i(D),dM=n(D,"LI",{});var Qqe=s(dM);QTe=n(Qqe,"STRONG",{});var f$t=s(QTe);N8r=r(f$t,"vit_mae"),f$t.forEach(t),q8r=r(Qqe," \u2014 "),rJ=n(Qqe,"A",{href:!0});var m$t=s(rJ);j8r=r(m$t,"TFViTMAEModel"),m$t.forEach(t),D8r=r(Qqe," (ViTMAE model)"),Qqe.forEach(t),G8r=i(D),cM=n(D,"LI",{});var Wqe=s(cM);WTe=n(Wqe,"STRONG",{});var g$t=s(WTe);O8r=r(g$t,"wav2vec2"),g$t.forEach(t),V8r=r(Wqe," \u2014 "),tJ=n(Wqe,"A",{href:!0});var h$t=s(tJ);X8r=r(h$t,"TFWav2Vec2Model"),h$t.forEach(t),z8r=r(Wqe," (Wav2Vec2 model)"),Wqe.forEach(t),Q8r=i(D),fM=n(D,"LI",{});var Hqe=s(fM);HTe=n(Hqe,"STRONG",{});var p$t=s(HTe);W8r=r(p$t,"xlm"),p$t.forEach(t),H8r=r(Hqe," \u2014 "),aJ=n(Hqe,"A",{href:!0});var _$t=s(aJ);U8r=r(_$t,"TFXLMModel"),_$t.forEach(t),J8r=r(Hqe," (XLM model)"),Hqe.forEach(t),Y8r=i(D),mM=n(D,"LI",{});var Uqe=s(mM);UTe=n(Uqe,"STRONG",{});var u$t=s(UTe);K8r=r(u$t,"xlm-roberta"),u$t.forEach(t),Z8r=r(Uqe," \u2014 "),nJ=n(Uqe,"A",{href:!0});var b$t=s(nJ);e9r=r(b$t,"TFXLMRobertaModel"),b$t.forEach(t),o9r=r(Uqe," (XLM-RoBERTa model)"),Uqe.forEach(t),r9r=i(D),gM=n(D,"LI",{});var Jqe=s(gM);JTe=n(Jqe,"STRONG",{});var v$t=s(JTe);t9r=r(v$t,"xlnet"),v$t.forEach(t),a9r=r(Jqe," \u2014 "),sJ=n(Jqe,"A",{href:!0});var F$t=s(sJ);n9r=r(F$t,"TFXLNetModel"),F$t.forEach(t),s9r=r(Jqe," (XLNet model)"),Jqe.forEach(t),D.forEach(t),l9r=i($l),T(hM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),sze=i(f),dc=n(f,"H2",{class:!0});var hWe=s(dc);pM=n(hWe,"A",{id:!0,class:!0,href:!0});var T$t=s(pM);YTe=n(T$t,"SPAN",{});var M$t=s(YTe);T(Uy.$$.fragment,M$t),M$t.forEach(t),T$t.forEach(t),i9r=i(hWe),KTe=n(hWe,"SPAN",{});var E$t=s(KTe);d9r=r(E$t,"TFAutoModelForPreTraining"),E$t.forEach(t),hWe.forEach(t),lze=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(Jy.$$.fragment,kl),c9r=i(kl),cc=n(kl,"P",{});var yte=s(cc);f9r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=n(yte,"A",{href:!0});var C$t=s(lJ);m9r=r(C$t,"from_pretrained()"),C$t.forEach(t),g9r=r(yte," class method or the "),iJ=n(yte,"A",{href:!0});var w$t=s(iJ);h9r=r(w$t,"from_config()"),w$t.forEach(t),p9r=r(yte,` class
method.`),yte.forEach(t),_9r=i(kl),Yy=n(kl,"P",{});var pWe=s(Yy);u9r=r(pWe,"This class cannot be instantiated directly using "),ZTe=n(pWe,"CODE",{});var A$t=s(ZTe);b9r=r(A$t,"__init__()"),A$t.forEach(t),v9r=r(pWe," (throws an error)."),pWe.forEach(t),F9r=i(kl),Pt=n(kl,"DIV",{class:!0});var aA=s(Pt);T(Ky.$$.fragment,aA),T9r=i(aA),e8e=n(aA,"P",{});var L$t=s(e8e);M9r=r(L$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L$t.forEach(t),E9r=i(aA),fc=n(aA,"P",{});var xte=s(fc);C9r=r(xte,`Note:
Loading a model from its configuration file does `),o8e=n(xte,"STRONG",{});var y$t=s(o8e);w9r=r(y$t,"not"),y$t.forEach(t),A9r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(xte,"A",{href:!0});var x$t=s(dJ);L9r=r(x$t,"from_pretrained()"),x$t.forEach(t),y9r=r(xte," to load the model weights."),xte.forEach(t),x9r=i(aA),T(_M.$$.fragment,aA),aA.forEach(t),$9r=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(Zy.$$.fragment,Sl),k9r=i(Sl),r8e=n(Sl,"P",{});var $$t=s(r8e);S9r=r($$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$$t.forEach(t),R9r=i(Sl),ln=n(Sl,"P",{});var nA=s(ln);P9r=r(nA,"The model class to instantiate is selected based on the "),t8e=n(nA,"CODE",{});var k$t=s(t8e);B9r=r(k$t,"model_type"),k$t.forEach(t),I9r=r(nA,` property of the config object (either
passed as an argument or loaded from `),a8e=n(nA,"CODE",{});var S$t=s(a8e);N9r=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),q9r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=n(nA,"CODE",{});var R$t=s(n8e);j9r=r(R$t,"pretrained_model_name_or_path"),R$t.forEach(t),D9r=r(nA,":"),nA.forEach(t),G9r=i(Sl),se=n(Sl,"UL",{});var le=s(se);uM=n(le,"LI",{});var Yqe=s(uM);s8e=n(Yqe,"STRONG",{});var P$t=s(s8e);O9r=r(P$t,"albert"),P$t.forEach(t),V9r=r(Yqe," \u2014 "),cJ=n(Yqe,"A",{href:!0});var B$t=s(cJ);X9r=r(B$t,"TFAlbertForPreTraining"),B$t.forEach(t),z9r=r(Yqe," (ALBERT model)"),Yqe.forEach(t),Q9r=i(le),bM=n(le,"LI",{});var Kqe=s(bM);l8e=n(Kqe,"STRONG",{});var I$t=s(l8e);W9r=r(I$t,"bart"),I$t.forEach(t),H9r=r(Kqe," \u2014 "),fJ=n(Kqe,"A",{href:!0});var N$t=s(fJ);U9r=r(N$t,"TFBartForConditionalGeneration"),N$t.forEach(t),J9r=r(Kqe," (BART model)"),Kqe.forEach(t),Y9r=i(le),vM=n(le,"LI",{});var Zqe=s(vM);i8e=n(Zqe,"STRONG",{});var q$t=s(i8e);K9r=r(q$t,"bert"),q$t.forEach(t),Z9r=r(Zqe," \u2014 "),mJ=n(Zqe,"A",{href:!0});var j$t=s(mJ);eMr=r(j$t,"TFBertForPreTraining"),j$t.forEach(t),oMr=r(Zqe," (BERT model)"),Zqe.forEach(t),rMr=i(le),FM=n(le,"LI",{});var eje=s(FM);d8e=n(eje,"STRONG",{});var D$t=s(d8e);tMr=r(D$t,"camembert"),D$t.forEach(t),aMr=r(eje," \u2014 "),gJ=n(eje,"A",{href:!0});var G$t=s(gJ);nMr=r(G$t,"TFCamembertForMaskedLM"),G$t.forEach(t),sMr=r(eje," (CamemBERT model)"),eje.forEach(t),lMr=i(le),TM=n(le,"LI",{});var oje=s(TM);c8e=n(oje,"STRONG",{});var O$t=s(c8e);iMr=r(O$t,"ctrl"),O$t.forEach(t),dMr=r(oje," \u2014 "),hJ=n(oje,"A",{href:!0});var V$t=s(hJ);cMr=r(V$t,"TFCTRLLMHeadModel"),V$t.forEach(t),fMr=r(oje," (CTRL model)"),oje.forEach(t),mMr=i(le),MM=n(le,"LI",{});var rje=s(MM);f8e=n(rje,"STRONG",{});var X$t=s(f8e);gMr=r(X$t,"distilbert"),X$t.forEach(t),hMr=r(rje," \u2014 "),pJ=n(rje,"A",{href:!0});var z$t=s(pJ);pMr=r(z$t,"TFDistilBertForMaskedLM"),z$t.forEach(t),_Mr=r(rje," (DistilBERT model)"),rje.forEach(t),uMr=i(le),EM=n(le,"LI",{});var tje=s(EM);m8e=n(tje,"STRONG",{});var Q$t=s(m8e);bMr=r(Q$t,"electra"),Q$t.forEach(t),vMr=r(tje," \u2014 "),_J=n(tje,"A",{href:!0});var W$t=s(_J);FMr=r(W$t,"TFElectraForPreTraining"),W$t.forEach(t),TMr=r(tje," (ELECTRA model)"),tje.forEach(t),MMr=i(le),CM=n(le,"LI",{});var aje=s(CM);g8e=n(aje,"STRONG",{});var H$t=s(g8e);EMr=r(H$t,"flaubert"),H$t.forEach(t),CMr=r(aje," \u2014 "),uJ=n(aje,"A",{href:!0});var U$t=s(uJ);wMr=r(U$t,"TFFlaubertWithLMHeadModel"),U$t.forEach(t),AMr=r(aje," (FlauBERT model)"),aje.forEach(t),LMr=i(le),wM=n(le,"LI",{});var nje=s(wM);h8e=n(nje,"STRONG",{});var J$t=s(h8e);yMr=r(J$t,"funnel"),J$t.forEach(t),xMr=r(nje," \u2014 "),bJ=n(nje,"A",{href:!0});var Y$t=s(bJ);$Mr=r(Y$t,"TFFunnelForPreTraining"),Y$t.forEach(t),kMr=r(nje," (Funnel Transformer model)"),nje.forEach(t),SMr=i(le),AM=n(le,"LI",{});var sje=s(AM);p8e=n(sje,"STRONG",{});var K$t=s(p8e);RMr=r(K$t,"gpt2"),K$t.forEach(t),PMr=r(sje," \u2014 "),vJ=n(sje,"A",{href:!0});var Z$t=s(vJ);BMr=r(Z$t,"TFGPT2LMHeadModel"),Z$t.forEach(t),IMr=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),NMr=i(le),LM=n(le,"LI",{});var lje=s(LM);_8e=n(lje,"STRONG",{});var ekt=s(_8e);qMr=r(ekt,"layoutlm"),ekt.forEach(t),jMr=r(lje," \u2014 "),FJ=n(lje,"A",{href:!0});var okt=s(FJ);DMr=r(okt,"TFLayoutLMForMaskedLM"),okt.forEach(t),GMr=r(lje," (LayoutLM model)"),lje.forEach(t),OMr=i(le),yM=n(le,"LI",{});var ije=s(yM);u8e=n(ije,"STRONG",{});var rkt=s(u8e);VMr=r(rkt,"lxmert"),rkt.forEach(t),XMr=r(ije," \u2014 "),TJ=n(ije,"A",{href:!0});var tkt=s(TJ);zMr=r(tkt,"TFLxmertForPreTraining"),tkt.forEach(t),QMr=r(ije," (LXMERT model)"),ije.forEach(t),WMr=i(le),xM=n(le,"LI",{});var dje=s(xM);b8e=n(dje,"STRONG",{});var akt=s(b8e);HMr=r(akt,"mobilebert"),akt.forEach(t),UMr=r(dje," \u2014 "),MJ=n(dje,"A",{href:!0});var nkt=s(MJ);JMr=r(nkt,"TFMobileBertForPreTraining"),nkt.forEach(t),YMr=r(dje," (MobileBERT model)"),dje.forEach(t),KMr=i(le),$M=n(le,"LI",{});var cje=s($M);v8e=n(cje,"STRONG",{});var skt=s(v8e);ZMr=r(skt,"mpnet"),skt.forEach(t),e4r=r(cje," \u2014 "),EJ=n(cje,"A",{href:!0});var lkt=s(EJ);o4r=r(lkt,"TFMPNetForMaskedLM"),lkt.forEach(t),r4r=r(cje," (MPNet model)"),cje.forEach(t),t4r=i(le),kM=n(le,"LI",{});var fje=s(kM);F8e=n(fje,"STRONG",{});var ikt=s(F8e);a4r=r(ikt,"openai-gpt"),ikt.forEach(t),n4r=r(fje," \u2014 "),CJ=n(fje,"A",{href:!0});var dkt=s(CJ);s4r=r(dkt,"TFOpenAIGPTLMHeadModel"),dkt.forEach(t),l4r=r(fje," (OpenAI GPT model)"),fje.forEach(t),i4r=i(le),SM=n(le,"LI",{});var mje=s(SM);T8e=n(mje,"STRONG",{});var ckt=s(T8e);d4r=r(ckt,"roberta"),ckt.forEach(t),c4r=r(mje," \u2014 "),wJ=n(mje,"A",{href:!0});var fkt=s(wJ);f4r=r(fkt,"TFRobertaForMaskedLM"),fkt.forEach(t),m4r=r(mje," (RoBERTa model)"),mje.forEach(t),g4r=i(le),RM=n(le,"LI",{});var gje=s(RM);M8e=n(gje,"STRONG",{});var mkt=s(M8e);h4r=r(mkt,"t5"),mkt.forEach(t),p4r=r(gje," \u2014 "),AJ=n(gje,"A",{href:!0});var gkt=s(AJ);_4r=r(gkt,"TFT5ForConditionalGeneration"),gkt.forEach(t),u4r=r(gje," (T5 model)"),gje.forEach(t),b4r=i(le),PM=n(le,"LI",{});var hje=s(PM);E8e=n(hje,"STRONG",{});var hkt=s(E8e);v4r=r(hkt,"tapas"),hkt.forEach(t),F4r=r(hje," \u2014 "),LJ=n(hje,"A",{href:!0});var pkt=s(LJ);T4r=r(pkt,"TFTapasForMaskedLM"),pkt.forEach(t),M4r=r(hje," (TAPAS model)"),hje.forEach(t),E4r=i(le),BM=n(le,"LI",{});var pje=s(BM);C8e=n(pje,"STRONG",{});var _kt=s(C8e);C4r=r(_kt,"transfo-xl"),_kt.forEach(t),w4r=r(pje," \u2014 "),yJ=n(pje,"A",{href:!0});var ukt=s(yJ);A4r=r(ukt,"TFTransfoXLLMHeadModel"),ukt.forEach(t),L4r=r(pje," (Transformer-XL model)"),pje.forEach(t),y4r=i(le),IM=n(le,"LI",{});var _je=s(IM);w8e=n(_je,"STRONG",{});var bkt=s(w8e);x4r=r(bkt,"vit_mae"),bkt.forEach(t),$4r=r(_je," \u2014 "),xJ=n(_je,"A",{href:!0});var vkt=s(xJ);k4r=r(vkt,"TFViTMAEForPreTraining"),vkt.forEach(t),S4r=r(_je," (ViTMAE model)"),_je.forEach(t),R4r=i(le),NM=n(le,"LI",{});var uje=s(NM);A8e=n(uje,"STRONG",{});var Fkt=s(A8e);P4r=r(Fkt,"xlm"),Fkt.forEach(t),B4r=r(uje," \u2014 "),$J=n(uje,"A",{href:!0});var Tkt=s($J);I4r=r(Tkt,"TFXLMWithLMHeadModel"),Tkt.forEach(t),N4r=r(uje," (XLM model)"),uje.forEach(t),q4r=i(le),qM=n(le,"LI",{});var bje=s(qM);L8e=n(bje,"STRONG",{});var Mkt=s(L8e);j4r=r(Mkt,"xlm-roberta"),Mkt.forEach(t),D4r=r(bje," \u2014 "),kJ=n(bje,"A",{href:!0});var Ekt=s(kJ);G4r=r(Ekt,"TFXLMRobertaForMaskedLM"),Ekt.forEach(t),O4r=r(bje," (XLM-RoBERTa model)"),bje.forEach(t),V4r=i(le),jM=n(le,"LI",{});var vje=s(jM);y8e=n(vje,"STRONG",{});var Ckt=s(y8e);X4r=r(Ckt,"xlnet"),Ckt.forEach(t),z4r=r(vje," \u2014 "),SJ=n(vje,"A",{href:!0});var wkt=s(SJ);Q4r=r(wkt,"TFXLNetLMHeadModel"),wkt.forEach(t),W4r=r(vje," (XLNet model)"),vje.forEach(t),le.forEach(t),H4r=i(Sl),T(DM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),ize=i(f),mc=n(f,"H2",{class:!0});var _We=s(mc);GM=n(_We,"A",{id:!0,class:!0,href:!0});var Akt=s(GM);x8e=n(Akt,"SPAN",{});var Lkt=s(x8e);T(ex.$$.fragment,Lkt),Lkt.forEach(t),Akt.forEach(t),U4r=i(_We),$8e=n(_We,"SPAN",{});var ykt=s($8e);J4r=r(ykt,"TFAutoModelForCausalLM"),ykt.forEach(t),_We.forEach(t),dze=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(ox.$$.fragment,Rl),Y4r=i(Rl),gc=n(Rl,"P",{});var $te=s(gc);K4r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=n($te,"A",{href:!0});var xkt=s(RJ);Z4r=r(xkt,"from_pretrained()"),xkt.forEach(t),eEr=r($te," class method or the "),PJ=n($te,"A",{href:!0});var $kt=s(PJ);oEr=r($kt,"from_config()"),$kt.forEach(t),rEr=r($te,` class
method.`),$te.forEach(t),tEr=i(Rl),rx=n(Rl,"P",{});var uWe=s(rx);aEr=r(uWe,"This class cannot be instantiated directly using "),k8e=n(uWe,"CODE",{});var kkt=s(k8e);nEr=r(kkt,"__init__()"),kkt.forEach(t),sEr=r(uWe," (throws an error)."),uWe.forEach(t),lEr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var sA=s(Bt);T(tx.$$.fragment,sA),iEr=i(sA),S8e=n(sA,"P",{});var Skt=s(S8e);dEr=r(Skt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Skt.forEach(t),cEr=i(sA),hc=n(sA,"P",{});var kte=s(hc);fEr=r(kte,`Note:
Loading a model from its configuration file does `),R8e=n(kte,"STRONG",{});var Rkt=s(R8e);mEr=r(Rkt,"not"),Rkt.forEach(t),gEr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(kte,"A",{href:!0});var Pkt=s(BJ);hEr=r(Pkt,"from_pretrained()"),Pkt.forEach(t),pEr=r(kte," to load the model weights."),kte.forEach(t),_Er=i(sA),T(OM.$$.fragment,sA),sA.forEach(t),uEr=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(ax.$$.fragment,Pl),bEr=i(Pl),P8e=n(Pl,"P",{});var Bkt=s(P8e);vEr=r(Bkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bkt.forEach(t),FEr=i(Pl),dn=n(Pl,"P",{});var lA=s(dn);TEr=r(lA,"The model class to instantiate is selected based on the "),B8e=n(lA,"CODE",{});var Ikt=s(B8e);MEr=r(Ikt,"model_type"),Ikt.forEach(t),EEr=r(lA,` property of the config object (either
passed as an argument or loaded from `),I8e=n(lA,"CODE",{});var Nkt=s(I8e);CEr=r(Nkt,"pretrained_model_name_or_path"),Nkt.forEach(t),wEr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(lA,"CODE",{});var qkt=s(N8e);AEr=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),LEr=r(lA,":"),lA.forEach(t),yEr=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);VM=n(Ce,"LI",{});var Fje=s(VM);q8e=n(Fje,"STRONG",{});var jkt=s(q8e);xEr=r(jkt,"bert"),jkt.forEach(t),$Er=r(Fje," \u2014 "),IJ=n(Fje,"A",{href:!0});var Dkt=s(IJ);kEr=r(Dkt,"TFBertLMHeadModel"),Dkt.forEach(t),SEr=r(Fje," (BERT model)"),Fje.forEach(t),REr=i(Ce),XM=n(Ce,"LI",{});var Tje=s(XM);j8e=n(Tje,"STRONG",{});var Gkt=s(j8e);PEr=r(Gkt,"camembert"),Gkt.forEach(t),BEr=r(Tje," \u2014 "),NJ=n(Tje,"A",{href:!0});var Okt=s(NJ);IEr=r(Okt,"TFCamembertForCausalLM"),Okt.forEach(t),NEr=r(Tje," (CamemBERT model)"),Tje.forEach(t),qEr=i(Ce),zM=n(Ce,"LI",{});var Mje=s(zM);D8e=n(Mje,"STRONG",{});var Vkt=s(D8e);jEr=r(Vkt,"ctrl"),Vkt.forEach(t),DEr=r(Mje," \u2014 "),qJ=n(Mje,"A",{href:!0});var Xkt=s(qJ);GEr=r(Xkt,"TFCTRLLMHeadModel"),Xkt.forEach(t),OEr=r(Mje," (CTRL model)"),Mje.forEach(t),VEr=i(Ce),QM=n(Ce,"LI",{});var Eje=s(QM);G8e=n(Eje,"STRONG",{});var zkt=s(G8e);XEr=r(zkt,"gpt2"),zkt.forEach(t),zEr=r(Eje," \u2014 "),jJ=n(Eje,"A",{href:!0});var Qkt=s(jJ);QEr=r(Qkt,"TFGPT2LMHeadModel"),Qkt.forEach(t),WEr=r(Eje," (OpenAI GPT-2 model)"),Eje.forEach(t),HEr=i(Ce),WM=n(Ce,"LI",{});var Cje=s(WM);O8e=n(Cje,"STRONG",{});var Wkt=s(O8e);UEr=r(Wkt,"gptj"),Wkt.forEach(t),JEr=r(Cje," \u2014 "),DJ=n(Cje,"A",{href:!0});var Hkt=s(DJ);YEr=r(Hkt,"TFGPTJForCausalLM"),Hkt.forEach(t),KEr=r(Cje," (GPT-J model)"),Cje.forEach(t),ZEr=i(Ce),HM=n(Ce,"LI",{});var wje=s(HM);V8e=n(wje,"STRONG",{});var Ukt=s(V8e);eCr=r(Ukt,"openai-gpt"),Ukt.forEach(t),oCr=r(wje," \u2014 "),GJ=n(wje,"A",{href:!0});var Jkt=s(GJ);rCr=r(Jkt,"TFOpenAIGPTLMHeadModel"),Jkt.forEach(t),tCr=r(wje," (OpenAI GPT model)"),wje.forEach(t),aCr=i(Ce),UM=n(Ce,"LI",{});var Aje=s(UM);X8e=n(Aje,"STRONG",{});var Ykt=s(X8e);nCr=r(Ykt,"opt"),Ykt.forEach(t),sCr=r(Aje," \u2014 "),OJ=n(Aje,"A",{href:!0});var Kkt=s(OJ);lCr=r(Kkt,"TFOPTForCausalLM"),Kkt.forEach(t),iCr=r(Aje," (OPT model)"),Aje.forEach(t),dCr=i(Ce),JM=n(Ce,"LI",{});var Lje=s(JM);z8e=n(Lje,"STRONG",{});var Zkt=s(z8e);cCr=r(Zkt,"rembert"),Zkt.forEach(t),fCr=r(Lje," \u2014 "),VJ=n(Lje,"A",{href:!0});var eSt=s(VJ);mCr=r(eSt,"TFRemBertForCausalLM"),eSt.forEach(t),gCr=r(Lje," (RemBERT model)"),Lje.forEach(t),hCr=i(Ce),YM=n(Ce,"LI",{});var yje=s(YM);Q8e=n(yje,"STRONG",{});var oSt=s(Q8e);pCr=r(oSt,"roberta"),oSt.forEach(t),_Cr=r(yje," \u2014 "),XJ=n(yje,"A",{href:!0});var rSt=s(XJ);uCr=r(rSt,"TFRobertaForCausalLM"),rSt.forEach(t),bCr=r(yje," (RoBERTa model)"),yje.forEach(t),vCr=i(Ce),KM=n(Ce,"LI",{});var xje=s(KM);W8e=n(xje,"STRONG",{});var tSt=s(W8e);FCr=r(tSt,"roformer"),tSt.forEach(t),TCr=r(xje," \u2014 "),zJ=n(xje,"A",{href:!0});var aSt=s(zJ);MCr=r(aSt,"TFRoFormerForCausalLM"),aSt.forEach(t),ECr=r(xje," (RoFormer model)"),xje.forEach(t),CCr=i(Ce),ZM=n(Ce,"LI",{});var $je=s(ZM);H8e=n($je,"STRONG",{});var nSt=s(H8e);wCr=r(nSt,"transfo-xl"),nSt.forEach(t),ACr=r($je," \u2014 "),QJ=n($je,"A",{href:!0});var sSt=s(QJ);LCr=r(sSt,"TFTransfoXLLMHeadModel"),sSt.forEach(t),yCr=r($je," (Transformer-XL model)"),$je.forEach(t),xCr=i(Ce),e4=n(Ce,"LI",{});var kje=s(e4);U8e=n(kje,"STRONG",{});var lSt=s(U8e);$Cr=r(lSt,"xlm"),lSt.forEach(t),kCr=r(kje," \u2014 "),WJ=n(kje,"A",{href:!0});var iSt=s(WJ);SCr=r(iSt,"TFXLMWithLMHeadModel"),iSt.forEach(t),RCr=r(kje," (XLM model)"),kje.forEach(t),PCr=i(Ce),o4=n(Ce,"LI",{});var Sje=s(o4);J8e=n(Sje,"STRONG",{});var dSt=s(J8e);BCr=r(dSt,"xlnet"),dSt.forEach(t),ICr=r(Sje," \u2014 "),HJ=n(Sje,"A",{href:!0});var cSt=s(HJ);NCr=r(cSt,"TFXLNetLMHeadModel"),cSt.forEach(t),qCr=r(Sje," (XLNet model)"),Sje.forEach(t),Ce.forEach(t),jCr=i(Pl),T(r4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),cze=i(f),pc=n(f,"H2",{class:!0});var bWe=s(pc);t4=n(bWe,"A",{id:!0,class:!0,href:!0});var fSt=s(t4);Y8e=n(fSt,"SPAN",{});var mSt=s(Y8e);T(nx.$$.fragment,mSt),mSt.forEach(t),fSt.forEach(t),DCr=i(bWe),K8e=n(bWe,"SPAN",{});var gSt=s(K8e);GCr=r(gSt,"TFAutoModelForImageClassification"),gSt.forEach(t),bWe.forEach(t),fze=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(sx.$$.fragment,Bl),OCr=i(Bl),_c=n(Bl,"P",{});var Ste=s(_c);VCr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=n(Ste,"A",{href:!0});var hSt=s(UJ);XCr=r(hSt,"from_pretrained()"),hSt.forEach(t),zCr=r(Ste," class method or the "),JJ=n(Ste,"A",{href:!0});var pSt=s(JJ);QCr=r(pSt,"from_config()"),pSt.forEach(t),WCr=r(Ste,` class
method.`),Ste.forEach(t),HCr=i(Bl),lx=n(Bl,"P",{});var vWe=s(lx);UCr=r(vWe,"This class cannot be instantiated directly using "),Z8e=n(vWe,"CODE",{});var _St=s(Z8e);JCr=r(_St,"__init__()"),_St.forEach(t),YCr=r(vWe," (throws an error)."),vWe.forEach(t),KCr=i(Bl),It=n(Bl,"DIV",{class:!0});var iA=s(It);T(ix.$$.fragment,iA),ZCr=i(iA),e9e=n(iA,"P",{});var uSt=s(e9e);e3r=r(uSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uSt.forEach(t),o3r=i(iA),uc=n(iA,"P",{});var Rte=s(uc);r3r=r(Rte,`Note:
Loading a model from its configuration file does `),o9e=n(Rte,"STRONG",{});var bSt=s(o9e);t3r=r(bSt,"not"),bSt.forEach(t),a3r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Rte,"A",{href:!0});var vSt=s(YJ);n3r=r(vSt,"from_pretrained()"),vSt.forEach(t),s3r=r(Rte," to load the model weights."),Rte.forEach(t),l3r=i(iA),T(a4.$$.fragment,iA),iA.forEach(t),i3r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(dx.$$.fragment,Il),d3r=i(Il),r9e=n(Il,"P",{});var FSt=s(r9e);c3r=r(FSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FSt.forEach(t),f3r=i(Il),cn=n(Il,"P",{});var dA=s(cn);m3r=r(dA,"The model class to instantiate is selected based on the "),t9e=n(dA,"CODE",{});var TSt=s(t9e);g3r=r(TSt,"model_type"),TSt.forEach(t),h3r=r(dA,` property of the config object (either
passed as an argument or loaded from `),a9e=n(dA,"CODE",{});var MSt=s(a9e);p3r=r(MSt,"pretrained_model_name_or_path"),MSt.forEach(t),_3r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=n(dA,"CODE",{});var ESt=s(n9e);u3r=r(ESt,"pretrained_model_name_or_path"),ESt.forEach(t),b3r=r(dA,":"),dA.forEach(t),v3r=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);n4=n(ot,"LI",{});var Rje=s(n4);s9e=n(Rje,"STRONG",{});var CSt=s(s9e);F3r=r(CSt,"convnext"),CSt.forEach(t),T3r=r(Rje," \u2014 "),KJ=n(Rje,"A",{href:!0});var wSt=s(KJ);M3r=r(wSt,"TFConvNextForImageClassification"),wSt.forEach(t),E3r=r(Rje," (ConvNeXT model)"),Rje.forEach(t),C3r=i(ot),s4=n(ot,"LI",{});var Pje=s(s4);l9e=n(Pje,"STRONG",{});var ASt=s(l9e);w3r=r(ASt,"data2vec-vision"),ASt.forEach(t),A3r=r(Pje," \u2014 "),ZJ=n(Pje,"A",{href:!0});var LSt=s(ZJ);L3r=r(LSt,"TFData2VecVisionForImageClassification"),LSt.forEach(t),y3r=r(Pje," (Data2VecVision model)"),Pje.forEach(t),x3r=i(ot),Ys=n(ot,"LI",{});var PS=s(Ys);i9e=n(PS,"STRONG",{});var ySt=s(i9e);$3r=r(ySt,"deit"),ySt.forEach(t),k3r=r(PS," \u2014 "),eY=n(PS,"A",{href:!0});var xSt=s(eY);S3r=r(xSt,"TFDeiTForImageClassification"),xSt.forEach(t),R3r=r(PS," or "),oY=n(PS,"A",{href:!0});var $St=s(oY);P3r=r($St,"TFDeiTForImageClassificationWithTeacher"),$St.forEach(t),B3r=r(PS," (DeiT model)"),PS.forEach(t),I3r=i(ot),l4=n(ot,"LI",{});var Bje=s(l4);d9e=n(Bje,"STRONG",{});var kSt=s(d9e);N3r=r(kSt,"regnet"),kSt.forEach(t),q3r=r(Bje," \u2014 "),rY=n(Bje,"A",{href:!0});var SSt=s(rY);j3r=r(SSt,"TFRegNetForImageClassification"),SSt.forEach(t),D3r=r(Bje," (RegNet model)"),Bje.forEach(t),G3r=i(ot),i4=n(ot,"LI",{});var Ije=s(i4);c9e=n(Ije,"STRONG",{});var RSt=s(c9e);O3r=r(RSt,"resnet"),RSt.forEach(t),V3r=r(Ije," \u2014 "),tY=n(Ije,"A",{href:!0});var PSt=s(tY);X3r=r(PSt,"TFResNetForImageClassification"),PSt.forEach(t),z3r=r(Ije," (ResNet model)"),Ije.forEach(t),Q3r=i(ot),d4=n(ot,"LI",{});var Nje=s(d4);f9e=n(Nje,"STRONG",{});var BSt=s(f9e);W3r=r(BSt,"swin"),BSt.forEach(t),H3r=r(Nje," \u2014 "),aY=n(Nje,"A",{href:!0});var ISt=s(aY);U3r=r(ISt,"TFSwinForImageClassification"),ISt.forEach(t),J3r=r(Nje," (Swin Transformer model)"),Nje.forEach(t),Y3r=i(ot),c4=n(ot,"LI",{});var qje=s(c4);m9e=n(qje,"STRONG",{});var NSt=s(m9e);K3r=r(NSt,"vit"),NSt.forEach(t),Z3r=r(qje," \u2014 "),nY=n(qje,"A",{href:!0});var qSt=s(nY);e5r=r(qSt,"TFViTForImageClassification"),qSt.forEach(t),o5r=r(qje," (ViT model)"),qje.forEach(t),ot.forEach(t),r5r=i(Il),T(f4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),mze=i(f),bc=n(f,"H2",{class:!0});var FWe=s(bc);m4=n(FWe,"A",{id:!0,class:!0,href:!0});var jSt=s(m4);g9e=n(jSt,"SPAN",{});var DSt=s(g9e);T(cx.$$.fragment,DSt),DSt.forEach(t),jSt.forEach(t),t5r=i(FWe),h9e=n(FWe,"SPAN",{});var GSt=s(h9e);a5r=r(GSt,"TFAutoModelForMaskedLM"),GSt.forEach(t),FWe.forEach(t),gze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(fx.$$.fragment,Nl),n5r=i(Nl),vc=n(Nl,"P",{});var Pte=s(vc);s5r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sY=n(Pte,"A",{href:!0});var OSt=s(sY);l5r=r(OSt,"from_pretrained()"),OSt.forEach(t),i5r=r(Pte," class method or the "),lY=n(Pte,"A",{href:!0});var VSt=s(lY);d5r=r(VSt,"from_config()"),VSt.forEach(t),c5r=r(Pte,` class
method.`),Pte.forEach(t),f5r=i(Nl),mx=n(Nl,"P",{});var TWe=s(mx);m5r=r(TWe,"This class cannot be instantiated directly using "),p9e=n(TWe,"CODE",{});var XSt=s(p9e);g5r=r(XSt,"__init__()"),XSt.forEach(t),h5r=r(TWe," (throws an error)."),TWe.forEach(t),p5r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var cA=s(Nt);T(gx.$$.fragment,cA),_5r=i(cA),_9e=n(cA,"P",{});var zSt=s(_9e);u5r=r(zSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zSt.forEach(t),b5r=i(cA),Fc=n(cA,"P",{});var Bte=s(Fc);v5r=r(Bte,`Note:
Loading a model from its configuration file does `),u9e=n(Bte,"STRONG",{});var QSt=s(u9e);F5r=r(QSt,"not"),QSt.forEach(t),T5r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(Bte,"A",{href:!0});var WSt=s(iY);M5r=r(WSt,"from_pretrained()"),WSt.forEach(t),E5r=r(Bte," to load the model weights."),Bte.forEach(t),C5r=i(cA),T(g4.$$.fragment,cA),cA.forEach(t),w5r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(hx.$$.fragment,ql),A5r=i(ql),b9e=n(ql,"P",{});var HSt=s(b9e);L5r=r(HSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSt.forEach(t),y5r=i(ql),fn=n(ql,"P",{});var fA=s(fn);x5r=r(fA,"The model class to instantiate is selected based on the "),v9e=n(fA,"CODE",{});var USt=s(v9e);$5r=r(USt,"model_type"),USt.forEach(t),k5r=r(fA,` property of the config object (either
passed as an argument or loaded from `),F9e=n(fA,"CODE",{});var JSt=s(F9e);S5r=r(JSt,"pretrained_model_name_or_path"),JSt.forEach(t),R5r=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=n(fA,"CODE",{});var YSt=s(T9e);P5r=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),B5r=r(fA,":"),fA.forEach(t),I5r=i(ql),ie=n(ql,"UL",{});var fe=s(ie);h4=n(fe,"LI",{});var jje=s(h4);M9e=n(jje,"STRONG",{});var KSt=s(M9e);N5r=r(KSt,"albert"),KSt.forEach(t),q5r=r(jje," \u2014 "),dY=n(jje,"A",{href:!0});var ZSt=s(dY);j5r=r(ZSt,"TFAlbertForMaskedLM"),ZSt.forEach(t),D5r=r(jje," (ALBERT model)"),jje.forEach(t),G5r=i(fe),p4=n(fe,"LI",{});var Dje=s(p4);E9e=n(Dje,"STRONG",{});var eRt=s(E9e);O5r=r(eRt,"bert"),eRt.forEach(t),V5r=r(Dje," \u2014 "),cY=n(Dje,"A",{href:!0});var oRt=s(cY);X5r=r(oRt,"TFBertForMaskedLM"),oRt.forEach(t),z5r=r(Dje," (BERT model)"),Dje.forEach(t),Q5r=i(fe),_4=n(fe,"LI",{});var Gje=s(_4);C9e=n(Gje,"STRONG",{});var rRt=s(C9e);W5r=r(rRt,"camembert"),rRt.forEach(t),H5r=r(Gje," \u2014 "),fY=n(Gje,"A",{href:!0});var tRt=s(fY);U5r=r(tRt,"TFCamembertForMaskedLM"),tRt.forEach(t),J5r=r(Gje," (CamemBERT model)"),Gje.forEach(t),Y5r=i(fe),u4=n(fe,"LI",{});var Oje=s(u4);w9e=n(Oje,"STRONG",{});var aRt=s(w9e);K5r=r(aRt,"convbert"),aRt.forEach(t),Z5r=r(Oje," \u2014 "),mY=n(Oje,"A",{href:!0});var nRt=s(mY);e0r=r(nRt,"TFConvBertForMaskedLM"),nRt.forEach(t),o0r=r(Oje," (ConvBERT model)"),Oje.forEach(t),r0r=i(fe),b4=n(fe,"LI",{});var Vje=s(b4);A9e=n(Vje,"STRONG",{});var sRt=s(A9e);t0r=r(sRt,"deberta"),sRt.forEach(t),a0r=r(Vje," \u2014 "),gY=n(Vje,"A",{href:!0});var lRt=s(gY);n0r=r(lRt,"TFDebertaForMaskedLM"),lRt.forEach(t),s0r=r(Vje," (DeBERTa model)"),Vje.forEach(t),l0r=i(fe),v4=n(fe,"LI",{});var Xje=s(v4);L9e=n(Xje,"STRONG",{});var iRt=s(L9e);i0r=r(iRt,"deberta-v2"),iRt.forEach(t),d0r=r(Xje," \u2014 "),hY=n(Xje,"A",{href:!0});var dRt=s(hY);c0r=r(dRt,"TFDebertaV2ForMaskedLM"),dRt.forEach(t),f0r=r(Xje," (DeBERTa-v2 model)"),Xje.forEach(t),m0r=i(fe),F4=n(fe,"LI",{});var zje=s(F4);y9e=n(zje,"STRONG",{});var cRt=s(y9e);g0r=r(cRt,"distilbert"),cRt.forEach(t),h0r=r(zje," \u2014 "),pY=n(zje,"A",{href:!0});var fRt=s(pY);p0r=r(fRt,"TFDistilBertForMaskedLM"),fRt.forEach(t),_0r=r(zje," (DistilBERT model)"),zje.forEach(t),u0r=i(fe),T4=n(fe,"LI",{});var Qje=s(T4);x9e=n(Qje,"STRONG",{});var mRt=s(x9e);b0r=r(mRt,"electra"),mRt.forEach(t),v0r=r(Qje," \u2014 "),_Y=n(Qje,"A",{href:!0});var gRt=s(_Y);F0r=r(gRt,"TFElectraForMaskedLM"),gRt.forEach(t),T0r=r(Qje," (ELECTRA model)"),Qje.forEach(t),M0r=i(fe),M4=n(fe,"LI",{});var Wje=s(M4);$9e=n(Wje,"STRONG",{});var hRt=s($9e);E0r=r(hRt,"flaubert"),hRt.forEach(t),C0r=r(Wje," \u2014 "),uY=n(Wje,"A",{href:!0});var pRt=s(uY);w0r=r(pRt,"TFFlaubertWithLMHeadModel"),pRt.forEach(t),A0r=r(Wje," (FlauBERT model)"),Wje.forEach(t),L0r=i(fe),E4=n(fe,"LI",{});var Hje=s(E4);k9e=n(Hje,"STRONG",{});var _Rt=s(k9e);y0r=r(_Rt,"funnel"),_Rt.forEach(t),x0r=r(Hje," \u2014 "),bY=n(Hje,"A",{href:!0});var uRt=s(bY);$0r=r(uRt,"TFFunnelForMaskedLM"),uRt.forEach(t),k0r=r(Hje," (Funnel Transformer model)"),Hje.forEach(t),S0r=i(fe),C4=n(fe,"LI",{});var Uje=s(C4);S9e=n(Uje,"STRONG",{});var bRt=s(S9e);R0r=r(bRt,"layoutlm"),bRt.forEach(t),P0r=r(Uje," \u2014 "),vY=n(Uje,"A",{href:!0});var vRt=s(vY);B0r=r(vRt,"TFLayoutLMForMaskedLM"),vRt.forEach(t),I0r=r(Uje," (LayoutLM model)"),Uje.forEach(t),N0r=i(fe),w4=n(fe,"LI",{});var Jje=s(w4);R9e=n(Jje,"STRONG",{});var FRt=s(R9e);q0r=r(FRt,"longformer"),FRt.forEach(t),j0r=r(Jje," \u2014 "),FY=n(Jje,"A",{href:!0});var TRt=s(FY);D0r=r(TRt,"TFLongformerForMaskedLM"),TRt.forEach(t),G0r=r(Jje," (Longformer model)"),Jje.forEach(t),O0r=i(fe),A4=n(fe,"LI",{});var Yje=s(A4);P9e=n(Yje,"STRONG",{});var MRt=s(P9e);V0r=r(MRt,"mobilebert"),MRt.forEach(t),X0r=r(Yje," \u2014 "),TY=n(Yje,"A",{href:!0});var ERt=s(TY);z0r=r(ERt,"TFMobileBertForMaskedLM"),ERt.forEach(t),Q0r=r(Yje," (MobileBERT model)"),Yje.forEach(t),W0r=i(fe),L4=n(fe,"LI",{});var Kje=s(L4);B9e=n(Kje,"STRONG",{});var CRt=s(B9e);H0r=r(CRt,"mpnet"),CRt.forEach(t),U0r=r(Kje," \u2014 "),MY=n(Kje,"A",{href:!0});var wRt=s(MY);J0r=r(wRt,"TFMPNetForMaskedLM"),wRt.forEach(t),Y0r=r(Kje," (MPNet model)"),Kje.forEach(t),K0r=i(fe),y4=n(fe,"LI",{});var Zje=s(y4);I9e=n(Zje,"STRONG",{});var ARt=s(I9e);Z0r=r(ARt,"rembert"),ARt.forEach(t),ewr=r(Zje," \u2014 "),EY=n(Zje,"A",{href:!0});var LRt=s(EY);owr=r(LRt,"TFRemBertForMaskedLM"),LRt.forEach(t),rwr=r(Zje," (RemBERT model)"),Zje.forEach(t),twr=i(fe),x4=n(fe,"LI",{});var eDe=s(x4);N9e=n(eDe,"STRONG",{});var yRt=s(N9e);awr=r(yRt,"roberta"),yRt.forEach(t),nwr=r(eDe," \u2014 "),CY=n(eDe,"A",{href:!0});var xRt=s(CY);swr=r(xRt,"TFRobertaForMaskedLM"),xRt.forEach(t),lwr=r(eDe," (RoBERTa model)"),eDe.forEach(t),iwr=i(fe),$4=n(fe,"LI",{});var oDe=s($4);q9e=n(oDe,"STRONG",{});var $Rt=s(q9e);dwr=r($Rt,"roformer"),$Rt.forEach(t),cwr=r(oDe," \u2014 "),wY=n(oDe,"A",{href:!0});var kRt=s(wY);fwr=r(kRt,"TFRoFormerForMaskedLM"),kRt.forEach(t),mwr=r(oDe," (RoFormer model)"),oDe.forEach(t),gwr=i(fe),k4=n(fe,"LI",{});var rDe=s(k4);j9e=n(rDe,"STRONG",{});var SRt=s(j9e);hwr=r(SRt,"tapas"),SRt.forEach(t),pwr=r(rDe," \u2014 "),AY=n(rDe,"A",{href:!0});var RRt=s(AY);_wr=r(RRt,"TFTapasForMaskedLM"),RRt.forEach(t),uwr=r(rDe," (TAPAS model)"),rDe.forEach(t),bwr=i(fe),S4=n(fe,"LI",{});var tDe=s(S4);D9e=n(tDe,"STRONG",{});var PRt=s(D9e);vwr=r(PRt,"xlm"),PRt.forEach(t),Fwr=r(tDe," \u2014 "),LY=n(tDe,"A",{href:!0});var BRt=s(LY);Twr=r(BRt,"TFXLMWithLMHeadModel"),BRt.forEach(t),Mwr=r(tDe," (XLM model)"),tDe.forEach(t),Ewr=i(fe),R4=n(fe,"LI",{});var aDe=s(R4);G9e=n(aDe,"STRONG",{});var IRt=s(G9e);Cwr=r(IRt,"xlm-roberta"),IRt.forEach(t),wwr=r(aDe," \u2014 "),yY=n(aDe,"A",{href:!0});var NRt=s(yY);Awr=r(NRt,"TFXLMRobertaForMaskedLM"),NRt.forEach(t),Lwr=r(aDe," (XLM-RoBERTa model)"),aDe.forEach(t),fe.forEach(t),ywr=i(ql),T(P4.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),hze=i(f),Tc=n(f,"H2",{class:!0});var MWe=s(Tc);B4=n(MWe,"A",{id:!0,class:!0,href:!0});var qRt=s(B4);O9e=n(qRt,"SPAN",{});var jRt=s(O9e);T(px.$$.fragment,jRt),jRt.forEach(t),qRt.forEach(t),xwr=i(MWe),V9e=n(MWe,"SPAN",{});var DRt=s(V9e);$wr=r(DRt,"TFAutoModelForSeq2SeqLM"),DRt.forEach(t),MWe.forEach(t),pze=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(_x.$$.fragment,jl),kwr=i(jl),Mc=n(jl,"P",{});var Ite=s(Mc);Swr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=n(Ite,"A",{href:!0});var GRt=s(xY);Rwr=r(GRt,"from_pretrained()"),GRt.forEach(t),Pwr=r(Ite," class method or the "),$Y=n(Ite,"A",{href:!0});var ORt=s($Y);Bwr=r(ORt,"from_config()"),ORt.forEach(t),Iwr=r(Ite,` class
method.`),Ite.forEach(t),Nwr=i(jl),ux=n(jl,"P",{});var EWe=s(ux);qwr=r(EWe,"This class cannot be instantiated directly using "),X9e=n(EWe,"CODE",{});var VRt=s(X9e);jwr=r(VRt,"__init__()"),VRt.forEach(t),Dwr=r(EWe," (throws an error)."),EWe.forEach(t),Gwr=i(jl),qt=n(jl,"DIV",{class:!0});var mA=s(qt);T(bx.$$.fragment,mA),Owr=i(mA),z9e=n(mA,"P",{});var XRt=s(z9e);Vwr=r(XRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XRt.forEach(t),Xwr=i(mA),Ec=n(mA,"P",{});var Nte=s(Ec);zwr=r(Nte,`Note:
Loading a model from its configuration file does `),Q9e=n(Nte,"STRONG",{});var zRt=s(Q9e);Qwr=r(zRt,"not"),zRt.forEach(t),Wwr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(Nte,"A",{href:!0});var QRt=s(kY);Hwr=r(QRt,"from_pretrained()"),QRt.forEach(t),Uwr=r(Nte," to load the model weights."),Nte.forEach(t),Jwr=i(mA),T(I4.$$.fragment,mA),mA.forEach(t),Ywr=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(vx.$$.fragment,Dl),Kwr=i(Dl),W9e=n(Dl,"P",{});var WRt=s(W9e);Zwr=r(WRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WRt.forEach(t),eAr=i(Dl),mn=n(Dl,"P",{});var gA=s(mn);oAr=r(gA,"The model class to instantiate is selected based on the "),H9e=n(gA,"CODE",{});var HRt=s(H9e);rAr=r(HRt,"model_type"),HRt.forEach(t),tAr=r(gA,` property of the config object (either
passed as an argument or loaded from `),U9e=n(gA,"CODE",{});var URt=s(U9e);aAr=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),nAr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=n(gA,"CODE",{});var JRt=s(J9e);sAr=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),lAr=r(gA,":"),gA.forEach(t),iAr=i(Dl),ye=n(Dl,"UL",{});var Ie=s(ye);N4=n(Ie,"LI",{});var nDe=s(N4);Y9e=n(nDe,"STRONG",{});var YRt=s(Y9e);dAr=r(YRt,"bart"),YRt.forEach(t),cAr=r(nDe," \u2014 "),SY=n(nDe,"A",{href:!0});var KRt=s(SY);fAr=r(KRt,"TFBartForConditionalGeneration"),KRt.forEach(t),mAr=r(nDe," (BART model)"),nDe.forEach(t),gAr=i(Ie),q4=n(Ie,"LI",{});var sDe=s(q4);K9e=n(sDe,"STRONG",{});var ZRt=s(K9e);hAr=r(ZRt,"blenderbot"),ZRt.forEach(t),pAr=r(sDe," \u2014 "),RY=n(sDe,"A",{href:!0});var ePt=s(RY);_Ar=r(ePt,"TFBlenderbotForConditionalGeneration"),ePt.forEach(t),uAr=r(sDe," (Blenderbot model)"),sDe.forEach(t),bAr=i(Ie),j4=n(Ie,"LI",{});var lDe=s(j4);Z9e=n(lDe,"STRONG",{});var oPt=s(Z9e);vAr=r(oPt,"blenderbot-small"),oPt.forEach(t),FAr=r(lDe," \u2014 "),PY=n(lDe,"A",{href:!0});var rPt=s(PY);TAr=r(rPt,"TFBlenderbotSmallForConditionalGeneration"),rPt.forEach(t),MAr=r(lDe," (BlenderbotSmall model)"),lDe.forEach(t),EAr=i(Ie),D4=n(Ie,"LI",{});var iDe=s(D4);eMe=n(iDe,"STRONG",{});var tPt=s(eMe);CAr=r(tPt,"encoder-decoder"),tPt.forEach(t),wAr=r(iDe," \u2014 "),BY=n(iDe,"A",{href:!0});var aPt=s(BY);AAr=r(aPt,"TFEncoderDecoderModel"),aPt.forEach(t),LAr=r(iDe," (Encoder decoder model)"),iDe.forEach(t),yAr=i(Ie),G4=n(Ie,"LI",{});var dDe=s(G4);oMe=n(dDe,"STRONG",{});var nPt=s(oMe);xAr=r(nPt,"led"),nPt.forEach(t),$Ar=r(dDe," \u2014 "),IY=n(dDe,"A",{href:!0});var sPt=s(IY);kAr=r(sPt,"TFLEDForConditionalGeneration"),sPt.forEach(t),SAr=r(dDe," (LED model)"),dDe.forEach(t),RAr=i(Ie),O4=n(Ie,"LI",{});var cDe=s(O4);rMe=n(cDe,"STRONG",{});var lPt=s(rMe);PAr=r(lPt,"marian"),lPt.forEach(t),BAr=r(cDe," \u2014 "),NY=n(cDe,"A",{href:!0});var iPt=s(NY);IAr=r(iPt,"TFMarianMTModel"),iPt.forEach(t),NAr=r(cDe," (Marian model)"),cDe.forEach(t),qAr=i(Ie),V4=n(Ie,"LI",{});var fDe=s(V4);tMe=n(fDe,"STRONG",{});var dPt=s(tMe);jAr=r(dPt,"mbart"),dPt.forEach(t),DAr=r(fDe," \u2014 "),qY=n(fDe,"A",{href:!0});var cPt=s(qY);GAr=r(cPt,"TFMBartForConditionalGeneration"),cPt.forEach(t),OAr=r(fDe," (mBART model)"),fDe.forEach(t),VAr=i(Ie),X4=n(Ie,"LI",{});var mDe=s(X4);aMe=n(mDe,"STRONG",{});var fPt=s(aMe);XAr=r(fPt,"mt5"),fPt.forEach(t),zAr=r(mDe," \u2014 "),jY=n(mDe,"A",{href:!0});var mPt=s(jY);QAr=r(mPt,"TFMT5ForConditionalGeneration"),mPt.forEach(t),WAr=r(mDe," (MT5 model)"),mDe.forEach(t),HAr=i(Ie),z4=n(Ie,"LI",{});var gDe=s(z4);nMe=n(gDe,"STRONG",{});var gPt=s(nMe);UAr=r(gPt,"pegasus"),gPt.forEach(t),JAr=r(gDe," \u2014 "),DY=n(gDe,"A",{href:!0});var hPt=s(DY);YAr=r(hPt,"TFPegasusForConditionalGeneration"),hPt.forEach(t),KAr=r(gDe," (Pegasus model)"),gDe.forEach(t),ZAr=i(Ie),Q4=n(Ie,"LI",{});var hDe=s(Q4);sMe=n(hDe,"STRONG",{});var pPt=s(sMe);e7r=r(pPt,"t5"),pPt.forEach(t),o7r=r(hDe," \u2014 "),GY=n(hDe,"A",{href:!0});var _Pt=s(GY);r7r=r(_Pt,"TFT5ForConditionalGeneration"),_Pt.forEach(t),t7r=r(hDe," (T5 model)"),hDe.forEach(t),Ie.forEach(t),a7r=i(Dl),T(W4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),_ze=i(f),Cc=n(f,"H2",{class:!0});var CWe=s(Cc);H4=n(CWe,"A",{id:!0,class:!0,href:!0});var uPt=s(H4);lMe=n(uPt,"SPAN",{});var bPt=s(lMe);T(Fx.$$.fragment,bPt),bPt.forEach(t),uPt.forEach(t),n7r=i(CWe),iMe=n(CWe,"SPAN",{});var vPt=s(iMe);s7r=r(vPt,"TFAutoModelForSequenceClassification"),vPt.forEach(t),CWe.forEach(t),uze=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(Tx.$$.fragment,Gl),l7r=i(Gl),wc=n(Gl,"P",{});var qte=s(wc);i7r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OY=n(qte,"A",{href:!0});var FPt=s(OY);d7r=r(FPt,"from_pretrained()"),FPt.forEach(t),c7r=r(qte," class method or the "),VY=n(qte,"A",{href:!0});var TPt=s(VY);f7r=r(TPt,"from_config()"),TPt.forEach(t),m7r=r(qte,` class
method.`),qte.forEach(t),g7r=i(Gl),Mx=n(Gl,"P",{});var wWe=s(Mx);h7r=r(wWe,"This class cannot be instantiated directly using "),dMe=n(wWe,"CODE",{});var MPt=s(dMe);p7r=r(MPt,"__init__()"),MPt.forEach(t),_7r=r(wWe," (throws an error)."),wWe.forEach(t),u7r=i(Gl),jt=n(Gl,"DIV",{class:!0});var hA=s(jt);T(Ex.$$.fragment,hA),b7r=i(hA),cMe=n(hA,"P",{});var EPt=s(cMe);v7r=r(EPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),EPt.forEach(t),F7r=i(hA),Ac=n(hA,"P",{});var jte=s(Ac);T7r=r(jte,`Note:
Loading a model from its configuration file does `),fMe=n(jte,"STRONG",{});var CPt=s(fMe);M7r=r(CPt,"not"),CPt.forEach(t),E7r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(jte,"A",{href:!0});var wPt=s(XY);C7r=r(wPt,"from_pretrained()"),wPt.forEach(t),w7r=r(jte," to load the model weights."),jte.forEach(t),A7r=i(hA),T(U4.$$.fragment,hA),hA.forEach(t),L7r=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(Cx.$$.fragment,Ol),y7r=i(Ol),mMe=n(Ol,"P",{});var APt=s(mMe);x7r=r(APt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),APt.forEach(t),$7r=i(Ol),gn=n(Ol,"P",{});var pA=s(gn);k7r=r(pA,"The model class to instantiate is selected based on the "),gMe=n(pA,"CODE",{});var LPt=s(gMe);S7r=r(LPt,"model_type"),LPt.forEach(t),R7r=r(pA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(pA,"CODE",{});var yPt=s(hMe);P7r=r(yPt,"pretrained_model_name_or_path"),yPt.forEach(t),B7r=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(pA,"CODE",{});var xPt=s(pMe);I7r=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),N7r=r(pA,":"),pA.forEach(t),q7r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);J4=n(ne,"LI",{});var pDe=s(J4);_Me=n(pDe,"STRONG",{});var $Pt=s(_Me);j7r=r($Pt,"albert"),$Pt.forEach(t),D7r=r(pDe," \u2014 "),zY=n(pDe,"A",{href:!0});var kPt=s(zY);G7r=r(kPt,"TFAlbertForSequenceClassification"),kPt.forEach(t),O7r=r(pDe," (ALBERT model)"),pDe.forEach(t),V7r=i(ne),Y4=n(ne,"LI",{});var _De=s(Y4);uMe=n(_De,"STRONG",{});var SPt=s(uMe);X7r=r(SPt,"bert"),SPt.forEach(t),z7r=r(_De," \u2014 "),QY=n(_De,"A",{href:!0});var RPt=s(QY);Q7r=r(RPt,"TFBertForSequenceClassification"),RPt.forEach(t),W7r=r(_De," (BERT model)"),_De.forEach(t),H7r=i(ne),K4=n(ne,"LI",{});var uDe=s(K4);bMe=n(uDe,"STRONG",{});var PPt=s(bMe);U7r=r(PPt,"camembert"),PPt.forEach(t),J7r=r(uDe," \u2014 "),WY=n(uDe,"A",{href:!0});var BPt=s(WY);Y7r=r(BPt,"TFCamembertForSequenceClassification"),BPt.forEach(t),K7r=r(uDe," (CamemBERT model)"),uDe.forEach(t),Z7r=i(ne),Z4=n(ne,"LI",{});var bDe=s(Z4);vMe=n(bDe,"STRONG",{});var IPt=s(vMe);eLr=r(IPt,"convbert"),IPt.forEach(t),oLr=r(bDe," \u2014 "),HY=n(bDe,"A",{href:!0});var NPt=s(HY);rLr=r(NPt,"TFConvBertForSequenceClassification"),NPt.forEach(t),tLr=r(bDe," (ConvBERT model)"),bDe.forEach(t),aLr=i(ne),eE=n(ne,"LI",{});var vDe=s(eE);FMe=n(vDe,"STRONG",{});var qPt=s(FMe);nLr=r(qPt,"ctrl"),qPt.forEach(t),sLr=r(vDe," \u2014 "),UY=n(vDe,"A",{href:!0});var jPt=s(UY);lLr=r(jPt,"TFCTRLForSequenceClassification"),jPt.forEach(t),iLr=r(vDe," (CTRL model)"),vDe.forEach(t),dLr=i(ne),oE=n(ne,"LI",{});var FDe=s(oE);TMe=n(FDe,"STRONG",{});var DPt=s(TMe);cLr=r(DPt,"deberta"),DPt.forEach(t),fLr=r(FDe," \u2014 "),JY=n(FDe,"A",{href:!0});var GPt=s(JY);mLr=r(GPt,"TFDebertaForSequenceClassification"),GPt.forEach(t),gLr=r(FDe," (DeBERTa model)"),FDe.forEach(t),hLr=i(ne),rE=n(ne,"LI",{});var TDe=s(rE);MMe=n(TDe,"STRONG",{});var OPt=s(MMe);pLr=r(OPt,"deberta-v2"),OPt.forEach(t),_Lr=r(TDe," \u2014 "),YY=n(TDe,"A",{href:!0});var VPt=s(YY);uLr=r(VPt,"TFDebertaV2ForSequenceClassification"),VPt.forEach(t),bLr=r(TDe," (DeBERTa-v2 model)"),TDe.forEach(t),vLr=i(ne),tE=n(ne,"LI",{});var MDe=s(tE);EMe=n(MDe,"STRONG",{});var XPt=s(EMe);FLr=r(XPt,"distilbert"),XPt.forEach(t),TLr=r(MDe," \u2014 "),KY=n(MDe,"A",{href:!0});var zPt=s(KY);MLr=r(zPt,"TFDistilBertForSequenceClassification"),zPt.forEach(t),ELr=r(MDe," (DistilBERT model)"),MDe.forEach(t),CLr=i(ne),aE=n(ne,"LI",{});var EDe=s(aE);CMe=n(EDe,"STRONG",{});var QPt=s(CMe);wLr=r(QPt,"electra"),QPt.forEach(t),ALr=r(EDe," \u2014 "),ZY=n(EDe,"A",{href:!0});var WPt=s(ZY);LLr=r(WPt,"TFElectraForSequenceClassification"),WPt.forEach(t),yLr=r(EDe," (ELECTRA model)"),EDe.forEach(t),xLr=i(ne),nE=n(ne,"LI",{});var CDe=s(nE);wMe=n(CDe,"STRONG",{});var HPt=s(wMe);$Lr=r(HPt,"flaubert"),HPt.forEach(t),kLr=r(CDe," \u2014 "),eK=n(CDe,"A",{href:!0});var UPt=s(eK);SLr=r(UPt,"TFFlaubertForSequenceClassification"),UPt.forEach(t),RLr=r(CDe," (FlauBERT model)"),CDe.forEach(t),PLr=i(ne),sE=n(ne,"LI",{});var wDe=s(sE);AMe=n(wDe,"STRONG",{});var JPt=s(AMe);BLr=r(JPt,"funnel"),JPt.forEach(t),ILr=r(wDe," \u2014 "),oK=n(wDe,"A",{href:!0});var YPt=s(oK);NLr=r(YPt,"TFFunnelForSequenceClassification"),YPt.forEach(t),qLr=r(wDe," (Funnel Transformer model)"),wDe.forEach(t),jLr=i(ne),lE=n(ne,"LI",{});var ADe=s(lE);LMe=n(ADe,"STRONG",{});var KPt=s(LMe);DLr=r(KPt,"gpt2"),KPt.forEach(t),GLr=r(ADe," \u2014 "),rK=n(ADe,"A",{href:!0});var ZPt=s(rK);OLr=r(ZPt,"TFGPT2ForSequenceClassification"),ZPt.forEach(t),VLr=r(ADe," (OpenAI GPT-2 model)"),ADe.forEach(t),XLr=i(ne),iE=n(ne,"LI",{});var LDe=s(iE);yMe=n(LDe,"STRONG",{});var eBt=s(yMe);zLr=r(eBt,"gptj"),eBt.forEach(t),QLr=r(LDe," \u2014 "),tK=n(LDe,"A",{href:!0});var oBt=s(tK);WLr=r(oBt,"TFGPTJForSequenceClassification"),oBt.forEach(t),HLr=r(LDe," (GPT-J model)"),LDe.forEach(t),ULr=i(ne),dE=n(ne,"LI",{});var yDe=s(dE);xMe=n(yDe,"STRONG",{});var rBt=s(xMe);JLr=r(rBt,"layoutlm"),rBt.forEach(t),YLr=r(yDe," \u2014 "),aK=n(yDe,"A",{href:!0});var tBt=s(aK);KLr=r(tBt,"TFLayoutLMForSequenceClassification"),tBt.forEach(t),ZLr=r(yDe," (LayoutLM model)"),yDe.forEach(t),eyr=i(ne),cE=n(ne,"LI",{});var xDe=s(cE);$Me=n(xDe,"STRONG",{});var aBt=s($Me);oyr=r(aBt,"longformer"),aBt.forEach(t),ryr=r(xDe," \u2014 "),nK=n(xDe,"A",{href:!0});var nBt=s(nK);tyr=r(nBt,"TFLongformerForSequenceClassification"),nBt.forEach(t),ayr=r(xDe," (Longformer model)"),xDe.forEach(t),nyr=i(ne),fE=n(ne,"LI",{});var $De=s(fE);kMe=n($De,"STRONG",{});var sBt=s(kMe);syr=r(sBt,"mobilebert"),sBt.forEach(t),lyr=r($De," \u2014 "),sK=n($De,"A",{href:!0});var lBt=s(sK);iyr=r(lBt,"TFMobileBertForSequenceClassification"),lBt.forEach(t),dyr=r($De," (MobileBERT model)"),$De.forEach(t),cyr=i(ne),mE=n(ne,"LI",{});var kDe=s(mE);SMe=n(kDe,"STRONG",{});var iBt=s(SMe);fyr=r(iBt,"mpnet"),iBt.forEach(t),myr=r(kDe," \u2014 "),lK=n(kDe,"A",{href:!0});var dBt=s(lK);gyr=r(dBt,"TFMPNetForSequenceClassification"),dBt.forEach(t),hyr=r(kDe," (MPNet model)"),kDe.forEach(t),pyr=i(ne),gE=n(ne,"LI",{});var SDe=s(gE);RMe=n(SDe,"STRONG",{});var cBt=s(RMe);_yr=r(cBt,"openai-gpt"),cBt.forEach(t),uyr=r(SDe," \u2014 "),iK=n(SDe,"A",{href:!0});var fBt=s(iK);byr=r(fBt,"TFOpenAIGPTForSequenceClassification"),fBt.forEach(t),vyr=r(SDe," (OpenAI GPT model)"),SDe.forEach(t),Fyr=i(ne),hE=n(ne,"LI",{});var RDe=s(hE);PMe=n(RDe,"STRONG",{});var mBt=s(PMe);Tyr=r(mBt,"rembert"),mBt.forEach(t),Myr=r(RDe," \u2014 "),dK=n(RDe,"A",{href:!0});var gBt=s(dK);Eyr=r(gBt,"TFRemBertForSequenceClassification"),gBt.forEach(t),Cyr=r(RDe," (RemBERT model)"),RDe.forEach(t),wyr=i(ne),pE=n(ne,"LI",{});var PDe=s(pE);BMe=n(PDe,"STRONG",{});var hBt=s(BMe);Ayr=r(hBt,"roberta"),hBt.forEach(t),Lyr=r(PDe," \u2014 "),cK=n(PDe,"A",{href:!0});var pBt=s(cK);yyr=r(pBt,"TFRobertaForSequenceClassification"),pBt.forEach(t),xyr=r(PDe," (RoBERTa model)"),PDe.forEach(t),$yr=i(ne),_E=n(ne,"LI",{});var BDe=s(_E);IMe=n(BDe,"STRONG",{});var _Bt=s(IMe);kyr=r(_Bt,"roformer"),_Bt.forEach(t),Syr=r(BDe," \u2014 "),fK=n(BDe,"A",{href:!0});var uBt=s(fK);Ryr=r(uBt,"TFRoFormerForSequenceClassification"),uBt.forEach(t),Pyr=r(BDe," (RoFormer model)"),BDe.forEach(t),Byr=i(ne),uE=n(ne,"LI",{});var IDe=s(uE);NMe=n(IDe,"STRONG",{});var bBt=s(NMe);Iyr=r(bBt,"tapas"),bBt.forEach(t),Nyr=r(IDe," \u2014 "),mK=n(IDe,"A",{href:!0});var vBt=s(mK);qyr=r(vBt,"TFTapasForSequenceClassification"),vBt.forEach(t),jyr=r(IDe," (TAPAS model)"),IDe.forEach(t),Dyr=i(ne),bE=n(ne,"LI",{});var NDe=s(bE);qMe=n(NDe,"STRONG",{});var FBt=s(qMe);Gyr=r(FBt,"transfo-xl"),FBt.forEach(t),Oyr=r(NDe," \u2014 "),gK=n(NDe,"A",{href:!0});var TBt=s(gK);Vyr=r(TBt,"TFTransfoXLForSequenceClassification"),TBt.forEach(t),Xyr=r(NDe," (Transformer-XL model)"),NDe.forEach(t),zyr=i(ne),vE=n(ne,"LI",{});var qDe=s(vE);jMe=n(qDe,"STRONG",{});var MBt=s(jMe);Qyr=r(MBt,"xlm"),MBt.forEach(t),Wyr=r(qDe," \u2014 "),hK=n(qDe,"A",{href:!0});var EBt=s(hK);Hyr=r(EBt,"TFXLMForSequenceClassification"),EBt.forEach(t),Uyr=r(qDe," (XLM model)"),qDe.forEach(t),Jyr=i(ne),FE=n(ne,"LI",{});var jDe=s(FE);DMe=n(jDe,"STRONG",{});var CBt=s(DMe);Yyr=r(CBt,"xlm-roberta"),CBt.forEach(t),Kyr=r(jDe," \u2014 "),pK=n(jDe,"A",{href:!0});var wBt=s(pK);Zyr=r(wBt,"TFXLMRobertaForSequenceClassification"),wBt.forEach(t),exr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),oxr=i(ne),TE=n(ne,"LI",{});var DDe=s(TE);GMe=n(DDe,"STRONG",{});var ABt=s(GMe);rxr=r(ABt,"xlnet"),ABt.forEach(t),txr=r(DDe," \u2014 "),_K=n(DDe,"A",{href:!0});var LBt=s(_K);axr=r(LBt,"TFXLNetForSequenceClassification"),LBt.forEach(t),nxr=r(DDe," (XLNet model)"),DDe.forEach(t),ne.forEach(t),sxr=i(Ol),T(ME.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),bze=i(f),Lc=n(f,"H2",{class:!0});var AWe=s(Lc);EE=n(AWe,"A",{id:!0,class:!0,href:!0});var yBt=s(EE);OMe=n(yBt,"SPAN",{});var xBt=s(OMe);T(wx.$$.fragment,xBt),xBt.forEach(t),yBt.forEach(t),lxr=i(AWe),VMe=n(AWe,"SPAN",{});var $Bt=s(VMe);ixr=r($Bt,"TFAutoModelForMultipleChoice"),$Bt.forEach(t),AWe.forEach(t),vze=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(Ax.$$.fragment,Vl),dxr=i(Vl),yc=n(Vl,"P",{});var Dte=s(yc);cxr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uK=n(Dte,"A",{href:!0});var kBt=s(uK);fxr=r(kBt,"from_pretrained()"),kBt.forEach(t),mxr=r(Dte," class method or the "),bK=n(Dte,"A",{href:!0});var SBt=s(bK);gxr=r(SBt,"from_config()"),SBt.forEach(t),hxr=r(Dte,` class
method.`),Dte.forEach(t),pxr=i(Vl),Lx=n(Vl,"P",{});var LWe=s(Lx);_xr=r(LWe,"This class cannot be instantiated directly using "),XMe=n(LWe,"CODE",{});var RBt=s(XMe);uxr=r(RBt,"__init__()"),RBt.forEach(t),bxr=r(LWe," (throws an error)."),LWe.forEach(t),vxr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var _A=s(Dt);T(yx.$$.fragment,_A),Fxr=i(_A),zMe=n(_A,"P",{});var PBt=s(zMe);Txr=r(PBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PBt.forEach(t),Mxr=i(_A),xc=n(_A,"P",{});var Gte=s(xc);Exr=r(Gte,`Note:
Loading a model from its configuration file does `),QMe=n(Gte,"STRONG",{});var BBt=s(QMe);Cxr=r(BBt,"not"),BBt.forEach(t),wxr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Gte,"A",{href:!0});var IBt=s(vK);Axr=r(IBt,"from_pretrained()"),IBt.forEach(t),Lxr=r(Gte," to load the model weights."),Gte.forEach(t),yxr=i(_A),T(CE.$$.fragment,_A),_A.forEach(t),xxr=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(xx.$$.fragment,Xl),$xr=i(Xl),WMe=n(Xl,"P",{});var NBt=s(WMe);kxr=r(NBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NBt.forEach(t),Sxr=i(Xl),hn=n(Xl,"P",{});var uA=s(hn);Rxr=r(uA,"The model class to instantiate is selected based on the "),HMe=n(uA,"CODE",{});var qBt=s(HMe);Pxr=r(qBt,"model_type"),qBt.forEach(t),Bxr=r(uA,` property of the config object (either
passed as an argument or loaded from `),UMe=n(uA,"CODE",{});var jBt=s(UMe);Ixr=r(jBt,"pretrained_model_name_or_path"),jBt.forEach(t),Nxr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(uA,"CODE",{});var DBt=s(JMe);qxr=r(DBt,"pretrained_model_name_or_path"),DBt.forEach(t),jxr=r(uA,":"),uA.forEach(t),Dxr=i(Xl),_e=n(Xl,"UL",{});var Fe=s(_e);wE=n(Fe,"LI",{});var GDe=s(wE);YMe=n(GDe,"STRONG",{});var GBt=s(YMe);Gxr=r(GBt,"albert"),GBt.forEach(t),Oxr=r(GDe," \u2014 "),FK=n(GDe,"A",{href:!0});var OBt=s(FK);Vxr=r(OBt,"TFAlbertForMultipleChoice"),OBt.forEach(t),Xxr=r(GDe," (ALBERT model)"),GDe.forEach(t),zxr=i(Fe),AE=n(Fe,"LI",{});var ODe=s(AE);KMe=n(ODe,"STRONG",{});var VBt=s(KMe);Qxr=r(VBt,"bert"),VBt.forEach(t),Wxr=r(ODe," \u2014 "),TK=n(ODe,"A",{href:!0});var XBt=s(TK);Hxr=r(XBt,"TFBertForMultipleChoice"),XBt.forEach(t),Uxr=r(ODe," (BERT model)"),ODe.forEach(t),Jxr=i(Fe),LE=n(Fe,"LI",{});var VDe=s(LE);ZMe=n(VDe,"STRONG",{});var zBt=s(ZMe);Yxr=r(zBt,"camembert"),zBt.forEach(t),Kxr=r(VDe," \u2014 "),MK=n(VDe,"A",{href:!0});var QBt=s(MK);Zxr=r(QBt,"TFCamembertForMultipleChoice"),QBt.forEach(t),e$r=r(VDe," (CamemBERT model)"),VDe.forEach(t),o$r=i(Fe),yE=n(Fe,"LI",{});var XDe=s(yE);e4e=n(XDe,"STRONG",{});var WBt=s(e4e);r$r=r(WBt,"convbert"),WBt.forEach(t),t$r=r(XDe," \u2014 "),EK=n(XDe,"A",{href:!0});var HBt=s(EK);a$r=r(HBt,"TFConvBertForMultipleChoice"),HBt.forEach(t),n$r=r(XDe," (ConvBERT model)"),XDe.forEach(t),s$r=i(Fe),xE=n(Fe,"LI",{});var zDe=s(xE);o4e=n(zDe,"STRONG",{});var UBt=s(o4e);l$r=r(UBt,"distilbert"),UBt.forEach(t),i$r=r(zDe," \u2014 "),CK=n(zDe,"A",{href:!0});var JBt=s(CK);d$r=r(JBt,"TFDistilBertForMultipleChoice"),JBt.forEach(t),c$r=r(zDe," (DistilBERT model)"),zDe.forEach(t),f$r=i(Fe),$E=n(Fe,"LI",{});var QDe=s($E);r4e=n(QDe,"STRONG",{});var YBt=s(r4e);m$r=r(YBt,"electra"),YBt.forEach(t),g$r=r(QDe," \u2014 "),wK=n(QDe,"A",{href:!0});var KBt=s(wK);h$r=r(KBt,"TFElectraForMultipleChoice"),KBt.forEach(t),p$r=r(QDe," (ELECTRA model)"),QDe.forEach(t),_$r=i(Fe),kE=n(Fe,"LI",{});var WDe=s(kE);t4e=n(WDe,"STRONG",{});var ZBt=s(t4e);u$r=r(ZBt,"flaubert"),ZBt.forEach(t),b$r=r(WDe," \u2014 "),AK=n(WDe,"A",{href:!0});var eIt=s(AK);v$r=r(eIt,"TFFlaubertForMultipleChoice"),eIt.forEach(t),F$r=r(WDe," (FlauBERT model)"),WDe.forEach(t),T$r=i(Fe),SE=n(Fe,"LI",{});var HDe=s(SE);a4e=n(HDe,"STRONG",{});var oIt=s(a4e);M$r=r(oIt,"funnel"),oIt.forEach(t),E$r=r(HDe," \u2014 "),LK=n(HDe,"A",{href:!0});var rIt=s(LK);C$r=r(rIt,"TFFunnelForMultipleChoice"),rIt.forEach(t),w$r=r(HDe," (Funnel Transformer model)"),HDe.forEach(t),A$r=i(Fe),RE=n(Fe,"LI",{});var UDe=s(RE);n4e=n(UDe,"STRONG",{});var tIt=s(n4e);L$r=r(tIt,"longformer"),tIt.forEach(t),y$r=r(UDe," \u2014 "),yK=n(UDe,"A",{href:!0});var aIt=s(yK);x$r=r(aIt,"TFLongformerForMultipleChoice"),aIt.forEach(t),$$r=r(UDe," (Longformer model)"),UDe.forEach(t),k$r=i(Fe),PE=n(Fe,"LI",{});var JDe=s(PE);s4e=n(JDe,"STRONG",{});var nIt=s(s4e);S$r=r(nIt,"mobilebert"),nIt.forEach(t),R$r=r(JDe," \u2014 "),xK=n(JDe,"A",{href:!0});var sIt=s(xK);P$r=r(sIt,"TFMobileBertForMultipleChoice"),sIt.forEach(t),B$r=r(JDe," (MobileBERT model)"),JDe.forEach(t),I$r=i(Fe),BE=n(Fe,"LI",{});var YDe=s(BE);l4e=n(YDe,"STRONG",{});var lIt=s(l4e);N$r=r(lIt,"mpnet"),lIt.forEach(t),q$r=r(YDe," \u2014 "),$K=n(YDe,"A",{href:!0});var iIt=s($K);j$r=r(iIt,"TFMPNetForMultipleChoice"),iIt.forEach(t),D$r=r(YDe," (MPNet model)"),YDe.forEach(t),G$r=i(Fe),IE=n(Fe,"LI",{});var KDe=s(IE);i4e=n(KDe,"STRONG",{});var dIt=s(i4e);O$r=r(dIt,"rembert"),dIt.forEach(t),V$r=r(KDe," \u2014 "),kK=n(KDe,"A",{href:!0});var cIt=s(kK);X$r=r(cIt,"TFRemBertForMultipleChoice"),cIt.forEach(t),z$r=r(KDe," (RemBERT model)"),KDe.forEach(t),Q$r=i(Fe),NE=n(Fe,"LI",{});var ZDe=s(NE);d4e=n(ZDe,"STRONG",{});var fIt=s(d4e);W$r=r(fIt,"roberta"),fIt.forEach(t),H$r=r(ZDe," \u2014 "),SK=n(ZDe,"A",{href:!0});var mIt=s(SK);U$r=r(mIt,"TFRobertaForMultipleChoice"),mIt.forEach(t),J$r=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),Y$r=i(Fe),qE=n(Fe,"LI",{});var eGe=s(qE);c4e=n(eGe,"STRONG",{});var gIt=s(c4e);K$r=r(gIt,"roformer"),gIt.forEach(t),Z$r=r(eGe," \u2014 "),RK=n(eGe,"A",{href:!0});var hIt=s(RK);ekr=r(hIt,"TFRoFormerForMultipleChoice"),hIt.forEach(t),okr=r(eGe," (RoFormer model)"),eGe.forEach(t),rkr=i(Fe),jE=n(Fe,"LI",{});var oGe=s(jE);f4e=n(oGe,"STRONG",{});var pIt=s(f4e);tkr=r(pIt,"xlm"),pIt.forEach(t),akr=r(oGe," \u2014 "),PK=n(oGe,"A",{href:!0});var _It=s(PK);nkr=r(_It,"TFXLMForMultipleChoice"),_It.forEach(t),skr=r(oGe," (XLM model)"),oGe.forEach(t),lkr=i(Fe),DE=n(Fe,"LI",{});var rGe=s(DE);m4e=n(rGe,"STRONG",{});var uIt=s(m4e);ikr=r(uIt,"xlm-roberta"),uIt.forEach(t),dkr=r(rGe," \u2014 "),BK=n(rGe,"A",{href:!0});var bIt=s(BK);ckr=r(bIt,"TFXLMRobertaForMultipleChoice"),bIt.forEach(t),fkr=r(rGe," (XLM-RoBERTa model)"),rGe.forEach(t),mkr=i(Fe),GE=n(Fe,"LI",{});var tGe=s(GE);g4e=n(tGe,"STRONG",{});var vIt=s(g4e);gkr=r(vIt,"xlnet"),vIt.forEach(t),hkr=r(tGe," \u2014 "),IK=n(tGe,"A",{href:!0});var FIt=s(IK);pkr=r(FIt,"TFXLNetForMultipleChoice"),FIt.forEach(t),_kr=r(tGe," (XLNet model)"),tGe.forEach(t),Fe.forEach(t),ukr=i(Xl),T(OE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Fze=i(f),$c=n(f,"H2",{class:!0});var yWe=s($c);VE=n(yWe,"A",{id:!0,class:!0,href:!0});var TIt=s(VE);h4e=n(TIt,"SPAN",{});var MIt=s(h4e);T($x.$$.fragment,MIt),MIt.forEach(t),TIt.forEach(t),bkr=i(yWe),p4e=n(yWe,"SPAN",{});var EIt=s(p4e);vkr=r(EIt,"TFAutoModelForNextSentencePrediction"),EIt.forEach(t),yWe.forEach(t),Tze=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(kx.$$.fragment,zl),Fkr=i(zl),kc=n(zl,"P",{});var Ote=s(kc);Tkr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NK=n(Ote,"A",{href:!0});var CIt=s(NK);Mkr=r(CIt,"from_pretrained()"),CIt.forEach(t),Ekr=r(Ote," class method or the "),qK=n(Ote,"A",{href:!0});var wIt=s(qK);Ckr=r(wIt,"from_config()"),wIt.forEach(t),wkr=r(Ote,` class
method.`),Ote.forEach(t),Akr=i(zl),Sx=n(zl,"P",{});var xWe=s(Sx);Lkr=r(xWe,"This class cannot be instantiated directly using "),_4e=n(xWe,"CODE",{});var AIt=s(_4e);ykr=r(AIt,"__init__()"),AIt.forEach(t),xkr=r(xWe," (throws an error)."),xWe.forEach(t),$kr=i(zl),Gt=n(zl,"DIV",{class:!0});var bA=s(Gt);T(Rx.$$.fragment,bA),kkr=i(bA),u4e=n(bA,"P",{});var LIt=s(u4e);Skr=r(LIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LIt.forEach(t),Rkr=i(bA),Sc=n(bA,"P",{});var Vte=s(Sc);Pkr=r(Vte,`Note:
Loading a model from its configuration file does `),b4e=n(Vte,"STRONG",{});var yIt=s(b4e);Bkr=r(yIt,"not"),yIt.forEach(t),Ikr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Vte,"A",{href:!0});var xIt=s(jK);Nkr=r(xIt,"from_pretrained()"),xIt.forEach(t),qkr=r(Vte," to load the model weights."),Vte.forEach(t),jkr=i(bA),T(XE.$$.fragment,bA),bA.forEach(t),Dkr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(Px.$$.fragment,Ql),Gkr=i(Ql),v4e=n(Ql,"P",{});var $It=s(v4e);Okr=r($It,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$It.forEach(t),Vkr=i(Ql),pn=n(Ql,"P",{});var vA=s(pn);Xkr=r(vA,"The model class to instantiate is selected based on the "),F4e=n(vA,"CODE",{});var kIt=s(F4e);zkr=r(kIt,"model_type"),kIt.forEach(t),Qkr=r(vA,` property of the config object (either
passed as an argument or loaded from `),T4e=n(vA,"CODE",{});var SIt=s(T4e);Wkr=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),Hkr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=n(vA,"CODE",{});var RIt=s(M4e);Ukr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),Jkr=r(vA,":"),vA.forEach(t),Ykr=i(Ql),Bx=n(Ql,"UL",{});var $We=s(Bx);zE=n($We,"LI",{});var aGe=s(zE);E4e=n(aGe,"STRONG",{});var PIt=s(E4e);Kkr=r(PIt,"bert"),PIt.forEach(t),Zkr=r(aGe," \u2014 "),DK=n(aGe,"A",{href:!0});var BIt=s(DK);eSr=r(BIt,"TFBertForNextSentencePrediction"),BIt.forEach(t),oSr=r(aGe," (BERT model)"),aGe.forEach(t),rSr=i($We),QE=n($We,"LI",{});var nGe=s(QE);C4e=n(nGe,"STRONG",{});var IIt=s(C4e);tSr=r(IIt,"mobilebert"),IIt.forEach(t),aSr=r(nGe," \u2014 "),GK=n(nGe,"A",{href:!0});var NIt=s(GK);nSr=r(NIt,"TFMobileBertForNextSentencePrediction"),NIt.forEach(t),sSr=r(nGe," (MobileBERT model)"),nGe.forEach(t),$We.forEach(t),lSr=i(Ql),T(WE.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Mze=i(f),Rc=n(f,"H2",{class:!0});var kWe=s(Rc);HE=n(kWe,"A",{id:!0,class:!0,href:!0});var qIt=s(HE);w4e=n(qIt,"SPAN",{});var jIt=s(w4e);T(Ix.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),iSr=i(kWe),A4e=n(kWe,"SPAN",{});var DIt=s(A4e);dSr=r(DIt,"TFAutoModelForTableQuestionAnswering"),DIt.forEach(t),kWe.forEach(t),Eze=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(Nx.$$.fragment,Wl),cSr=i(Wl),Pc=n(Wl,"P",{});var Xte=s(Pc);fSr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OK=n(Xte,"A",{href:!0});var GIt=s(OK);mSr=r(GIt,"from_pretrained()"),GIt.forEach(t),gSr=r(Xte," class method or the "),VK=n(Xte,"A",{href:!0});var OIt=s(VK);hSr=r(OIt,"from_config()"),OIt.forEach(t),pSr=r(Xte,` class
method.`),Xte.forEach(t),_Sr=i(Wl),qx=n(Wl,"P",{});var SWe=s(qx);uSr=r(SWe,"This class cannot be instantiated directly using "),L4e=n(SWe,"CODE",{});var VIt=s(L4e);bSr=r(VIt,"__init__()"),VIt.forEach(t),vSr=r(SWe," (throws an error)."),SWe.forEach(t),FSr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var FA=s(Ot);T(jx.$$.fragment,FA),TSr=i(FA),y4e=n(FA,"P",{});var XIt=s(y4e);MSr=r(XIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XIt.forEach(t),ESr=i(FA),Bc=n(FA,"P",{});var zte=s(Bc);CSr=r(zte,`Note:
Loading a model from its configuration file does `),x4e=n(zte,"STRONG",{});var zIt=s(x4e);wSr=r(zIt,"not"),zIt.forEach(t),ASr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(zte,"A",{href:!0});var QIt=s(XK);LSr=r(QIt,"from_pretrained()"),QIt.forEach(t),ySr=r(zte," to load the model weights."),zte.forEach(t),xSr=i(FA),T(UE.$$.fragment,FA),FA.forEach(t),$Sr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Dx.$$.fragment,Hl),kSr=i(Hl),$4e=n(Hl,"P",{});var WIt=s($4e);SSr=r(WIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WIt.forEach(t),RSr=i(Hl),_n=n(Hl,"P",{});var TA=s(_n);PSr=r(TA,"The model class to instantiate is selected based on the "),k4e=n(TA,"CODE",{});var HIt=s(k4e);BSr=r(HIt,"model_type"),HIt.forEach(t),ISr=r(TA,` property of the config object (either
passed as an argument or loaded from `),S4e=n(TA,"CODE",{});var UIt=s(S4e);NSr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),qSr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(TA,"CODE",{});var JIt=s(R4e);jSr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),DSr=r(TA,":"),TA.forEach(t),GSr=i(Hl),P4e=n(Hl,"UL",{});var YIt=s(P4e);JE=n(YIt,"LI",{});var sGe=s(JE);B4e=n(sGe,"STRONG",{});var KIt=s(B4e);OSr=r(KIt,"tapas"),KIt.forEach(t),VSr=r(sGe," \u2014 "),zK=n(sGe,"A",{href:!0});var ZIt=s(zK);XSr=r(ZIt,"TFTapasForQuestionAnswering"),ZIt.forEach(t),zSr=r(sGe," (TAPAS model)"),sGe.forEach(t),YIt.forEach(t),QSr=i(Hl),T(YE.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Cze=i(f),Ic=n(f,"H2",{class:!0});var RWe=s(Ic);KE=n(RWe,"A",{id:!0,class:!0,href:!0});var eNt=s(KE);I4e=n(eNt,"SPAN",{});var oNt=s(I4e);T(Gx.$$.fragment,oNt),oNt.forEach(t),eNt.forEach(t),WSr=i(RWe),N4e=n(RWe,"SPAN",{});var rNt=s(N4e);HSr=r(rNt,"TFAutoModelForTokenClassification"),rNt.forEach(t),RWe.forEach(t),wze=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(Ox.$$.fragment,Ul),USr=i(Ul),Nc=n(Ul,"P",{});var Qte=s(Nc);JSr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=n(Qte,"A",{href:!0});var tNt=s(QK);YSr=r(tNt,"from_pretrained()"),tNt.forEach(t),KSr=r(Qte," class method or the "),WK=n(Qte,"A",{href:!0});var aNt=s(WK);ZSr=r(aNt,"from_config()"),aNt.forEach(t),eRr=r(Qte,` class
method.`),Qte.forEach(t),oRr=i(Ul),Vx=n(Ul,"P",{});var PWe=s(Vx);rRr=r(PWe,"This class cannot be instantiated directly using "),q4e=n(PWe,"CODE",{});var nNt=s(q4e);tRr=r(nNt,"__init__()"),nNt.forEach(t),aRr=r(PWe," (throws an error)."),PWe.forEach(t),nRr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var MA=s(Vt);T(Xx.$$.fragment,MA),sRr=i(MA),j4e=n(MA,"P",{});var sNt=s(j4e);lRr=r(sNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sNt.forEach(t),iRr=i(MA),qc=n(MA,"P",{});var Wte=s(qc);dRr=r(Wte,`Note:
Loading a model from its configuration file does `),D4e=n(Wte,"STRONG",{});var lNt=s(D4e);cRr=r(lNt,"not"),lNt.forEach(t),fRr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Wte,"A",{href:!0});var iNt=s(HK);mRr=r(iNt,"from_pretrained()"),iNt.forEach(t),gRr=r(Wte," to load the model weights."),Wte.forEach(t),hRr=i(MA),T(ZE.$$.fragment,MA),MA.forEach(t),pRr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(zx.$$.fragment,Jl),_Rr=i(Jl),G4e=n(Jl,"P",{});var dNt=s(G4e);uRr=r(dNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dNt.forEach(t),bRr=i(Jl),un=n(Jl,"P",{});var EA=s(un);vRr=r(EA,"The model class to instantiate is selected based on the "),O4e=n(EA,"CODE",{});var cNt=s(O4e);FRr=r(cNt,"model_type"),cNt.forEach(t),TRr=r(EA,` property of the config object (either
passed as an argument or loaded from `),V4e=n(EA,"CODE",{});var fNt=s(V4e);MRr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),ERr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(EA,"CODE",{});var mNt=s(X4e);CRr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),wRr=r(EA,":"),EA.forEach(t),ARr=i(Jl),de=n(Jl,"UL",{});var me=s(de);eC=n(me,"LI",{});var lGe=s(eC);z4e=n(lGe,"STRONG",{});var gNt=s(z4e);LRr=r(gNt,"albert"),gNt.forEach(t),yRr=r(lGe," \u2014 "),UK=n(lGe,"A",{href:!0});var hNt=s(UK);xRr=r(hNt,"TFAlbertForTokenClassification"),hNt.forEach(t),$Rr=r(lGe," (ALBERT model)"),lGe.forEach(t),kRr=i(me),oC=n(me,"LI",{});var iGe=s(oC);Q4e=n(iGe,"STRONG",{});var pNt=s(Q4e);SRr=r(pNt,"bert"),pNt.forEach(t),RRr=r(iGe," \u2014 "),JK=n(iGe,"A",{href:!0});var _Nt=s(JK);PRr=r(_Nt,"TFBertForTokenClassification"),_Nt.forEach(t),BRr=r(iGe," (BERT model)"),iGe.forEach(t),IRr=i(me),rC=n(me,"LI",{});var dGe=s(rC);W4e=n(dGe,"STRONG",{});var uNt=s(W4e);NRr=r(uNt,"camembert"),uNt.forEach(t),qRr=r(dGe," \u2014 "),YK=n(dGe,"A",{href:!0});var bNt=s(YK);jRr=r(bNt,"TFCamembertForTokenClassification"),bNt.forEach(t),DRr=r(dGe," (CamemBERT model)"),dGe.forEach(t),GRr=i(me),tC=n(me,"LI",{});var cGe=s(tC);H4e=n(cGe,"STRONG",{});var vNt=s(H4e);ORr=r(vNt,"convbert"),vNt.forEach(t),VRr=r(cGe," \u2014 "),KK=n(cGe,"A",{href:!0});var FNt=s(KK);XRr=r(FNt,"TFConvBertForTokenClassification"),FNt.forEach(t),zRr=r(cGe," (ConvBERT model)"),cGe.forEach(t),QRr=i(me),aC=n(me,"LI",{});var fGe=s(aC);U4e=n(fGe,"STRONG",{});var TNt=s(U4e);WRr=r(TNt,"deberta"),TNt.forEach(t),HRr=r(fGe," \u2014 "),ZK=n(fGe,"A",{href:!0});var MNt=s(ZK);URr=r(MNt,"TFDebertaForTokenClassification"),MNt.forEach(t),JRr=r(fGe," (DeBERTa model)"),fGe.forEach(t),YRr=i(me),nC=n(me,"LI",{});var mGe=s(nC);J4e=n(mGe,"STRONG",{});var ENt=s(J4e);KRr=r(ENt,"deberta-v2"),ENt.forEach(t),ZRr=r(mGe," \u2014 "),eZ=n(mGe,"A",{href:!0});var CNt=s(eZ);ePr=r(CNt,"TFDebertaV2ForTokenClassification"),CNt.forEach(t),oPr=r(mGe," (DeBERTa-v2 model)"),mGe.forEach(t),rPr=i(me),sC=n(me,"LI",{});var gGe=s(sC);Y4e=n(gGe,"STRONG",{});var wNt=s(Y4e);tPr=r(wNt,"distilbert"),wNt.forEach(t),aPr=r(gGe," \u2014 "),oZ=n(gGe,"A",{href:!0});var ANt=s(oZ);nPr=r(ANt,"TFDistilBertForTokenClassification"),ANt.forEach(t),sPr=r(gGe," (DistilBERT model)"),gGe.forEach(t),lPr=i(me),lC=n(me,"LI",{});var hGe=s(lC);K4e=n(hGe,"STRONG",{});var LNt=s(K4e);iPr=r(LNt,"electra"),LNt.forEach(t),dPr=r(hGe," \u2014 "),rZ=n(hGe,"A",{href:!0});var yNt=s(rZ);cPr=r(yNt,"TFElectraForTokenClassification"),yNt.forEach(t),fPr=r(hGe," (ELECTRA model)"),hGe.forEach(t),mPr=i(me),iC=n(me,"LI",{});var pGe=s(iC);Z4e=n(pGe,"STRONG",{});var xNt=s(Z4e);gPr=r(xNt,"flaubert"),xNt.forEach(t),hPr=r(pGe," \u2014 "),tZ=n(pGe,"A",{href:!0});var $Nt=s(tZ);pPr=r($Nt,"TFFlaubertForTokenClassification"),$Nt.forEach(t),_Pr=r(pGe," (FlauBERT model)"),pGe.forEach(t),uPr=i(me),dC=n(me,"LI",{});var _Ge=s(dC);eEe=n(_Ge,"STRONG",{});var kNt=s(eEe);bPr=r(kNt,"funnel"),kNt.forEach(t),vPr=r(_Ge," \u2014 "),aZ=n(_Ge,"A",{href:!0});var SNt=s(aZ);FPr=r(SNt,"TFFunnelForTokenClassification"),SNt.forEach(t),TPr=r(_Ge," (Funnel Transformer model)"),_Ge.forEach(t),MPr=i(me),cC=n(me,"LI",{});var uGe=s(cC);oEe=n(uGe,"STRONG",{});var RNt=s(oEe);EPr=r(RNt,"layoutlm"),RNt.forEach(t),CPr=r(uGe," \u2014 "),nZ=n(uGe,"A",{href:!0});var PNt=s(nZ);wPr=r(PNt,"TFLayoutLMForTokenClassification"),PNt.forEach(t),APr=r(uGe," (LayoutLM model)"),uGe.forEach(t),LPr=i(me),fC=n(me,"LI",{});var bGe=s(fC);rEe=n(bGe,"STRONG",{});var BNt=s(rEe);yPr=r(BNt,"longformer"),BNt.forEach(t),xPr=r(bGe," \u2014 "),sZ=n(bGe,"A",{href:!0});var INt=s(sZ);$Pr=r(INt,"TFLongformerForTokenClassification"),INt.forEach(t),kPr=r(bGe," (Longformer model)"),bGe.forEach(t),SPr=i(me),mC=n(me,"LI",{});var vGe=s(mC);tEe=n(vGe,"STRONG",{});var NNt=s(tEe);RPr=r(NNt,"mobilebert"),NNt.forEach(t),PPr=r(vGe," \u2014 "),lZ=n(vGe,"A",{href:!0});var qNt=s(lZ);BPr=r(qNt,"TFMobileBertForTokenClassification"),qNt.forEach(t),IPr=r(vGe," (MobileBERT model)"),vGe.forEach(t),NPr=i(me),gC=n(me,"LI",{});var FGe=s(gC);aEe=n(FGe,"STRONG",{});var jNt=s(aEe);qPr=r(jNt,"mpnet"),jNt.forEach(t),jPr=r(FGe," \u2014 "),iZ=n(FGe,"A",{href:!0});var DNt=s(iZ);DPr=r(DNt,"TFMPNetForTokenClassification"),DNt.forEach(t),GPr=r(FGe," (MPNet model)"),FGe.forEach(t),OPr=i(me),hC=n(me,"LI",{});var TGe=s(hC);nEe=n(TGe,"STRONG",{});var GNt=s(nEe);VPr=r(GNt,"rembert"),GNt.forEach(t),XPr=r(TGe," \u2014 "),dZ=n(TGe,"A",{href:!0});var ONt=s(dZ);zPr=r(ONt,"TFRemBertForTokenClassification"),ONt.forEach(t),QPr=r(TGe," (RemBERT model)"),TGe.forEach(t),WPr=i(me),pC=n(me,"LI",{});var MGe=s(pC);sEe=n(MGe,"STRONG",{});var VNt=s(sEe);HPr=r(VNt,"roberta"),VNt.forEach(t),UPr=r(MGe," \u2014 "),cZ=n(MGe,"A",{href:!0});var XNt=s(cZ);JPr=r(XNt,"TFRobertaForTokenClassification"),XNt.forEach(t),YPr=r(MGe," (RoBERTa model)"),MGe.forEach(t),KPr=i(me),_C=n(me,"LI",{});var EGe=s(_C);lEe=n(EGe,"STRONG",{});var zNt=s(lEe);ZPr=r(zNt,"roformer"),zNt.forEach(t),eBr=r(EGe," \u2014 "),fZ=n(EGe,"A",{href:!0});var QNt=s(fZ);oBr=r(QNt,"TFRoFormerForTokenClassification"),QNt.forEach(t),rBr=r(EGe," (RoFormer model)"),EGe.forEach(t),tBr=i(me),uC=n(me,"LI",{});var CGe=s(uC);iEe=n(CGe,"STRONG",{});var WNt=s(iEe);aBr=r(WNt,"xlm"),WNt.forEach(t),nBr=r(CGe," \u2014 "),mZ=n(CGe,"A",{href:!0});var HNt=s(mZ);sBr=r(HNt,"TFXLMForTokenClassification"),HNt.forEach(t),lBr=r(CGe," (XLM model)"),CGe.forEach(t),iBr=i(me),bC=n(me,"LI",{});var wGe=s(bC);dEe=n(wGe,"STRONG",{});var UNt=s(dEe);dBr=r(UNt,"xlm-roberta"),UNt.forEach(t),cBr=r(wGe," \u2014 "),gZ=n(wGe,"A",{href:!0});var JNt=s(gZ);fBr=r(JNt,"TFXLMRobertaForTokenClassification"),JNt.forEach(t),mBr=r(wGe," (XLM-RoBERTa model)"),wGe.forEach(t),gBr=i(me),vC=n(me,"LI",{});var AGe=s(vC);cEe=n(AGe,"STRONG",{});var YNt=s(cEe);hBr=r(YNt,"xlnet"),YNt.forEach(t),pBr=r(AGe," \u2014 "),hZ=n(AGe,"A",{href:!0});var KNt=s(hZ);_Br=r(KNt,"TFXLNetForTokenClassification"),KNt.forEach(t),uBr=r(AGe," (XLNet model)"),AGe.forEach(t),me.forEach(t),bBr=i(Jl),T(FC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Aze=i(f),jc=n(f,"H2",{class:!0});var BWe=s(jc);TC=n(BWe,"A",{id:!0,class:!0,href:!0});var ZNt=s(TC);fEe=n(ZNt,"SPAN",{});var eqt=s(fEe);T(Qx.$$.fragment,eqt),eqt.forEach(t),ZNt.forEach(t),vBr=i(BWe),mEe=n(BWe,"SPAN",{});var oqt=s(mEe);FBr=r(oqt,"TFAutoModelForQuestionAnswering"),oqt.forEach(t),BWe.forEach(t),Lze=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Wx.$$.fragment,Yl),TBr=i(Yl),Dc=n(Yl,"P",{});var Hte=s(Dc);MBr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pZ=n(Hte,"A",{href:!0});var rqt=s(pZ);EBr=r(rqt,"from_pretrained()"),rqt.forEach(t),CBr=r(Hte," class method or the "),_Z=n(Hte,"A",{href:!0});var tqt=s(_Z);wBr=r(tqt,"from_config()"),tqt.forEach(t),ABr=r(Hte,` class
method.`),Hte.forEach(t),LBr=i(Yl),Hx=n(Yl,"P",{});var IWe=s(Hx);yBr=r(IWe,"This class cannot be instantiated directly using "),gEe=n(IWe,"CODE",{});var aqt=s(gEe);xBr=r(aqt,"__init__()"),aqt.forEach(t),$Br=r(IWe," (throws an error)."),IWe.forEach(t),kBr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var CA=s(Xt);T(Ux.$$.fragment,CA),SBr=i(CA),hEe=n(CA,"P",{});var nqt=s(hEe);RBr=r(nqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nqt.forEach(t),PBr=i(CA),Gc=n(CA,"P",{});var Ute=s(Gc);BBr=r(Ute,`Note:
Loading a model from its configuration file does `),pEe=n(Ute,"STRONG",{});var sqt=s(pEe);IBr=r(sqt,"not"),sqt.forEach(t),NBr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Ute,"A",{href:!0});var lqt=s(uZ);qBr=r(lqt,"from_pretrained()"),lqt.forEach(t),jBr=r(Ute," to load the model weights."),Ute.forEach(t),DBr=i(CA),T(MC.$$.fragment,CA),CA.forEach(t),GBr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(Jx.$$.fragment,Kl),OBr=i(Kl),_Ee=n(Kl,"P",{});var iqt=s(_Ee);VBr=r(iqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iqt.forEach(t),XBr=i(Kl),bn=n(Kl,"P",{});var wA=s(bn);zBr=r(wA,"The model class to instantiate is selected based on the "),uEe=n(wA,"CODE",{});var dqt=s(uEe);QBr=r(dqt,"model_type"),dqt.forEach(t),WBr=r(wA,` property of the config object (either
passed as an argument or loaded from `),bEe=n(wA,"CODE",{});var cqt=s(bEe);HBr=r(cqt,"pretrained_model_name_or_path"),cqt.forEach(t),UBr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(wA,"CODE",{});var fqt=s(vEe);JBr=r(fqt,"pretrained_model_name_or_path"),fqt.forEach(t),YBr=r(wA,":"),wA.forEach(t),KBr=i(Kl),ce=n(Kl,"UL",{});var ge=s(ce);EC=n(ge,"LI",{});var LGe=s(EC);FEe=n(LGe,"STRONG",{});var mqt=s(FEe);ZBr=r(mqt,"albert"),mqt.forEach(t),eIr=r(LGe," \u2014 "),bZ=n(LGe,"A",{href:!0});var gqt=s(bZ);oIr=r(gqt,"TFAlbertForQuestionAnswering"),gqt.forEach(t),rIr=r(LGe," (ALBERT model)"),LGe.forEach(t),tIr=i(ge),CC=n(ge,"LI",{});var yGe=s(CC);TEe=n(yGe,"STRONG",{});var hqt=s(TEe);aIr=r(hqt,"bert"),hqt.forEach(t),nIr=r(yGe," \u2014 "),vZ=n(yGe,"A",{href:!0});var pqt=s(vZ);sIr=r(pqt,"TFBertForQuestionAnswering"),pqt.forEach(t),lIr=r(yGe," (BERT model)"),yGe.forEach(t),iIr=i(ge),wC=n(ge,"LI",{});var xGe=s(wC);MEe=n(xGe,"STRONG",{});var _qt=s(MEe);dIr=r(_qt,"camembert"),_qt.forEach(t),cIr=r(xGe," \u2014 "),FZ=n(xGe,"A",{href:!0});var uqt=s(FZ);fIr=r(uqt,"TFCamembertForQuestionAnswering"),uqt.forEach(t),mIr=r(xGe," (CamemBERT model)"),xGe.forEach(t),gIr=i(ge),AC=n(ge,"LI",{});var $Ge=s(AC);EEe=n($Ge,"STRONG",{});var bqt=s(EEe);hIr=r(bqt,"convbert"),bqt.forEach(t),pIr=r($Ge," \u2014 "),TZ=n($Ge,"A",{href:!0});var vqt=s(TZ);_Ir=r(vqt,"TFConvBertForQuestionAnswering"),vqt.forEach(t),uIr=r($Ge," (ConvBERT model)"),$Ge.forEach(t),bIr=i(ge),LC=n(ge,"LI",{});var kGe=s(LC);CEe=n(kGe,"STRONG",{});var Fqt=s(CEe);vIr=r(Fqt,"deberta"),Fqt.forEach(t),FIr=r(kGe," \u2014 "),MZ=n(kGe,"A",{href:!0});var Tqt=s(MZ);TIr=r(Tqt,"TFDebertaForQuestionAnswering"),Tqt.forEach(t),MIr=r(kGe," (DeBERTa model)"),kGe.forEach(t),EIr=i(ge),yC=n(ge,"LI",{});var SGe=s(yC);wEe=n(SGe,"STRONG",{});var Mqt=s(wEe);CIr=r(Mqt,"deberta-v2"),Mqt.forEach(t),wIr=r(SGe," \u2014 "),EZ=n(SGe,"A",{href:!0});var Eqt=s(EZ);AIr=r(Eqt,"TFDebertaV2ForQuestionAnswering"),Eqt.forEach(t),LIr=r(SGe," (DeBERTa-v2 model)"),SGe.forEach(t),yIr=i(ge),xC=n(ge,"LI",{});var RGe=s(xC);AEe=n(RGe,"STRONG",{});var Cqt=s(AEe);xIr=r(Cqt,"distilbert"),Cqt.forEach(t),$Ir=r(RGe," \u2014 "),CZ=n(RGe,"A",{href:!0});var wqt=s(CZ);kIr=r(wqt,"TFDistilBertForQuestionAnswering"),wqt.forEach(t),SIr=r(RGe," (DistilBERT model)"),RGe.forEach(t),RIr=i(ge),$C=n(ge,"LI",{});var PGe=s($C);LEe=n(PGe,"STRONG",{});var Aqt=s(LEe);PIr=r(Aqt,"electra"),Aqt.forEach(t),BIr=r(PGe," \u2014 "),wZ=n(PGe,"A",{href:!0});var Lqt=s(wZ);IIr=r(Lqt,"TFElectraForQuestionAnswering"),Lqt.forEach(t),NIr=r(PGe," (ELECTRA model)"),PGe.forEach(t),qIr=i(ge),kC=n(ge,"LI",{});var BGe=s(kC);yEe=n(BGe,"STRONG",{});var yqt=s(yEe);jIr=r(yqt,"flaubert"),yqt.forEach(t),DIr=r(BGe," \u2014 "),AZ=n(BGe,"A",{href:!0});var xqt=s(AZ);GIr=r(xqt,"TFFlaubertForQuestionAnsweringSimple"),xqt.forEach(t),OIr=r(BGe," (FlauBERT model)"),BGe.forEach(t),VIr=i(ge),SC=n(ge,"LI",{});var IGe=s(SC);xEe=n(IGe,"STRONG",{});var $qt=s(xEe);XIr=r($qt,"funnel"),$qt.forEach(t),zIr=r(IGe," \u2014 "),LZ=n(IGe,"A",{href:!0});var kqt=s(LZ);QIr=r(kqt,"TFFunnelForQuestionAnswering"),kqt.forEach(t),WIr=r(IGe," (Funnel Transformer model)"),IGe.forEach(t),HIr=i(ge),RC=n(ge,"LI",{});var NGe=s(RC);$Ee=n(NGe,"STRONG",{});var Sqt=s($Ee);UIr=r(Sqt,"gptj"),Sqt.forEach(t),JIr=r(NGe," \u2014 "),yZ=n(NGe,"A",{href:!0});var Rqt=s(yZ);YIr=r(Rqt,"TFGPTJForQuestionAnswering"),Rqt.forEach(t),KIr=r(NGe," (GPT-J model)"),NGe.forEach(t),ZIr=i(ge),PC=n(ge,"LI",{});var qGe=s(PC);kEe=n(qGe,"STRONG",{});var Pqt=s(kEe);eNr=r(Pqt,"longformer"),Pqt.forEach(t),oNr=r(qGe," \u2014 "),xZ=n(qGe,"A",{href:!0});var Bqt=s(xZ);rNr=r(Bqt,"TFLongformerForQuestionAnswering"),Bqt.forEach(t),tNr=r(qGe," (Longformer model)"),qGe.forEach(t),aNr=i(ge),BC=n(ge,"LI",{});var jGe=s(BC);SEe=n(jGe,"STRONG",{});var Iqt=s(SEe);nNr=r(Iqt,"mobilebert"),Iqt.forEach(t),sNr=r(jGe," \u2014 "),$Z=n(jGe,"A",{href:!0});var Nqt=s($Z);lNr=r(Nqt,"TFMobileBertForQuestionAnswering"),Nqt.forEach(t),iNr=r(jGe," (MobileBERT model)"),jGe.forEach(t),dNr=i(ge),IC=n(ge,"LI",{});var DGe=s(IC);REe=n(DGe,"STRONG",{});var qqt=s(REe);cNr=r(qqt,"mpnet"),qqt.forEach(t),fNr=r(DGe," \u2014 "),kZ=n(DGe,"A",{href:!0});var jqt=s(kZ);mNr=r(jqt,"TFMPNetForQuestionAnswering"),jqt.forEach(t),gNr=r(DGe," (MPNet model)"),DGe.forEach(t),hNr=i(ge),NC=n(ge,"LI",{});var GGe=s(NC);PEe=n(GGe,"STRONG",{});var Dqt=s(PEe);pNr=r(Dqt,"rembert"),Dqt.forEach(t),_Nr=r(GGe," \u2014 "),SZ=n(GGe,"A",{href:!0});var Gqt=s(SZ);uNr=r(Gqt,"TFRemBertForQuestionAnswering"),Gqt.forEach(t),bNr=r(GGe," (RemBERT model)"),GGe.forEach(t),vNr=i(ge),qC=n(ge,"LI",{});var OGe=s(qC);BEe=n(OGe,"STRONG",{});var Oqt=s(BEe);FNr=r(Oqt,"roberta"),Oqt.forEach(t),TNr=r(OGe," \u2014 "),RZ=n(OGe,"A",{href:!0});var Vqt=s(RZ);MNr=r(Vqt,"TFRobertaForQuestionAnswering"),Vqt.forEach(t),ENr=r(OGe," (RoBERTa model)"),OGe.forEach(t),CNr=i(ge),jC=n(ge,"LI",{});var VGe=s(jC);IEe=n(VGe,"STRONG",{});var Xqt=s(IEe);wNr=r(Xqt,"roformer"),Xqt.forEach(t),ANr=r(VGe," \u2014 "),PZ=n(VGe,"A",{href:!0});var zqt=s(PZ);LNr=r(zqt,"TFRoFormerForQuestionAnswering"),zqt.forEach(t),yNr=r(VGe," (RoFormer model)"),VGe.forEach(t),xNr=i(ge),DC=n(ge,"LI",{});var XGe=s(DC);NEe=n(XGe,"STRONG",{});var Qqt=s(NEe);$Nr=r(Qqt,"xlm"),Qqt.forEach(t),kNr=r(XGe," \u2014 "),BZ=n(XGe,"A",{href:!0});var Wqt=s(BZ);SNr=r(Wqt,"TFXLMForQuestionAnsweringSimple"),Wqt.forEach(t),RNr=r(XGe," (XLM model)"),XGe.forEach(t),PNr=i(ge),GC=n(ge,"LI",{});var zGe=s(GC);qEe=n(zGe,"STRONG",{});var Hqt=s(qEe);BNr=r(Hqt,"xlm-roberta"),Hqt.forEach(t),INr=r(zGe," \u2014 "),IZ=n(zGe,"A",{href:!0});var Uqt=s(IZ);NNr=r(Uqt,"TFXLMRobertaForQuestionAnswering"),Uqt.forEach(t),qNr=r(zGe," (XLM-RoBERTa model)"),zGe.forEach(t),jNr=i(ge),OC=n(ge,"LI",{});var QGe=s(OC);jEe=n(QGe,"STRONG",{});var Jqt=s(jEe);DNr=r(Jqt,"xlnet"),Jqt.forEach(t),GNr=r(QGe," \u2014 "),NZ=n(QGe,"A",{href:!0});var Yqt=s(NZ);ONr=r(Yqt,"TFXLNetForQuestionAnsweringSimple"),Yqt.forEach(t),VNr=r(QGe," (XLNet model)"),QGe.forEach(t),ge.forEach(t),XNr=i(Kl),T(VC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),yze=i(f),Oc=n(f,"H2",{class:!0});var NWe=s(Oc);XC=n(NWe,"A",{id:!0,class:!0,href:!0});var Kqt=s(XC);DEe=n(Kqt,"SPAN",{});var Zqt=s(DEe);T(Yx.$$.fragment,Zqt),Zqt.forEach(t),Kqt.forEach(t),zNr=i(NWe),GEe=n(NWe,"SPAN",{});var ejt=s(GEe);QNr=r(ejt,"TFAutoModelForVision2Seq"),ejt.forEach(t),NWe.forEach(t),xze=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(Kx.$$.fragment,Zl),WNr=i(Zl),Vc=n(Zl,"P",{});var Jte=s(Vc);HNr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=n(Jte,"A",{href:!0});var ojt=s(qZ);UNr=r(ojt,"from_pretrained()"),ojt.forEach(t),JNr=r(Jte," class method or the "),jZ=n(Jte,"A",{href:!0});var rjt=s(jZ);YNr=r(rjt,"from_config()"),rjt.forEach(t),KNr=r(Jte,` class
method.`),Jte.forEach(t),ZNr=i(Zl),Zx=n(Zl,"P",{});var qWe=s(Zx);eqr=r(qWe,"This class cannot be instantiated directly using "),OEe=n(qWe,"CODE",{});var tjt=s(OEe);oqr=r(tjt,"__init__()"),tjt.forEach(t),rqr=r(qWe," (throws an error)."),qWe.forEach(t),tqr=i(Zl),zt=n(Zl,"DIV",{class:!0});var AA=s(zt);T(e$.$$.fragment,AA),aqr=i(AA),VEe=n(AA,"P",{});var ajt=s(VEe);nqr=r(ajt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ajt.forEach(t),sqr=i(AA),Xc=n(AA,"P",{});var Yte=s(Xc);lqr=r(Yte,`Note:
Loading a model from its configuration file does `),XEe=n(Yte,"STRONG",{});var njt=s(XEe);iqr=r(njt,"not"),njt.forEach(t),dqr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Yte,"A",{href:!0});var sjt=s(DZ);cqr=r(sjt,"from_pretrained()"),sjt.forEach(t),fqr=r(Yte," to load the model weights."),Yte.forEach(t),mqr=i(AA),T(zC.$$.fragment,AA),AA.forEach(t),gqr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(o$.$$.fragment,ei),hqr=i(ei),zEe=n(ei,"P",{});var ljt=s(zEe);pqr=r(ljt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ljt.forEach(t),_qr=i(ei),vn=n(ei,"P",{});var LA=s(vn);uqr=r(LA,"The model class to instantiate is selected based on the "),QEe=n(LA,"CODE",{});var ijt=s(QEe);bqr=r(ijt,"model_type"),ijt.forEach(t),vqr=r(LA,` property of the config object (either
passed as an argument or loaded from `),WEe=n(LA,"CODE",{});var djt=s(WEe);Fqr=r(djt,"pretrained_model_name_or_path"),djt.forEach(t),Tqr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(LA,"CODE",{});var cjt=s(HEe);Mqr=r(cjt,"pretrained_model_name_or_path"),cjt.forEach(t),Eqr=r(LA,":"),LA.forEach(t),Cqr=i(ei),UEe=n(ei,"UL",{});var fjt=s(UEe);QC=n(fjt,"LI",{});var WGe=s(QC);JEe=n(WGe,"STRONG",{});var mjt=s(JEe);wqr=r(mjt,"vision-encoder-decoder"),mjt.forEach(t),Aqr=r(WGe," \u2014 "),GZ=n(WGe,"A",{href:!0});var gjt=s(GZ);Lqr=r(gjt,"TFVisionEncoderDecoderModel"),gjt.forEach(t),yqr=r(WGe," (Vision Encoder decoder model)"),WGe.forEach(t),fjt.forEach(t),xqr=i(ei),T(WC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),$ze=i(f),zc=n(f,"H2",{class:!0});var jWe=s(zc);HC=n(jWe,"A",{id:!0,class:!0,href:!0});var hjt=s(HC);YEe=n(hjt,"SPAN",{});var pjt=s(YEe);T(r$.$$.fragment,pjt),pjt.forEach(t),hjt.forEach(t),$qr=i(jWe),KEe=n(jWe,"SPAN",{});var _jt=s(KEe);kqr=r(_jt,"TFAutoModelForSpeechSeq2Seq"),_jt.forEach(t),jWe.forEach(t),kze=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(t$.$$.fragment,oi),Sqr=i(oi),Qc=n(oi,"P",{});var Kte=s(Qc);Rqr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OZ=n(Kte,"A",{href:!0});var ujt=s(OZ);Pqr=r(ujt,"from_pretrained()"),ujt.forEach(t),Bqr=r(Kte," class method or the "),VZ=n(Kte,"A",{href:!0});var bjt=s(VZ);Iqr=r(bjt,"from_config()"),bjt.forEach(t),Nqr=r(Kte,` class
method.`),Kte.forEach(t),qqr=i(oi),a$=n(oi,"P",{});var DWe=s(a$);jqr=r(DWe,"This class cannot be instantiated directly using "),ZEe=n(DWe,"CODE",{});var vjt=s(ZEe);Dqr=r(vjt,"__init__()"),vjt.forEach(t),Gqr=r(DWe," (throws an error)."),DWe.forEach(t),Oqr=i(oi),Qt=n(oi,"DIV",{class:!0});var yA=s(Qt);T(n$.$$.fragment,yA),Vqr=i(yA),eCe=n(yA,"P",{});var Fjt=s(eCe);Xqr=r(Fjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Fjt.forEach(t),zqr=i(yA),Wc=n(yA,"P",{});var Zte=s(Wc);Qqr=r(Zte,`Note:
Loading a model from its configuration file does `),oCe=n(Zte,"STRONG",{});var Tjt=s(oCe);Wqr=r(Tjt,"not"),Tjt.forEach(t),Hqr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Zte,"A",{href:!0});var Mjt=s(XZ);Uqr=r(Mjt,"from_pretrained()"),Mjt.forEach(t),Jqr=r(Zte," to load the model weights."),Zte.forEach(t),Yqr=i(yA),T(UC.$$.fragment,yA),yA.forEach(t),Kqr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(s$.$$.fragment,ri),Zqr=i(ri),rCe=n(ri,"P",{});var Ejt=s(rCe);ejr=r(Ejt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ejt.forEach(t),ojr=i(ri),Fn=n(ri,"P",{});var xA=s(Fn);rjr=r(xA,"The model class to instantiate is selected based on the "),tCe=n(xA,"CODE",{});var Cjt=s(tCe);tjr=r(Cjt,"model_type"),Cjt.forEach(t),ajr=r(xA,` property of the config object (either
passed as an argument or loaded from `),aCe=n(xA,"CODE",{});var wjt=s(aCe);njr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),sjr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(xA,"CODE",{});var Ajt=s(nCe);ljr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),ijr=r(xA,":"),xA.forEach(t),djr=i(ri),sCe=n(ri,"UL",{});var Ljt=s(sCe);JC=n(Ljt,"LI",{});var HGe=s(JC);lCe=n(HGe,"STRONG",{});var yjt=s(lCe);cjr=r(yjt,"speech_to_text"),yjt.forEach(t),fjr=r(HGe," \u2014 "),zZ=n(HGe,"A",{href:!0});var xjt=s(zZ);mjr=r(xjt,"TFSpeech2TextForConditionalGeneration"),xjt.forEach(t),gjr=r(HGe," (Speech2Text model)"),HGe.forEach(t),Ljt.forEach(t),hjr=i(ri),T(YC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Sze=i(f),Hc=n(f,"H2",{class:!0});var GWe=s(Hc);KC=n(GWe,"A",{id:!0,class:!0,href:!0});var $jt=s(KC);iCe=n($jt,"SPAN",{});var kjt=s(iCe);T(l$.$$.fragment,kjt),kjt.forEach(t),$jt.forEach(t),pjr=i(GWe),dCe=n(GWe,"SPAN",{});var Sjt=s(dCe);_jr=r(Sjt,"FlaxAutoModel"),Sjt.forEach(t),GWe.forEach(t),Rze=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(i$.$$.fragment,ti),ujr=i(ti),Uc=n(ti,"P",{});var eae=s(Uc);bjr=r(eae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QZ=n(eae,"A",{href:!0});var Rjt=s(QZ);vjr=r(Rjt,"from_pretrained()"),Rjt.forEach(t),Fjr=r(eae," class method or the "),WZ=n(eae,"A",{href:!0});var Pjt=s(WZ);Tjr=r(Pjt,"from_config()"),Pjt.forEach(t),Mjr=r(eae,` class
method.`),eae.forEach(t),Ejr=i(ti),d$=n(ti,"P",{});var OWe=s(d$);Cjr=r(OWe,"This class cannot be instantiated directly using "),cCe=n(OWe,"CODE",{});var Bjt=s(cCe);wjr=r(Bjt,"__init__()"),Bjt.forEach(t),Ajr=r(OWe," (throws an error)."),OWe.forEach(t),Ljr=i(ti),Wt=n(ti,"DIV",{class:!0});var $A=s(Wt);T(c$.$$.fragment,$A),yjr=i($A),fCe=n($A,"P",{});var Ijt=s(fCe);xjr=r(Ijt,"Instantiates one of the base model classes of the library from a configuration."),Ijt.forEach(t),$jr=i($A),Jc=n($A,"P",{});var oae=s(Jc);kjr=r(oae,`Note:
Loading a model from its configuration file does `),mCe=n(oae,"STRONG",{});var Njt=s(mCe);Sjr=r(Njt,"not"),Njt.forEach(t),Rjr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(oae,"A",{href:!0});var qjt=s(HZ);Pjr=r(qjt,"from_pretrained()"),qjt.forEach(t),Bjr=r(oae," to load the model weights."),oae.forEach(t),Ijr=i($A),T(ZC.$$.fragment,$A),$A.forEach(t),Njr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(f$.$$.fragment,ai),qjr=i(ai),gCe=n(ai,"P",{});var jjt=s(gCe);jjr=r(jjt,"Instantiate one of the base model classes of the library from a pretrained model."),jjt.forEach(t),Djr=i(ai),Tn=n(ai,"P",{});var kA=s(Tn);Gjr=r(kA,"The model class to instantiate is selected based on the "),hCe=n(kA,"CODE",{});var Djt=s(hCe);Ojr=r(Djt,"model_type"),Djt.forEach(t),Vjr=r(kA,` property of the config object (either
passed as an argument or loaded from `),pCe=n(kA,"CODE",{});var Gjt=s(pCe);Xjr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),zjr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(kA,"CODE",{});var Ojt=s(_Ce);Qjr=r(Ojt,"pretrained_model_name_or_path"),Ojt.forEach(t),Wjr=r(kA,":"),kA.forEach(t),Hjr=i(ai),oe=n(ai,"UL",{});var ae=s(oe);e3=n(ae,"LI",{});var UGe=s(e3);uCe=n(UGe,"STRONG",{});var Vjt=s(uCe);Ujr=r(Vjt,"albert"),Vjt.forEach(t),Jjr=r(UGe," \u2014 "),UZ=n(UGe,"A",{href:!0});var Xjt=s(UZ);Yjr=r(Xjt,"FlaxAlbertModel"),Xjt.forEach(t),Kjr=r(UGe," (ALBERT model)"),UGe.forEach(t),Zjr=i(ae),o3=n(ae,"LI",{});var JGe=s(o3);bCe=n(JGe,"STRONG",{});var zjt=s(bCe);eDr=r(zjt,"bart"),zjt.forEach(t),oDr=r(JGe," \u2014 "),JZ=n(JGe,"A",{href:!0});var Qjt=s(JZ);rDr=r(Qjt,"FlaxBartModel"),Qjt.forEach(t),tDr=r(JGe," (BART model)"),JGe.forEach(t),aDr=i(ae),r3=n(ae,"LI",{});var YGe=s(r3);vCe=n(YGe,"STRONG",{});var Wjt=s(vCe);nDr=r(Wjt,"beit"),Wjt.forEach(t),sDr=r(YGe," \u2014 "),YZ=n(YGe,"A",{href:!0});var Hjt=s(YZ);lDr=r(Hjt,"FlaxBeitModel"),Hjt.forEach(t),iDr=r(YGe," (BEiT model)"),YGe.forEach(t),dDr=i(ae),t3=n(ae,"LI",{});var KGe=s(t3);FCe=n(KGe,"STRONG",{});var Ujt=s(FCe);cDr=r(Ujt,"bert"),Ujt.forEach(t),fDr=r(KGe," \u2014 "),KZ=n(KGe,"A",{href:!0});var Jjt=s(KZ);mDr=r(Jjt,"FlaxBertModel"),Jjt.forEach(t),gDr=r(KGe," (BERT model)"),KGe.forEach(t),hDr=i(ae),a3=n(ae,"LI",{});var ZGe=s(a3);TCe=n(ZGe,"STRONG",{});var Yjt=s(TCe);pDr=r(Yjt,"big_bird"),Yjt.forEach(t),_Dr=r(ZGe," \u2014 "),ZZ=n(ZGe,"A",{href:!0});var Kjt=s(ZZ);uDr=r(Kjt,"FlaxBigBirdModel"),Kjt.forEach(t),bDr=r(ZGe," (BigBird model)"),ZGe.forEach(t),vDr=i(ae),n3=n(ae,"LI",{});var eOe=s(n3);MCe=n(eOe,"STRONG",{});var Zjt=s(MCe);FDr=r(Zjt,"blenderbot"),Zjt.forEach(t),TDr=r(eOe," \u2014 "),eee=n(eOe,"A",{href:!0});var eDt=s(eee);MDr=r(eDt,"FlaxBlenderbotModel"),eDt.forEach(t),EDr=r(eOe," (Blenderbot model)"),eOe.forEach(t),CDr=i(ae),s3=n(ae,"LI",{});var oOe=s(s3);ECe=n(oOe,"STRONG",{});var oDt=s(ECe);wDr=r(oDt,"blenderbot-small"),oDt.forEach(t),ADr=r(oOe," \u2014 "),oee=n(oOe,"A",{href:!0});var rDt=s(oee);LDr=r(rDt,"FlaxBlenderbotSmallModel"),rDt.forEach(t),yDr=r(oOe," (BlenderbotSmall model)"),oOe.forEach(t),xDr=i(ae),l3=n(ae,"LI",{});var rOe=s(l3);CCe=n(rOe,"STRONG",{});var tDt=s(CCe);$Dr=r(tDt,"clip"),tDt.forEach(t),kDr=r(rOe," \u2014 "),ree=n(rOe,"A",{href:!0});var aDt=s(ree);SDr=r(aDt,"FlaxCLIPModel"),aDt.forEach(t),RDr=r(rOe," (CLIP model)"),rOe.forEach(t),PDr=i(ae),i3=n(ae,"LI",{});var tOe=s(i3);wCe=n(tOe,"STRONG",{});var nDt=s(wCe);BDr=r(nDt,"distilbert"),nDt.forEach(t),IDr=r(tOe," \u2014 "),tee=n(tOe,"A",{href:!0});var sDt=s(tee);NDr=r(sDt,"FlaxDistilBertModel"),sDt.forEach(t),qDr=r(tOe," (DistilBERT model)"),tOe.forEach(t),jDr=i(ae),d3=n(ae,"LI",{});var aOe=s(d3);ACe=n(aOe,"STRONG",{});var lDt=s(ACe);DDr=r(lDt,"electra"),lDt.forEach(t),GDr=r(aOe," \u2014 "),aee=n(aOe,"A",{href:!0});var iDt=s(aee);ODr=r(iDt,"FlaxElectraModel"),iDt.forEach(t),VDr=r(aOe," (ELECTRA model)"),aOe.forEach(t),XDr=i(ae),c3=n(ae,"LI",{});var nOe=s(c3);LCe=n(nOe,"STRONG",{});var dDt=s(LCe);zDr=r(dDt,"gpt2"),dDt.forEach(t),QDr=r(nOe," \u2014 "),nee=n(nOe,"A",{href:!0});var cDt=s(nee);WDr=r(cDt,"FlaxGPT2Model"),cDt.forEach(t),HDr=r(nOe," (OpenAI GPT-2 model)"),nOe.forEach(t),UDr=i(ae),f3=n(ae,"LI",{});var sOe=s(f3);yCe=n(sOe,"STRONG",{});var fDt=s(yCe);JDr=r(fDt,"gpt_neo"),fDt.forEach(t),YDr=r(sOe," \u2014 "),see=n(sOe,"A",{href:!0});var mDt=s(see);KDr=r(mDt,"FlaxGPTNeoModel"),mDt.forEach(t),ZDr=r(sOe," (GPT Neo model)"),sOe.forEach(t),eGr=i(ae),m3=n(ae,"LI",{});var lOe=s(m3);xCe=n(lOe,"STRONG",{});var gDt=s(xCe);oGr=r(gDt,"gptj"),gDt.forEach(t),rGr=r(lOe," \u2014 "),lee=n(lOe,"A",{href:!0});var hDt=s(lee);tGr=r(hDt,"FlaxGPTJModel"),hDt.forEach(t),aGr=r(lOe," (GPT-J model)"),lOe.forEach(t),nGr=i(ae),g3=n(ae,"LI",{});var iOe=s(g3);$Ce=n(iOe,"STRONG",{});var pDt=s($Ce);sGr=r(pDt,"longt5"),pDt.forEach(t),lGr=r(iOe," \u2014 "),iee=n(iOe,"A",{href:!0});var _Dt=s(iee);iGr=r(_Dt,"FlaxLongT5Model"),_Dt.forEach(t),dGr=r(iOe," (LongT5 model)"),iOe.forEach(t),cGr=i(ae),h3=n(ae,"LI",{});var dOe=s(h3);kCe=n(dOe,"STRONG",{});var uDt=s(kCe);fGr=r(uDt,"marian"),uDt.forEach(t),mGr=r(dOe," \u2014 "),dee=n(dOe,"A",{href:!0});var bDt=s(dee);gGr=r(bDt,"FlaxMarianModel"),bDt.forEach(t),hGr=r(dOe," (Marian model)"),dOe.forEach(t),pGr=i(ae),p3=n(ae,"LI",{});var cOe=s(p3);SCe=n(cOe,"STRONG",{});var vDt=s(SCe);_Gr=r(vDt,"mbart"),vDt.forEach(t),uGr=r(cOe," \u2014 "),cee=n(cOe,"A",{href:!0});var FDt=s(cee);bGr=r(FDt,"FlaxMBartModel"),FDt.forEach(t),vGr=r(cOe," (mBART model)"),cOe.forEach(t),FGr=i(ae),_3=n(ae,"LI",{});var fOe=s(_3);RCe=n(fOe,"STRONG",{});var TDt=s(RCe);TGr=r(TDt,"mt5"),TDt.forEach(t),MGr=r(fOe," \u2014 "),fee=n(fOe,"A",{href:!0});var MDt=s(fee);EGr=r(MDt,"FlaxMT5Model"),MDt.forEach(t),CGr=r(fOe," (MT5 model)"),fOe.forEach(t),wGr=i(ae),u3=n(ae,"LI",{});var mOe=s(u3);PCe=n(mOe,"STRONG",{});var EDt=s(PCe);AGr=r(EDt,"opt"),EDt.forEach(t),LGr=r(mOe," \u2014 "),mee=n(mOe,"A",{href:!0});var CDt=s(mee);yGr=r(CDt,"FlaxOPTModel"),CDt.forEach(t),xGr=r(mOe," (OPT model)"),mOe.forEach(t),$Gr=i(ae),b3=n(ae,"LI",{});var gOe=s(b3);BCe=n(gOe,"STRONG",{});var wDt=s(BCe);kGr=r(wDt,"pegasus"),wDt.forEach(t),SGr=r(gOe," \u2014 "),gee=n(gOe,"A",{href:!0});var ADt=s(gee);RGr=r(ADt,"FlaxPegasusModel"),ADt.forEach(t),PGr=r(gOe," (Pegasus model)"),gOe.forEach(t),BGr=i(ae),v3=n(ae,"LI",{});var hOe=s(v3);ICe=n(hOe,"STRONG",{});var LDt=s(ICe);IGr=r(LDt,"roberta"),LDt.forEach(t),NGr=r(hOe," \u2014 "),hee=n(hOe,"A",{href:!0});var yDt=s(hee);qGr=r(yDt,"FlaxRobertaModel"),yDt.forEach(t),jGr=r(hOe," (RoBERTa model)"),hOe.forEach(t),DGr=i(ae),F3=n(ae,"LI",{});var pOe=s(F3);NCe=n(pOe,"STRONG",{});var xDt=s(NCe);GGr=r(xDt,"roformer"),xDt.forEach(t),OGr=r(pOe," \u2014 "),pee=n(pOe,"A",{href:!0});var $Dt=s(pee);VGr=r($Dt,"FlaxRoFormerModel"),$Dt.forEach(t),XGr=r(pOe," (RoFormer model)"),pOe.forEach(t),zGr=i(ae),T3=n(ae,"LI",{});var _Oe=s(T3);qCe=n(_Oe,"STRONG",{});var kDt=s(qCe);QGr=r(kDt,"t5"),kDt.forEach(t),WGr=r(_Oe," \u2014 "),_ee=n(_Oe,"A",{href:!0});var SDt=s(_ee);HGr=r(SDt,"FlaxT5Model"),SDt.forEach(t),UGr=r(_Oe," (T5 model)"),_Oe.forEach(t),JGr=i(ae),M3=n(ae,"LI",{});var uOe=s(M3);jCe=n(uOe,"STRONG",{});var RDt=s(jCe);YGr=r(RDt,"vision-text-dual-encoder"),RDt.forEach(t),KGr=r(uOe," \u2014 "),uee=n(uOe,"A",{href:!0});var PDt=s(uee);ZGr=r(PDt,"FlaxVisionTextDualEncoderModel"),PDt.forEach(t),eOr=r(uOe," (VisionTextDualEncoder model)"),uOe.forEach(t),oOr=i(ae),E3=n(ae,"LI",{});var bOe=s(E3);DCe=n(bOe,"STRONG",{});var BDt=s(DCe);rOr=r(BDt,"vit"),BDt.forEach(t),tOr=r(bOe," \u2014 "),bee=n(bOe,"A",{href:!0});var IDt=s(bee);aOr=r(IDt,"FlaxViTModel"),IDt.forEach(t),nOr=r(bOe," (ViT model)"),bOe.forEach(t),sOr=i(ae),C3=n(ae,"LI",{});var vOe=s(C3);GCe=n(vOe,"STRONG",{});var NDt=s(GCe);lOr=r(NDt,"wav2vec2"),NDt.forEach(t),iOr=r(vOe," \u2014 "),vee=n(vOe,"A",{href:!0});var qDt=s(vee);dOr=r(qDt,"FlaxWav2Vec2Model"),qDt.forEach(t),cOr=r(vOe," (Wav2Vec2 model)"),vOe.forEach(t),fOr=i(ae),w3=n(ae,"LI",{});var FOe=s(w3);OCe=n(FOe,"STRONG",{});var jDt=s(OCe);mOr=r(jDt,"xglm"),jDt.forEach(t),gOr=r(FOe," \u2014 "),Fee=n(FOe,"A",{href:!0});var DDt=s(Fee);hOr=r(DDt,"FlaxXGLMModel"),DDt.forEach(t),pOr=r(FOe," (XGLM model)"),FOe.forEach(t),_Or=i(ae),A3=n(ae,"LI",{});var TOe=s(A3);VCe=n(TOe,"STRONG",{});var GDt=s(VCe);uOr=r(GDt,"xlm-roberta"),GDt.forEach(t),bOr=r(TOe," \u2014 "),Tee=n(TOe,"A",{href:!0});var ODt=s(Tee);vOr=r(ODt,"FlaxXLMRobertaModel"),ODt.forEach(t),FOr=r(TOe," (XLM-RoBERTa model)"),TOe.forEach(t),ae.forEach(t),TOr=i(ai),T(L3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Pze=i(f),Yc=n(f,"H2",{class:!0});var VWe=s(Yc);y3=n(VWe,"A",{id:!0,class:!0,href:!0});var VDt=s(y3);XCe=n(VDt,"SPAN",{});var XDt=s(XCe);T(m$.$$.fragment,XDt),XDt.forEach(t),VDt.forEach(t),MOr=i(VWe),zCe=n(VWe,"SPAN",{});var zDt=s(zCe);EOr=r(zDt,"FlaxAutoModelForCausalLM"),zDt.forEach(t),VWe.forEach(t),Bze=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(g$.$$.fragment,ni),COr=i(ni),Kc=n(ni,"P",{});var rae=s(Kc);wOr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mee=n(rae,"A",{href:!0});var QDt=s(Mee);AOr=r(QDt,"from_pretrained()"),QDt.forEach(t),LOr=r(rae," class method or the "),Eee=n(rae,"A",{href:!0});var WDt=s(Eee);yOr=r(WDt,"from_config()"),WDt.forEach(t),xOr=r(rae,` class
method.`),rae.forEach(t),$Or=i(ni),h$=n(ni,"P",{});var XWe=s(h$);kOr=r(XWe,"This class cannot be instantiated directly using "),QCe=n(XWe,"CODE",{});var HDt=s(QCe);SOr=r(HDt,"__init__()"),HDt.forEach(t),ROr=r(XWe," (throws an error)."),XWe.forEach(t),POr=i(ni),Ht=n(ni,"DIV",{class:!0});var SA=s(Ht);T(p$.$$.fragment,SA),BOr=i(SA),WCe=n(SA,"P",{});var UDt=s(WCe);IOr=r(UDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UDt.forEach(t),NOr=i(SA),Zc=n(SA,"P",{});var tae=s(Zc);qOr=r(tae,`Note:
Loading a model from its configuration file does `),HCe=n(tae,"STRONG",{});var JDt=s(HCe);jOr=r(JDt,"not"),JDt.forEach(t),DOr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(tae,"A",{href:!0});var YDt=s(Cee);GOr=r(YDt,"from_pretrained()"),YDt.forEach(t),OOr=r(tae," to load the model weights."),tae.forEach(t),VOr=i(SA),T(x3.$$.fragment,SA),SA.forEach(t),XOr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(_$.$$.fragment,si),zOr=i(si),UCe=n(si,"P",{});var KDt=s(UCe);QOr=r(KDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KDt.forEach(t),WOr=i(si),Mn=n(si,"P",{});var RA=s(Mn);HOr=r(RA,"The model class to instantiate is selected based on the "),JCe=n(RA,"CODE",{});var ZDt=s(JCe);UOr=r(ZDt,"model_type"),ZDt.forEach(t),JOr=r(RA,` property of the config object (either
passed as an argument or loaded from `),YCe=n(RA,"CODE",{});var eGt=s(YCe);YOr=r(eGt,"pretrained_model_name_or_path"),eGt.forEach(t),KOr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=n(RA,"CODE",{});var oGt=s(KCe);ZOr=r(oGt,"pretrained_model_name_or_path"),oGt.forEach(t),eVr=r(RA,":"),RA.forEach(t),oVr=i(si),xe=n(si,"UL",{});var Ne=s(xe);$3=n(Ne,"LI",{});var MOe=s($3);ZCe=n(MOe,"STRONG",{});var rGt=s(ZCe);rVr=r(rGt,"bart"),rGt.forEach(t),tVr=r(MOe," \u2014 "),wee=n(MOe,"A",{href:!0});var tGt=s(wee);aVr=r(tGt,"FlaxBartForCausalLM"),tGt.forEach(t),nVr=r(MOe," (BART model)"),MOe.forEach(t),sVr=i(Ne),k3=n(Ne,"LI",{});var EOe=s(k3);e3e=n(EOe,"STRONG",{});var aGt=s(e3e);lVr=r(aGt,"bert"),aGt.forEach(t),iVr=r(EOe," \u2014 "),Aee=n(EOe,"A",{href:!0});var nGt=s(Aee);dVr=r(nGt,"FlaxBertForCausalLM"),nGt.forEach(t),cVr=r(EOe," (BERT model)"),EOe.forEach(t),fVr=i(Ne),S3=n(Ne,"LI",{});var COe=s(S3);o3e=n(COe,"STRONG",{});var sGt=s(o3e);mVr=r(sGt,"big_bird"),sGt.forEach(t),gVr=r(COe," \u2014 "),Lee=n(COe,"A",{href:!0});var lGt=s(Lee);hVr=r(lGt,"FlaxBigBirdForCausalLM"),lGt.forEach(t),pVr=r(COe," (BigBird model)"),COe.forEach(t),_Vr=i(Ne),R3=n(Ne,"LI",{});var wOe=s(R3);r3e=n(wOe,"STRONG",{});var iGt=s(r3e);uVr=r(iGt,"electra"),iGt.forEach(t),bVr=r(wOe," \u2014 "),yee=n(wOe,"A",{href:!0});var dGt=s(yee);vVr=r(dGt,"FlaxElectraForCausalLM"),dGt.forEach(t),FVr=r(wOe," (ELECTRA model)"),wOe.forEach(t),TVr=i(Ne),P3=n(Ne,"LI",{});var AOe=s(P3);t3e=n(AOe,"STRONG",{});var cGt=s(t3e);MVr=r(cGt,"gpt2"),cGt.forEach(t),EVr=r(AOe," \u2014 "),xee=n(AOe,"A",{href:!0});var fGt=s(xee);CVr=r(fGt,"FlaxGPT2LMHeadModel"),fGt.forEach(t),wVr=r(AOe," (OpenAI GPT-2 model)"),AOe.forEach(t),AVr=i(Ne),B3=n(Ne,"LI",{});var LOe=s(B3);a3e=n(LOe,"STRONG",{});var mGt=s(a3e);LVr=r(mGt,"gpt_neo"),mGt.forEach(t),yVr=r(LOe," \u2014 "),$ee=n(LOe,"A",{href:!0});var gGt=s($ee);xVr=r(gGt,"FlaxGPTNeoForCausalLM"),gGt.forEach(t),$Vr=r(LOe," (GPT Neo model)"),LOe.forEach(t),kVr=i(Ne),I3=n(Ne,"LI",{});var yOe=s(I3);n3e=n(yOe,"STRONG",{});var hGt=s(n3e);SVr=r(hGt,"gptj"),hGt.forEach(t),RVr=r(yOe," \u2014 "),kee=n(yOe,"A",{href:!0});var pGt=s(kee);PVr=r(pGt,"FlaxGPTJForCausalLM"),pGt.forEach(t),BVr=r(yOe," (GPT-J model)"),yOe.forEach(t),IVr=i(Ne),N3=n(Ne,"LI",{});var xOe=s(N3);s3e=n(xOe,"STRONG",{});var _Gt=s(s3e);NVr=r(_Gt,"opt"),_Gt.forEach(t),qVr=r(xOe," \u2014 "),See=n(xOe,"A",{href:!0});var uGt=s(See);jVr=r(uGt,"FlaxOPTForCausalLM"),uGt.forEach(t),DVr=r(xOe," (OPT model)"),xOe.forEach(t),GVr=i(Ne),q3=n(Ne,"LI",{});var $Oe=s(q3);l3e=n($Oe,"STRONG",{});var bGt=s(l3e);OVr=r(bGt,"roberta"),bGt.forEach(t),VVr=r($Oe," \u2014 "),Ree=n($Oe,"A",{href:!0});var vGt=s(Ree);XVr=r(vGt,"FlaxRobertaForCausalLM"),vGt.forEach(t),zVr=r($Oe," (RoBERTa model)"),$Oe.forEach(t),QVr=i(Ne),j3=n(Ne,"LI",{});var kOe=s(j3);i3e=n(kOe,"STRONG",{});var FGt=s(i3e);WVr=r(FGt,"xglm"),FGt.forEach(t),HVr=r(kOe," \u2014 "),Pee=n(kOe,"A",{href:!0});var TGt=s(Pee);UVr=r(TGt,"FlaxXGLMForCausalLM"),TGt.forEach(t),JVr=r(kOe," (XGLM model)"),kOe.forEach(t),Ne.forEach(t),YVr=i(si),T(D3.$$.fragment,si),si.forEach(t),ni.forEach(t),Ize=i(f),ef=n(f,"H2",{class:!0});var zWe=s(ef);G3=n(zWe,"A",{id:!0,class:!0,href:!0});var MGt=s(G3);d3e=n(MGt,"SPAN",{});var EGt=s(d3e);T(u$.$$.fragment,EGt),EGt.forEach(t),MGt.forEach(t),KVr=i(zWe),c3e=n(zWe,"SPAN",{});var CGt=s(c3e);ZVr=r(CGt,"FlaxAutoModelForPreTraining"),CGt.forEach(t),zWe.forEach(t),Nze=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(b$.$$.fragment,li),eXr=i(li),of=n(li,"P",{});var aae=s(of);oXr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bee=n(aae,"A",{href:!0});var wGt=s(Bee);rXr=r(wGt,"from_pretrained()"),wGt.forEach(t),tXr=r(aae," class method or the "),Iee=n(aae,"A",{href:!0});var AGt=s(Iee);aXr=r(AGt,"from_config()"),AGt.forEach(t),nXr=r(aae,` class
method.`),aae.forEach(t),sXr=i(li),v$=n(li,"P",{});var QWe=s(v$);lXr=r(QWe,"This class cannot be instantiated directly using "),f3e=n(QWe,"CODE",{});var LGt=s(f3e);iXr=r(LGt,"__init__()"),LGt.forEach(t),dXr=r(QWe," (throws an error)."),QWe.forEach(t),cXr=i(li),Ut=n(li,"DIV",{class:!0});var PA=s(Ut);T(F$.$$.fragment,PA),fXr=i(PA),m3e=n(PA,"P",{});var yGt=s(m3e);mXr=r(yGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yGt.forEach(t),gXr=i(PA),rf=n(PA,"P",{});var nae=s(rf);hXr=r(nae,`Note:
Loading a model from its configuration file does `),g3e=n(nae,"STRONG",{});var xGt=s(g3e);pXr=r(xGt,"not"),xGt.forEach(t),_Xr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=n(nae,"A",{href:!0});var $Gt=s(Nee);uXr=r($Gt,"from_pretrained()"),$Gt.forEach(t),bXr=r(nae," to load the model weights."),nae.forEach(t),vXr=i(PA),T(O3.$$.fragment,PA),PA.forEach(t),FXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(T$.$$.fragment,ii),TXr=i(ii),h3e=n(ii,"P",{});var kGt=s(h3e);MXr=r(kGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kGt.forEach(t),EXr=i(ii),En=n(ii,"P",{});var BA=s(En);CXr=r(BA,"The model class to instantiate is selected based on the "),p3e=n(BA,"CODE",{});var SGt=s(p3e);wXr=r(SGt,"model_type"),SGt.forEach(t),AXr=r(BA,` property of the config object (either
passed as an argument or loaded from `),_3e=n(BA,"CODE",{});var RGt=s(_3e);LXr=r(RGt,"pretrained_model_name_or_path"),RGt.forEach(t),yXr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(BA,"CODE",{});var PGt=s(u3e);xXr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),$Xr=r(BA,":"),BA.forEach(t),kXr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);V3=n(we,"LI",{});var SOe=s(V3);b3e=n(SOe,"STRONG",{});var BGt=s(b3e);SXr=r(BGt,"albert"),BGt.forEach(t),RXr=r(SOe," \u2014 "),qee=n(SOe,"A",{href:!0});var IGt=s(qee);PXr=r(IGt,"FlaxAlbertForPreTraining"),IGt.forEach(t),BXr=r(SOe," (ALBERT model)"),SOe.forEach(t),IXr=i(we),X3=n(we,"LI",{});var ROe=s(X3);v3e=n(ROe,"STRONG",{});var NGt=s(v3e);NXr=r(NGt,"bart"),NGt.forEach(t),qXr=r(ROe," \u2014 "),jee=n(ROe,"A",{href:!0});var qGt=s(jee);jXr=r(qGt,"FlaxBartForConditionalGeneration"),qGt.forEach(t),DXr=r(ROe," (BART model)"),ROe.forEach(t),GXr=i(we),z3=n(we,"LI",{});var POe=s(z3);F3e=n(POe,"STRONG",{});var jGt=s(F3e);OXr=r(jGt,"bert"),jGt.forEach(t),VXr=r(POe," \u2014 "),Dee=n(POe,"A",{href:!0});var DGt=s(Dee);XXr=r(DGt,"FlaxBertForPreTraining"),DGt.forEach(t),zXr=r(POe," (BERT model)"),POe.forEach(t),QXr=i(we),Q3=n(we,"LI",{});var BOe=s(Q3);T3e=n(BOe,"STRONG",{});var GGt=s(T3e);WXr=r(GGt,"big_bird"),GGt.forEach(t),HXr=r(BOe," \u2014 "),Gee=n(BOe,"A",{href:!0});var OGt=s(Gee);UXr=r(OGt,"FlaxBigBirdForPreTraining"),OGt.forEach(t),JXr=r(BOe," (BigBird model)"),BOe.forEach(t),YXr=i(we),W3=n(we,"LI",{});var IOe=s(W3);M3e=n(IOe,"STRONG",{});var VGt=s(M3e);KXr=r(VGt,"electra"),VGt.forEach(t),ZXr=r(IOe," \u2014 "),Oee=n(IOe,"A",{href:!0});var XGt=s(Oee);ezr=r(XGt,"FlaxElectraForPreTraining"),XGt.forEach(t),ozr=r(IOe," (ELECTRA model)"),IOe.forEach(t),rzr=i(we),H3=n(we,"LI",{});var NOe=s(H3);E3e=n(NOe,"STRONG",{});var zGt=s(E3e);tzr=r(zGt,"longt5"),zGt.forEach(t),azr=r(NOe," \u2014 "),Vee=n(NOe,"A",{href:!0});var QGt=s(Vee);nzr=r(QGt,"FlaxLongT5ForConditionalGeneration"),QGt.forEach(t),szr=r(NOe," (LongT5 model)"),NOe.forEach(t),lzr=i(we),U3=n(we,"LI",{});var qOe=s(U3);C3e=n(qOe,"STRONG",{});var WGt=s(C3e);izr=r(WGt,"mbart"),WGt.forEach(t),dzr=r(qOe," \u2014 "),Xee=n(qOe,"A",{href:!0});var HGt=s(Xee);czr=r(HGt,"FlaxMBartForConditionalGeneration"),HGt.forEach(t),fzr=r(qOe," (mBART model)"),qOe.forEach(t),mzr=i(we),J3=n(we,"LI",{});var jOe=s(J3);w3e=n(jOe,"STRONG",{});var UGt=s(w3e);gzr=r(UGt,"mt5"),UGt.forEach(t),hzr=r(jOe," \u2014 "),zee=n(jOe,"A",{href:!0});var JGt=s(zee);pzr=r(JGt,"FlaxMT5ForConditionalGeneration"),JGt.forEach(t),_zr=r(jOe," (MT5 model)"),jOe.forEach(t),uzr=i(we),Y3=n(we,"LI",{});var DOe=s(Y3);A3e=n(DOe,"STRONG",{});var YGt=s(A3e);bzr=r(YGt,"roberta"),YGt.forEach(t),vzr=r(DOe," \u2014 "),Qee=n(DOe,"A",{href:!0});var KGt=s(Qee);Fzr=r(KGt,"FlaxRobertaForMaskedLM"),KGt.forEach(t),Tzr=r(DOe," (RoBERTa model)"),DOe.forEach(t),Mzr=i(we),K3=n(we,"LI",{});var GOe=s(K3);L3e=n(GOe,"STRONG",{});var ZGt=s(L3e);Ezr=r(ZGt,"roformer"),ZGt.forEach(t),Czr=r(GOe," \u2014 "),Wee=n(GOe,"A",{href:!0});var eOt=s(Wee);wzr=r(eOt,"FlaxRoFormerForMaskedLM"),eOt.forEach(t),Azr=r(GOe," (RoFormer model)"),GOe.forEach(t),Lzr=i(we),Z3=n(we,"LI",{});var OOe=s(Z3);y3e=n(OOe,"STRONG",{});var oOt=s(y3e);yzr=r(oOt,"t5"),oOt.forEach(t),xzr=r(OOe," \u2014 "),Hee=n(OOe,"A",{href:!0});var rOt=s(Hee);$zr=r(rOt,"FlaxT5ForConditionalGeneration"),rOt.forEach(t),kzr=r(OOe," (T5 model)"),OOe.forEach(t),Szr=i(we),e5=n(we,"LI",{});var VOe=s(e5);x3e=n(VOe,"STRONG",{});var tOt=s(x3e);Rzr=r(tOt,"wav2vec2"),tOt.forEach(t),Pzr=r(VOe," \u2014 "),Uee=n(VOe,"A",{href:!0});var aOt=s(Uee);Bzr=r(aOt,"FlaxWav2Vec2ForPreTraining"),aOt.forEach(t),Izr=r(VOe," (Wav2Vec2 model)"),VOe.forEach(t),Nzr=i(we),o5=n(we,"LI",{});var XOe=s(o5);$3e=n(XOe,"STRONG",{});var nOt=s($3e);qzr=r(nOt,"xlm-roberta"),nOt.forEach(t),jzr=r(XOe," \u2014 "),Jee=n(XOe,"A",{href:!0});var sOt=s(Jee);Dzr=r(sOt,"FlaxXLMRobertaForMaskedLM"),sOt.forEach(t),Gzr=r(XOe," (XLM-RoBERTa model)"),XOe.forEach(t),we.forEach(t),Ozr=i(ii),T(r5.$$.fragment,ii),ii.forEach(t),li.forEach(t),qze=i(f),tf=n(f,"H2",{class:!0});var WWe=s(tf);t5=n(WWe,"A",{id:!0,class:!0,href:!0});var lOt=s(t5);k3e=n(lOt,"SPAN",{});var iOt=s(k3e);T(M$.$$.fragment,iOt),iOt.forEach(t),lOt.forEach(t),Vzr=i(WWe),S3e=n(WWe,"SPAN",{});var dOt=s(S3e);Xzr=r(dOt,"FlaxAutoModelForMaskedLM"),dOt.forEach(t),WWe.forEach(t),jze=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(E$.$$.fragment,di),zzr=i(di),af=n(di,"P",{});var sae=s(af);Qzr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yee=n(sae,"A",{href:!0});var cOt=s(Yee);Wzr=r(cOt,"from_pretrained()"),cOt.forEach(t),Hzr=r(sae," class method or the "),Kee=n(sae,"A",{href:!0});var fOt=s(Kee);Uzr=r(fOt,"from_config()"),fOt.forEach(t),Jzr=r(sae,` class
method.`),sae.forEach(t),Yzr=i(di),C$=n(di,"P",{});var HWe=s(C$);Kzr=r(HWe,"This class cannot be instantiated directly using "),R3e=n(HWe,"CODE",{});var mOt=s(R3e);Zzr=r(mOt,"__init__()"),mOt.forEach(t),eQr=r(HWe," (throws an error)."),HWe.forEach(t),oQr=i(di),Jt=n(di,"DIV",{class:!0});var IA=s(Jt);T(w$.$$.fragment,IA),rQr=i(IA),P3e=n(IA,"P",{});var gOt=s(P3e);tQr=r(gOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gOt.forEach(t),aQr=i(IA),nf=n(IA,"P",{});var lae=s(nf);nQr=r(lae,`Note:
Loading a model from its configuration file does `),B3e=n(lae,"STRONG",{});var hOt=s(B3e);sQr=r(hOt,"not"),hOt.forEach(t),lQr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(lae,"A",{href:!0});var pOt=s(Zee);iQr=r(pOt,"from_pretrained()"),pOt.forEach(t),dQr=r(lae," to load the model weights."),lae.forEach(t),cQr=i(IA),T(a5.$$.fragment,IA),IA.forEach(t),fQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(A$.$$.fragment,ci),mQr=i(ci),I3e=n(ci,"P",{});var _Ot=s(I3e);gQr=r(_Ot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Ot.forEach(t),hQr=i(ci),Cn=n(ci,"P",{});var NA=s(Cn);pQr=r(NA,"The model class to instantiate is selected based on the "),N3e=n(NA,"CODE",{});var uOt=s(N3e);_Qr=r(uOt,"model_type"),uOt.forEach(t),uQr=r(NA,` property of the config object (either
passed as an argument or loaded from `),q3e=n(NA,"CODE",{});var bOt=s(q3e);bQr=r(bOt,"pretrained_model_name_or_path"),bOt.forEach(t),vQr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(NA,"CODE",{});var vOt=s(j3e);FQr=r(vOt,"pretrained_model_name_or_path"),vOt.forEach(t),TQr=r(NA,":"),NA.forEach(t),MQr=i(ci),$e=n(ci,"UL",{});var qe=s($e);n5=n(qe,"LI",{});var zOe=s(n5);D3e=n(zOe,"STRONG",{});var FOt=s(D3e);EQr=r(FOt,"albert"),FOt.forEach(t),CQr=r(zOe," \u2014 "),eoe=n(zOe,"A",{href:!0});var TOt=s(eoe);wQr=r(TOt,"FlaxAlbertForMaskedLM"),TOt.forEach(t),AQr=r(zOe," (ALBERT model)"),zOe.forEach(t),LQr=i(qe),s5=n(qe,"LI",{});var QOe=s(s5);G3e=n(QOe,"STRONG",{});var MOt=s(G3e);yQr=r(MOt,"bart"),MOt.forEach(t),xQr=r(QOe," \u2014 "),ooe=n(QOe,"A",{href:!0});var EOt=s(ooe);$Qr=r(EOt,"FlaxBartForConditionalGeneration"),EOt.forEach(t),kQr=r(QOe," (BART model)"),QOe.forEach(t),SQr=i(qe),l5=n(qe,"LI",{});var WOe=s(l5);O3e=n(WOe,"STRONG",{});var COt=s(O3e);RQr=r(COt,"bert"),COt.forEach(t),PQr=r(WOe," \u2014 "),roe=n(WOe,"A",{href:!0});var wOt=s(roe);BQr=r(wOt,"FlaxBertForMaskedLM"),wOt.forEach(t),IQr=r(WOe," (BERT model)"),WOe.forEach(t),NQr=i(qe),i5=n(qe,"LI",{});var HOe=s(i5);V3e=n(HOe,"STRONG",{});var AOt=s(V3e);qQr=r(AOt,"big_bird"),AOt.forEach(t),jQr=r(HOe," \u2014 "),toe=n(HOe,"A",{href:!0});var LOt=s(toe);DQr=r(LOt,"FlaxBigBirdForMaskedLM"),LOt.forEach(t),GQr=r(HOe," (BigBird model)"),HOe.forEach(t),OQr=i(qe),d5=n(qe,"LI",{});var UOe=s(d5);X3e=n(UOe,"STRONG",{});var yOt=s(X3e);VQr=r(yOt,"distilbert"),yOt.forEach(t),XQr=r(UOe," \u2014 "),aoe=n(UOe,"A",{href:!0});var xOt=s(aoe);zQr=r(xOt,"FlaxDistilBertForMaskedLM"),xOt.forEach(t),QQr=r(UOe," (DistilBERT model)"),UOe.forEach(t),WQr=i(qe),c5=n(qe,"LI",{});var JOe=s(c5);z3e=n(JOe,"STRONG",{});var $Ot=s(z3e);HQr=r($Ot,"electra"),$Ot.forEach(t),UQr=r(JOe," \u2014 "),noe=n(JOe,"A",{href:!0});var kOt=s(noe);JQr=r(kOt,"FlaxElectraForMaskedLM"),kOt.forEach(t),YQr=r(JOe," (ELECTRA model)"),JOe.forEach(t),KQr=i(qe),f5=n(qe,"LI",{});var YOe=s(f5);Q3e=n(YOe,"STRONG",{});var SOt=s(Q3e);ZQr=r(SOt,"mbart"),SOt.forEach(t),eWr=r(YOe," \u2014 "),soe=n(YOe,"A",{href:!0});var ROt=s(soe);oWr=r(ROt,"FlaxMBartForConditionalGeneration"),ROt.forEach(t),rWr=r(YOe," (mBART model)"),YOe.forEach(t),tWr=i(qe),m5=n(qe,"LI",{});var KOe=s(m5);W3e=n(KOe,"STRONG",{});var POt=s(W3e);aWr=r(POt,"roberta"),POt.forEach(t),nWr=r(KOe," \u2014 "),loe=n(KOe,"A",{href:!0});var BOt=s(loe);sWr=r(BOt,"FlaxRobertaForMaskedLM"),BOt.forEach(t),lWr=r(KOe," (RoBERTa model)"),KOe.forEach(t),iWr=i(qe),g5=n(qe,"LI",{});var ZOe=s(g5);H3e=n(ZOe,"STRONG",{});var IOt=s(H3e);dWr=r(IOt,"roformer"),IOt.forEach(t),cWr=r(ZOe," \u2014 "),ioe=n(ZOe,"A",{href:!0});var NOt=s(ioe);fWr=r(NOt,"FlaxRoFormerForMaskedLM"),NOt.forEach(t),mWr=r(ZOe," (RoFormer model)"),ZOe.forEach(t),gWr=i(qe),h5=n(qe,"LI",{});var eVe=s(h5);U3e=n(eVe,"STRONG",{});var qOt=s(U3e);hWr=r(qOt,"xlm-roberta"),qOt.forEach(t),pWr=r(eVe," \u2014 "),doe=n(eVe,"A",{href:!0});var jOt=s(doe);_Wr=r(jOt,"FlaxXLMRobertaForMaskedLM"),jOt.forEach(t),uWr=r(eVe," (XLM-RoBERTa model)"),eVe.forEach(t),qe.forEach(t),bWr=i(ci),T(p5.$$.fragment,ci),ci.forEach(t),di.forEach(t),Dze=i(f),sf=n(f,"H2",{class:!0});var UWe=s(sf);_5=n(UWe,"A",{id:!0,class:!0,href:!0});var DOt=s(_5);J3e=n(DOt,"SPAN",{});var GOt=s(J3e);T(L$.$$.fragment,GOt),GOt.forEach(t),DOt.forEach(t),vWr=i(UWe),Y3e=n(UWe,"SPAN",{});var OOt=s(Y3e);FWr=r(OOt,"FlaxAutoModelForSeq2SeqLM"),OOt.forEach(t),UWe.forEach(t),Gze=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(y$.$$.fragment,fi),TWr=i(fi),lf=n(fi,"P",{});var iae=s(lf);MWr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),coe=n(iae,"A",{href:!0});var VOt=s(coe);EWr=r(VOt,"from_pretrained()"),VOt.forEach(t),CWr=r(iae," class method or the "),foe=n(iae,"A",{href:!0});var XOt=s(foe);wWr=r(XOt,"from_config()"),XOt.forEach(t),AWr=r(iae,` class
method.`),iae.forEach(t),LWr=i(fi),x$=n(fi,"P",{});var JWe=s(x$);yWr=r(JWe,"This class cannot be instantiated directly using "),K3e=n(JWe,"CODE",{});var zOt=s(K3e);xWr=r(zOt,"__init__()"),zOt.forEach(t),$Wr=r(JWe," (throws an error)."),JWe.forEach(t),kWr=i(fi),Yt=n(fi,"DIV",{class:!0});var qA=s(Yt);T($$.$$.fragment,qA),SWr=i(qA),Z3e=n(qA,"P",{});var QOt=s(Z3e);RWr=r(QOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QOt.forEach(t),PWr=i(qA),df=n(qA,"P",{});var dae=s(df);BWr=r(dae,`Note:
Loading a model from its configuration file does `),e5e=n(dae,"STRONG",{});var WOt=s(e5e);IWr=r(WOt,"not"),WOt.forEach(t),NWr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=n(dae,"A",{href:!0});var HOt=s(moe);qWr=r(HOt,"from_pretrained()"),HOt.forEach(t),jWr=r(dae," to load the model weights."),dae.forEach(t),DWr=i(qA),T(u5.$$.fragment,qA),qA.forEach(t),GWr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(k$.$$.fragment,mi),OWr=i(mi),o5e=n(mi,"P",{});var UOt=s(o5e);VWr=r(UOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UOt.forEach(t),XWr=i(mi),wn=n(mi,"P",{});var jA=s(wn);zWr=r(jA,"The model class to instantiate is selected based on the "),r5e=n(jA,"CODE",{});var JOt=s(r5e);QWr=r(JOt,"model_type"),JOt.forEach(t),WWr=r(jA,` property of the config object (either
passed as an argument or loaded from `),t5e=n(jA,"CODE",{});var YOt=s(t5e);HWr=r(YOt,"pretrained_model_name_or_path"),YOt.forEach(t),UWr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(jA,"CODE",{});var KOt=s(a5e);JWr=r(KOt,"pretrained_model_name_or_path"),KOt.forEach(t),YWr=r(jA,":"),jA.forEach(t),KWr=i(mi),ke=n(mi,"UL",{});var je=s(ke);b5=n(je,"LI",{});var oVe=s(b5);n5e=n(oVe,"STRONG",{});var ZOt=s(n5e);ZWr=r(ZOt,"bart"),ZOt.forEach(t),eHr=r(oVe," \u2014 "),goe=n(oVe,"A",{href:!0});var eVt=s(goe);oHr=r(eVt,"FlaxBartForConditionalGeneration"),eVt.forEach(t),rHr=r(oVe," (BART model)"),oVe.forEach(t),tHr=i(je),v5=n(je,"LI",{});var rVe=s(v5);s5e=n(rVe,"STRONG",{});var oVt=s(s5e);aHr=r(oVt,"blenderbot"),oVt.forEach(t),nHr=r(rVe," \u2014 "),hoe=n(rVe,"A",{href:!0});var rVt=s(hoe);sHr=r(rVt,"FlaxBlenderbotForConditionalGeneration"),rVt.forEach(t),lHr=r(rVe," (Blenderbot model)"),rVe.forEach(t),iHr=i(je),F5=n(je,"LI",{});var tVe=s(F5);l5e=n(tVe,"STRONG",{});var tVt=s(l5e);dHr=r(tVt,"blenderbot-small"),tVt.forEach(t),cHr=r(tVe," \u2014 "),poe=n(tVe,"A",{href:!0});var aVt=s(poe);fHr=r(aVt,"FlaxBlenderbotSmallForConditionalGeneration"),aVt.forEach(t),mHr=r(tVe," (BlenderbotSmall model)"),tVe.forEach(t),gHr=i(je),T5=n(je,"LI",{});var aVe=s(T5);i5e=n(aVe,"STRONG",{});var nVt=s(i5e);hHr=r(nVt,"encoder-decoder"),nVt.forEach(t),pHr=r(aVe," \u2014 "),_oe=n(aVe,"A",{href:!0});var sVt=s(_oe);_Hr=r(sVt,"FlaxEncoderDecoderModel"),sVt.forEach(t),uHr=r(aVe," (Encoder decoder model)"),aVe.forEach(t),bHr=i(je),M5=n(je,"LI",{});var nVe=s(M5);d5e=n(nVe,"STRONG",{});var lVt=s(d5e);vHr=r(lVt,"longt5"),lVt.forEach(t),FHr=r(nVe," \u2014 "),uoe=n(nVe,"A",{href:!0});var iVt=s(uoe);THr=r(iVt,"FlaxLongT5ForConditionalGeneration"),iVt.forEach(t),MHr=r(nVe," (LongT5 model)"),nVe.forEach(t),EHr=i(je),E5=n(je,"LI",{});var sVe=s(E5);c5e=n(sVe,"STRONG",{});var dVt=s(c5e);CHr=r(dVt,"marian"),dVt.forEach(t),wHr=r(sVe," \u2014 "),boe=n(sVe,"A",{href:!0});var cVt=s(boe);AHr=r(cVt,"FlaxMarianMTModel"),cVt.forEach(t),LHr=r(sVe," (Marian model)"),sVe.forEach(t),yHr=i(je),C5=n(je,"LI",{});var lVe=s(C5);f5e=n(lVe,"STRONG",{});var fVt=s(f5e);xHr=r(fVt,"mbart"),fVt.forEach(t),$Hr=r(lVe," \u2014 "),voe=n(lVe,"A",{href:!0});var mVt=s(voe);kHr=r(mVt,"FlaxMBartForConditionalGeneration"),mVt.forEach(t),SHr=r(lVe," (mBART model)"),lVe.forEach(t),RHr=i(je),w5=n(je,"LI",{});var iVe=s(w5);m5e=n(iVe,"STRONG",{});var gVt=s(m5e);PHr=r(gVt,"mt5"),gVt.forEach(t),BHr=r(iVe," \u2014 "),Foe=n(iVe,"A",{href:!0});var hVt=s(Foe);IHr=r(hVt,"FlaxMT5ForConditionalGeneration"),hVt.forEach(t),NHr=r(iVe," (MT5 model)"),iVe.forEach(t),qHr=i(je),A5=n(je,"LI",{});var dVe=s(A5);g5e=n(dVe,"STRONG",{});var pVt=s(g5e);jHr=r(pVt,"pegasus"),pVt.forEach(t),DHr=r(dVe," \u2014 "),Toe=n(dVe,"A",{href:!0});var _Vt=s(Toe);GHr=r(_Vt,"FlaxPegasusForConditionalGeneration"),_Vt.forEach(t),OHr=r(dVe," (Pegasus model)"),dVe.forEach(t),VHr=i(je),L5=n(je,"LI",{});var cVe=s(L5);h5e=n(cVe,"STRONG",{});var uVt=s(h5e);XHr=r(uVt,"t5"),uVt.forEach(t),zHr=r(cVe," \u2014 "),Moe=n(cVe,"A",{href:!0});var bVt=s(Moe);QHr=r(bVt,"FlaxT5ForConditionalGeneration"),bVt.forEach(t),WHr=r(cVe," (T5 model)"),cVe.forEach(t),je.forEach(t),HHr=i(mi),T(y5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Oze=i(f),cf=n(f,"H2",{class:!0});var YWe=s(cf);x5=n(YWe,"A",{id:!0,class:!0,href:!0});var vVt=s(x5);p5e=n(vVt,"SPAN",{});var FVt=s(p5e);T(S$.$$.fragment,FVt),FVt.forEach(t),vVt.forEach(t),UHr=i(YWe),_5e=n(YWe,"SPAN",{});var TVt=s(_5e);JHr=r(TVt,"FlaxAutoModelForSequenceClassification"),TVt.forEach(t),YWe.forEach(t),Vze=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(R$.$$.fragment,gi),YHr=i(gi),ff=n(gi,"P",{});var cae=s(ff);KHr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eoe=n(cae,"A",{href:!0});var MVt=s(Eoe);ZHr=r(MVt,"from_pretrained()"),MVt.forEach(t),eUr=r(cae," class method or the "),Coe=n(cae,"A",{href:!0});var EVt=s(Coe);oUr=r(EVt,"from_config()"),EVt.forEach(t),rUr=r(cae,` class
method.`),cae.forEach(t),tUr=i(gi),P$=n(gi,"P",{});var KWe=s(P$);aUr=r(KWe,"This class cannot be instantiated directly using "),u5e=n(KWe,"CODE",{});var CVt=s(u5e);nUr=r(CVt,"__init__()"),CVt.forEach(t),sUr=r(KWe," (throws an error)."),KWe.forEach(t),lUr=i(gi),Kt=n(gi,"DIV",{class:!0});var DA=s(Kt);T(B$.$$.fragment,DA),iUr=i(DA),b5e=n(DA,"P",{});var wVt=s(b5e);dUr=r(wVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wVt.forEach(t),cUr=i(DA),mf=n(DA,"P",{});var fae=s(mf);fUr=r(fae,`Note:
Loading a model from its configuration file does `),v5e=n(fae,"STRONG",{});var AVt=s(v5e);mUr=r(AVt,"not"),AVt.forEach(t),gUr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(fae,"A",{href:!0});var LVt=s(woe);hUr=r(LVt,"from_pretrained()"),LVt.forEach(t),pUr=r(fae," to load the model weights."),fae.forEach(t),_Ur=i(DA),T($5.$$.fragment,DA),DA.forEach(t),uUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(I$.$$.fragment,hi),bUr=i(hi),F5e=n(hi,"P",{});var yVt=s(F5e);vUr=r(yVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yVt.forEach(t),FUr=i(hi),An=n(hi,"P",{});var GA=s(An);TUr=r(GA,"The model class to instantiate is selected based on the "),T5e=n(GA,"CODE",{});var xVt=s(T5e);MUr=r(xVt,"model_type"),xVt.forEach(t),EUr=r(GA,` property of the config object (either
passed as an argument or loaded from `),M5e=n(GA,"CODE",{});var $Vt=s(M5e);CUr=r($Vt,"pretrained_model_name_or_path"),$Vt.forEach(t),wUr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(GA,"CODE",{});var kVt=s(E5e);AUr=r(kVt,"pretrained_model_name_or_path"),kVt.forEach(t),LUr=r(GA,":"),GA.forEach(t),yUr=i(hi),Se=n(hi,"UL",{});var De=s(Se);k5=n(De,"LI",{});var fVe=s(k5);C5e=n(fVe,"STRONG",{});var SVt=s(C5e);xUr=r(SVt,"albert"),SVt.forEach(t),$Ur=r(fVe," \u2014 "),Aoe=n(fVe,"A",{href:!0});var RVt=s(Aoe);kUr=r(RVt,"FlaxAlbertForSequenceClassification"),RVt.forEach(t),SUr=r(fVe," (ALBERT model)"),fVe.forEach(t),RUr=i(De),S5=n(De,"LI",{});var mVe=s(S5);w5e=n(mVe,"STRONG",{});var PVt=s(w5e);PUr=r(PVt,"bart"),PVt.forEach(t),BUr=r(mVe," \u2014 "),Loe=n(mVe,"A",{href:!0});var BVt=s(Loe);IUr=r(BVt,"FlaxBartForSequenceClassification"),BVt.forEach(t),NUr=r(mVe," (BART model)"),mVe.forEach(t),qUr=i(De),R5=n(De,"LI",{});var gVe=s(R5);A5e=n(gVe,"STRONG",{});var IVt=s(A5e);jUr=r(IVt,"bert"),IVt.forEach(t),DUr=r(gVe," \u2014 "),yoe=n(gVe,"A",{href:!0});var NVt=s(yoe);GUr=r(NVt,"FlaxBertForSequenceClassification"),NVt.forEach(t),OUr=r(gVe," (BERT model)"),gVe.forEach(t),VUr=i(De),P5=n(De,"LI",{});var hVe=s(P5);L5e=n(hVe,"STRONG",{});var qVt=s(L5e);XUr=r(qVt,"big_bird"),qVt.forEach(t),zUr=r(hVe," \u2014 "),xoe=n(hVe,"A",{href:!0});var jVt=s(xoe);QUr=r(jVt,"FlaxBigBirdForSequenceClassification"),jVt.forEach(t),WUr=r(hVe," (BigBird model)"),hVe.forEach(t),HUr=i(De),B5=n(De,"LI",{});var pVe=s(B5);y5e=n(pVe,"STRONG",{});var DVt=s(y5e);UUr=r(DVt,"distilbert"),DVt.forEach(t),JUr=r(pVe," \u2014 "),$oe=n(pVe,"A",{href:!0});var GVt=s($oe);YUr=r(GVt,"FlaxDistilBertForSequenceClassification"),GVt.forEach(t),KUr=r(pVe," (DistilBERT model)"),pVe.forEach(t),ZUr=i(De),I5=n(De,"LI",{});var _Ve=s(I5);x5e=n(_Ve,"STRONG",{});var OVt=s(x5e);eJr=r(OVt,"electra"),OVt.forEach(t),oJr=r(_Ve," \u2014 "),koe=n(_Ve,"A",{href:!0});var VVt=s(koe);rJr=r(VVt,"FlaxElectraForSequenceClassification"),VVt.forEach(t),tJr=r(_Ve," (ELECTRA model)"),_Ve.forEach(t),aJr=i(De),N5=n(De,"LI",{});var uVe=s(N5);$5e=n(uVe,"STRONG",{});var XVt=s($5e);nJr=r(XVt,"mbart"),XVt.forEach(t),sJr=r(uVe," \u2014 "),Soe=n(uVe,"A",{href:!0});var zVt=s(Soe);lJr=r(zVt,"FlaxMBartForSequenceClassification"),zVt.forEach(t),iJr=r(uVe," (mBART model)"),uVe.forEach(t),dJr=i(De),q5=n(De,"LI",{});var bVe=s(q5);k5e=n(bVe,"STRONG",{});var QVt=s(k5e);cJr=r(QVt,"roberta"),QVt.forEach(t),fJr=r(bVe," \u2014 "),Roe=n(bVe,"A",{href:!0});var WVt=s(Roe);mJr=r(WVt,"FlaxRobertaForSequenceClassification"),WVt.forEach(t),gJr=r(bVe," (RoBERTa model)"),bVe.forEach(t),hJr=i(De),j5=n(De,"LI",{});var vVe=s(j5);S5e=n(vVe,"STRONG",{});var HVt=s(S5e);pJr=r(HVt,"roformer"),HVt.forEach(t),_Jr=r(vVe," \u2014 "),Poe=n(vVe,"A",{href:!0});var UVt=s(Poe);uJr=r(UVt,"FlaxRoFormerForSequenceClassification"),UVt.forEach(t),bJr=r(vVe," (RoFormer model)"),vVe.forEach(t),vJr=i(De),D5=n(De,"LI",{});var FVe=s(D5);R5e=n(FVe,"STRONG",{});var JVt=s(R5e);FJr=r(JVt,"xlm-roberta"),JVt.forEach(t),TJr=r(FVe," \u2014 "),Boe=n(FVe,"A",{href:!0});var YVt=s(Boe);MJr=r(YVt,"FlaxXLMRobertaForSequenceClassification"),YVt.forEach(t),EJr=r(FVe," (XLM-RoBERTa model)"),FVe.forEach(t),De.forEach(t),CJr=i(hi),T(G5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Xze=i(f),gf=n(f,"H2",{class:!0});var ZWe=s(gf);O5=n(ZWe,"A",{id:!0,class:!0,href:!0});var KVt=s(O5);P5e=n(KVt,"SPAN",{});var ZVt=s(P5e);T(N$.$$.fragment,ZVt),ZVt.forEach(t),KVt.forEach(t),wJr=i(ZWe),B5e=n(ZWe,"SPAN",{});var eXt=s(B5e);AJr=r(eXt,"FlaxAutoModelForQuestionAnswering"),eXt.forEach(t),ZWe.forEach(t),zze=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(q$.$$.fragment,pi),LJr=i(pi),hf=n(pi,"P",{});var mae=s(hf);yJr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ioe=n(mae,"A",{href:!0});var oXt=s(Ioe);xJr=r(oXt,"from_pretrained()"),oXt.forEach(t),$Jr=r(mae," class method or the "),Noe=n(mae,"A",{href:!0});var rXt=s(Noe);kJr=r(rXt,"from_config()"),rXt.forEach(t),SJr=r(mae,` class
method.`),mae.forEach(t),RJr=i(pi),j$=n(pi,"P",{});var eHe=s(j$);PJr=r(eHe,"This class cannot be instantiated directly using "),I5e=n(eHe,"CODE",{});var tXt=s(I5e);BJr=r(tXt,"__init__()"),tXt.forEach(t),IJr=r(eHe," (throws an error)."),eHe.forEach(t),NJr=i(pi),Zt=n(pi,"DIV",{class:!0});var OA=s(Zt);T(D$.$$.fragment,OA),qJr=i(OA),N5e=n(OA,"P",{});var aXt=s(N5e);jJr=r(aXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aXt.forEach(t),DJr=i(OA),pf=n(OA,"P",{});var gae=s(pf);GJr=r(gae,`Note:
Loading a model from its configuration file does `),q5e=n(gae,"STRONG",{});var nXt=s(q5e);OJr=r(nXt,"not"),nXt.forEach(t),VJr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=n(gae,"A",{href:!0});var sXt=s(qoe);XJr=r(sXt,"from_pretrained()"),sXt.forEach(t),zJr=r(gae," to load the model weights."),gae.forEach(t),QJr=i(OA),T(V5.$$.fragment,OA),OA.forEach(t),WJr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(G$.$$.fragment,_i),HJr=i(_i),j5e=n(_i,"P",{});var lXt=s(j5e);UJr=r(lXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lXt.forEach(t),JJr=i(_i),Ln=n(_i,"P",{});var VA=s(Ln);YJr=r(VA,"The model class to instantiate is selected based on the "),D5e=n(VA,"CODE",{});var iXt=s(D5e);KJr=r(iXt,"model_type"),iXt.forEach(t),ZJr=r(VA,` property of the config object (either
passed as an argument or loaded from `),G5e=n(VA,"CODE",{});var dXt=s(G5e);eYr=r(dXt,"pretrained_model_name_or_path"),dXt.forEach(t),oYr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=n(VA,"CODE",{});var cXt=s(O5e);rYr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),tYr=r(VA,":"),VA.forEach(t),aYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);X5=n(Ge,"LI",{});var TVe=s(X5);V5e=n(TVe,"STRONG",{});var fXt=s(V5e);nYr=r(fXt,"albert"),fXt.forEach(t),sYr=r(TVe," \u2014 "),joe=n(TVe,"A",{href:!0});var mXt=s(joe);lYr=r(mXt,"FlaxAlbertForQuestionAnswering"),mXt.forEach(t),iYr=r(TVe," (ALBERT model)"),TVe.forEach(t),dYr=i(Ge),z5=n(Ge,"LI",{});var MVe=s(z5);X5e=n(MVe,"STRONG",{});var gXt=s(X5e);cYr=r(gXt,"bart"),gXt.forEach(t),fYr=r(MVe," \u2014 "),Doe=n(MVe,"A",{href:!0});var hXt=s(Doe);mYr=r(hXt,"FlaxBartForQuestionAnswering"),hXt.forEach(t),gYr=r(MVe," (BART model)"),MVe.forEach(t),hYr=i(Ge),Q5=n(Ge,"LI",{});var EVe=s(Q5);z5e=n(EVe,"STRONG",{});var pXt=s(z5e);pYr=r(pXt,"bert"),pXt.forEach(t),_Yr=r(EVe," \u2014 "),Goe=n(EVe,"A",{href:!0});var _Xt=s(Goe);uYr=r(_Xt,"FlaxBertForQuestionAnswering"),_Xt.forEach(t),bYr=r(EVe," (BERT model)"),EVe.forEach(t),vYr=i(Ge),W5=n(Ge,"LI",{});var CVe=s(W5);Q5e=n(CVe,"STRONG",{});var uXt=s(Q5e);FYr=r(uXt,"big_bird"),uXt.forEach(t),TYr=r(CVe," \u2014 "),Ooe=n(CVe,"A",{href:!0});var bXt=s(Ooe);MYr=r(bXt,"FlaxBigBirdForQuestionAnswering"),bXt.forEach(t),EYr=r(CVe," (BigBird model)"),CVe.forEach(t),CYr=i(Ge),H5=n(Ge,"LI",{});var wVe=s(H5);W5e=n(wVe,"STRONG",{});var vXt=s(W5e);wYr=r(vXt,"distilbert"),vXt.forEach(t),AYr=r(wVe," \u2014 "),Voe=n(wVe,"A",{href:!0});var FXt=s(Voe);LYr=r(FXt,"FlaxDistilBertForQuestionAnswering"),FXt.forEach(t),yYr=r(wVe," (DistilBERT model)"),wVe.forEach(t),xYr=i(Ge),U5=n(Ge,"LI",{});var AVe=s(U5);H5e=n(AVe,"STRONG",{});var TXt=s(H5e);$Yr=r(TXt,"electra"),TXt.forEach(t),kYr=r(AVe," \u2014 "),Xoe=n(AVe,"A",{href:!0});var MXt=s(Xoe);SYr=r(MXt,"FlaxElectraForQuestionAnswering"),MXt.forEach(t),RYr=r(AVe," (ELECTRA model)"),AVe.forEach(t),PYr=i(Ge),J5=n(Ge,"LI",{});var LVe=s(J5);U5e=n(LVe,"STRONG",{});var EXt=s(U5e);BYr=r(EXt,"mbart"),EXt.forEach(t),IYr=r(LVe," \u2014 "),zoe=n(LVe,"A",{href:!0});var CXt=s(zoe);NYr=r(CXt,"FlaxMBartForQuestionAnswering"),CXt.forEach(t),qYr=r(LVe," (mBART model)"),LVe.forEach(t),jYr=i(Ge),Y5=n(Ge,"LI",{});var yVe=s(Y5);J5e=n(yVe,"STRONG",{});var wXt=s(J5e);DYr=r(wXt,"roberta"),wXt.forEach(t),GYr=r(yVe," \u2014 "),Qoe=n(yVe,"A",{href:!0});var AXt=s(Qoe);OYr=r(AXt,"FlaxRobertaForQuestionAnswering"),AXt.forEach(t),VYr=r(yVe," (RoBERTa model)"),yVe.forEach(t),XYr=i(Ge),K5=n(Ge,"LI",{});var xVe=s(K5);Y5e=n(xVe,"STRONG",{});var LXt=s(Y5e);zYr=r(LXt,"roformer"),LXt.forEach(t),QYr=r(xVe," \u2014 "),Woe=n(xVe,"A",{href:!0});var yXt=s(Woe);WYr=r(yXt,"FlaxRoFormerForQuestionAnswering"),yXt.forEach(t),HYr=r(xVe," (RoFormer model)"),xVe.forEach(t),UYr=i(Ge),Z5=n(Ge,"LI",{});var $Ve=s(Z5);K5e=n($Ve,"STRONG",{});var xXt=s(K5e);JYr=r(xXt,"xlm-roberta"),xXt.forEach(t),YYr=r($Ve," \u2014 "),Hoe=n($Ve,"A",{href:!0});var $Xt=s(Hoe);KYr=r($Xt,"FlaxXLMRobertaForQuestionAnswering"),$Xt.forEach(t),ZYr=r($Ve," (XLM-RoBERTa model)"),$Ve.forEach(t),Ge.forEach(t),eKr=i(_i),T(e0.$$.fragment,_i),_i.forEach(t),pi.forEach(t),Qze=i(f),_f=n(f,"H2",{class:!0});var oHe=s(_f);o0=n(oHe,"A",{id:!0,class:!0,href:!0});var kXt=s(o0);Z5e=n(kXt,"SPAN",{});var SXt=s(Z5e);T(O$.$$.fragment,SXt),SXt.forEach(t),kXt.forEach(t),oKr=i(oHe),e0e=n(oHe,"SPAN",{});var RXt=s(e0e);rKr=r(RXt,"FlaxAutoModelForTokenClassification"),RXt.forEach(t),oHe.forEach(t),Wze=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(V$.$$.fragment,ui),tKr=i(ui),uf=n(ui,"P",{});var hae=s(uf);aKr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uoe=n(hae,"A",{href:!0});var PXt=s(Uoe);nKr=r(PXt,"from_pretrained()"),PXt.forEach(t),sKr=r(hae," class method or the "),Joe=n(hae,"A",{href:!0});var BXt=s(Joe);lKr=r(BXt,"from_config()"),BXt.forEach(t),iKr=r(hae,` class
method.`),hae.forEach(t),dKr=i(ui),X$=n(ui,"P",{});var rHe=s(X$);cKr=r(rHe,"This class cannot be instantiated directly using "),o0e=n(rHe,"CODE",{});var IXt=s(o0e);fKr=r(IXt,"__init__()"),IXt.forEach(t),mKr=r(rHe," (throws an error)."),rHe.forEach(t),gKr=i(ui),ea=n(ui,"DIV",{class:!0});var XA=s(ea);T(z$.$$.fragment,XA),hKr=i(XA),r0e=n(XA,"P",{});var NXt=s(r0e);pKr=r(NXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NXt.forEach(t),_Kr=i(XA),bf=n(XA,"P",{});var pae=s(bf);uKr=r(pae,`Note:
Loading a model from its configuration file does `),t0e=n(pae,"STRONG",{});var qXt=s(t0e);bKr=r(qXt,"not"),qXt.forEach(t),vKr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=n(pae,"A",{href:!0});var jXt=s(Yoe);FKr=r(jXt,"from_pretrained()"),jXt.forEach(t),TKr=r(pae," to load the model weights."),pae.forEach(t),MKr=i(XA),T(r0.$$.fragment,XA),XA.forEach(t),EKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(Q$.$$.fragment,bi),CKr=i(bi),a0e=n(bi,"P",{});var DXt=s(a0e);wKr=r(DXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DXt.forEach(t),AKr=i(bi),yn=n(bi,"P",{});var zA=s(yn);LKr=r(zA,"The model class to instantiate is selected based on the "),n0e=n(zA,"CODE",{});var GXt=s(n0e);yKr=r(GXt,"model_type"),GXt.forEach(t),xKr=r(zA,` property of the config object (either
passed as an argument or loaded from `),s0e=n(zA,"CODE",{});var OXt=s(s0e);$Kr=r(OXt,"pretrained_model_name_or_path"),OXt.forEach(t),kKr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(zA,"CODE",{});var VXt=s(l0e);SKr=r(VXt,"pretrained_model_name_or_path"),VXt.forEach(t),RKr=r(zA,":"),zA.forEach(t),PKr=i(bi),Ve=n(bi,"UL",{});var Mo=s(Ve);t0=n(Mo,"LI",{});var kVe=s(t0);i0e=n(kVe,"STRONG",{});var XXt=s(i0e);BKr=r(XXt,"albert"),XXt.forEach(t),IKr=r(kVe," \u2014 "),Koe=n(kVe,"A",{href:!0});var zXt=s(Koe);NKr=r(zXt,"FlaxAlbertForTokenClassification"),zXt.forEach(t),qKr=r(kVe," (ALBERT model)"),kVe.forEach(t),jKr=i(Mo),a0=n(Mo,"LI",{});var SVe=s(a0);d0e=n(SVe,"STRONG",{});var QXt=s(d0e);DKr=r(QXt,"bert"),QXt.forEach(t),GKr=r(SVe," \u2014 "),Zoe=n(SVe,"A",{href:!0});var WXt=s(Zoe);OKr=r(WXt,"FlaxBertForTokenClassification"),WXt.forEach(t),VKr=r(SVe," (BERT model)"),SVe.forEach(t),XKr=i(Mo),n0=n(Mo,"LI",{});var RVe=s(n0);c0e=n(RVe,"STRONG",{});var HXt=s(c0e);zKr=r(HXt,"big_bird"),HXt.forEach(t),QKr=r(RVe," \u2014 "),ere=n(RVe,"A",{href:!0});var UXt=s(ere);WKr=r(UXt,"FlaxBigBirdForTokenClassification"),UXt.forEach(t),HKr=r(RVe," (BigBird model)"),RVe.forEach(t),UKr=i(Mo),s0=n(Mo,"LI",{});var PVe=s(s0);f0e=n(PVe,"STRONG",{});var JXt=s(f0e);JKr=r(JXt,"distilbert"),JXt.forEach(t),YKr=r(PVe," \u2014 "),ore=n(PVe,"A",{href:!0});var YXt=s(ore);KKr=r(YXt,"FlaxDistilBertForTokenClassification"),YXt.forEach(t),ZKr=r(PVe," (DistilBERT model)"),PVe.forEach(t),eZr=i(Mo),l0=n(Mo,"LI",{});var BVe=s(l0);m0e=n(BVe,"STRONG",{});var KXt=s(m0e);oZr=r(KXt,"electra"),KXt.forEach(t),rZr=r(BVe," \u2014 "),rre=n(BVe,"A",{href:!0});var ZXt=s(rre);tZr=r(ZXt,"FlaxElectraForTokenClassification"),ZXt.forEach(t),aZr=r(BVe," (ELECTRA model)"),BVe.forEach(t),nZr=i(Mo),i0=n(Mo,"LI",{});var IVe=s(i0);g0e=n(IVe,"STRONG",{});var ezt=s(g0e);sZr=r(ezt,"roberta"),ezt.forEach(t),lZr=r(IVe," \u2014 "),tre=n(IVe,"A",{href:!0});var ozt=s(tre);iZr=r(ozt,"FlaxRobertaForTokenClassification"),ozt.forEach(t),dZr=r(IVe," (RoBERTa model)"),IVe.forEach(t),cZr=i(Mo),d0=n(Mo,"LI",{});var NVe=s(d0);h0e=n(NVe,"STRONG",{});var rzt=s(h0e);fZr=r(rzt,"roformer"),rzt.forEach(t),mZr=r(NVe," \u2014 "),are=n(NVe,"A",{href:!0});var tzt=s(are);gZr=r(tzt,"FlaxRoFormerForTokenClassification"),tzt.forEach(t),hZr=r(NVe," (RoFormer model)"),NVe.forEach(t),pZr=i(Mo),c0=n(Mo,"LI",{});var qVe=s(c0);p0e=n(qVe,"STRONG",{});var azt=s(p0e);_Zr=r(azt,"xlm-roberta"),azt.forEach(t),uZr=r(qVe," \u2014 "),nre=n(qVe,"A",{href:!0});var nzt=s(nre);bZr=r(nzt,"FlaxXLMRobertaForTokenClassification"),nzt.forEach(t),vZr=r(qVe," (XLM-RoBERTa model)"),qVe.forEach(t),Mo.forEach(t),FZr=i(bi),T(f0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),Hze=i(f),vf=n(f,"H2",{class:!0});var tHe=s(vf);m0=n(tHe,"A",{id:!0,class:!0,href:!0});var szt=s(m0);_0e=n(szt,"SPAN",{});var lzt=s(_0e);T(W$.$$.fragment,lzt),lzt.forEach(t),szt.forEach(t),TZr=i(tHe),u0e=n(tHe,"SPAN",{});var izt=s(u0e);MZr=r(izt,"FlaxAutoModelForMultipleChoice"),izt.forEach(t),tHe.forEach(t),Uze=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(H$.$$.fragment,vi),EZr=i(vi),Ff=n(vi,"P",{});var _ae=s(Ff);CZr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sre=n(_ae,"A",{href:!0});var dzt=s(sre);wZr=r(dzt,"from_pretrained()"),dzt.forEach(t),AZr=r(_ae," class method or the "),lre=n(_ae,"A",{href:!0});var czt=s(lre);LZr=r(czt,"from_config()"),czt.forEach(t),yZr=r(_ae,` class
method.`),_ae.forEach(t),xZr=i(vi),U$=n(vi,"P",{});var aHe=s(U$);$Zr=r(aHe,"This class cannot be instantiated directly using "),b0e=n(aHe,"CODE",{});var fzt=s(b0e);kZr=r(fzt,"__init__()"),fzt.forEach(t),SZr=r(aHe," (throws an error)."),aHe.forEach(t),RZr=i(vi),oa=n(vi,"DIV",{class:!0});var QA=s(oa);T(J$.$$.fragment,QA),PZr=i(QA),v0e=n(QA,"P",{});var mzt=s(v0e);BZr=r(mzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mzt.forEach(t),IZr=i(QA),Tf=n(QA,"P",{});var uae=s(Tf);NZr=r(uae,`Note:
Loading a model from its configuration file does `),F0e=n(uae,"STRONG",{});var gzt=s(F0e);qZr=r(gzt,"not"),gzt.forEach(t),jZr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=n(uae,"A",{href:!0});var hzt=s(ire);DZr=r(hzt,"from_pretrained()"),hzt.forEach(t),GZr=r(uae," to load the model weights."),uae.forEach(t),OZr=i(QA),T(g0.$$.fragment,QA),QA.forEach(t),VZr=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(Y$.$$.fragment,Fi),XZr=i(Fi),T0e=n(Fi,"P",{});var pzt=s(T0e);zZr=r(pzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pzt.forEach(t),QZr=i(Fi),xn=n(Fi,"P",{});var WA=s(xn);WZr=r(WA,"The model class to instantiate is selected based on the "),M0e=n(WA,"CODE",{});var _zt=s(M0e);HZr=r(_zt,"model_type"),_zt.forEach(t),UZr=r(WA,` property of the config object (either
passed as an argument or loaded from `),E0e=n(WA,"CODE",{});var uzt=s(E0e);JZr=r(uzt,"pretrained_model_name_or_path"),uzt.forEach(t),YZr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=n(WA,"CODE",{});var bzt=s(C0e);KZr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),ZZr=r(WA,":"),WA.forEach(t),eet=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);h0=n(Eo,"LI",{});var jVe=s(h0);w0e=n(jVe,"STRONG",{});var vzt=s(w0e);oet=r(vzt,"albert"),vzt.forEach(t),ret=r(jVe," \u2014 "),dre=n(jVe,"A",{href:!0});var Fzt=s(dre);tet=r(Fzt,"FlaxAlbertForMultipleChoice"),Fzt.forEach(t),aet=r(jVe," (ALBERT model)"),jVe.forEach(t),net=i(Eo),p0=n(Eo,"LI",{});var DVe=s(p0);A0e=n(DVe,"STRONG",{});var Tzt=s(A0e);set=r(Tzt,"bert"),Tzt.forEach(t),iet=r(DVe," \u2014 "),cre=n(DVe,"A",{href:!0});var Mzt=s(cre);det=r(Mzt,"FlaxBertForMultipleChoice"),Mzt.forEach(t),cet=r(DVe," (BERT model)"),DVe.forEach(t),fet=i(Eo),_0=n(Eo,"LI",{});var GVe=s(_0);L0e=n(GVe,"STRONG",{});var Ezt=s(L0e);met=r(Ezt,"big_bird"),Ezt.forEach(t),get=r(GVe," \u2014 "),fre=n(GVe,"A",{href:!0});var Czt=s(fre);het=r(Czt,"FlaxBigBirdForMultipleChoice"),Czt.forEach(t),pet=r(GVe," (BigBird model)"),GVe.forEach(t),_et=i(Eo),u0=n(Eo,"LI",{});var OVe=s(u0);y0e=n(OVe,"STRONG",{});var wzt=s(y0e);uet=r(wzt,"distilbert"),wzt.forEach(t),bet=r(OVe," \u2014 "),mre=n(OVe,"A",{href:!0});var Azt=s(mre);vet=r(Azt,"FlaxDistilBertForMultipleChoice"),Azt.forEach(t),Fet=r(OVe," (DistilBERT model)"),OVe.forEach(t),Tet=i(Eo),b0=n(Eo,"LI",{});var VVe=s(b0);x0e=n(VVe,"STRONG",{});var Lzt=s(x0e);Met=r(Lzt,"electra"),Lzt.forEach(t),Eet=r(VVe," \u2014 "),gre=n(VVe,"A",{href:!0});var yzt=s(gre);Cet=r(yzt,"FlaxElectraForMultipleChoice"),yzt.forEach(t),wet=r(VVe," (ELECTRA model)"),VVe.forEach(t),Aet=i(Eo),v0=n(Eo,"LI",{});var XVe=s(v0);$0e=n(XVe,"STRONG",{});var xzt=s($0e);Let=r(xzt,"roberta"),xzt.forEach(t),yet=r(XVe," \u2014 "),hre=n(XVe,"A",{href:!0});var $zt=s(hre);xet=r($zt,"FlaxRobertaForMultipleChoice"),$zt.forEach(t),$et=r(XVe," (RoBERTa model)"),XVe.forEach(t),ket=i(Eo),F0=n(Eo,"LI",{});var zVe=s(F0);k0e=n(zVe,"STRONG",{});var kzt=s(k0e);Set=r(kzt,"roformer"),kzt.forEach(t),Ret=r(zVe," \u2014 "),pre=n(zVe,"A",{href:!0});var Szt=s(pre);Pet=r(Szt,"FlaxRoFormerForMultipleChoice"),Szt.forEach(t),Bet=r(zVe," (RoFormer model)"),zVe.forEach(t),Iet=i(Eo),T0=n(Eo,"LI",{});var QVe=s(T0);S0e=n(QVe,"STRONG",{});var Rzt=s(S0e);Net=r(Rzt,"xlm-roberta"),Rzt.forEach(t),qet=r(QVe," \u2014 "),_re=n(QVe,"A",{href:!0});var Pzt=s(_re);jet=r(Pzt,"FlaxXLMRobertaForMultipleChoice"),Pzt.forEach(t),Det=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),Eo.forEach(t),Get=i(Fi),T(M0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),Jze=i(f),Mf=n(f,"H2",{class:!0});var nHe=s(Mf);E0=n(nHe,"A",{id:!0,class:!0,href:!0});var Bzt=s(E0);R0e=n(Bzt,"SPAN",{});var Izt=s(R0e);T(K$.$$.fragment,Izt),Izt.forEach(t),Bzt.forEach(t),Oet=i(nHe),P0e=n(nHe,"SPAN",{});var Nzt=s(P0e);Vet=r(Nzt,"FlaxAutoModelForNextSentencePrediction"),Nzt.forEach(t),nHe.forEach(t),Yze=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(Z$.$$.fragment,Ti),Xet=i(Ti),Ef=n(Ti,"P",{});var bae=s(Ef);zet=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ure=n(bae,"A",{href:!0});var qzt=s(ure);Qet=r(qzt,"from_pretrained()"),qzt.forEach(t),Wet=r(bae," class method or the "),bre=n(bae,"A",{href:!0});var jzt=s(bre);Het=r(jzt,"from_config()"),jzt.forEach(t),Uet=r(bae,` class
method.`),bae.forEach(t),Jet=i(Ti),ek=n(Ti,"P",{});var sHe=s(ek);Yet=r(sHe,"This class cannot be instantiated directly using "),B0e=n(sHe,"CODE",{});var Dzt=s(B0e);Ket=r(Dzt,"__init__()"),Dzt.forEach(t),Zet=r(sHe," (throws an error)."),sHe.forEach(t),eot=i(Ti),ra=n(Ti,"DIV",{class:!0});var HA=s(ra);T(ok.$$.fragment,HA),oot=i(HA),I0e=n(HA,"P",{});var Gzt=s(I0e);rot=r(Gzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gzt.forEach(t),tot=i(HA),Cf=n(HA,"P",{});var vae=s(Cf);aot=r(vae,`Note:
Loading a model from its configuration file does `),N0e=n(vae,"STRONG",{});var Ozt=s(N0e);not=r(Ozt,"not"),Ozt.forEach(t),sot=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(vae,"A",{href:!0});var Vzt=s(vre);lot=r(Vzt,"from_pretrained()"),Vzt.forEach(t),iot=r(vae," to load the model weights."),vae.forEach(t),dot=i(HA),T(C0.$$.fragment,HA),HA.forEach(t),cot=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(rk.$$.fragment,Mi),fot=i(Mi),q0e=n(Mi,"P",{});var Xzt=s(q0e);mot=r(Xzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xzt.forEach(t),got=i(Mi),$n=n(Mi,"P",{});var UA=s($n);hot=r(UA,"The model class to instantiate is selected based on the "),j0e=n(UA,"CODE",{});var zzt=s(j0e);pot=r(zzt,"model_type"),zzt.forEach(t),_ot=r(UA,` property of the config object (either
passed as an argument or loaded from `),D0e=n(UA,"CODE",{});var Qzt=s(D0e);uot=r(Qzt,"pretrained_model_name_or_path"),Qzt.forEach(t),bot=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(UA,"CODE",{});var Wzt=s(G0e);vot=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),Fot=r(UA,":"),UA.forEach(t),Tot=i(Mi),O0e=n(Mi,"UL",{});var Hzt=s(O0e);w0=n(Hzt,"LI",{});var WVe=s(w0);V0e=n(WVe,"STRONG",{});var Uzt=s(V0e);Mot=r(Uzt,"bert"),Uzt.forEach(t),Eot=r(WVe," \u2014 "),Fre=n(WVe,"A",{href:!0});var Jzt=s(Fre);Cot=r(Jzt,"FlaxBertForNextSentencePrediction"),Jzt.forEach(t),wot=r(WVe," (BERT model)"),WVe.forEach(t),Hzt.forEach(t),Aot=i(Mi),T(A0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),Kze=i(f),wf=n(f,"H2",{class:!0});var lHe=s(wf);L0=n(lHe,"A",{id:!0,class:!0,href:!0});var Yzt=s(L0);X0e=n(Yzt,"SPAN",{});var Kzt=s(X0e);T(tk.$$.fragment,Kzt),Kzt.forEach(t),Yzt.forEach(t),Lot=i(lHe),z0e=n(lHe,"SPAN",{});var Zzt=s(z0e);yot=r(Zzt,"FlaxAutoModelForImageClassification"),Zzt.forEach(t),lHe.forEach(t),Zze=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(ak.$$.fragment,Ei),xot=i(Ei),Af=n(Ei,"P",{});var Fae=s(Af);$ot=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tre=n(Fae,"A",{href:!0});var eQt=s(Tre);kot=r(eQt,"from_pretrained()"),eQt.forEach(t),Sot=r(Fae," class method or the "),Mre=n(Fae,"A",{href:!0});var oQt=s(Mre);Rot=r(oQt,"from_config()"),oQt.forEach(t),Pot=r(Fae,` class
method.`),Fae.forEach(t),Bot=i(Ei),nk=n(Ei,"P",{});var iHe=s(nk);Iot=r(iHe,"This class cannot be instantiated directly using "),Q0e=n(iHe,"CODE",{});var rQt=s(Q0e);Not=r(rQt,"__init__()"),rQt.forEach(t),qot=r(iHe," (throws an error)."),iHe.forEach(t),jot=i(Ei),ta=n(Ei,"DIV",{class:!0});var JA=s(ta);T(sk.$$.fragment,JA),Dot=i(JA),W0e=n(JA,"P",{});var tQt=s(W0e);Got=r(tQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tQt.forEach(t),Oot=i(JA),Lf=n(JA,"P",{});var Tae=s(Lf);Vot=r(Tae,`Note:
Loading a model from its configuration file does `),H0e=n(Tae,"STRONG",{});var aQt=s(H0e);Xot=r(aQt,"not"),aQt.forEach(t),zot=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Tae,"A",{href:!0});var nQt=s(Ere);Qot=r(nQt,"from_pretrained()"),nQt.forEach(t),Wot=r(Tae," to load the model weights."),Tae.forEach(t),Hot=i(JA),T(y0.$$.fragment,JA),JA.forEach(t),Uot=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(lk.$$.fragment,Ci),Jot=i(Ci),U0e=n(Ci,"P",{});var sQt=s(U0e);Yot=r(sQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sQt.forEach(t),Kot=i(Ci),kn=n(Ci,"P",{});var YA=s(kn);Zot=r(YA,"The model class to instantiate is selected based on the "),J0e=n(YA,"CODE",{});var lQt=s(J0e);ert=r(lQt,"model_type"),lQt.forEach(t),ort=r(YA,` property of the config object (either
passed as an argument or loaded from `),Y0e=n(YA,"CODE",{});var iQt=s(Y0e);rrt=r(iQt,"pretrained_model_name_or_path"),iQt.forEach(t),trt=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K0e=n(YA,"CODE",{});var dQt=s(K0e);art=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),nrt=r(YA,":"),YA.forEach(t),srt=i(Ci),ik=n(Ci,"UL",{});var dHe=s(ik);x0=n(dHe,"LI",{});var HVe=s(x0);Z0e=n(HVe,"STRONG",{});var cQt=s(Z0e);lrt=r(cQt,"beit"),cQt.forEach(t),irt=r(HVe," \u2014 "),Cre=n(HVe,"A",{href:!0});var fQt=s(Cre);drt=r(fQt,"FlaxBeitForImageClassification"),fQt.forEach(t),crt=r(HVe," (BEiT model)"),HVe.forEach(t),frt=i(dHe),$0=n(dHe,"LI",{});var UVe=s($0);ewe=n(UVe,"STRONG",{});var mQt=s(ewe);mrt=r(mQt,"vit"),mQt.forEach(t),grt=r(UVe," \u2014 "),wre=n(UVe,"A",{href:!0});var gQt=s(wre);hrt=r(gQt,"FlaxViTForImageClassification"),gQt.forEach(t),prt=r(UVe," (ViT model)"),UVe.forEach(t),dHe.forEach(t),_rt=i(Ci),T(k0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),eQe=i(f),yf=n(f,"H2",{class:!0});var cHe=s(yf);S0=n(cHe,"A",{id:!0,class:!0,href:!0});var hQt=s(S0);owe=n(hQt,"SPAN",{});var pQt=s(owe);T(dk.$$.fragment,pQt),pQt.forEach(t),hQt.forEach(t),urt=i(cHe),rwe=n(cHe,"SPAN",{});var _Qt=s(rwe);brt=r(_Qt,"FlaxAutoModelForVision2Seq"),_Qt.forEach(t),cHe.forEach(t),oQe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(ck.$$.fragment,wi),vrt=i(wi),xf=n(wi,"P",{});var Mae=s(xf);Frt=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Are=n(Mae,"A",{href:!0});var uQt=s(Are);Trt=r(uQt,"from_pretrained()"),uQt.forEach(t),Mrt=r(Mae," class method or the "),Lre=n(Mae,"A",{href:!0});var bQt=s(Lre);Ert=r(bQt,"from_config()"),bQt.forEach(t),Crt=r(Mae,` class
method.`),Mae.forEach(t),wrt=i(wi),fk=n(wi,"P",{});var fHe=s(fk);Art=r(fHe,"This class cannot be instantiated directly using "),twe=n(fHe,"CODE",{});var vQt=s(twe);Lrt=r(vQt,"__init__()"),vQt.forEach(t),yrt=r(fHe," (throws an error)."),fHe.forEach(t),xrt=i(wi),aa=n(wi,"DIV",{class:!0});var KA=s(aa);T(mk.$$.fragment,KA),$rt=i(KA),awe=n(KA,"P",{});var FQt=s(awe);krt=r(FQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FQt.forEach(t),Srt=i(KA),$f=n(KA,"P",{});var Eae=s($f);Rrt=r(Eae,`Note:
Loading a model from its configuration file does `),nwe=n(Eae,"STRONG",{});var TQt=s(nwe);Prt=r(TQt,"not"),TQt.forEach(t),Brt=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(Eae,"A",{href:!0});var MQt=s(yre);Irt=r(MQt,"from_pretrained()"),MQt.forEach(t),Nrt=r(Eae," to load the model weights."),Eae.forEach(t),qrt=i(KA),T(R0.$$.fragment,KA),KA.forEach(t),jrt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(gk.$$.fragment,Ai),Drt=i(Ai),swe=n(Ai,"P",{});var EQt=s(swe);Grt=r(EQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EQt.forEach(t),Ort=i(Ai),Sn=n(Ai,"P",{});var ZA=s(Sn);Vrt=r(ZA,"The model class to instantiate is selected based on the "),lwe=n(ZA,"CODE",{});var CQt=s(lwe);Xrt=r(CQt,"model_type"),CQt.forEach(t),zrt=r(ZA,` property of the config object (either
passed as an argument or loaded from `),iwe=n(ZA,"CODE",{});var wQt=s(iwe);Qrt=r(wQt,"pretrained_model_name_or_path"),wQt.forEach(t),Wrt=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=n(ZA,"CODE",{});var AQt=s(dwe);Hrt=r(AQt,"pretrained_model_name_or_path"),AQt.forEach(t),Urt=r(ZA,":"),ZA.forEach(t),Jrt=i(Ai),cwe=n(Ai,"UL",{});var LQt=s(cwe);P0=n(LQt,"LI",{});var JVe=s(P0);fwe=n(JVe,"STRONG",{});var yQt=s(fwe);Yrt=r(yQt,"vision-encoder-decoder"),yQt.forEach(t),Krt=r(JVe," \u2014 "),xre=n(JVe,"A",{href:!0});var xQt=s(xre);Zrt=r(xQt,"FlaxVisionEncoderDecoderModel"),xQt.forEach(t),ett=r(JVe," (Vision Encoder decoder model)"),JVe.forEach(t),LQt.forEach(t),ott=i(Ai),T(B0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(BHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(GS,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(OS,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertConfig"),c(VS,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartConfig"),c(XS,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitConfig"),c(zS,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertConfig"),c(QS,"href","/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(WS,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdConfig"),c(HS,"href","/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(US,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(JS,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(YS,"href","/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomConfig"),c(KS,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertConfig"),c(ZS,"href","/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineConfig"),c(eR,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPConfig"),c(oR,"href","/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenConfig"),c(rR,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertConfig"),c(tR,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextConfig"),c(aR,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLConfig"),c(nR,"href","/docs/transformers/pr_18169/en/model_doc/cvt#transformers.CvtConfig"),c(sR,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(lR,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(iR,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(dR,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaConfig"),c(cR,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(fR,"href","/docs/transformers/pr_18169/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(mR,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTConfig"),c(gR,"href","/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrConfig"),c(hR,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pR,"href","/docs/transformers/pr_18169/en/model_doc/dpr#transformers.DPRConfig"),c(_R,"href","/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTConfig"),c(uR,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraConfig"),c(bR,"href","/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(vR,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertConfig"),c(FR,"href","/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaConfig"),c(TR,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetConfig"),c(MR,"href","/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTConfig"),c(ER,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelConfig"),c(CR,"href","/docs/transformers/pr_18169/en/model_doc/glpn#transformers.GLPNConfig"),c(wR,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Config"),c(AR,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(LR,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yR,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJConfig"),c(xR,"href","/docs/transformers/pr_18169/en/model_doc/groupvit#transformers.GroupViTConfig"),c($R,"href","/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertConfig"),c(kR,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertConfig"),c(SR,"href","/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(RR,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(PR,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(BR,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(IR,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDConfig"),c(NR,"href","/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitConfig"),c(qR,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerConfig"),c(jR,"href","/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Config"),c(DR,"href","/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeConfig"),c(GR,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertConfig"),c(OR,"href","/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100Config"),c(VR,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianConfig"),c(XR,"href","/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(zR,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartConfig"),c(QR,"href","/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTConfig"),c(WR,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(HR,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(UR,"href","/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(JR,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetConfig"),c(YR,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Config"),c(KR,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpConfig"),c(ZR,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaConfig"),c(eP,"href","/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(oP,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(rP,"href","/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTConfig"),c(tP,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusConfig"),c(aP,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverConfig"),c(nP,"href","/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartConfig"),c(sP,"href","/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(lP,"href","/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(iP,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(dP,"href","/docs/transformers/pr_18169/en/model_doc/rag#transformers.RagConfig"),c(cP,"href","/docs/transformers/pr_18169/en/model_doc/realm#transformers.RealmConfig"),c(fP,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerConfig"),c(mP,"href","/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetConfig"),c(gP,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertConfig"),c(hP,"href","/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetConfig"),c(pP,"href","/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertConfig"),c(_P,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaConfig"),c(uP,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerConfig"),c(bP,"href","/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerConfig"),c(vP,"href","/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWConfig"),c(FP,"href","/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDConfig"),c(TP,"href","/docs/transformers/pr_18169/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(MP,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(EP,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(CP,"href","/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterConfig"),c(wP,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(AP,"href","/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinConfig"),c(LP,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Config"),c(yP,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasConfig"),c(xP,"href","/docs/transformers/pr_18169/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c($P,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(kP,"href","/docs/transformers/pr_18169/en/model_doc/trocr#transformers.TrOCRConfig"),c(SP,"href","/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(RP,"href","/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(PP,"href","/docs/transformers/pr_18169/en/model_doc/van#transformers.VanConfig"),c(BP,"href","/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltConfig"),c(IP,"href","/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NP,"href","/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(qP,"href","/docs/transformers/pr_18169/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(jP,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTConfig"),c(DP,"href","/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(GP,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(OP,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(VP,"href","/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMConfig"),c(XP,"href","/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMConfig"),c(zP,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMConfig"),c(QP,"href","/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(WP,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(HP,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(UP,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetConfig"),c(JP,"href","/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosConfig"),c(YP,"href","/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(KP,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(ZP,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertTokenizer"),c(eB,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oB,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartTokenizer"),c(rB,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartTokenizerFast"),c(tB,"href","/docs/transformers/pr_18169/en/model_doc/barthez#transformers.BarthezTokenizer"),c(aB,"href","/docs/transformers/pr_18169/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(nB,"href","/docs/transformers/pr_18169/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(sB,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(dB,"href","/docs/transformers/pr_18169/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(cB,"href","/docs/transformers/pr_18169/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(fB,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(mB,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(gB,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hB,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(pB,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_B,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(uB,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(bB,"href","/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(vB,"href","/docs/transformers/pr_18169/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FB,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TB,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MB,"href","/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineTokenizer"),c(EB,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPTokenizer"),c(CB,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wB,"href","/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(AB,"href","/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(LB,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(yB,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_18169/en/model_doc/cpm#transformers.CpmTokenizer"),c($B,"href","/docs/transformers/pr_18169/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(kB,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(SB,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaTokenizer"),c(BB,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(NB,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(qB,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(jB,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(DB,"href","/docs/transformers/pr_18169/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(GB,"href","/docs/transformers/pr_18169/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(OB,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraTokenizer"),c(VB,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(XB,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(zB,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetTokenizer"),c(QB,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(HB,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelTokenizer"),c(UB,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(JB,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YB,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KB,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(oI,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rI,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tI,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPTokenizer"),c(aI,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nI,"href","/docs/transformers/pr_18169/en/model_doc/herbert#transformers.HerbertTokenizer"),c(sI,"href","/docs/transformers/pr_18169/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(lI,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iI,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dI,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cI,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(fI,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(mI,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(gI,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(hI,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(pI,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(_I,"href","/docs/transformers/pr_18169/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(uI,"href","/docs/transformers/pr_18169/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bI,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDTokenizer"),c(vI,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDTokenizerFast"),c(FI,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerTokenizer"),c(TI,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(MI,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Tokenizer"),c(EI,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5TokenizerFast"),c(CI,"href","/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeTokenizer"),c(wI,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(AI,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(LI,"href","/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yI,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianTokenizer"),c(xI,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartTokenizer"),c($I,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(kI,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(SI,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(RI,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_18169/en/model_doc/mluke#transformers.MLukeTokenizer"),c(II,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(NI,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(qI,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(jI,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(DI,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Tokenizer"),c(GI,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5TokenizerFast"),c(OI,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpTokenizer"),c(VI,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(XI,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizer"),c(zI,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizerFast"),c(QI,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertTokenizer"),c(WI,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HI,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UI,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JI,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YI,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KI,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eN,"href","/docs/transformers/pr_18169/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oN,"href","/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rN,"href","/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tN,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizer"),c(aN,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizerFast"),c(nN,"href","/docs/transformers/pr_18169/en/model_doc/rag#transformers.RagTokenizer"),c(sN,"href","/docs/transformers/pr_18169/en/model_doc/realm#transformers.RealmTokenizer"),c(lN,"href","/docs/transformers/pr_18169/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iN,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dN,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cN,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fN,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mN,"href","/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gN,"href","/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hN,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pN,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_N,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uN,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bN,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vN,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FN,"href","/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TN,"href","/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MN,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EN,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CN,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Tokenizer"),c(wN,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5TokenizerFast"),c(AN,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasTokenizer"),c(LN,"href","/docs/transformers/pr_18169/en/model_doc/tapex#transformers.TapexTokenizer"),c(yN,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xN,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizer"),c($N,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizerFast"),c(kN,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PN,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BN,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(IN,"href","/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NN,"href","/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qN,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMTokenizer"),c(jN,"href","/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(DN,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(GN,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ON,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VN,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XN,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zN,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(QN,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertTokenizer"),c(WN,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(HN,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UN,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JN,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YN,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KN,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eq,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oq,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rq,"href","/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18169/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iq,"href","/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(dq,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(cq,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(fq,"href","/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(mq,"href","/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(uq,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yq,"href","/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"id","transformers.AutoProcessor"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c(xq,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c($q,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPProcessor"),c(kq,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPProcessor"),c(Sq,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Rq,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Pq,"href","/docs/transformers/pr_18169/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Bq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Iq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Nq,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(qq,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(jq,"href","/docs/transformers/pr_18169/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Dq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Gq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltProcessor"),c(Vq,"href","/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Xq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"id","transformers.AutoModel"),c(Gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gp,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(Wq,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hq,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uq,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jq,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertModel"),c(Yq,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartModel"),c(Kq,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitModel"),c(Zq,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertModel"),c(ej,"href","/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(oj,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdModel"),c(rj,"href","/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(tj,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(aj,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(nj,"href","/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomModel"),c(sj,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertModel"),c(lj,"href","/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineModel"),c(ij,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.CLIPModel"),c(dj,"href","/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenModel"),c(cj,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertModel"),c(fj,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextModel"),c(mj,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLModel"),c(gj,"href","/docs/transformers/pr_18169/en/model_doc/cvt#transformers.CvtModel"),c(hj,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(pj,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(_j,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(uj,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaModel"),c(bj,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(vj,"href","/docs/transformers/pr_18169/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Fj,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTModel"),c(Tj,"href","/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrModel"),c(Mj,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertModel"),c(Ej,"href","/docs/transformers/pr_18169/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Cj,"href","/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTModel"),c(wj,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraModel"),c(Aj,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertModel"),c(Lj,"href","/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaModel"),c(yj,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetModel"),c(xj,"href","/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTModel"),c($j,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelModel"),c(kj,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Sj,"href","/docs/transformers/pr_18169/en/model_doc/glpn#transformers.GLPNModel"),c(Rj,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2Model"),c(Pj,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Bj,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Ij,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJModel"),c(Nj,"href","/docs/transformers/pr_18169/en/model_doc/groupvit#transformers.GroupViTModel"),c(qj,"href","/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertModel"),c(jj,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertModel"),c(Dj,"href","/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Gj,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Oj,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Vj,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Xj,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDModel"),c(zj,"href","/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitModel"),c(Qj,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerModel"),c(Wj,"href","/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5Model"),c(Hj,"href","/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeModel"),c(Uj,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertModel"),c(Jj,"href","/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100Model"),c(Yj,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianModel"),c(Kj,"href","/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Zj,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartModel"),c(eD,"href","/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTModel"),c(oD,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(rD,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertModel"),c(tD,"href","/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTModel"),c(aD,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetModel"),c(nD,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5Model"),c(sD,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpModel"),c(lD,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaModel"),c(iD,"href","/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dD,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cD,"href","/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTModel"),c(fD,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusModel"),c(mD,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverModel"),c(gD,"href","/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartModel"),c(hD,"href","/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerModel"),c(pD,"href","/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_D,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertModel"),c(uD,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerModel"),c(bD,"href","/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetModel"),c(vD,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertModel"),c(FD,"href","/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetModel"),c(TD,"href","/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertModel"),c(MD,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaModel"),c(ED,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerModel"),c(CD,"href","/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerModel"),c(wD,"href","/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWModel"),c(AD,"href","/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDModel"),c(LD,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yD,"href","/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterModel"),c(xD,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c($D,"href","/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinModel"),c(kD,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5Model"),c(SD,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasModel"),c(RD,"href","/docs/transformers/pr_18169/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(PD,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(BD,"href","/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ID,"href","/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(ND,"href","/docs/transformers/pr_18169/en/model_doc/van#transformers.VanModel"),c(qD,"href","/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltModel"),c(jD,"href","/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(DD,"href","/docs/transformers/pr_18169/en/model_doc/visual_bert#transformers.VisualBertModel"),c(GD,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTModel"),c(OD,"href","/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(VD,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(XD,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(zD,"href","/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMModel"),c(QD,"href","/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMModel"),c(WD,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMModel"),c(HD,"href","/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(UD,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(JD,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(YD,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetModel"),c(KD,"href","/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosModel"),c(ZD,"href","/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wu,"id","transformers.AutoModelForPreTraining"),c(Wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wu,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(eG,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aG,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForPreTraining"),c(sG,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lG,"href","/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iG,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dG,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cG,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fG,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mG,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gG,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hG,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForPreTraining"),c(pG,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_G,"href","/docs/transformers/pr_18169/en/model_doc/flava#transformers.FlavaForPreTraining"),c(uG,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForPreTraining"),c(bG,"href","/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(FG,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(TG,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MG,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(EG,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CG,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(wG,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(AG,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(LG,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yG,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForPreTraining"),c($G,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kG,"href","/docs/transformers/pr_18169/en/model_doc/retribert#transformers.RetriBertModel"),c(SG,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(RG,"href","/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(PG,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(BG,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NG,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(qG,"href","/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(jG,"href","/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(DG,"href","/docs/transformers/pr_18169/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(GG,"href","/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(OG,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(VG,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(XG,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zG,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(QG,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(WG,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O1,"id","transformers.AutoModelForCausalLM"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(HG,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForCausalLM"),c(KG,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertLMHeadModel"),c(ZG,"href","/docs/transformers/pr_18169/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(eO,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(oO,"href","/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(rO,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(tO,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(aO,"href","/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nO,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(sO,"href","/docs/transformers/pr_18169/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(lO,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iO,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dO,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cO,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fO,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mO,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(gO,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(hO,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianForCausalLM"),c(pO,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForCausalLM"),c(_O,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(uO,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForCausalLM"),c(bO,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vO,"href","/docs/transformers/pr_18169/en/model_doc/opt#transformers.OPTForCausalLM"),c(FO,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(TO,"href","/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(MO,"href","/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(EO,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(CO,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(wO,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(AO,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(LO,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(yO,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(xO,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c($O,"href","/docs/transformers/pr_18169/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(kO,"href","/docs/transformers/pr_18169/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(SO,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(RO,"href","/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(PO,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(BO,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(IO,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S2,"id","transformers.AutoModelForMaskedLM"),c(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S2,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(NO,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jO,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DO,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(GO,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForMaskedLM"),c(VO,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(XO,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(zO,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(QO,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(WO,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(HO,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(UO,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(JO,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(YO,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(KO,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(eV,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(oV,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(rV,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(tV,"href","/docs/transformers/pr_18169/en/model_doc/luke#transformers.LukeForMaskedLM"),c(aV,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(sV,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(lV,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(iV,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(cV,"href","/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(fV,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(mV,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(hV,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_V,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(uV,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vV,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FV,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(TV,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(MV,"href","/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fb,"id","transformers.AutoModelForSeq2SeqLM"),c(Fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(EV,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CV,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wV,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AV,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c($V,"href","/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(kV,"href","/docs/transformers/pr_18169/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_18169/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_18169/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.MarianMTModel"),c(IV,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18169/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18169/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForSequenceClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(XV,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(HV,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForSequenceClassification"),c(UV,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(YV,"href","/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(KV,"href","/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oX,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18169/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c($X,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForMultipleChoice"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(VX,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForMultipleChoice"),c(HX,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(UX,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(YX,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ez,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(rz,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(az,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForNextSentencePrediction"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(Mz,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Az,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Lz,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForTokenClassification"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(kz,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Bz,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForTokenClassification"),c(Iz,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Nz,"href","/docs/transformers/pr_18169/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(qz,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jz,"href","/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Dz,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Gz,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Oz,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Vz,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Xz,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zz,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.AutoModelForQuestionAnswering"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_18169/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_18169/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(RQ,"href","/docs/transformers/pr_18169/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18169/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18169/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18169/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18169/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18169/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18169/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18169/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18169/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18169/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18169/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(tW,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(sW,"href","/docs/transformers/pr_18169/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForTableQuestionAnswering"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(lW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForImageClassification"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(fW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitForImageClassification"),c(pW,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(_W,"href","/docs/transformers/pr_18169/en/model_doc/cvt#transformers.CvtForImageClassification"),c(uW,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(bW,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTForImageClassification"),c(vW,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(FW,"href","/docs/transformers/pr_18169/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(TW,"href","/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitForImageClassification"),c(MW,"href","/docs/transformers/pr_18169/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(EW,"href","/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(CW,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(wW,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(AW,"href","/docs/transformers/pr_18169/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(LW,"href","/docs/transformers/pr_18169/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(yW,"href","/docs/transformers/pr_18169/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(xW,"href","/docs/transformers/pr_18169/en/model_doc/resnet#transformers.ResNetForImageClassification"),c($W,"href","/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(kW,"href","/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinForImageClassification"),c(SW,"href","/docs/transformers/pr_18169/en/model_doc/van#transformers.VanForImageClassification"),c(RW,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForVision2Seq"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(PW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(qW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_18169/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForAudioClassification"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(OW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(QW,"href","/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HW,"href","/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UW,"href","/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JW,"href","/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YW,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KW,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o8,"id","transformers.AutoModelForAudioFrameClassification"),c(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(eH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(aH,"href","/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(nH,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(lH,"href","/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c8,"id","transformers.AutoModelForCTC"),c(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c8,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(iH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(mH,"href","/docs/transformers/pr_18169/en/model_doc/hubert#transformers.HubertForCTC"),c(gH,"href","/docs/transformers/pr_18169/en/model_doc/mctct#transformers.MCTCTForCTC"),c(hH,"href","/docs/transformers/pr_18169/en/model_doc/sew#transformers.SEWForCTC"),c(pH,"href","/docs/transformers/pr_18169/en/model_doc/sew-d#transformers.SEWDForCTC"),c(_H,"href","/docs/transformers/pr_18169/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(uH,"href","/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(bH,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(vH,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(FH,"href","/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c(TH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_18169/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(wH,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($8,"id","transformers.AutoModelForAudioXVector"),c($8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($8,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(AH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c($H,"href","/docs/transformers/pr_18169/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(kH,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(SH,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(RH,"href","/docs/transformers/pr_18169/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j8,"id","transformers.AutoModelForMaskedImageModeling"),c(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j8,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(PH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qH,"href","/docs/transformers/pr_18169/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(jH,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q8,"id","transformers.AutoModelForObjectDetection"),c(Q8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q8,"href","#transformers.AutoModelForObjectDetection"),c(Hd,"class","relative group"),c(DH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrForObjectDetection"),c(XH,"href","/docs/transformers/pr_18169/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K8,"id","transformers.AutoModelForImageSegmentation"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(zH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_18169/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t9,"id","transformers.AutoModelForSemanticSegmentation"),c(t9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t9,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(UH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(ZH,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(eU,"href","/docs/transformers/pr_18169/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_18169/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(rU,"href","/docs/transformers/pr_18169/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.AutoModelForInstanceSegmentation"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(tU,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_18169/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u9,"id","transformers.TFAutoModel"),c(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u9,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(lU,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertModel"),c(fU,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.TFBartModel"),c(mU,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertModel"),c(gU,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(hU,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(pU,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertModel"),c(_U,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.TFCLIPModel"),c(uU,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertModel"),c(bU,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.TFConvNextModel"),c(vU,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FU,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(TU,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaModel"),c(MU,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EU,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.TFDeiTModel"),c(CU,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(wU,"href","/docs/transformers/pr_18169/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(AU,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraModel"),c(LU,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yU,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelModel"),c(xU,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c($U,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2Model"),c(kU,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJModel"),c(SU,"href","/docs/transformers/pr_18169/en/model_doc/hubert#transformers.TFHubertModel"),c(RU,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(PU,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.TFLEDModel"),c(BU,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerModel"),c(IU,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.TFLxmertModel"),c(NU,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.TFMarianModel"),c(qU,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.TFMBartModel"),c(jU,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(DU,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetModel"),c(GU,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.TFMT5Model"),c(OU,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(VU,"href","/docs/transformers/pr_18169/en/model_doc/opt#transformers.TFOPTModel"),c(XU,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.TFPegasusModel"),c(zU,"href","/docs/transformers/pr_18169/en/model_doc/regnet#transformers.TFRegNetModel"),c(QU,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertModel"),c(WU,"href","/docs/transformers/pr_18169/en/model_doc/resnet#transformers.TFResNetModel"),c(HU,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaModel"),c(UU,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerModel"),c(JU,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(YU,"href","/docs/transformers/pr_18169/en/model_doc/swin#transformers.TFSwinModel"),c(KU,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.TFT5Model"),c(ZU,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasModel"),c(eJ,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(oJ,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.TFViTModel"),c(rJ,"href","/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(tJ,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(aJ,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMModel"),c(nJ,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(sJ,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForPreTraining"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(lJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(fJ,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForPreTraining"),c(gJ,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pJ,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_J,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(uJ,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bJ,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(vJ,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FJ,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TJ,"href","/docs/transformers/pr_18169/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(MJ,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(EJ,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CJ,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wJ,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AJ,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yJ,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(xJ,"href","/docs/transformers/pr_18169/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c($J,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kJ,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(SJ,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForCausalLM"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(NJ,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(qJ,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jJ,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DJ,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(GJ,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(OJ,"href","/docs/transformers/pr_18169/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(VJ,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(XJ,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(zJ,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QJ,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WJ,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HJ,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForImageClassification"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_18169/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(ZJ,"href","/docs/transformers/pr_18169/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(eY,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(oY,"href","/docs/transformers/pr_18169/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(rY,"href","/docs/transformers/pr_18169/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(tY,"href","/docs/transformers/pr_18169/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(aY,"href","/docs/transformers/pr_18169/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(nY,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m4,"id","transformers.TFAutoModelForMaskedLM"),c(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m4,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(sY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(cY,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(fY,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mY,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(gY,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(hY,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(pY,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(uY,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bY,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(vY,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(FY,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(TY,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(EY,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wY,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(AY,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LY,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yY,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(xY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(IY,"href","/docs/transformers/pr_18169/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.TFMarianMTModel"),c(qY,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForSequenceClassification"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(OY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(HY,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_18169/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(JY,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(YY,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(KY,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(eK,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18169/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18169/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForMultipleChoice"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(uK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(AK,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yK,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(xK,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(RK,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(PK,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(BK,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(NK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(GK,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(OK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_18169/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForTokenClassification"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(QK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(JK,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(YK,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(KK,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ZK,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(eZ,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(oZ,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(tZ,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(nZ,"href","/docs/transformers/pr_18169/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForQuestionAnswering"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_18169/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_18169/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_18169/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_18169/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_18169/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LZ,"href","/docs/transformers/pr_18169/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_18169/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18169/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18169/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_18169/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_18169/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(IZ,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18169/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.TFAutoModelForVision2Seq"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(qZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_18169/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModel"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(QZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertModel"),c(JZ,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartModel"),c(YZ,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.FlaxBeitModel"),c(KZ,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertModel"),c(ZZ,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(eee,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(oee,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ree,"href","/docs/transformers/pr_18169/en/model_doc/clip#transformers.FlaxCLIPModel"),c(tee,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(aee,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraModel"),c(nee,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(see,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(lee,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(iee,"href","/docs/transformers/pr_18169/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(dee,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.FlaxMarianModel"),c(cee,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fee,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.FlaxMT5Model"),c(mee,"href","/docs/transformers/pr_18169/en/model_doc/opt#transformers.FlaxOPTModel"),c(gee,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(hee,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(pee,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_ee,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.FlaxT5Model"),c(uee,"href","/docs/transformers/pr_18169/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(bee,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.FlaxViTModel"),c(vee,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Fee,"href","/docs/transformers/pr_18169/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Tee,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.FlaxAutoModelForCausalLM"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(Mee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wee,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Aee,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Lee,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yee,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(xee,"href","/docs/transformers/pr_18169/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c($ee,"href","/docs/transformers/pr_18169/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(kee,"href","/docs/transformers/pr_18169/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(See,"href","/docs/transformers/pr_18169/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ree,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Pee,"href","/docs/transformers/pr_18169/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.FlaxAutoModelForPreTraining"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(Bee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qee,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jee,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Dee,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Gee,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Oee,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Vee,"href","/docs/transformers/pr_18169/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zee,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Qee,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Wee,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Hee,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_18169/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Jee,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.FlaxAutoModelForMaskedLM"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(Yee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ooe,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(toe,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(aoe,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(noe,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(soe,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(loe,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ioe,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(doe,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(coe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(foe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(moe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(goe,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(poe,"href","/docs/transformers/pr_18169/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_18169/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uoe,"href","/docs/transformers/pr_18169/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_18169/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(voe,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_18169/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Toe,"href","/docs/transformers/pr_18169/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_18169/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(Eoe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($oe,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(koe,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(Ioe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Noe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qoe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(joe,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18169/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18169/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.FlaxAutoModelForTokenClassification"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(_f,"class","relative group"),c(Uoe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Joe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yoe,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Koe,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ere,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ore,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rre,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tre,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(are,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nre,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(m0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(sre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ire,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dre,"href","/docs/transformers/pr_18169/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cre,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fre,"href","/docs/transformers/pr_18169/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(mre,"href","/docs/transformers/pr_18169/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gre,"href","/docs/transformers/pr_18169/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hre,"href","/docs/transformers/pr_18169/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pre,"href","/docs/transformers/pr_18169/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(_re,"href","/docs/transformers/pr_18169/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(ure,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fre,"href","/docs/transformers/pr_18169/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.FlaxAutoModelForImageClassification"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(Tre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/pr_18169/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wre,"href","/docs/transformers/pr_18169/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForVision2Seq"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c(Are,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yre,"href","/docs/transformers/pr_18169/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xre,"href","/docs/transformers/pr_18169/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,Li),b(f,Pf,u),b(f,lt,u),e(lt,yi),e(lt,xi),e(xi,e7),e(lt,Bf),b(f,Oe,u),b(f,We,u),e(We,$i),e(We,Pn),e(Pn,o7),e(We,Bn),e(We,In),e(In,r7),e(We,ki),e(We,Nn),e(Nn,t7),e(We,Si),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,BS),e(Ae,Ri),e(Ri,IS),e(Ae,NS),b(f,wo,u),b(f,Ra,u),e(Ra,qS),e(Ra,Nf),e(Nf,jS),e(Ra,mHe),b(f,YVe,u),b(f,Pi,u),e(Pi,qf),e(qf,Cae),M(a7,Cae,null),e(Pi,gHe),e(Pi,wae),e(wae,hHe),b(f,KVe,u),b(f,qn,u),e(qn,pHe),e(qn,Aae),e(Aae,_He),e(qn,uHe),e(qn,Lae),e(Lae,bHe),e(qn,vHe),b(f,ZVe,u),M(n7,f,u),b(f,eXe,u),b(f,DS,u),e(DS,FHe),b(f,oXe,u),M(jf,f,u),b(f,rXe,u),b(f,Bi,u),e(Bi,Df),e(Df,yae),M(s7,yae,null),e(Bi,THe),e(Bi,xae),e(xae,MHe),b(f,tXe,u),b(f,Ao,u),M(l7,Ao,null),e(Ao,EHe),e(Ao,i7),e(i7,CHe),e(i7,GS),e(GS,wHe),e(i7,AHe),e(Ao,LHe),e(Ao,d7),e(d7,yHe),e(d7,$ae),e($ae,xHe),e(d7,$He),e(Ao,kHe),e(Ao,Lr),M(c7,Lr,null),e(Lr,SHe),e(Lr,kae),e(kae,RHe),e(Lr,PHe),e(Lr,Ii),e(Ii,BHe),e(Ii,Sae),e(Sae,IHe),e(Ii,NHe),e(Ii,Rae),e(Rae,qHe),e(Ii,jHe),e(Lr,DHe),e(Lr,A),e(A,Gf),e(Gf,Pae),e(Pae,GHe),e(Gf,OHe),e(Gf,OS),e(OS,VHe),e(Gf,XHe),e(A,zHe),e(A,Of),e(Of,Bae),e(Bae,QHe),e(Of,WHe),e(Of,VS),e(VS,HHe),e(Of,UHe),e(A,JHe),e(A,Vf),e(Vf,Iae),e(Iae,YHe),e(Vf,KHe),e(Vf,XS),e(XS,ZHe),e(Vf,eUe),e(A,oUe),e(A,Xf),e(Xf,Nae),e(Nae,rUe),e(Xf,tUe),e(Xf,zS),e(zS,aUe),e(Xf,nUe),e(A,sUe),e(A,zf),e(zf,qae),e(qae,lUe),e(zf,iUe),e(zf,QS),e(QS,dUe),e(zf,cUe),e(A,fUe),e(A,Qf),e(Qf,jae),e(jae,mUe),e(Qf,gUe),e(Qf,WS),e(WS,hUe),e(Qf,pUe),e(A,_Ue),e(A,Wf),e(Wf,Dae),e(Dae,uUe),e(Wf,bUe),e(Wf,HS),e(HS,vUe),e(Wf,FUe),e(A,TUe),e(A,Hf),e(Hf,Gae),e(Gae,MUe),e(Hf,EUe),e(Hf,US),e(US,CUe),e(Hf,wUe),e(A,AUe),e(A,Uf),e(Uf,Oae),e(Oae,LUe),e(Uf,yUe),e(Uf,JS),e(JS,xUe),e(Uf,$Ue),e(A,kUe),e(A,Jf),e(Jf,Vae),e(Vae,SUe),e(Jf,RUe),e(Jf,YS),e(YS,PUe),e(Jf,BUe),e(A,IUe),e(A,Yf),e(Yf,Xae),e(Xae,NUe),e(Yf,qUe),e(Yf,KS),e(KS,jUe),e(Yf,DUe),e(A,GUe),e(A,Kf),e(Kf,zae),e(zae,OUe),e(Kf,VUe),e(Kf,ZS),e(ZS,XUe),e(Kf,zUe),e(A,QUe),e(A,Zf),e(Zf,Qae),e(Qae,WUe),e(Zf,HUe),e(Zf,eR),e(eR,UUe),e(Zf,JUe),e(A,YUe),e(A,em),e(em,Wae),e(Wae,KUe),e(em,ZUe),e(em,oR),e(oR,eJe),e(em,oJe),e(A,rJe),e(A,om),e(om,Hae),e(Hae,tJe),e(om,aJe),e(om,rR),e(rR,nJe),e(om,sJe),e(A,lJe),e(A,rm),e(rm,Uae),e(Uae,iJe),e(rm,dJe),e(rm,tR),e(tR,cJe),e(rm,fJe),e(A,mJe),e(A,tm),e(tm,Jae),e(Jae,gJe),e(tm,hJe),e(tm,aR),e(aR,pJe),e(tm,_Je),e(A,uJe),e(A,am),e(am,Yae),e(Yae,bJe),e(am,vJe),e(am,nR),e(nR,FJe),e(am,TJe),e(A,MJe),e(A,nm),e(nm,Kae),e(Kae,EJe),e(nm,CJe),e(nm,sR),e(sR,wJe),e(nm,AJe),e(A,LJe),e(A,sm),e(sm,Zae),e(Zae,yJe),e(sm,xJe),e(sm,lR),e(lR,$Je),e(sm,kJe),e(A,SJe),e(A,lm),e(lm,ene),e(ene,RJe),e(lm,PJe),e(lm,iR),e(iR,BJe),e(lm,IJe),e(A,NJe),e(A,im),e(im,one),e(one,qJe),e(im,jJe),e(im,dR),e(dR,DJe),e(im,GJe),e(A,OJe),e(A,dm),e(dm,rne),e(rne,VJe),e(dm,XJe),e(dm,cR),e(cR,zJe),e(dm,QJe),e(A,WJe),e(A,cm),e(cm,tne),e(tne,HJe),e(cm,UJe),e(cm,fR),e(fR,JJe),e(cm,YJe),e(A,KJe),e(A,fm),e(fm,ane),e(ane,ZJe),e(fm,eYe),e(fm,mR),e(mR,oYe),e(fm,rYe),e(A,tYe),e(A,mm),e(mm,nne),e(nne,aYe),e(mm,nYe),e(mm,gR),e(gR,sYe),e(mm,lYe),e(A,iYe),e(A,gm),e(gm,sne),e(sne,dYe),e(gm,cYe),e(gm,hR),e(hR,fYe),e(gm,mYe),e(A,gYe),e(A,hm),e(hm,lne),e(lne,hYe),e(hm,pYe),e(hm,pR),e(pR,_Ye),e(hm,uYe),e(A,bYe),e(A,pm),e(pm,ine),e(ine,vYe),e(pm,FYe),e(pm,_R),e(_R,TYe),e(pm,MYe),e(A,EYe),e(A,_m),e(_m,dne),e(dne,CYe),e(_m,wYe),e(_m,uR),e(uR,AYe),e(_m,LYe),e(A,yYe),e(A,um),e(um,cne),e(cne,xYe),e(um,$Ye),e(um,bR),e(bR,kYe),e(um,SYe),e(A,RYe),e(A,bm),e(bm,fne),e(fne,PYe),e(bm,BYe),e(bm,vR),e(vR,IYe),e(bm,NYe),e(A,qYe),e(A,vm),e(vm,mne),e(mne,jYe),e(vm,DYe),e(vm,FR),e(FR,GYe),e(vm,OYe),e(A,VYe),e(A,Fm),e(Fm,gne),e(gne,XYe),e(Fm,zYe),e(Fm,TR),e(TR,QYe),e(Fm,WYe),e(A,HYe),e(A,Tm),e(Tm,hne),e(hne,UYe),e(Tm,JYe),e(Tm,MR),e(MR,YYe),e(Tm,KYe),e(A,ZYe),e(A,Mm),e(Mm,pne),e(pne,eKe),e(Mm,oKe),e(Mm,ER),e(ER,rKe),e(Mm,tKe),e(A,aKe),e(A,Em),e(Em,_ne),e(_ne,nKe),e(Em,sKe),e(Em,CR),e(CR,lKe),e(Em,iKe),e(A,dKe),e(A,Cm),e(Cm,une),e(une,cKe),e(Cm,fKe),e(Cm,wR),e(wR,mKe),e(Cm,gKe),e(A,hKe),e(A,wm),e(wm,bne),e(bne,pKe),e(wm,_Ke),e(wm,AR),e(AR,uKe),e(wm,bKe),e(A,vKe),e(A,Am),e(Am,vne),e(vne,FKe),e(Am,TKe),e(Am,LR),e(LR,MKe),e(Am,EKe),e(A,CKe),e(A,Lm),e(Lm,Fne),e(Fne,wKe),e(Lm,AKe),e(Lm,yR),e(yR,LKe),e(Lm,yKe),e(A,xKe),e(A,ym),e(ym,Tne),e(Tne,$Ke),e(ym,kKe),e(ym,xR),e(xR,SKe),e(ym,RKe),e(A,PKe),e(A,xm),e(xm,Mne),e(Mne,BKe),e(xm,IKe),e(xm,$R),e($R,NKe),e(xm,qKe),e(A,jKe),e(A,$m),e($m,Ene),e(Ene,DKe),e($m,GKe),e($m,kR),e(kR,OKe),e($m,VKe),e(A,XKe),e(A,km),e(km,Cne),e(Cne,zKe),e(km,QKe),e(km,SR),e(SR,WKe),e(km,HKe),e(A,UKe),e(A,Sm),e(Sm,wne),e(wne,JKe),e(Sm,YKe),e(Sm,RR),e(RR,KKe),e(Sm,ZKe),e(A,eZe),e(A,Rm),e(Rm,Ane),e(Ane,oZe),e(Rm,rZe),e(Rm,PR),e(PR,tZe),e(Rm,aZe),e(A,nZe),e(A,Pm),e(Pm,Lne),e(Lne,sZe),e(Pm,lZe),e(Pm,BR),e(BR,iZe),e(Pm,dZe),e(A,cZe),e(A,Bm),e(Bm,yne),e(yne,fZe),e(Bm,mZe),e(Bm,IR),e(IR,gZe),e(Bm,hZe),e(A,pZe),e(A,Im),e(Im,xne),e(xne,_Ze),e(Im,uZe),e(Im,NR),e(NR,bZe),e(Im,vZe),e(A,FZe),e(A,Nm),e(Nm,$ne),e($ne,TZe),e(Nm,MZe),e(Nm,qR),e(qR,EZe),e(Nm,CZe),e(A,wZe),e(A,qm),e(qm,kne),e(kne,AZe),e(qm,LZe),e(qm,jR),e(jR,yZe),e(qm,xZe),e(A,$Ze),e(A,jm),e(jm,Sne),e(Sne,kZe),e(jm,SZe),e(jm,DR),e(DR,RZe),e(jm,PZe),e(A,BZe),e(A,Dm),e(Dm,Rne),e(Rne,IZe),e(Dm,NZe),e(Dm,GR),e(GR,qZe),e(Dm,jZe),e(A,DZe),e(A,Gm),e(Gm,Pne),e(Pne,GZe),e(Gm,OZe),e(Gm,OR),e(OR,VZe),e(Gm,XZe),e(A,zZe),e(A,Om),e(Om,Bne),e(Bne,QZe),e(Om,WZe),e(Om,VR),e(VR,HZe),e(Om,UZe),e(A,JZe),e(A,Vm),e(Vm,Ine),e(Ine,YZe),e(Vm,KZe),e(Vm,XR),e(XR,ZZe),e(Vm,eeo),e(A,oeo),e(A,Xm),e(Xm,Nne),e(Nne,reo),e(Xm,teo),e(Xm,zR),e(zR,aeo),e(Xm,neo),e(A,seo),e(A,zm),e(zm,qne),e(qne,leo),e(zm,ieo),e(zm,QR),e(QR,deo),e(zm,ceo),e(A,feo),e(A,Qm),e(Qm,jne),e(jne,meo),e(Qm,geo),e(Qm,WR),e(WR,heo),e(Qm,peo),e(A,_eo),e(A,Wm),e(Wm,Dne),e(Dne,ueo),e(Wm,beo),e(Wm,HR),e(HR,veo),e(Wm,Feo),e(A,Teo),e(A,Hm),e(Hm,Gne),e(Gne,Meo),e(Hm,Eeo),e(Hm,UR),e(UR,Ceo),e(Hm,weo),e(A,Aeo),e(A,Um),e(Um,One),e(One,Leo),e(Um,yeo),e(Um,JR),e(JR,xeo),e(Um,$eo),e(A,keo),e(A,Jm),e(Jm,Vne),e(Vne,Seo),e(Jm,Reo),e(Jm,YR),e(YR,Peo),e(Jm,Beo),e(A,Ieo),e(A,Ym),e(Ym,Xne),e(Xne,Neo),e(Ym,qeo),e(Ym,KR),e(KR,jeo),e(Ym,Deo),e(A,Geo),e(A,Km),e(Km,zne),e(zne,Oeo),e(Km,Veo),e(Km,ZR),e(ZR,Xeo),e(Km,zeo),e(A,Qeo),e(A,Zm),e(Zm,Qne),e(Qne,Weo),e(Zm,Heo),e(Zm,eP),e(eP,Ueo),e(Zm,Jeo),e(A,Yeo),e(A,eg),e(eg,Wne),e(Wne,Keo),e(eg,Zeo),e(eg,oP),e(oP,eoo),e(eg,ooo),e(A,roo),e(A,og),e(og,Hne),e(Hne,too),e(og,aoo),e(og,rP),e(rP,noo),e(og,soo),e(A,loo),e(A,rg),e(rg,Une),e(Une,ioo),e(rg,doo),e(rg,tP),e(tP,coo),e(rg,foo),e(A,moo),e(A,tg),e(tg,Jne),e(Jne,goo),e(tg,hoo),e(tg,aP),e(aP,poo),e(tg,_oo),e(A,uoo),e(A,ag),e(ag,Yne),e(Yne,boo),e(ag,voo),e(ag,nP),e(nP,Foo),e(ag,Too),e(A,Moo),e(A,ng),e(ng,Kne),e(Kne,Eoo),e(ng,Coo),e(ng,sP),e(sP,woo),e(ng,Aoo),e(A,Loo),e(A,sg),e(sg,Zne),e(Zne,yoo),e(sg,xoo),e(sg,lP),e(lP,$oo),e(sg,koo),e(A,Soo),e(A,lg),e(lg,ese),e(ese,Roo),e(lg,Poo),e(lg,iP),e(iP,Boo),e(lg,Ioo),e(A,Noo),e(A,ig),e(ig,ose),e(ose,qoo),e(ig,joo),e(ig,dP),e(dP,Doo),e(ig,Goo),e(A,Ooo),e(A,dg),e(dg,rse),e(rse,Voo),e(dg,Xoo),e(dg,cP),e(cP,zoo),e(dg,Qoo),e(A,Woo),e(A,cg),e(cg,tse),e(tse,Hoo),e(cg,Uoo),e(cg,fP),e(fP,Joo),e(cg,Yoo),e(A,Koo),e(A,fg),e(fg,ase),e(ase,Zoo),e(fg,ero),e(fg,mP),e(mP,oro),e(fg,rro),e(A,tro),e(A,mg),e(mg,nse),e(nse,aro),e(mg,nro),e(mg,gP),e(gP,sro),e(mg,lro),e(A,iro),e(A,gg),e(gg,sse),e(sse,dro),e(gg,cro),e(gg,hP),e(hP,fro),e(gg,mro),e(A,gro),e(A,hg),e(hg,lse),e(lse,hro),e(hg,pro),e(hg,pP),e(pP,_ro),e(hg,uro),e(A,bro),e(A,pg),e(pg,ise),e(ise,vro),e(pg,Fro),e(pg,_P),e(_P,Tro),e(pg,Mro),e(A,Ero),e(A,_g),e(_g,dse),e(dse,Cro),e(_g,wro),e(_g,uP),e(uP,Aro),e(_g,Lro),e(A,yro),e(A,ug),e(ug,cse),e(cse,xro),e(ug,$ro),e(ug,bP),e(bP,kro),e(ug,Sro),e(A,Rro),e(A,bg),e(bg,fse),e(fse,Pro),e(bg,Bro),e(bg,vP),e(vP,Iro),e(bg,Nro),e(A,qro),e(A,vg),e(vg,mse),e(mse,jro),e(vg,Dro),e(vg,FP),e(FP,Gro),e(vg,Oro),e(A,Vro),e(A,Fg),e(Fg,gse),e(gse,Xro),e(Fg,zro),e(Fg,TP),e(TP,Qro),e(Fg,Wro),e(A,Hro),e(A,Tg),e(Tg,hse),e(hse,Uro),e(Tg,Jro),e(Tg,MP),e(MP,Yro),e(Tg,Kro),e(A,Zro),e(A,Mg),e(Mg,pse),e(pse,eto),e(Mg,oto),e(Mg,EP),e(EP,rto),e(Mg,tto),e(A,ato),e(A,Eg),e(Eg,_se),e(_se,nto),e(Eg,sto),e(Eg,CP),e(CP,lto),e(Eg,ito),e(A,dto),e(A,Cg),e(Cg,use),e(use,cto),e(Cg,fto),e(Cg,wP),e(wP,mto),e(Cg,gto),e(A,hto),e(A,wg),e(wg,bse),e(bse,pto),e(wg,_to),e(wg,AP),e(AP,uto),e(wg,bto),e(A,vto),e(A,Ag),e(Ag,vse),e(vse,Fto),e(Ag,Tto),e(Ag,LP),e(LP,Mto),e(Ag,Eto),e(A,Cto),e(A,Lg),e(Lg,Fse),e(Fse,wto),e(Lg,Ato),e(Lg,yP),e(yP,Lto),e(Lg,yto),e(A,xto),e(A,yg),e(yg,Tse),e(Tse,$to),e(yg,kto),e(yg,xP),e(xP,Sto),e(yg,Rto),e(A,Pto),e(A,xg),e(xg,Mse),e(Mse,Bto),e(xg,Ito),e(xg,$P),e($P,Nto),e(xg,qto),e(A,jto),e(A,$g),e($g,Ese),e(Ese,Dto),e($g,Gto),e($g,kP),e(kP,Oto),e($g,Vto),e(A,Xto),e(A,kg),e(kg,Cse),e(Cse,zto),e(kg,Qto),e(kg,SP),e(SP,Wto),e(kg,Hto),e(A,Uto),e(A,Sg),e(Sg,wse),e(wse,Jto),e(Sg,Yto),e(Sg,RP),e(RP,Kto),e(Sg,Zto),e(A,eao),e(A,Rg),e(Rg,Ase),e(Ase,oao),e(Rg,rao),e(Rg,PP),e(PP,tao),e(Rg,aao),e(A,nao),e(A,Pg),e(Pg,Lse),e(Lse,sao),e(Pg,lao),e(Pg,BP),e(BP,iao),e(Pg,dao),e(A,cao),e(A,Bg),e(Bg,yse),e(yse,fao),e(Bg,mao),e(Bg,IP),e(IP,gao),e(Bg,hao),e(A,pao),e(A,Ig),e(Ig,xse),e(xse,_ao),e(Ig,uao),e(Ig,NP),e(NP,bao),e(Ig,vao),e(A,Fao),e(A,Ng),e(Ng,$se),e($se,Tao),e(Ng,Mao),e(Ng,qP),e(qP,Eao),e(Ng,Cao),e(A,wao),e(A,qg),e(qg,kse),e(kse,Aao),e(qg,Lao),e(qg,jP),e(jP,yao),e(qg,xao),e(A,$ao),e(A,jg),e(jg,Sse),e(Sse,kao),e(jg,Sao),e(jg,DP),e(DP,Rao),e(jg,Pao),e(A,Bao),e(A,Dg),e(Dg,Rse),e(Rse,Iao),e(Dg,Nao),e(Dg,GP),e(GP,qao),e(Dg,jao),e(A,Dao),e(A,Gg),e(Gg,Pse),e(Pse,Gao),e(Gg,Oao),e(Gg,OP),e(OP,Vao),e(Gg,Xao),e(A,zao),e(A,Og),e(Og,Bse),e(Bse,Qao),e(Og,Wao),e(Og,VP),e(VP,Hao),e(Og,Uao),e(A,Jao),e(A,Vg),e(Vg,Ise),e(Ise,Yao),e(Vg,Kao),e(Vg,XP),e(XP,Zao),e(Vg,eno),e(A,ono),e(A,Xg),e(Xg,Nse),e(Nse,rno),e(Xg,tno),e(Xg,zP),e(zP,ano),e(Xg,nno),e(A,sno),e(A,zg),e(zg,qse),e(qse,lno),e(zg,ino),e(zg,QP),e(QP,dno),e(zg,cno),e(A,fno),e(A,Qg),e(Qg,jse),e(jse,mno),e(Qg,gno),e(Qg,WP),e(WP,hno),e(Qg,pno),e(A,_no),e(A,Wg),e(Wg,Dse),e(Dse,uno),e(Wg,bno),e(Wg,HP),e(HP,vno),e(Wg,Fno),e(A,Tno),e(A,Hg),e(Hg,Gse),e(Gse,Mno),e(Hg,Eno),e(Hg,UP),e(UP,Cno),e(Hg,wno),e(A,Ano),e(A,Ug),e(Ug,Ose),e(Ose,Lno),e(Ug,yno),e(Ug,JP),e(JP,xno),e(Ug,$no),e(A,kno),e(A,Jg),e(Jg,Vse),e(Vse,Sno),e(Jg,Rno),e(Jg,YP),e(YP,Pno),e(Jg,Bno),e(Lr,Ino),M(Yg,Lr,null),e(Ao,Nno),e(Ao,Kg),M(f7,Kg,null),e(Kg,qno),e(Kg,Xse),e(Xse,jno),b(f,aXe,u),b(f,Ni,u),e(Ni,Zg),e(Zg,zse),M(m7,zse,null),e(Ni,Dno),e(Ni,Qse),e(Qse,Gno),b(f,nXe,u),b(f,Lo,u),M(g7,Lo,null),e(Lo,Ono),e(Lo,h7),e(h7,Vno),e(h7,KP),e(KP,Xno),e(h7,zno),e(Lo,Qno),e(Lo,p7),e(p7,Wno),e(p7,Wse),e(Wse,Hno),e(p7,Uno),e(Lo,Jno),e(Lo,yr),M(_7,yr,null),e(yr,Yno),e(yr,Hse),e(Hse,Kno),e(yr,Zno),e(yr,Pa),e(Pa,eso),e(Pa,Use),e(Use,oso),e(Pa,rso),e(Pa,Jse),e(Jse,tso),e(Pa,aso),e(Pa,Yse),e(Yse,nso),e(Pa,sso),e(yr,lso),e(yr,k),e(k,jn),e(jn,Kse),e(Kse,iso),e(jn,dso),e(jn,ZP),e(ZP,cso),e(jn,fso),e(jn,eB),e(eB,mso),e(jn,gso),e(k,hso),e(k,Dn),e(Dn,Zse),e(Zse,pso),e(Dn,_so),e(Dn,oB),e(oB,uso),e(Dn,bso),e(Dn,rB),e(rB,vso),e(Dn,Fso),e(k,Tso),e(k,Gn),e(Gn,ele),e(ele,Mso),e(Gn,Eso),e(Gn,tB),e(tB,Cso),e(Gn,wso),e(Gn,aB),e(aB,Aso),e(Gn,Lso),e(k,yso),e(k,eh),e(eh,ole),e(ole,xso),e(eh,$so),e(eh,nB),e(nB,kso),e(eh,Sso),e(k,Rso),e(k,On),e(On,rle),e(rle,Pso),e(On,Bso),e(On,sB),e(sB,Iso),e(On,Nso),e(On,lB),e(lB,qso),e(On,jso),e(k,Dso),e(k,oh),e(oh,tle),e(tle,Gso),e(oh,Oso),e(oh,iB),e(iB,Vso),e(oh,Xso),e(k,zso),e(k,rh),e(rh,ale),e(ale,Qso),e(rh,Wso),e(rh,dB),e(dB,Hso),e(rh,Uso),e(k,Jso),e(k,th),e(th,nle),e(nle,Yso),e(th,Kso),e(th,cB),e(cB,Zso),e(th,elo),e(k,olo),e(k,Vn),e(Vn,sle),e(sle,rlo),e(Vn,tlo),e(Vn,fB),e(fB,alo),e(Vn,nlo),e(Vn,mB),e(mB,slo),e(Vn,llo),e(k,ilo),e(k,Xn),e(Xn,lle),e(lle,dlo),e(Xn,clo),e(Xn,gB),e(gB,flo),e(Xn,mlo),e(Xn,hB),e(hB,glo),e(Xn,hlo),e(k,plo),e(k,zn),e(zn,ile),e(ile,_lo),e(zn,ulo),e(zn,pB),e(pB,blo),e(zn,vlo),e(zn,_B),e(_B,Flo),e(zn,Tlo),e(k,Mlo),e(k,ah),e(ah,dle),e(dle,Elo),e(ah,Clo),e(ah,uB),e(uB,wlo),e(ah,Alo),e(k,Llo),e(k,nh),e(nh,cle),e(cle,ylo),e(nh,xlo),e(nh,bB),e(bB,$lo),e(nh,klo),e(k,Slo),e(k,sh),e(sh,fle),e(fle,Rlo),e(sh,Plo),e(sh,vB),e(vB,Blo),e(sh,Ilo),e(k,Nlo),e(k,Qn),e(Qn,mle),e(mle,qlo),e(Qn,jlo),e(Qn,FB),e(FB,Dlo),e(Qn,Glo),e(Qn,TB),e(TB,Olo),e(Qn,Vlo),e(k,Xlo),e(k,lh),e(lh,gle),e(gle,zlo),e(lh,Qlo),e(lh,MB),e(MB,Wlo),e(lh,Hlo),e(k,Ulo),e(k,Wn),e(Wn,hle),e(hle,Jlo),e(Wn,Ylo),e(Wn,EB),e(EB,Klo),e(Wn,Zlo),e(Wn,CB),e(CB,eio),e(Wn,oio),e(k,rio),e(k,Hn),e(Hn,ple),e(ple,tio),e(Hn,aio),e(Hn,wB),e(wB,nio),e(Hn,sio),e(Hn,AB),e(AB,lio),e(Hn,iio),e(k,dio),e(k,Un),e(Un,_le),e(_le,cio),e(Un,fio),e(Un,LB),e(LB,mio),e(Un,gio),e(Un,yB),e(yB,hio),e(Un,pio),e(k,_io),e(k,Jn),e(Jn,ule),e(ule,uio),e(Jn,bio),e(Jn,xB),e(xB,vio),e(Jn,Fio),e(Jn,$B),e($B,Tio),e(Jn,Mio),e(k,Eio),e(k,ih),e(ih,ble),e(ble,Cio),e(ih,wio),e(ih,kB),e(kB,Aio),e(ih,Lio),e(k,yio),e(k,Yn),e(Yn,vle),e(vle,xio),e(Yn,$io),e(Yn,SB),e(SB,kio),e(Yn,Sio),e(Yn,RB),e(RB,Rio),e(Yn,Pio),e(k,Bio),e(k,Kn),e(Kn,Fle),e(Fle,Iio),e(Kn,Nio),e(Kn,PB),e(PB,qio),e(Kn,jio),e(Kn,BB),e(BB,Dio),e(Kn,Gio),e(k,Oio),e(k,Zn),e(Zn,Tle),e(Tle,Vio),e(Zn,Xio),e(Zn,IB),e(IB,zio),e(Zn,Qio),e(Zn,NB),e(NB,Wio),e(Zn,Hio),e(k,Uio),e(k,es),e(es,Mle),e(Mle,Jio),e(es,Yio),e(es,qB),e(qB,Kio),e(es,Zio),e(es,jB),e(jB,edo),e(es,odo),e(k,rdo),e(k,os),e(os,Ele),e(Ele,tdo),e(os,ado),e(os,DB),e(DB,ndo),e(os,sdo),e(os,GB),e(GB,ldo),e(os,ido),e(k,ddo),e(k,rs),e(rs,Cle),e(Cle,cdo),e(rs,fdo),e(rs,OB),e(OB,mdo),e(rs,gdo),e(rs,VB),e(VB,hdo),e(rs,pdo),e(k,_do),e(k,dh),e(dh,wle),e(wle,udo),e(dh,bdo),e(dh,XB),e(XB,vdo),e(dh,Fdo),e(k,Tdo),e(k,ts),e(ts,Ale),e(Ale,Mdo),e(ts,Edo),e(ts,zB),e(zB,Cdo),e(ts,wdo),e(ts,QB),e(QB,Ado),e(ts,Ldo),e(k,ydo),e(k,ch),e(ch,Lle),e(Lle,xdo),e(ch,$do),e(ch,WB),e(WB,kdo),e(ch,Sdo),e(k,Rdo),e(k,as),e(as,yle),e(yle,Pdo),e(as,Bdo),e(as,HB),e(HB,Ido),e(as,Ndo),e(as,UB),e(UB,qdo),e(as,jdo),e(k,Ddo),e(k,ns),e(ns,xle),e(xle,Gdo),e(ns,Odo),e(ns,JB),e(JB,Vdo),e(ns,Xdo),e(ns,YB),e(YB,zdo),e(ns,Qdo),e(k,Wdo),e(k,ss),e(ss,$le),e($le,Hdo),e(ss,Udo),e(ss,KB),e(KB,Jdo),e(ss,Ydo),e(ss,ZB),e(ZB,Kdo),e(ss,Zdo),e(k,eco),e(k,fh),e(fh,kle),e(kle,oco),e(fh,rco),e(fh,eI),e(eI,tco),e(fh,aco),e(k,nco),e(k,ls),e(ls,Sle),e(Sle,sco),e(ls,lco),e(ls,oI),e(oI,ico),e(ls,dco),e(ls,rI),e(rI,cco),e(ls,fco),e(k,mco),e(k,is),e(is,Rle),e(Rle,gco),e(is,hco),e(is,tI),e(tI,pco),e(is,_co),e(is,aI),e(aI,uco),e(is,bco),e(k,vco),e(k,ds),e(ds,Ple),e(Ple,Fco),e(ds,Tco),e(ds,nI),e(nI,Mco),e(ds,Eco),e(ds,sI),e(sI,Cco),e(ds,wco),e(k,Aco),e(k,mh),e(mh,Ble),e(Ble,Lco),e(mh,yco),e(mh,lI),e(lI,xco),e(mh,$co),e(k,kco),e(k,cs),e(cs,Ile),e(Ile,Sco),e(cs,Rco),e(cs,iI),e(iI,Pco),e(cs,Bco),e(cs,dI),e(dI,Ico),e(cs,Nco),e(k,qco),e(k,fs),e(fs,Nle),e(Nle,jco),e(fs,Dco),e(fs,cI),e(cI,Gco),e(fs,Oco),e(fs,fI),e(fI,Vco),e(fs,Xco),e(k,zco),e(k,ms),e(ms,qle),e(qle,Qco),e(ms,Wco),e(ms,mI),e(mI,Hco),e(ms,Uco),e(ms,gI),e(gI,Jco),e(ms,Yco),e(k,Kco),e(k,gs),e(gs,jle),e(jle,Zco),e(gs,efo),e(gs,hI),e(hI,ofo),e(gs,rfo),e(gs,pI),e(pI,tfo),e(gs,afo),e(k,nfo),e(k,hs),e(hs,Dle),e(Dle,sfo),e(hs,lfo),e(hs,_I),e(_I,ifo),e(hs,dfo),e(hs,uI),e(uI,cfo),e(hs,ffo),e(k,mfo),e(k,ps),e(ps,Gle),e(Gle,gfo),e(ps,hfo),e(ps,bI),e(bI,pfo),e(ps,_fo),e(ps,vI),e(vI,ufo),e(ps,bfo),e(k,vfo),e(k,_s),e(_s,Ole),e(Ole,Ffo),e(_s,Tfo),e(_s,FI),e(FI,Mfo),e(_s,Efo),e(_s,TI),e(TI,Cfo),e(_s,wfo),e(k,Afo),e(k,us),e(us,Vle),e(Vle,Lfo),e(us,yfo),e(us,MI),e(MI,xfo),e(us,$fo),e(us,EI),e(EI,kfo),e(us,Sfo),e(k,Rfo),e(k,gh),e(gh,Xle),e(Xle,Pfo),e(gh,Bfo),e(gh,CI),e(CI,Ifo),e(gh,Nfo),e(k,qfo),e(k,bs),e(bs,zle),e(zle,jfo),e(bs,Dfo),e(bs,wI),e(wI,Gfo),e(bs,Ofo),e(bs,AI),e(AI,Vfo),e(bs,Xfo),e(k,zfo),e(k,hh),e(hh,Qle),e(Qle,Qfo),e(hh,Wfo),e(hh,LI),e(LI,Hfo),e(hh,Ufo),e(k,Jfo),e(k,ph),e(ph,Wle),e(Wle,Yfo),e(ph,Kfo),e(ph,yI),e(yI,Zfo),e(ph,emo),e(k,omo),e(k,vs),e(vs,Hle),e(Hle,rmo),e(vs,tmo),e(vs,xI),e(xI,amo),e(vs,nmo),e(vs,$I),e($I,smo),e(vs,lmo),e(k,imo),e(k,Fs),e(Fs,Ule),e(Ule,dmo),e(Fs,cmo),e(Fs,kI),e(kI,fmo),e(Fs,mmo),e(Fs,SI),e(SI,gmo),e(Fs,hmo),e(k,pmo),e(k,Ts),e(Ts,Jle),e(Jle,_mo),e(Ts,umo),e(Ts,RI),e(RI,bmo),e(Ts,vmo),e(Ts,PI),e(PI,Fmo),e(Ts,Tmo),e(k,Mmo),e(k,_h),e(_h,Yle),e(Yle,Emo),e(_h,Cmo),e(_h,BI),e(BI,wmo),e(_h,Amo),e(k,Lmo),e(k,Ms),e(Ms,Kle),e(Kle,ymo),e(Ms,xmo),e(Ms,II),e(II,$mo),e(Ms,kmo),e(Ms,NI),e(NI,Smo),e(Ms,Rmo),e(k,Pmo),e(k,Es),e(Es,Zle),e(Zle,Bmo),e(Es,Imo),e(Es,qI),e(qI,Nmo),e(Es,qmo),e(Es,jI),e(jI,jmo),e(Es,Dmo),e(k,Gmo),e(k,Cs),e(Cs,eie),e(eie,Omo),e(Cs,Vmo),e(Cs,DI),e(DI,Xmo),e(Cs,zmo),e(Cs,GI),e(GI,Qmo),e(Cs,Wmo),e(k,Hmo),e(k,ws),e(ws,oie),e(oie,Umo),e(ws,Jmo),e(ws,OI),e(OI,Ymo),e(ws,Kmo),e(ws,VI),e(VI,Zmo),e(ws,ego),e(k,ogo),e(k,As),e(As,rie),e(rie,rgo),e(As,tgo),e(As,XI),e(XI,ago),e(As,ngo),e(As,zI),e(zI,sgo),e(As,lgo),e(k,igo),e(k,Ls),e(Ls,tie),e(tie,dgo),e(Ls,cgo),e(Ls,QI),e(QI,fgo),e(Ls,mgo),e(Ls,WI),e(WI,ggo),e(Ls,hgo),e(k,pgo),e(k,ys),e(ys,aie),e(aie,_go),e(ys,ugo),e(ys,HI),e(HI,bgo),e(ys,vgo),e(ys,UI),e(UI,Fgo),e(ys,Tgo),e(k,Mgo),e(k,uh),e(uh,nie),e(nie,Ego),e(uh,Cgo),e(uh,JI),e(JI,wgo),e(uh,Ago),e(k,Lgo),e(k,xs),e(xs,sie),e(sie,ygo),e(xs,xgo),e(xs,YI),e(YI,$go),e(xs,kgo),e(xs,KI),e(KI,Sgo),e(xs,Rgo),e(k,Pgo),e(k,bh),e(bh,lie),e(lie,Bgo),e(bh,Igo),e(bh,ZI),e(ZI,Ngo),e(bh,qgo),e(k,jgo),e(k,vh),e(vh,iie),e(iie,Dgo),e(vh,Ggo),e(vh,eN),e(eN,Ogo),e(vh,Vgo),e(k,Xgo),e(k,Fh),e(Fh,die),e(die,zgo),e(Fh,Qgo),e(Fh,oN),e(oN,Wgo),e(Fh,Hgo),e(k,Ugo),e(k,Th),e(Th,cie),e(cie,Jgo),e(Th,Ygo),e(Th,rN),e(rN,Kgo),e(Th,Zgo),e(k,eho),e(k,$s),e($s,fie),e(fie,oho),e($s,rho),e($s,tN),e(tN,tho),e($s,aho),e($s,aN),e(aN,nho),e($s,sho),e(k,lho),e(k,Mh),e(Mh,mie),e(mie,iho),e(Mh,dho),e(Mh,nN),e(nN,cho),e(Mh,fho),e(k,mho),e(k,ks),e(ks,gie),e(gie,gho),e(ks,hho),e(ks,sN),e(sN,pho),e(ks,_ho),e(ks,lN),e(lN,uho),e(ks,bho),e(k,vho),e(k,Ss),e(Ss,hie),e(hie,Fho),e(Ss,Tho),e(Ss,iN),e(iN,Mho),e(Ss,Eho),e(Ss,dN),e(dN,Cho),e(Ss,who),e(k,Aho),e(k,Rs),e(Rs,pie),e(pie,Lho),e(Rs,yho),e(Rs,cN),e(cN,xho),e(Rs,$ho),e(Rs,fN),e(fN,kho),e(Rs,Sho),e(k,Rho),e(k,Ps),e(Ps,_ie),e(_ie,Pho),e(Ps,Bho),e(Ps,mN),e(mN,Iho),e(Ps,Nho),e(Ps,gN),e(gN,qho),e(Ps,jho),e(k,Dho),e(k,Bs),e(Bs,uie),e(uie,Gho),e(Bs,Oho),e(Bs,hN),e(hN,Vho),e(Bs,Xho),e(Bs,pN),e(pN,zho),e(Bs,Qho),e(k,Who),e(k,Is),e(Is,bie),e(bie,Hho),e(Is,Uho),e(Is,_N),e(_N,Jho),e(Is,Yho),e(Is,uN),e(uN,Kho),e(Is,Zho),e(k,epo),e(k,Eh),e(Eh,vie),e(vie,opo),e(Eh,rpo),e(Eh,bN),e(bN,tpo),e(Eh,apo),e(k,npo),e(k,Ch),e(Ch,Fie),e(Fie,spo),e(Ch,lpo),e(Ch,vN),e(vN,ipo),e(Ch,dpo),e(k,cpo),e(k,Ns),e(Ns,Tie),e(Tie,fpo),e(Ns,mpo),e(Ns,FN),e(FN,gpo),e(Ns,hpo),e(Ns,TN),e(TN,ppo),e(Ns,_po),e(k,upo),e(k,qs),e(qs,Mie),e(Mie,bpo),e(qs,vpo),e(qs,MN),e(MN,Fpo),e(qs,Tpo),e(qs,EN),e(EN,Mpo),e(qs,Epo),e(k,Cpo),e(k,js),e(js,Eie),e(Eie,wpo),e(js,Apo),e(js,CN),e(CN,Lpo),e(js,ypo),e(js,wN),e(wN,xpo),e(js,$po),e(k,kpo),e(k,wh),e(wh,Cie),e(Cie,Spo),e(wh,Rpo),e(wh,AN),e(AN,Ppo),e(wh,Bpo),e(k,Ipo),e(k,Ah),e(Ah,wie),e(wie,Npo),e(Ah,qpo),e(Ah,LN),e(LN,jpo),e(Ah,Dpo),e(k,Gpo),e(k,Lh),e(Lh,Aie),e(Aie,Opo),e(Lh,Vpo),e(Lh,yN),e(yN,Xpo),e(Lh,zpo),e(k,Qpo),e(k,Ds),e(Ds,Lie),e(Lie,Wpo),e(Ds,Hpo),e(Ds,xN),e(xN,Upo),e(Ds,Jpo),e(Ds,$N),e($N,Ypo),e(Ds,Kpo),e(k,Zpo),e(k,Gs),e(Gs,yie),e(yie,e_o),e(Gs,o_o),e(Gs,kN),e(kN,r_o),e(Gs,t_o),e(Gs,SN),e(SN,a_o),e(Gs,n_o),e(k,s_o),e(k,yh),e(yh,xie),e(xie,l_o),e(yh,i_o),e(yh,RN),e(RN,d_o),e(yh,c_o),e(k,f_o),e(k,xh),e(xh,$ie),e($ie,m_o),e(xh,g_o),e(xh,PN),e(PN,h_o),e(xh,p_o),e(k,__o),e(k,$h),e($h,kie),e(kie,u_o),e($h,b_o),e($h,BN),e(BN,v_o),e($h,F_o),e(k,T_o),e(k,Os),e(Os,Sie),e(Sie,M_o),e(Os,E_o),e(Os,IN),e(IN,C_o),e(Os,w_o),e(Os,NN),e(NN,A_o),e(Os,L_o),e(k,y_o),e(k,kh),e(kh,Rie),e(Rie,x_o),e(kh,$_o),e(kh,qN),e(qN,k_o),e(kh,S_o),e(k,R_o),e(k,Sh),e(Sh,Pie),e(Pie,P_o),e(Sh,B_o),e(Sh,jN),e(jN,I_o),e(Sh,N_o),e(k,q_o),e(k,Vs),e(Vs,Bie),e(Bie,j_o),e(Vs,D_o),e(Vs,DN),e(DN,G_o),e(Vs,O_o),e(Vs,GN),e(GN,V_o),e(Vs,X_o),e(k,z_o),e(k,Xs),e(Xs,Iie),e(Iie,Q_o),e(Xs,W_o),e(Xs,ON),e(ON,H_o),e(Xs,U_o),e(Xs,VN),e(VN,J_o),e(Xs,Y_o),e(k,K_o),e(k,zs),e(zs,Nie),e(Nie,Z_o),e(zs,euo),e(zs,XN),e(XN,ouo),e(zs,ruo),e(zs,zN),e(zN,tuo),e(zs,auo),e(k,nuo),e(k,Qs),e(Qs,qie),e(qie,suo),e(Qs,luo),e(Qs,QN),e(QN,iuo),e(Qs,duo),e(Qs,WN),e(WN,cuo),e(Qs,fuo),e(yr,muo),M(Rh,yr,null),e(Lo,guo),e(Lo,Ph),M(u7,Ph,null),e(Ph,huo),e(Ph,jie),e(jie,puo),b(f,sXe,u),b(f,qi,u),e(qi,Bh),e(Bh,Die),M(b7,Die,null),e(qi,_uo),e(qi,Gie),e(Gie,uuo),b(f,lXe,u),b(f,yo,u),M(v7,yo,null),e(yo,buo),e(yo,F7),e(F7,vuo),e(F7,HN),e(HN,Fuo),e(F7,Tuo),e(yo,Muo),e(yo,T7),e(T7,Euo),e(T7,Oie),e(Oie,Cuo),e(T7,wuo),e(yo,Auo),e(yo,Ue),M(M7,Ue,null),e(Ue,Luo),e(Ue,Vie),e(Vie,yuo),e(Ue,xuo),e(Ue,Ba),e(Ba,$uo),e(Ba,Xie),e(Xie,kuo),e(Ba,Suo),e(Ba,zie),e(zie,Ruo),e(Ba,Puo),e(Ba,Qie),e(Qie,Buo),e(Ba,Iuo),e(Ue,Nuo),e(Ue,Y),e(Y,Ih),e(Ih,Wie),e(Wie,quo),e(Ih,juo),e(Ih,UN),e(UN,Duo),e(Ih,Guo),e(Y,Ouo),e(Y,Nh),e(Nh,Hie),e(Hie,Vuo),e(Nh,Xuo),e(Nh,JN),e(JN,zuo),e(Nh,Quo),e(Y,Wuo),e(Y,qh),e(qh,Uie),e(Uie,Huo),e(qh,Uuo),e(qh,YN),e(YN,Juo),e(qh,Yuo),e(Y,Kuo),e(Y,jh),e(jh,Jie),e(Jie,Zuo),e(jh,e1o),e(jh,KN),e(KN,o1o),e(jh,r1o),e(Y,t1o),e(Y,Dh),e(Dh,Yie),e(Yie,a1o),e(Dh,n1o),e(Dh,ZN),e(ZN,s1o),e(Dh,l1o),e(Y,i1o),e(Y,Gh),e(Gh,Kie),e(Kie,d1o),e(Gh,c1o),e(Gh,eq),e(eq,f1o),e(Gh,m1o),e(Y,g1o),e(Y,Oh),e(Oh,Zie),e(Zie,h1o),e(Oh,p1o),e(Oh,oq),e(oq,_1o),e(Oh,u1o),e(Y,b1o),e(Y,Vh),e(Vh,ede),e(ede,v1o),e(Vh,F1o),e(Vh,rq),e(rq,T1o),e(Vh,M1o),e(Y,E1o),e(Y,Xh),e(Xh,ode),e(ode,C1o),e(Xh,w1o),e(Xh,tq),e(tq,A1o),e(Xh,L1o),e(Y,y1o),e(Y,zh),e(zh,rde),e(rde,x1o),e(zh,$1o),e(zh,aq),e(aq,k1o),e(zh,S1o),e(Y,R1o),e(Y,Qh),e(Qh,tde),e(tde,P1o),e(Qh,B1o),e(Qh,nq),e(nq,I1o),e(Qh,N1o),e(Y,q1o),e(Y,Wh),e(Wh,ade),e(ade,j1o),e(Wh,D1o),e(Wh,sq),e(sq,G1o),e(Wh,O1o),e(Y,V1o),e(Y,Hh),e(Hh,nde),e(nde,X1o),e(Hh,z1o),e(Hh,lq),e(lq,Q1o),e(Hh,W1o),e(Y,H1o),e(Y,Uh),e(Uh,sde),e(sde,U1o),e(Uh,J1o),e(Uh,iq),e(iq,Y1o),e(Uh,K1o),e(Y,Z1o),e(Y,Jh),e(Jh,lde),e(lde,e2o),e(Jh,o2o),e(Jh,dq),e(dq,r2o),e(Jh,t2o),e(Y,a2o),e(Y,Yh),e(Yh,ide),e(ide,n2o),e(Yh,s2o),e(Yh,cq),e(cq,l2o),e(Yh,i2o),e(Y,d2o),e(Y,Kh),e(Kh,dde),e(dde,c2o),e(Kh,f2o),e(Kh,fq),e(fq,m2o),e(Kh,g2o),e(Y,h2o),e(Y,Zh),e(Zh,cde),e(cde,p2o),e(Zh,_2o),e(Zh,mq),e(mq,u2o),e(Zh,b2o),e(Y,v2o),e(Y,ep),e(ep,fde),e(fde,F2o),e(ep,T2o),e(ep,gq),e(gq,M2o),e(ep,E2o),e(Y,C2o),e(Y,op),e(op,mde),e(mde,w2o),e(op,A2o),e(op,hq),e(hq,L2o),e(op,y2o),e(Y,x2o),e(Y,rp),e(rp,gde),e(gde,$2o),e(rp,k2o),e(rp,pq),e(pq,S2o),e(rp,R2o),e(Y,P2o),e(Y,tp),e(tp,hde),e(hde,B2o),e(tp,I2o),e(tp,_q),e(_q,N2o),e(tp,q2o),e(Y,j2o),e(Y,ap),e(ap,pde),e(pde,D2o),e(ap,G2o),e(ap,uq),e(uq,O2o),e(ap,V2o),e(Y,X2o),e(Y,np),e(np,_de),e(_de,z2o),e(np,Q2o),e(np,bq),e(bq,W2o),e(np,H2o),e(Y,U2o),e(Y,sp),e(sp,ude),e(ude,J2o),e(sp,Y2o),e(sp,vq),e(vq,K2o),e(sp,Z2o),e(Y,ebo),e(Y,lp),e(lp,bde),e(bde,obo),e(lp,rbo),e(lp,Fq),e(Fq,tbo),e(lp,abo),e(Y,nbo),e(Y,ip),e(ip,vde),e(vde,sbo),e(ip,lbo),e(ip,Tq),e(Tq,ibo),e(ip,dbo),e(Y,cbo),e(Y,dp),e(dp,Fde),e(Fde,fbo),e(dp,mbo),e(dp,Mq),e(Mq,gbo),e(dp,hbo),e(Y,pbo),e(Y,cp),e(cp,Tde),e(Tde,_bo),e(cp,ubo),e(cp,Eq),e(Eq,bbo),e(cp,vbo),e(Y,Fbo),e(Y,fp),e(fp,Mde),e(Mde,Tbo),e(fp,Mbo),e(fp,Cq),e(Cq,Ebo),e(fp,Cbo),e(Y,wbo),e(Y,mp),e(mp,Ede),e(Ede,Abo),e(mp,Lbo),e(mp,wq),e(wq,ybo),e(mp,xbo),e(Y,$bo),e(Y,gp),e(gp,Cde),e(Cde,kbo),e(gp,Sbo),e(gp,Aq),e(Aq,Rbo),e(gp,Pbo),e(Y,Bbo),e(Y,hp),e(hp,wde),e(wde,Ibo),e(hp,Nbo),e(hp,Lq),e(Lq,qbo),e(hp,jbo),e(Y,Dbo),e(Y,pp),e(pp,Ade),e(Ade,Gbo),e(pp,Obo),e(pp,yq),e(yq,Vbo),e(pp,Xbo),e(Ue,zbo),M(_p,Ue,null),e(Ue,Qbo),M(up,Ue,null),e(yo,Wbo),e(yo,bp),M(E7,bp,null),e(bp,Hbo),e(bp,Lde),e(Lde,Ubo),b(f,iXe,u),b(f,ji,u),e(ji,vp),e(vp,yde),M(C7,yde,null),e(ji,Jbo),e(ji,xde),e(xde,Ybo),b(f,dXe,u),b(f,xo,u),M(w7,xo,null),e(xo,Kbo),e(xo,A7),e(A7,Zbo),e(A7,xq),e(xq,evo),e(A7,ovo),e(xo,rvo),e(xo,L7),e(L7,tvo),e(L7,$de),e($de,avo),e(L7,nvo),e(xo,svo),e(xo,Je),M(y7,Je,null),e(Je,lvo),e(Je,kde),e(kde,ivo),e(Je,dvo),e(Je,Di),e(Di,cvo),e(Di,Sde),e(Sde,fvo),e(Di,mvo),e(Di,Rde),e(Rde,gvo),e(Di,hvo),e(Je,pvo),e(Je,he),e(he,Fp),e(Fp,Pde),e(Pde,_vo),e(Fp,uvo),e(Fp,$q),e($q,bvo),e(Fp,vvo),e(he,Fvo),e(he,Tp),e(Tp,Bde),e(Bde,Tvo),e(Tp,Mvo),e(Tp,Ide),e(Ide,Evo),e(Tp,Cvo),e(he,wvo),e(he,Mp),e(Mp,Nde),e(Nde,Avo),e(Mp,Lvo),e(Mp,kq),e(kq,yvo),e(Mp,xvo),e(he,$vo),e(he,Ep),e(Ep,qde),e(qde,kvo),e(Ep,Svo),e(Ep,Sq),e(Sq,Rvo),e(Ep,Pvo),e(he,Bvo),e(he,Cp),e(Cp,jde),e(jde,Ivo),e(Cp,Nvo),e(Cp,Rq),e(Rq,qvo),e(Cp,jvo),e(he,Dvo),e(he,wp),e(wp,Dde),e(Dde,Gvo),e(wp,Ovo),e(wp,Pq),e(Pq,Vvo),e(wp,Xvo),e(he,zvo),e(he,Ap),e(Ap,Gde),e(Gde,Qvo),e(Ap,Wvo),e(Ap,Bq),e(Bq,Hvo),e(Ap,Uvo),e(he,Jvo),e(he,Lp),e(Lp,Ode),e(Ode,Yvo),e(Lp,Kvo),e(Lp,Iq),e(Iq,Zvo),e(Lp,eFo),e(he,oFo),e(he,yp),e(yp,Vde),e(Vde,rFo),e(yp,tFo),e(yp,Nq),e(Nq,aFo),e(yp,nFo),e(he,sFo),e(he,xp),e(xp,Xde),e(Xde,lFo),e(xp,iFo),e(xp,qq),e(qq,dFo),e(xp,cFo),e(he,fFo),e(he,$p),e($p,zde),e(zde,mFo),e($p,gFo),e($p,jq),e(jq,hFo),e($p,pFo),e(he,_Fo),e(he,kp),e(kp,Qde),e(Qde,uFo),e(kp,bFo),e(kp,Dq),e(Dq,vFo),e(kp,FFo),e(he,TFo),e(he,Sp),e(Sp,Wde),e(Wde,MFo),e(Sp,EFo),e(Sp,Gq),e(Gq,CFo),e(Sp,wFo),e(he,AFo),e(he,Rp),e(Rp,Hde),e(Hde,LFo),e(Rp,yFo),e(Rp,Oq),e(Oq,xFo),e(Rp,$Fo),e(he,kFo),e(he,Pp),e(Pp,Ude),e(Ude,SFo),e(Pp,RFo),e(Pp,Vq),e(Vq,PFo),e(Pp,BFo),e(he,IFo),e(he,Bp),e(Bp,Jde),e(Jde,NFo),e(Bp,qFo),e(Bp,Xq),e(Xq,jFo),e(Bp,DFo),e(he,GFo),e(he,Ip),e(Ip,Yde),e(Yde,OFo),e(Ip,VFo),e(Ip,zq),e(zq,XFo),e(Ip,zFo),e(he,QFo),e(he,Np),e(Np,Kde),e(Kde,WFo),e(Np,HFo),e(Np,Qq),e(Qq,UFo),e(Np,JFo),e(Je,YFo),M(qp,Je,null),e(Je,KFo),M(jp,Je,null),e(xo,ZFo),e(xo,Dp),M(x7,Dp,null),e(Dp,e6o),e(Dp,Zde),e(Zde,o6o),b(f,cXe,u),b(f,Gi,u),e(Gi,Gp),e(Gp,ece),M($7,ece,null),e(Gi,r6o),e(Gi,oce),e(oce,t6o),b(f,fXe,u),b(f,$o,u),M(k7,$o,null),e($o,a6o),e($o,Oi),e(Oi,n6o),e(Oi,Wq),e(Wq,s6o),e(Oi,l6o),e(Oi,Hq),e(Hq,i6o),e(Oi,d6o),e($o,c6o),e($o,S7),e(S7,f6o),e(S7,rce),e(rce,m6o),e(S7,g6o),e($o,h6o),e($o,it),M(R7,it,null),e(it,p6o),e(it,tce),e(tce,_6o),e(it,u6o),e(it,Vi),e(Vi,b6o),e(Vi,ace),e(ace,v6o),e(Vi,F6o),e(Vi,Uq),e(Uq,T6o),e(Vi,M6o),e(it,E6o),M(Op,it,null),e($o,C6o),e($o,Ye),M(P7,Ye,null),e(Ye,w6o),e(Ye,nce),e(nce,A6o),e(Ye,L6o),e(Ye,Ia),e(Ia,y6o),e(Ia,sce),e(sce,x6o),e(Ia,$6o),e(Ia,lce),e(lce,k6o),e(Ia,S6o),e(Ia,ice),e(ice,R6o),e(Ia,P6o),e(Ye,B6o),e(Ye,y),e(y,Vp),e(Vp,dce),e(dce,I6o),e(Vp,N6o),e(Vp,Jq),e(Jq,q6o),e(Vp,j6o),e(y,D6o),e(y,Xp),e(Xp,cce),e(cce,G6o),e(Xp,O6o),e(Xp,Yq),e(Yq,V6o),e(Xp,X6o),e(y,z6o),e(y,zp),e(zp,fce),e(fce,Q6o),e(zp,W6o),e(zp,Kq),e(Kq,H6o),e(zp,U6o),e(y,J6o),e(y,Qp),e(Qp,mce),e(mce,Y6o),e(Qp,K6o),e(Qp,Zq),e(Zq,Z6o),e(Qp,eTo),e(y,oTo),e(y,Wp),e(Wp,gce),e(gce,rTo),e(Wp,tTo),e(Wp,ej),e(ej,aTo),e(Wp,nTo),e(y,sTo),e(y,Hp),e(Hp,hce),e(hce,lTo),e(Hp,iTo),e(Hp,oj),e(oj,dTo),e(Hp,cTo),e(y,fTo),e(y,Up),e(Up,pce),e(pce,mTo),e(Up,gTo),e(Up,rj),e(rj,hTo),e(Up,pTo),e(y,_To),e(y,Jp),e(Jp,_ce),e(_ce,uTo),e(Jp,bTo),e(Jp,tj),e(tj,vTo),e(Jp,FTo),e(y,TTo),e(y,Yp),e(Yp,uce),e(uce,MTo),e(Yp,ETo),e(Yp,aj),e(aj,CTo),e(Yp,wTo),e(y,ATo),e(y,Kp),e(Kp,bce),e(bce,LTo),e(Kp,yTo),e(Kp,nj),e(nj,xTo),e(Kp,$To),e(y,kTo),e(y,Zp),e(Zp,vce),e(vce,STo),e(Zp,RTo),e(Zp,sj),e(sj,PTo),e(Zp,BTo),e(y,ITo),e(y,e_),e(e_,Fce),e(Fce,NTo),e(e_,qTo),e(e_,lj),e(lj,jTo),e(e_,DTo),e(y,GTo),e(y,o_),e(o_,Tce),e(Tce,OTo),e(o_,VTo),e(o_,ij),e(ij,XTo),e(o_,zTo),e(y,QTo),e(y,r_),e(r_,Mce),e(Mce,WTo),e(r_,HTo),e(r_,dj),e(dj,UTo),e(r_,JTo),e(y,YTo),e(y,t_),e(t_,Ece),e(Ece,KTo),e(t_,ZTo),e(t_,cj),e(cj,e8o),e(t_,o8o),e(y,r8o),e(y,a_),e(a_,Cce),e(Cce,t8o),e(a_,a8o),e(a_,fj),e(fj,n8o),e(a_,s8o),e(y,l8o),e(y,n_),e(n_,wce),e(wce,i8o),e(n_,d8o),e(n_,mj),e(mj,c8o),e(n_,f8o),e(y,m8o),e(y,s_),e(s_,Ace),e(Ace,g8o),e(s_,h8o),e(s_,gj),e(gj,p8o),e(s_,_8o),e(y,u8o),e(y,l_),e(l_,Lce),e(Lce,b8o),e(l_,v8o),e(l_,hj),e(hj,F8o),e(l_,T8o),e(y,M8o),e(y,i_),e(i_,yce),e(yce,E8o),e(i_,C8o),e(i_,pj),e(pj,w8o),e(i_,A8o),e(y,L8o),e(y,d_),e(d_,xce),e(xce,y8o),e(d_,x8o),e(d_,_j),e(_j,$8o),e(d_,k8o),e(y,S8o),e(y,c_),e(c_,$ce),e($ce,R8o),e(c_,P8o),e(c_,uj),e(uj,B8o),e(c_,I8o),e(y,N8o),e(y,f_),e(f_,kce),e(kce,q8o),e(f_,j8o),e(f_,bj),e(bj,D8o),e(f_,G8o),e(y,O8o),e(y,m_),e(m_,Sce),e(Sce,V8o),e(m_,X8o),e(m_,vj),e(vj,z8o),e(m_,Q8o),e(y,W8o),e(y,g_),e(g_,Rce),e(Rce,H8o),e(g_,U8o),e(g_,Fj),e(Fj,J8o),e(g_,Y8o),e(y,K8o),e(y,h_),e(h_,Pce),e(Pce,Z8o),e(h_,e9o),e(h_,Tj),e(Tj,o9o),e(h_,r9o),e(y,t9o),e(y,p_),e(p_,Bce),e(Bce,a9o),e(p_,n9o),e(p_,Mj),e(Mj,s9o),e(p_,l9o),e(y,i9o),e(y,__),e(__,Ice),e(Ice,d9o),e(__,c9o),e(__,Ej),e(Ej,f9o),e(__,m9o),e(y,g9o),e(y,u_),e(u_,Nce),e(Nce,h9o),e(u_,p9o),e(u_,Cj),e(Cj,_9o),e(u_,u9o),e(y,b9o),e(y,b_),e(b_,qce),e(qce,v9o),e(b_,F9o),e(b_,wj),e(wj,T9o),e(b_,M9o),e(y,E9o),e(y,v_),e(v_,jce),e(jce,C9o),e(v_,w9o),e(v_,Aj),e(Aj,A9o),e(v_,L9o),e(y,y9o),e(y,F_),e(F_,Dce),e(Dce,x9o),e(F_,$9o),e(F_,Lj),e(Lj,k9o),e(F_,S9o),e(y,R9o),e(y,T_),e(T_,Gce),e(Gce,P9o),e(T_,B9o),e(T_,yj),e(yj,I9o),e(T_,N9o),e(y,q9o),e(y,M_),e(M_,Oce),e(Oce,j9o),e(M_,D9o),e(M_,xj),e(xj,G9o),e(M_,O9o),e(y,V9o),e(y,Ws),e(Ws,Vce),e(Vce,X9o),e(Ws,z9o),e(Ws,$j),e($j,Q9o),e(Ws,W9o),e(Ws,kj),e(kj,H9o),e(Ws,U9o),e(y,J9o),e(y,E_),e(E_,Xce),e(Xce,Y9o),e(E_,K9o),e(E_,Sj),e(Sj,Z9o),e(E_,eMo),e(y,oMo),e(y,C_),e(C_,zce),e(zce,rMo),e(C_,tMo),e(C_,Rj),e(Rj,aMo),e(C_,nMo),e(y,sMo),e(y,w_),e(w_,Qce),e(Qce,lMo),e(w_,iMo),e(w_,Pj),e(Pj,dMo),e(w_,cMo),e(y,fMo),e(y,A_),e(A_,Wce),e(Wce,mMo),e(A_,gMo),e(A_,Bj),e(Bj,hMo),e(A_,pMo),e(y,_Mo),e(y,L_),e(L_,Hce),e(Hce,uMo),e(L_,bMo),e(L_,Ij),e(Ij,vMo),e(L_,FMo),e(y,TMo),e(y,y_),e(y_,Uce),e(Uce,MMo),e(y_,EMo),e(y_,Nj),e(Nj,CMo),e(y_,wMo),e(y,AMo),e(y,x_),e(x_,Jce),e(Jce,LMo),e(x_,yMo),e(x_,qj),e(qj,xMo),e(x_,$Mo),e(y,kMo),e(y,$_),e($_,Yce),e(Yce,SMo),e($_,RMo),e($_,jj),e(jj,PMo),e($_,BMo),e(y,IMo),e(y,k_),e(k_,Kce),e(Kce,NMo),e(k_,qMo),e(k_,Dj),e(Dj,jMo),e(k_,DMo),e(y,GMo),e(y,S_),e(S_,Zce),e(Zce,OMo),e(S_,VMo),e(S_,Gj),e(Gj,XMo),e(S_,zMo),e(y,QMo),e(y,R_),e(R_,efe),e(efe,WMo),e(R_,HMo),e(R_,Oj),e(Oj,UMo),e(R_,JMo),e(y,YMo),e(y,P_),e(P_,ofe),e(ofe,KMo),e(P_,ZMo),e(P_,Vj),e(Vj,e4o),e(P_,o4o),e(y,r4o),e(y,B_),e(B_,rfe),e(rfe,t4o),e(B_,a4o),e(B_,Xj),e(Xj,n4o),e(B_,s4o),e(y,l4o),e(y,I_),e(I_,tfe),e(tfe,i4o),e(I_,d4o),e(I_,zj),e(zj,c4o),e(I_,f4o),e(y,m4o),e(y,N_),e(N_,afe),e(afe,g4o),e(N_,h4o),e(N_,Qj),e(Qj,p4o),e(N_,_4o),e(y,u4o),e(y,q_),e(q_,nfe),e(nfe,b4o),e(q_,v4o),e(q_,Wj),e(Wj,F4o),e(q_,T4o),e(y,M4o),e(y,j_),e(j_,sfe),e(sfe,E4o),e(j_,C4o),e(j_,Hj),e(Hj,w4o),e(j_,A4o),e(y,L4o),e(y,D_),e(D_,lfe),e(lfe,y4o),e(D_,x4o),e(D_,Uj),e(Uj,$4o),e(D_,k4o),e(y,S4o),e(y,G_),e(G_,ife),e(ife,R4o),e(G_,P4o),e(G_,Jj),e(Jj,B4o),e(G_,I4o),e(y,N4o),e(y,O_),e(O_,dfe),e(dfe,q4o),e(O_,j4o),e(O_,Yj),e(Yj,D4o),e(O_,G4o),e(y,O4o),e(y,V_),e(V_,cfe),e(cfe,V4o),e(V_,X4o),e(V_,Kj),e(Kj,z4o),e(V_,Q4o),e(y,W4o),e(y,X_),e(X_,ffe),e(ffe,H4o),e(X_,U4o),e(X_,Zj),e(Zj,J4o),e(X_,Y4o),e(y,K4o),e(y,z_),e(z_,mfe),e(mfe,Z4o),e(z_,eEo),e(z_,eD),e(eD,oEo),e(z_,rEo),e(y,tEo),e(y,Q_),e(Q_,gfe),e(gfe,aEo),e(Q_,nEo),e(Q_,oD),e(oD,sEo),e(Q_,lEo),e(y,iEo),e(y,W_),e(W_,hfe),e(hfe,dEo),e(W_,cEo),e(W_,rD),e(rD,fEo),e(W_,mEo),e(y,gEo),e(y,H_),e(H_,pfe),e(pfe,hEo),e(H_,pEo),e(H_,tD),e(tD,_Eo),e(H_,uEo),e(y,bEo),e(y,U_),e(U_,_fe),e(_fe,vEo),e(U_,FEo),e(U_,aD),e(aD,TEo),e(U_,MEo),e(y,EEo),e(y,J_),e(J_,ufe),e(ufe,CEo),e(J_,wEo),e(J_,nD),e(nD,AEo),e(J_,LEo),e(y,yEo),e(y,Y_),e(Y_,bfe),e(bfe,xEo),e(Y_,$Eo),e(Y_,sD),e(sD,kEo),e(Y_,SEo),e(y,REo),e(y,K_),e(K_,vfe),e(vfe,PEo),e(K_,BEo),e(K_,lD),e(lD,IEo),e(K_,NEo),e(y,qEo),e(y,Z_),e(Z_,Ffe),e(Ffe,jEo),e(Z_,DEo),e(Z_,iD),e(iD,GEo),e(Z_,OEo),e(y,VEo),e(y,eu),e(eu,Tfe),e(Tfe,XEo),e(eu,zEo),e(eu,dD),e(dD,QEo),e(eu,WEo),e(y,HEo),e(y,ou),e(ou,Mfe),e(Mfe,UEo),e(ou,JEo),e(ou,cD),e(cD,YEo),e(ou,KEo),e(y,ZEo),e(y,ru),e(ru,Efe),e(Efe,eCo),e(ru,oCo),e(ru,fD),e(fD,rCo),e(ru,tCo),e(y,aCo),e(y,tu),e(tu,Cfe),e(Cfe,nCo),e(tu,sCo),e(tu,mD),e(mD,lCo),e(tu,iCo),e(y,dCo),e(y,au),e(au,wfe),e(wfe,cCo),e(au,fCo),e(au,gD),e(gD,mCo),e(au,gCo),e(y,hCo),e(y,nu),e(nu,Afe),e(Afe,pCo),e(nu,_Co),e(nu,hD),e(hD,uCo),e(nu,bCo),e(y,vCo),e(y,su),e(su,Lfe),e(Lfe,FCo),e(su,TCo),e(su,pD),e(pD,MCo),e(su,ECo),e(y,CCo),e(y,lu),e(lu,yfe),e(yfe,wCo),e(lu,ACo),e(lu,_D),e(_D,LCo),e(lu,yCo),e(y,xCo),e(y,iu),e(iu,xfe),e(xfe,$Co),e(iu,kCo),e(iu,uD),e(uD,SCo),e(iu,RCo),e(y,PCo),e(y,du),e(du,$fe),e($fe,BCo),e(du,ICo),e(du,bD),e(bD,NCo),e(du,qCo),e(y,jCo),e(y,cu),e(cu,kfe),e(kfe,DCo),e(cu,GCo),e(cu,vD),e(vD,OCo),e(cu,VCo),e(y,XCo),e(y,fu),e(fu,Sfe),e(Sfe,zCo),e(fu,QCo),e(fu,FD),e(FD,WCo),e(fu,HCo),e(y,UCo),e(y,mu),e(mu,Rfe),e(Rfe,JCo),e(mu,YCo),e(mu,TD),e(TD,KCo),e(mu,ZCo),e(y,e3o),e(y,gu),e(gu,Pfe),e(Pfe,o3o),e(gu,r3o),e(gu,MD),e(MD,t3o),e(gu,a3o),e(y,n3o),e(y,hu),e(hu,Bfe),e(Bfe,s3o),e(hu,l3o),e(hu,ED),e(ED,i3o),e(hu,d3o),e(y,c3o),e(y,pu),e(pu,Ife),e(Ife,f3o),e(pu,m3o),e(pu,CD),e(CD,g3o),e(pu,h3o),e(y,p3o),e(y,_u),e(_u,Nfe),e(Nfe,_3o),e(_u,u3o),e(_u,wD),e(wD,b3o),e(_u,v3o),e(y,F3o),e(y,uu),e(uu,qfe),e(qfe,T3o),e(uu,M3o),e(uu,AD),e(AD,E3o),e(uu,C3o),e(y,w3o),e(y,bu),e(bu,jfe),e(jfe,A3o),e(bu,L3o),e(bu,LD),e(LD,y3o),e(bu,x3o),e(y,$3o),e(y,vu),e(vu,Dfe),e(Dfe,k3o),e(vu,S3o),e(vu,yD),e(yD,R3o),e(vu,P3o),e(y,B3o),e(y,Fu),e(Fu,Gfe),e(Gfe,I3o),e(Fu,N3o),e(Fu,xD),e(xD,q3o),e(Fu,j3o),e(y,D3o),e(y,Tu),e(Tu,Ofe),e(Ofe,G3o),e(Tu,O3o),e(Tu,$D),e($D,V3o),e(Tu,X3o),e(y,z3o),e(y,Mu),e(Mu,Vfe),e(Vfe,Q3o),e(Mu,W3o),e(Mu,kD),e(kD,H3o),e(Mu,U3o),e(y,J3o),e(y,Eu),e(Eu,Xfe),e(Xfe,Y3o),e(Eu,K3o),e(Eu,SD),e(SD,Z3o),e(Eu,e5o),e(y,o5o),e(y,Cu),e(Cu,zfe),e(zfe,r5o),e(Cu,t5o),e(Cu,RD),e(RD,a5o),e(Cu,n5o),e(y,s5o),e(y,wu),e(wu,Qfe),e(Qfe,l5o),e(wu,i5o),e(wu,PD),e(PD,d5o),e(wu,c5o),e(y,f5o),e(y,Au),e(Au,Wfe),e(Wfe,m5o),e(Au,g5o),e(Au,BD),e(BD,h5o),e(Au,p5o),e(y,_5o),e(y,Lu),e(Lu,Hfe),e(Hfe,u5o),e(Lu,b5o),e(Lu,ID),e(ID,v5o),e(Lu,F5o),e(y,T5o),e(y,yu),e(yu,Ufe),e(Ufe,M5o),e(yu,E5o),e(yu,ND),e(ND,C5o),e(yu,w5o),e(y,A5o),e(y,xu),e(xu,Jfe),e(Jfe,L5o),e(xu,y5o),e(xu,qD),e(qD,x5o),e(xu,$5o),e(y,k5o),e(y,$u),e($u,Yfe),e(Yfe,S5o),e($u,R5o),e($u,jD),e(jD,P5o),e($u,B5o),e(y,I5o),e(y,ku),e(ku,Kfe),e(Kfe,N5o),e(ku,q5o),e(ku,DD),e(DD,j5o),e(ku,D5o),e(y,G5o),e(y,Su),e(Su,Zfe),e(Zfe,O5o),e(Su,V5o),e(Su,GD),e(GD,X5o),e(Su,z5o),e(y,Q5o),e(y,Ru),e(Ru,eme),e(eme,W5o),e(Ru,H5o),e(Ru,OD),e(OD,U5o),e(Ru,J5o),e(y,Y5o),e(y,Pu),e(Pu,ome),e(ome,K5o),e(Pu,Z5o),e(Pu,VD),e(VD,e0o),e(Pu,o0o),e(y,r0o),e(y,Bu),e(Bu,rme),e(rme,t0o),e(Bu,a0o),e(Bu,XD),e(XD,n0o),e(Bu,s0o),e(y,l0o),e(y,Iu),e(Iu,tme),e(tme,i0o),e(Iu,d0o),e(Iu,zD),e(zD,c0o),e(Iu,f0o),e(y,m0o),e(y,Nu),e(Nu,ame),e(ame,g0o),e(Nu,h0o),e(Nu,QD),e(QD,p0o),e(Nu,_0o),e(y,u0o),e(y,qu),e(qu,nme),e(nme,b0o),e(qu,v0o),e(qu,WD),e(WD,F0o),e(qu,T0o),e(y,M0o),e(y,ju),e(ju,sme),e(sme,E0o),e(ju,C0o),e(ju,HD),e(HD,w0o),e(ju,A0o),e(y,L0o),e(y,Du),e(Du,lme),e(lme,y0o),e(Du,x0o),e(Du,UD),e(UD,$0o),e(Du,k0o),e(y,S0o),e(y,Gu),e(Gu,ime),e(ime,R0o),e(Gu,P0o),e(Gu,JD),e(JD,B0o),e(Gu,I0o),e(y,N0o),e(y,Ou),e(Ou,dme),e(dme,q0o),e(Ou,j0o),e(Ou,YD),e(YD,D0o),e(Ou,G0o),e(y,O0o),e(y,Vu),e(Vu,cme),e(cme,V0o),e(Vu,X0o),e(Vu,KD),e(KD,z0o),e(Vu,Q0o),e(y,W0o),e(y,Xu),e(Xu,fme),e(fme,H0o),e(Xu,U0o),e(Xu,ZD),e(ZD,J0o),e(Xu,Y0o),e(Ye,K0o),e(Ye,zu),e(zu,Z0o),e(zu,mme),e(mme,ewo),e(zu,owo),e(zu,gme),e(gme,rwo),e(Ye,two),M(Qu,Ye,null),b(f,mXe,u),b(f,Xi,u),e(Xi,Wu),e(Wu,hme),M(B7,hme,null),e(Xi,awo),e(Xi,pme),e(pme,nwo),b(f,gXe,u),b(f,ko,u),M(I7,ko,null),e(ko,swo),e(ko,zi),e(zi,lwo),e(zi,eG),e(eG,iwo),e(zi,dwo),e(zi,oG),e(oG,cwo),e(zi,fwo),e(ko,mwo),e(ko,N7),e(N7,gwo),e(N7,_me),e(_me,hwo),e(N7,pwo),e(ko,_wo),e(ko,dt),M(q7,dt,null),e(dt,uwo),e(dt,ume),e(ume,bwo),e(dt,vwo),e(dt,Qi),e(Qi,Fwo),e(Qi,bme),e(bme,Two),e(Qi,Mwo),e(Qi,rG),e(rG,Ewo),e(Qi,Cwo),e(dt,wwo),M(Hu,dt,null),e(ko,Awo),e(ko,Ke),M(j7,Ke,null),e(Ke,Lwo),e(Ke,vme),e(vme,ywo),e(Ke,xwo),e(Ke,Na),e(Na,$wo),e(Na,Fme),e(Fme,kwo),e(Na,Swo),e(Na,Tme),e(Tme,Rwo),e(Na,Pwo),e(Na,Mme),e(Mme,Bwo),e(Na,Iwo),e(Ke,Nwo),e(Ke,G),e(G,Uu),e(Uu,Eme),e(Eme,qwo),e(Uu,jwo),e(Uu,tG),e(tG,Dwo),e(Uu,Gwo),e(G,Owo),e(G,Ju),e(Ju,Cme),e(Cme,Vwo),e(Ju,Xwo),e(Ju,aG),e(aG,zwo),e(Ju,Qwo),e(G,Wwo),e(G,Yu),e(Yu,wme),e(wme,Hwo),e(Yu,Uwo),e(Yu,nG),e(nG,Jwo),e(Yu,Ywo),e(G,Kwo),e(G,Ku),e(Ku,Ame),e(Ame,Zwo),e(Ku,eAo),e(Ku,sG),e(sG,oAo),e(Ku,rAo),e(G,tAo),e(G,Zu),e(Zu,Lme),e(Lme,aAo),e(Zu,nAo),e(Zu,lG),e(lG,sAo),e(Zu,lAo),e(G,iAo),e(G,e1),e(e1,yme),e(yme,dAo),e(e1,cAo),e(e1,iG),e(iG,fAo),e(e1,mAo),e(G,gAo),e(G,o1),e(o1,xme),e(xme,hAo),e(o1,pAo),e(o1,dG),e(dG,_Ao),e(o1,uAo),e(G,bAo),e(G,r1),e(r1,$me),e($me,vAo),e(r1,FAo),e(r1,cG),e(cG,TAo),e(r1,MAo),e(G,EAo),e(G,t1),e(t1,kme),e(kme,CAo),e(t1,wAo),e(t1,fG),e(fG,AAo),e(t1,LAo),e(G,yAo),e(G,a1),e(a1,Sme),e(Sme,xAo),e(a1,$Ao),e(a1,mG),e(mG,kAo),e(a1,SAo),e(G,RAo),e(G,n1),e(n1,Rme),e(Rme,PAo),e(n1,BAo),e(n1,gG),e(gG,IAo),e(n1,NAo),e(G,qAo),e(G,s1),e(s1,Pme),e(Pme,jAo),e(s1,DAo),e(s1,hG),e(hG,GAo),e(s1,OAo),e(G,VAo),e(G,l1),e(l1,Bme),e(Bme,XAo),e(l1,zAo),e(l1,pG),e(pG,QAo),e(l1,WAo),e(G,HAo),e(G,i1),e(i1,Ime),e(Ime,UAo),e(i1,JAo),e(i1,_G),e(_G,YAo),e(i1,KAo),e(G,ZAo),e(G,d1),e(d1,Nme),e(Nme,e7o),e(d1,o7o),e(d1,uG),e(uG,r7o),e(d1,t7o),e(G,a7o),e(G,c1),e(c1,qme),e(qme,n7o),e(c1,s7o),e(c1,bG),e(bG,l7o),e(c1,i7o),e(G,d7o),e(G,f1),e(f1,jme),e(jme,c7o),e(f1,f7o),e(f1,vG),e(vG,m7o),e(f1,g7o),e(G,h7o),e(G,m1),e(m1,Dme),e(Dme,p7o),e(m1,_7o),e(m1,FG),e(FG,u7o),e(m1,b7o),e(G,v7o),e(G,g1),e(g1,Gme),e(Gme,F7o),e(g1,T7o),e(g1,TG),e(TG,M7o),e(g1,E7o),e(G,C7o),e(G,h1),e(h1,Ome),e(Ome,w7o),e(h1,A7o),e(h1,MG),e(MG,L7o),e(h1,y7o),e(G,x7o),e(G,p1),e(p1,Vme),e(Vme,$7o),e(p1,k7o),e(p1,EG),e(EG,S7o),e(p1,R7o),e(G,P7o),e(G,_1),e(_1,Xme),e(Xme,B7o),e(_1,I7o),e(_1,CG),e(CG,N7o),e(_1,q7o),e(G,j7o),e(G,u1),e(u1,zme),e(zme,D7o),e(u1,G7o),e(u1,wG),e(wG,O7o),e(u1,V7o),e(G,X7o),e(G,b1),e(b1,Qme),e(Qme,z7o),e(b1,Q7o),e(b1,AG),e(AG,W7o),e(b1,H7o),e(G,U7o),e(G,v1),e(v1,Wme),e(Wme,J7o),e(v1,Y7o),e(v1,LG),e(LG,K7o),e(v1,Z7o),e(G,eLo),e(G,F1),e(F1,Hme),e(Hme,oLo),e(F1,rLo),e(F1,yG),e(yG,tLo),e(F1,aLo),e(G,nLo),e(G,T1),e(T1,Ume),e(Ume,sLo),e(T1,lLo),e(T1,xG),e(xG,iLo),e(T1,dLo),e(G,cLo),e(G,M1),e(M1,Jme),e(Jme,fLo),e(M1,mLo),e(M1,$G),e($G,gLo),e(M1,hLo),e(G,pLo),e(G,E1),e(E1,Yme),e(Yme,_Lo),e(E1,uLo),e(E1,kG),e(kG,bLo),e(E1,vLo),e(G,FLo),e(G,C1),e(C1,Kme),e(Kme,TLo),e(C1,MLo),e(C1,SG),e(SG,ELo),e(C1,CLo),e(G,wLo),e(G,w1),e(w1,Zme),e(Zme,ALo),e(w1,LLo),e(w1,RG),e(RG,yLo),e(w1,xLo),e(G,$Lo),e(G,A1),e(A1,ege),e(ege,kLo),e(A1,SLo),e(A1,PG),e(PG,RLo),e(A1,PLo),e(G,BLo),e(G,L1),e(L1,oge),e(oge,ILo),e(L1,NLo),e(L1,BG),e(BG,qLo),e(L1,jLo),e(G,DLo),e(G,y1),e(y1,rge),e(rge,GLo),e(y1,OLo),e(y1,IG),e(IG,VLo),e(y1,XLo),e(G,zLo),e(G,x1),e(x1,tge),e(tge,QLo),e(x1,WLo),e(x1,NG),e(NG,HLo),e(x1,ULo),e(G,JLo),e(G,$1),e($1,age),e(age,YLo),e($1,KLo),e($1,qG),e(qG,ZLo),e($1,eyo),e(G,oyo),e(G,k1),e(k1,nge),e(nge,ryo),e(k1,tyo),e(k1,jG),e(jG,ayo),e(k1,nyo),e(G,syo),e(G,S1),e(S1,sge),e(sge,lyo),e(S1,iyo),e(S1,DG),e(DG,dyo),e(S1,cyo),e(G,fyo),e(G,R1),e(R1,lge),e(lge,myo),e(R1,gyo),e(R1,GG),e(GG,hyo),e(R1,pyo),e(G,_yo),e(G,P1),e(P1,ige),e(ige,uyo),e(P1,byo),e(P1,OG),e(OG,vyo),e(P1,Fyo),e(G,Tyo),e(G,B1),e(B1,dge),e(dge,Myo),e(B1,Eyo),e(B1,VG),e(VG,Cyo),e(B1,wyo),e(G,Ayo),e(G,I1),e(I1,cge),e(cge,Lyo),e(I1,yyo),e(I1,XG),e(XG,xyo),e(I1,$yo),e(G,kyo),e(G,N1),e(N1,fge),e(fge,Syo),e(N1,Ryo),e(N1,zG),e(zG,Pyo),e(N1,Byo),e(G,Iyo),e(G,q1),e(q1,mge),e(mge,Nyo),e(q1,qyo),e(q1,QG),e(QG,jyo),e(q1,Dyo),e(G,Gyo),e(G,j1),e(j1,gge),e(gge,Oyo),e(j1,Vyo),e(j1,WG),e(WG,Xyo),e(j1,zyo),e(Ke,Qyo),e(Ke,D1),e(D1,Wyo),e(D1,hge),e(hge,Hyo),e(D1,Uyo),e(D1,pge),e(pge,Jyo),e(Ke,Yyo),M(G1,Ke,null),b(f,hXe,u),b(f,Wi,u),e(Wi,O1),e(O1,_ge),M(D7,_ge,null),e(Wi,Kyo),e(Wi,uge),e(uge,Zyo),b(f,pXe,u),b(f,So,u),M(G7,So,null),e(So,exo),e(So,Hi),e(Hi,oxo),e(Hi,HG),e(HG,rxo),e(Hi,txo),e(Hi,UG),e(UG,axo),e(Hi,nxo),e(So,sxo),e(So,O7),e(O7,lxo),e(O7,bge),e(bge,ixo),e(O7,dxo),e(So,cxo),e(So,ct),M(V7,ct,null),e(ct,fxo),e(ct,vge),e(vge,mxo),e(ct,gxo),e(ct,Ui),e(Ui,hxo),e(Ui,Fge),e(Fge,pxo),e(Ui,_xo),e(Ui,JG),e(JG,uxo),e(Ui,bxo),e(ct,vxo),M(V1,ct,null),e(So,Fxo),e(So,Ze),M(X7,Ze,null),e(Ze,Txo),e(Ze,Tge),e(Tge,Mxo),e(Ze,Exo),e(Ze,qa),e(qa,Cxo),e(qa,Mge),e(Mge,wxo),e(qa,Axo),e(qa,Ege),e(Ege,Lxo),e(qa,yxo),e(qa,Cge),e(Cge,xxo),e(qa,$xo),e(Ze,kxo),e(Ze,z),e(z,X1),e(X1,wge),e(wge,Sxo),e(X1,Rxo),e(X1,YG),e(YG,Pxo),e(X1,Bxo),e(z,Ixo),e(z,z1),e(z1,Age),e(Age,Nxo),e(z1,qxo),e(z1,KG),e(KG,jxo),e(z1,Dxo),e(z,Gxo),e(z,Q1),e(Q1,Lge),e(Lge,Oxo),e(Q1,Vxo),e(Q1,ZG),e(ZG,Xxo),e(Q1,zxo),e(z,Qxo),e(z,W1),e(W1,yge),e(yge,Wxo),e(W1,Hxo),e(W1,eO),e(eO,Uxo),e(W1,Jxo),e(z,Yxo),e(z,H1),e(H1,xge),e(xge,Kxo),e(H1,Zxo),e(H1,oO),e(oO,e$o),e(H1,o$o),e(z,r$o),e(z,U1),e(U1,$ge),e($ge,t$o),e(U1,a$o),e(U1,rO),e(rO,n$o),e(U1,s$o),e(z,l$o),e(z,J1),e(J1,kge),e(kge,i$o),e(J1,d$o),e(J1,tO),e(tO,c$o),e(J1,f$o),e(z,m$o),e(z,Y1),e(Y1,Sge),e(Sge,g$o),e(Y1,h$o),e(Y1,aO),e(aO,p$o),e(Y1,_$o),e(z,u$o),e(z,K1),e(K1,Rge),e(Rge,b$o),e(K1,v$o),e(K1,nO),e(nO,F$o),e(K1,T$o),e(z,M$o),e(z,Z1),e(Z1,Pge),e(Pge,E$o),e(Z1,C$o),e(Z1,sO),e(sO,w$o),e(Z1,A$o),e(z,L$o),e(z,e2),e(e2,Bge),e(Bge,y$o),e(e2,x$o),e(e2,lO),e(lO,$$o),e(e2,k$o),e(z,S$o),e(z,o2),e(o2,Ige),e(Ige,R$o),e(o2,P$o),e(o2,iO),e(iO,B$o),e(o2,I$o),e(z,N$o),e(z,r2),e(r2,Nge),e(Nge,q$o),e(r2,j$o),e(r2,dO),e(dO,D$o),e(r2,G$o),e(z,O$o),e(z,t2),e(t2,qge),e(qge,V$o),e(t2,X$o),e(t2,cO),e(cO,z$o),e(t2,Q$o),e(z,W$o),e(z,a2),e(a2,jge),e(jge,H$o),e(a2,U$o),e(a2,fO),e(fO,J$o),e(a2,Y$o),e(z,K$o),e(z,n2),e(n2,Dge),e(Dge,Z$o),e(n2,eko),e(n2,mO),e(mO,oko),e(n2,rko),e(z,tko),e(z,s2),e(s2,Gge),e(Gge,ako),e(s2,nko),e(s2,gO),e(gO,sko),e(s2,lko),e(z,iko),e(z,l2),e(l2,Oge),e(Oge,dko),e(l2,cko),e(l2,hO),e(hO,fko),e(l2,mko),e(z,gko),e(z,i2),e(i2,Vge),e(Vge,hko),e(i2,pko),e(i2,pO),e(pO,_ko),e(i2,uko),e(z,bko),e(z,d2),e(d2,Xge),e(Xge,vko),e(d2,Fko),e(d2,_O),e(_O,Tko),e(d2,Mko),e(z,Eko),e(z,c2),e(c2,zge),e(zge,Cko),e(c2,wko),e(c2,uO),e(uO,Ako),e(c2,Lko),e(z,yko),e(z,f2),e(f2,Qge),e(Qge,xko),e(f2,$ko),e(f2,bO),e(bO,kko),e(f2,Sko),e(z,Rko),e(z,m2),e(m2,Wge),e(Wge,Pko),e(m2,Bko),e(m2,vO),e(vO,Iko),e(m2,Nko),e(z,qko),e(z,g2),e(g2,Hge),e(Hge,jko),e(g2,Dko),e(g2,FO),e(FO,Gko),e(g2,Oko),e(z,Vko),e(z,h2),e(h2,Uge),e(Uge,Xko),e(h2,zko),e(h2,TO),e(TO,Qko),e(h2,Wko),e(z,Hko),e(z,p2),e(p2,Jge),e(Jge,Uko),e(p2,Jko),e(p2,MO),e(MO,Yko),e(p2,Kko),e(z,Zko),e(z,_2),e(_2,Yge),e(Yge,eSo),e(_2,oSo),e(_2,EO),e(EO,rSo),e(_2,tSo),e(z,aSo),e(z,u2),e(u2,Kge),e(Kge,nSo),e(u2,sSo),e(u2,CO),e(CO,lSo),e(u2,iSo),e(z,dSo),e(z,b2),e(b2,Zge),e(Zge,cSo),e(b2,fSo),e(b2,wO),e(wO,mSo),e(b2,gSo),e(z,hSo),e(z,v2),e(v2,ehe),e(ehe,pSo),e(v2,_So),e(v2,AO),e(AO,uSo),e(v2,bSo),e(z,vSo),e(z,F2),e(F2,ohe),e(ohe,FSo),e(F2,TSo),e(F2,LO),e(LO,MSo),e(F2,ESo),e(z,CSo),e(z,T2),e(T2,rhe),e(rhe,wSo),e(T2,ASo),e(T2,yO),e(yO,LSo),e(T2,ySo),e(z,xSo),e(z,M2),e(M2,the),e(the,$So),e(M2,kSo),e(M2,xO),e(xO,SSo),e(M2,RSo),e(z,PSo),e(z,E2),e(E2,ahe),e(ahe,BSo),e(E2,ISo),e(E2,$O),e($O,NSo),e(E2,qSo),e(z,jSo),e(z,C2),e(C2,nhe),e(nhe,DSo),e(C2,GSo),e(C2,kO),e(kO,OSo),e(C2,VSo),e(z,XSo),e(z,w2),e(w2,she),e(she,zSo),e(w2,QSo),e(w2,SO),e(SO,WSo),e(w2,HSo),e(z,USo),e(z,A2),e(A2,lhe),e(lhe,JSo),e(A2,YSo),e(A2,RO),e(RO,KSo),e(A2,ZSo),e(z,eRo),e(z,L2),e(L2,ihe),e(ihe,oRo),e(L2,rRo),e(L2,PO),e(PO,tRo),e(L2,aRo),e(z,nRo),e(z,y2),e(y2,dhe),e(dhe,sRo),e(y2,lRo),e(y2,BO),e(BO,iRo),e(y2,dRo),e(z,cRo),e(z,x2),e(x2,che),e(che,fRo),e(x2,mRo),e(x2,IO),e(IO,gRo),e(x2,hRo),e(Ze,pRo),e(Ze,$2),e($2,_Ro),e($2,fhe),e(fhe,uRo),e($2,bRo),e($2,mhe),e(mhe,vRo),e(Ze,FRo),M(k2,Ze,null),b(f,_Xe,u),b(f,Ji,u),e(Ji,S2),e(S2,ghe),M(z7,ghe,null),e(Ji,TRo),e(Ji,hhe),e(hhe,MRo),b(f,uXe,u),b(f,Ro,u),M(Q7,Ro,null),e(Ro,ERo),e(Ro,Yi),e(Yi,CRo),e(Yi,NO),e(NO,wRo),e(Yi,ARo),e(Yi,qO),e(qO,LRo),e(Yi,yRo),e(Ro,xRo),e(Ro,W7),e(W7,$Ro),e(W7,phe),e(phe,kRo),e(W7,SRo),e(Ro,RRo),e(Ro,ft),M(H7,ft,null),e(ft,PRo),e(ft,_he),e(_he,BRo),e(ft,IRo),e(ft,Ki),e(Ki,NRo),e(Ki,uhe),e(uhe,qRo),e(Ki,jRo),e(Ki,jO),e(jO,DRo),e(Ki,GRo),e(ft,ORo),M(R2,ft,null),e(Ro,VRo),e(Ro,eo),M(U7,eo,null),e(eo,XRo),e(eo,bhe),e(bhe,zRo),e(eo,QRo),e(eo,ja),e(ja,WRo),e(ja,vhe),e(vhe,HRo),e(ja,URo),e(ja,Fhe),e(Fhe,JRo),e(ja,YRo),e(ja,The),e(The,KRo),e(ja,ZRo),e(eo,ePo),e(eo,W),e(W,P2),e(P2,Mhe),e(Mhe,oPo),e(P2,rPo),e(P2,DO),e(DO,tPo),e(P2,aPo),e(W,nPo),e(W,B2),e(B2,Ehe),e(Ehe,sPo),e(B2,lPo),e(B2,GO),e(GO,iPo),e(B2,dPo),e(W,cPo),e(W,I2),e(I2,Che),e(Che,fPo),e(I2,mPo),e(I2,OO),e(OO,gPo),e(I2,hPo),e(W,pPo),e(W,N2),e(N2,whe),e(whe,_Po),e(N2,uPo),e(N2,VO),e(VO,bPo),e(N2,vPo),e(W,FPo),e(W,q2),e(q2,Ahe),e(Ahe,TPo),e(q2,MPo),e(q2,XO),e(XO,EPo),e(q2,CPo),e(W,wPo),e(W,j2),e(j2,Lhe),e(Lhe,APo),e(j2,LPo),e(j2,zO),e(zO,yPo),e(j2,xPo),e(W,$Po),e(W,D2),e(D2,yhe),e(yhe,kPo),e(D2,SPo),e(D2,QO),e(QO,RPo),e(D2,PPo),e(W,BPo),e(W,G2),e(G2,xhe),e(xhe,IPo),e(G2,NPo),e(G2,WO),e(WO,qPo),e(G2,jPo),e(W,DPo),e(W,O2),e(O2,$he),e($he,GPo),e(O2,OPo),e(O2,HO),e(HO,VPo),e(O2,XPo),e(W,zPo),e(W,V2),e(V2,khe),e(khe,QPo),e(V2,WPo),e(V2,UO),e(UO,HPo),e(V2,UPo),e(W,JPo),e(W,X2),e(X2,She),e(She,YPo),e(X2,KPo),e(X2,JO),e(JO,ZPo),e(X2,eBo),e(W,oBo),e(W,z2),e(z2,Rhe),e(Rhe,rBo),e(z2,tBo),e(z2,YO),e(YO,aBo),e(z2,nBo),e(W,sBo),e(W,Q2),e(Q2,Phe),e(Phe,lBo),e(Q2,iBo),e(Q2,KO),e(KO,dBo),e(Q2,cBo),e(W,fBo),e(W,W2),e(W2,Bhe),e(Bhe,mBo),e(W2,gBo),e(W2,ZO),e(ZO,hBo),e(W2,pBo),e(W,_Bo),e(W,H2),e(H2,Ihe),e(Ihe,uBo),e(H2,bBo),e(H2,eV),e(eV,vBo),e(H2,FBo),e(W,TBo),e(W,U2),e(U2,Nhe),e(Nhe,MBo),e(U2,EBo),e(U2,oV),e(oV,CBo),e(U2,wBo),e(W,ABo),e(W,J2),e(J2,qhe),e(qhe,LBo),e(J2,yBo),e(J2,rV),e(rV,xBo),e(J2,$Bo),e(W,kBo),e(W,Y2),e(Y2,jhe),e(jhe,SBo),e(Y2,RBo),e(Y2,tV),e(tV,PBo),e(Y2,BBo),e(W,IBo),e(W,K2),e(K2,Dhe),e(Dhe,NBo),e(K2,qBo),e(K2,aV),e(aV,jBo),e(K2,DBo),e(W,GBo),e(W,Z2),e(Z2,Ghe),e(Ghe,OBo),e(Z2,VBo),e(Z2,nV),e(nV,XBo),e(Z2,zBo),e(W,QBo),e(W,eb),e(eb,Ohe),e(Ohe,WBo),e(eb,HBo),e(eb,sV),e(sV,UBo),e(eb,JBo),e(W,YBo),e(W,ob),e(ob,Vhe),e(Vhe,KBo),e(ob,ZBo),e(ob,lV),e(lV,eIo),e(ob,oIo),e(W,rIo),e(W,rb),e(rb,Xhe),e(Xhe,tIo),e(rb,aIo),e(rb,iV),e(iV,nIo),e(rb,sIo),e(W,lIo),e(W,tb),e(tb,zhe),e(zhe,iIo),e(tb,dIo),e(tb,dV),e(dV,cIo),e(tb,fIo),e(W,mIo),e(W,ab),e(ab,Qhe),e(Qhe,gIo),e(ab,hIo),e(ab,cV),e(cV,pIo),e(ab,_Io),e(W,uIo),e(W,nb),e(nb,Whe),e(Whe,bIo),e(nb,vIo),e(nb,fV),e(fV,FIo),e(nb,TIo),e(W,MIo),e(W,sb),e(sb,Hhe),e(Hhe,EIo),e(sb,CIo),e(sb,mV),e(mV,wIo),e(sb,AIo),e(W,LIo),e(W,lb),e(lb,Uhe),e(Uhe,yIo),e(lb,xIo),e(lb,gV),e(gV,$Io),e(lb,kIo),e(W,SIo),e(W,ib),e(ib,Jhe),e(Jhe,RIo),e(ib,PIo),e(ib,hV),e(hV,BIo),e(ib,IIo),e(W,NIo),e(W,db),e(db,Yhe),e(Yhe,qIo),e(db,jIo),e(db,pV),e(pV,DIo),e(db,GIo),e(W,OIo),e(W,cb),e(cb,Khe),e(Khe,VIo),e(cb,XIo),e(cb,_V),e(_V,zIo),e(cb,QIo),e(W,WIo),e(W,fb),e(fb,Zhe),e(Zhe,HIo),e(fb,UIo),e(fb,uV),e(uV,JIo),e(fb,YIo),e(W,KIo),e(W,mb),e(mb,epe),e(epe,ZIo),e(mb,eNo),e(mb,bV),e(bV,oNo),e(mb,rNo),e(W,tNo),e(W,gb),e(gb,ope),e(ope,aNo),e(gb,nNo),e(gb,rpe),e(rpe,sNo),e(gb,lNo),e(W,iNo),e(W,hb),e(hb,tpe),e(tpe,dNo),e(hb,cNo),e(hb,vV),e(vV,fNo),e(hb,mNo),e(W,gNo),e(W,pb),e(pb,ape),e(ape,hNo),e(pb,pNo),e(pb,FV),e(FV,_No),e(pb,uNo),e(W,bNo),e(W,_b),e(_b,npe),e(npe,vNo),e(_b,FNo),e(_b,TV),e(TV,TNo),e(_b,MNo),e(W,ENo),e(W,ub),e(ub,spe),e(spe,CNo),e(ub,wNo),e(ub,MV),e(MV,ANo),e(ub,LNo),e(eo,yNo),e(eo,bb),e(bb,xNo),e(bb,lpe),e(lpe,$No),e(bb,kNo),e(bb,ipe),e(ipe,SNo),e(eo,RNo),M(vb,eo,null),b(f,bXe,u),b(f,Zi,u),e(Zi,Fb),e(Fb,dpe),M(J7,dpe,null),e(Zi,PNo),e(Zi,cpe),e(cpe,BNo),b(f,vXe,u),b(f,Po,u),M(Y7,Po,null),e(Po,INo),e(Po,ed),e(ed,NNo),e(ed,EV),e(EV,qNo),e(ed,jNo),e(ed,CV),e(CV,DNo),e(ed,GNo),e(Po,ONo),e(Po,K7),e(K7,VNo),e(K7,fpe),e(fpe,XNo),e(K7,zNo),e(Po,QNo),e(Po,mt),M(Z7,mt,null),e(mt,WNo),e(mt,mpe),e(mpe,HNo),e(mt,UNo),e(mt,od),e(od,JNo),e(od,gpe),e(gpe,YNo),e(od,KNo),e(od,wV),e(wV,ZNo),e(od,eqo),e(mt,oqo),M(Tb,mt,null),e(Po,rqo),e(Po,oo),M(eL,oo,null),e(oo,tqo),e(oo,hpe),e(hpe,aqo),e(oo,nqo),e(oo,Da),e(Da,sqo),e(Da,ppe),e(ppe,lqo),e(Da,iqo),e(Da,_pe),e(_pe,dqo),e(Da,cqo),e(Da,upe),e(upe,fqo),e(Da,mqo),e(oo,gqo),e(oo,pe),e(pe,Mb),e(Mb,bpe),e(bpe,hqo),e(Mb,pqo),e(Mb,AV),e(AV,_qo),e(Mb,uqo),e(pe,bqo),e(pe,Eb),e(Eb,vpe),e(vpe,vqo),e(Eb,Fqo),e(Eb,LV),e(LV,Tqo),e(Eb,Mqo),e(pe,Eqo),e(pe,Cb),e(Cb,Fpe),e(Fpe,Cqo),e(Cb,wqo),e(Cb,yV),e(yV,Aqo),e(Cb,Lqo),e(pe,yqo),e(pe,wb),e(wb,Tpe),e(Tpe,xqo),e(wb,$qo),e(wb,xV),e(xV,kqo),e(wb,Sqo),e(pe,Rqo),e(pe,Ab),e(Ab,Mpe),e(Mpe,Pqo),e(Ab,Bqo),e(Ab,$V),e($V,Iqo),e(Ab,Nqo),e(pe,qqo),e(pe,Lb),e(Lb,Epe),e(Epe,jqo),e(Lb,Dqo),e(Lb,kV),e(kV,Gqo),e(Lb,Oqo),e(pe,Vqo),e(pe,yb),e(yb,Cpe),e(Cpe,Xqo),e(yb,zqo),e(yb,SV),e(SV,Qqo),e(yb,Wqo),e(pe,Hqo),e(pe,xb),e(xb,wpe),e(wpe,Uqo),e(xb,Jqo),e(xb,RV),e(RV,Yqo),e(xb,Kqo),e(pe,Zqo),e(pe,$b),e($b,Ape),e(Ape,ejo),e($b,ojo),e($b,PV),e(PV,rjo),e($b,tjo),e(pe,ajo),e(pe,kb),e(kb,Lpe),e(Lpe,njo),e(kb,sjo),e(kb,BV),e(BV,ljo),e(kb,ijo),e(pe,djo),e(pe,Sb),e(Sb,ype),e(ype,cjo),e(Sb,fjo),e(Sb,IV),e(IV,mjo),e(Sb,gjo),e(pe,hjo),e(pe,Rb),e(Rb,xpe),e(xpe,pjo),e(Rb,_jo),e(Rb,NV),e(NV,ujo),e(Rb,bjo),e(pe,vjo),e(pe,Pb),e(Pb,$pe),e($pe,Fjo),e(Pb,Tjo),e(Pb,qV),e(qV,Mjo),e(Pb,Ejo),e(pe,Cjo),e(pe,Bb),e(Bb,kpe),e(kpe,wjo),e(Bb,Ajo),e(Bb,jV),e(jV,Ljo),e(Bb,yjo),e(pe,xjo),e(pe,Ib),e(Ib,Spe),e(Spe,$jo),e(Ib,kjo),e(Ib,DV),e(DV,Sjo),e(Ib,Rjo),e(pe,Pjo),e(pe,Nb),e(Nb,Rpe),e(Rpe,Bjo),e(Nb,Ijo),e(Nb,GV),e(GV,Njo),e(Nb,qjo),e(pe,jjo),e(pe,qb),e(qb,Ppe),e(Ppe,Djo),e(qb,Gjo),e(qb,OV),e(OV,Ojo),e(qb,Vjo),e(pe,Xjo),e(pe,jb),e(jb,Bpe),e(Bpe,zjo),e(jb,Qjo),e(jb,VV),e(VV,Wjo),e(jb,Hjo),e(oo,Ujo),e(oo,Db),e(Db,Jjo),e(Db,Ipe),e(Ipe,Yjo),e(Db,Kjo),e(Db,Npe),e(Npe,Zjo),e(oo,eDo),M(Gb,oo,null),b(f,FXe,u),b(f,rd,u),e(rd,Ob),e(Ob,qpe),M(oL,qpe,null),e(rd,oDo),e(rd,jpe),e(jpe,rDo),b(f,TXe,u),b(f,Bo,u),M(rL,Bo,null),e(Bo,tDo),e(Bo,td),e(td,aDo),e(td,XV),e(XV,nDo),e(td,sDo),e(td,zV),e(zV,lDo),e(td,iDo),e(Bo,dDo),e(Bo,tL),e(tL,cDo),e(tL,Dpe),e(Dpe,fDo),e(tL,mDo),e(Bo,gDo),e(Bo,gt),M(aL,gt,null),e(gt,hDo),e(gt,Gpe),e(Gpe,pDo),e(gt,_Do),e(gt,ad),e(ad,uDo),e(ad,Ope),e(Ope,bDo),e(ad,vDo),e(ad,QV),e(QV,FDo),e(ad,TDo),e(gt,MDo),M(Vb,gt,null),e(Bo,EDo),e(Bo,ro),M(nL,ro,null),e(ro,CDo),e(ro,Vpe),e(Vpe,wDo),e(ro,ADo),e(ro,Ga),e(Ga,LDo),e(Ga,Xpe),e(Xpe,yDo),e(Ga,xDo),e(Ga,zpe),e(zpe,$Do),e(Ga,kDo),e(Ga,Qpe),e(Qpe,SDo),e(Ga,RDo),e(ro,PDo),e(ro,N),e(N,Xb),e(Xb,Wpe),e(Wpe,BDo),e(Xb,IDo),e(Xb,WV),e(WV,NDo),e(Xb,qDo),e(N,jDo),e(N,zb),e(zb,Hpe),e(Hpe,DDo),e(zb,GDo),e(zb,HV),e(HV,ODo),e(zb,VDo),e(N,XDo),e(N,Qb),e(Qb,Upe),e(Upe,zDo),e(Qb,QDo),e(Qb,UV),e(UV,WDo),e(Qb,HDo),e(N,UDo),e(N,Wb),e(Wb,Jpe),e(Jpe,JDo),e(Wb,YDo),e(Wb,JV),e(JV,KDo),e(Wb,ZDo),e(N,eGo),e(N,Hb),e(Hb,Ype),e(Ype,oGo),e(Hb,rGo),e(Hb,YV),e(YV,tGo),e(Hb,aGo),e(N,nGo),e(N,Ub),e(Ub,Kpe),e(Kpe,sGo),e(Ub,lGo),e(Ub,KV),e(KV,iGo),e(Ub,dGo),e(N,cGo),e(N,Jb),e(Jb,Zpe),e(Zpe,fGo),e(Jb,mGo),e(Jb,ZV),e(ZV,gGo),e(Jb,hGo),e(N,pGo),e(N,Yb),e(Yb,e_e),e(e_e,_Go),e(Yb,uGo),e(Yb,eX),e(eX,bGo),e(Yb,vGo),e(N,FGo),e(N,Kb),e(Kb,o_e),e(o_e,TGo),e(Kb,MGo),e(Kb,oX),e(oX,EGo),e(Kb,CGo),e(N,wGo),e(N,Zb),e(Zb,r_e),e(r_e,AGo),e(Zb,LGo),e(Zb,rX),e(rX,yGo),e(Zb,xGo),e(N,$Go),e(N,ev),e(ev,t_e),e(t_e,kGo),e(ev,SGo),e(ev,tX),e(tX,RGo),e(ev,PGo),e(N,BGo),e(N,ov),e(ov,a_e),e(a_e,IGo),e(ov,NGo),e(ov,aX),e(aX,qGo),e(ov,jGo),e(N,DGo),e(N,rv),e(rv,n_e),e(n_e,GGo),e(rv,OGo),e(rv,nX),e(nX,VGo),e(rv,XGo),e(N,zGo),e(N,tv),e(tv,s_e),e(s_e,QGo),e(tv,WGo),e(tv,sX),e(sX,HGo),e(tv,UGo),e(N,JGo),e(N,av),e(av,l_e),e(l_e,YGo),e(av,KGo),e(av,lX),e(lX,ZGo),e(av,eOo),e(N,oOo),e(N,nv),e(nv,i_e),e(i_e,rOo),e(nv,tOo),e(nv,iX),e(iX,aOo),e(nv,nOo),e(N,sOo),e(N,sv),e(sv,d_e),e(d_e,lOo),e(sv,iOo),e(sv,dX),e(dX,dOo),e(sv,cOo),e(N,fOo),e(N,lv),e(lv,c_e),e(c_e,mOo),e(lv,gOo),e(lv,cX),e(cX,hOo),e(lv,pOo),e(N,_Oo),e(N,iv),e(iv,f_e),e(f_e,uOo),e(iv,bOo),e(iv,fX),e(fX,vOo),e(iv,FOo),e(N,TOo),e(N,dv),e(dv,m_e),e(m_e,MOo),e(dv,EOo),e(dv,mX),e(mX,COo),e(dv,wOo),e(N,AOo),e(N,cv),e(cv,g_e),e(g_e,LOo),e(cv,yOo),e(cv,gX),e(gX,xOo),e(cv,$Oo),e(N,kOo),e(N,fv),e(fv,h_e),e(h_e,SOo),e(fv,ROo),e(fv,hX),e(hX,POo),e(fv,BOo),e(N,IOo),e(N,mv),e(mv,p_e),e(p_e,NOo),e(mv,qOo),e(mv,pX),e(pX,jOo),e(mv,DOo),e(N,GOo),e(N,gv),e(gv,__e),e(__e,OOo),e(gv,VOo),e(gv,_X),e(_X,XOo),e(gv,zOo),e(N,QOo),e(N,hv),e(hv,u_e),e(u_e,WOo),e(hv,HOo),e(hv,uX),e(uX,UOo),e(hv,JOo),e(N,YOo),e(N,pv),e(pv,b_e),e(b_e,KOo),e(pv,ZOo),e(pv,bX),e(bX,eVo),e(pv,oVo),e(N,rVo),e(N,_v),e(_v,v_e),e(v_e,tVo),e(_v,aVo),e(_v,vX),e(vX,nVo),e(_v,sVo),e(N,lVo),e(N,uv),e(uv,F_e),e(F_e,iVo),e(uv,dVo),e(uv,FX),e(FX,cVo),e(uv,fVo),e(N,mVo),e(N,bv),e(bv,T_e),e(T_e,gVo),e(bv,hVo),e(bv,TX),e(TX,pVo),e(bv,_Vo),e(N,uVo),e(N,vv),e(vv,M_e),e(M_e,bVo),e(vv,vVo),e(vv,MX),e(MX,FVo),e(vv,TVo),e(N,MVo),e(N,Fv),e(Fv,E_e),e(E_e,EVo),e(Fv,CVo),e(Fv,EX),e(EX,wVo),e(Fv,AVo),e(N,LVo),e(N,Tv),e(Tv,C_e),e(C_e,yVo),e(Tv,xVo),e(Tv,CX),e(CX,$Vo),e(Tv,kVo),e(N,SVo),e(N,Mv),e(Mv,w_e),e(w_e,RVo),e(Mv,PVo),e(Mv,wX),e(wX,BVo),e(Mv,IVo),e(N,NVo),e(N,Ev),e(Ev,A_e),e(A_e,qVo),e(Ev,jVo),e(Ev,AX),e(AX,DVo),e(Ev,GVo),e(N,OVo),e(N,Cv),e(Cv,L_e),e(L_e,VVo),e(Cv,XVo),e(Cv,LX),e(LX,zVo),e(Cv,QVo),e(N,WVo),e(N,wv),e(wv,y_e),e(y_e,HVo),e(wv,UVo),e(wv,yX),e(yX,JVo),e(wv,YVo),e(N,KVo),e(N,Av),e(Av,x_e),e(x_e,ZVo),e(Av,eXo),e(Av,xX),e(xX,oXo),e(Av,rXo),e(N,tXo),e(N,Lv),e(Lv,$_e),e($_e,aXo),e(Lv,nXo),e(Lv,$X),e($X,sXo),e(Lv,lXo),e(N,iXo),e(N,yv),e(yv,k_e),e(k_e,dXo),e(yv,cXo),e(yv,kX),e(kX,fXo),e(yv,mXo),e(N,gXo),e(N,xv),e(xv,S_e),e(S_e,hXo),e(xv,pXo),e(xv,SX),e(SX,_Xo),e(xv,uXo),e(N,bXo),e(N,$v),e($v,R_e),e(R_e,vXo),e($v,FXo),e($v,RX),e(RX,TXo),e($v,MXo),e(N,EXo),e(N,kv),e(kv,P_e),e(P_e,CXo),e(kv,wXo),e(kv,PX),e(PX,AXo),e(kv,LXo),e(N,yXo),e(N,Sv),e(Sv,B_e),e(B_e,xXo),e(Sv,$Xo),e(Sv,BX),e(BX,kXo),e(Sv,SXo),e(N,RXo),e(N,Rv),e(Rv,I_e),e(I_e,PXo),e(Rv,BXo),e(Rv,IX),e(IX,IXo),e(Rv,NXo),e(N,qXo),e(N,Pv),e(Pv,N_e),e(N_e,jXo),e(Pv,DXo),e(Pv,NX),e(NX,GXo),e(Pv,OXo),e(N,VXo),e(N,Bv),e(Bv,q_e),e(q_e,XXo),e(Bv,zXo),e(Bv,qX),e(qX,QXo),e(Bv,WXo),e(N,HXo),e(N,Iv),e(Iv,j_e),e(j_e,UXo),e(Iv,JXo),e(Iv,jX),e(jX,YXo),e(Iv,KXo),e(N,ZXo),e(N,Nv),e(Nv,D_e),e(D_e,ezo),e(Nv,ozo),e(Nv,DX),e(DX,rzo),e(Nv,tzo),e(N,azo),e(N,qv),e(qv,G_e),e(G_e,nzo),e(qv,szo),e(qv,GX),e(GX,lzo),e(qv,izo),e(N,dzo),e(N,jv),e(jv,O_e),e(O_e,czo),e(jv,fzo),e(jv,OX),e(OX,mzo),e(jv,gzo),e(ro,hzo),e(ro,Dv),e(Dv,pzo),e(Dv,V_e),e(V_e,_zo),e(Dv,uzo),e(Dv,X_e),e(X_e,bzo),e(ro,vzo),M(Gv,ro,null),b(f,MXe,u),b(f,nd,u),e(nd,Ov),e(Ov,z_e),M(sL,z_e,null),e(nd,Fzo),e(nd,Q_e),e(Q_e,Tzo),b(f,EXe,u),b(f,Io,u),M(lL,Io,null),e(Io,Mzo),e(Io,sd),e(sd,Ezo),e(sd,VX),e(VX,Czo),e(sd,wzo),e(sd,XX),e(XX,Azo),e(sd,Lzo),e(Io,yzo),e(Io,iL),e(iL,xzo),e(iL,W_e),e(W_e,$zo),e(iL,kzo),e(Io,Szo),e(Io,ht),M(dL,ht,null),e(ht,Rzo),e(ht,H_e),e(H_e,Pzo),e(ht,Bzo),e(ht,ld),e(ld,Izo),e(ld,U_e),e(U_e,Nzo),e(ld,qzo),e(ld,zX),e(zX,jzo),e(ld,Dzo),e(ht,Gzo),M(Vv,ht,null),e(Io,Ozo),e(Io,to),M(cL,to,null),e(to,Vzo),e(to,J_e),e(J_e,Xzo),e(to,zzo),e(to,Oa),e(Oa,Qzo),e(Oa,Y_e),e(Y_e,Wzo),e(Oa,Hzo),e(Oa,K_e),e(K_e,Uzo),e(Oa,Jzo),e(Oa,Z_e),e(Z_e,Yzo),e(Oa,Kzo),e(to,Zzo),e(to,Z),e(Z,Xv),e(Xv,eue),e(eue,eQo),e(Xv,oQo),e(Xv,QX),e(QX,rQo),e(Xv,tQo),e(Z,aQo),e(Z,zv),e(zv,oue),e(oue,nQo),e(zv,sQo),e(zv,WX),e(WX,lQo),e(zv,iQo),e(Z,dQo),e(Z,Qv),e(Qv,rue),e(rue,cQo),e(Qv,fQo),e(Qv,HX),e(HX,mQo),e(Qv,gQo),e(Z,hQo),e(Z,Wv),e(Wv,tue),e(tue,pQo),e(Wv,_Qo),e(Wv,UX),e(UX,uQo),e(Wv,bQo),e(Z,vQo),e(Z,Hv),e(Hv,aue),e(aue,FQo),e(Hv,TQo),e(Hv,JX),e(JX,MQo),e(Hv,EQo),e(Z,CQo),e(Z,Uv),e(Uv,nue),e(nue,wQo),e(Uv,AQo),e(Uv,YX),e(YX,LQo),e(Uv,yQo),e(Z,xQo),e(Z,Jv),e(Jv,sue),e(sue,$Qo),e(Jv,kQo),e(Jv,KX),e(KX,SQo),e(Jv,RQo),e(Z,PQo),e(Z,Yv),e(Yv,lue),e(lue,BQo),e(Yv,IQo),e(Yv,ZX),e(ZX,NQo),e(Yv,qQo),e(Z,jQo),e(Z,Kv),e(Kv,iue),e(iue,DQo),e(Kv,GQo),e(Kv,ez),e(ez,OQo),e(Kv,VQo),e(Z,XQo),e(Z,Zv),e(Zv,due),e(due,zQo),e(Zv,QQo),e(Zv,oz),e(oz,WQo),e(Zv,HQo),e(Z,UQo),e(Z,eF),e(eF,cue),e(cue,JQo),e(eF,YQo),e(eF,rz),e(rz,KQo),e(eF,ZQo),e(Z,eWo),e(Z,oF),e(oF,fue),e(fue,oWo),e(oF,rWo),e(oF,tz),e(tz,tWo),e(oF,aWo),e(Z,nWo),e(Z,rF),e(rF,mue),e(mue,sWo),e(rF,lWo),e(rF,az),e(az,iWo),e(rF,dWo),e(Z,cWo),e(Z,tF),e(tF,gue),e(gue,fWo),e(tF,mWo),e(tF,nz),e(nz,gWo),e(tF,hWo),e(Z,pWo),e(Z,aF),e(aF,hue),e(hue,_Wo),e(aF,uWo),e(aF,sz),e(sz,bWo),e(aF,vWo),e(Z,FWo),e(Z,nF),e(nF,pue),e(pue,TWo),e(nF,MWo),e(nF,lz),e(lz,EWo),e(nF,CWo),e(Z,wWo),e(Z,sF),e(sF,_ue),e(_ue,AWo),e(sF,LWo),e(sF,iz),e(iz,yWo),e(sF,xWo),e(Z,$Wo),e(Z,lF),e(lF,uue),e(uue,kWo),e(lF,SWo),e(lF,dz),e(dz,RWo),e(lF,PWo),e(Z,BWo),e(Z,iF),e(iF,bue),e(bue,IWo),e(iF,NWo),e(iF,cz),e(cz,qWo),e(iF,jWo),e(Z,DWo),e(Z,dF),e(dF,vue),e(vue,GWo),e(dF,OWo),e(dF,fz),e(fz,VWo),e(dF,XWo),e(Z,zWo),e(Z,cF),e(cF,Fue),e(Fue,QWo),e(cF,WWo),e(cF,mz),e(mz,HWo),e(cF,UWo),e(Z,JWo),e(Z,fF),e(fF,Tue),e(Tue,YWo),e(fF,KWo),e(fF,gz),e(gz,ZWo),e(fF,eHo),e(Z,oHo),e(Z,mF),e(mF,Mue),e(Mue,rHo),e(mF,tHo),e(mF,hz),e(hz,aHo),e(mF,nHo),e(Z,sHo),e(Z,gF),e(gF,Eue),e(Eue,lHo),e(gF,iHo),e(gF,pz),e(pz,dHo),e(gF,cHo),e(Z,fHo),e(Z,hF),e(hF,Cue),e(Cue,mHo),e(hF,gHo),e(hF,_z),e(_z,hHo),e(hF,pHo),e(Z,_Ho),e(Z,pF),e(pF,wue),e(wue,uHo),e(pF,bHo),e(pF,uz),e(uz,vHo),e(pF,FHo),e(Z,THo),e(Z,_F),e(_F,Aue),e(Aue,MHo),e(_F,EHo),e(_F,bz),e(bz,CHo),e(_F,wHo),e(Z,AHo),e(Z,uF),e(uF,Lue),e(Lue,LHo),e(uF,yHo),e(uF,vz),e(vz,xHo),e(uF,$Ho),e(Z,kHo),e(Z,bF),e(bF,yue),e(yue,SHo),e(bF,RHo),e(bF,Fz),e(Fz,PHo),e(bF,BHo),e(Z,IHo),e(Z,vF),e(vF,xue),e(xue,NHo),e(vF,qHo),e(vF,Tz),e(Tz,jHo),e(vF,DHo),e(to,GHo),e(to,FF),e(FF,OHo),e(FF,$ue),e($ue,VHo),e(FF,XHo),e(FF,kue),e(kue,zHo),e(to,QHo),M(TF,to,null),b(f,CXe,u),b(f,id,u),e(id,MF),e(MF,Sue),M(fL,Sue,null),e(id,WHo),e(id,Rue),e(Rue,HHo),b(f,wXe,u),b(f,No,u),M(mL,No,null),e(No,UHo),e(No,dd),e(dd,JHo),e(dd,Mz),e(Mz,YHo),e(dd,KHo),e(dd,Ez),e(Ez,ZHo),e(dd,eUo),e(No,oUo),e(No,gL),e(gL,rUo),e(gL,Pue),e(Pue,tUo),e(gL,aUo),e(No,nUo),e(No,pt),M(hL,pt,null),e(pt,sUo),e(pt,Bue),e(Bue,lUo),e(pt,iUo),e(pt,cd),e(cd,dUo),e(cd,Iue),e(Iue,cUo),e(cd,fUo),e(cd,Cz),e(Cz,mUo),e(cd,gUo),e(pt,hUo),M(EF,pt,null),e(No,pUo),e(No,ao),M(pL,ao,null),e(ao,_Uo),e(ao,Nue),e(Nue,uUo),e(ao,bUo),e(ao,Va),e(Va,vUo),e(Va,que),e(que,FUo),e(Va,TUo),e(Va,jue),e(jue,MUo),e(Va,EUo),e(Va,Due),e(Due,CUo),e(Va,wUo),e(ao,AUo),e(ao,qo),e(qo,CF),e(CF,Gue),e(Gue,LUo),e(CF,yUo),e(CF,wz),e(wz,xUo),e(CF,$Uo),e(qo,kUo),e(qo,wF),e(wF,Oue),e(Oue,SUo),e(wF,RUo),e(wF,Az),e(Az,PUo),e(wF,BUo),e(qo,IUo),e(qo,AF),e(AF,Vue),e(Vue,NUo),e(AF,qUo),e(AF,Lz),e(Lz,jUo),e(AF,DUo),e(qo,GUo),e(qo,LF),e(LF,Xue),e(Xue,OUo),e(LF,VUo),e(LF,yz),e(yz,XUo),e(LF,zUo),e(qo,QUo),e(qo,yF),e(yF,zue),e(zue,WUo),e(yF,HUo),e(yF,xz),e(xz,UUo),e(yF,JUo),e(qo,YUo),e(qo,xF),e(xF,Que),e(Que,KUo),e(xF,ZUo),e(xF,$z),e($z,eJo),e(xF,oJo),e(ao,rJo),e(ao,$F),e($F,tJo),e($F,Wue),e(Wue,aJo),e($F,nJo),e($F,Hue),e(Hue,sJo),e(ao,lJo),M(kF,ao,null),b(f,AXe,u),b(f,fd,u),e(fd,SF),e(SF,Uue),M(_L,Uue,null),e(fd,iJo),e(fd,Jue),e(Jue,dJo),b(f,LXe,u),b(f,jo,u),M(uL,jo,null),e(jo,cJo),e(jo,md),e(md,fJo),e(md,kz),e(kz,mJo),e(md,gJo),e(md,Sz),e(Sz,hJo),e(md,pJo),e(jo,_Jo),e(jo,bL),e(bL,uJo),e(bL,Yue),e(Yue,bJo),e(bL,vJo),e(jo,FJo),e(jo,_t),M(vL,_t,null),e(_t,TJo),e(_t,Kue),e(Kue,MJo),e(_t,EJo),e(_t,gd),e(gd,CJo),e(gd,Zue),e(Zue,wJo),e(gd,AJo),e(gd,Rz),e(Rz,LJo),e(gd,yJo),e(_t,xJo),M(RF,_t,null),e(jo,$Jo),e(jo,no),M(FL,no,null),e(no,kJo),e(no,e1e),e(e1e,SJo),e(no,RJo),e(no,Xa),e(Xa,PJo),e(Xa,o1e),e(o1e,BJo),e(Xa,IJo),e(Xa,r1e),e(r1e,NJo),e(Xa,qJo),e(Xa,t1e),e(t1e,jJo),e(Xa,DJo),e(no,GJo),e(no,U),e(U,PF),e(PF,a1e),e(a1e,OJo),e(PF,VJo),e(PF,Pz),e(Pz,XJo),e(PF,zJo),e(U,QJo),e(U,BF),e(BF,n1e),e(n1e,WJo),e(BF,HJo),e(BF,Bz),e(Bz,UJo),e(BF,JJo),e(U,YJo),e(U,IF),e(IF,s1e),e(s1e,KJo),e(IF,ZJo),e(IF,Iz),e(Iz,eYo),e(IF,oYo),e(U,rYo),e(U,NF),e(NF,l1e),e(l1e,tYo),e(NF,aYo),e(NF,Nz),e(Nz,nYo),e(NF,sYo),e(U,lYo),e(U,qF),e(qF,i1e),e(i1e,iYo),e(qF,dYo),e(qF,qz),e(qz,cYo),e(qF,fYo),e(U,mYo),e(U,jF),e(jF,d1e),e(d1e,gYo),e(jF,hYo),e(jF,jz),e(jz,pYo),e(jF,_Yo),e(U,uYo),e(U,DF),e(DF,c1e),e(c1e,bYo),e(DF,vYo),e(DF,Dz),e(Dz,FYo),e(DF,TYo),e(U,MYo),e(U,GF),e(GF,f1e),e(f1e,EYo),e(GF,CYo),e(GF,Gz),e(Gz,wYo),e(GF,AYo),e(U,LYo),e(U,OF),e(OF,m1e),e(m1e,yYo),e(OF,xYo),e(OF,Oz),e(Oz,$Yo),e(OF,kYo),e(U,SYo),e(U,VF),e(VF,g1e),e(g1e,RYo),e(VF,PYo),e(VF,Vz),e(Vz,BYo),e(VF,IYo),e(U,NYo),e(U,XF),e(XF,h1e),e(h1e,qYo),e(XF,jYo),e(XF,Xz),e(Xz,DYo),e(XF,GYo),e(U,OYo),e(U,zF),e(zF,p1e),e(p1e,VYo),e(zF,XYo),e(zF,zz),e(zz,zYo),e(zF,QYo),e(U,WYo),e(U,QF),e(QF,_1e),e(_1e,HYo),e(QF,UYo),e(QF,Qz),e(Qz,JYo),e(QF,YYo),e(U,KYo),e(U,WF),e(WF,u1e),e(u1e,ZYo),e(WF,eKo),e(WF,Wz),e(Wz,oKo),e(WF,rKo),e(U,tKo),e(U,HF),e(HF,b1e),e(b1e,aKo),e(HF,nKo),e(HF,Hz),e(Hz,sKo),e(HF,lKo),e(U,iKo),e(U,UF),e(UF,v1e),e(v1e,dKo),e(UF,cKo),e(UF,Uz),e(Uz,fKo),e(UF,mKo),e(U,gKo),e(U,JF),e(JF,F1e),e(F1e,hKo),e(JF,pKo),e(JF,Jz),e(Jz,_Ko),e(JF,uKo),e(U,bKo),e(U,YF),e(YF,T1e),e(T1e,vKo),e(YF,FKo),e(YF,Yz),e(Yz,TKo),e(YF,MKo),e(U,EKo),e(U,KF),e(KF,M1e),e(M1e,CKo),e(KF,wKo),e(KF,Kz),e(Kz,AKo),e(KF,LKo),e(U,yKo),e(U,ZF),e(ZF,E1e),e(E1e,xKo),e(ZF,$Ko),e(ZF,Zz),e(Zz,kKo),e(ZF,SKo),e(U,RKo),e(U,e6),e(e6,C1e),e(C1e,PKo),e(e6,BKo),e(e6,eQ),e(eQ,IKo),e(e6,NKo),e(U,qKo),e(U,o6),e(o6,w1e),e(w1e,jKo),e(o6,DKo),e(o6,oQ),e(oQ,GKo),e(o6,OKo),e(U,VKo),e(U,r6),e(r6,A1e),e(A1e,XKo),e(r6,zKo),e(r6,rQ),e(rQ,QKo),e(r6,WKo),e(U,HKo),e(U,t6),e(t6,L1e),e(L1e,UKo),e(t6,JKo),e(t6,tQ),e(tQ,YKo),e(t6,KKo),e(U,ZKo),e(U,a6),e(a6,y1e),e(y1e,eZo),e(a6,oZo),e(a6,aQ),e(aQ,rZo),e(a6,tZo),e(U,aZo),e(U,n6),e(n6,x1e),e(x1e,nZo),e(n6,sZo),e(n6,nQ),e(nQ,lZo),e(n6,iZo),e(U,dZo),e(U,s6),e(s6,$1e),e($1e,cZo),e(s6,fZo),e(s6,sQ),e(sQ,mZo),e(s6,gZo),e(U,hZo),e(U,l6),e(l6,k1e),e(k1e,pZo),e(l6,_Zo),e(l6,lQ),e(lQ,uZo),e(l6,bZo),e(U,vZo),e(U,i6),e(i6,S1e),e(S1e,FZo),e(i6,TZo),e(i6,iQ),e(iQ,MZo),e(i6,EZo),e(U,CZo),e(U,d6),e(d6,R1e),e(R1e,wZo),e(d6,AZo),e(d6,dQ),e(dQ,LZo),e(d6,yZo),e(U,xZo),e(U,c6),e(c6,P1e),e(P1e,$Zo),e(c6,kZo),e(c6,cQ),e(cQ,SZo),e(c6,RZo),e(U,PZo),e(U,f6),e(f6,B1e),e(B1e,BZo),e(f6,IZo),e(f6,fQ),e(fQ,NZo),e(f6,qZo),e(U,jZo),e(U,m6),e(m6,I1e),e(I1e,DZo),e(m6,GZo),e(m6,mQ),e(mQ,OZo),e(m6,VZo),e(U,XZo),e(U,g6),e(g6,N1e),e(N1e,zZo),e(g6,QZo),e(g6,gQ),e(gQ,WZo),e(g6,HZo),e(U,UZo),e(U,h6),e(h6,q1e),e(q1e,JZo),e(h6,YZo),e(h6,hQ),e(hQ,KZo),e(h6,ZZo),e(U,eer),e(U,p6),e(p6,j1e),e(j1e,oer),e(p6,rer),e(p6,pQ),e(pQ,ter),e(p6,aer),e(no,ner),e(no,_6),e(_6,ser),e(_6,D1e),e(D1e,ler),e(_6,ier),e(_6,G1e),e(G1e,der),e(no,cer),M(u6,no,null),b(f,yXe,u),b(f,hd,u),e(hd,b6),e(b6,O1e),M(TL,O1e,null),e(hd,fer),e(hd,V1e),e(V1e,mer),b(f,xXe,u),b(f,Do,u),M(ML,Do,null),e(Do,ger),e(Do,pd),e(pd,her),e(pd,_Q),e(_Q,per),e(pd,_er),e(pd,uQ),e(uQ,uer),e(pd,ber),e(Do,ver),e(Do,EL),e(EL,Fer),e(EL,X1e),e(X1e,Ter),e(EL,Mer),e(Do,Eer),e(Do,ut),M(CL,ut,null),e(ut,Cer),e(ut,z1e),e(z1e,wer),e(ut,Aer),e(ut,_d),e(_d,Ler),e(_d,Q1e),e(Q1e,yer),e(_d,xer),e(_d,bQ),e(bQ,$er),e(_d,ker),e(ut,Ser),M(v6,ut,null),e(Do,Rer),e(Do,so),M(wL,so,null),e(so,Per),e(so,W1e),e(W1e,Ber),e(so,Ier),e(so,za),e(za,Ner),e(za,H1e),e(H1e,qer),e(za,jer),e(za,U1e),e(U1e,Der),e(za,Ger),e(za,J1e),e(J1e,Oer),e(za,Ver),e(so,Xer),e(so,V),e(V,F6),e(F6,Y1e),e(Y1e,zer),e(F6,Qer),e(F6,vQ),e(vQ,Wer),e(F6,Her),e(V,Uer),e(V,T6),e(T6,K1e),e(K1e,Jer),e(T6,Yer),e(T6,FQ),e(FQ,Ker),e(T6,Zer),e(V,eor),e(V,M6),e(M6,Z1e),e(Z1e,oor),e(M6,ror),e(M6,TQ),e(TQ,tor),e(M6,aor),e(V,nor),e(V,E6),e(E6,e2e),e(e2e,sor),e(E6,lor),e(E6,MQ),e(MQ,ior),e(E6,dor),e(V,cor),e(V,C6),e(C6,o2e),e(o2e,mor),e(C6,gor),e(C6,EQ),e(EQ,hor),e(C6,por),e(V,_or),e(V,w6),e(w6,r2e),e(r2e,uor),e(w6,bor),e(w6,CQ),e(CQ,vor),e(w6,For),e(V,Tor),e(V,A6),e(A6,t2e),e(t2e,Mor),e(A6,Eor),e(A6,wQ),e(wQ,Cor),e(A6,wor),e(V,Aor),e(V,L6),e(L6,a2e),e(a2e,Lor),e(L6,yor),e(L6,AQ),e(AQ,xor),e(L6,$or),e(V,kor),e(V,y6),e(y6,n2e),e(n2e,Sor),e(y6,Ror),e(y6,LQ),e(LQ,Por),e(y6,Bor),e(V,Ior),e(V,x6),e(x6,s2e),e(s2e,Nor),e(x6,qor),e(x6,yQ),e(yQ,jor),e(x6,Dor),e(V,Gor),e(V,$6),e($6,l2e),e(l2e,Oor),e($6,Vor),e($6,xQ),e(xQ,Xor),e($6,zor),e(V,Qor),e(V,k6),e(k6,i2e),e(i2e,Wor),e(k6,Hor),e(k6,$Q),e($Q,Uor),e(k6,Jor),e(V,Yor),e(V,S6),e(S6,d2e),e(d2e,Kor),e(S6,Zor),e(S6,kQ),e(kQ,err),e(S6,orr),e(V,rrr),e(V,R6),e(R6,c2e),e(c2e,trr),e(R6,arr),e(R6,SQ),e(SQ,nrr),e(R6,srr),e(V,lrr),e(V,P6),e(P6,f2e),e(f2e,irr),e(P6,drr),e(P6,RQ),e(RQ,crr),e(P6,frr),e(V,mrr),e(V,B6),e(B6,m2e),e(m2e,grr),e(B6,hrr),e(B6,PQ),e(PQ,prr),e(B6,_rr),e(V,urr),e(V,I6),e(I6,g2e),e(g2e,brr),e(I6,vrr),e(I6,BQ),e(BQ,Frr),e(I6,Trr),e(V,Mrr),e(V,N6),e(N6,h2e),e(h2e,Err),e(N6,Crr),e(N6,IQ),e(IQ,wrr),e(N6,Arr),e(V,Lrr),e(V,q6),e(q6,p2e),e(p2e,yrr),e(q6,xrr),e(q6,NQ),e(NQ,$rr),e(q6,krr),e(V,Srr),e(V,j6),e(j6,_2e),e(_2e,Rrr),e(j6,Prr),e(j6,qQ),e(qQ,Brr),e(j6,Irr),e(V,Nrr),e(V,D6),e(D6,u2e),e(u2e,qrr),e(D6,jrr),e(D6,jQ),e(jQ,Drr),e(D6,Grr),e(V,Orr),e(V,G6),e(G6,b2e),e(b2e,Vrr),e(G6,Xrr),e(G6,DQ),e(DQ,zrr),e(G6,Qrr),e(V,Wrr),e(V,O6),e(O6,v2e),e(v2e,Hrr),e(O6,Urr),e(O6,GQ),e(GQ,Jrr),e(O6,Yrr),e(V,Krr),e(V,V6),e(V6,F2e),e(F2e,Zrr),e(V6,etr),e(V6,OQ),e(OQ,otr),e(V6,rtr),e(V,ttr),e(V,X6),e(X6,T2e),e(T2e,atr),e(X6,ntr),e(X6,VQ),e(VQ,str),e(X6,ltr),e(V,itr),e(V,z6),e(z6,M2e),e(M2e,dtr),e(z6,ctr),e(z6,XQ),e(XQ,ftr),e(z6,mtr),e(V,gtr),e(V,Q6),e(Q6,E2e),e(E2e,htr),e(Q6,ptr),e(Q6,zQ),e(zQ,_tr),e(Q6,utr),e(V,btr),e(V,W6),e(W6,C2e),e(C2e,vtr),e(W6,Ftr),e(W6,QQ),e(QQ,Ttr),e(W6,Mtr),e(V,Etr),e(V,H6),e(H6,w2e),e(w2e,Ctr),e(H6,wtr),e(H6,WQ),e(WQ,Atr),e(H6,Ltr),e(V,ytr),e(V,U6),e(U6,A2e),e(A2e,xtr),e(U6,$tr),e(U6,HQ),e(HQ,ktr),e(U6,Str),e(V,Rtr),e(V,J6),e(J6,L2e),e(L2e,Ptr),e(J6,Btr),e(J6,UQ),e(UQ,Itr),e(J6,Ntr),e(V,qtr),e(V,Y6),e(Y6,y2e),e(y2e,jtr),e(Y6,Dtr),e(Y6,JQ),e(JQ,Gtr),e(Y6,Otr),e(V,Vtr),e(V,K6),e(K6,x2e),e(x2e,Xtr),e(K6,ztr),e(K6,YQ),e(YQ,Qtr),e(K6,Wtr),e(V,Htr),e(V,Z6),e(Z6,$2e),e($2e,Utr),e(Z6,Jtr),e(Z6,KQ),e(KQ,Ytr),e(Z6,Ktr),e(V,Ztr),e(V,eT),e(eT,k2e),e(k2e,ear),e(eT,oar),e(eT,ZQ),e(ZQ,rar),e(eT,tar),e(V,aar),e(V,oT),e(oT,S2e),e(S2e,nar),e(oT,sar),e(oT,eW),e(eW,lar),e(oT,iar),e(V,dar),e(V,rT),e(rT,R2e),e(R2e,car),e(rT,far),e(rT,oW),e(oW,mar),e(rT,gar),e(V,har),e(V,tT),e(tT,P2e),e(P2e,par),e(tT,_ar),e(tT,rW),e(rW,uar),e(tT,bar),e(V,Far),e(V,aT),e(aT,B2e),e(B2e,Tar),e(aT,Mar),e(aT,tW),e(tW,Ear),e(aT,Car),e(V,war),e(V,nT),e(nT,I2e),e(I2e,Aar),e(nT,Lar),e(nT,aW),e(aW,yar),e(nT,xar),e(V,$ar),e(V,sT),e(sT,N2e),e(N2e,kar),e(sT,Sar),e(sT,nW),e(nW,Rar),e(sT,Par),e(V,Bar),e(V,lT),e(lT,q2e),e(q2e,Iar),e(lT,Nar),e(lT,sW),e(sW,qar),e(lT,jar),e(so,Dar),e(so,iT),e(iT,Gar),e(iT,j2e),e(j2e,Oar),e(iT,Var),e(iT,D2e),e(D2e,Xar),e(so,zar),M(dT,so,null),b(f,$Xe,u),b(f,ud,u),e(ud,cT),e(cT,G2e),M(AL,G2e,null),e(ud,Qar),e(ud,O2e),e(O2e,War),b(f,kXe,u),b(f,Go,u),M(LL,Go,null),e(Go,Har),e(Go,bd),e(bd,Uar),e(bd,lW),e(lW,Jar),e(bd,Yar),e(bd,iW),e(iW,Kar),e(bd,Zar),e(Go,enr),e(Go,yL),e(yL,onr),e(yL,V2e),e(V2e,rnr),e(yL,tnr),e(Go,anr),e(Go,bt),M(xL,bt,null),e(bt,nnr),e(bt,X2e),e(X2e,snr),e(bt,lnr),e(bt,vd),e(vd,inr),e(vd,z2e),e(z2e,dnr),e(vd,cnr),e(vd,dW),e(dW,fnr),e(vd,mnr),e(bt,gnr),M(fT,bt,null),e(Go,hnr),e(Go,lo),M($L,lo,null),e(lo,pnr),e(lo,Q2e),e(Q2e,_nr),e(lo,unr),e(lo,Qa),e(Qa,bnr),e(Qa,W2e),e(W2e,vnr),e(Qa,Fnr),e(Qa,H2e),e(H2e,Tnr),e(Qa,Mnr),e(Qa,U2e),e(U2e,Enr),e(Qa,Cnr),e(lo,wnr),e(lo,J2e),e(J2e,mT),e(mT,Y2e),e(Y2e,Anr),e(mT,Lnr),e(mT,cW),e(cW,ynr),e(mT,xnr),e(lo,$nr),e(lo,gT),e(gT,knr),e(gT,K2e),e(K2e,Snr),e(gT,Rnr),e(gT,Z2e),e(Z2e,Pnr),e(lo,Bnr),M(hT,lo,null),b(f,SXe,u),b(f,Fd,u),e(Fd,pT),e(pT,ebe),M(kL,ebe,null),e(Fd,Inr),e(Fd,obe),e(obe,Nnr),b(f,RXe,u),b(f,Oo,u),M(SL,Oo,null),e(Oo,qnr),e(Oo,Td),e(Td,jnr),e(Td,fW),e(fW,Dnr),e(Td,Gnr),e(Td,mW),e(mW,Onr),e(Td,Vnr),e(Oo,Xnr),e(Oo,RL),e(RL,znr),e(RL,rbe),e(rbe,Qnr),e(RL,Wnr),e(Oo,Hnr),e(Oo,vt),M(PL,vt,null),e(vt,Unr),e(vt,tbe),e(tbe,Jnr),e(vt,Ynr),e(vt,Md),e(Md,Knr),e(Md,abe),e(abe,Znr),e(Md,esr),e(Md,gW),e(gW,osr),e(Md,rsr),e(vt,tsr),M(_T,vt,null),e(Oo,asr),e(Oo,io),M(BL,io,null),e(io,nsr),e(io,nbe),e(nbe,ssr),e(io,lsr),e(io,Wa),e(Wa,isr),e(Wa,sbe),e(sbe,dsr),e(Wa,csr),e(Wa,lbe),e(lbe,fsr),e(Wa,msr),e(Wa,ibe),e(ibe,gsr),e(Wa,hsr),e(io,psr),e(io,ve),e(ve,uT),e(uT,dbe),e(dbe,_sr),e(uT,usr),e(uT,hW),e(hW,bsr),e(uT,vsr),e(ve,Fsr),e(ve,bT),e(bT,cbe),e(cbe,Tsr),e(bT,Msr),e(bT,pW),e(pW,Esr),e(bT,Csr),e(ve,wsr),e(ve,vT),e(vT,fbe),e(fbe,Asr),e(vT,Lsr),e(vT,_W),e(_W,ysr),e(vT,xsr),e(ve,$sr),e(ve,FT),e(FT,mbe),e(mbe,ksr),e(FT,Ssr),e(FT,uW),e(uW,Rsr),e(FT,Psr),e(ve,Bsr),e(ve,Hs),e(Hs,gbe),e(gbe,Isr),e(Hs,Nsr),e(Hs,bW),e(bW,qsr),e(Hs,jsr),e(Hs,vW),e(vW,Dsr),e(Hs,Gsr),e(ve,Osr),e(ve,TT),e(TT,hbe),e(hbe,Vsr),e(TT,Xsr),e(TT,FW),e(FW,zsr),e(TT,Qsr),e(ve,Wsr),e(ve,Us),e(Us,pbe),e(pbe,Hsr),e(Us,Usr),e(Us,TW),e(TW,Jsr),e(Us,Ysr),e(Us,MW),e(MW,Ksr),e(Us,Zsr),e(ve,elr),e(ve,MT),e(MT,_be),e(_be,olr),e(MT,rlr),e(MT,EW),e(EW,tlr),e(MT,alr),e(ve,nlr),e(ve,Ft),e(Ft,ube),e(ube,slr),e(Ft,llr),e(Ft,CW),e(CW,ilr),e(Ft,dlr),e(Ft,wW),e(wW,clr),e(Ft,flr),e(Ft,AW),e(AW,mlr),e(Ft,glr),e(ve,hlr),e(ve,ET),e(ET,bbe),e(bbe,plr),e(ET,_lr),e(ET,LW),e(LW,ulr),e(ET,blr),e(ve,vlr),e(ve,CT),e(CT,vbe),e(vbe,Flr),e(CT,Tlr),e(CT,yW),e(yW,Mlr),e(CT,Elr),e(ve,Clr),e(ve,wT),e(wT,Fbe),e(Fbe,wlr),e(wT,Alr),e(wT,xW),e(xW,Llr),e(wT,ylr),e(ve,xlr),e(ve,AT),e(AT,Tbe),e(Tbe,$lr),e(AT,klr),e(AT,$W),e($W,Slr),e(AT,Rlr),e(ve,Plr),e(ve,LT),e(LT,Mbe),e(Mbe,Blr),e(LT,Ilr),e(LT,kW),e(kW,Nlr),e(LT,qlr),e(ve,jlr),e(ve,yT),e(yT,Ebe),e(Ebe,Dlr),e(yT,Glr),e(yT,SW),e(SW,Olr),e(yT,Vlr),e(ve,Xlr),e(ve,xT),e(xT,Cbe),e(Cbe,zlr),e(xT,Qlr),e(xT,RW),e(RW,Wlr),e(xT,Hlr),e(io,Ulr),e(io,$T),e($T,Jlr),e($T,wbe),e(wbe,Ylr),e($T,Klr),e($T,Abe),e(Abe,Zlr),e(io,eir),M(kT,io,null),b(f,PXe,u),b(f,Ed,u),e(Ed,ST),e(ST,Lbe),M(IL,Lbe,null),e(Ed,oir),e(Ed,ybe),e(ybe,rir),b(f,BXe,u),b(f,Vo,u),M(NL,Vo,null),e(Vo,tir),e(Vo,Cd),e(Cd,air),e(Cd,PW),e(PW,nir),e(Cd,sir),e(Cd,BW),e(BW,lir),e(Cd,iir),e(Vo,dir),e(Vo,qL),e(qL,cir),e(qL,xbe),e(xbe,fir),e(qL,mir),e(Vo,gir),e(Vo,Tt),M(jL,Tt,null),e(Tt,hir),e(Tt,$be),e($be,pir),e(Tt,_ir),e(Tt,wd),e(wd,uir),e(wd,kbe),e(kbe,bir),e(wd,vir),e(wd,IW),e(IW,Fir),e(wd,Tir),e(Tt,Mir),M(RT,Tt,null),e(Vo,Eir),e(Vo,co),M(DL,co,null),e(co,Cir),e(co,Sbe),e(Sbe,wir),e(co,Air),e(co,Ha),e(Ha,Lir),e(Ha,Rbe),e(Rbe,yir),e(Ha,xir),e(Ha,Pbe),e(Pbe,$ir),e(Ha,kir),e(Ha,Bbe),e(Bbe,Sir),e(Ha,Rir),e(co,Pir),e(co,Ibe),e(Ibe,PT),e(PT,Nbe),e(Nbe,Bir),e(PT,Iir),e(PT,NW),e(NW,Nir),e(PT,qir),e(co,jir),e(co,BT),e(BT,Dir),e(BT,qbe),e(qbe,Gir),e(BT,Oir),e(BT,jbe),e(jbe,Vir),e(co,Xir),M(IT,co,null),b(f,IXe,u),b(f,Ad,u),e(Ad,NT),e(NT,Dbe),M(GL,Dbe,null),e(Ad,zir),e(Ad,Gbe),e(Gbe,Qir),b(f,NXe,u),b(f,Xo,u),M(OL,Xo,null),e(Xo,Wir),e(Xo,Ld),e(Ld,Hir),e(Ld,qW),e(qW,Uir),e(Ld,Jir),e(Ld,jW),e(jW,Yir),e(Ld,Kir),e(Xo,Zir),e(Xo,VL),e(VL,edr),e(VL,Obe),e(Obe,odr),e(VL,rdr),e(Xo,tdr),e(Xo,Mt),M(XL,Mt,null),e(Mt,adr),e(Mt,Vbe),e(Vbe,ndr),e(Mt,sdr),e(Mt,yd),e(yd,ldr),e(yd,Xbe),e(Xbe,idr),e(yd,ddr),e(yd,DW),e(DW,cdr),e(yd,fdr),e(Mt,mdr),M(qT,Mt,null),e(Xo,gdr),e(Xo,fo),M(zL,fo,null),e(fo,hdr),e(fo,zbe),e(zbe,pdr),e(fo,_dr),e(fo,Ua),e(Ua,udr),e(Ua,Qbe),e(Qbe,bdr),e(Ua,vdr),e(Ua,Wbe),e(Wbe,Fdr),e(Ua,Tdr),e(Ua,Hbe),e(Hbe,Mdr),e(Ua,Edr),e(fo,Cdr),e(fo,Ube),e(Ube,jT),e(jT,Jbe),e(Jbe,wdr),e(jT,Adr),e(jT,GW),e(GW,Ldr),e(jT,ydr),e(fo,xdr),e(fo,DT),e(DT,$dr),e(DT,Ybe),e(Ybe,kdr),e(DT,Sdr),e(DT,Kbe),e(Kbe,Rdr),e(fo,Pdr),M(GT,fo,null),b(f,qXe,u),b(f,xd,u),e(xd,OT),e(OT,Zbe),M(QL,Zbe,null),e(xd,Bdr),e(xd,eve),e(eve,Idr),b(f,jXe,u),b(f,zo,u),M(WL,zo,null),e(zo,Ndr),e(zo,$d),e($d,qdr),e($d,OW),e(OW,jdr),e($d,Ddr),e($d,VW),e(VW,Gdr),e($d,Odr),e(zo,Vdr),e(zo,HL),e(HL,Xdr),e(HL,ove),e(ove,zdr),e(HL,Qdr),e(zo,Wdr),e(zo,Et),M(UL,Et,null),e(Et,Hdr),e(Et,rve),e(rve,Udr),e(Et,Jdr),e(Et,kd),e(kd,Ydr),e(kd,tve),e(tve,Kdr),e(kd,Zdr),e(kd,XW),e(XW,ecr),e(kd,ocr),e(Et,rcr),M(VT,Et,null),e(zo,tcr),e(zo,mo),M(JL,mo,null),e(mo,acr),e(mo,ave),e(ave,ncr),e(mo,scr),e(mo,Ja),e(Ja,lcr),e(Ja,nve),e(nve,icr),e(Ja,dcr),e(Ja,sve),e(sve,ccr),e(Ja,fcr),e(Ja,lve),e(lve,mcr),e(Ja,gcr),e(mo,hcr),e(mo,Pe),e(Pe,XT),e(XT,ive),e(ive,pcr),e(XT,_cr),e(XT,zW),e(zW,ucr),e(XT,bcr),e(Pe,vcr),e(Pe,zT),e(zT,dve),e(dve,Fcr),e(zT,Tcr),e(zT,QW),e(QW,Mcr),e(zT,Ecr),e(Pe,Ccr),e(Pe,QT),e(QT,cve),e(cve,wcr),e(QT,Acr),e(QT,WW),e(WW,Lcr),e(QT,ycr),e(Pe,xcr),e(Pe,WT),e(WT,fve),e(fve,$cr),e(WT,kcr),e(WT,HW),e(HW,Scr),e(WT,Rcr),e(Pe,Pcr),e(Pe,HT),e(HT,mve),e(mve,Bcr),e(HT,Icr),e(HT,UW),e(UW,Ncr),e(HT,qcr),e(Pe,jcr),e(Pe,UT),e(UT,gve),e(gve,Dcr),e(UT,Gcr),e(UT,JW),e(JW,Ocr),e(UT,Vcr),e(Pe,Xcr),e(Pe,JT),e(JT,hve),e(hve,zcr),e(JT,Qcr),e(JT,YW),e(YW,Wcr),e(JT,Hcr),e(Pe,Ucr),e(Pe,YT),e(YT,pve),e(pve,Jcr),e(YT,Ycr),e(YT,KW),e(KW,Kcr),e(YT,Zcr),e(Pe,efr),e(Pe,KT),e(KT,_ve),e(_ve,ofr),e(KT,rfr),e(KT,ZW),e(ZW,tfr),e(KT,afr),e(mo,nfr),e(mo,ZT),e(ZT,sfr),e(ZT,uve),e(uve,lfr),e(ZT,ifr),e(ZT,bve),e(bve,dfr),e(mo,cfr),M(e8,mo,null),b(f,DXe,u),b(f,Sd,u),e(Sd,o8),e(o8,vve),M(YL,vve,null),e(Sd,ffr),e(Sd,Fve),e(Fve,mfr),b(f,GXe,u),b(f,Qo,u),M(KL,Qo,null),e(Qo,gfr),e(Qo,Rd),e(Rd,hfr),e(Rd,eH),e(eH,pfr),e(Rd,_fr),e(Rd,oH),e(oH,ufr),e(Rd,bfr),e(Qo,vfr),e(Qo,ZL),e(ZL,Ffr),e(ZL,Tve),e(Tve,Tfr),e(ZL,Mfr),e(Qo,Efr),e(Qo,Ct),M(ey,Ct,null),e(Ct,Cfr),e(Ct,Mve),e(Mve,wfr),e(Ct,Afr),e(Ct,Pd),e(Pd,Lfr),e(Pd,Eve),e(Eve,yfr),e(Pd,xfr),e(Pd,rH),e(rH,$fr),e(Pd,kfr),e(Ct,Sfr),M(r8,Ct,null),e(Qo,Rfr),e(Qo,go),M(oy,go,null),e(go,Pfr),e(go,Cve),e(Cve,Bfr),e(go,Ifr),e(go,Ya),e(Ya,Nfr),e(Ya,wve),e(wve,qfr),e(Ya,jfr),e(Ya,Ave),e(Ave,Dfr),e(Ya,Gfr),e(Ya,Lve),e(Lve,Ofr),e(Ya,Vfr),e(go,Xfr),e(go,rt),e(rt,t8),e(t8,yve),e(yve,zfr),e(t8,Qfr),e(t8,tH),e(tH,Wfr),e(t8,Hfr),e(rt,Ufr),e(rt,a8),e(a8,xve),e(xve,Jfr),e(a8,Yfr),e(a8,aH),e(aH,Kfr),e(a8,Zfr),e(rt,emr),e(rt,n8),e(n8,$ve),e($ve,omr),e(n8,rmr),e(n8,nH),e(nH,tmr),e(n8,amr),e(rt,nmr),e(rt,s8),e(s8,kve),e(kve,smr),e(s8,lmr),e(s8,sH),e(sH,imr),e(s8,dmr),e(rt,cmr),e(rt,l8),e(l8,Sve),e(Sve,fmr),e(l8,mmr),e(l8,lH),e(lH,gmr),e(l8,hmr),e(go,pmr),e(go,i8),e(i8,_mr),e(i8,Rve),e(Rve,umr),e(i8,bmr),e(i8,Pve),e(Pve,vmr),e(go,Fmr),M(d8,go,null),b(f,OXe,u),b(f,Bd,u),e(Bd,c8),e(c8,Bve),M(ry,Bve,null),e(Bd,Tmr),e(Bd,Ive),e(Ive,Mmr),b(f,VXe,u),b(f,Wo,u),M(ty,Wo,null),e(Wo,Emr),e(Wo,Id),e(Id,Cmr),e(Id,iH),e(iH,wmr),e(Id,Amr),e(Id,dH),e(dH,Lmr),e(Id,ymr),e(Wo,xmr),e(Wo,ay),e(ay,$mr),e(ay,Nve),e(Nve,kmr),e(ay,Smr),e(Wo,Rmr),e(Wo,wt),M(ny,wt,null),e(wt,Pmr),e(wt,qve),e(qve,Bmr),e(wt,Imr),e(wt,Nd),e(Nd,Nmr),e(Nd,jve),e(jve,qmr),e(Nd,jmr),e(Nd,cH),e(cH,Dmr),e(Nd,Gmr),e(wt,Omr),M(f8,wt,null),e(Wo,Vmr),e(Wo,ho),M(sy,ho,null),e(ho,Xmr),e(ho,Dve),e(Dve,zmr),e(ho,Qmr),e(ho,Ka),e(Ka,Wmr),e(Ka,Gve),e(Gve,Hmr),e(Ka,Umr),e(Ka,Ove),e(Ove,Jmr),e(Ka,Ymr),e(Ka,Vve),e(Vve,Kmr),e(Ka,Zmr),e(ho,egr),e(ho,Le),e(Le,m8),e(m8,Xve),e(Xve,ogr),e(m8,rgr),e(m8,fH),e(fH,tgr),e(m8,agr),e(Le,ngr),e(Le,g8),e(g8,zve),e(zve,sgr),e(g8,lgr),e(g8,mH),e(mH,igr),e(g8,dgr),e(Le,cgr),e(Le,h8),e(h8,Qve),e(Qve,fgr),e(h8,mgr),e(h8,gH),e(gH,ggr),e(h8,hgr),e(Le,pgr),e(Le,p8),e(p8,Wve),e(Wve,_gr),e(p8,ugr),e(p8,hH),e(hH,bgr),e(p8,vgr),e(Le,Fgr),e(Le,_8),e(_8,Hve),e(Hve,Tgr),e(_8,Mgr),e(_8,pH),e(pH,Egr),e(_8,Cgr),e(Le,wgr),e(Le,u8),e(u8,Uve),e(Uve,Agr),e(u8,Lgr),e(u8,_H),e(_H,ygr),e(u8,xgr),e(Le,$gr),e(Le,b8),e(b8,Jve),e(Jve,kgr),e(b8,Sgr),e(b8,uH),e(uH,Rgr),e(b8,Pgr),e(Le,Bgr),e(Le,v8),e(v8,Yve),e(Yve,Igr),e(v8,Ngr),e(v8,bH),e(bH,qgr),e(v8,jgr),e(Le,Dgr),e(Le,F8),e(F8,Kve),e(Kve,Ggr),e(F8,Ogr),e(F8,vH),e(vH,Vgr),e(F8,Xgr),e(Le,zgr),e(Le,T8),e(T8,Zve),e(Zve,Qgr),e(T8,Wgr),e(T8,FH),e(FH,Hgr),e(T8,Ugr),e(ho,Jgr),e(ho,M8),e(M8,Ygr),e(M8,eFe),e(eFe,Kgr),e(M8,Zgr),e(M8,oFe),e(oFe,ehr),e(ho,ohr),M(E8,ho,null),b(f,XXe,u),b(f,qd,u),e(qd,C8),e(C8,rFe),M(ly,rFe,null),e(qd,rhr),e(qd,tFe),e(tFe,thr),b(f,zXe,u),b(f,Ho,u),M(iy,Ho,null),e(Ho,ahr),e(Ho,jd),e(jd,nhr),e(jd,TH),e(TH,shr),e(jd,lhr),e(jd,MH),e(MH,ihr),e(jd,dhr),e(Ho,chr),e(Ho,dy),e(dy,fhr),e(dy,aFe),e(aFe,mhr),e(dy,ghr),e(Ho,hhr),e(Ho,At),M(cy,At,null),e(At,phr),e(At,nFe),e(nFe,_hr),e(At,uhr),e(At,Dd),e(Dd,bhr),e(Dd,sFe),e(sFe,vhr),e(Dd,Fhr),e(Dd,EH),e(EH,Thr),e(Dd,Mhr),e(At,Ehr),M(w8,At,null),e(Ho,Chr),e(Ho,po),M(fy,po,null),e(po,whr),e(po,lFe),e(lFe,Ahr),e(po,Lhr),e(po,Za),e(Za,yhr),e(Za,iFe),e(iFe,xhr),e(Za,$hr),e(Za,dFe),e(dFe,khr),e(Za,Shr),e(Za,cFe),e(cFe,Rhr),e(Za,Phr),e(po,Bhr),e(po,my),e(my,A8),e(A8,fFe),e(fFe,Ihr),e(A8,Nhr),e(A8,CH),e(CH,qhr),e(A8,jhr),e(my,Dhr),e(my,L8),e(L8,mFe),e(mFe,Ghr),e(L8,Ohr),e(L8,wH),e(wH,Vhr),e(L8,Xhr),e(po,zhr),e(po,y8),e(y8,Qhr),e(y8,gFe),e(gFe,Whr),e(y8,Hhr),e(y8,hFe),e(hFe,Uhr),e(po,Jhr),M(x8,po,null),b(f,QXe,u),b(f,Gd,u),e(Gd,$8),e($8,pFe),M(gy,pFe,null),e(Gd,Yhr),e(Gd,_Fe),e(_Fe,Khr),b(f,WXe,u),b(f,Uo,u),M(hy,Uo,null),e(Uo,Zhr),e(Uo,Od),e(Od,epr),e(Od,AH),e(AH,opr),e(Od,rpr),e(Od,LH),e(LH,tpr),e(Od,apr),e(Uo,npr),e(Uo,py),e(py,spr),e(py,uFe),e(uFe,lpr),e(py,ipr),e(Uo,dpr),e(Uo,Lt),M(_y,Lt,null),e(Lt,cpr),e(Lt,bFe),e(bFe,fpr),e(Lt,mpr),e(Lt,Vd),e(Vd,gpr),e(Vd,vFe),e(vFe,hpr),e(Vd,ppr),e(Vd,yH),e(yH,_pr),e(Vd,upr),e(Lt,bpr),M(k8,Lt,null),e(Uo,vpr),e(Uo,_o),M(uy,_o,null),e(_o,Fpr),e(_o,FFe),e(FFe,Tpr),e(_o,Mpr),e(_o,en),e(en,Epr),e(en,TFe),e(TFe,Cpr),e(en,wpr),e(en,MFe),e(MFe,Apr),e(en,Lpr),e(en,EFe),e(EFe,ypr),e(en,xpr),e(_o,$pr),e(_o,tt),e(tt,S8),e(S8,CFe),e(CFe,kpr),e(S8,Spr),e(S8,xH),e(xH,Rpr),e(S8,Ppr),e(tt,Bpr),e(tt,R8),e(R8,wFe),e(wFe,Ipr),e(R8,Npr),e(R8,$H),e($H,qpr),e(R8,jpr),e(tt,Dpr),e(tt,P8),e(P8,AFe),e(AFe,Gpr),e(P8,Opr),e(P8,kH),e(kH,Vpr),e(P8,Xpr),e(tt,zpr),e(tt,B8),e(B8,LFe),e(LFe,Qpr),e(B8,Wpr),e(B8,SH),e(SH,Hpr),e(B8,Upr),e(tt,Jpr),e(tt,I8),e(I8,yFe),e(yFe,Ypr),e(I8,Kpr),e(I8,RH),e(RH,Zpr),e(I8,e_r),e(_o,o_r),e(_o,N8),e(N8,r_r),e(N8,xFe),e(xFe,t_r),e(N8,a_r),e(N8,$Fe),e($Fe,n_r),e(_o,s_r),M(q8,_o,null),b(f,HXe,u),b(f,Xd,u),e(Xd,j8),e(j8,kFe),M(by,kFe,null),e(Xd,l_r),e(Xd,SFe),e(SFe,i_r),b(f,UXe,u),b(f,Jo,u),M(vy,Jo,null),e(Jo,d_r),e(Jo,zd),e(zd,c_r),e(zd,PH),e(PH,f_r),e(zd,m_r),e(zd,BH),e(BH,g_r),e(zd,h_r),e(Jo,p_r),e(Jo,Fy),e(Fy,__r),e(Fy,RFe),e(RFe,u_r),e(Fy,b_r),e(Jo,v_r),e(Jo,yt),M(Ty,yt,null),e(yt,F_r),e(yt,PFe),e(PFe,T_r),e(yt,M_r),e(yt,Qd),e(Qd,E_r),e(Qd,BFe),e(BFe,C_r),e(Qd,w_r),e(Qd,IH),e(IH,A_r),e(Qd,L_r),e(yt,y_r),M(D8,yt,null),e(Jo,x_r),e(Jo,uo),M(My,uo,null),e(uo,$_r),e(uo,IFe),e(IFe,k_r),e(uo,S_r),e(uo,on),e(on,R_r),e(on,NFe),e(NFe,P_r),e(on,B_r),e(on,qFe),e(qFe,I_r),e(on,N_r),e(on,jFe),e(jFe,q_r),e(on,j_r),e(uo,D_r),e(uo,Wd),e(Wd,G8),e(G8,DFe),e(DFe,G_r),e(G8,O_r),e(G8,NH),e(NH,V_r),e(G8,X_r),e(Wd,z_r),e(Wd,O8),e(O8,GFe),e(GFe,Q_r),e(O8,W_r),e(O8,qH),e(qH,H_r),e(O8,U_r),e(Wd,J_r),e(Wd,V8),e(V8,OFe),e(OFe,Y_r),e(V8,K_r),e(V8,jH),e(jH,Z_r),e(V8,eur),e(uo,our),e(uo,X8),e(X8,rur),e(X8,VFe),e(VFe,tur),e(X8,aur),e(X8,XFe),e(XFe,nur),e(uo,sur),M(z8,uo,null),b(f,JXe,u),b(f,Hd,u),e(Hd,Q8),e(Q8,zFe),M(Ey,zFe,null),e(Hd,lur),e(Hd,QFe),e(QFe,iur),b(f,YXe,u),b(f,Yo,u),M(Cy,Yo,null),e(Yo,dur),e(Yo,Ud),e(Ud,cur),e(Ud,DH),e(DH,fur),e(Ud,mur),e(Ud,GH),e(GH,gur),e(Ud,hur),e(Yo,pur),e(Yo,wy),e(wy,_ur),e(wy,WFe),e(WFe,uur),e(wy,bur),e(Yo,vur),e(Yo,xt),M(Ay,xt,null),e(xt,Fur),e(xt,HFe),e(HFe,Tur),e(xt,Mur),e(xt,Jd),e(Jd,Eur),e(Jd,UFe),e(UFe,Cur),e(Jd,wur),e(Jd,OH),e(OH,Aur),e(Jd,Lur),e(xt,yur),M(W8,xt,null),e(Yo,xur),e(Yo,bo),M(Ly,bo,null),e(bo,$ur),e(bo,JFe),e(JFe,kur),e(bo,Sur),e(bo,rn),e(rn,Rur),e(rn,YFe),e(YFe,Pur),e(rn,Bur),e(rn,KFe),e(KFe,Iur),e(rn,Nur),e(rn,ZFe),e(ZFe,qur),e(rn,jur),e(bo,Dur),e(bo,yy),e(yy,H8),e(H8,e6e),e(e6e,Gur),e(H8,Our),e(H8,VH),e(VH,Vur),e(H8,Xur),e(yy,zur),e(yy,U8),e(U8,o6e),e(o6e,Qur),e(U8,Wur),e(U8,XH),e(XH,Hur),e(U8,Uur),e(bo,Jur),e(bo,J8),e(J8,Yur),e(J8,r6e),e(r6e,Kur),e(J8,Zur),e(J8,t6e),e(t6e,e1r),e(bo,o1r),M(Y8,bo,null),b(f,KXe,u),b(f,Yd,u),e(Yd,K8),e(K8,a6e),M(xy,a6e,null),e(Yd,r1r),e(Yd,n6e),e(n6e,t1r),b(f,ZXe,u),b(f,Ko,u),M($y,Ko,null),e(Ko,a1r),e(Ko,Kd),e(Kd,n1r),e(Kd,zH),e(zH,s1r),e(Kd,l1r),e(Kd,QH),e(QH,i1r),e(Kd,d1r),e(Ko,c1r),e(Ko,ky),e(ky,f1r),e(ky,s6e),e(s6e,m1r),e(ky,g1r),e(Ko,h1r),e(Ko,$t),M(Sy,$t,null),e($t,p1r),e($t,l6e),e(l6e,_1r),e($t,u1r),e($t,Zd),e(Zd,b1r),e(Zd,i6e),e(i6e,v1r),e(Zd,F1r),e(Zd,WH),e(WH,T1r),e(Zd,M1r),e($t,E1r),M(Z8,$t,null),e(Ko,C1r),e(Ko,vo),M(Ry,vo,null),e(vo,w1r),e(vo,d6e),e(d6e,A1r),e(vo,L1r),e(vo,tn),e(tn,y1r),e(tn,c6e),e(c6e,x1r),e(tn,$1r),e(tn,f6e),e(f6e,k1r),e(tn,S1r),e(tn,m6e),e(m6e,R1r),e(tn,P1r),e(vo,B1r),e(vo,g6e),e(g6e,e9),e(e9,h6e),e(h6e,I1r),e(e9,N1r),e(e9,HH),e(HH,q1r),e(e9,j1r),e(vo,D1r),e(vo,o9),e(o9,G1r),e(o9,p6e),e(p6e,O1r),e(o9,V1r),e(o9,_6e),e(_6e,X1r),e(vo,z1r),M(r9,vo,null),b(f,eze,u),b(f,ec,u),e(ec,t9),e(t9,u6e),M(Py,u6e,null),e(ec,Q1r),e(ec,b6e),e(b6e,W1r),b(f,oze,u),b(f,Zo,u),M(By,Zo,null),e(Zo,H1r),e(Zo,oc),e(oc,U1r),e(oc,UH),e(UH,J1r),e(oc,Y1r),e(oc,JH),e(JH,K1r),e(oc,Z1r),e(Zo,e2r),e(Zo,Iy),e(Iy,o2r),e(Iy,v6e),e(v6e,r2r),e(Iy,t2r),e(Zo,a2r),e(Zo,kt),M(Ny,kt,null),e(kt,n2r),e(kt,F6e),e(F6e,s2r),e(kt,l2r),e(kt,rc),e(rc,i2r),e(rc,T6e),e(T6e,d2r),e(rc,c2r),e(rc,YH),e(YH,f2r),e(rc,m2r),e(kt,g2r),M(a9,kt,null),e(Zo,h2r),e(Zo,Fo),M(qy,Fo,null),e(Fo,p2r),e(Fo,M6e),e(M6e,_2r),e(Fo,u2r),e(Fo,an),e(an,b2r),e(an,E6e),e(E6e,v2r),e(an,F2r),e(an,C6e),e(C6e,T2r),e(an,M2r),e(an,w6e),e(w6e,E2r),e(an,C2r),e(Fo,w2r),e(Fo,at),e(at,n9),e(n9,A6e),e(A6e,A2r),e(n9,L2r),e(n9,KH),e(KH,y2r),e(n9,x2r),e(at,$2r),e(at,s9),e(s9,L6e),e(L6e,k2r),e(s9,S2r),e(s9,ZH),e(ZH,R2r),e(s9,P2r),e(at,B2r),e(at,l9),e(l9,y6e),e(y6e,I2r),e(l9,N2r),e(l9,eU),e(eU,q2r),e(l9,j2r),e(at,D2r),e(at,i9),e(i9,x6e),e(x6e,G2r),e(i9,O2r),e(i9,oU),e(oU,V2r),e(i9,X2r),e(at,z2r),e(at,d9),e(d9,$6e),e($6e,Q2r),e(d9,W2r),e(d9,rU),e(rU,H2r),e(d9,U2r),e(Fo,J2r),e(Fo,c9),e(c9,Y2r),e(c9,k6e),e(k6e,K2r),e(c9,Z2r),e(c9,S6e),e(S6e,ebr),e(Fo,obr),M(f9,Fo,null),b(f,rze,u),b(f,tc,u),e(tc,m9),e(m9,R6e),M(jy,R6e,null),e(tc,rbr),e(tc,P6e),e(P6e,tbr),b(f,tze,u),b(f,er,u),M(Dy,er,null),e(er,abr),e(er,ac),e(ac,nbr),e(ac,tU),e(tU,sbr),e(ac,lbr),e(ac,aU),e(aU,ibr),e(ac,dbr),e(er,cbr),e(er,Gy),e(Gy,fbr),e(Gy,B6e),e(B6e,mbr),e(Gy,gbr),e(er,hbr),e(er,St),M(Oy,St,null),e(St,pbr),e(St,I6e),e(I6e,_br),e(St,ubr),e(St,nc),e(nc,bbr),e(nc,N6e),e(N6e,vbr),e(nc,Fbr),e(nc,nU),e(nU,Tbr),e(nc,Mbr),e(St,Ebr),M(g9,St,null),e(er,Cbr),e(er,To),M(Vy,To,null),e(To,wbr),e(To,q6e),e(q6e,Abr),e(To,Lbr),e(To,nn),e(nn,ybr),e(nn,j6e),e(j6e,xbr),e(nn,$br),e(nn,D6e),e(D6e,kbr),e(nn,Sbr),e(nn,G6e),e(G6e,Rbr),e(nn,Pbr),e(To,Bbr),e(To,O6e),e(O6e,h9),e(h9,V6e),e(V6e,Ibr),e(h9,Nbr),e(h9,sU),e(sU,qbr),e(h9,jbr),e(To,Dbr),e(To,p9),e(p9,Gbr),e(p9,X6e),e(X6e,Obr),e(p9,Vbr),e(p9,z6e),e(z6e,Xbr),e(To,zbr),M(_9,To,null),b(f,aze,u),b(f,sc,u),e(sc,u9),e(u9,Q6e),M(Xy,Q6e,null),e(sc,Qbr),e(sc,W6e),e(W6e,Wbr),b(f,nze,u),b(f,or,u),M(zy,or,null),e(or,Hbr),e(or,lc),e(lc,Ubr),e(lc,lU),e(lU,Jbr),e(lc,Ybr),e(lc,iU),e(iU,Kbr),e(lc,Zbr),e(or,evr),e(or,Qy),e(Qy,ovr),e(Qy,H6e),e(H6e,rvr),e(Qy,tvr),e(or,avr),e(or,Rt),M(Wy,Rt,null),e(Rt,nvr),e(Rt,U6e),e(U6e,svr),e(Rt,lvr),e(Rt,ic),e(ic,ivr),e(ic,J6e),e(J6e,dvr),e(ic,cvr),e(ic,dU),e(dU,fvr),e(ic,mvr),e(Rt,gvr),M(b9,Rt,null),e(or,hvr),e(or,xr),M(Hy,xr,null),e(xr,pvr),e(xr,Y6e),e(Y6e,_vr),e(xr,uvr),e(xr,sn),e(sn,bvr),e(sn,K6e),e(K6e,vvr),e(sn,Fvr),e(sn,Z6e),e(Z6e,Tvr),e(sn,Mvr),e(sn,eTe),e(eTe,Evr),e(sn,Cvr),e(xr,wvr),e(xr,q),e(q,v9),e(v9,oTe),e(oTe,Avr),e(v9,Lvr),e(v9,cU),e(cU,yvr),e(v9,xvr),e(q,$vr),e(q,F9),e(F9,rTe),e(rTe,kvr),e(F9,Svr),e(F9,fU),e(fU,Rvr),e(F9,Pvr),e(q,Bvr),e(q,T9),e(T9,tTe),e(tTe,Ivr),e(T9,Nvr),e(T9,mU),e(mU,qvr),e(T9,jvr),e(q,Dvr),e(q,M9),e(M9,aTe),e(aTe,Gvr),e(M9,Ovr),e(M9,gU),e(gU,Vvr),e(M9,Xvr),e(q,zvr),e(q,E9),e(E9,nTe),e(nTe,Qvr),e(E9,Wvr),e(E9,hU),e(hU,Hvr),e(E9,Uvr),e(q,Jvr),e(q,C9),e(C9,sTe),e(sTe,Yvr),e(C9,Kvr),e(C9,pU),e(pU,Zvr),e(C9,eFr),e(q,oFr),e(q,w9),e(w9,lTe),e(lTe,rFr),e(w9,tFr),e(w9,_U),e(_U,aFr),e(w9,nFr),e(q,sFr),e(q,A9),e(A9,iTe),e(iTe,lFr),e(A9,iFr),e(A9,uU),e(uU,dFr),e(A9,cFr),e(q,fFr),e(q,L9),e(L9,dTe),e(dTe,mFr),e(L9,gFr),e(L9,bU),e(bU,hFr),e(L9,pFr),e(q,_Fr),e(q,y9),e(y9,cTe),e(cTe,uFr),e(y9,bFr),e(y9,vU),e(vU,vFr),e(y9,FFr),e(q,TFr),e(q,x9),e(x9,fTe),e(fTe,MFr),e(x9,EFr),e(x9,FU),e(FU,CFr),e(x9,wFr),e(q,AFr),e(q,$9),e($9,mTe),e(mTe,LFr),e($9,yFr),e($9,TU),e(TU,xFr),e($9,$Fr),e(q,kFr),e(q,k9),e(k9,gTe),e(gTe,SFr),e(k9,RFr),e(k9,MU),e(MU,PFr),e(k9,BFr),e(q,IFr),e(q,S9),e(S9,hTe),e(hTe,NFr),e(S9,qFr),e(S9,EU),e(EU,jFr),e(S9,DFr),e(q,GFr),e(q,R9),e(R9,pTe),e(pTe,OFr),e(R9,VFr),e(R9,CU),e(CU,XFr),e(R9,zFr),e(q,QFr),e(q,P9),e(P9,_Te),e(_Te,WFr),e(P9,HFr),e(P9,wU),e(wU,UFr),e(P9,JFr),e(q,YFr),e(q,B9),e(B9,uTe),e(uTe,KFr),e(B9,ZFr),e(B9,AU),e(AU,e6r),e(B9,o6r),e(q,r6r),e(q,I9),e(I9,bTe),e(bTe,t6r),e(I9,a6r),e(I9,LU),e(LU,n6r),e(I9,s6r),e(q,l6r),e(q,Js),e(Js,vTe),e(vTe,i6r),e(Js,d6r),e(Js,yU),e(yU,c6r),e(Js,f6r),e(Js,xU),e(xU,m6r),e(Js,g6r),e(q,h6r),e(q,N9),e(N9,FTe),e(FTe,p6r),e(N9,_6r),e(N9,$U),e($U,u6r),e(N9,b6r),e(q,v6r),e(q,q9),e(q9,TTe),e(TTe,F6r),e(q9,T6r),e(q9,kU),e(kU,M6r),e(q9,E6r),e(q,C6r),e(q,j9),e(j9,MTe),e(MTe,w6r),e(j9,A6r),e(j9,SU),e(SU,L6r),e(j9,y6r),e(q,x6r),e(q,D9),e(D9,ETe),e(ETe,$6r),e(D9,k6r),e(D9,RU),e(RU,S6r),e(D9,R6r),e(q,P6r),e(q,G9),e(G9,CTe),e(CTe,B6r),e(G9,I6r),e(G9,PU),e(PU,N6r),e(G9,q6r),e(q,j6r),e(q,O9),e(O9,wTe),e(wTe,D6r),e(O9,G6r),e(O9,BU),e(BU,O6r),e(O9,V6r),e(q,X6r),e(q,V9),e(V9,ATe),e(ATe,z6r),e(V9,Q6r),e(V9,IU),e(IU,W6r),e(V9,H6r),e(q,U6r),e(q,X9),e(X9,LTe),e(LTe,J6r),e(X9,Y6r),e(X9,NU),e(NU,K6r),e(X9,Z6r),e(q,eTr),e(q,z9),e(z9,yTe),e(yTe,oTr),e(z9,rTr),e(z9,qU),e(qU,tTr),e(z9,aTr),e(q,nTr),e(q,Q9),e(Q9,xTe),e(xTe,sTr),e(Q9,lTr),e(Q9,jU),e(jU,iTr),e(Q9,dTr),e(q,cTr),e(q,W9),e(W9,$Te),e($Te,fTr),e(W9,mTr),e(W9,DU),e(DU,gTr),e(W9,hTr),e(q,pTr),e(q,H9),e(H9,kTe),e(kTe,_Tr),e(H9,uTr),e(H9,GU),e(GU,bTr),e(H9,vTr),e(q,FTr),e(q,U9),e(U9,STe),e(STe,TTr),e(U9,MTr),e(U9,OU),e(OU,ETr),e(U9,CTr),e(q,wTr),e(q,J9),e(J9,RTe),e(RTe,ATr),e(J9,LTr),e(J9,VU),e(VU,yTr),e(J9,xTr),e(q,$Tr),e(q,Y9),e(Y9,PTe),e(PTe,kTr),e(Y9,STr),e(Y9,XU),e(XU,RTr),e(Y9,PTr),e(q,BTr),e(q,K9),e(K9,BTe),e(BTe,ITr),e(K9,NTr),e(K9,zU),e(zU,qTr),e(K9,jTr),e(q,DTr),e(q,Z9),e(Z9,ITe),e(ITe,GTr),e(Z9,OTr),e(Z9,QU),e(QU,VTr),e(Z9,XTr),e(q,zTr),e(q,eM),e(eM,NTe),e(NTe,QTr),e(eM,WTr),e(eM,WU),e(WU,HTr),e(eM,UTr),e(q,JTr),e(q,oM),e(oM,qTe),e(qTe,YTr),e(oM,KTr),e(oM,HU),e(HU,ZTr),e(oM,e8r),e(q,o8r),e(q,rM),e(rM,jTe),e(jTe,r8r),e(rM,t8r),e(rM,UU),e(UU,a8r),e(rM,n8r),e(q,s8r),e(q,tM),e(tM,DTe),e(DTe,l8r),e(tM,i8r),e(tM,JU),e(JU,d8r),e(tM,c8r),e(q,f8r),e(q,aM),e(aM,GTe),e(GTe,m8r),e(aM,g8r),e(aM,YU),e(YU,h8r),e(aM,p8r),e(q,_8r),e(q,nM),e(nM,OTe),e(OTe,u8r),e(nM,b8r),e(nM,KU),e(KU,v8r),e(nM,F8r),e(q,T8r),e(q,sM),e(sM,VTe),e(VTe,M8r),e(sM,E8r),e(sM,ZU),e(ZU,C8r),e(sM,w8r),e(q,A8r),e(q,lM),e(lM,XTe),e(XTe,L8r),e(lM,y8r),e(lM,eJ),e(eJ,x8r),e(lM,$8r),e(q,k8r),e(q,iM),e(iM,zTe),e(zTe,S8r),e(iM,R8r),e(iM,oJ),e(oJ,P8r),e(iM,B8r),e(q,I8r),e(q,dM),e(dM,QTe),e(QTe,N8r),e(dM,q8r),e(dM,rJ),e(rJ,j8r),e(dM,D8r),e(q,G8r),e(q,cM),e(cM,WTe),e(WTe,O8r),e(cM,V8r),e(cM,tJ),e(tJ,X8r),e(cM,z8r),e(q,Q8r),e(q,fM),e(fM,HTe),e(HTe,W8r),e(fM,H8r),e(fM,aJ),e(aJ,U8r),e(fM,J8r),e(q,Y8r),e(q,mM),e(mM,UTe),e(UTe,K8r),e(mM,Z8r),e(mM,nJ),e(nJ,e9r),e(mM,o9r),e(q,r9r),e(q,gM),e(gM,JTe),e(JTe,t9r),e(gM,a9r),e(gM,sJ),e(sJ,n9r),e(gM,s9r),e(xr,l9r),M(hM,xr,null),b(f,sze,u),b(f,dc,u),e(dc,pM),e(pM,YTe),M(Uy,YTe,null),e(dc,i9r),e(dc,KTe),e(KTe,d9r),b(f,lze,u),b(f,rr,u),M(Jy,rr,null),e(rr,c9r),e(rr,cc),e(cc,f9r),e(cc,lJ),e(lJ,m9r),e(cc,g9r),e(cc,iJ),e(iJ,h9r),e(cc,p9r),e(rr,_9r),e(rr,Yy),e(Yy,u9r),e(Yy,ZTe),e(ZTe,b9r),e(Yy,v9r),e(rr,F9r),e(rr,Pt),M(Ky,Pt,null),e(Pt,T9r),e(Pt,e8e),e(e8e,M9r),e(Pt,E9r),e(Pt,fc),e(fc,C9r),e(fc,o8e),e(o8e,w9r),e(fc,A9r),e(fc,dJ),e(dJ,L9r),e(fc,y9r),e(Pt,x9r),M(_M,Pt,null),e(rr,$9r),e(rr,$r),M(Zy,$r,null),e($r,k9r),e($r,r8e),e(r8e,S9r),e($r,R9r),e($r,ln),e(ln,P9r),e(ln,t8e),e(t8e,B9r),e(ln,I9r),e(ln,a8e),e(a8e,N9r),e(ln,q9r),e(ln,n8e),e(n8e,j9r),e(ln,D9r),e($r,G9r),e($r,se),e(se,uM),e(uM,s8e),e(s8e,O9r),e(uM,V9r),e(uM,cJ),e(cJ,X9r),e(uM,z9r),e(se,Q9r),e(se,bM),e(bM,l8e),e(l8e,W9r),e(bM,H9r),e(bM,fJ),e(fJ,U9r),e(bM,J9r),e(se,Y9r),e(se,vM),e(vM,i8e),e(i8e,K9r),e(vM,Z9r),e(vM,mJ),e(mJ,eMr),e(vM,oMr),e(se,rMr),e(se,FM),e(FM,d8e),e(d8e,tMr),e(FM,aMr),e(FM,gJ),e(gJ,nMr),e(FM,sMr),e(se,lMr),e(se,TM),e(TM,c8e),e(c8e,iMr),e(TM,dMr),e(TM,hJ),e(hJ,cMr),e(TM,fMr),e(se,mMr),e(se,MM),e(MM,f8e),e(f8e,gMr),e(MM,hMr),e(MM,pJ),e(pJ,pMr),e(MM,_Mr),e(se,uMr),e(se,EM),e(EM,m8e),e(m8e,bMr),e(EM,vMr),e(EM,_J),e(_J,FMr),e(EM,TMr),e(se,MMr),e(se,CM),e(CM,g8e),e(g8e,EMr),e(CM,CMr),e(CM,uJ),e(uJ,wMr),e(CM,AMr),e(se,LMr),e(se,wM),e(wM,h8e),e(h8e,yMr),e(wM,xMr),e(wM,bJ),e(bJ,$Mr),e(wM,kMr),e(se,SMr),e(se,AM),e(AM,p8e),e(p8e,RMr),e(AM,PMr),e(AM,vJ),e(vJ,BMr),e(AM,IMr),e(se,NMr),e(se,LM),e(LM,_8e),e(_8e,qMr),e(LM,jMr),e(LM,FJ),e(FJ,DMr),e(LM,GMr),e(se,OMr),e(se,yM),e(yM,u8e),e(u8e,VMr),e(yM,XMr),e(yM,TJ),e(TJ,zMr),e(yM,QMr),e(se,WMr),e(se,xM),e(xM,b8e),e(b8e,HMr),e(xM,UMr),e(xM,MJ),e(MJ,JMr),e(xM,YMr),e(se,KMr),e(se,$M),e($M,v8e),e(v8e,ZMr),e($M,e4r),e($M,EJ),e(EJ,o4r),e($M,r4r),e(se,t4r),e(se,kM),e(kM,F8e),e(F8e,a4r),e(kM,n4r),e(kM,CJ),e(CJ,s4r),e(kM,l4r),e(se,i4r),e(se,SM),e(SM,T8e),e(T8e,d4r),e(SM,c4r),e(SM,wJ),e(wJ,f4r),e(SM,m4r),e(se,g4r),e(se,RM),e(RM,M8e),e(M8e,h4r),e(RM,p4r),e(RM,AJ),e(AJ,_4r),e(RM,u4r),e(se,b4r),e(se,PM),e(PM,E8e),e(E8e,v4r),e(PM,F4r),e(PM,LJ),e(LJ,T4r),e(PM,M4r),e(se,E4r),e(se,BM),e(BM,C8e),e(C8e,C4r),e(BM,w4r),e(BM,yJ),e(yJ,A4r),e(BM,L4r),e(se,y4r),e(se,IM),e(IM,w8e),e(w8e,x4r),e(IM,$4r),e(IM,xJ),e(xJ,k4r),e(IM,S4r),e(se,R4r),e(se,NM),e(NM,A8e),e(A8e,P4r),e(NM,B4r),e(NM,$J),e($J,I4r),e(NM,N4r),e(se,q4r),e(se,qM),e(qM,L8e),e(L8e,j4r),e(qM,D4r),e(qM,kJ),e(kJ,G4r),e(qM,O4r),e(se,V4r),e(se,jM),e(jM,y8e),e(y8e,X4r),e(jM,z4r),e(jM,SJ),e(SJ,Q4r),e(jM,W4r),e($r,H4r),M(DM,$r,null),b(f,ize,u),b(f,mc,u),e(mc,GM),e(GM,x8e),M(ex,x8e,null),e(mc,U4r),e(mc,$8e),e($8e,J4r),b(f,dze,u),b(f,tr,u),M(ox,tr,null),e(tr,Y4r),e(tr,gc),e(gc,K4r),e(gc,RJ),e(RJ,Z4r),e(gc,eEr),e(gc,PJ),e(PJ,oEr),e(gc,rEr),e(tr,tEr),e(tr,rx),e(rx,aEr),e(rx,k8e),e(k8e,nEr),e(rx,sEr),e(tr,lEr),e(tr,Bt),M(tx,Bt,null),e(Bt,iEr),e(Bt,S8e),e(S8e,dEr),e(Bt,cEr),e(Bt,hc),e(hc,fEr),e(hc,R8e),e(R8e,mEr),e(hc,gEr),e(hc,BJ),e(BJ,hEr),e(hc,pEr),e(Bt,_Er),M(OM,Bt,null),e(tr,uEr),e(tr,kr),M(ax,kr,null),e(kr,bEr),e(kr,P8e),e(P8e,vEr),e(kr,FEr),e(kr,dn),e(dn,TEr),e(dn,B8e),e(B8e,MEr),e(dn,EEr),e(dn,I8e),e(I8e,CEr),e(dn,wEr),e(dn,N8e),e(N8e,AEr),e(dn,LEr),e(kr,yEr),e(kr,Me),e(Me,VM),e(VM,q8e),e(q8e,xEr),e(VM,$Er),e(VM,IJ),e(IJ,kEr),e(VM,SEr),e(Me,REr),e(Me,XM),e(XM,j8e),e(j8e,PEr),e(XM,BEr),e(XM,NJ),e(NJ,IEr),e(XM,NEr),e(Me,qEr),e(Me,zM),e(zM,D8e),e(D8e,jEr),e(zM,DEr),e(zM,qJ),e(qJ,GEr),e(zM,OEr),e(Me,VEr),e(Me,QM),e(QM,G8e),e(G8e,XEr),e(QM,zEr),e(QM,jJ),e(jJ,QEr),e(QM,WEr),e(Me,HEr),e(Me,WM),e(WM,O8e),e(O8e,UEr),e(WM,JEr),e(WM,DJ),e(DJ,YEr),e(WM,KEr),e(Me,ZEr),e(Me,HM),e(HM,V8e),e(V8e,eCr),e(HM,oCr),e(HM,GJ),e(GJ,rCr),e(HM,tCr),e(Me,aCr),e(Me,UM),e(UM,X8e),e(X8e,nCr),e(UM,sCr),e(UM,OJ),e(OJ,lCr),e(UM,iCr),e(Me,dCr),e(Me,JM),e(JM,z8e),e(z8e,cCr),e(JM,fCr),e(JM,VJ),e(VJ,mCr),e(JM,gCr),e(Me,hCr),e(Me,YM),e(YM,Q8e),e(Q8e,pCr),e(YM,_Cr),e(YM,XJ),e(XJ,uCr),e(YM,bCr),e(Me,vCr),e(Me,KM),e(KM,W8e),e(W8e,FCr),e(KM,TCr),e(KM,zJ),e(zJ,MCr),e(KM,ECr),e(Me,CCr),e(Me,ZM),e(ZM,H8e),e(H8e,wCr),e(ZM,ACr),e(ZM,QJ),e(QJ,LCr),e(ZM,yCr),e(Me,xCr),e(Me,e4),e(e4,U8e),e(U8e,$Cr),e(e4,kCr),e(e4,WJ),e(WJ,SCr),e(e4,RCr),e(Me,PCr),e(Me,o4),e(o4,J8e),e(J8e,BCr),e(o4,ICr),e(o4,HJ),e(HJ,NCr),e(o4,qCr),e(kr,jCr),M(r4,kr,null),b(f,cze,u),b(f,pc,u),e(pc,t4),e(t4,Y8e),M(nx,Y8e,null),e(pc,DCr),e(pc,K8e),e(K8e,GCr),b(f,fze,u),b(f,ar,u),M(sx,ar,null),e(ar,OCr),e(ar,_c),e(_c,VCr),e(_c,UJ),e(UJ,XCr),e(_c,zCr),e(_c,JJ),e(JJ,QCr),e(_c,WCr),e(ar,HCr),e(ar,lx),e(lx,UCr),e(lx,Z8e),e(Z8e,JCr),e(lx,YCr),e(ar,KCr),e(ar,It),M(ix,It,null),e(It,ZCr),e(It,e9e),e(e9e,e3r),e(It,o3r),e(It,uc),e(uc,r3r),e(uc,o9e),e(o9e,t3r),e(uc,a3r),e(uc,YJ),e(YJ,n3r),e(uc,s3r),e(It,l3r),M(a4,It,null),e(ar,i3r),e(ar,Sr),M(dx,Sr,null),e(Sr,d3r),e(Sr,r9e),e(r9e,c3r),e(Sr,f3r),e(Sr,cn),e(cn,m3r),e(cn,t9e),e(t9e,g3r),e(cn,h3r),e(cn,a9e),e(a9e,p3r),e(cn,_3r),e(cn,n9e),e(n9e,u3r),e(cn,b3r),e(Sr,v3r),e(Sr,Qe),e(Qe,n4),e(n4,s9e),e(s9e,F3r),e(n4,T3r),e(n4,KJ),e(KJ,M3r),e(n4,E3r),e(Qe,C3r),e(Qe,s4),e(s4,l9e),e(l9e,w3r),e(s4,A3r),e(s4,ZJ),e(ZJ,L3r),e(s4,y3r),e(Qe,x3r),e(Qe,Ys),e(Ys,i9e),e(i9e,$3r),e(Ys,k3r),e(Ys,eY),e(eY,S3r),e(Ys,R3r),e(Ys,oY),e(oY,P3r),e(Ys,B3r),e(Qe,I3r),e(Qe,l4),e(l4,d9e),e(d9e,N3r),e(l4,q3r),e(l4,rY),e(rY,j3r),e(l4,D3r),e(Qe,G3r),e(Qe,i4),e(i4,c9e),e(c9e,O3r),e(i4,V3r),e(i4,tY),e(tY,X3r),e(i4,z3r),e(Qe,Q3r),e(Qe,d4),e(d4,f9e),e(f9e,W3r),e(d4,H3r),e(d4,aY),e(aY,U3r),e(d4,J3r),e(Qe,Y3r),e(Qe,c4),e(c4,m9e),e(m9e,K3r),e(c4,Z3r),e(c4,nY),e(nY,e5r),e(c4,o5r),e(Sr,r5r),M(f4,Sr,null),b(f,mze,u),b(f,bc,u),e(bc,m4),e(m4,g9e),M(cx,g9e,null),e(bc,t5r),e(bc,h9e),e(h9e,a5r),b(f,gze,u),b(f,nr,u),M(fx,nr,null),e(nr,n5r),e(nr,vc),e(vc,s5r),e(vc,sY),e(sY,l5r),e(vc,i5r),e(vc,lY),e(lY,d5r),e(vc,c5r),e(nr,f5r),e(nr,mx),e(mx,m5r),e(mx,p9e),e(p9e,g5r),e(mx,h5r),e(nr,p5r),e(nr,Nt),M(gx,Nt,null),e(Nt,_5r),e(Nt,_9e),e(_9e,u5r),e(Nt,b5r),e(Nt,Fc),e(Fc,v5r),e(Fc,u9e),e(u9e,F5r),e(Fc,T5r),e(Fc,iY),e(iY,M5r),e(Fc,E5r),e(Nt,C5r),M(g4,Nt,null),e(nr,w5r),e(nr,Rr),M(hx,Rr,null),e(Rr,A5r),e(Rr,b9e),e(b9e,L5r),e(Rr,y5r),e(Rr,fn),e(fn,x5r),e(fn,v9e),e(v9e,$5r),e(fn,k5r),e(fn,F9e),e(F9e,S5r),e(fn,R5r),e(fn,T9e),e(T9e,P5r),e(fn,B5r),e(Rr,I5r),e(Rr,ie),e(ie,h4),e(h4,M9e),e(M9e,N5r),e(h4,q5r),e(h4,dY),e(dY,j5r),e(h4,D5r),e(ie,G5r),e(ie,p4),e(p4,E9e),e(E9e,O5r),e(p4,V5r),e(p4,cY),e(cY,X5r),e(p4,z5r),e(ie,Q5r),e(ie,_4),e(_4,C9e),e(C9e,W5r),e(_4,H5r),e(_4,fY),e(fY,U5r),e(_4,J5r),e(ie,Y5r),e(ie,u4),e(u4,w9e),e(w9e,K5r),e(u4,Z5r),e(u4,mY),e(mY,e0r),e(u4,o0r),e(ie,r0r),e(ie,b4),e(b4,A9e),e(A9e,t0r),e(b4,a0r),e(b4,gY),e(gY,n0r),e(b4,s0r),e(ie,l0r),e(ie,v4),e(v4,L9e),e(L9e,i0r),e(v4,d0r),e(v4,hY),e(hY,c0r),e(v4,f0r),e(ie,m0r),e(ie,F4),e(F4,y9e),e(y9e,g0r),e(F4,h0r),e(F4,pY),e(pY,p0r),e(F4,_0r),e(ie,u0r),e(ie,T4),e(T4,x9e),e(x9e,b0r),e(T4,v0r),e(T4,_Y),e(_Y,F0r),e(T4,T0r),e(ie,M0r),e(ie,M4),e(M4,$9e),e($9e,E0r),e(M4,C0r),e(M4,uY),e(uY,w0r),e(M4,A0r),e(ie,L0r),e(ie,E4),e(E4,k9e),e(k9e,y0r),e(E4,x0r),e(E4,bY),e(bY,$0r),e(E4,k0r),e(ie,S0r),e(ie,C4),e(C4,S9e),e(S9e,R0r),e(C4,P0r),e(C4,vY),e(vY,B0r),e(C4,I0r),e(ie,N0r),e(ie,w4),e(w4,R9e),e(R9e,q0r),e(w4,j0r),e(w4,FY),e(FY,D0r),e(w4,G0r),e(ie,O0r),e(ie,A4),e(A4,P9e),e(P9e,V0r),e(A4,X0r),e(A4,TY),e(TY,z0r),e(A4,Q0r),e(ie,W0r),e(ie,L4),e(L4,B9e),e(B9e,H0r),e(L4,U0r),e(L4,MY),e(MY,J0r),e(L4,Y0r),e(ie,K0r),e(ie,y4),e(y4,I9e),e(I9e,Z0r),e(y4,ewr),e(y4,EY),e(EY,owr),e(y4,rwr),e(ie,twr),e(ie,x4),e(x4,N9e),e(N9e,awr),e(x4,nwr),e(x4,CY),e(CY,swr),e(x4,lwr),e(ie,iwr),e(ie,$4),e($4,q9e),e(q9e,dwr),e($4,cwr),e($4,wY),e(wY,fwr),e($4,mwr),e(ie,gwr),e(ie,k4),e(k4,j9e),e(j9e,hwr),e(k4,pwr),e(k4,AY),e(AY,_wr),e(k4,uwr),e(ie,bwr),e(ie,S4),e(S4,D9e),e(D9e,vwr),e(S4,Fwr),e(S4,LY),e(LY,Twr),e(S4,Mwr),e(ie,Ewr),e(ie,R4),e(R4,G9e),e(G9e,Cwr),e(R4,wwr),e(R4,yY),e(yY,Awr),e(R4,Lwr),e(Rr,ywr),M(P4,Rr,null),b(f,hze,u),b(f,Tc,u),e(Tc,B4),e(B4,O9e),M(px,O9e,null),e(Tc,xwr),e(Tc,V9e),e(V9e,$wr),b(f,pze,u),b(f,sr,u),M(_x,sr,null),e(sr,kwr),e(sr,Mc),e(Mc,Swr),e(Mc,xY),e(xY,Rwr),e(Mc,Pwr),e(Mc,$Y),e($Y,Bwr),e(Mc,Iwr),e(sr,Nwr),e(sr,ux),e(ux,qwr),e(ux,X9e),e(X9e,jwr),e(ux,Dwr),e(sr,Gwr),e(sr,qt),M(bx,qt,null),e(qt,Owr),e(qt,z9e),e(z9e,Vwr),e(qt,Xwr),e(qt,Ec),e(Ec,zwr),e(Ec,Q9e),e(Q9e,Qwr),e(Ec,Wwr),e(Ec,kY),e(kY,Hwr),e(Ec,Uwr),e(qt,Jwr),M(I4,qt,null),e(sr,Ywr),e(sr,Pr),M(vx,Pr,null),e(Pr,Kwr),e(Pr,W9e),e(W9e,Zwr),e(Pr,eAr),e(Pr,mn),e(mn,oAr),e(mn,H9e),e(H9e,rAr),e(mn,tAr),e(mn,U9e),e(U9e,aAr),e(mn,nAr),e(mn,J9e),e(J9e,sAr),e(mn,lAr),e(Pr,iAr),e(Pr,ye),e(ye,N4),e(N4,Y9e),e(Y9e,dAr),e(N4,cAr),e(N4,SY),e(SY,fAr),e(N4,mAr),e(ye,gAr),e(ye,q4),e(q4,K9e),e(K9e,hAr),e(q4,pAr),e(q4,RY),e(RY,_Ar),e(q4,uAr),e(ye,bAr),e(ye,j4),e(j4,Z9e),e(Z9e,vAr),e(j4,FAr),e(j4,PY),e(PY,TAr),e(j4,MAr),e(ye,EAr),e(ye,D4),e(D4,eMe),e(eMe,CAr),e(D4,wAr),e(D4,BY),e(BY,AAr),e(D4,LAr),e(ye,yAr),e(ye,G4),e(G4,oMe),e(oMe,xAr),e(G4,$Ar),e(G4,IY),e(IY,kAr),e(G4,SAr),e(ye,RAr),e(ye,O4),e(O4,rMe),e(rMe,PAr),e(O4,BAr),e(O4,NY),e(NY,IAr),e(O4,NAr),e(ye,qAr),e(ye,V4),e(V4,tMe),e(tMe,jAr),e(V4,DAr),e(V4,qY),e(qY,GAr),e(V4,OAr),e(ye,VAr),e(ye,X4),e(X4,aMe),e(aMe,XAr),e(X4,zAr),e(X4,jY),e(jY,QAr),e(X4,WAr),e(ye,HAr),e(ye,z4),e(z4,nMe),e(nMe,UAr),e(z4,JAr),e(z4,DY),e(DY,YAr),e(z4,KAr),e(ye,ZAr),e(ye,Q4),e(Q4,sMe),e(sMe,e7r),e(Q4,o7r),e(Q4,GY),e(GY,r7r),e(Q4,t7r),e(Pr,a7r),M(W4,Pr,null),b(f,_ze,u),b(f,Cc,u),e(Cc,H4),e(H4,lMe),M(Fx,lMe,null),e(Cc,n7r),e(Cc,iMe),e(iMe,s7r),b(f,uze,u),b(f,lr,u),M(Tx,lr,null),e(lr,l7r),e(lr,wc),e(wc,i7r),e(wc,OY),e(OY,d7r),e(wc,c7r),e(wc,VY),e(VY,f7r),e(wc,m7r),e(lr,g7r),e(lr,Mx),e(Mx,h7r),e(Mx,dMe),e(dMe,p7r),e(Mx,_7r),e(lr,u7r),e(lr,jt),M(Ex,jt,null),e(jt,b7r),e(jt,cMe),e(cMe,v7r),e(jt,F7r),e(jt,Ac),e(Ac,T7r),e(Ac,fMe),e(fMe,M7r),e(Ac,E7r),e(Ac,XY),e(XY,C7r),e(Ac,w7r),e(jt,A7r),M(U4,jt,null),e(lr,L7r),e(lr,Br),M(Cx,Br,null),e(Br,y7r),e(Br,mMe),e(mMe,x7r),e(Br,$7r),e(Br,gn),e(gn,k7r),e(gn,gMe),e(gMe,S7r),e(gn,R7r),e(gn,hMe),e(hMe,P7r),e(gn,B7r),e(gn,pMe),e(pMe,I7r),e(gn,N7r),e(Br,q7r),e(Br,te),e(te,J4),e(J4,_Me),e(_Me,j7r),e(J4,D7r),e(J4,zY),e(zY,G7r),e(J4,O7r),e(te,V7r),e(te,Y4),e(Y4,uMe),e(uMe,X7r),e(Y4,z7r),e(Y4,QY),e(QY,Q7r),e(Y4,W7r),e(te,H7r),e(te,K4),e(K4,bMe),e(bMe,U7r),e(K4,J7r),e(K4,WY),e(WY,Y7r),e(K4,K7r),e(te,Z7r),e(te,Z4),e(Z4,vMe),e(vMe,eLr),e(Z4,oLr),e(Z4,HY),e(HY,rLr),e(Z4,tLr),e(te,aLr),e(te,eE),e(eE,FMe),e(FMe,nLr),e(eE,sLr),e(eE,UY),e(UY,lLr),e(eE,iLr),e(te,dLr),e(te,oE),e(oE,TMe),e(TMe,cLr),e(oE,fLr),e(oE,JY),e(JY,mLr),e(oE,gLr),e(te,hLr),e(te,rE),e(rE,MMe),e(MMe,pLr),e(rE,_Lr),e(rE,YY),e(YY,uLr),e(rE,bLr),e(te,vLr),e(te,tE),e(tE,EMe),e(EMe,FLr),e(tE,TLr),e(tE,KY),e(KY,MLr),e(tE,ELr),e(te,CLr),e(te,aE),e(aE,CMe),e(CMe,wLr),e(aE,ALr),e(aE,ZY),e(ZY,LLr),e(aE,yLr),e(te,xLr),e(te,nE),e(nE,wMe),e(wMe,$Lr),e(nE,kLr),e(nE,eK),e(eK,SLr),e(nE,RLr),e(te,PLr),e(te,sE),e(sE,AMe),e(AMe,BLr),e(sE,ILr),e(sE,oK),e(oK,NLr),e(sE,qLr),e(te,jLr),e(te,lE),e(lE,LMe),e(LMe,DLr),e(lE,GLr),e(lE,rK),e(rK,OLr),e(lE,VLr),e(te,XLr),e(te,iE),e(iE,yMe),e(yMe,zLr),e(iE,QLr),e(iE,tK),e(tK,WLr),e(iE,HLr),e(te,ULr),e(te,dE),e(dE,xMe),e(xMe,JLr),e(dE,YLr),e(dE,aK),e(aK,KLr),e(dE,ZLr),e(te,eyr),e(te,cE),e(cE,$Me),e($Me,oyr),e(cE,ryr),e(cE,nK),e(nK,tyr),e(cE,ayr),e(te,nyr),e(te,fE),e(fE,kMe),e(kMe,syr),e(fE,lyr),e(fE,sK),e(sK,iyr),e(fE,dyr),e(te,cyr),e(te,mE),e(mE,SMe),e(SMe,fyr),e(mE,myr),e(mE,lK),e(lK,gyr),e(mE,hyr),e(te,pyr),e(te,gE),e(gE,RMe),e(RMe,_yr),e(gE,uyr),e(gE,iK),e(iK,byr),e(gE,vyr),e(te,Fyr),e(te,hE),e(hE,PMe),e(PMe,Tyr),e(hE,Myr),e(hE,dK),e(dK,Eyr),e(hE,Cyr),e(te,wyr),e(te,pE),e(pE,BMe),e(BMe,Ayr),e(pE,Lyr),e(pE,cK),e(cK,yyr),e(pE,xyr),e(te,$yr),e(te,_E),e(_E,IMe),e(IMe,kyr),e(_E,Syr),e(_E,fK),e(fK,Ryr),e(_E,Pyr),e(te,Byr),e(te,uE),e(uE,NMe),e(NMe,Iyr),e(uE,Nyr),e(uE,mK),e(mK,qyr),e(uE,jyr),e(te,Dyr),e(te,bE),e(bE,qMe),e(qMe,Gyr),e(bE,Oyr),e(bE,gK),e(gK,Vyr),e(bE,Xyr),e(te,zyr),e(te,vE),e(vE,jMe),e(jMe,Qyr),e(vE,Wyr),e(vE,hK),e(hK,Hyr),e(vE,Uyr),e(te,Jyr),e(te,FE),e(FE,DMe),e(DMe,Yyr),e(FE,Kyr),e(FE,pK),e(pK,Zyr),e(FE,exr),e(te,oxr),e(te,TE),e(TE,GMe),e(GMe,rxr),e(TE,txr),e(TE,_K),e(_K,axr),e(TE,nxr),e(Br,sxr),M(ME,Br,null),b(f,bze,u),b(f,Lc,u),e(Lc,EE),e(EE,OMe),M(wx,OMe,null),e(Lc,lxr),e(Lc,VMe),e(VMe,ixr),b(f,vze,u),b(f,ir,u),M(Ax,ir,null),e(ir,dxr),e(ir,yc),e(yc,cxr),e(yc,uK),e(uK,fxr),e(yc,mxr),e(yc,bK),e(bK,gxr),e(yc,hxr),e(ir,pxr),e(ir,Lx),e(Lx,_xr),e(Lx,XMe),e(XMe,uxr),e(Lx,bxr),e(ir,vxr),e(ir,Dt),M(yx,Dt,null),e(Dt,Fxr),e(Dt,zMe),e(zMe,Txr),e(Dt,Mxr),e(Dt,xc),e(xc,Exr),e(xc,QMe),e(QMe,Cxr),e(xc,wxr),e(xc,vK),e(vK,Axr),e(xc,Lxr),e(Dt,yxr),M(CE,Dt,null),e(ir,xxr),e(ir,Ir),M(xx,Ir,null),e(Ir,$xr),e(Ir,WMe),e(WMe,kxr),e(Ir,Sxr),e(Ir,hn),e(hn,Rxr),e(hn,HMe),e(HMe,Pxr),e(hn,Bxr),e(hn,UMe),e(UMe,Ixr),e(hn,Nxr),e(hn,JMe),e(JMe,qxr),e(hn,jxr),e(Ir,Dxr),e(Ir,_e),e(_e,wE),e(wE,YMe),e(YMe,Gxr),e(wE,Oxr),e(wE,FK),e(FK,Vxr),e(wE,Xxr),e(_e,zxr),e(_e,AE),e(AE,KMe),e(KMe,Qxr),e(AE,Wxr),e(AE,TK),e(TK,Hxr),e(AE,Uxr),e(_e,Jxr),e(_e,LE),e(LE,ZMe),e(ZMe,Yxr),e(LE,Kxr),e(LE,MK),e(MK,Zxr),e(LE,e$r),e(_e,o$r),e(_e,yE),e(yE,e4e),e(e4e,r$r),e(yE,t$r),e(yE,EK),e(EK,a$r),e(yE,n$r),e(_e,s$r),e(_e,xE),e(xE,o4e),e(o4e,l$r),e(xE,i$r),e(xE,CK),e(CK,d$r),e(xE,c$r),e(_e,f$r),e(_e,$E),e($E,r4e),e(r4e,m$r),e($E,g$r),e($E,wK),e(wK,h$r),e($E,p$r),e(_e,_$r),e(_e,kE),e(kE,t4e),e(t4e,u$r),e(kE,b$r),e(kE,AK),e(AK,v$r),e(kE,F$r),e(_e,T$r),e(_e,SE),e(SE,a4e),e(a4e,M$r),e(SE,E$r),e(SE,LK),e(LK,C$r),e(SE,w$r),e(_e,A$r),e(_e,RE),e(RE,n4e),e(n4e,L$r),e(RE,y$r),e(RE,yK),e(yK,x$r),e(RE,$$r),e(_e,k$r),e(_e,PE),e(PE,s4e),e(s4e,S$r),e(PE,R$r),e(PE,xK),e(xK,P$r),e(PE,B$r),e(_e,I$r),e(_e,BE),e(BE,l4e),e(l4e,N$r),e(BE,q$r),e(BE,$K),e($K,j$r),e(BE,D$r),e(_e,G$r),e(_e,IE),e(IE,i4e),e(i4e,O$r),e(IE,V$r),e(IE,kK),e(kK,X$r),e(IE,z$r),e(_e,Q$r),e(_e,NE),e(NE,d4e),e(d4e,W$r),e(NE,H$r),e(NE,SK),e(SK,U$r),e(NE,J$r),e(_e,Y$r),e(_e,qE),e(qE,c4e),e(c4e,K$r),e(qE,Z$r),e(qE,RK),e(RK,ekr),e(qE,okr),e(_e,rkr),e(_e,jE),e(jE,f4e),e(f4e,tkr),e(jE,akr),e(jE,PK),e(PK,nkr),e(jE,skr),e(_e,lkr),e(_e,DE),e(DE,m4e),e(m4e,ikr),e(DE,dkr),e(DE,BK),e(BK,ckr),e(DE,fkr),e(_e,mkr),e(_e,GE),e(GE,g4e),e(g4e,gkr),e(GE,hkr),e(GE,IK),e(IK,pkr),e(GE,_kr),e(Ir,ukr),M(OE,Ir,null),b(f,Fze,u),b(f,$c,u),e($c,VE),e(VE,h4e),M($x,h4e,null),e($c,bkr),e($c,p4e),e(p4e,vkr),b(f,Tze,u),b(f,dr,u),M(kx,dr,null),e(dr,Fkr),e(dr,kc),e(kc,Tkr),e(kc,NK),e(NK,Mkr),e(kc,Ekr),e(kc,qK),e(qK,Ckr),e(kc,wkr),e(dr,Akr),e(dr,Sx),e(Sx,Lkr),e(Sx,_4e),e(_4e,ykr),e(Sx,xkr),e(dr,$kr),e(dr,Gt),M(Rx,Gt,null),e(Gt,kkr),e(Gt,u4e),e(u4e,Skr),e(Gt,Rkr),e(Gt,Sc),e(Sc,Pkr),e(Sc,b4e),e(b4e,Bkr),e(Sc,Ikr),e(Sc,jK),e(jK,Nkr),e(Sc,qkr),e(Gt,jkr),M(XE,Gt,null),e(dr,Dkr),e(dr,Nr),M(Px,Nr,null),e(Nr,Gkr),e(Nr,v4e),e(v4e,Okr),e(Nr,Vkr),e(Nr,pn),e(pn,Xkr),e(pn,F4e),e(F4e,zkr),e(pn,Qkr),e(pn,T4e),e(T4e,Wkr),e(pn,Hkr),e(pn,M4e),e(M4e,Ukr),e(pn,Jkr),e(Nr,Ykr),e(Nr,Bx),e(Bx,zE),e(zE,E4e),e(E4e,Kkr),e(zE,Zkr),e(zE,DK),e(DK,eSr),e(zE,oSr),e(Bx,rSr),e(Bx,QE),e(QE,C4e),e(C4e,tSr),e(QE,aSr),e(QE,GK),e(GK,nSr),e(QE,sSr),e(Nr,lSr),M(WE,Nr,null),b(f,Mze,u),b(f,Rc,u),e(Rc,HE),e(HE,w4e),M(Ix,w4e,null),e(Rc,iSr),e(Rc,A4e),e(A4e,dSr),b(f,Eze,u),b(f,cr,u),M(Nx,cr,null),e(cr,cSr),e(cr,Pc),e(Pc,fSr),e(Pc,OK),e(OK,mSr),e(Pc,gSr),e(Pc,VK),e(VK,hSr),e(Pc,pSr),e(cr,_Sr),e(cr,qx),e(qx,uSr),e(qx,L4e),e(L4e,bSr),e(qx,vSr),e(cr,FSr),e(cr,Ot),M(jx,Ot,null),e(Ot,TSr),e(Ot,y4e),e(y4e,MSr),e(Ot,ESr),e(Ot,Bc),e(Bc,CSr),e(Bc,x4e),e(x4e,wSr),e(Bc,ASr),e(Bc,XK),e(XK,LSr),e(Bc,ySr),e(Ot,xSr),M(UE,Ot,null),e(cr,$Sr),e(cr,qr),M(Dx,qr,null),e(qr,kSr),e(qr,$4e),e($4e,SSr),e(qr,RSr),e(qr,_n),e(_n,PSr),e(_n,k4e),e(k4e,BSr),e(_n,ISr),e(_n,S4e),e(S4e,NSr),e(_n,qSr),e(_n,R4e),e(R4e,jSr),e(_n,DSr),e(qr,GSr),e(qr,P4e),e(P4e,JE),e(JE,B4e),e(B4e,OSr),e(JE,VSr),e(JE,zK),e(zK,XSr),e(JE,zSr),e(qr,QSr),M(YE,qr,null),b(f,Cze,u),b(f,Ic,u),e(Ic,KE),e(KE,I4e),M(Gx,I4e,null),e(Ic,WSr),e(Ic,N4e),e(N4e,HSr),b(f,wze,u),b(f,fr,u),M(Ox,fr,null),e(fr,USr),e(fr,Nc),e(Nc,JSr),e(Nc,QK),e(QK,YSr),e(Nc,KSr),e(Nc,WK),e(WK,ZSr),e(Nc,eRr),e(fr,oRr),e(fr,Vx),e(Vx,rRr),e(Vx,q4e),e(q4e,tRr),e(Vx,aRr),e(fr,nRr),e(fr,Vt),M(Xx,Vt,null),e(Vt,sRr),e(Vt,j4e),e(j4e,lRr),e(Vt,iRr),e(Vt,qc),e(qc,dRr),e(qc,D4e),e(D4e,cRr),e(qc,fRr),e(qc,HK),e(HK,mRr),e(qc,gRr),e(Vt,hRr),M(ZE,Vt,null),e(fr,pRr),e(fr,jr),M(zx,jr,null),e(jr,_Rr),e(jr,G4e),e(G4e,uRr),e(jr,bRr),e(jr,un),e(un,vRr),e(un,O4e),e(O4e,FRr),e(un,TRr),e(un,V4e),e(V4e,MRr),e(un,ERr),e(un,X4e),e(X4e,CRr),e(un,wRr),e(jr,ARr),e(jr,de),e(de,eC),e(eC,z4e),e(z4e,LRr),e(eC,yRr),e(eC,UK),e(UK,xRr),e(eC,$Rr),e(de,kRr),e(de,oC),e(oC,Q4e),e(Q4e,SRr),e(oC,RRr),e(oC,JK),e(JK,PRr),e(oC,BRr),e(de,IRr),e(de,rC),e(rC,W4e),e(W4e,NRr),e(rC,qRr),e(rC,YK),e(YK,jRr),e(rC,DRr),e(de,GRr),e(de,tC),e(tC,H4e),e(H4e,ORr),e(tC,VRr),e(tC,KK),e(KK,XRr),e(tC,zRr),e(de,QRr),e(de,aC),e(aC,U4e),e(U4e,WRr),e(aC,HRr),e(aC,ZK),e(ZK,URr),e(aC,JRr),e(de,YRr),e(de,nC),e(nC,J4e),e(J4e,KRr),e(nC,ZRr),e(nC,eZ),e(eZ,ePr),e(nC,oPr),e(de,rPr),e(de,sC),e(sC,Y4e),e(Y4e,tPr),e(sC,aPr),e(sC,oZ),e(oZ,nPr),e(sC,sPr),e(de,lPr),e(de,lC),e(lC,K4e),e(K4e,iPr),e(lC,dPr),e(lC,rZ),e(rZ,cPr),e(lC,fPr),e(de,mPr),e(de,iC),e(iC,Z4e),e(Z4e,gPr),e(iC,hPr),e(iC,tZ),e(tZ,pPr),e(iC,_Pr),e(de,uPr),e(de,dC),e(dC,eEe),e(eEe,bPr),e(dC,vPr),e(dC,aZ),e(aZ,FPr),e(dC,TPr),e(de,MPr),e(de,cC),e(cC,oEe),e(oEe,EPr),e(cC,CPr),e(cC,nZ),e(nZ,wPr),e(cC,APr),e(de,LPr),e(de,fC),e(fC,rEe),e(rEe,yPr),e(fC,xPr),e(fC,sZ),e(sZ,$Pr),e(fC,kPr),e(de,SPr),e(de,mC),e(mC,tEe),e(tEe,RPr),e(mC,PPr),e(mC,lZ),e(lZ,BPr),e(mC,IPr),e(de,NPr),e(de,gC),e(gC,aEe),e(aEe,qPr),e(gC,jPr),e(gC,iZ),e(iZ,DPr),e(gC,GPr),e(de,OPr),e(de,hC),e(hC,nEe),e(nEe,VPr),e(hC,XPr),e(hC,dZ),e(dZ,zPr),e(hC,QPr),e(de,WPr),e(de,pC),e(pC,sEe),e(sEe,HPr),e(pC,UPr),e(pC,cZ),e(cZ,JPr),e(pC,YPr),e(de,KPr),e(de,_C),e(_C,lEe),e(lEe,ZPr),e(_C,eBr),e(_C,fZ),e(fZ,oBr),e(_C,rBr),e(de,tBr),e(de,uC),e(uC,iEe),e(iEe,aBr),e(uC,nBr),e(uC,mZ),e(mZ,sBr),e(uC,lBr),e(de,iBr),e(de,bC),e(bC,dEe),e(dEe,dBr),e(bC,cBr),e(bC,gZ),e(gZ,fBr),e(bC,mBr),e(de,gBr),e(de,vC),e(vC,cEe),e(cEe,hBr),e(vC,pBr),e(vC,hZ),e(hZ,_Br),e(vC,uBr),e(jr,bBr),M(FC,jr,null),b(f,Aze,u),b(f,jc,u),e(jc,TC),e(TC,fEe),M(Qx,fEe,null),e(jc,vBr),e(jc,mEe),e(mEe,FBr),b(f,Lze,u),b(f,mr,u),M(Wx,mr,null),e(mr,TBr),e(mr,Dc),e(Dc,MBr),e(Dc,pZ),e(pZ,EBr),e(Dc,CBr),e(Dc,_Z),e(_Z,wBr),e(Dc,ABr),e(mr,LBr),e(mr,Hx),e(Hx,yBr),e(Hx,gEe),e(gEe,xBr),e(Hx,$Br),e(mr,kBr),e(mr,Xt),M(Ux,Xt,null),e(Xt,SBr),e(Xt,hEe),e(hEe,RBr),e(Xt,PBr),e(Xt,Gc),e(Gc,BBr),e(Gc,pEe),e(pEe,IBr),e(Gc,NBr),e(Gc,uZ),e(uZ,qBr),e(Gc,jBr),e(Xt,DBr),M(MC,Xt,null),e(mr,GBr),e(mr,Dr),M(Jx,Dr,null),e(Dr,OBr),e(Dr,_Ee),e(_Ee,VBr),e(Dr,XBr),e(Dr,bn),e(bn,zBr),e(bn,uEe),e(uEe,QBr),e(bn,WBr),e(bn,bEe),e(bEe,HBr),e(bn,UBr),e(bn,vEe),e(vEe,JBr),e(bn,YBr),e(Dr,KBr),e(Dr,ce),e(ce,EC),e(EC,FEe),e(FEe,ZBr),e(EC,eIr),e(EC,bZ),e(bZ,oIr),e(EC,rIr),e(ce,tIr),e(ce,CC),e(CC,TEe),e(TEe,aIr),e(CC,nIr),e(CC,vZ),e(vZ,sIr),e(CC,lIr),e(ce,iIr),e(ce,wC),e(wC,MEe),e(MEe,dIr),e(wC,cIr),e(wC,FZ),e(FZ,fIr),e(wC,mIr),e(ce,gIr),e(ce,AC),e(AC,EEe),e(EEe,hIr),e(AC,pIr),e(AC,TZ),e(TZ,_Ir),e(AC,uIr),e(ce,bIr),e(ce,LC),e(LC,CEe),e(CEe,vIr),e(LC,FIr),e(LC,MZ),e(MZ,TIr),e(LC,MIr),e(ce,EIr),e(ce,yC),e(yC,wEe),e(wEe,CIr),e(yC,wIr),e(yC,EZ),e(EZ,AIr),e(yC,LIr),e(ce,yIr),e(ce,xC),e(xC,AEe),e(AEe,xIr),e(xC,$Ir),e(xC,CZ),e(CZ,kIr),e(xC,SIr),e(ce,RIr),e(ce,$C),e($C,LEe),e(LEe,PIr),e($C,BIr),e($C,wZ),e(wZ,IIr),e($C,NIr),e(ce,qIr),e(ce,kC),e(kC,yEe),e(yEe,jIr),e(kC,DIr),e(kC,AZ),e(AZ,GIr),e(kC,OIr),e(ce,VIr),e(ce,SC),e(SC,xEe),e(xEe,XIr),e(SC,zIr),e(SC,LZ),e(LZ,QIr),e(SC,WIr),e(ce,HIr),e(ce,RC),e(RC,$Ee),e($Ee,UIr),e(RC,JIr),e(RC,yZ),e(yZ,YIr),e(RC,KIr),e(ce,ZIr),e(ce,PC),e(PC,kEe),e(kEe,eNr),e(PC,oNr),e(PC,xZ),e(xZ,rNr),e(PC,tNr),e(ce,aNr),e(ce,BC),e(BC,SEe),e(SEe,nNr),e(BC,sNr),e(BC,$Z),e($Z,lNr),e(BC,iNr),e(ce,dNr),e(ce,IC),e(IC,REe),e(REe,cNr),e(IC,fNr),e(IC,kZ),e(kZ,mNr),e(IC,gNr),e(ce,hNr),e(ce,NC),e(NC,PEe),e(PEe,pNr),e(NC,_Nr),e(NC,SZ),e(SZ,uNr),e(NC,bNr),e(ce,vNr),e(ce,qC),e(qC,BEe),e(BEe,FNr),e(qC,TNr),e(qC,RZ),e(RZ,MNr),e(qC,ENr),e(ce,CNr),e(ce,jC),e(jC,IEe),e(IEe,wNr),e(jC,ANr),e(jC,PZ),e(PZ,LNr),e(jC,yNr),e(ce,xNr),e(ce,DC),e(DC,NEe),e(NEe,$Nr),e(DC,kNr),e(DC,BZ),e(BZ,SNr),e(DC,RNr),e(ce,PNr),e(ce,GC),e(GC,qEe),e(qEe,BNr),e(GC,INr),e(GC,IZ),e(IZ,NNr),e(GC,qNr),e(ce,jNr),e(ce,OC),e(OC,jEe),e(jEe,DNr),e(OC,GNr),e(OC,NZ),e(NZ,ONr),e(OC,VNr),e(Dr,XNr),M(VC,Dr,null),b(f,yze,u),b(f,Oc,u),e(Oc,XC),e(XC,DEe),M(Yx,DEe,null),e(Oc,zNr),e(Oc,GEe),e(GEe,QNr),b(f,xze,u),b(f,gr,u),M(Kx,gr,null),e(gr,WNr),e(gr,Vc),e(Vc,HNr),e(Vc,qZ),e(qZ,UNr),e(Vc,JNr),e(Vc,jZ),e(jZ,YNr),e(Vc,KNr),e(gr,ZNr),e(gr,Zx),e(Zx,eqr),e(Zx,OEe),e(OEe,oqr),e(Zx,rqr),e(gr,tqr),e(gr,zt),M(e$,zt,null),e(zt,aqr),e(zt,VEe),e(VEe,nqr),e(zt,sqr),e(zt,Xc),e(Xc,lqr),e(Xc,XEe),e(XEe,iqr),e(Xc,dqr),e(Xc,DZ),e(DZ,cqr),e(Xc,fqr),e(zt,mqr),M(zC,zt,null),e(gr,gqr),e(gr,Gr),M(o$,Gr,null),e(Gr,hqr),e(Gr,zEe),e(zEe,pqr),e(Gr,_qr),e(Gr,vn),e(vn,uqr),e(vn,QEe),e(QEe,bqr),e(vn,vqr),e(vn,WEe),e(WEe,Fqr),e(vn,Tqr),e(vn,HEe),e(HEe,Mqr),e(vn,Eqr),e(Gr,Cqr),e(Gr,UEe),e(UEe,QC),e(QC,JEe),e(JEe,wqr),e(QC,Aqr),e(QC,GZ),e(GZ,Lqr),e(QC,yqr),e(Gr,xqr),M(WC,Gr,null),b(f,$ze,u),b(f,zc,u),e(zc,HC),e(HC,YEe),M(r$,YEe,null),e(zc,$qr),e(zc,KEe),e(KEe,kqr),b(f,kze,u),b(f,hr,u),M(t$,hr,null),e(hr,Sqr),e(hr,Qc),e(Qc,Rqr),e(Qc,OZ),e(OZ,Pqr),e(Qc,Bqr),e(Qc,VZ),e(VZ,Iqr),e(Qc,Nqr),e(hr,qqr),e(hr,a$),e(a$,jqr),e(a$,ZEe),e(ZEe,Dqr),e(a$,Gqr),e(hr,Oqr),e(hr,Qt),M(n$,Qt,null),e(Qt,Vqr),e(Qt,eCe),e(eCe,Xqr),e(Qt,zqr),e(Qt,Wc),e(Wc,Qqr),e(Wc,oCe),e(oCe,Wqr),e(Wc,Hqr),e(Wc,XZ),e(XZ,Uqr),e(Wc,Jqr),e(Qt,Yqr),M(UC,Qt,null),e(hr,Kqr),e(hr,Or),M(s$,Or,null),e(Or,Zqr),e(Or,rCe),e(rCe,ejr),e(Or,ojr),e(Or,Fn),e(Fn,rjr),e(Fn,tCe),e(tCe,tjr),e(Fn,ajr),e(Fn,aCe),e(aCe,njr),e(Fn,sjr),e(Fn,nCe),e(nCe,ljr),e(Fn,ijr),e(Or,djr),e(Or,sCe),e(sCe,JC),e(JC,lCe),e(lCe,cjr),e(JC,fjr),e(JC,zZ),e(zZ,mjr),e(JC,gjr),e(Or,hjr),M(YC,Or,null),b(f,Sze,u),b(f,Hc,u),e(Hc,KC),e(KC,iCe),M(l$,iCe,null),e(Hc,pjr),e(Hc,dCe),e(dCe,_jr),b(f,Rze,u),b(f,pr,u),M(i$,pr,null),e(pr,ujr),e(pr,Uc),e(Uc,bjr),e(Uc,QZ),e(QZ,vjr),e(Uc,Fjr),e(Uc,WZ),e(WZ,Tjr),e(Uc,Mjr),e(pr,Ejr),e(pr,d$),e(d$,Cjr),e(d$,cCe),e(cCe,wjr),e(d$,Ajr),e(pr,Ljr),e(pr,Wt),M(c$,Wt,null),e(Wt,yjr),e(Wt,fCe),e(fCe,xjr),e(Wt,$jr),e(Wt,Jc),e(Jc,kjr),e(Jc,mCe),e(mCe,Sjr),e(Jc,Rjr),e(Jc,HZ),e(HZ,Pjr),e(Jc,Bjr),e(Wt,Ijr),M(ZC,Wt,null),e(pr,Njr),e(pr,Vr),M(f$,Vr,null),e(Vr,qjr),e(Vr,gCe),e(gCe,jjr),e(Vr,Djr),e(Vr,Tn),e(Tn,Gjr),e(Tn,hCe),e(hCe,Ojr),e(Tn,Vjr),e(Tn,pCe),e(pCe,Xjr),e(Tn,zjr),e(Tn,_Ce),e(_Ce,Qjr),e(Tn,Wjr),e(Vr,Hjr),e(Vr,oe),e(oe,e3),e(e3,uCe),e(uCe,Ujr),e(e3,Jjr),e(e3,UZ),e(UZ,Yjr),e(e3,Kjr),e(oe,Zjr),e(oe,o3),e(o3,bCe),e(bCe,eDr),e(o3,oDr),e(o3,JZ),e(JZ,rDr),e(o3,tDr),e(oe,aDr),e(oe,r3),e(r3,vCe),e(vCe,nDr),e(r3,sDr),e(r3,YZ),e(YZ,lDr),e(r3,iDr),e(oe,dDr),e(oe,t3),e(t3,FCe),e(FCe,cDr),e(t3,fDr),e(t3,KZ),e(KZ,mDr),e(t3,gDr),e(oe,hDr),e(oe,a3),e(a3,TCe),e(TCe,pDr),e(a3,_Dr),e(a3,ZZ),e(ZZ,uDr),e(a3,bDr),e(oe,vDr),e(oe,n3),e(n3,MCe),e(MCe,FDr),e(n3,TDr),e(n3,eee),e(eee,MDr),e(n3,EDr),e(oe,CDr),e(oe,s3),e(s3,ECe),e(ECe,wDr),e(s3,ADr),e(s3,oee),e(oee,LDr),e(s3,yDr),e(oe,xDr),e(oe,l3),e(l3,CCe),e(CCe,$Dr),e(l3,kDr),e(l3,ree),e(ree,SDr),e(l3,RDr),e(oe,PDr),e(oe,i3),e(i3,wCe),e(wCe,BDr),e(i3,IDr),e(i3,tee),e(tee,NDr),e(i3,qDr),e(oe,jDr),e(oe,d3),e(d3,ACe),e(ACe,DDr),e(d3,GDr),e(d3,aee),e(aee,ODr),e(d3,VDr),e(oe,XDr),e(oe,c3),e(c3,LCe),e(LCe,zDr),e(c3,QDr),e(c3,nee),e(nee,WDr),e(c3,HDr),e(oe,UDr),e(oe,f3),e(f3,yCe),e(yCe,JDr),e(f3,YDr),e(f3,see),e(see,KDr),e(f3,ZDr),e(oe,eGr),e(oe,m3),e(m3,xCe),e(xCe,oGr),e(m3,rGr),e(m3,lee),e(lee,tGr),e(m3,aGr),e(oe,nGr),e(oe,g3),e(g3,$Ce),e($Ce,sGr),e(g3,lGr),e(g3,iee),e(iee,iGr),e(g3,dGr),e(oe,cGr),e(oe,h3),e(h3,kCe),e(kCe,fGr),e(h3,mGr),e(h3,dee),e(dee,gGr),e(h3,hGr),e(oe,pGr),e(oe,p3),e(p3,SCe),e(SCe,_Gr),e(p3,uGr),e(p3,cee),e(cee,bGr),e(p3,vGr),e(oe,FGr),e(oe,_3),e(_3,RCe),e(RCe,TGr),e(_3,MGr),e(_3,fee),e(fee,EGr),e(_3,CGr),e(oe,wGr),e(oe,u3),e(u3,PCe),e(PCe,AGr),e(u3,LGr),e(u3,mee),e(mee,yGr),e(u3,xGr),e(oe,$Gr),e(oe,b3),e(b3,BCe),e(BCe,kGr),e(b3,SGr),e(b3,gee),e(gee,RGr),e(b3,PGr),e(oe,BGr),e(oe,v3),e(v3,ICe),e(ICe,IGr),e(v3,NGr),e(v3,hee),e(hee,qGr),e(v3,jGr),e(oe,DGr),e(oe,F3),e(F3,NCe),e(NCe,GGr),e(F3,OGr),e(F3,pee),e(pee,VGr),e(F3,XGr),e(oe,zGr),e(oe,T3),e(T3,qCe),e(qCe,QGr),e(T3,WGr),e(T3,_ee),e(_ee,HGr),e(T3,UGr),e(oe,JGr),e(oe,M3),e(M3,jCe),e(jCe,YGr),e(M3,KGr),e(M3,uee),e(uee,ZGr),e(M3,eOr),e(oe,oOr),e(oe,E3),e(E3,DCe),e(DCe,rOr),e(E3,tOr),e(E3,bee),e(bee,aOr),e(E3,nOr),e(oe,sOr),e(oe,C3),e(C3,GCe),e(GCe,lOr),e(C3,iOr),e(C3,vee),e(vee,dOr),e(C3,cOr),e(oe,fOr),e(oe,w3),e(w3,OCe),e(OCe,mOr),e(w3,gOr),e(w3,Fee),e(Fee,hOr),e(w3,pOr),e(oe,_Or),e(oe,A3),e(A3,VCe),e(VCe,uOr),e(A3,bOr),e(A3,Tee),e(Tee,vOr),e(A3,FOr),e(Vr,TOr),M(L3,Vr,null),b(f,Pze,u),b(f,Yc,u),e(Yc,y3),e(y3,XCe),M(m$,XCe,null),e(Yc,MOr),e(Yc,zCe),e(zCe,EOr),b(f,Bze,u),b(f,_r,u),M(g$,_r,null),e(_r,COr),e(_r,Kc),e(Kc,wOr),e(Kc,Mee),e(Mee,AOr),e(Kc,LOr),e(Kc,Eee),e(Eee,yOr),e(Kc,xOr),e(_r,$Or),e(_r,h$),e(h$,kOr),e(h$,QCe),e(QCe,SOr),e(h$,ROr),e(_r,POr),e(_r,Ht),M(p$,Ht,null),e(Ht,BOr),e(Ht,WCe),e(WCe,IOr),e(Ht,NOr),e(Ht,Zc),e(Zc,qOr),e(Zc,HCe),e(HCe,jOr),e(Zc,DOr),e(Zc,Cee),e(Cee,GOr),e(Zc,OOr),e(Ht,VOr),M(x3,Ht,null),e(_r,XOr),e(_r,Xr),M(_$,Xr,null),e(Xr,zOr),e(Xr,UCe),e(UCe,QOr),e(Xr,WOr),e(Xr,Mn),e(Mn,HOr),e(Mn,JCe),e(JCe,UOr),e(Mn,JOr),e(Mn,YCe),e(YCe,YOr),e(Mn,KOr),e(Mn,KCe),e(KCe,ZOr),e(Mn,eVr),e(Xr,oVr),e(Xr,xe),e(xe,$3),e($3,ZCe),e(ZCe,rVr),e($3,tVr),e($3,wee),e(wee,aVr),e($3,nVr),e(xe,sVr),e(xe,k3),e(k3,e3e),e(e3e,lVr),e(k3,iVr),e(k3,Aee),e(Aee,dVr),e(k3,cVr),e(xe,fVr),e(xe,S3),e(S3,o3e),e(o3e,mVr),e(S3,gVr),e(S3,Lee),e(Lee,hVr),e(S3,pVr),e(xe,_Vr),e(xe,R3),e(R3,r3e),e(r3e,uVr),e(R3,bVr),e(R3,yee),e(yee,vVr),e(R3,FVr),e(xe,TVr),e(xe,P3),e(P3,t3e),e(t3e,MVr),e(P3,EVr),e(P3,xee),e(xee,CVr),e(P3,wVr),e(xe,AVr),e(xe,B3),e(B3,a3e),e(a3e,LVr),e(B3,yVr),e(B3,$ee),e($ee,xVr),e(B3,$Vr),e(xe,kVr),e(xe,I3),e(I3,n3e),e(n3e,SVr),e(I3,RVr),e(I3,kee),e(kee,PVr),e(I3,BVr),e(xe,IVr),e(xe,N3),e(N3,s3e),e(s3e,NVr),e(N3,qVr),e(N3,See),e(See,jVr),e(N3,DVr),e(xe,GVr),e(xe,q3),e(q3,l3e),e(l3e,OVr),e(q3,VVr),e(q3,Ree),e(Ree,XVr),e(q3,zVr),e(xe,QVr),e(xe,j3),e(j3,i3e),e(i3e,WVr),e(j3,HVr),e(j3,Pee),e(Pee,UVr),e(j3,JVr),e(Xr,YVr),M(D3,Xr,null),b(f,Ize,u),b(f,ef,u),e(ef,G3),e(G3,d3e),M(u$,d3e,null),e(ef,KVr),e(ef,c3e),e(c3e,ZVr),b(f,Nze,u),b(f,ur,u),M(b$,ur,null),e(ur,eXr),e(ur,of),e(of,oXr),e(of,Bee),e(Bee,rXr),e(of,tXr),e(of,Iee),e(Iee,aXr),e(of,nXr),e(ur,sXr),e(ur,v$),e(v$,lXr),e(v$,f3e),e(f3e,iXr),e(v$,dXr),e(ur,cXr),e(ur,Ut),M(F$,Ut,null),e(Ut,fXr),e(Ut,m3e),e(m3e,mXr),e(Ut,gXr),e(Ut,rf),e(rf,hXr),e(rf,g3e),e(g3e,pXr),e(rf,_Xr),e(rf,Nee),e(Nee,uXr),e(rf,bXr),e(Ut,vXr),M(O3,Ut,null),e(ur,FXr),e(ur,zr),M(T$,zr,null),e(zr,TXr),e(zr,h3e),e(h3e,MXr),e(zr,EXr),e(zr,En),e(En,CXr),e(En,p3e),e(p3e,wXr),e(En,AXr),e(En,_3e),e(_3e,LXr),e(En,yXr),e(En,u3e),e(u3e,xXr),e(En,$Xr),e(zr,kXr),e(zr,Ee),e(Ee,V3),e(V3,b3e),e(b3e,SXr),e(V3,RXr),e(V3,qee),e(qee,PXr),e(V3,BXr),e(Ee,IXr),e(Ee,X3),e(X3,v3e),e(v3e,NXr),e(X3,qXr),e(X3,jee),e(jee,jXr),e(X3,DXr),e(Ee,GXr),e(Ee,z3),e(z3,F3e),e(F3e,OXr),e(z3,VXr),e(z3,Dee),e(Dee,XXr),e(z3,zXr),e(Ee,QXr),e(Ee,Q3),e(Q3,T3e),e(T3e,WXr),e(Q3,HXr),e(Q3,Gee),e(Gee,UXr),e(Q3,JXr),e(Ee,YXr),e(Ee,W3),e(W3,M3e),e(M3e,KXr),e(W3,ZXr),e(W3,Oee),e(Oee,ezr),e(W3,ozr),e(Ee,rzr),e(Ee,H3),e(H3,E3e),e(E3e,tzr),e(H3,azr),e(H3,Vee),e(Vee,nzr),e(H3,szr),e(Ee,lzr),e(Ee,U3),e(U3,C3e),e(C3e,izr),e(U3,dzr),e(U3,Xee),e(Xee,czr),e(U3,fzr),e(Ee,mzr),e(Ee,J3),e(J3,w3e),e(w3e,gzr),e(J3,hzr),e(J3,zee),e(zee,pzr),e(J3,_zr),e(Ee,uzr),e(Ee,Y3),e(Y3,A3e),e(A3e,bzr),e(Y3,vzr),e(Y3,Qee),e(Qee,Fzr),e(Y3,Tzr),e(Ee,Mzr),e(Ee,K3),e(K3,L3e),e(L3e,Ezr),e(K3,Czr),e(K3,Wee),e(Wee,wzr),e(K3,Azr),e(Ee,Lzr),e(Ee,Z3),e(Z3,y3e),e(y3e,yzr),e(Z3,xzr),e(Z3,Hee),e(Hee,$zr),e(Z3,kzr),e(Ee,Szr),e(Ee,e5),e(e5,x3e),e(x3e,Rzr),e(e5,Pzr),e(e5,Uee),e(Uee,Bzr),e(e5,Izr),e(Ee,Nzr),e(Ee,o5),e(o5,$3e),e($3e,qzr),e(o5,jzr),e(o5,Jee),e(Jee,Dzr),e(o5,Gzr),e(zr,Ozr),M(r5,zr,null),b(f,qze,u),b(f,tf,u),e(tf,t5),e(t5,k3e),M(M$,k3e,null),e(tf,Vzr),e(tf,S3e),e(S3e,Xzr),b(f,jze,u),b(f,br,u),M(E$,br,null),e(br,zzr),e(br,af),e(af,Qzr),e(af,Yee),e(Yee,Wzr),e(af,Hzr),e(af,Kee),e(Kee,Uzr),e(af,Jzr),e(br,Yzr),e(br,C$),e(C$,Kzr),e(C$,R3e),e(R3e,Zzr),e(C$,eQr),e(br,oQr),e(br,Jt),M(w$,Jt,null),e(Jt,rQr),e(Jt,P3e),e(P3e,tQr),e(Jt,aQr),e(Jt,nf),e(nf,nQr),e(nf,B3e),e(B3e,sQr),e(nf,lQr),e(nf,Zee),e(Zee,iQr),e(nf,dQr),e(Jt,cQr),M(a5,Jt,null),e(br,fQr),e(br,Qr),M(A$,Qr,null),e(Qr,mQr),e(Qr,I3e),e(I3e,gQr),e(Qr,hQr),e(Qr,Cn),e(Cn,pQr),e(Cn,N3e),e(N3e,_Qr),e(Cn,uQr),e(Cn,q3e),e(q3e,bQr),e(Cn,vQr),e(Cn,j3e),e(j3e,FQr),e(Cn,TQr),e(Qr,MQr),e(Qr,$e),e($e,n5),e(n5,D3e),e(D3e,EQr),e(n5,CQr),e(n5,eoe),e(eoe,wQr),e(n5,AQr),e($e,LQr),e($e,s5),e(s5,G3e),e(G3e,yQr),e(s5,xQr),e(s5,ooe),e(ooe,$Qr),e(s5,kQr),e($e,SQr),e($e,l5),e(l5,O3e),e(O3e,RQr),e(l5,PQr),e(l5,roe),e(roe,BQr),e(l5,IQr),e($e,NQr),e($e,i5),e(i5,V3e),e(V3e,qQr),e(i5,jQr),e(i5,toe),e(toe,DQr),e(i5,GQr),e($e,OQr),e($e,d5),e(d5,X3e),e(X3e,VQr),e(d5,XQr),e(d5,aoe),e(aoe,zQr),e(d5,QQr),e($e,WQr),e($e,c5),e(c5,z3e),e(z3e,HQr),e(c5,UQr),e(c5,noe),e(noe,JQr),e(c5,YQr),e($e,KQr),e($e,f5),e(f5,Q3e),e(Q3e,ZQr),e(f5,eWr),e(f5,soe),e(soe,oWr),e(f5,rWr),e($e,tWr),e($e,m5),e(m5,W3e),e(W3e,aWr),e(m5,nWr),e(m5,loe),e(loe,sWr),e(m5,lWr),e($e,iWr),e($e,g5),e(g5,H3e),e(H3e,dWr),e(g5,cWr),e(g5,ioe),e(ioe,fWr),e(g5,mWr),e($e,gWr),e($e,h5),e(h5,U3e),e(U3e,hWr),e(h5,pWr),e(h5,doe),e(doe,_Wr),e(h5,uWr),e(Qr,bWr),M(p5,Qr,null),b(f,Dze,u),b(f,sf,u),e(sf,_5),e(_5,J3e),M(L$,J3e,null),e(sf,vWr),e(sf,Y3e),e(Y3e,FWr),b(f,Gze,u),b(f,vr,u),M(y$,vr,null),e(vr,TWr),e(vr,lf),e(lf,MWr),e(lf,coe),e(coe,EWr),e(lf,CWr),e(lf,foe),e(foe,wWr),e(lf,AWr),e(vr,LWr),e(vr,x$),e(x$,yWr),e(x$,K3e),e(K3e,xWr),e(x$,$Wr),e(vr,kWr),e(vr,Yt),M($$,Yt,null),e(Yt,SWr),e(Yt,Z3e),e(Z3e,RWr),e(Yt,PWr),e(Yt,df),e(df,BWr),e(df,e5e),e(e5e,IWr),e(df,NWr),e(df,moe),e(moe,qWr),e(df,jWr),e(Yt,DWr),M(u5,Yt,null),e(vr,GWr),e(vr,Wr),M(k$,Wr,null),e(Wr,OWr),e(Wr,o5e),e(o5e,VWr),e(Wr,XWr),e(Wr,wn),e(wn,zWr),e(wn,r5e),e(r5e,QWr),e(wn,WWr),e(wn,t5e),e(t5e,HWr),e(wn,UWr),e(wn,a5e),e(a5e,JWr),e(wn,YWr),e(Wr,KWr),e(Wr,ke),e(ke,b5),e(b5,n5e),e(n5e,ZWr),e(b5,eHr),e(b5,goe),e(goe,oHr),e(b5,rHr),e(ke,tHr),e(ke,v5),e(v5,s5e),e(s5e,aHr),e(v5,nHr),e(v5,hoe),e(hoe,sHr),e(v5,lHr),e(ke,iHr),e(ke,F5),e(F5,l5e),e(l5e,dHr),e(F5,cHr),e(F5,poe),e(poe,fHr),e(F5,mHr),e(ke,gHr),e(ke,T5),e(T5,i5e),e(i5e,hHr),e(T5,pHr),e(T5,_oe),e(_oe,_Hr),e(T5,uHr),e(ke,bHr),e(ke,M5),e(M5,d5e),e(d5e,vHr),e(M5,FHr),e(M5,uoe),e(uoe,THr),e(M5,MHr),e(ke,EHr),e(ke,E5),e(E5,c5e),e(c5e,CHr),e(E5,wHr),e(E5,boe),e(boe,AHr),e(E5,LHr),e(ke,yHr),e(ke,C5),e(C5,f5e),e(f5e,xHr),e(C5,$Hr),e(C5,voe),e(voe,kHr),e(C5,SHr),e(ke,RHr),e(ke,w5),e(w5,m5e),e(m5e,PHr),e(w5,BHr),e(w5,Foe),e(Foe,IHr),e(w5,NHr),e(ke,qHr),e(ke,A5),e(A5,g5e),e(g5e,jHr),e(A5,DHr),e(A5,Toe),e(Toe,GHr),e(A5,OHr),e(ke,VHr),e(ke,L5),e(L5,h5e),e(h5e,XHr),e(L5,zHr),e(L5,Moe),e(Moe,QHr),e(L5,WHr),e(Wr,HHr),M(y5,Wr,null),b(f,Oze,u),b(f,cf,u),e(cf,x5),e(x5,p5e),M(S$,p5e,null),e(cf,UHr),e(cf,_5e),e(_5e,JHr),b(f,Vze,u),b(f,Fr,u),M(R$,Fr,null),e(Fr,YHr),e(Fr,ff),e(ff,KHr),e(ff,Eoe),e(Eoe,ZHr),e(ff,eUr),e(ff,Coe),e(Coe,oUr),e(ff,rUr),e(Fr,tUr),e(Fr,P$),e(P$,aUr),e(P$,u5e),e(u5e,nUr),e(P$,sUr),e(Fr,lUr),e(Fr,Kt),M(B$,Kt,null),e(Kt,iUr),e(Kt,b5e),e(b5e,dUr),e(Kt,cUr),e(Kt,mf),e(mf,fUr),e(mf,v5e),e(v5e,mUr),e(mf,gUr),e(mf,woe),e(woe,hUr),e(mf,pUr),e(Kt,_Ur),M($5,Kt,null),e(Fr,uUr),e(Fr,Hr),M(I$,Hr,null),e(Hr,bUr),e(Hr,F5e),e(F5e,vUr),e(Hr,FUr),e(Hr,An),e(An,TUr),e(An,T5e),e(T5e,MUr),e(An,EUr),e(An,M5e),e(M5e,CUr),e(An,wUr),e(An,E5e),e(E5e,AUr),e(An,LUr),e(Hr,yUr),e(Hr,Se),e(Se,k5),e(k5,C5e),e(C5e,xUr),e(k5,$Ur),e(k5,Aoe),e(Aoe,kUr),e(k5,SUr),e(Se,RUr),e(Se,S5),e(S5,w5e),e(w5e,PUr),e(S5,BUr),e(S5,Loe),e(Loe,IUr),e(S5,NUr),e(Se,qUr),e(Se,R5),e(R5,A5e),e(A5e,jUr),e(R5,DUr),e(R5,yoe),e(yoe,GUr),e(R5,OUr),e(Se,VUr),e(Se,P5),e(P5,L5e),e(L5e,XUr),e(P5,zUr),e(P5,xoe),e(xoe,QUr),e(P5,WUr),e(Se,HUr),e(Se,B5),e(B5,y5e),e(y5e,UUr),e(B5,JUr),e(B5,$oe),e($oe,YUr),e(B5,KUr),e(Se,ZUr),e(Se,I5),e(I5,x5e),e(x5e,eJr),e(I5,oJr),e(I5,koe),e(koe,rJr),e(I5,tJr),e(Se,aJr),e(Se,N5),e(N5,$5e),e($5e,nJr),e(N5,sJr),e(N5,Soe),e(Soe,lJr),e(N5,iJr),e(Se,dJr),e(Se,q5),e(q5,k5e),e(k5e,cJr),e(q5,fJr),e(q5,Roe),e(Roe,mJr),e(q5,gJr),e(Se,hJr),e(Se,j5),e(j5,S5e),e(S5e,pJr),e(j5,_Jr),e(j5,Poe),e(Poe,uJr),e(j5,bJr),e(Se,vJr),e(Se,D5),e(D5,R5e),e(R5e,FJr),e(D5,TJr),e(D5,Boe),e(Boe,MJr),e(D5,EJr),e(Hr,CJr),M(G5,Hr,null),b(f,Xze,u),b(f,gf,u),e(gf,O5),e(O5,P5e),M(N$,P5e,null),e(gf,wJr),e(gf,B5e),e(B5e,AJr),b(f,zze,u),b(f,Tr,u),M(q$,Tr,null),e(Tr,LJr),e(Tr,hf),e(hf,yJr),e(hf,Ioe),e(Ioe,xJr),e(hf,$Jr),e(hf,Noe),e(Noe,kJr),e(hf,SJr),e(Tr,RJr),e(Tr,j$),e(j$,PJr),e(j$,I5e),e(I5e,BJr),e(j$,IJr),e(Tr,NJr),e(Tr,Zt),M(D$,Zt,null),e(Zt,qJr),e(Zt,N5e),e(N5e,jJr),e(Zt,DJr),e(Zt,pf),e(pf,GJr),e(pf,q5e),e(q5e,OJr),e(pf,VJr),e(pf,qoe),e(qoe,XJr),e(pf,zJr),e(Zt,QJr),M(V5,Zt,null),e(Tr,WJr),e(Tr,Ur),M(G$,Ur,null),e(Ur,HJr),e(Ur,j5e),e(j5e,UJr),e(Ur,JJr),e(Ur,Ln),e(Ln,YJr),e(Ln,D5e),e(D5e,KJr),e(Ln,ZJr),e(Ln,G5e),e(G5e,eYr),e(Ln,oYr),e(Ln,O5e),e(O5e,rYr),e(Ln,tYr),e(Ur,aYr),e(Ur,Re),e(Re,X5),e(X5,V5e),e(V5e,nYr),e(X5,sYr),e(X5,joe),e(joe,lYr),e(X5,iYr),e(Re,dYr),e(Re,z5),e(z5,X5e),e(X5e,cYr),e(z5,fYr),e(z5,Doe),e(Doe,mYr),e(z5,gYr),e(Re,hYr),e(Re,Q5),e(Q5,z5e),e(z5e,pYr),e(Q5,_Yr),e(Q5,Goe),e(Goe,uYr),e(Q5,bYr),e(Re,vYr),e(Re,W5),e(W5,Q5e),e(Q5e,FYr),e(W5,TYr),e(W5,Ooe),e(Ooe,MYr),e(W5,EYr),e(Re,CYr),e(Re,H5),e(H5,W5e),e(W5e,wYr),e(H5,AYr),e(H5,Voe),e(Voe,LYr),e(H5,yYr),e(Re,xYr),e(Re,U5),e(U5,H5e),e(H5e,$Yr),e(U5,kYr),e(U5,Xoe),e(Xoe,SYr),e(U5,RYr),e(Re,PYr),e(Re,J5),e(J5,U5e),e(U5e,BYr),e(J5,IYr),e(J5,zoe),e(zoe,NYr),e(J5,qYr),e(Re,jYr),e(Re,Y5),e(Y5,J5e),e(J5e,DYr),e(Y5,GYr),e(Y5,Qoe),e(Qoe,OYr),e(Y5,VYr),e(Re,XYr),e(Re,K5),e(K5,Y5e),e(Y5e,zYr),e(K5,QYr),e(K5,Woe),e(Woe,WYr),e(K5,HYr),e(Re,UYr),e(Re,Z5),e(Z5,K5e),e(K5e,JYr),e(Z5,YYr),e(Z5,Hoe),e(Hoe,KYr),e(Z5,ZYr),e(Ur,eKr),M(e0,Ur,null),b(f,Qze,u),b(f,_f,u),e(_f,o0),e(o0,Z5e),M(O$,Z5e,null),e(_f,oKr),e(_f,e0e),e(e0e,rKr),b(f,Wze,u),b(f,Mr,u),M(V$,Mr,null),e(Mr,tKr),e(Mr,uf),e(uf,aKr),e(uf,Uoe),e(Uoe,nKr),e(uf,sKr),e(uf,Joe),e(Joe,lKr),e(uf,iKr),e(Mr,dKr),e(Mr,X$),e(X$,cKr),e(X$,o0e),e(o0e,fKr),e(X$,mKr),e(Mr,gKr),e(Mr,ea),M(z$,ea,null),e(ea,hKr),e(ea,r0e),e(r0e,pKr),e(ea,_Kr),e(ea,bf),e(bf,uKr),e(bf,t0e),e(t0e,bKr),e(bf,vKr),e(bf,Yoe),e(Yoe,FKr),e(bf,TKr),e(ea,MKr),M(r0,ea,null),e(Mr,EKr),e(Mr,Jr),M(Q$,Jr,null),e(Jr,CKr),e(Jr,a0e),e(a0e,wKr),e(Jr,AKr),e(Jr,yn),e(yn,LKr),e(yn,n0e),e(n0e,yKr),e(yn,xKr),e(yn,s0e),e(s0e,$Kr),e(yn,kKr),e(yn,l0e),e(l0e,SKr),e(yn,RKr),e(Jr,PKr),e(Jr,Ve),e(Ve,t0),e(t0,i0e),e(i0e,BKr),e(t0,IKr),e(t0,Koe),e(Koe,NKr),e(t0,qKr),e(Ve,jKr),e(Ve,a0),e(a0,d0e),e(d0e,DKr),e(a0,GKr),e(a0,Zoe),e(Zoe,OKr),e(a0,VKr),e(Ve,XKr),e(Ve,n0),e(n0,c0e),e(c0e,zKr),e(n0,QKr),e(n0,ere),e(ere,WKr),e(n0,HKr),e(Ve,UKr),e(Ve,s0),e(s0,f0e),e(f0e,JKr),e(s0,YKr),e(s0,ore),e(ore,KKr),e(s0,ZKr),e(Ve,eZr),e(Ve,l0),e(l0,m0e),e(m0e,oZr),e(l0,rZr),e(l0,rre),e(rre,tZr),e(l0,aZr),e(Ve,nZr),e(Ve,i0),e(i0,g0e),e(g0e,sZr),e(i0,lZr),e(i0,tre),e(tre,iZr),e(i0,dZr),e(Ve,cZr),e(Ve,d0),e(d0,h0e),e(h0e,fZr),e(d0,mZr),e(d0,are),e(are,gZr),e(d0,hZr),e(Ve,pZr),e(Ve,c0),e(c0,p0e),e(p0e,_Zr),e(c0,uZr),e(c0,nre),e(nre,bZr),e(c0,vZr),e(Jr,FZr),M(f0,Jr,null),b(f,Hze,u),b(f,vf,u),e(vf,m0),e(m0,_0e),M(W$,_0e,null),e(vf,TZr),e(vf,u0e),e(u0e,MZr),b(f,Uze,u),b(f,Er,u),M(H$,Er,null),e(Er,EZr),e(Er,Ff),e(Ff,CZr),e(Ff,sre),e(sre,wZr),e(Ff,AZr),e(Ff,lre),e(lre,LZr),e(Ff,yZr),e(Er,xZr),e(Er,U$),e(U$,$Zr),e(U$,b0e),e(b0e,kZr),e(U$,SZr),e(Er,RZr),e(Er,oa),M(J$,oa,null),e(oa,PZr),e(oa,v0e),e(v0e,BZr),e(oa,IZr),e(oa,Tf),e(Tf,NZr),e(Tf,F0e),e(F0e,qZr),e(Tf,jZr),e(Tf,ire),e(ire,DZr),e(Tf,GZr),e(oa,OZr),M(g0,oa,null),e(Er,VZr),e(Er,Yr),M(Y$,Yr,null),e(Yr,XZr),e(Yr,T0e),e(T0e,zZr),e(Yr,QZr),e(Yr,xn),e(xn,WZr),e(xn,M0e),e(M0e,HZr),e(xn,UZr),e(xn,E0e),e(E0e,JZr),e(xn,YZr),e(xn,C0e),e(C0e,KZr),e(xn,ZZr),e(Yr,eet),e(Yr,Xe),e(Xe,h0),e(h0,w0e),e(w0e,oet),e(h0,ret),e(h0,dre),e(dre,tet),e(h0,aet),e(Xe,net),e(Xe,p0),e(p0,A0e),e(A0e,set),e(p0,iet),e(p0,cre),e(cre,det),e(p0,cet),e(Xe,fet),e(Xe,_0),e(_0,L0e),e(L0e,met),e(_0,get),e(_0,fre),e(fre,het),e(_0,pet),e(Xe,_et),e(Xe,u0),e(u0,y0e),e(y0e,uet),e(u0,bet),e(u0,mre),e(mre,vet),e(u0,Fet),e(Xe,Tet),e(Xe,b0),e(b0,x0e),e(x0e,Met),e(b0,Eet),e(b0,gre),e(gre,Cet),e(b0,wet),e(Xe,Aet),e(Xe,v0),e(v0,$0e),e($0e,Let),e(v0,yet),e(v0,hre),e(hre,xet),e(v0,$et),e(Xe,ket),e(Xe,F0),e(F0,k0e),e(k0e,Set),e(F0,Ret),e(F0,pre),e(pre,Pet),e(F0,Bet),e(Xe,Iet),e(Xe,T0),e(T0,S0e),e(S0e,Net),e(T0,qet),e(T0,_re),e(_re,jet),e(T0,Det),e(Yr,Get),M(M0,Yr,null),b(f,Jze,u),b(f,Mf,u),e(Mf,E0),e(E0,R0e),M(K$,R0e,null),e(Mf,Oet),e(Mf,P0e),e(P0e,Vet),b(f,Yze,u),b(f,Cr,u),M(Z$,Cr,null),e(Cr,Xet),e(Cr,Ef),e(Ef,zet),e(Ef,ure),e(ure,Qet),e(Ef,Wet),e(Ef,bre),e(bre,Het),e(Ef,Uet),e(Cr,Jet),e(Cr,ek),e(ek,Yet),e(ek,B0e),e(B0e,Ket),e(ek,Zet),e(Cr,eot),e(Cr,ra),M(ok,ra,null),e(ra,oot),e(ra,I0e),e(I0e,rot),e(ra,tot),e(ra,Cf),e(Cf,aot),e(Cf,N0e),e(N0e,not),e(Cf,sot),e(Cf,vre),e(vre,lot),e(Cf,iot),e(ra,dot),M(C0,ra,null),e(Cr,cot),e(Cr,Kr),M(rk,Kr,null),e(Kr,fot),e(Kr,q0e),e(q0e,mot),e(Kr,got),e(Kr,$n),e($n,hot),e($n,j0e),e(j0e,pot),e($n,_ot),e($n,D0e),e(D0e,uot),e($n,bot),e($n,G0e),e(G0e,vot),e($n,Fot),e(Kr,Tot),e(Kr,O0e),e(O0e,w0),e(w0,V0e),e(V0e,Mot),e(w0,Eot),e(w0,Fre),e(Fre,Cot),e(w0,wot),e(Kr,Aot),M(A0,Kr,null),b(f,Kze,u),b(f,wf,u),e(wf,L0),e(L0,X0e),M(tk,X0e,null),e(wf,Lot),e(wf,z0e),e(z0e,yot),b(f,Zze,u),b(f,wr,u),M(ak,wr,null),e(wr,xot),e(wr,Af),e(Af,$ot),e(Af,Tre),e(Tre,kot),e(Af,Sot),e(Af,Mre),e(Mre,Rot),e(Af,Pot),e(wr,Bot),e(wr,nk),e(nk,Iot),e(nk,Q0e),e(Q0e,Not),e(nk,qot),e(wr,jot),e(wr,ta),M(sk,ta,null),e(ta,Dot),e(ta,W0e),e(W0e,Got),e(ta,Oot),e(ta,Lf),e(Lf,Vot),e(Lf,H0e),e(H0e,Xot),e(Lf,zot),e(Lf,Ere),e(Ere,Qot),e(Lf,Wot),e(ta,Hot),M(y0,ta,null),e(wr,Uot),e(wr,Zr),M(lk,Zr,null),e(Zr,Jot),e(Zr,U0e),e(U0e,Yot),e(Zr,Kot),e(Zr,kn),e(kn,Zot),e(kn,J0e),e(J0e,ert),e(kn,ort),e(kn,Y0e),e(Y0e,rrt),e(kn,trt),e(kn,K0e),e(K0e,art),e(kn,nrt),e(Zr,srt),e(Zr,ik),e(ik,x0),e(x0,Z0e),e(Z0e,lrt),e(x0,irt),e(x0,Cre),e(Cre,drt),e(x0,crt),e(ik,frt),e(ik,$0),e($0,ewe),e(ewe,mrt),e($0,grt),e($0,wre),e(wre,hrt),e($0,prt),e(Zr,_rt),M(k0,Zr,null),b(f,eQe,u),b(f,yf,u),e(yf,S0),e(S0,owe),M(dk,owe,null),e(yf,urt),e(yf,rwe),e(rwe,brt),b(f,oQe,u),b(f,Ar,u),M(ck,Ar,null),e(Ar,vrt),e(Ar,xf),e(xf,Frt),e(xf,Are),e(Are,Trt),e(xf,Mrt),e(xf,Lre),e(Lre,Ert),e(xf,Crt),e(Ar,wrt),e(Ar,fk),e(fk,Art),e(fk,twe),e(twe,Lrt),e(fk,yrt),e(Ar,xrt),e(Ar,aa),M(mk,aa,null),e(aa,$rt),e(aa,awe),e(awe,krt),e(aa,Srt),e(aa,$f),e($f,Rrt),e($f,nwe),e(nwe,Prt),e($f,Brt),e($f,yre),e(yre,Irt),e($f,Nrt),e(aa,qrt),M(R0,aa,null),e(Ar,jrt),e(Ar,et),M(gk,et,null),e(et,Drt),e(et,swe),e(swe,Grt),e(et,Ort),e(et,Sn),e(Sn,Vrt),e(Sn,lwe),e(lwe,Xrt),e(Sn,zrt),e(Sn,iwe),e(iwe,Qrt),e(Sn,Wrt),e(Sn,dwe),e(dwe,Hrt),e(Sn,Urt),e(et,Jrt),e(et,cwe),e(cwe,P0),e(P0,fwe),e(fwe,Yrt),e(P0,Krt),e(P0,xre),e(xre,Zrt),e(P0,ett),e(et,ott),M(B0,et,null),rQe=!0},p(f,[u]){const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),jf.$set(hk);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),Yg.$set(mwe);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),Rh.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),_p.$set(hwe);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),up.$set(pk);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),qp.$set(pwe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),jp.$set(Rn);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),Op.$set(_we);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),Qu.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),Hu.$set(bwe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),G1.$set(_k);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),V1.$set(vwe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),k2.$set(uk);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),R2.$set(Fwe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),vb.$set(bk);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),Tb.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),Gb.$set(Mwe);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),Vb.$set(Ewe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),Gv.$set(kf);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),Vv.$set(Cwe);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),TF.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),EF.$set(Awe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),kF.$set(vk);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),RF.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),u6.$set(ywe);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),v6.$set(xwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),dT.$set(nt);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),fT.$set(Fk);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),hT.$set($we);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),_T.$set(Tk);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),kT.$set(kwe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),RT.$set(st);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),IT.$set(Swe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),qT.$set(Sf);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),GT.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),VT.$set(Pwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),e8.$set(L);const I0={};u&2&&(I0.$$scope={dirty:u,ctx:f}),r8.$set(I0);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),d8.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),f8.$set(Iwe);const N0={};u&2&&(N0.$$scope={dirty:u,ctx:f}),E8.$set(N0);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),w8.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),x8.$set(qwe);const q0={};u&2&&(q0.$$scope={dirty:u,ctx:f}),k8.$set(q0);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),q8.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),D8.$set(Dwe);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),z8.$set(j0);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),W8.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),Y8.$set(Owe);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),Z8.$set(D0);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),r9.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),a9.$set(Xwe);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),f9.$set(G0);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),g9.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),_9.$set(Qwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),b9.$set(O0);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),hM.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),_M.$set(Hwe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),DM.$set(V0);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),OM.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),r4.$set(Jwe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),a4.$set(X0);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),f4.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),g4.$set(Kwe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),P4.$set(z0);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),I4.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),W4.$set(eAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),U4.$set(Q0);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),ME.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),CE.$set(rAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),OE.$set(W0);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),XE.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),WE.$set(aAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),UE.$set(H0);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),YE.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),ZE.$set(sAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),FC.$set(U0);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),MC.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),VC.$set(iAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),zC.$set(J0);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),WC.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),UC.$set(cAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),YC.$set(Y0);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),ZC.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),L3.$set(mAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),x3.$set(K0);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),D3.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),O3.$set(hAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),r5.$set(Z0);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),a5.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),p5.$set(_Ae);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),u5.$set(ew);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),y5.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),$5.$set(bAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),G5.$set(ow);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),V5.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),e0.$set(FAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),r0.$set(rw);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),f0.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),g0.$set(MAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),M0.$set(tw);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),C0.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),A0.$set(CAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),y0.$set(aw);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),k0.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),R0.$set(AAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),B0.$set(nw)},i(f){rQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(a7.$$.fragment,f),E(n7.$$.fragment,f),E(jf.$$.fragment,f),E(s7.$$.fragment,f),E(l7.$$.fragment,f),E(c7.$$.fragment,f),E(Yg.$$.fragment,f),E(f7.$$.fragment,f),E(m7.$$.fragment,f),E(g7.$$.fragment,f),E(_7.$$.fragment,f),E(Rh.$$.fragment,f),E(u7.$$.fragment,f),E(b7.$$.fragment,f),E(v7.$$.fragment,f),E(M7.$$.fragment,f),E(_p.$$.fragment,f),E(up.$$.fragment,f),E(E7.$$.fragment,f),E(C7.$$.fragment,f),E(w7.$$.fragment,f),E(y7.$$.fragment,f),E(qp.$$.fragment,f),E(jp.$$.fragment,f),E(x7.$$.fragment,f),E($7.$$.fragment,f),E(k7.$$.fragment,f),E(R7.$$.fragment,f),E(Op.$$.fragment,f),E(P7.$$.fragment,f),E(Qu.$$.fragment,f),E(B7.$$.fragment,f),E(I7.$$.fragment,f),E(q7.$$.fragment,f),E(Hu.$$.fragment,f),E(j7.$$.fragment,f),E(G1.$$.fragment,f),E(D7.$$.fragment,f),E(G7.$$.fragment,f),E(V7.$$.fragment,f),E(V1.$$.fragment,f),E(X7.$$.fragment,f),E(k2.$$.fragment,f),E(z7.$$.fragment,f),E(Q7.$$.fragment,f),E(H7.$$.fragment,f),E(R2.$$.fragment,f),E(U7.$$.fragment,f),E(vb.$$.fragment,f),E(J7.$$.fragment,f),E(Y7.$$.fragment,f),E(Z7.$$.fragment,f),E(Tb.$$.fragment,f),E(eL.$$.fragment,f),E(Gb.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(Vb.$$.fragment,f),E(nL.$$.fragment,f),E(Gv.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(Vv.$$.fragment,f),E(cL.$$.fragment,f),E(TF.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(EF.$$.fragment,f),E(pL.$$.fragment,f),E(kF.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(RF.$$.fragment,f),E(FL.$$.fragment,f),E(u6.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(v6.$$.fragment,f),E(wL.$$.fragment,f),E(dT.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(fT.$$.fragment,f),E($L.$$.fragment,f),E(hT.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(_T.$$.fragment,f),E(BL.$$.fragment,f),E(kT.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(RT.$$.fragment,f),E(DL.$$.fragment,f),E(IT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(qT.$$.fragment,f),E(zL.$$.fragment,f),E(GT.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(VT.$$.fragment,f),E(JL.$$.fragment,f),E(e8.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(r8.$$.fragment,f),E(oy.$$.fragment,f),E(d8.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(f8.$$.fragment,f),E(sy.$$.fragment,f),E(E8.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(w8.$$.fragment,f),E(fy.$$.fragment,f),E(x8.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(k8.$$.fragment,f),E(uy.$$.fragment,f),E(q8.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(D8.$$.fragment,f),E(My.$$.fragment,f),E(z8.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(W8.$$.fragment,f),E(Ly.$$.fragment,f),E(Y8.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Z8.$$.fragment,f),E(Ry.$$.fragment,f),E(r9.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(a9.$$.fragment,f),E(qy.$$.fragment,f),E(f9.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(g9.$$.fragment,f),E(Vy.$$.fragment,f),E(_9.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(b9.$$.fragment,f),E(Hy.$$.fragment,f),E(hM.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(_M.$$.fragment,f),E(Zy.$$.fragment,f),E(DM.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(OM.$$.fragment,f),E(ax.$$.fragment,f),E(r4.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(a4.$$.fragment,f),E(dx.$$.fragment,f),E(f4.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(g4.$$.fragment,f),E(hx.$$.fragment,f),E(P4.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(I4.$$.fragment,f),E(vx.$$.fragment,f),E(W4.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(U4.$$.fragment,f),E(Cx.$$.fragment,f),E(ME.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(CE.$$.fragment,f),E(xx.$$.fragment,f),E(OE.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(XE.$$.fragment,f),E(Px.$$.fragment,f),E(WE.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(UE.$$.fragment,f),E(Dx.$$.fragment,f),E(YE.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(ZE.$$.fragment,f),E(zx.$$.fragment,f),E(FC.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(MC.$$.fragment,f),E(Jx.$$.fragment,f),E(VC.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(zC.$$.fragment,f),E(o$.$$.fragment,f),E(WC.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(UC.$$.fragment,f),E(s$.$$.fragment,f),E(YC.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(ZC.$$.fragment,f),E(f$.$$.fragment,f),E(L3.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(x3.$$.fragment,f),E(_$.$$.fragment,f),E(D3.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(O3.$$.fragment,f),E(T$.$$.fragment,f),E(r5.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(a5.$$.fragment,f),E(A$.$$.fragment,f),E(p5.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(u5.$$.fragment,f),E(k$.$$.fragment,f),E(y5.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E($5.$$.fragment,f),E(I$.$$.fragment,f),E(G5.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(V5.$$.fragment,f),E(G$.$$.fragment,f),E(e0.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(r0.$$.fragment,f),E(Q$.$$.fragment,f),E(f0.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(g0.$$.fragment,f),E(Y$.$$.fragment,f),E(M0.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(C0.$$.fragment,f),E(rk.$$.fragment,f),E(A0.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(y0.$$.fragment,f),E(lk.$$.fragment,f),E(k0.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(R0.$$.fragment,f),E(gk.$$.fragment,f),E(B0.$$.fragment,f),rQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(a7.$$.fragment,f),C(n7.$$.fragment,f),C(jf.$$.fragment,f),C(s7.$$.fragment,f),C(l7.$$.fragment,f),C(c7.$$.fragment,f),C(Yg.$$.fragment,f),C(f7.$$.fragment,f),C(m7.$$.fragment,f),C(g7.$$.fragment,f),C(_7.$$.fragment,f),C(Rh.$$.fragment,f),C(u7.$$.fragment,f),C(b7.$$.fragment,f),C(v7.$$.fragment,f),C(M7.$$.fragment,f),C(_p.$$.fragment,f),C(up.$$.fragment,f),C(E7.$$.fragment,f),C(C7.$$.fragment,f),C(w7.$$.fragment,f),C(y7.$$.fragment,f),C(qp.$$.fragment,f),C(jp.$$.fragment,f),C(x7.$$.fragment,f),C($7.$$.fragment,f),C(k7.$$.fragment,f),C(R7.$$.fragment,f),C(Op.$$.fragment,f),C(P7.$$.fragment,f),C(Qu.$$.fragment,f),C(B7.$$.fragment,f),C(I7.$$.fragment,f),C(q7.$$.fragment,f),C(Hu.$$.fragment,f),C(j7.$$.fragment,f),C(G1.$$.fragment,f),C(D7.$$.fragment,f),C(G7.$$.fragment,f),C(V7.$$.fragment,f),C(V1.$$.fragment,f),C(X7.$$.fragment,f),C(k2.$$.fragment,f),C(z7.$$.fragment,f),C(Q7.$$.fragment,f),C(H7.$$.fragment,f),C(R2.$$.fragment,f),C(U7.$$.fragment,f),C(vb.$$.fragment,f),C(J7.$$.fragment,f),C(Y7.$$.fragment,f),C(Z7.$$.fragment,f),C(Tb.$$.fragment,f),C(eL.$$.fragment,f),C(Gb.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(Vb.$$.fragment,f),C(nL.$$.fragment,f),C(Gv.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(Vv.$$.fragment,f),C(cL.$$.fragment,f),C(TF.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(EF.$$.fragment,f),C(pL.$$.fragment,f),C(kF.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(RF.$$.fragment,f),C(FL.$$.fragment,f),C(u6.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(v6.$$.fragment,f),C(wL.$$.fragment,f),C(dT.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(fT.$$.fragment,f),C($L.$$.fragment,f),C(hT.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(_T.$$.fragment,f),C(BL.$$.fragment,f),C(kT.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(RT.$$.fragment,f),C(DL.$$.fragment,f),C(IT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(qT.$$.fragment,f),C(zL.$$.fragment,f),C(GT.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(VT.$$.fragment,f),C(JL.$$.fragment,f),C(e8.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(r8.$$.fragment,f),C(oy.$$.fragment,f),C(d8.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(f8.$$.fragment,f),C(sy.$$.fragment,f),C(E8.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(w8.$$.fragment,f),C(fy.$$.fragment,f),C(x8.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(k8.$$.fragment,f),C(uy.$$.fragment,f),C(q8.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(D8.$$.fragment,f),C(My.$$.fragment,f),C(z8.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(W8.$$.fragment,f),C(Ly.$$.fragment,f),C(Y8.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Z8.$$.fragment,f),C(Ry.$$.fragment,f),C(r9.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(a9.$$.fragment,f),C(qy.$$.fragment,f),C(f9.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(g9.$$.fragment,f),C(Vy.$$.fragment,f),C(_9.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(b9.$$.fragment,f),C(Hy.$$.fragment,f),C(hM.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(_M.$$.fragment,f),C(Zy.$$.fragment,f),C(DM.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(OM.$$.fragment,f),C(ax.$$.fragment,f),C(r4.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(a4.$$.fragment,f),C(dx.$$.fragment,f),C(f4.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(g4.$$.fragment,f),C(hx.$$.fragment,f),C(P4.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(I4.$$.fragment,f),C(vx.$$.fragment,f),C(W4.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(U4.$$.fragment,f),C(Cx.$$.fragment,f),C(ME.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(CE.$$.fragment,f),C(xx.$$.fragment,f),C(OE.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(XE.$$.fragment,f),C(Px.$$.fragment,f),C(WE.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(UE.$$.fragment,f),C(Dx.$$.fragment,f),C(YE.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(ZE.$$.fragment,f),C(zx.$$.fragment,f),C(FC.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(MC.$$.fragment,f),C(Jx.$$.fragment,f),C(VC.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(zC.$$.fragment,f),C(o$.$$.fragment,f),C(WC.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(UC.$$.fragment,f),C(s$.$$.fragment,f),C(YC.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(ZC.$$.fragment,f),C(f$.$$.fragment,f),C(L3.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(x3.$$.fragment,f),C(_$.$$.fragment,f),C(D3.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(O3.$$.fragment,f),C(T$.$$.fragment,f),C(r5.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(a5.$$.fragment,f),C(A$.$$.fragment,f),C(p5.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(u5.$$.fragment,f),C(k$.$$.fragment,f),C(y5.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C($5.$$.fragment,f),C(I$.$$.fragment,f),C(G5.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(V5.$$.fragment,f),C(G$.$$.fragment,f),C(e0.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(r0.$$.fragment,f),C(Q$.$$.fragment,f),C(f0.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(g0.$$.fragment,f),C(Y$.$$.fragment,f),C(M0.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(C0.$$.fragment,f),C(rk.$$.fragment,f),C(A0.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(y0.$$.fragment,f),C(lk.$$.fragment,f),C(k0.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(R0.$$.fragment,f),C(gk.$$.fragment,f),C(B0.$$.fragment,f),rQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Pf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(YVe),f&&t(Pi),w(a7),f&&t(KVe),f&&t(qn),f&&t(ZVe),w(n7,f),f&&t(eXe),f&&t(DS),f&&t(oXe),w(jf,f),f&&t(rXe),f&&t(Bi),w(s7),f&&t(tXe),f&&t(Ao),w(l7),w(c7),w(Yg),w(f7),f&&t(aXe),f&&t(Ni),w(m7),f&&t(nXe),f&&t(Lo),w(g7),w(_7),w(Rh),w(u7),f&&t(sXe),f&&t(qi),w(b7),f&&t(lXe),f&&t(yo),w(v7),w(M7),w(_p),w(up),w(E7),f&&t(iXe),f&&t(ji),w(C7),f&&t(dXe),f&&t(xo),w(w7),w(y7),w(qp),w(jp),w(x7),f&&t(cXe),f&&t(Gi),w($7),f&&t(fXe),f&&t($o),w(k7),w(R7),w(Op),w(P7),w(Qu),f&&t(mXe),f&&t(Xi),w(B7),f&&t(gXe),f&&t(ko),w(I7),w(q7),w(Hu),w(j7),w(G1),f&&t(hXe),f&&t(Wi),w(D7),f&&t(pXe),f&&t(So),w(G7),w(V7),w(V1),w(X7),w(k2),f&&t(_Xe),f&&t(Ji),w(z7),f&&t(uXe),f&&t(Ro),w(Q7),w(H7),w(R2),w(U7),w(vb),f&&t(bXe),f&&t(Zi),w(J7),f&&t(vXe),f&&t(Po),w(Y7),w(Z7),w(Tb),w(eL),w(Gb),f&&t(FXe),f&&t(rd),w(oL),f&&t(TXe),f&&t(Bo),w(rL),w(aL),w(Vb),w(nL),w(Gv),f&&t(MXe),f&&t(nd),w(sL),f&&t(EXe),f&&t(Io),w(lL),w(dL),w(Vv),w(cL),w(TF),f&&t(CXe),f&&t(id),w(fL),f&&t(wXe),f&&t(No),w(mL),w(hL),w(EF),w(pL),w(kF),f&&t(AXe),f&&t(fd),w(_L),f&&t(LXe),f&&t(jo),w(uL),w(vL),w(RF),w(FL),w(u6),f&&t(yXe),f&&t(hd),w(TL),f&&t(xXe),f&&t(Do),w(ML),w(CL),w(v6),w(wL),w(dT),f&&t($Xe),f&&t(ud),w(AL),f&&t(kXe),f&&t(Go),w(LL),w(xL),w(fT),w($L),w(hT),f&&t(SXe),f&&t(Fd),w(kL),f&&t(RXe),f&&t(Oo),w(SL),w(PL),w(_T),w(BL),w(kT),f&&t(PXe),f&&t(Ed),w(IL),f&&t(BXe),f&&t(Vo),w(NL),w(jL),w(RT),w(DL),w(IT),f&&t(IXe),f&&t(Ad),w(GL),f&&t(NXe),f&&t(Xo),w(OL),w(XL),w(qT),w(zL),w(GT),f&&t(qXe),f&&t(xd),w(QL),f&&t(jXe),f&&t(zo),w(WL),w(UL),w(VT),w(JL),w(e8),f&&t(DXe),f&&t(Sd),w(YL),f&&t(GXe),f&&t(Qo),w(KL),w(ey),w(r8),w(oy),w(d8),f&&t(OXe),f&&t(Bd),w(ry),f&&t(VXe),f&&t(Wo),w(ty),w(ny),w(f8),w(sy),w(E8),f&&t(XXe),f&&t(qd),w(ly),f&&t(zXe),f&&t(Ho),w(iy),w(cy),w(w8),w(fy),w(x8),f&&t(QXe),f&&t(Gd),w(gy),f&&t(WXe),f&&t(Uo),w(hy),w(_y),w(k8),w(uy),w(q8),f&&t(HXe),f&&t(Xd),w(by),f&&t(UXe),f&&t(Jo),w(vy),w(Ty),w(D8),w(My),w(z8),f&&t(JXe),f&&t(Hd),w(Ey),f&&t(YXe),f&&t(Yo),w(Cy),w(Ay),w(W8),w(Ly),w(Y8),f&&t(KXe),f&&t(Yd),w(xy),f&&t(ZXe),f&&t(Ko),w($y),w(Sy),w(Z8),w(Ry),w(r9),f&&t(eze),f&&t(ec),w(Py),f&&t(oze),f&&t(Zo),w(By),w(Ny),w(a9),w(qy),w(f9),f&&t(rze),f&&t(tc),w(jy),f&&t(tze),f&&t(er),w(Dy),w(Oy),w(g9),w(Vy),w(_9),f&&t(aze),f&&t(sc),w(Xy),f&&t(nze),f&&t(or),w(zy),w(Wy),w(b9),w(Hy),w(hM),f&&t(sze),f&&t(dc),w(Uy),f&&t(lze),f&&t(rr),w(Jy),w(Ky),w(_M),w(Zy),w(DM),f&&t(ize),f&&t(mc),w(ex),f&&t(dze),f&&t(tr),w(ox),w(tx),w(OM),w(ax),w(r4),f&&t(cze),f&&t(pc),w(nx),f&&t(fze),f&&t(ar),w(sx),w(ix),w(a4),w(dx),w(f4),f&&t(mze),f&&t(bc),w(cx),f&&t(gze),f&&t(nr),w(fx),w(gx),w(g4),w(hx),w(P4),f&&t(hze),f&&t(Tc),w(px),f&&t(pze),f&&t(sr),w(_x),w(bx),w(I4),w(vx),w(W4),f&&t(_ze),f&&t(Cc),w(Fx),f&&t(uze),f&&t(lr),w(Tx),w(Ex),w(U4),w(Cx),w(ME),f&&t(bze),f&&t(Lc),w(wx),f&&t(vze),f&&t(ir),w(Ax),w(yx),w(CE),w(xx),w(OE),f&&t(Fze),f&&t($c),w($x),f&&t(Tze),f&&t(dr),w(kx),w(Rx),w(XE),w(Px),w(WE),f&&t(Mze),f&&t(Rc),w(Ix),f&&t(Eze),f&&t(cr),w(Nx),w(jx),w(UE),w(Dx),w(YE),f&&t(Cze),f&&t(Ic),w(Gx),f&&t(wze),f&&t(fr),w(Ox),w(Xx),w(ZE),w(zx),w(FC),f&&t(Aze),f&&t(jc),w(Qx),f&&t(Lze),f&&t(mr),w(Wx),w(Ux),w(MC),w(Jx),w(VC),f&&t(yze),f&&t(Oc),w(Yx),f&&t(xze),f&&t(gr),w(Kx),w(e$),w(zC),w(o$),w(WC),f&&t($ze),f&&t(zc),w(r$),f&&t(kze),f&&t(hr),w(t$),w(n$),w(UC),w(s$),w(YC),f&&t(Sze),f&&t(Hc),w(l$),f&&t(Rze),f&&t(pr),w(i$),w(c$),w(ZC),w(f$),w(L3),f&&t(Pze),f&&t(Yc),w(m$),f&&t(Bze),f&&t(_r),w(g$),w(p$),w(x3),w(_$),w(D3),f&&t(Ize),f&&t(ef),w(u$),f&&t(Nze),f&&t(ur),w(b$),w(F$),w(O3),w(T$),w(r5),f&&t(qze),f&&t(tf),w(M$),f&&t(jze),f&&t(br),w(E$),w(w$),w(a5),w(A$),w(p5),f&&t(Dze),f&&t(sf),w(L$),f&&t(Gze),f&&t(vr),w(y$),w($$),w(u5),w(k$),w(y5),f&&t(Oze),f&&t(cf),w(S$),f&&t(Vze),f&&t(Fr),w(R$),w(B$),w($5),w(I$),w(G5),f&&t(Xze),f&&t(gf),w(N$),f&&t(zze),f&&t(Tr),w(q$),w(D$),w(V5),w(G$),w(e0),f&&t(Qze),f&&t(_f),w(O$),f&&t(Wze),f&&t(Mr),w(V$),w(z$),w(r0),w(Q$),w(f0),f&&t(Hze),f&&t(vf),w(W$),f&&t(Uze),f&&t(Er),w(H$),w(J$),w(g0),w(Y$),w(M0),f&&t(Jze),f&&t(Mf),w(K$),f&&t(Yze),f&&t(Cr),w(Z$),w(ok),w(C0),w(rk),w(A0),f&&t(Kze),f&&t(wf),w(tk),f&&t(Zze),f&&t(wr),w(ak),w(sk),w(y0),w(lk),w(k0),f&&t(eQe),f&&t(yf),w(dk),f&&t(oQe),f&&t(Ar),w(ck),w(mk),w(R0),w(gk),w(B0)}}}const BHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function IHt($){return PQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class VHt extends $Qt{constructor(g){super();kQt(this,g,IHt,PHt,SQt,{})}}export{VHt as default,BHt as metadata};
