import{S as Rl,i as Bl,s as Ol,F as Wl,e as a,w as $,k as c,c as s,a as i,x as k,d as t,m as h,b as u,g as d,G as o,y as P,P as Fl,H as Hl,I as Jl,J as Vl,q as w,o as y,B as x,v as Sl,T as Yl,U as Kl,t as l,M as Ql,h as r,L as Xl}from"../chunks/vendor-hf-doc-builder.js";import{T as Tt}from"../chunks/Tip-hf-doc-builder.js";import{D as nt}from"../chunks/Docstring-hf-doc-builder.js";import{C as G}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as Ue}from"../chunks/IconCopyLink-hf-doc-builder.js";const{window:Zl}=Yl;function er(E){let p,g,m,_,b,f,v,T,A;_=new Ue({props:{classNames:"text-smd"}});const U=E[4].default,C=Wl(U,E,E[3],null);return{c(){p=a("div"),g=a("a"),m=a("span"),$(_.$$.fragment),f=c(),C&&C.c(),this.h()},l(j){p=s(j,"DIV",{class:!0});var M=i(p);g=s(M,"A",{id:!0,class:!0,href:!0});var O=i(g);m=s(O,"SPAN",{});var Ce=i(m);k(_.$$.fragment,Ce),Ce.forEach(t),O.forEach(t),f=h(M),C&&C.l(M),M.forEach(t),this.h()},h(){u(g,"id",E[0]),u(g,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(g,"href",b=`#${E[0]}`),u(p,"class","relative group rounded-md")},m(j,M){d(j,p,M),o(p,g),o(g,m),P(_,m,null),o(p,f),C&&C.m(p,null),E[5](p),v=!0,T||(A=Fl(Zl,"hashchange",E[2]),T=!0)},p(j,[M]){(!v||M&1)&&u(g,"id",j[0]),(!v||M&1&&b!==(b=`#${j[0]}`))&&u(g,"href",b),C&&C.p&&(!v||M&8)&&Hl(C,U,j,j[3],v?Vl(U,j[3],M,null):Jl(j[3]),null)},i(j){v||(w(_.$$.fragment,j),w(C,j),v=!0)},o(j){y(_.$$.fragment,j),y(C,j),v=!1},d(j){j&&t(p),x(_),C&&C.d(j),E[5](null),T=!1,A()}}}const Gl="bg-yellow-50 dark:bg-[#494a3d]";function tr(E,p,g){let{$$slots:m={},$$scope:_}=p,{anchor:b}=p,f;function v(){const{hash:A}=window.location,U=A.substring(1);f&&f.classList.remove(...Gl.split(" ")),U===b&&f.classList.add(...Gl.split(" "))}Sl(()=>{v()});function T(A){Kl[A?"unshift":"push"](()=>{f=A,g(1,f)})}return E.$$set=A=>{"anchor"in A&&g(0,b=A.anchor),"$$scope"in A&&g(3,_=A.$$scope)},[b,f,v,_,m,T]}class or extends Rl{constructor(p){super();Bl(this,p,tr,er,Ol,{anchor:0})}}function ar(E){let p,g;return{c(){p=a("p"),g=l("This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future.")},l(m){p=s(m,"P",{});var _=i(p);g=r(_,"This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future."),_.forEach(t)},m(m,_){d(m,p,_),o(p,g)},d(m){m&&t(p)}}}function sr(E){let p,g;return{c(){p=a("p"),g=l("You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device.")},l(m){p=s(m,"P",{});var _=i(p);g=r(_,"You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device."),_.forEach(t)},m(m,_){d(m,p,_),o(p,g)},d(m){m&&t(p)}}}function nr(E){let p,g,m,_,b;return{c(){p=a("p"),g=l("This only supports inference of your model, not training. Most of the computation happens behind "),m=a("code"),_=l("torch.no_grad()"),b=l(" context managers to avoid spending some GPU memory with intermediate activations.")},l(f){p=s(f,"P",{});var v=i(p);g=r(v,"This only supports inference of your model, not training. Most of the computation happens behind "),m=s(v,"CODE",{});var T=i(m);_=r(T,"torch.no_grad()"),T.forEach(t),b=r(v," context managers to avoid spending some GPU memory with intermediate activations."),v.forEach(t)},m(f,v){d(f,p,v),o(p,g),o(p,m),o(m,_),o(p,b)},d(f){f&&t(p)}}}function ir(E){let p,g,m,_,b;return{c(){p=a("p"),g=l(`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),m=a("code"),_=l("init_empty_weights"),b=l(" context manager).")},l(f){p=s(f,"P",{});var v=i(p);g=r(v,`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),m=s(v,"CODE",{});var T=i(m);_=r(T,"init_empty_weights"),T.forEach(t),b=r(v," context manager)."),v.forEach(t)},m(f,v){d(f,p,v),o(p,g),o(p,m),o(m,_),o(p,b)},d(f){f&&t(p)}}}function lr(E){let p,g,m,_,b;return _=new G({props:{code:`import torch.nn as nn
from accelerate import init_empty_weights

<h1 class="relative group">
	<a 
		id="initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Initialize a model with 100 billions parameters in no time and without using any RAM.
	</span>
</h1>

with init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn
<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

&lt;h1 id=&quot;initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram&quot;&gt;Initialize a model <span class="hljs-keyword">with</span> <span class="hljs-number">100</span> billions parameters <span class="hljs-keyword">in</span> <span class="hljs-keyword">no</span> <span class="hljs-type">time</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">without</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">any</span> RAM.&lt;/h1&gt;
<span class="hljs-keyword">with</span> init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>)])`}}),{c(){p=a("p"),g=l("Example:"),m=c(),$(_.$$.fragment)},l(f){p=s(f,"P",{});var v=i(p);g=r(v,"Example:"),v.forEach(t),m=h(f),k(_.$$.fragment,f)},m(f,v){d(f,p,v),o(p,g),d(f,m,v),P(_,f,v),b=!0},p:Xl,i(f){b||(w(_.$$.fragment,f),b=!0)},o(f){y(_.$$.fragment,f),b=!1},d(f){f&&t(p),f&&t(m),x(_,f)}}}function rr(E){let p,g,m,_,b,f,v,T;return{c(){p=a("p"),g=l(`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),m=a("code"),_=l("model.to(some_device)"),b=l(" with it. To load weights inside your empty model, see "),f=a("a"),v=l("load_checkpoint_and_dispatch()"),T=l("."),this.h()},l(A){p=s(A,"P",{});var U=i(p);g=r(U,`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),m=s(U,"CODE",{});var C=i(m);_=r(C,"model.to(some_device)"),C.forEach(t),b=r(U," with it. To load weights inside your empty model, see "),f=s(U,"A",{href:!0});var j=i(f);v=r(j,"load_checkpoint_and_dispatch()"),j.forEach(t),T=r(U,"."),U.forEach(t),this.h()},h(){u(f,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(A,U){d(A,p,U),o(p,g),o(p,m),o(m,_),o(p,b),o(p,f),o(f,v),o(p,T)},d(A){A&&t(p)}}}function dr(E){let p,g,m,_,b,f,v,T;return{c(){p=a("p"),g=l("Once loaded across devices, you still need to call "),m=a("a"),_=l("dispatch_model()"),b=l(` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),f=a("a"),v=l("load_checkpoint_and_dispatch()"),T=l("."),this.h()},l(A){p=s(A,"P",{});var U=i(p);g=r(U,"Once loaded across devices, you still need to call "),m=s(U,"A",{href:!0});var C=i(m);_=r(C,"dispatch_model()"),C.forEach(t),b=r(U,` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),f=s(U,"A",{href:!0});var j=i(f);v=r(j,"load_checkpoint_and_dispatch()"),j.forEach(t),T=r(U,"."),U.forEach(t),this.h()},h(){u(m,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.dispatch_model"),u(f,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(A,U){d(A,p,U),o(p,g),o(p,m),o(m,_),o(p,b),o(p,f),o(f,v),o(p,T)},d(A){A&&t(p)}}}function cr(E){let p,g,m,_,b,f,v,T,A,U,C,j,M,O,Ce,it,Ya,zo,S,Lt,Ka,Qa,It,Xa,Za,Mt,es,Do,lt,ts,No,le,Go,Y,re,qt,Te,os,zt,as,Ro,de,ss,rt,ns,is,Bo,Le,Oo,dt,ls,So,Ie,Wo,ct,rs,Fo,ce,Ho,K,he,Dt,Me,ds,Nt,cs,Jo,ht,hs,Vo,pt,ps,Yo,qe,Ko,ft,fs,Qo,ze,Xo,I,ms,Gt,us,_s,Rt,gs,vs,Bt,ws,ys,Ot,bs,$s,St,ks,Ps,Wt,xs,Zo,Q,pe,Ft,De,js,Ht,Es,ea,fe,As,mt,Us,Cs,ta,me,Ts,Ne,Ls,Is,oa,Ge,aa,ut,Ms,sa,Re,na,_t,qs,ia,Be,la,ue,zs,Jt,Ds,Ns,ra,W,Vt,Gs,Rs,Yt,Bs,Os,Kt,Ss,da,X,Qt,Ws,Fs,Xt,Hs,Js,ca,F,Vs,Zt,Ys,Ks,eo,Qs,Xs,ha,Oe,pa,Se,fa,_e,Zs,to,en,tn,ma,We,ua,Z,ge,oo,Fe,on,ao,an,_a,gt,sn,ga,He,va,vt,nn,wa,H,so,ln,rn,no,dn,cn,io,hn,ya,wt,pn,ba,ve,$a,ee,we,lo,Je,fn,ro,mn,ka,yt,un,Pa,L,co,_n,gn,J,bt,vn,wn,ho,yn,bn,$t,$n,kn,Pn,V,kt,xn,jn,po,En,An,Pt,Un,Cn,Tn,ye,xt,Ln,In,jt,Mn,qn,zn,fo,Dn,Nn,mo,Gn,Rn,uo,Bn,xa,te,be,_o,Ve,On,go,Sn,ja,oe,Ye,Wn,vo,Fn,Ea,ae,Ke,Hn,wo,Jn,Aa,se,Qe,Vn,yo,Yn,Ua,z,Xe,Kn,bo,Qn,Xn,R,$o,Zn,ei,ko,ti,oi,Po,ai,si,xo,ni,ii,$e,Ca,D,Ze,li,jo,ri,di,ke,ci,Pe,Ta,ne,et,hi,Eo,pi,La,B,tt,fi,Ao,mi,ui,xe,Ia;return f=new Ue({}),O=new G({props:{code:`import torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`,highlighted:`<span class="hljs-keyword">import</span> torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`}}),le=new Tt({props:{warning:!0,$$slots:{default:[ar]},$$scope:{ctx:E}}}),Te=new Ue({}),Le=new G({props:{code:`from accelerate import init_empty_weights

with init_empty_weights():
    my_model = ModelClass(...)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

<span class="hljs-keyword">with</span> init_empty_weights():
    my_model = ModelClass(...)`}}),Ie=new G({props:{code:`with init_empty_weights():
    model = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">with</span> init_empty_weights():
    model = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>)])`}}),ce=new Tt({props:{warning:!0,$$slots:{default:[sr]},$$scope:{ctx:E}}}),Me=new Ue({}),qe=new G({props:{code:`first_state_dict.bin
index.json
second_state_dict.bin`,highlighted:`first_state_dict.bin
index.json
second_state_dict.bin`}}),ze=new G({props:{code:`{
  "linear1.weight": "first_state_dict.bin",
  "linear1.bias": "first_state_dict.bin",
  "linear2.weight": "second_state_dict.bin",
  "linear2.bias": "second_state_dict.bin"
}`,highlighted:`<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;linear1.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear1.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span>
<span class="hljs-punctuation">}</span>`}}),De=new Ue({}),Ge=new G({props:{code:`git clone https://huggingface.co/sgugger/sharded-gpt-j-6B
cd sharded-gpt-j-6B
git-lfs install
git pull`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/sgugger/sharded-gpt-j-6B
<span class="hljs-built_in">cd</span> sharded-gpt-j-6B
git-lfs install
git pull`}}),Re=new G({props:{code:`from accelerate import init_empty_weights
from transformers import AutoConfig, AutoModelForCausalLM

checkpoint = "EleutherAI/gpt-j-6B"
config = AutoConfig.from_pretrained(checkpoint)

with init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

checkpoint = <span class="hljs-string">&quot;EleutherAI/gpt-j-6B&quot;</span>
config = AutoConfig.from_pretrained(checkpoint)

<span class="hljs-keyword">with</span> init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`}}),Be=new G({props:{code:`from accelerate import load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, "sharded-gpt-j-6B", device_map="auto", no_split_module_classes=["GPTJBlock"]
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>, no_split_module_classes=[<span class="hljs-string">&quot;GPTJBlock&quot;</span>]
)`}}),Oe=new G({props:{code:"model.hf_device_map",highlighted:"model.hf_device_map"}}),Se=new G({props:{code:`{'transformer.wte': 0,
 'transformer.drop': 0,
 'transformer.h.0': 0,
 'transformer.h.1': 0,
 'transformer.h.2': 0,
 'transformer.h.3': 0,
 'transformer.h.4': 0,
 'transformer.h.5': 0,
 'transformer.h.6': 0,
 'transformer.h.7': 0,
 'transformer.h.8': 0,
 'transformer.h.9': 0,
 'transformer.h.10': 0,
 'transformer.h.11': 0,
 'transformer.h.12': 0,
 'transformer.h.13': 0,
 'transformer.h.14': 0,
 'transformer.h.15': 0,
 'transformer.h.16': 0,
 'transformer.h.17': 0,
 'transformer.h.18': 0,
 'transformer.h.19': 0,
 'transformer.h.20': 0,
 'transformer.h.21': 0,
 'transformer.h.22': 0,
 'transformer.h.23': 0,
 'transformer.h.24': 1,
 'transformer.h.25': 1,
 'transformer.h.26': 1,
 'transformer.h.27': 1,
 'transformer.ln_f': 1,
 'lm_head': 1}`,highlighted:`{<span class="hljs-string">&#x27;transformer.wte&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.drop&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.1&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.2&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.3&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.4&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.5&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.6&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.7&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.8&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.9&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.10&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.11&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.12&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.13&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.14&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.15&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.16&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.17&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.18&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.19&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.20&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.21&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.22&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.23&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.24&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.25&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.26&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.27&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.ln_f&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-number">1</span>}`}}),We=new G({props:{code:'model = load_checkpoint_and_dispatch(model, "sharded-gpt-j-6B", device_map=my_device_map)',highlighted:'model = load_checkpoint_and_dispatch(model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=my_device_map)'}}),Fe=new Ue({}),He=new G({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer("Hello, my name is", return_tensors="pt")
inputs = inputs.to(0)
output = model.generate(inputs["input_ids"])
tokenizer.decode(output[0].tolist())`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer(<span class="hljs-string">&quot;Hello, my name is&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
inputs = inputs.to(<span class="hljs-number">0</span>)
output = model.generate(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
tokenizer.decode(output[<span class="hljs-number">0</span>].tolist())`}}),ve=new Tt({props:{warning:!0,$$slots:{default:[nr]},$$scope:{ctx:E}}}),Je=new Ue({}),Ve=new Ue({}),Ye=new nt({props:{name:"accelerate.cpu_offload",anchor:"accelerate.cpu_offload",parameters:[{name:"model",val:": Module"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.cpu_offload.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to offload.`,name:"model"},{anchor:"accelerate.cpu_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model first parameter device.`,name:"execution_device"},{anchor:"accelerate.cpu_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.cpu_offload.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the model that will be kept on CPU.`,name:"state_dict"},{anchor:"accelerate.cpu_offload.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_523/src/accelerate/big_modeling.py#L88"}}),Ke=new nt({props:{name:"accelerate.disk_offload",anchor:"accelerate.disk_offload",parameters:[{name:"model",val:": Module"},{name:"offload_dir",val:": typing.Union[str, os.PathLike]"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.disk_offload.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to offload.",name:"model"},{anchor:"accelerate.disk_offload.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.disk_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model&#x2019;s first parameter device.`,name:"execution_device"},{anchor:"accelerate.disk_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.disk_offload.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_523/src/accelerate/big_modeling.py#L132"}}),Qe=new nt({props:{name:"accelerate.dispatch_model",anchor:"accelerate.dispatch_model",parameters:[{name:"model",val:": Module"},{name:"device_map",val:": typing.Dict[str, typing.Union[int, str, torch.device]]"},{name:"main_device",val:": typing.Optional[torch.device] = None"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"},{name:"offload_dir",val:": typing.Union[str, os.PathLike] = None"},{name:"offload_buffers",val:": bool = False"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.dispatch_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to dispatch.`,name:"model"},{anchor:"accelerate.dispatch_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[str, int, torch.device]]</code>) &#x2014;
A dictionary mapping module names in the models <code>state_dict</code> to the device they should go to. Note that
<code>&quot;disk&quot;</code> is accepted even if it&#x2019;s not a proper value for <code>torch.device</code>.`,name:"device_map"},{anchor:"accelerate.dispatch_model.main_device",description:`<strong>main_device</strong> (<code>str</code>, <code>int</code> or <code>torch.device</code>, <em>optional</em>) &#x2014;
The main execution device. Will default to the first device in the <code>device_map</code> different from <code>&quot;cpu&quot;</code> or
<code>&quot;disk&quot;</code>.`,name:"main_device"},{anchor:"accelerate.dispatch_model.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the part of the model that will be kept on CPU.`,name:"state_dict"},{anchor:"accelerate.dispatch_model.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.dispatch_model.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.dispatch_model.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_523/src/accelerate/big_modeling.py#L176"}}),Xe=new nt({props:{name:"accelerate.infer_auto_device_map",anchor:"accelerate.infer_auto_device_map",parameters:[{name:"model",val:": Module"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"}],parametersDescription:[{anchor:"accelerate.infer_auto_device_map.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to analyze.",name:"model"},{anchor:"accelerate.infer_auto_device_map.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available if unset.`,name:"max_memory"},{anchor:"accelerate.infer_auto_device_map.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"},{anchor:"accelerate.infer_auto_device_map.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"}],source:"https://github.com/huggingface/accelerate/blob/vr_523/src/accelerate/utils/modeling.py#L329"}}),$e=new Tt({props:{$$slots:{default:[ir]},$$scope:{ctx:E}}}),Ze=new nt({props:{name:"accelerate.init_empty_weights",anchor:"accelerate.init_empty_weights",parameters:[{name:"include_buffers",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.init_empty_weights.include_buffers",description:`<strong>include_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also put all buffers on the meta device while initializing.`,name:"include_buffers"}],source:"https://github.com/huggingface/accelerate/blob/vr_523/src/accelerate/big_modeling.py#L33"}}),ke=new or({props:{anchor:"accelerate.init_empty_weights.example",$$slots:{default:[lr]},$$scope:{ctx:E}}}),Pe=new Tt({props:{warning:!0,$$slots:{default:[rr]},$$scope:{ctx:E}}}),et=new nt({props:{name:"accelerate.load_checkpoint_and_dispatch",anchor:"accelerate.load_checkpoint_and_dispatch",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[str, typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"offload_buffers",val:": bool = False"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"},{name:"offload_state_dict",val:": typing.Optional[bool] = None"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_and_dispatch.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_and_dispatch.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:</p>
<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_and_dispatch.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.</p>
<p>To have Accelerate compute the most optimized <code>device_map</code> automatically, set <code>device_map=&quot;auto&quot;</code>.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_and_dispatch.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available for each GPU
and the available CPU RAM if unset.`,name:"max_memory"},{anchor:"accelerate.load_checkpoint_and_dispatch.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
In the layers that are offloaded on the CPU or the hard drive, whether or not to offload the buffers as
well as the parameters.`,name:"offload_buffers"},{anchor:"accelerate.load_checkpoint_and_dispatch.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict on the hard drive to avoig getting out of CPU RAM if
the weight of the CPU state dict + the biggest shard does not fit. Will default to <code>True</code> if the device map
picked contains <code>&quot;disk&quot;</code> values.`,name:"offload_state_dict"},{anchor:"accelerate.load_checkpoint_and_dispatch.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_523/src/accelerate/big_modeling.py#L254"}}),tt=new nt({props:{name:"accelerate.load_checkpoint_in_model",anchor:"accelerate.load_checkpoint_in_model",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"},{name:"offload_state_dict",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_in_model.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_in_model.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_in_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_in_model.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"accelerate.load_checkpoint_in_model.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"},{anchor:"accelerate.load_checkpoint_in_model.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict on the hard drive to avoig getting out of CPU RAM if
the weight of the CPU state dict + the biggest shard does not fit.`,name:"offload_state_dict"}],source:"https://github.com/huggingface/accelerate/blob/vr_523/src/accelerate/utils/modeling.py#L493"}}),xe=new Tt({props:{warning:!0,$$slots:{default:[dr]},$$scope:{ctx:E}}}),{c(){p=a("meta"),g=c(),m=a("h1"),_=a("a"),b=a("span"),$(f.$$.fragment),v=c(),T=a("span"),A=l("Handling big models"),U=c(),C=a("p"),j=l("When loading a pretrained model in PyTorch, the usual workflow looks like this:"),M=c(),$(O.$$.fragment),Ce=c(),it=a("p"),Ya=l("In plain English, those steps are:"),zo=c(),S=a("ol"),Lt=a("li"),Ka=l("Create the model with randomly initialized weights"),Qa=c(),It=a("li"),Xa=l("Load the model weights (in a dictionary usually called a state dict) from the disk"),Za=c(),Mt=a("li"),es=l("Load those weights inside the model"),Do=c(),lt=a("p"),ts=l("While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),No=c(),$(le.$$.fragment),Go=c(),Y=a("h2"),re=a("a"),qt=a("span"),$(Te.$$.fragment),os=c(),zt=a("span"),as=l("Instantiating an empty model"),Ro=c(),de=a("p"),ss=l("The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),rt=a("a"),ns=l("init_empty_weights()"),is=l(" that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),Bo=c(),$(Le.$$.fragment),Oo=c(),dt=a("p"),ls=l("For instance:"),So=c(),$(Ie.$$.fragment),Wo=c(),ct=a("p"),rs=l("initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),Fo=c(),$(ce.$$.fragment),Ho=c(),K=a("h2"),he=a("a"),Dt=a("span"),$(Me.$$.fragment),ds=c(),Nt=a("span"),cs=l("Sharded checkpoints"),Jo=c(),ht=a("p"),hs=l("It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),Vo=c(),pt=a("p"),ps=l("\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),Yo=c(),$(qe.$$.fragment),Ko=c(),ft=a("p"),fs=l("with index.json being the following file:"),Qo=c(),$(ze.$$.fragment),Xo=c(),I=a("p"),ms=l("and "),Gt=a("code"),us=l("first_state_dict.bin"),_s=l(" containing the weights for "),Rt=a("code"),gs=l('"linear1.weight"'),vs=l(" and "),Bt=a("code"),ws=l('"linear1.bias"'),ys=l(", "),Ot=a("code"),bs=l("second_state_dict.bin"),$s=l(" the ones for "),St=a("code"),ks=l('"linear2.weight"'),Ps=l(" and "),Wt=a("code"),xs=l('"linear2.bias"'),Zo=c(),Q=a("h2"),pe=a("a"),Ft=a("span"),$(De.$$.fragment),js=c(),Ht=a("span"),Es=l("Loading weights"),ea=c(),fe=a("p"),As=l("The second tool \u{1F917} Accelerate introduces is a function "),mt=a("a"),Us=l("load_checkpoint_and_dispatch()"),Cs=l(", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),ta=c(),me=a("p"),Ts=l("Here is how we can use this to load the "),Ne=a("a"),Ls=l("GPT-J-6B"),Is=l(" model. You clone the sharded version of this model with:"),oa=c(),$(Ge.$$.fragment),aa=c(),ut=a("p"),Ms=l("then we can initialize the model with"),sa=c(),$(Re.$$.fragment),na=c(),_t=a("p"),qs=l("and load the checkpoint we just downloaded with:"),ia=c(),$(Be.$$.fragment),la=c(),ue=a("p"),zs=l("By passing "),Jt=a("code"),Ds=l('device_map="auto"'),Ns=l(", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),ra=c(),W=a("ul"),Vt=a("li"),Gs=l("first we use the maximum space available on the GPU(s)"),Rs=c(),Yt=a("li"),Bs=l("if we still need space, we store the remaining weights on the CPU"),Os=c(),Kt=a("li"),Ss=l("if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),da=c(),X=a("p"),Qt=a("code"),Ws=l('no_split_module_classes=["GPTJBlock"]'),Fs=l(" indicates that the modules that are "),Xt=a("code"),Hs=l("GPTJBlock"),Js=l(" should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),ca=c(),F=a("p"),Vs=l("You can see the "),Zt=a("code"),Ys=l("device_map"),Ks=l(" that \u{1F917} Accelerate picked by accessing the "),eo=a("code"),Qs=l("hf_device_map"),Xs=l(" attribute of your model:"),ha=c(),$(Oe.$$.fragment),pa=c(),$(Se.$$.fragment),fa=c(),_e=a("p"),Zs=l("You can also design your "),to=a("code"),en=l("device_map"),tn=l(" yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),ma=c(),$(We.$$.fragment),ua=c(),Z=a("h2"),ge=a("a"),oo=a("span"),$(Fe.$$.fragment),on=c(),ao=a("span"),an=l("Run the model"),_a=c(),gt=a("p"),sn=l("Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),ga=c(),$(He.$$.fragment),va=c(),vt=a("p"),nn=l("Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),wa=c(),H=a("ul"),so=a("li"),ln=l("at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),rn=c(),no=a("li"),dn=l("for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),cn=c(),io=a("li"),hn=l("for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),ya=c(),wt=a("p"),pn=l("This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),ba=c(),$(ve.$$.fragment),$a=c(),ee=a("h2"),we=a("a"),lo=a("span"),$(Je.$$.fragment),fn=c(),ro=a("span"),mn=l("Limits and further development"),ka=c(),yt=a("p"),un=l("We are aware of the current limitations in the API:"),Pa=c(),L=a("ul"),co=a("li"),_n=l("While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),gn=c(),J=a("li"),bt=a("a"),vn=l("infer_auto_device_map()"),wn=l(" (or "),ho=a("code"),yn=l('device_map="auto"'),bn=l(" in "),$t=a("a"),$n=l("load_checkpoint_and_dispatch()"),kn=l(") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),Pn=c(),V=a("li"),kt=a("a"),xn=l("infer_auto_device_map()"),jn=l(" (or "),po=a("code"),En=l('device_map="auto"'),An=l(" in "),Pt=a("a"),Un=l("load_checkpoint_and_dispatch()"),Cn=l(") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),Tn=c(),ye=a("li"),xt=a("a"),Ln=l("load_checkpoint_and_dispatch()"),In=l(" and "),jt=a("a"),Mn=l("load_checkpoint_in_model()"),qn=l(" do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),zn=c(),fo=a("li"),Dn=l("The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),Nn=c(),mo=a("li"),Gn=l("When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),Rn=c(),uo=a("li"),Bn=l("Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),xa=c(),te=a("h2"),be=a("a"),_o=a("span"),$(Ve.$$.fragment),On=c(),go=a("span"),Sn=l("API doc"),ja=c(),oe=a("div"),$(Ye.$$.fragment),Wn=c(),vo=a("p"),Fn=l(`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),Ea=c(),ae=a("div"),$(Ke.$$.fragment),Hn=c(),wo=a("p"),Jn=l(`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),Aa=c(),se=a("div"),$(Qe.$$.fragment),Vn=c(),yo=a("p"),Yn=l(`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),Ua=c(),z=a("div"),$(Xe.$$.fragment),Kn=c(),bo=a("p"),Qn=l(`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),Xn=c(),R=a("ul"),$o=a("li"),Zn=l("we don\u2019t exceed the memory available of any of the GPU."),ei=c(),ko=a("li"),ti=l(`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),oi=c(),Po=a("li"),ai=l("if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),si=c(),xo=a("li"),ni=l(`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),ii=c(),$($e.$$.fragment),Ca=c(),D=a("div"),$(Ze.$$.fragment),li=c(),jo=a("p"),ri=l(`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),di=c(),$(ke.$$.fragment),ci=c(),$(Pe.$$.fragment),Ta=c(),ne=a("div"),$(et.$$.fragment),hi=c(),Eo=a("p"),pi=l(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),La=c(),B=a("div"),$(tt.$$.fragment),fi=c(),Ao=a("p"),mi=l(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),ui=c(),$(xe.$$.fragment),this.h()},l(e){const n=Ql('[data-svelte="svelte-1phssyn"]',document.head);p=s(n,"META",{name:!0,content:!0}),n.forEach(t),g=h(e),m=s(e,"H1",{class:!0});var ot=i(m);_=s(ot,"A",{id:!0,class:!0,href:!0});var Uo=i(_);b=s(Uo,"SPAN",{});var Co=i(b);k(f.$$.fragment,Co),Co.forEach(t),Uo.forEach(t),v=h(ot),T=s(ot,"SPAN",{});var To=i(T);A=r(To,"Handling big models"),To.forEach(t),ot.forEach(t),U=h(e),C=s(e,"P",{});var Lo=i(C);j=r(Lo,"When loading a pretrained model in PyTorch, the usual workflow looks like this:"),Lo.forEach(t),M=h(e),k(O.$$.fragment,e),Ce=h(e),it=s(e,"P",{});var Io=i(it);Ya=r(Io,"In plain English, those steps are:"),Io.forEach(t),zo=h(e),S=s(e,"OL",{});var ie=i(S);Lt=s(ie,"LI",{});var _i=i(Lt);Ka=r(_i,"Create the model with randomly initialized weights"),_i.forEach(t),Qa=h(ie),It=s(ie,"LI",{});var gi=i(It);Xa=r(gi,"Load the model weights (in a dictionary usually called a state dict) from the disk"),gi.forEach(t),Za=h(ie),Mt=s(ie,"LI",{});var vi=i(Mt);es=r(vi,"Load those weights inside the model"),vi.forEach(t),ie.forEach(t),Do=h(e),lt=s(e,"P",{});var wi=i(lt);ts=r(wi,"While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),wi.forEach(t),No=h(e),k(le.$$.fragment,e),Go=h(e),Y=s(e,"H2",{class:!0});var Ma=i(Y);re=s(Ma,"A",{id:!0,class:!0,href:!0});var yi=i(re);qt=s(yi,"SPAN",{});var bi=i(qt);k(Te.$$.fragment,bi),bi.forEach(t),yi.forEach(t),os=h(Ma),zt=s(Ma,"SPAN",{});var $i=i(zt);as=r($i,"Instantiating an empty model"),$i.forEach(t),Ma.forEach(t),Ro=h(e),de=s(e,"P",{});var qa=i(de);ss=r(qa,"The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),rt=s(qa,"A",{href:!0});var ki=i(rt);ns=r(ki,"init_empty_weights()"),ki.forEach(t),is=r(qa," that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),qa.forEach(t),Bo=h(e),k(Le.$$.fragment,e),Oo=h(e),dt=s(e,"P",{});var Pi=i(dt);ls=r(Pi,"For instance:"),Pi.forEach(t),So=h(e),k(Ie.$$.fragment,e),Wo=h(e),ct=s(e,"P",{});var xi=i(ct);rs=r(xi,"initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),xi.forEach(t),Fo=h(e),k(ce.$$.fragment,e),Ho=h(e),K=s(e,"H2",{class:!0});var za=i(K);he=s(za,"A",{id:!0,class:!0,href:!0});var ji=i(he);Dt=s(ji,"SPAN",{});var Ei=i(Dt);k(Me.$$.fragment,Ei),Ei.forEach(t),ji.forEach(t),ds=h(za),Nt=s(za,"SPAN",{});var Ai=i(Nt);cs=r(Ai,"Sharded checkpoints"),Ai.forEach(t),za.forEach(t),Jo=h(e),ht=s(e,"P",{});var Ui=i(ht);hs=r(Ui,"It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),Ui.forEach(t),Vo=h(e),pt=s(e,"P",{});var Ci=i(pt);ps=r(Ci,"\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),Ci.forEach(t),Yo=h(e),k(qe.$$.fragment,e),Ko=h(e),ft=s(e,"P",{});var Ti=i(ft);fs=r(Ti,"with index.json being the following file:"),Ti.forEach(t),Qo=h(e),k(ze.$$.fragment,e),Xo=h(e),I=s(e,"P",{});var N=i(I);ms=r(N,"and "),Gt=s(N,"CODE",{});var Li=i(Gt);us=r(Li,"first_state_dict.bin"),Li.forEach(t),_s=r(N," containing the weights for "),Rt=s(N,"CODE",{});var Ii=i(Rt);gs=r(Ii,'"linear1.weight"'),Ii.forEach(t),vs=r(N," and "),Bt=s(N,"CODE",{});var Mi=i(Bt);ws=r(Mi,'"linear1.bias"'),Mi.forEach(t),ys=r(N,", "),Ot=s(N,"CODE",{});var qi=i(Ot);bs=r(qi,"second_state_dict.bin"),qi.forEach(t),$s=r(N," the ones for "),St=s(N,"CODE",{});var zi=i(St);ks=r(zi,'"linear2.weight"'),zi.forEach(t),Ps=r(N," and "),Wt=s(N,"CODE",{});var Di=i(Wt);xs=r(Di,'"linear2.bias"'),Di.forEach(t),N.forEach(t),Zo=h(e),Q=s(e,"H2",{class:!0});var Da=i(Q);pe=s(Da,"A",{id:!0,class:!0,href:!0});var Ni=i(pe);Ft=s(Ni,"SPAN",{});var Gi=i(Ft);k(De.$$.fragment,Gi),Gi.forEach(t),Ni.forEach(t),js=h(Da),Ht=s(Da,"SPAN",{});var Ri=i(Ht);Es=r(Ri,"Loading weights"),Ri.forEach(t),Da.forEach(t),ea=h(e),fe=s(e,"P",{});var Na=i(fe);As=r(Na,"The second tool \u{1F917} Accelerate introduces is a function "),mt=s(Na,"A",{href:!0});var Bi=i(mt);Us=r(Bi,"load_checkpoint_and_dispatch()"),Bi.forEach(t),Cs=r(Na,", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),Na.forEach(t),ta=h(e),me=s(e,"P",{});var Ga=i(me);Ts=r(Ga,"Here is how we can use this to load the "),Ne=s(Ga,"A",{href:!0,rel:!0});var Oi=i(Ne);Ls=r(Oi,"GPT-J-6B"),Oi.forEach(t),Is=r(Ga," model. You clone the sharded version of this model with:"),Ga.forEach(t),oa=h(e),k(Ge.$$.fragment,e),aa=h(e),ut=s(e,"P",{});var Si=i(ut);Ms=r(Si,"then we can initialize the model with"),Si.forEach(t),sa=h(e),k(Re.$$.fragment,e),na=h(e),_t=s(e,"P",{});var Wi=i(_t);qs=r(Wi,"and load the checkpoint we just downloaded with:"),Wi.forEach(t),ia=h(e),k(Be.$$.fragment,e),la=h(e),ue=s(e,"P",{});var Ra=i(ue);zs=r(Ra,"By passing "),Jt=s(Ra,"CODE",{});var Fi=i(Jt);Ds=r(Fi,'device_map="auto"'),Fi.forEach(t),Ns=r(Ra,", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),Ra.forEach(t),ra=h(e),W=s(e,"UL",{});var Et=i(W);Vt=s(Et,"LI",{});var Hi=i(Vt);Gs=r(Hi,"first we use the maximum space available on the GPU(s)"),Hi.forEach(t),Rs=h(Et),Yt=s(Et,"LI",{});var Ji=i(Yt);Bs=r(Ji,"if we still need space, we store the remaining weights on the CPU"),Ji.forEach(t),Os=h(Et),Kt=s(Et,"LI",{});var Vi=i(Kt);Ss=r(Vi,"if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),Vi.forEach(t),Et.forEach(t),da=h(e),X=s(e,"P",{});var Mo=i(X);Qt=s(Mo,"CODE",{});var Yi=i(Qt);Ws=r(Yi,'no_split_module_classes=["GPTJBlock"]'),Yi.forEach(t),Fs=r(Mo," indicates that the modules that are "),Xt=s(Mo,"CODE",{});var Ki=i(Xt);Hs=r(Ki,"GPTJBlock"),Ki.forEach(t),Js=r(Mo," should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),Mo.forEach(t),ca=h(e),F=s(e,"P",{});var At=i(F);Vs=r(At,"You can see the "),Zt=s(At,"CODE",{});var Qi=i(Zt);Ys=r(Qi,"device_map"),Qi.forEach(t),Ks=r(At," that \u{1F917} Accelerate picked by accessing the "),eo=s(At,"CODE",{});var Xi=i(eo);Qs=r(Xi,"hf_device_map"),Xi.forEach(t),Xs=r(At," attribute of your model:"),At.forEach(t),ha=h(e),k(Oe.$$.fragment,e),pa=h(e),k(Se.$$.fragment,e),fa=h(e),_e=s(e,"P",{});var Ba=i(_e);Zs=r(Ba,"You can also design your "),to=s(Ba,"CODE",{});var Zi=i(to);en=r(Zi,"device_map"),Zi.forEach(t),tn=r(Ba," yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),Ba.forEach(t),ma=h(e),k(We.$$.fragment,e),ua=h(e),Z=s(e,"H2",{class:!0});var Oa=i(Z);ge=s(Oa,"A",{id:!0,class:!0,href:!0});var el=i(ge);oo=s(el,"SPAN",{});var tl=i(oo);k(Fe.$$.fragment,tl),tl.forEach(t),el.forEach(t),on=h(Oa),ao=s(Oa,"SPAN",{});var ol=i(ao);an=r(ol,"Run the model"),ol.forEach(t),Oa.forEach(t),_a=h(e),gt=s(e,"P",{});var al=i(gt);sn=r(al,"Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),al.forEach(t),ga=h(e),k(He.$$.fragment,e),va=h(e),vt=s(e,"P",{});var sl=i(vt);nn=r(sl,"Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),sl.forEach(t),wa=h(e),H=s(e,"UL",{});var Ut=i(H);so=s(Ut,"LI",{});var nl=i(so);ln=r(nl,"at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),nl.forEach(t),rn=h(Ut),no=s(Ut,"LI",{});var il=i(no);dn=r(il,"for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),il.forEach(t),cn=h(Ut),io=s(Ut,"LI",{});var ll=i(io);hn=r(ll,"for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),ll.forEach(t),Ut.forEach(t),ya=h(e),wt=s(e,"P",{});var rl=i(wt);pn=r(rl,"This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),rl.forEach(t),ba=h(e),k(ve.$$.fragment,e),$a=h(e),ee=s(e,"H2",{class:!0});var Sa=i(ee);we=s(Sa,"A",{id:!0,class:!0,href:!0});var dl=i(we);lo=s(dl,"SPAN",{});var cl=i(lo);k(Je.$$.fragment,cl),cl.forEach(t),dl.forEach(t),fn=h(Sa),ro=s(Sa,"SPAN",{});var hl=i(ro);mn=r(hl,"Limits and further development"),hl.forEach(t),Sa.forEach(t),ka=h(e),yt=s(e,"P",{});var pl=i(yt);un=r(pl,"We are aware of the current limitations in the API:"),pl.forEach(t),Pa=h(e),L=s(e,"UL",{});var q=i(L);co=s(q,"LI",{});var fl=i(co);_n=r(fl,"While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),fl.forEach(t),gn=h(q),J=s(q,"LI",{});var at=i(J);bt=s(at,"A",{href:!0});var ml=i(bt);vn=r(ml,"infer_auto_device_map()"),ml.forEach(t),wn=r(at," (or "),ho=s(at,"CODE",{});var ul=i(ho);yn=r(ul,'device_map="auto"'),ul.forEach(t),bn=r(at," in "),$t=s(at,"A",{href:!0});var _l=i($t);$n=r(_l,"load_checkpoint_and_dispatch()"),_l.forEach(t),kn=r(at,") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),at.forEach(t),Pn=h(q),V=s(q,"LI",{});var st=i(V);kt=s(st,"A",{href:!0});var gl=i(kt);xn=r(gl,"infer_auto_device_map()"),gl.forEach(t),jn=r(st," (or "),po=s(st,"CODE",{});var vl=i(po);En=r(vl,'device_map="auto"'),vl.forEach(t),An=r(st," in "),Pt=s(st,"A",{href:!0});var wl=i(Pt);Un=r(wl,"load_checkpoint_and_dispatch()"),wl.forEach(t),Cn=r(st,") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),st.forEach(t),Tn=h(q),ye=s(q,"LI",{});var qo=i(ye);xt=s(qo,"A",{href:!0});var yl=i(xt);Ln=r(yl,"load_checkpoint_and_dispatch()"),yl.forEach(t),In=r(qo," and "),jt=s(qo,"A",{href:!0});var bl=i(jt);Mn=r(bl,"load_checkpoint_in_model()"),bl.forEach(t),qn=r(qo," do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),qo.forEach(t),zn=h(q),fo=s(q,"LI",{});var $l=i(fo);Dn=r($l,"The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),$l.forEach(t),Nn=h(q),mo=s(q,"LI",{});var kl=i(mo);Gn=r(kl,"When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),kl.forEach(t),Rn=h(q),uo=s(q,"LI",{});var Pl=i(uo);Bn=r(Pl,"Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),Pl.forEach(t),q.forEach(t),xa=h(e),te=s(e,"H2",{class:!0});var Wa=i(te);be=s(Wa,"A",{id:!0,class:!0,href:!0});var xl=i(be);_o=s(xl,"SPAN",{});var jl=i(_o);k(Ve.$$.fragment,jl),jl.forEach(t),xl.forEach(t),On=h(Wa),go=s(Wa,"SPAN",{});var El=i(go);Sn=r(El,"API doc"),El.forEach(t),Wa.forEach(t),ja=h(e),oe=s(e,"DIV",{class:!0});var Fa=i(oe);k(Ye.$$.fragment,Fa),Wn=h(Fa),vo=s(Fa,"P",{});var Al=i(vo);Fn=r(Al,`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),Al.forEach(t),Fa.forEach(t),Ea=h(e),ae=s(e,"DIV",{class:!0});var Ha=i(ae);k(Ke.$$.fragment,Ha),Hn=h(Ha),wo=s(Ha,"P",{});var Ul=i(wo);Jn=r(Ul,`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),Ul.forEach(t),Ha.forEach(t),Aa=h(e),se=s(e,"DIV",{class:!0});var Ja=i(se);k(Qe.$$.fragment,Ja),Vn=h(Ja),yo=s(Ja,"P",{});var Cl=i(yo);Yn=r(Cl,`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),Cl.forEach(t),Ja.forEach(t),Ua=h(e),z=s(e,"DIV",{class:!0});var je=i(z);k(Xe.$$.fragment,je),Kn=h(je),bo=s(je,"P",{});var Tl=i(bo);Qn=r(Tl,`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),Tl.forEach(t),Xn=h(je),R=s(je,"UL",{});var Ee=i(R);$o=s(Ee,"LI",{});var Ll=i($o);Zn=r(Ll,"we don\u2019t exceed the memory available of any of the GPU."),Ll.forEach(t),ei=h(Ee),ko=s(Ee,"LI",{});var Il=i(ko);ti=r(Il,`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),Il.forEach(t),oi=h(Ee),Po=s(Ee,"LI",{});var Ml=i(Po);ai=r(Ml,"if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),Ml.forEach(t),si=h(Ee),xo=s(Ee,"LI",{});var ql=i(xo);ni=r(ql,`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),ql.forEach(t),Ee.forEach(t),ii=h(je),k($e.$$.fragment,je),je.forEach(t),Ca=h(e),D=s(e,"DIV",{class:!0});var Ae=i(D);k(Ze.$$.fragment,Ae),li=h(Ae),jo=s(Ae,"P",{});var zl=i(jo);ri=r(zl,`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),zl.forEach(t),di=h(Ae),k(ke.$$.fragment,Ae),ci=h(Ae),k(Pe.$$.fragment,Ae),Ae.forEach(t),Ta=h(e),ne=s(e,"DIV",{class:!0});var Va=i(ne);k(et.$$.fragment,Va),hi=h(Va),Eo=s(Va,"P",{});var Dl=i(Eo);pi=r(Dl,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),Dl.forEach(t),Va.forEach(t),La=h(e),B=s(e,"DIV",{class:!0});var Ct=i(B);k(tt.$$.fragment,Ct),fi=h(Ct),Ao=s(Ct,"P",{});var Nl=i(Ao);mi=r(Nl,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),Nl.forEach(t),ui=h(Ct),k(xe.$$.fragment,Ct),Ct.forEach(t),this.h()},h(){u(p,"name","hf:doc:metadata"),u(p,"content",JSON.stringify(hr)),u(_,"id","handling-big-models"),u(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_,"href","#handling-big-models"),u(m,"class","relative group"),u(re,"id","instantiating-an-empty-model"),u(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(re,"href","#instantiating-an-empty-model"),u(Y,"class","relative group"),u(rt,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.init_empty_weights"),u(he,"id","sharded-checkpoints"),u(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(he,"href","#sharded-checkpoints"),u(K,"class","relative group"),u(pe,"id","accelerate.cpu_offload"),u(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(pe,"href","#accelerate.cpu_offload"),u(Q,"class","relative group"),u(mt,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(Ne,"href","https://huggingface.co/EleutherAI/gpt-j-6B"),u(Ne,"rel","nofollow"),u(ge,"id","run-the-model"),u(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ge,"href","#run-the-model"),u(Z,"class","relative group"),u(we,"id","limits-and-further-development"),u(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(we,"href","#limits-and-further-development"),u(ee,"class","relative group"),u(bt,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.infer_auto_device_map"),u($t,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(kt,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.infer_auto_device_map"),u(Pt,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(xt,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(jt,"href","/docs/accelerate/pr_523/en/big_modeling#accelerate.load_checkpoint_in_model"),u(be,"id","api-doc"),u(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(be,"href","#api-doc"),u(te,"class","relative group"),u(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,n){o(document.head,p),d(e,g,n),d(e,m,n),o(m,_),o(_,b),P(f,b,null),o(m,v),o(m,T),o(T,A),d(e,U,n),d(e,C,n),o(C,j),d(e,M,n),P(O,e,n),d(e,Ce,n),d(e,it,n),o(it,Ya),d(e,zo,n),d(e,S,n),o(S,Lt),o(Lt,Ka),o(S,Qa),o(S,It),o(It,Xa),o(S,Za),o(S,Mt),o(Mt,es),d(e,Do,n),d(e,lt,n),o(lt,ts),d(e,No,n),P(le,e,n),d(e,Go,n),d(e,Y,n),o(Y,re),o(re,qt),P(Te,qt,null),o(Y,os),o(Y,zt),o(zt,as),d(e,Ro,n),d(e,de,n),o(de,ss),o(de,rt),o(rt,ns),o(de,is),d(e,Bo,n),P(Le,e,n),d(e,Oo,n),d(e,dt,n),o(dt,ls),d(e,So,n),P(Ie,e,n),d(e,Wo,n),d(e,ct,n),o(ct,rs),d(e,Fo,n),P(ce,e,n),d(e,Ho,n),d(e,K,n),o(K,he),o(he,Dt),P(Me,Dt,null),o(K,ds),o(K,Nt),o(Nt,cs),d(e,Jo,n),d(e,ht,n),o(ht,hs),d(e,Vo,n),d(e,pt,n),o(pt,ps),d(e,Yo,n),P(qe,e,n),d(e,Ko,n),d(e,ft,n),o(ft,fs),d(e,Qo,n),P(ze,e,n),d(e,Xo,n),d(e,I,n),o(I,ms),o(I,Gt),o(Gt,us),o(I,_s),o(I,Rt),o(Rt,gs),o(I,vs),o(I,Bt),o(Bt,ws),o(I,ys),o(I,Ot),o(Ot,bs),o(I,$s),o(I,St),o(St,ks),o(I,Ps),o(I,Wt),o(Wt,xs),d(e,Zo,n),d(e,Q,n),o(Q,pe),o(pe,Ft),P(De,Ft,null),o(Q,js),o(Q,Ht),o(Ht,Es),d(e,ea,n),d(e,fe,n),o(fe,As),o(fe,mt),o(mt,Us),o(fe,Cs),d(e,ta,n),d(e,me,n),o(me,Ts),o(me,Ne),o(Ne,Ls),o(me,Is),d(e,oa,n),P(Ge,e,n),d(e,aa,n),d(e,ut,n),o(ut,Ms),d(e,sa,n),P(Re,e,n),d(e,na,n),d(e,_t,n),o(_t,qs),d(e,ia,n),P(Be,e,n),d(e,la,n),d(e,ue,n),o(ue,zs),o(ue,Jt),o(Jt,Ds),o(ue,Ns),d(e,ra,n),d(e,W,n),o(W,Vt),o(Vt,Gs),o(W,Rs),o(W,Yt),o(Yt,Bs),o(W,Os),o(W,Kt),o(Kt,Ss),d(e,da,n),d(e,X,n),o(X,Qt),o(Qt,Ws),o(X,Fs),o(X,Xt),o(Xt,Hs),o(X,Js),d(e,ca,n),d(e,F,n),o(F,Vs),o(F,Zt),o(Zt,Ys),o(F,Ks),o(F,eo),o(eo,Qs),o(F,Xs),d(e,ha,n),P(Oe,e,n),d(e,pa,n),P(Se,e,n),d(e,fa,n),d(e,_e,n),o(_e,Zs),o(_e,to),o(to,en),o(_e,tn),d(e,ma,n),P(We,e,n),d(e,ua,n),d(e,Z,n),o(Z,ge),o(ge,oo),P(Fe,oo,null),o(Z,on),o(Z,ao),o(ao,an),d(e,_a,n),d(e,gt,n),o(gt,sn),d(e,ga,n),P(He,e,n),d(e,va,n),d(e,vt,n),o(vt,nn),d(e,wa,n),d(e,H,n),o(H,so),o(so,ln),o(H,rn),o(H,no),o(no,dn),o(H,cn),o(H,io),o(io,hn),d(e,ya,n),d(e,wt,n),o(wt,pn),d(e,ba,n),P(ve,e,n),d(e,$a,n),d(e,ee,n),o(ee,we),o(we,lo),P(Je,lo,null),o(ee,fn),o(ee,ro),o(ro,mn),d(e,ka,n),d(e,yt,n),o(yt,un),d(e,Pa,n),d(e,L,n),o(L,co),o(co,_n),o(L,gn),o(L,J),o(J,bt),o(bt,vn),o(J,wn),o(J,ho),o(ho,yn),o(J,bn),o(J,$t),o($t,$n),o(J,kn),o(L,Pn),o(L,V),o(V,kt),o(kt,xn),o(V,jn),o(V,po),o(po,En),o(V,An),o(V,Pt),o(Pt,Un),o(V,Cn),o(L,Tn),o(L,ye),o(ye,xt),o(xt,Ln),o(ye,In),o(ye,jt),o(jt,Mn),o(ye,qn),o(L,zn),o(L,fo),o(fo,Dn),o(L,Nn),o(L,mo),o(mo,Gn),o(L,Rn),o(L,uo),o(uo,Bn),d(e,xa,n),d(e,te,n),o(te,be),o(be,_o),P(Ve,_o,null),o(te,On),o(te,go),o(go,Sn),d(e,ja,n),d(e,oe,n),P(Ye,oe,null),o(oe,Wn),o(oe,vo),o(vo,Fn),d(e,Ea,n),d(e,ae,n),P(Ke,ae,null),o(ae,Hn),o(ae,wo),o(wo,Jn),d(e,Aa,n),d(e,se,n),P(Qe,se,null),o(se,Vn),o(se,yo),o(yo,Yn),d(e,Ua,n),d(e,z,n),P(Xe,z,null),o(z,Kn),o(z,bo),o(bo,Qn),o(z,Xn),o(z,R),o(R,$o),o($o,Zn),o(R,ei),o(R,ko),o(ko,ti),o(R,oi),o(R,Po),o(Po,ai),o(R,si),o(R,xo),o(xo,ni),o(z,ii),P($e,z,null),d(e,Ca,n),d(e,D,n),P(Ze,D,null),o(D,li),o(D,jo),o(jo,ri),o(D,di),P(ke,D,null),o(D,ci),P(Pe,D,null),d(e,Ta,n),d(e,ne,n),P(et,ne,null),o(ne,hi),o(ne,Eo),o(Eo,pi),d(e,La,n),d(e,B,n),P(tt,B,null),o(B,fi),o(B,Ao),o(Ao,mi),o(B,ui),P(xe,B,null),Ia=!0},p(e,[n]){const ot={};n&2&&(ot.$$scope={dirty:n,ctx:e}),le.$set(ot);const Uo={};n&2&&(Uo.$$scope={dirty:n,ctx:e}),ce.$set(Uo);const Co={};n&2&&(Co.$$scope={dirty:n,ctx:e}),ve.$set(Co);const To={};n&2&&(To.$$scope={dirty:n,ctx:e}),$e.$set(To);const Lo={};n&2&&(Lo.$$scope={dirty:n,ctx:e}),ke.$set(Lo);const Io={};n&2&&(Io.$$scope={dirty:n,ctx:e}),Pe.$set(Io);const ie={};n&2&&(ie.$$scope={dirty:n,ctx:e}),xe.$set(ie)},i(e){Ia||(w(f.$$.fragment,e),w(O.$$.fragment,e),w(le.$$.fragment,e),w(Te.$$.fragment,e),w(Le.$$.fragment,e),w(Ie.$$.fragment,e),w(ce.$$.fragment,e),w(Me.$$.fragment,e),w(qe.$$.fragment,e),w(ze.$$.fragment,e),w(De.$$.fragment,e),w(Ge.$$.fragment,e),w(Re.$$.fragment,e),w(Be.$$.fragment,e),w(Oe.$$.fragment,e),w(Se.$$.fragment,e),w(We.$$.fragment,e),w(Fe.$$.fragment,e),w(He.$$.fragment,e),w(ve.$$.fragment,e),w(Je.$$.fragment,e),w(Ve.$$.fragment,e),w(Ye.$$.fragment,e),w(Ke.$$.fragment,e),w(Qe.$$.fragment,e),w(Xe.$$.fragment,e),w($e.$$.fragment,e),w(Ze.$$.fragment,e),w(ke.$$.fragment,e),w(Pe.$$.fragment,e),w(et.$$.fragment,e),w(tt.$$.fragment,e),w(xe.$$.fragment,e),Ia=!0)},o(e){y(f.$$.fragment,e),y(O.$$.fragment,e),y(le.$$.fragment,e),y(Te.$$.fragment,e),y(Le.$$.fragment,e),y(Ie.$$.fragment,e),y(ce.$$.fragment,e),y(Me.$$.fragment,e),y(qe.$$.fragment,e),y(ze.$$.fragment,e),y(De.$$.fragment,e),y(Ge.$$.fragment,e),y(Re.$$.fragment,e),y(Be.$$.fragment,e),y(Oe.$$.fragment,e),y(Se.$$.fragment,e),y(We.$$.fragment,e),y(Fe.$$.fragment,e),y(He.$$.fragment,e),y(ve.$$.fragment,e),y(Je.$$.fragment,e),y(Ve.$$.fragment,e),y(Ye.$$.fragment,e),y(Ke.$$.fragment,e),y(Qe.$$.fragment,e),y(Xe.$$.fragment,e),y($e.$$.fragment,e),y(Ze.$$.fragment,e),y(ke.$$.fragment,e),y(Pe.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(xe.$$.fragment,e),Ia=!1},d(e){t(p),e&&t(g),e&&t(m),x(f),e&&t(U),e&&t(C),e&&t(M),x(O,e),e&&t(Ce),e&&t(it),e&&t(zo),e&&t(S),e&&t(Do),e&&t(lt),e&&t(No),x(le,e),e&&t(Go),e&&t(Y),x(Te),e&&t(Ro),e&&t(de),e&&t(Bo),x(Le,e),e&&t(Oo),e&&t(dt),e&&t(So),x(Ie,e),e&&t(Wo),e&&t(ct),e&&t(Fo),x(ce,e),e&&t(Ho),e&&t(K),x(Me),e&&t(Jo),e&&t(ht),e&&t(Vo),e&&t(pt),e&&t(Yo),x(qe,e),e&&t(Ko),e&&t(ft),e&&t(Qo),x(ze,e),e&&t(Xo),e&&t(I),e&&t(Zo),e&&t(Q),x(De),e&&t(ea),e&&t(fe),e&&t(ta),e&&t(me),e&&t(oa),x(Ge,e),e&&t(aa),e&&t(ut),e&&t(sa),x(Re,e),e&&t(na),e&&t(_t),e&&t(ia),x(Be,e),e&&t(la),e&&t(ue),e&&t(ra),e&&t(W),e&&t(da),e&&t(X),e&&t(ca),e&&t(F),e&&t(ha),x(Oe,e),e&&t(pa),x(Se,e),e&&t(fa),e&&t(_e),e&&t(ma),x(We,e),e&&t(ua),e&&t(Z),x(Fe),e&&t(_a),e&&t(gt),e&&t(ga),x(He,e),e&&t(va),e&&t(vt),e&&t(wa),e&&t(H),e&&t(ya),e&&t(wt),e&&t(ba),x(ve,e),e&&t($a),e&&t(ee),x(Je),e&&t(ka),e&&t(yt),e&&t(Pa),e&&t(L),e&&t(xa),e&&t(te),x(Ve),e&&t(ja),e&&t(oe),x(Ye),e&&t(Ea),e&&t(ae),x(Ke),e&&t(Aa),e&&t(se),x(Qe),e&&t(Ua),e&&t(z),x(Xe),x($e),e&&t(Ca),e&&t(D),x(Ze),x(ke),x(Pe),e&&t(Ta),e&&t(ne),x(et),e&&t(La),e&&t(B),x(tt),x(xe)}}}const hr={local:"initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram",title:"Initialize a model with 100 billions parameters in no time and without using any RAM."};function pr(E){return Sl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vr extends Rl{constructor(p){super();Bl(this,p,pr,cr,Ol,{})}}export{vr as default,hr as metadata};
