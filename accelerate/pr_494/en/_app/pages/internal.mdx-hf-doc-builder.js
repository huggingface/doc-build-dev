import{S as nn,i as ln,s as cn,e as r,k as i,w as f,t as n,M as dn,c as o,d as a,m as d,a as s,x as m,h as l,b as c,G as e,g as p,y as g,q as v,o as _,B as b,v as hn}from"../chunks/vendor-hf-doc-builder.js";import{T as sn}from"../chunks/Tip-hf-doc-builder.js";import{D as P}from"../chunks/Docstring-hf-doc-builder.js";import{I as G}from"../chunks/IconCopyLink-hf-doc-builder.js";function pn(Ze){let u,T,$,S,D;return{c(){u=r("p"),T=n("This does not support "),$=r("code"),S=n("BatchSampler"),D=n(" with varying batch size yet.")},l(w){u=o(w,"P",{});var y=s(u);T=l(y,"This does not support "),$=o(y,"CODE",{});var I=s($);S=l(I,"BatchSampler"),I.forEach(a),D=l(y," with varying batch size yet."),y.forEach(a)},m(w,y){p(w,u,y),e(u,T),e(u,$),e($,S),e(u,D)},d(w){w&&a(u)}}}function un(Ze){let u,T,$,S,D;return{c(){u=r("p"),T=n("This does not support "),$=r("code"),S=n("BatchSampler"),D=n(" with varying batch size yet.")},l(w){u=o(w,"P",{});var y=s(u);T=l(y,"This does not support "),$=o(y,"CODE",{});var I=s($);S=l(I,"BatchSampler"),I.forEach(a),D=l(y," with varying batch size yet."),y.forEach(a)},m(w,y){p(w,u,y),e(u,T),e(u,$),e($,S),e(u,D)},d(w){w&&a(u)}}}function fn(Ze){let u,T,$,S,D,w,y,I,Xa,oa,B,ae,nt,Se,Ja,lt,Ka,sa,A,Ee,Qa,W,Ya,xe,Za,er,ct,tr,ar,rr,it,or,sr,De,re,dt,nr,lr,ht,cr,ir,dr,oe,pt,hr,pr,ut,ur,fr,na,q,se,ft,Ae,mr,mt,gr,la,F,ke,vr,gt,_r,ca,V,ne,vt,Te,br,_t,$r,ia,le,wr,bt,yr,Sr,da,k,ze,Er,Pe,xr,$t,Dr,Ar,kr,U,Tr,wt,zr,Pr,yt,Ir,Lr,Or,ce,ha,H,ie,St,Ie,Nr,Et,Gr,pa,R,Le,Cr,Oe,Br,xt,Wr,qr,ua,M,de,Dt,Ne,Fr,At,Vr,fa,L,Ge,Ur,O,Hr,kt,Rr,Mr,Tt,jr,Xr,zt,Jr,Kr,Qr,he,ma,j,pe,Pt,Ce,Yr,It,Zr,ga,X,Be,eo,E,to,Lt,ao,ro,Ot,oo,so,Nt,no,lo,Gt,co,io,Ct,ho,po,va,J,ue,Bt,We,uo,Wt,fo,_a,N,qe,mo,qt,go,vo,Fe,Ft,_o,bo,Vt,$o,ba,K,fe,Ut,Ve,wo,Ht,yo,$a,Q,me,Rt,Ue,So,Mt,Eo,wa,Y,He,xo,Z,Do,Re,Ao,ko,jt,To,zo,ya,ee,ge,Xt,Me,Po,Jt,Io,Sa,x,je,Lo,Kt,Oo,No,ve,Xe,Go,Qt,Co,Bo,_e,Je,Wo,te,qo,Yt,Fo,Vo,Zt,Uo,Ho,Ro,be,Ke,Mo,Qe,jo,ea,Xo,Jo,Ea;return w=new G({}),Se=new G({}),Ee=new P({props:{name:"class accelerate.state.GradientState",anchor:"accelerate.state.GradientState",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/state.py#L234"}}),Ae=new G({}),ke=new P({props:{name:"class accelerate.optimizer.AcceleratedOptimizer",anchor:"accelerate.optimizer.AcceleratedOptimizer",parameters:[{name:"optimizer",val:""},{name:"device_placement",val:" = True"},{name:"scaler",val:" = None"}],parametersDescription:[{anchor:"accelerate.optimizer.AcceleratedOptimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the optimizer should handle device placement. If so, it will place the state dictionary of
<code>optimizer</code> on the right device.`,name:"device_placement"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.scaler",description:`<strong>scaler</strong> (<code>torch.cuda.amp.grad_scaler.GradScaler</code>, <em>optional</em>) &#x2014;
The scaler to use in the step function if training with mixed precision.`,name:"scaler"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/optimizer.py#L38"}}),Te=new G({}),ze=new P({props:{name:"accelerate.data_loader.prepare_data_loader",anchor:"accelerate.data_loader.prepare_data_loader",parameters:[{name:"dataloader",val:": DataLoader"},{name:"device",val:": typing.Optional[torch.device] = None"},{name:"num_processes",val:": typing.Optional[int] = None"},{name:"process_index",val:": typing.Optional[int] = None"},{name:"split_batches",val:": bool = False"},{name:"put_on_device",val:": bool = False"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"accelerate.data_loader.prepare_data_loader.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.dataloader.DataLoader</code>) &#x2014;
The data loader to split across several devices.`,name:"dataloader"},{anchor:"accelerate.data_loader.prepare_data_loader.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The target device for the returned <code>DataLoader</code>.`,name:"device"},{anchor:"accelerate.data_loader.prepare_data_loader.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of processes running concurrently. Will default to the value given by
<a href="/docs/accelerate/pr_494/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"num_processes"},{anchor:"accelerate.data_loader.prepare_data_loader.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The index of the current process. Will default to the value given by <a href="/docs/accelerate/pr_494/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"process_index"},{anchor:"accelerate.data_loader.prepare_data_loader.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration).</p>
<p>Another way to see this is that the observed batch size will be the same as the initial <code>dataloader</code> if
this option is set to <code>True</code>, the batch size of the initial <code>dataloader</code> multiplied by <code>num_processes</code>
otherwise.</p>
<p>Setting this option to <code>True</code> requires that the batch size of the <code>dataloader</code> is a round multiple of
<code>batch_size</code>.`,name:"split_batches"},{anchor:"accelerate.data_loader.prepare_data_loader.put_on_device",description:`<strong>put_on_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to put the batches on <code>device</code> (only works if the batches are nested list, tuples or
dictionaries of tensors).`,name:"put_on_device"},{anchor:"accelerate.data_loader.prepare_data_loader.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.prepare_data_loader.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the datalaoder prepared is only iterated through on the main process and then the batches
are split and broadcast to each process. Will default to <code>True</code> when the underlying dataset is an
<code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/data_loader.py#L436",returnDescription:`
<p>A new data loader that will yield the portion of the batches</p>
`,returnType:`
<p><code>torch.utils.data.dataloader.DataLoader</code></p>
`}}),ce=new sn({props:{warning:!0,$$slots:{default:[pn]},$$scope:{ctx:Ze}}}),Ie=new G({}),Le=new P({props:{name:"class accelerate.data_loader.DataLoaderShard",anchor:"accelerate.data_loader.DataLoaderShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.Dataset</code>) &#x2014;
The dataset to use to build this datalaoder.`,name:"dataset"},{anchor:"accelerate.data_loader.DataLoaderShard.device",description:`<strong>device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
If passed, the device to put all batches on.`,name:"device"},{anchor:"accelerate.data_loader.DataLoaderShard.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: an optional <code>torch.Generator</code></li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.DataLoaderShard.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A random number generator to keep synchronized across processes.
kwargs &#x2014;
All other keyword arguments to pass to the regular <code>DataLoader</code> initialization.`,name:"generator"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/data_loader.py#L271"}}),Ne=new G({}),Ge=new P({props:{name:"class accelerate.data_loader.BatchSamplerShard",anchor:"accelerate.data_loader.BatchSamplerShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.BatchSamplerShard.batch_sampler",description:`<strong>batch_sampler</strong> (<code>torch.utils.data.sampler.BatchSampler</code>) &#x2014;
The batch sampler to split in several shards.`,name:"batch_sampler"},{anchor:"accelerate.data_loader.BatchSamplerShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.BatchSamplerShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.BatchSamplerShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with a sampler of <code>[[0, 1, 2, 3], [4, 5, 6, 7]]</code>, this will result in:</p>
<ul>
<li>the sampler on process 0 to yield <code>[0, 1, 2, 3]</code> and the sampler on process 1 to yield <code>[4, 5, 6, 7]</code> if
this argument is set to <code>False</code>.</li>
<li>the sampler on process 0 to yield <code>[0, 1]</code> then <code>[4, 5]</code> and the sampler on process 1 to yield <code>[2, 3]</code>
then <code>[6, 7]</code> if this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/data_loader.py#L69"}}),he=new sn({props:{warning:!0,$$slots:{default:[un]},$$scope:{ctx:Ze}}}),Ce=new G({}),Be=new P({props:{name:"class accelerate.data_loader.IterableDatasetShard",anchor:"accelerate.data_loader.IterableDatasetShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.IterableDatasetShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.IterableDataset</code>) &#x2014;
The batch sampler to split in several shards.`,name:"dataset"},{anchor:"accelerate.data_loader.IterableDatasetShard.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The size of the batches per shard (if <code>split_batches=False</code>) or the size of the batches (if
<code>split_batches=True</code>).`,name:"batch_size"},{anchor:"accelerate.data_loader.IterableDatasetShard.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to drop the last incomplete batch or complete the last batches by using the samples from the
beginning.`,name:"drop_last"},{anchor:"accelerate.data_loader.IterableDatasetShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.IterableDatasetShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.IterableDatasetShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with an iterable dataset yielding of <code>[0, 1, 2, 3, 4, 5, 6, 7]</code>, this will result in:</p>
<ul>
<li>the shard on process 0 to yield <code>[0, 1, 2, 3]</code> and the shard on process 1 to yield <code>[4, 5, 6, 7]</code> if this
argument is set to <code>False</code>.</li>
<li>the shard on process 0 to yield <code>[0, 1, 4, 5]</code> and the sampler on process 1 to yield <code>[2, 3, 6, 7]</code> if
this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/data_loader.py#L190"}}),We=new G({}),qe=new P({props:{name:"class accelerate.scheduler.AcceleratedScheduler",anchor:"accelerate.scheduler.AcceleratedScheduler",parameters:[{name:"scheduler",val:""},{name:"optimizers",val:""},{name:"step_with_optimizer",val:": bool = True"},{name:"split_batches",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.scheduler.AcceleratedScheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
The scheduler to wrap.`,name:"scheduler"},{anchor:"accelerate.scheduler.AcceleratedScheduler.optimizers",description:`<strong>optimizers</strong> (one or a list of <code>torch.optim.Optimizer</code>) &#x2014;
The optimizers used.`,name:"optimizers"},{anchor:"accelerate.scheduler.AcceleratedScheduler.step_with_optimizer",description:`<strong>step_with_optimizer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the scheduler should be stepped at each optimizer step.`,name:"step_with_optimizer"},{anchor:"accelerate.scheduler.AcceleratedScheduler.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the dataloaders split one batch across the different processes (so batch size is the same
regardless of the number of processes) or create batches on each process (so batch size is the original
batch size multiplied by the number of processes).`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/scheduler.py#L25"}}),Ve=new G({}),Ue=new G({}),He=new P({props:{name:"class accelerate.state.AcceleratorState",anchor:"accelerate.state.AcceleratorState",parameters:[{name:"mixed_precision",val:": str = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:" = None"},{name:"fsdp_plugin",val:" = None"},{name:"_from_accelerator",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>device</strong> (<code>torch.device</code>) &#x2014; The device to use. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>sync_gradients</strong> (<code>bool</code>) &#x2014; Whether to sync the gradients or not &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>distributed_type</strong> (<code>~accelerate.state.DistributedType</code>) &#x2014; The type of distributed environment currently &#x2014;
in use.`,name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>num_processes</strong> (<code>int</code>) &#x2014; The number of processes currently launched in parallel. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>process_index</strong> (<code>int</code>) &#x2014; The index of the current process. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>local_process_index</strong> (<code>int</code>) &#x2014; The index of the current process on the current server. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>mixed_precision</strong> (<code>str</code>) &#x2014; Whether or not the current script will use mixed precision. If you are using &#x2014;
mixed precision, define if you want to use FP16 or BF16 (bfloat16) as the floating point.`,name:"-"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/state.py#L48"}}),Me=new G({}),je=new P({props:{name:"class accelerate.tracking.GeneralTracker",anchor:"accelerate.tracking.GeneralTracker",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/tracking.py#L52"}}),Xe=new P({props:{name:"finish",anchor:"accelerate.tracking.GeneralTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/tracking.py#L91"}}),Je=new P({props:{name:"log",anchor:"accelerate.tracking.GeneralTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int]"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.GeneralTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/tracking.py#L77"}}),Ke=new P({props:{name:"store_init_configuration",anchor:"accelerate.tracking.GeneralTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/vr_494/src/accelerate/tracking.py#L64"}}),{c(){u=r("meta"),T=i(),$=r("h1"),S=r("a"),D=r("span"),f(w.$$.fragment),y=i(),I=r("span"),Xa=n("Internals"),oa=i(),B=r("h2"),ae=r("a"),nt=r("span"),f(Se.$$.fragment),Ja=i(),lt=r("span"),Ka=n("Gradient Accumulation states"),sa=i(),A=r("div"),f(Ee.$$.fragment),Qa=i(),W=r("p"),Ya=n("This is a variation of a "),xe=r("a"),Za=n("singleton class"),er=n(` in the sense that all
instance of `),ct=r("code"),tr=n("GradientState"),ar=n(" share the same state, which is initialized on the first instantiation."),rr=i(),it=r("p"),or=n(`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),sr=i(),De=r("ul"),re=r("li"),dt=r("strong"),nr=n("sync_gradients"),lr=n(" ("),ht=r("code"),cr=n("bool"),ir=n(") \u2014 Whether the gradients should be synced"),dr=i(),oe=r("li"),pt=r("strong"),hr=n("end_of_dataloader"),pr=n(" ("),ut=r("code"),ur=n("bool"),fr=n(") \u2014 Whether we have reached the end the current dataloader"),na=i(),q=r("h2"),se=r("a"),ft=r("span"),f(Ae.$$.fragment),mr=i(),mt=r("span"),gr=n("Optimizer"),la=i(),F=r("div"),f(ke.$$.fragment),vr=i(),gt=r("p"),_r=n("Internal wrapper around a torch optimizer."),ca=i(),V=r("h2"),ne=r("a"),vt=r("span"),f(Te.$$.fragment),br=i(),_t=r("span"),$r=n("DataLoader"),ia=i(),le=r("p"),wr=n("The main work on your PyTorch "),bt=r("code"),yr=n("DataLoader"),Sr=n(" is done by the following function:"),da=i(),k=r("div"),f(ze.$$.fragment),Er=i(),Pe=r("p"),xr=n("Wraps a PyTorch "),$t=r("code"),Dr=n("DataLoader"),Ar=n(" to generate batches for one of the processes only."),kr=i(),U=r("p"),Tr=n("Depending on the value of the "),wt=r("code"),zr=n("drop_last"),Pr=n(" attribute of the "),yt=r("code"),Ir=n("dataloader"),Lr=n(` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Or=i(),f(ce.$$.fragment),ha=i(),H=r("h3"),ie=r("a"),St=r("span"),f(Ie.$$.fragment),Nr=i(),Et=r("span"),Gr=n("BatchSamplerShard"),pa=i(),R=r("div"),f(Le.$$.fragment),Cr=i(),Oe=r("p"),Br=n("Subclass of a PyTorch "),xt=r("code"),Wr=n("DataLoader"),qr=n(" that will deal with device placement and current distributed setup."),ua=i(),M=r("h3"),de=r("a"),Dt=r("span"),f(Ne.$$.fragment),Fr=i(),At=r("span"),Vr=n("BatchSamplerShard"),fa=i(),L=r("div"),f(Ge.$$.fragment),Ur=i(),O=r("p"),Hr=n("Wraps a PyTorch "),kt=r("code"),Rr=n("BatchSampler"),Mr=n(` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Tt=r("code"),jr=n("num_processes"),Xr=n(` and that all have the same size.
Depending on the value of the `),zt=r("code"),Jr=n("drop_last"),Kr=n(` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Qr=i(),f(he.$$.fragment),ma=i(),j=r("h3"),pe=r("a"),Pt=r("span"),f(Ce.$$.fragment),Yr=i(),It=r("span"),Zr=n("IterableDatasetShard"),ga=i(),X=r("div"),f(Be.$$.fragment),eo=i(),E=r("p"),to=n("Wraps a PyTorch "),Lt=r("code"),ao=n("IterableDataset"),ro=n(` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),Ot=r("code"),oo=n("split_batches"),so=n(", this is either "),Nt=r("code"),no=n("batch_size"),lo=n(" or "),Gt=r("code"),co=n("batch_size x num_processes"),io=n(`). Depending on the value of the
`),Ct=r("code"),ho=n("drop_last"),po=n(` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),va=i(),J=r("h2"),ue=r("a"),Bt=r("span"),f(We.$$.fragment),uo=i(),Wt=r("span"),fo=n("Scheduler"),_a=i(),N=r("div"),f(qe.$$.fragment),mo=i(),qt=r("p"),go=n(`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when:`),vo=i(),Fe=r("ul"),Ft=r("li"),_o=n("gradients went overflow and there was no training step (in mixed precision training)"),bo=i(),Vt=r("li"),$o=n("step was skipped because of gradient accumulation"),ba=i(),K=r("h2"),fe=r("a"),Ut=r("span"),f(Ve.$$.fragment),wo=i(),Ht=r("span"),yo=n("Distributed Config"),$a=i(),Q=r("h3"),me=r("a"),Rt=r("span"),f(Ue.$$.fragment),So=i(),Mt=r("span"),Eo=n("AcceleratorState"),wa=i(),Y=r("div"),f(He.$$.fragment),xo=i(),Z=r("p"),Do=n("This is a variation of a "),Re=r("a"),Ao=n("singleton class"),ko=n(` in the sense that all
instance of `),jt=r("code"),To=n("AcceleratorState"),zo=n(" share the same state, which is initialized on the first instantiation."),ya=i(),ee=r("h2"),ge=r("a"),Xt=r("span"),f(Me.$$.fragment),Po=i(),Jt=r("span"),Io=n("Tracking"),Sa=i(),x=r("div"),f(je.$$.fragment),Lo=i(),Kt=r("p"),Oo=n("A base Tracker class to be used for all logging integration implementations."),No=i(),ve=r("div"),f(Xe.$$.fragment),Go=i(),Qt=r("p"),Co=n(`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),Bo=i(),_e=r("div"),f(Je.$$.fragment),Wo=i(),te=r("p"),qo=n("Logs "),Yt=r("code"),Fo=n("values"),Vo=n(" to the current run. Base "),Zt=r("code"),Uo=n("log"),Ho=n(" implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),Ro=i(),be=r("div"),f(Ke.$$.fragment),Mo=i(),Qe=r("p"),jo=n("Logs "),ea=r("code"),Xo=n("values"),Jo=n(` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),this.h()},l(t){const h=dn('[data-svelte="svelte-1phssyn"]',document.head);u=o(h,"META",{name:!0,content:!0}),h.forEach(a),T=d(t),$=o(t,"H1",{class:!0});var Ye=s($);S=o(Ye,"A",{id:!0,class:!0,href:!0});var ta=s(S);D=o(ta,"SPAN",{});var Ko=s(D);m(w.$$.fragment,Ko),Ko.forEach(a),ta.forEach(a),y=d(Ye),I=o(Ye,"SPAN",{});var Qo=s(I);Xa=l(Qo,"Internals"),Qo.forEach(a),Ye.forEach(a),oa=d(t),B=o(t,"H2",{class:!0});var xa=s(B);ae=o(xa,"A",{id:!0,class:!0,href:!0});var Yo=s(ae);nt=o(Yo,"SPAN",{});var Zo=s(nt);m(Se.$$.fragment,Zo),Zo.forEach(a),Yo.forEach(a),Ja=d(xa),lt=o(xa,"SPAN",{});var es=s(lt);Ka=l(es,"Gradient Accumulation states"),es.forEach(a),xa.forEach(a),sa=d(t),A=o(t,"DIV",{class:!0});var $e=s(A);m(Ee.$$.fragment,$e),Qa=d($e),W=o($e,"P",{});var et=s(W);Ya=l(et,"This is a variation of a "),xe=o(et,"A",{href:!0,rel:!0});var ts=s(xe);Za=l(ts,"singleton class"),ts.forEach(a),er=l(et,` in the sense that all
instance of `),ct=o(et,"CODE",{});var as=s(ct);tr=l(as,"GradientState"),as.forEach(a),ar=l(et," share the same state, which is initialized on the first instantiation."),et.forEach(a),rr=d($e),it=o($e,"P",{});var rs=s(it);or=l(rs,`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),rs.forEach(a),sr=d($e),De=o($e,"UL",{});var Da=s(De);re=o(Da,"LI",{});var aa=s(re);dt=o(aa,"STRONG",{});var os=s(dt);nr=l(os,"sync_gradients"),os.forEach(a),lr=l(aa," ("),ht=o(aa,"CODE",{});var ss=s(ht);cr=l(ss,"bool"),ss.forEach(a),ir=l(aa,") \u2014 Whether the gradients should be synced"),aa.forEach(a),dr=d(Da),oe=o(Da,"LI",{});var ra=s(oe);pt=o(ra,"STRONG",{});var ns=s(pt);hr=l(ns,"end_of_dataloader"),ns.forEach(a),pr=l(ra," ("),ut=o(ra,"CODE",{});var ls=s(ut);ur=l(ls,"bool"),ls.forEach(a),fr=l(ra,") \u2014 Whether we have reached the end the current dataloader"),ra.forEach(a),Da.forEach(a),$e.forEach(a),na=d(t),q=o(t,"H2",{class:!0});var Aa=s(q);se=o(Aa,"A",{id:!0,class:!0,href:!0});var cs=s(se);ft=o(cs,"SPAN",{});var is=s(ft);m(Ae.$$.fragment,is),is.forEach(a),cs.forEach(a),mr=d(Aa),mt=o(Aa,"SPAN",{});var ds=s(mt);gr=l(ds,"Optimizer"),ds.forEach(a),Aa.forEach(a),la=d(t),F=o(t,"DIV",{class:!0});var ka=s(F);m(ke.$$.fragment,ka),vr=d(ka),gt=o(ka,"P",{});var hs=s(gt);_r=l(hs,"Internal wrapper around a torch optimizer."),hs.forEach(a),ka.forEach(a),ca=d(t),V=o(t,"H2",{class:!0});var Ta=s(V);ne=o(Ta,"A",{id:!0,class:!0,href:!0});var ps=s(ne);vt=o(ps,"SPAN",{});var us=s(vt);m(Te.$$.fragment,us),us.forEach(a),ps.forEach(a),br=d(Ta),_t=o(Ta,"SPAN",{});var fs=s(_t);$r=l(fs,"DataLoader"),fs.forEach(a),Ta.forEach(a),ia=d(t),le=o(t,"P",{});var za=s(le);wr=l(za,"The main work on your PyTorch "),bt=o(za,"CODE",{});var ms=s(bt);yr=l(ms,"DataLoader"),ms.forEach(a),Sr=l(za," is done by the following function:"),za.forEach(a),da=d(t),k=o(t,"DIV",{class:!0});var we=s(k);m(ze.$$.fragment,we),Er=d(we),Pe=o(we,"P",{});var Pa=s(Pe);xr=l(Pa,"Wraps a PyTorch "),$t=o(Pa,"CODE",{});var gs=s($t);Dr=l(gs,"DataLoader"),gs.forEach(a),Ar=l(Pa," to generate batches for one of the processes only."),Pa.forEach(a),kr=d(we),U=o(we,"P",{});var tt=s(U);Tr=l(tt,"Depending on the value of the "),wt=o(tt,"CODE",{});var vs=s(wt);zr=l(vs,"drop_last"),vs.forEach(a),Pr=l(tt," attribute of the "),yt=o(tt,"CODE",{});var _s=s(yt);Ir=l(_s,"dataloader"),_s.forEach(a),Lr=l(tt,` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),tt.forEach(a),Or=d(we),m(ce.$$.fragment,we),we.forEach(a),ha=d(t),H=o(t,"H3",{class:!0});var Ia=s(H);ie=o(Ia,"A",{id:!0,class:!0,href:!0});var bs=s(ie);St=o(bs,"SPAN",{});var $s=s(St);m(Ie.$$.fragment,$s),$s.forEach(a),bs.forEach(a),Nr=d(Ia),Et=o(Ia,"SPAN",{});var ws=s(Et);Gr=l(ws,"BatchSamplerShard"),ws.forEach(a),Ia.forEach(a),pa=d(t),R=o(t,"DIV",{class:!0});var La=s(R);m(Le.$$.fragment,La),Cr=d(La),Oe=o(La,"P",{});var Oa=s(Oe);Br=l(Oa,"Subclass of a PyTorch "),xt=o(Oa,"CODE",{});var ys=s(xt);Wr=l(ys,"DataLoader"),ys.forEach(a),qr=l(Oa," that will deal with device placement and current distributed setup."),Oa.forEach(a),La.forEach(a),ua=d(t),M=o(t,"H3",{class:!0});var Na=s(M);de=o(Na,"A",{id:!0,class:!0,href:!0});var Ss=s(de);Dt=o(Ss,"SPAN",{});var Es=s(Dt);m(Ne.$$.fragment,Es),Es.forEach(a),Ss.forEach(a),Fr=d(Na),At=o(Na,"SPAN",{});var xs=s(At);Vr=l(xs,"BatchSamplerShard"),xs.forEach(a),Na.forEach(a),fa=d(t),L=o(t,"DIV",{class:!0});var at=s(L);m(Ge.$$.fragment,at),Ur=d(at),O=o(at,"P",{});var ye=s(O);Hr=l(ye,"Wraps a PyTorch "),kt=o(ye,"CODE",{});var Ds=s(kt);Rr=l(Ds,"BatchSampler"),Ds.forEach(a),Mr=l(ye,` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Tt=o(ye,"CODE",{});var As=s(Tt);jr=l(As,"num_processes"),As.forEach(a),Xr=l(ye,` and that all have the same size.
Depending on the value of the `),zt=o(ye,"CODE",{});var ks=s(zt);Jr=l(ks,"drop_last"),ks.forEach(a),Kr=l(ye,` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),ye.forEach(a),Qr=d(at),m(he.$$.fragment,at),at.forEach(a),ma=d(t),j=o(t,"H3",{class:!0});var Ga=s(j);pe=o(Ga,"A",{id:!0,class:!0,href:!0});var Ts=s(pe);Pt=o(Ts,"SPAN",{});var zs=s(Pt);m(Ce.$$.fragment,zs),zs.forEach(a),Ts.forEach(a),Yr=d(Ga),It=o(Ga,"SPAN",{});var Ps=s(It);Zr=l(Ps,"IterableDatasetShard"),Ps.forEach(a),Ga.forEach(a),ga=d(t),X=o(t,"DIV",{class:!0});var Ca=s(X);m(Be.$$.fragment,Ca),eo=d(Ca),E=o(Ca,"P",{});var z=s(E);to=l(z,"Wraps a PyTorch "),Lt=o(z,"CODE",{});var Is=s(Lt);ao=l(Is,"IterableDataset"),Is.forEach(a),ro=l(z,` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),Ot=o(z,"CODE",{});var Ls=s(Ot);oo=l(Ls,"split_batches"),Ls.forEach(a),so=l(z,", this is either "),Nt=o(z,"CODE",{});var Os=s(Nt);no=l(Os,"batch_size"),Os.forEach(a),lo=l(z," or "),Gt=o(z,"CODE",{});var Ns=s(Gt);co=l(Ns,"batch_size x num_processes"),Ns.forEach(a),io=l(z,`). Depending on the value of the
`),Ct=o(z,"CODE",{});var Gs=s(Ct);ho=l(Gs,"drop_last"),Gs.forEach(a),po=l(z,` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),z.forEach(a),Ca.forEach(a),va=d(t),J=o(t,"H2",{class:!0});var Ba=s(J);ue=o(Ba,"A",{id:!0,class:!0,href:!0});var Cs=s(ue);Bt=o(Cs,"SPAN",{});var Bs=s(Bt);m(We.$$.fragment,Bs),Bs.forEach(a),Cs.forEach(a),uo=d(Ba),Wt=o(Ba,"SPAN",{});var Ws=s(Wt);fo=l(Ws,"Scheduler"),Ws.forEach(a),Ba.forEach(a),_a=d(t),N=o(t,"DIV",{class:!0});var rt=s(N);m(qe.$$.fragment,rt),mo=d(rt),qt=o(rt,"P",{});var qs=s(qt);go=l(qs,`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when:`),qs.forEach(a),vo=d(rt),Fe=o(rt,"UL",{});var Wa=s(Fe);Ft=o(Wa,"LI",{});var Fs=s(Ft);_o=l(Fs,"gradients went overflow and there was no training step (in mixed precision training)"),Fs.forEach(a),bo=d(Wa),Vt=o(Wa,"LI",{});var Vs=s(Vt);$o=l(Vs,"step was skipped because of gradient accumulation"),Vs.forEach(a),Wa.forEach(a),rt.forEach(a),ba=d(t),K=o(t,"H2",{class:!0});var qa=s(K);fe=o(qa,"A",{id:!0,class:!0,href:!0});var Us=s(fe);Ut=o(Us,"SPAN",{});var Hs=s(Ut);m(Ve.$$.fragment,Hs),Hs.forEach(a),Us.forEach(a),wo=d(qa),Ht=o(qa,"SPAN",{});var Rs=s(Ht);yo=l(Rs,"Distributed Config"),Rs.forEach(a),qa.forEach(a),$a=d(t),Q=o(t,"H3",{class:!0});var Fa=s(Q);me=o(Fa,"A",{id:!0,class:!0,href:!0});var Ms=s(me);Rt=o(Ms,"SPAN",{});var js=s(Rt);m(Ue.$$.fragment,js),js.forEach(a),Ms.forEach(a),So=d(Fa),Mt=o(Fa,"SPAN",{});var Xs=s(Mt);Eo=l(Xs,"AcceleratorState"),Xs.forEach(a),Fa.forEach(a),wa=d(t),Y=o(t,"DIV",{class:!0});var Va=s(Y);m(He.$$.fragment,Va),xo=d(Va),Z=o(Va,"P",{});var ot=s(Z);Do=l(ot,"This is a variation of a "),Re=o(ot,"A",{href:!0,rel:!0});var Js=s(Re);Ao=l(Js,"singleton class"),Js.forEach(a),ko=l(ot,` in the sense that all
instance of `),jt=o(ot,"CODE",{});var Ks=s(jt);To=l(Ks,"AcceleratorState"),Ks.forEach(a),zo=l(ot," share the same state, which is initialized on the first instantiation."),ot.forEach(a),Va.forEach(a),ya=d(t),ee=o(t,"H2",{class:!0});var Ua=s(ee);ge=o(Ua,"A",{id:!0,class:!0,href:!0});var Qs=s(ge);Xt=o(Qs,"SPAN",{});var Ys=s(Xt);m(Me.$$.fragment,Ys),Ys.forEach(a),Qs.forEach(a),Po=d(Ua),Jt=o(Ua,"SPAN",{});var Zs=s(Jt);Io=l(Zs,"Tracking"),Zs.forEach(a),Ua.forEach(a),Sa=d(t),x=o(t,"DIV",{class:!0});var C=s(x);m(je.$$.fragment,C),Lo=d(C),Kt=o(C,"P",{});var en=s(Kt);Oo=l(en,"A base Tracker class to be used for all logging integration implementations."),en.forEach(a),No=d(C),ve=o(C,"DIV",{class:!0});var Ha=s(ve);m(Xe.$$.fragment,Ha),Go=d(Ha),Qt=o(Ha,"P",{});var tn=s(Qt);Co=l(tn,`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),tn.forEach(a),Ha.forEach(a),Bo=d(C),_e=o(C,"DIV",{class:!0});var Ra=s(_e);m(Je.$$.fragment,Ra),Wo=d(Ra),te=o(Ra,"P",{});var st=s(te);qo=l(st,"Logs "),Yt=o(st,"CODE",{});var an=s(Yt);Fo=l(an,"values"),an.forEach(a),Vo=l(st," to the current run. Base "),Zt=o(st,"CODE",{});var rn=s(Zt);Uo=l(rn,"log"),rn.forEach(a),Ho=l(st," implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),st.forEach(a),Ra.forEach(a),Ro=d(C),be=o(C,"DIV",{class:!0});var Ma=s(be);m(Ke.$$.fragment,Ma),Mo=d(Ma),Qe=o(Ma,"P",{});var ja=s(Qe);jo=l(ja,"Logs "),ea=o(ja,"CODE",{});var on=s(ea);Xo=l(on,"values"),on.forEach(a),Jo=l(ja,` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),ja.forEach(a),Ma.forEach(a),C.forEach(a),this.h()},h(){c(u,"name","hf:doc:metadata"),c(u,"content",JSON.stringify(mn)),c(S,"id","internals"),c(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S,"href","#internals"),c($,"class","relative group"),c(ae,"id","accelerate.state.GradientState"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#accelerate.state.GradientState"),c(B,"class","relative group"),c(xe,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(xe,"rel","nofollow"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(se,"id","accelerate.optimizer.AcceleratedOptimizer"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#accelerate.optimizer.AcceleratedOptimizer"),c(q,"class","relative group"),c(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ne,"id","accelerate.data_loader.prepare_data_loader"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#accelerate.data_loader.prepare_data_loader"),c(V,"class","relative group"),c(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ie,"id","accelerate.data_loader.DataLoaderShard"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#accelerate.data_loader.DataLoaderShard"),c(H,"class","relative group"),c(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(de,"id","accelerate.data_loader.BatchSamplerShard"),c(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(de,"href","#accelerate.data_loader.BatchSamplerShard"),c(M,"class","relative group"),c(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pe,"id","accelerate.data_loader.IterableDatasetShard"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#accelerate.data_loader.IterableDatasetShard"),c(j,"class","relative group"),c(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ue,"id","accelerate.scheduler.AcceleratedScheduler"),c(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ue,"href","#accelerate.scheduler.AcceleratedScheduler"),c(J,"class","relative group"),c(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fe,"id","distributed-config"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#distributed-config"),c(K,"class","relative group"),c(me,"id","accelerate.state.AcceleratorState"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#accelerate.state.AcceleratorState"),c(Q,"class","relative group"),c(Re,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(Re,"rel","nofollow"),c(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ge,"id","accelerate.tracking.GeneralTracker"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#accelerate.tracking.GeneralTracker"),c(ee,"class","relative group"),c(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,u),p(t,T,h),p(t,$,h),e($,S),e(S,D),g(w,D,null),e($,y),e($,I),e(I,Xa),p(t,oa,h),p(t,B,h),e(B,ae),e(ae,nt),g(Se,nt,null),e(B,Ja),e(B,lt),e(lt,Ka),p(t,sa,h),p(t,A,h),g(Ee,A,null),e(A,Qa),e(A,W),e(W,Ya),e(W,xe),e(xe,Za),e(W,er),e(W,ct),e(ct,tr),e(W,ar),e(A,rr),e(A,it),e(it,or),e(A,sr),e(A,De),e(De,re),e(re,dt),e(dt,nr),e(re,lr),e(re,ht),e(ht,cr),e(re,ir),e(De,dr),e(De,oe),e(oe,pt),e(pt,hr),e(oe,pr),e(oe,ut),e(ut,ur),e(oe,fr),p(t,na,h),p(t,q,h),e(q,se),e(se,ft),g(Ae,ft,null),e(q,mr),e(q,mt),e(mt,gr),p(t,la,h),p(t,F,h),g(ke,F,null),e(F,vr),e(F,gt),e(gt,_r),p(t,ca,h),p(t,V,h),e(V,ne),e(ne,vt),g(Te,vt,null),e(V,br),e(V,_t),e(_t,$r),p(t,ia,h),p(t,le,h),e(le,wr),e(le,bt),e(bt,yr),e(le,Sr),p(t,da,h),p(t,k,h),g(ze,k,null),e(k,Er),e(k,Pe),e(Pe,xr),e(Pe,$t),e($t,Dr),e(Pe,Ar),e(k,kr),e(k,U),e(U,Tr),e(U,wt),e(wt,zr),e(U,Pr),e(U,yt),e(yt,Ir),e(U,Lr),e(k,Or),g(ce,k,null),p(t,ha,h),p(t,H,h),e(H,ie),e(ie,St),g(Ie,St,null),e(H,Nr),e(H,Et),e(Et,Gr),p(t,pa,h),p(t,R,h),g(Le,R,null),e(R,Cr),e(R,Oe),e(Oe,Br),e(Oe,xt),e(xt,Wr),e(Oe,qr),p(t,ua,h),p(t,M,h),e(M,de),e(de,Dt),g(Ne,Dt,null),e(M,Fr),e(M,At),e(At,Vr),p(t,fa,h),p(t,L,h),g(Ge,L,null),e(L,Ur),e(L,O),e(O,Hr),e(O,kt),e(kt,Rr),e(O,Mr),e(O,Tt),e(Tt,jr),e(O,Xr),e(O,zt),e(zt,Jr),e(O,Kr),e(L,Qr),g(he,L,null),p(t,ma,h),p(t,j,h),e(j,pe),e(pe,Pt),g(Ce,Pt,null),e(j,Yr),e(j,It),e(It,Zr),p(t,ga,h),p(t,X,h),g(Be,X,null),e(X,eo),e(X,E),e(E,to),e(E,Lt),e(Lt,ao),e(E,ro),e(E,Ot),e(Ot,oo),e(E,so),e(E,Nt),e(Nt,no),e(E,lo),e(E,Gt),e(Gt,co),e(E,io),e(E,Ct),e(Ct,ho),e(E,po),p(t,va,h),p(t,J,h),e(J,ue),e(ue,Bt),g(We,Bt,null),e(J,uo),e(J,Wt),e(Wt,fo),p(t,_a,h),p(t,N,h),g(qe,N,null),e(N,mo),e(N,qt),e(qt,go),e(N,vo),e(N,Fe),e(Fe,Ft),e(Ft,_o),e(Fe,bo),e(Fe,Vt),e(Vt,$o),p(t,ba,h),p(t,K,h),e(K,fe),e(fe,Ut),g(Ve,Ut,null),e(K,wo),e(K,Ht),e(Ht,yo),p(t,$a,h),p(t,Q,h),e(Q,me),e(me,Rt),g(Ue,Rt,null),e(Q,So),e(Q,Mt),e(Mt,Eo),p(t,wa,h),p(t,Y,h),g(He,Y,null),e(Y,xo),e(Y,Z),e(Z,Do),e(Z,Re),e(Re,Ao),e(Z,ko),e(Z,jt),e(jt,To),e(Z,zo),p(t,ya,h),p(t,ee,h),e(ee,ge),e(ge,Xt),g(Me,Xt,null),e(ee,Po),e(ee,Jt),e(Jt,Io),p(t,Sa,h),p(t,x,h),g(je,x,null),e(x,Lo),e(x,Kt),e(Kt,Oo),e(x,No),e(x,ve),g(Xe,ve,null),e(ve,Go),e(ve,Qt),e(Qt,Co),e(x,Bo),e(x,_e),g(Je,_e,null),e(_e,Wo),e(_e,te),e(te,qo),e(te,Yt),e(Yt,Fo),e(te,Vo),e(te,Zt),e(Zt,Uo),e(te,Ho),e(x,Ro),e(x,be),g(Ke,be,null),e(be,Mo),e(be,Qe),e(Qe,jo),e(Qe,ea),e(ea,Xo),e(Qe,Jo),Ea=!0},p(t,[h]){const Ye={};h&2&&(Ye.$$scope={dirty:h,ctx:t}),ce.$set(Ye);const ta={};h&2&&(ta.$$scope={dirty:h,ctx:t}),he.$set(ta)},i(t){Ea||(v(w.$$.fragment,t),v(Se.$$.fragment,t),v(Ee.$$.fragment,t),v(Ae.$$.fragment,t),v(ke.$$.fragment,t),v(Te.$$.fragment,t),v(ze.$$.fragment,t),v(ce.$$.fragment,t),v(Ie.$$.fragment,t),v(Le.$$.fragment,t),v(Ne.$$.fragment,t),v(Ge.$$.fragment,t),v(he.$$.fragment,t),v(Ce.$$.fragment,t),v(Be.$$.fragment,t),v(We.$$.fragment,t),v(qe.$$.fragment,t),v(Ve.$$.fragment,t),v(Ue.$$.fragment,t),v(He.$$.fragment,t),v(Me.$$.fragment,t),v(je.$$.fragment,t),v(Xe.$$.fragment,t),v(Je.$$.fragment,t),v(Ke.$$.fragment,t),Ea=!0)},o(t){_(w.$$.fragment,t),_(Se.$$.fragment,t),_(Ee.$$.fragment,t),_(Ae.$$.fragment,t),_(ke.$$.fragment,t),_(Te.$$.fragment,t),_(ze.$$.fragment,t),_(ce.$$.fragment,t),_(Ie.$$.fragment,t),_(Le.$$.fragment,t),_(Ne.$$.fragment,t),_(Ge.$$.fragment,t),_(he.$$.fragment,t),_(Ce.$$.fragment,t),_(Be.$$.fragment,t),_(We.$$.fragment,t),_(qe.$$.fragment,t),_(Ve.$$.fragment,t),_(Ue.$$.fragment,t),_(He.$$.fragment,t),_(Me.$$.fragment,t),_(je.$$.fragment,t),_(Xe.$$.fragment,t),_(Je.$$.fragment,t),_(Ke.$$.fragment,t),Ea=!1},d(t){a(u),t&&a(T),t&&a($),b(w),t&&a(oa),t&&a(B),b(Se),t&&a(sa),t&&a(A),b(Ee),t&&a(na),t&&a(q),b(Ae),t&&a(la),t&&a(F),b(ke),t&&a(ca),t&&a(V),b(Te),t&&a(ia),t&&a(le),t&&a(da),t&&a(k),b(ze),b(ce),t&&a(ha),t&&a(H),b(Ie),t&&a(pa),t&&a(R),b(Le),t&&a(ua),t&&a(M),b(Ne),t&&a(fa),t&&a(L),b(Ge),b(he),t&&a(ma),t&&a(j),b(Ce),t&&a(ga),t&&a(X),b(Be),t&&a(va),t&&a(J),b(We),t&&a(_a),t&&a(N),b(qe),t&&a(ba),t&&a(K),b(Ve),t&&a($a),t&&a(Q),b(Ue),t&&a(wa),t&&a(Y),b(He),t&&a(ya),t&&a(ee),b(Me),t&&a(Sa),t&&a(x),b(je),b(Xe),b(Je),b(Ke)}}}const mn={local:"internals",sections:[{local:"accelerate.state.GradientState",title:"Gradient Accumulation states"},{local:"accelerate.optimizer.AcceleratedOptimizer",title:"Optimizer"},{local:"accelerate.data_loader.prepare_data_loader",sections:[{local:"accelerate.data_loader.DataLoaderShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.BatchSamplerShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.IterableDatasetShard",title:"IterableDatasetShard"}],title:"DataLoader"},{local:"accelerate.scheduler.AcceleratedScheduler",title:"Scheduler"},{local:"distributed-config",sections:[{local:"accelerate.state.AcceleratorState",title:"AcceleratorState"}],title:"Distributed Config"},{local:"accelerate.tracking.GeneralTracker",title:"Tracking"}],title:"Internals"};function gn(Ze){return hn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wn extends nn{constructor(u){super();ln(this,u,gn,fn,cn,{})}}export{wn as default,mn as metadata};
