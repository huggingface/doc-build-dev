import{S as cc,i as hc,s as pc,F as mc,e as i,w as b,k as h,c as l,a as r,x as $,d as o,m as p,b as _,g as d,G as t,y as k,P as uc,H as _c,I as gc,J as vc,q as w,o as y,B as P,v as fc,T as wc,U as yc,t as a,M as bc,h as s,L as $c}from"../chunks/vendor-hf-doc-builder.js";import{T as me}from"../chunks/Tip-hf-doc-builder.js";import{D as Pt}from"../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as ue}from"../chunks/IconCopyLink-hf-doc-builder.js";const{window:kc}=wc;function Pc(x){let c,v,f,u,E,m,g,A,U;u=new ue({props:{classNames:"text-smd"}});const C=x[4].default,G=mc(C,x,x[3],null);return{c(){c=i("div"),v=i("a"),f=i("span"),b(u.$$.fragment),m=h(),G&&G.c(),this.h()},l(j){c=l(j,"DIV",{class:!0});var q=r(c);v=l(q,"A",{id:!0,class:!0,href:!0});var O=r(v);f=l(O,"SPAN",{});var F=r(f);$(u.$$.fragment,F),F.forEach(o),O.forEach(o),m=p(q),G&&G.l(q),q.forEach(o),this.h()},h(){_(v,"id",x[0]),_(v,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(v,"href",E=`#${x[0]}`),_(c,"class","relative group rounded-md")},m(j,q){d(j,c,q),t(c,v),t(v,f),k(u,f,null),t(c,m),G&&G.m(c,null),x[5](c),g=!0,A||(U=uc(kc,"hashchange",x[2]),A=!0)},p(j,[q]){(!g||q&1)&&_(v,"id",j[0]),(!g||q&1&&E!==(E=`#${j[0]}`))&&_(v,"href",E),G&&G.p&&(!g||q&8)&&_c(G,C,j,j[3],g?vc(C,j[3],q,null):gc(j[3]),null)},i(j){g||(w(u.$$.fragment,j),w(G,j),g=!0)},o(j){y(u.$$.fragment,j),y(G,j),g=!1},d(j){j&&o(c),P(u),G&&G.d(j),x[5](null),A=!1,U()}}}const dc="bg-yellow-50 dark:bg-[#494a3d]";function Ec(x,c,v){let{$$slots:f={},$$scope:u}=c,{anchor:E}=c,m;function g(){const{hash:U}=window.location,C=U.substring(1);m&&m.classList.remove(...dc.split(" ")),C===E&&m.classList.add(...dc.split(" "))}fc(()=>{g()});function A(U){yc[U?"unshift":"push"](()=>{m=U,v(1,m)})}return x.$$set=U=>{"anchor"in U&&v(0,E=U.anchor),"$$scope"in U&&v(3,u=U.$$scope)},[E,m,g,u,f,A]}class jc extends cc{constructor(c){super();hc(this,c,Ec,Pc,pc,{anchor:0})}}function xc(x){let c,v;return{c(){c=i("p"),v=a("This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future.")},l(f){c=l(f,"P",{});var u=r(c);v=s(u,"This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future."),u.forEach(o)},m(f,u){d(f,c,u),t(c,v)},d(f){f&&o(c)}}}function Uc(x){let c,v;return{c(){c=i("p"),v=a("You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device.")},l(f){c=l(f,"P",{});var u=r(c);v=s(u,"You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device."),u.forEach(o)},m(f,u){d(f,c,u),t(c,v)},d(f){f&&o(c)}}}function Ac(x){let c,v,f,u,E;return{c(){c=i("p"),v=a("This only supports inference of your model, not training. Most of the computation happens behind "),f=i("code"),u=a("torch.no_grad()"),E=a(" context managers to avoid spending some GPU memory with intermediate activations.")},l(m){c=l(m,"P",{});var g=r(c);v=s(g,"This only supports inference of your model, not training. Most of the computation happens behind "),f=l(g,"CODE",{});var A=r(f);u=s(A,"torch.no_grad()"),A.forEach(o),E=s(g," context managers to avoid spending some GPU memory with intermediate activations."),g.forEach(o)},m(m,g){d(m,c,g),t(c,v),t(c,f),t(f,u),t(c,E)},d(m){m&&o(c)}}}function Cc(x){let c,v,f,u,E;return{c(){c=i("p"),v=a("You can derive all sizes of the model (and thus compute a "),f=i("code"),u=a("device_map"),E=a(") on a model that is on the meta device.")},l(m){c=l(m,"P",{});var g=r(c);v=s(g,"You can derive all sizes of the model (and thus compute a "),f=l(g,"CODE",{});var A=r(f);u=s(A,"device_map"),A.forEach(o),E=s(g,") on a model that is on the meta device."),g.forEach(o)},m(m,g){d(m,c,g),t(c,v),t(c,f),t(f,u),t(c,E)},d(m){m&&o(c)}}}function Gc(x){let c,v,f,u,E,m,g,A,U,C,G;return{c(){c=i("p"),v=a("When a first allocation happens in PyTorch, it loads CUDA kernels which take about 1-2GB of memory depending on the GPU. Therefore you always have less usable memory than the actual size of the GPU. To see how much memory is actually used do "),f=i("code"),u=a("torch.ones(1).cuda()"),E=a(" and look at the memory usage."),m=h(),g=i("p"),A=a("Therefore when you create memory maps with "),U=i("code"),C=a("max_memory"),G=a(" make sure to adjust the avaialble memory accordingly to avoid out-of-memory errors.")},l(j){c=l(j,"P",{});var q=r(c);v=s(q,"When a first allocation happens in PyTorch, it loads CUDA kernels which take about 1-2GB of memory depending on the GPU. Therefore you always have less usable memory than the actual size of the GPU. To see how much memory is actually used do "),f=l(q,"CODE",{});var O=r(f);u=s(O,"torch.ones(1).cuda()"),O.forEach(o),E=s(q," and look at the memory usage."),q.forEach(o),m=p(j),g=l(j,"P",{});var F=r(g);A=s(F,"Therefore when you create memory maps with "),U=l(F,"CODE",{});var ee=r(U);C=s(ee,"max_memory"),ee.forEach(o),G=s(F," make sure to adjust the avaialble memory accordingly to avoid out-of-memory errors."),F.forEach(o)},m(j,q){d(j,c,q),t(c,v),t(c,f),t(f,u),t(c,E),d(j,m,q),d(j,g,q),t(g,A),t(g,U),t(U,C),t(g,G)},d(j){j&&o(c),j&&o(m),j&&o(g)}}}function qc(x){let c,v;return{c(){c=i("p"),v=a("To be the most efficient, make sure your device map puts the parameters on the GPUs in a sequential manner (e.g. don\u2019t put one of the first weights on GPU 0, then weights on GPU 1 and the last weight back to GPU 0) to avoid making many transfers of data between the GPUs.")},l(f){c=l(f,"P",{});var u=r(c);v=s(u,"To be the most efficient, make sure your device map puts the parameters on the GPUs in a sequential manner (e.g. don\u2019t put one of the first weights on GPU 0, then weights on GPU 1 and the last weight back to GPU 0) to avoid making many transfers of data between the GPUs."),u.forEach(o)},m(f,u){d(f,c,u),t(c,v)},d(f){f&&o(c)}}}function Tc(x){let c,v,f,u,E;return{c(){c=i("p"),v=a(`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),f=i("code"),u=a("init_empty_weights"),E=a(" context manager).")},l(m){c=l(m,"P",{});var g=r(c);v=s(g,`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),f=l(g,"CODE",{});var A=r(f);u=s(A,"init_empty_weights"),A.forEach(o),E=s(g," context manager)."),g.forEach(o)},m(m,g){d(m,c,g),t(c,v),t(c,f),t(f,u),t(c,E)},d(m){m&&o(c)}}}function Ic(x){let c,v,f,u,E;return u=new B({props:{code:`import torch.nn as nn
from accelerate import init_empty_weights

<h1 class="relative group">
	<a 
		id="initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Initialize a model with 100 billions parameters in no time and without using any RAM.
	</span>
</h1>

with init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn
<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

&lt;h1 id=&quot;initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram&quot;&gt;Initialize a model <span class="hljs-keyword">with</span> <span class="hljs-number">100</span> billions parameters <span class="hljs-keyword">in</span> <span class="hljs-keyword">no</span> <span class="hljs-type">time</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">without</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">any</span> RAM.&lt;/h1&gt;
<span class="hljs-keyword">with</span> init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>)])`}}),{c(){c=i("p"),v=a("Example:"),f=h(),b(u.$$.fragment)},l(m){c=l(m,"P",{});var g=r(c);v=s(g,"Example:"),g.forEach(o),f=p(m),$(u.$$.fragment,m)},m(m,g){d(m,c,g),t(c,v),d(m,f,g),k(u,m,g),E=!0},p:$c,i(m){E||(w(u.$$.fragment,m),E=!0)},o(m){y(u.$$.fragment,m),E=!1},d(m){m&&o(c),m&&o(f),P(u,m)}}}function Lc(x){let c,v,f,u,E,m,g,A;return{c(){c=i("p"),v=a(`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),f=i("code"),u=a("model.to(some_device)"),E=a(" with it. To load weights inside your empty model, see "),m=i("a"),g=a("load_checkpoint_and_dispatch()"),A=a("."),this.h()},l(U){c=l(U,"P",{});var C=r(c);v=s(C,`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),f=l(C,"CODE",{});var G=r(f);u=s(G,"model.to(some_device)"),G.forEach(o),E=s(C," with it. To load weights inside your empty model, see "),m=l(C,"A",{href:!0});var j=r(m);g=s(j,"load_checkpoint_and_dispatch()"),j.forEach(o),A=s(C,"."),C.forEach(o),this.h()},h(){_(m,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(U,C){d(U,c,C),t(c,v),t(c,f),t(f,u),t(c,E),t(c,m),t(m,g),t(c,A)},d(U){U&&o(c)}}}function Dc(x){let c,v,f,u,E,m,g,A;return{c(){c=i("p"),v=a("Once loaded across devices, you still need to call "),f=i("a"),u=a("dispatch_model()"),E=a(` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),m=i("a"),g=a("load_checkpoint_and_dispatch()"),A=a("."),this.h()},l(U){c=l(U,"P",{});var C=r(c);v=s(C,"Once loaded across devices, you still need to call "),f=l(C,"A",{href:!0});var G=r(f);u=s(G,"dispatch_model()"),G.forEach(o),E=s(C,` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),m=l(C,"A",{href:!0});var j=r(m);g=s(j,"load_checkpoint_and_dispatch()"),j.forEach(o),A=s(C,"."),C.forEach(o),this.h()},h(){_(f,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.dispatch_model"),_(m,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(U,C){d(U,c,C),t(c,v),t(c,f),t(f,u),t(c,E),t(c,m),t(m,g),t(c,A)},d(U){U&&o(c)}}}function Mc(x){let c,v,f,u,E,m,g,A,U,C,G,j,q,O,F,ee,nn,ja,J,eo,ln,rn,to,dn,cn,oo,hn,xa,Et,pn,Ua,_e,Aa,te,ge,ao,We,fn,so,mn,Ca,ve,un,jt,_n,gn,Ga,Fe,qa,xt,vn,Ta,He,Ia,Ut,wn,La,we,Da,oe,ye,no,Ye,yn,io,bn,Ma,At,$n,Ba,Ct,kn,za,Je,Na,Gt,Pn,Oa,Ve,Ra,z,En,lo,jn,xn,ro,Un,An,co,Cn,Gn,ho,qn,Tn,po,In,Ln,fo,Dn,Sa,ae,be,mo,Ke,Mn,uo,Bn,Wa,$e,zn,qt,Nn,On,Fa,ke,Rn,Qe,Sn,Wn,Ha,Xe,Ya,Tt,Fn,Ja,Ze,Va,It,Hn,Ka,et,Qa,Pe,Yn,_o,Jn,Vn,Xa,V,go,Kn,Qn,vo,Xn,Zn,wo,ei,Za,se,yo,ti,oi,bo,ai,si,es,K,ni,$o,ii,li,ko,ri,di,ts,tt,os,ot,as,Ee,ci,Po,hi,pi,ss,at,ns,ne,je,Eo,st,fi,jo,mi,is,Lt,ui,ls,nt,rs,Dt,_i,ds,Q,xo,gi,vi,Uo,wi,yi,Ao,bi,cs,Mt,$i,hs,xe,ps,ie,Ue,Co,it,ki,Go,Pi,fs,Ae,Ei,qo,ji,xi,ms,Ce,us,T,Ui,To,Ai,Ci,Bt,Gi,qi,Io,Ti,Ii,Lo,Li,Di,Do,Mi,Bi,Mo,zi,Ni,Bo,Oi,Ri,zo,Si,Wi,_s,zt,Fi,gs,lt,vs,Ge,ws,qe,Hi,No,Yi,Ji,ys,rt,bs,Nt,Vi,$s,I,Ki,Oo,Qi,Xi,Ro,Zi,el,So,tl,ol,Wo,al,sl,Fo,nl,il,Ho,ll,rl,Yo,dl,cl,Jo,hl,pl,ks,dt,Ps,Ot,fl,Es,ct,js,Rt,ml,xs,ht,Us,Te,As,le,Ie,Vo,pt,ul,Ko,_l,Cs,St,gl,Gs,L,Qo,vl,wl,X,Wt,yl,bl,Xo,$l,kl,Ft,Pl,El,jl,Z,Ht,xl,Ul,Zo,Al,Cl,Yt,Gl,ql,Tl,Le,Jt,Il,Ll,Vt,Dl,Ml,Bl,ea,zl,Nl,ta,Ol,Rl,oa,Sl,qs,re,De,aa,ft,Wl,sa,Fl,Ts,de,mt,Hl,na,Yl,Is,ce,ut,Jl,ia,Vl,Ls,he,_t,Kl,la,Ql,Ds,R,gt,Xl,ra,Zl,er,H,da,tr,or,ca,ar,sr,ha,nr,ir,pa,lr,rr,Me,Ms,S,vt,dr,fa,cr,hr,Be,pr,ze,Bs,pe,wt,fr,ma,mr,zs,Y,yt,ur,ua,_r,gr,Ne,Ns;return m=new ue({}),O=new B({props:{code:`import torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`,highlighted:`<span class="hljs-keyword">import</span> torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`}}),_e=new me({props:{warning:!0,$$slots:{default:[xc]},$$scope:{ctx:x}}}),We=new ue({}),Fe=new B({props:{code:`from accelerate import init_empty_weights

with init_empty_weights():
    my_model = ModelClass(...)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

<span class="hljs-keyword">with</span> init_empty_weights():
    my_model = ModelClass(...)`}}),He=new B({props:{code:`with init_empty_weights():
    model = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">with</span> init_empty_weights():
    model = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>)])`}}),we=new me({props:{warning:!0,$$slots:{default:[Uc]},$$scope:{ctx:x}}}),Ye=new ue({}),Je=new B({props:{code:`first_state_dict.bin
index.json
second_state_dict.bin`,highlighted:`first_state_dict.bin
index.json
second_state_dict.bin`}}),Ve=new B({props:{code:`{
  "linear1.weight": "first_state_dict.bin",
  "linear1.bias": "first_state_dict.bin",
  "linear2.weight": "second_state_dict.bin",
  "linear2.bias": "second_state_dict.bin"
}`,highlighted:`<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;linear1.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear1.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span>
<span class="hljs-punctuation">}</span>`}}),Ke=new ue({}),Xe=new B({props:{code:`git clone https://huggingface.co/sgugger/sharded-gpt-j-6B
cd sharded-gpt-j-6B
git-lfs install
git pull`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/sgugger/sharded-gpt-j-6B
<span class="hljs-built_in">cd</span> sharded-gpt-j-6B
git-lfs install
git pull`}}),Ze=new B({props:{code:`from accelerate import init_empty_weights
from transformers import AutoConfig, AutoModelForCausalLM

checkpoint = "EleutherAI/gpt-j-6B"
config = AutoConfig.from_pretrained(checkpoint)

with init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

checkpoint = <span class="hljs-string">&quot;EleutherAI/gpt-j-6B&quot;</span>
config = AutoConfig.from_pretrained(checkpoint)

<span class="hljs-keyword">with</span> init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`}}),et=new B({props:{code:`from accelerate import load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, "sharded-gpt-j-6B", device_map="auto", no_split_module_classes=["GPTJBlock"]
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>, no_split_module_classes=[<span class="hljs-string">&quot;GPTJBlock&quot;</span>]
)`}}),tt=new B({props:{code:"model.hf_device_map",highlighted:"model.hf_device_map"}}),ot=new B({props:{code:`{'transformer.wte': 0,
 'transformer.drop': 0,
 'transformer.h.0': 0,
 'transformer.h.1': 0,
 'transformer.h.2': 0,
 'transformer.h.3': 0,
 'transformer.h.4': 0,
 'transformer.h.5': 0,
 'transformer.h.6': 0,
 'transformer.h.7': 0,
 'transformer.h.8': 0,
 'transformer.h.9': 0,
 'transformer.h.10': 0,
 'transformer.h.11': 0,
 'transformer.h.12': 0,
 'transformer.h.13': 0,
 'transformer.h.14': 0,
 'transformer.h.15': 0,
 'transformer.h.16': 0,
 'transformer.h.17': 0,
 'transformer.h.18': 0,
 'transformer.h.19': 0,
 'transformer.h.20': 0,
 'transformer.h.21': 0,
 'transformer.h.22': 0,
 'transformer.h.23': 0,
 'transformer.h.24': 1,
 'transformer.h.25': 1,
 'transformer.h.26': 1,
 'transformer.h.27': 1,
 'transformer.ln_f': 1,
 'lm_head': 1}`,highlighted:`{<span class="hljs-string">&#x27;transformer.wte&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.drop&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.1&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.2&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.3&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.4&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.5&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.6&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.7&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.8&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.9&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.10&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.11&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.12&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.13&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.14&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.15&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.16&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.17&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.18&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.19&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.20&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.21&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.22&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.23&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.24&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.25&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.26&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.27&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.ln_f&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-number">1</span>}`}}),at=new B({props:{code:'model = load_checkpoint_and_dispatch(model, "sharded-gpt-j-6B", device_map=my_device_map)',highlighted:'model = load_checkpoint_and_dispatch(model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=my_device_map)'}}),st=new ue({}),nt=new B({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer("Hello, my name is", return_tensors="pt")
inputs = inputs.to(0)
output = model.generate(inputs["input_ids"])
tokenizer.decode(output[0].tolist())`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer(<span class="hljs-string">&quot;Hello, my name is&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
inputs = inputs.to(<span class="hljs-number">0</span>)
output = model.generate(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
tokenizer.decode(output[<span class="hljs-number">0</span>].tolist())`}}),xe=new me({props:{warning:!0,$$slots:{default:[Ac]},$$scope:{ctx:x}}}),it=new ue({}),Ce=new me({props:{$$slots:{default:[Cc]},$$scope:{ctx:x}}}),lt=new B({props:{code:`from accelerate import infer_auto_device_map

device_map = infer_auto_device_map(my_model, max_memory={0: "10GiB", 1: "10GiB", "cpu": "30GiB"})`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> infer_auto_device_map

device_map = infer_auto_device_map(my_model, max_memory={<span class="hljs-number">0</span>: <span class="hljs-string">&quot;10GiB&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;10GiB&quot;</span>, <span class="hljs-string">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;30GiB&quot;</span>})`}}),Ge=new me({props:{warning:!0,$$slots:{default:[Gc]},$$scope:{ctx:x}}}),rt=new B({props:{code:'max_memory = {0: "30GIB", 1: "46GIB", 2: "46GIB", 3: "46GIB", 4: "46GIB", 5: "46GIB", 6: "46GIB", 7: "46GIB"}',highlighted:'max_memory = {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;30GIB&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&quot;46GIB&quot;</span>}'}}),dt=new B({props:{code:'device_map = {"block1": 0, "block2": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2&quot;</span>: <span class="hljs-number">1</span>}'}}),ct=new B({props:{code:'device_map = {"block1": 0, "block2.linear1": 0, "block2.linear2": 1, "block2.linear3": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear2&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;block2.linear3&quot;</span>: <span class="hljs-number">1</span>}'}}),ht=new B({props:{code:'device_map = {"block1": 0, "block2.linear1": 1, "block2.linear2": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear1&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;block2.linear2&quot;</span>: <span class="hljs-number">1</span>}'}}),Te=new me({props:{$$slots:{default:[qc]},$$scope:{ctx:x}}}),pt=new ue({}),ft=new ue({}),mt=new Pt({props:{name:"accelerate.cpu_offload",anchor:"accelerate.cpu_offload",parameters:[{name:"model",val:": Module"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.cpu_offload.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to offload.`,name:"model"},{anchor:"accelerate.cpu_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model first parameter device.`,name:"execution_device"},{anchor:"accelerate.cpu_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.cpu_offload.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the model that will be kept on CPU.`,name:"state_dict"},{anchor:"accelerate.cpu_offload.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_539/src/accelerate/big_modeling.py#L88"}}),ut=new Pt({props:{name:"accelerate.disk_offload",anchor:"accelerate.disk_offload",parameters:[{name:"model",val:": Module"},{name:"offload_dir",val:": typing.Union[str, os.PathLike]"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.disk_offload.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to offload.",name:"model"},{anchor:"accelerate.disk_offload.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.disk_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model&#x2019;s first parameter device.`,name:"execution_device"},{anchor:"accelerate.disk_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.disk_offload.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_539/src/accelerate/big_modeling.py#L132"}}),_t=new Pt({props:{name:"accelerate.dispatch_model",anchor:"accelerate.dispatch_model",parameters:[{name:"model",val:": Module"},{name:"device_map",val:": typing.Dict[str, typing.Union[int, str, torch.device]]"},{name:"main_device",val:": typing.Optional[torch.device] = None"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"},{name:"offload_dir",val:": typing.Union[str, os.PathLike] = None"},{name:"offload_buffers",val:": bool = False"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.dispatch_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to dispatch.`,name:"model"},{anchor:"accelerate.dispatch_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[str, int, torch.device]]</code>) &#x2014;
A dictionary mapping module names in the models <code>state_dict</code> to the device they should go to. Note that
<code>&quot;disk&quot;</code> is accepted even if it&#x2019;s not a proper value for <code>torch.device</code>.`,name:"device_map"},{anchor:"accelerate.dispatch_model.main_device",description:`<strong>main_device</strong> (<code>str</code>, <code>int</code> or <code>torch.device</code>, <em>optional</em>) &#x2014;
The main execution device. Will default to the first device in the <code>device_map</code> different from <code>&quot;cpu&quot;</code> or
<code>&quot;disk&quot;</code>.`,name:"main_device"},{anchor:"accelerate.dispatch_model.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the part of the model that will be kept on CPU.`,name:"state_dict"},{anchor:"accelerate.dispatch_model.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.dispatch_model.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.dispatch_model.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_539/src/accelerate/big_modeling.py#L176"}}),gt=new Pt({props:{name:"accelerate.infer_auto_device_map",anchor:"accelerate.infer_auto_device_map",parameters:[{name:"model",val:": Module"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"}],parametersDescription:[{anchor:"accelerate.infer_auto_device_map.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to analyze.",name:"model"},{anchor:"accelerate.infer_auto_device_map.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available if unset.`,name:"max_memory"},{anchor:"accelerate.infer_auto_device_map.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"},{anchor:"accelerate.infer_auto_device_map.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"}],source:"https://github.com/huggingface/accelerate/blob/vr_539/src/accelerate/utils/modeling.py#L334"}}),Me=new me({props:{$$slots:{default:[Tc]},$$scope:{ctx:x}}}),vt=new Pt({props:{name:"accelerate.init_empty_weights",anchor:"accelerate.init_empty_weights",parameters:[{name:"include_buffers",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.init_empty_weights.include_buffers",description:`<strong>include_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also put all buffers on the meta device while initializing.`,name:"include_buffers"}],source:"https://github.com/huggingface/accelerate/blob/vr_539/src/accelerate/big_modeling.py#L33"}}),Be=new jc({props:{anchor:"accelerate.init_empty_weights.example",$$slots:{default:[Ic]},$$scope:{ctx:x}}}),ze=new me({props:{warning:!0,$$slots:{default:[Lc]},$$scope:{ctx:x}}}),wt=new Pt({props:{name:"accelerate.load_checkpoint_and_dispatch",anchor:"accelerate.load_checkpoint_and_dispatch",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[str, typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"offload_buffers",val:": bool = False"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"},{name:"offload_state_dict",val:": typing.Optional[bool] = None"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_and_dispatch.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_and_dispatch.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:</p>
<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_and_dispatch.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.</p>
<p>To have Accelerate compute the most optimized <code>device_map</code> automatically, set <code>device_map=&quot;auto&quot;</code>.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_and_dispatch.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available for each GPU
and the available CPU RAM if unset.`,name:"max_memory"},{anchor:"accelerate.load_checkpoint_and_dispatch.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
In the layers that are offloaded on the CPU or the hard drive, whether or not to offload the buffers as
well as the parameters.`,name:"offload_buffers"},{anchor:"accelerate.load_checkpoint_and_dispatch.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict on the hard drive to avoig getting out of CPU RAM if
the weight of the CPU state dict + the biggest shard does not fit. Will default to <code>True</code> if the device map
picked contains <code>&quot;disk&quot;</code> values.`,name:"offload_state_dict"},{anchor:"accelerate.load_checkpoint_and_dispatch.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_539/src/accelerate/big_modeling.py#L254"}}),yt=new Pt({props:{name:"accelerate.load_checkpoint_in_model",anchor:"accelerate.load_checkpoint_in_model",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"},{name:"offload_state_dict",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_in_model.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_in_model.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_in_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_in_model.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"accelerate.load_checkpoint_in_model.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"},{anchor:"accelerate.load_checkpoint_in_model.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict on the hard drive to avoig getting out of CPU RAM if
the weight of the CPU state dict + the biggest shard does not fit.`,name:"offload_state_dict"}],source:"https://github.com/huggingface/accelerate/blob/vr_539/src/accelerate/utils/modeling.py#L498"}}),Ne=new me({props:{warning:!0,$$slots:{default:[Dc]},$$scope:{ctx:x}}}),{c(){c=i("meta"),v=h(),f=i("h1"),u=i("a"),E=i("span"),b(m.$$.fragment),g=h(),A=i("span"),U=a("Handling big models"),C=h(),G=i("p"),j=a("When loading a pretrained model in PyTorch, the usual workflow looks like this:"),q=h(),b(O.$$.fragment),F=h(),ee=i("p"),nn=a("In plain English, those steps are:"),ja=h(),J=i("ol"),eo=i("li"),ln=a("Create the model with randomly initialized weights"),rn=h(),to=i("li"),dn=a("Load the model weights (in a dictionary usually called a state dict) from the disk"),cn=h(),oo=i("li"),hn=a("Load those weights inside the model"),xa=h(),Et=i("p"),pn=a("While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),Ua=h(),b(_e.$$.fragment),Aa=h(),te=i("h2"),ge=i("a"),ao=i("span"),b(We.$$.fragment),fn=h(),so=i("span"),mn=a("Instantiating an empty model"),Ca=h(),ve=i("p"),un=a("The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),jt=i("a"),_n=a("init_empty_weights()"),gn=a(" that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),Ga=h(),b(Fe.$$.fragment),qa=h(),xt=i("p"),vn=a("For instance:"),Ta=h(),b(He.$$.fragment),Ia=h(),Ut=i("p"),wn=a("initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),La=h(),b(we.$$.fragment),Da=h(),oe=i("h2"),ye=i("a"),no=i("span"),b(Ye.$$.fragment),yn=h(),io=i("span"),bn=a("Sharded checkpoints"),Ma=h(),At=i("p"),$n=a("It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),Ba=h(),Ct=i("p"),kn=a("\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),za=h(),b(Je.$$.fragment),Na=h(),Gt=i("p"),Pn=a("with index.json being the following file:"),Oa=h(),b(Ve.$$.fragment),Ra=h(),z=i("p"),En=a("and "),lo=i("code"),jn=a("first_state_dict.bin"),xn=a(" containing the weights for "),ro=i("code"),Un=a('"linear1.weight"'),An=a(" and "),co=i("code"),Cn=a('"linear1.bias"'),Gn=a(", "),ho=i("code"),qn=a("second_state_dict.bin"),Tn=a(" the ones for "),po=i("code"),In=a('"linear2.weight"'),Ln=a(" and "),fo=i("code"),Dn=a('"linear2.bias"'),Sa=h(),ae=i("h2"),be=i("a"),mo=i("span"),b(Ke.$$.fragment),Mn=h(),uo=i("span"),Bn=a("Loading weights"),Wa=h(),$e=i("p"),zn=a("The second tool \u{1F917} Accelerate introduces is a function "),qt=i("a"),Nn=a("load_checkpoint_and_dispatch()"),On=a(", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),Fa=h(),ke=i("p"),Rn=a("Here is how we can use this to load the "),Qe=i("a"),Sn=a("GPT-J-6B"),Wn=a(" model. You clone the sharded version of this model with:"),Ha=h(),b(Xe.$$.fragment),Ya=h(),Tt=i("p"),Fn=a("then we can initialize the model with"),Ja=h(),b(Ze.$$.fragment),Va=h(),It=i("p"),Hn=a("and load the checkpoint we just downloaded with:"),Ka=h(),b(et.$$.fragment),Qa=h(),Pe=i("p"),Yn=a("By passing "),_o=i("code"),Jn=a('device_map="auto"'),Vn=a(", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),Xa=h(),V=i("ul"),go=i("li"),Kn=a("first we use the maximum space available on the GPU(s)"),Qn=h(),vo=i("li"),Xn=a("if we still need space, we store the remaining weights on the CPU"),Zn=h(),wo=i("li"),ei=a("if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),Za=h(),se=i("p"),yo=i("code"),ti=a('no_split_module_classes=["GPTJBlock"]'),oi=a(" indicates that the modules that are "),bo=i("code"),ai=a("GPTJBlock"),si=a(" should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),es=h(),K=i("p"),ni=a("You can see the "),$o=i("code"),ii=a("device_map"),li=a(" that \u{1F917} Accelerate picked by accessing the "),ko=i("code"),ri=a("hf_device_map"),di=a(" attribute of your model:"),ts=h(),b(tt.$$.fragment),os=h(),b(ot.$$.fragment),as=h(),Ee=i("p"),ci=a("You can also design your "),Po=i("code"),hi=a("device_map"),pi=a(" yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),ss=h(),b(at.$$.fragment),ns=h(),ne=i("h2"),je=i("a"),Eo=i("span"),b(st.$$.fragment),fi=h(),jo=i("span"),mi=a("Run the model"),is=h(),Lt=i("p"),ui=a("Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),ls=h(),b(nt.$$.fragment),rs=h(),Dt=i("p"),_i=a("Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),ds=h(),Q=i("ul"),xo=i("li"),gi=a("at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),vi=h(),Uo=i("li"),wi=a("for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),yi=h(),Ao=i("li"),bi=a("for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),cs=h(),Mt=i("p"),$i=a("This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),hs=h(),b(xe.$$.fragment),ps=h(),ie=i("h2"),Ue=i("a"),Co=i("span"),b(it.$$.fragment),ki=h(),Go=i("span"),Pi=a("Designing a device map"),fs=h(),Ae=i("p"),Ei=a("You can let \u{1F917} Accelerate handle the device map computation by setting "),qo=i("code"),ji=a('device_map="auto"'),xi=a(" or create one yourself, if you want more control over where each layer should go."),ms=h(),b(Ce.$$.fragment),us=h(),T=i("p"),Ui=a("First note that you can limit the memory used on each GPU by using the "),To=i("code"),Ai=a("max_memory"),Ci=a(" argument (available in "),Bt=i("a"),Gi=a("infer_auto_device_map()"),qi=a(" and in all functions using it). When setting "),Io=i("code"),Ti=a("max_memory"),Ii=a(", you should pass along a dictionary containing the GPU identifiers (for instance "),Lo=i("code"),Li=a("0"),Di=a(", "),Do=i("code"),Mi=a("1"),Bi=a(" etc.) and the "),Mo=i("code"),zi=a('"cpu"'),Ni=a(" key for the maximum RAM you want used for CPU offload. The values can either be an integer (in bytes) or a string representing a number with its unit, such as "),Bo=i("code"),Oi=a('"10GiB"'),Ri=a(" or "),zo=i("code"),Si=a('"10GB"'),Wi=a("."),_s=h(),zt=i("p"),Fi=a("Here is an example where we don\u2019t want to use more than 10GiB on each of two GPUs and no more than 30GiB of CPU RAM for the model weights:"),gs=h(),b(lt.$$.fragment),vs=h(),b(Ge.$$.fragment),ws=h(),qe=i("p"),Hi=a("Additionally, if you do some additional operations with your outputs without placing them back on the CPU (for instance inside the "),No=i("code"),Yi=a("generate"),Ji=a(" method of Transformers) and if you placed your inputs on a GPU, that GPU will consume more memory than the others (Accelerate always place the output back to the device of the input). Therefore if you would like to optimize the maximum batch size and you have many GPUs, give the first GPU less memory. For example, with BLOOM-176B on 8x80 A100 setup the close to ideal map is:"),ys=h(),b(rt.$$.fragment),bs=h(),Nt=i("p"),Vi=a("as you can see we gave the remaining 7 GPUs ~50% more memory than GPU 0."),$s=h(),I=i("p"),Ki=a("If you opt to fully design the "),Oo=i("code"),Qi=a("device_map"),Xi=a(" yourself, it should be a dictionary with keys being module names of your model and values being a valid device identifier (for instance an integer for the GPUs) or "),Ro=i("code"),Zi=a('"cpu"'),el=a(" for CPU offload, "),So=i("code"),tl=a('"disk"'),ol=a(" for disk offload. The keys need to cover the whole model, you can then define your device map as you wish: for instance if your model has two blocks (let\u2019s say "),Wo=i("code"),al=a("block1"),sl=a(" and "),Fo=i("code"),nl=a("block2"),il=a(") which each contain three linear layers (let\u2019s say "),Ho=i("code"),ll=a("linear1"),rl=a(", "),Yo=i("code"),dl=a("linear2"),cl=a(" and "),Jo=i("code"),hl=a("linear3"),pl=a("), a valid device map can be:"),ks=h(),b(dt.$$.fragment),Ps=h(),Ot=i("p"),fl=a("another one that is valid could be:"),Es=h(),b(ct.$$.fragment),js=h(),Rt=i("p"),ml=a("On the other hand, this one is not valid as it does not cover every parameter of the model:"),xs=h(),b(ht.$$.fragment),Us=h(),b(Te.$$.fragment),As=h(),le=i("h2"),Ie=i("a"),Vo=i("span"),b(pt.$$.fragment),ul=h(),Ko=i("span"),_l=a("Limits and further development"),Cs=h(),St=i("p"),gl=a("We are aware of the current limitations in the API:"),Gs=h(),L=i("ul"),Qo=i("li"),vl=a("While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),wl=h(),X=i("li"),Wt=i("a"),yl=a("infer_auto_device_map()"),bl=a(" (or "),Xo=i("code"),$l=a('device_map="auto"'),kl=a(" in "),Ft=i("a"),Pl=a("load_checkpoint_and_dispatch()"),El=a(") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),jl=h(),Z=i("li"),Ht=i("a"),xl=a("infer_auto_device_map()"),Ul=a(" (or "),Zo=i("code"),Al=a('device_map="auto"'),Cl=a(" in "),Yt=i("a"),Gl=a("load_checkpoint_and_dispatch()"),ql=a(") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),Tl=h(),Le=i("li"),Jt=i("a"),Il=a("load_checkpoint_and_dispatch()"),Ll=a(" and "),Vt=i("a"),Dl=a("load_checkpoint_in_model()"),Ml=a(" do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),Bl=h(),ea=i("li"),zl=a("The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),Nl=h(),ta=i("li"),Ol=a("When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),Rl=h(),oa=i("li"),Sl=a("Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),qs=h(),re=i("h2"),De=i("a"),aa=i("span"),b(ft.$$.fragment),Wl=h(),sa=i("span"),Fl=a("API doc"),Ts=h(),de=i("div"),b(mt.$$.fragment),Hl=h(),na=i("p"),Yl=a(`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),Is=h(),ce=i("div"),b(ut.$$.fragment),Jl=h(),ia=i("p"),Vl=a(`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),Ls=h(),he=i("div"),b(_t.$$.fragment),Kl=h(),la=i("p"),Ql=a(`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),Ds=h(),R=i("div"),b(gt.$$.fragment),Xl=h(),ra=i("p"),Zl=a(`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),er=h(),H=i("ul"),da=i("li"),tr=a("we don\u2019t exceed the memory available of any of the GPU."),or=h(),ca=i("li"),ar=a(`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),sr=h(),ha=i("li"),nr=a("if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),ir=h(),pa=i("li"),lr=a(`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),rr=h(),b(Me.$$.fragment),Ms=h(),S=i("div"),b(vt.$$.fragment),dr=h(),fa=i("p"),cr=a(`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),hr=h(),b(Be.$$.fragment),pr=h(),b(ze.$$.fragment),Bs=h(),pe=i("div"),b(wt.$$.fragment),fr=h(),ma=i("p"),mr=a(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),zs=h(),Y=i("div"),b(yt.$$.fragment),ur=h(),ua=i("p"),_r=a(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),gr=h(),b(Ne.$$.fragment),this.h()},l(e){const n=bc('[data-svelte="svelte-1phssyn"]',document.head);c=l(n,"META",{name:!0,content:!0}),n.forEach(o),v=p(e),f=l(e,"H1",{class:!0});var bt=r(f);u=l(bt,"A",{id:!0,class:!0,href:!0});var _a=r(u);E=l(_a,"SPAN",{});var ga=r(E);$(m.$$.fragment,ga),ga.forEach(o),_a.forEach(o),g=p(bt),A=l(bt,"SPAN",{});var va=r(A);U=s(va,"Handling big models"),va.forEach(o),bt.forEach(o),C=p(e),G=l(e,"P",{});var wa=r(G);j=s(wa,"When loading a pretrained model in PyTorch, the usual workflow looks like this:"),wa.forEach(o),q=p(e),$(O.$$.fragment,e),F=p(e),ee=l(e,"P",{});var ya=r(ee);nn=s(ya,"In plain English, those steps are:"),ya.forEach(o),ja=p(e),J=l(e,"OL",{});var fe=r(J);eo=l(fe,"LI",{});var ba=r(eo);ln=s(ba,"Create the model with randomly initialized weights"),ba.forEach(o),rn=p(fe),to=l(fe,"LI",{});var $a=r(to);dn=s($a,"Load the model weights (in a dictionary usually called a state dict) from the disk"),$a.forEach(o),cn=p(fe),oo=l(fe,"LI",{});var ka=r(oo);hn=s(ka,"Load those weights inside the model"),ka.forEach(o),fe.forEach(o),xa=p(e),Et=l(e,"P",{});var vr=r(Et);pn=s(vr,"While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),vr.forEach(o),Ua=p(e),$(_e.$$.fragment,e),Aa=p(e),te=l(e,"H2",{class:!0});var Os=r(te);ge=l(Os,"A",{id:!0,class:!0,href:!0});var wr=r(ge);ao=l(wr,"SPAN",{});var yr=r(ao);$(We.$$.fragment,yr),yr.forEach(o),wr.forEach(o),fn=p(Os),so=l(Os,"SPAN",{});var br=r(so);mn=s(br,"Instantiating an empty model"),br.forEach(o),Os.forEach(o),Ca=p(e),ve=l(e,"P",{});var Rs=r(ve);un=s(Rs,"The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),jt=l(Rs,"A",{href:!0});var $r=r(jt);_n=s($r,"init_empty_weights()"),$r.forEach(o),gn=s(Rs," that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),Rs.forEach(o),Ga=p(e),$(Fe.$$.fragment,e),qa=p(e),xt=l(e,"P",{});var kr=r(xt);vn=s(kr,"For instance:"),kr.forEach(o),Ta=p(e),$(He.$$.fragment,e),Ia=p(e),Ut=l(e,"P",{});var Pr=r(Ut);wn=s(Pr,"initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),Pr.forEach(o),La=p(e),$(we.$$.fragment,e),Da=p(e),oe=l(e,"H2",{class:!0});var Ss=r(oe);ye=l(Ss,"A",{id:!0,class:!0,href:!0});var Er=r(ye);no=l(Er,"SPAN",{});var jr=r(no);$(Ye.$$.fragment,jr),jr.forEach(o),Er.forEach(o),yn=p(Ss),io=l(Ss,"SPAN",{});var xr=r(io);bn=s(xr,"Sharded checkpoints"),xr.forEach(o),Ss.forEach(o),Ma=p(e),At=l(e,"P",{});var Ur=r(At);$n=s(Ur,"It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),Ur.forEach(o),Ba=p(e),Ct=l(e,"P",{});var Ar=r(Ct);kn=s(Ar,"\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),Ar.forEach(o),za=p(e),$(Je.$$.fragment,e),Na=p(e),Gt=l(e,"P",{});var Cr=r(Gt);Pn=s(Cr,"with index.json being the following file:"),Cr.forEach(o),Oa=p(e),$(Ve.$$.fragment,e),Ra=p(e),z=l(e,"P",{});var W=r(z);En=s(W,"and "),lo=l(W,"CODE",{});var Gr=r(lo);jn=s(Gr,"first_state_dict.bin"),Gr.forEach(o),xn=s(W," containing the weights for "),ro=l(W,"CODE",{});var qr=r(ro);Un=s(qr,'"linear1.weight"'),qr.forEach(o),An=s(W," and "),co=l(W,"CODE",{});var Tr=r(co);Cn=s(Tr,'"linear1.bias"'),Tr.forEach(o),Gn=s(W,", "),ho=l(W,"CODE",{});var Ir=r(ho);qn=s(Ir,"second_state_dict.bin"),Ir.forEach(o),Tn=s(W," the ones for "),po=l(W,"CODE",{});var Lr=r(po);In=s(Lr,'"linear2.weight"'),Lr.forEach(o),Ln=s(W," and "),fo=l(W,"CODE",{});var Dr=r(fo);Dn=s(Dr,'"linear2.bias"'),Dr.forEach(o),W.forEach(o),Sa=p(e),ae=l(e,"H2",{class:!0});var Ws=r(ae);be=l(Ws,"A",{id:!0,class:!0,href:!0});var Mr=r(be);mo=l(Mr,"SPAN",{});var Br=r(mo);$(Ke.$$.fragment,Br),Br.forEach(o),Mr.forEach(o),Mn=p(Ws),uo=l(Ws,"SPAN",{});var zr=r(uo);Bn=s(zr,"Loading weights"),zr.forEach(o),Ws.forEach(o),Wa=p(e),$e=l(e,"P",{});var Fs=r($e);zn=s(Fs,"The second tool \u{1F917} Accelerate introduces is a function "),qt=l(Fs,"A",{href:!0});var Nr=r(qt);Nn=s(Nr,"load_checkpoint_and_dispatch()"),Nr.forEach(o),On=s(Fs,", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),Fs.forEach(o),Fa=p(e),ke=l(e,"P",{});var Hs=r(ke);Rn=s(Hs,"Here is how we can use this to load the "),Qe=l(Hs,"A",{href:!0,rel:!0});var Or=r(Qe);Sn=s(Or,"GPT-J-6B"),Or.forEach(o),Wn=s(Hs," model. You clone the sharded version of this model with:"),Hs.forEach(o),Ha=p(e),$(Xe.$$.fragment,e),Ya=p(e),Tt=l(e,"P",{});var Rr=r(Tt);Fn=s(Rr,"then we can initialize the model with"),Rr.forEach(o),Ja=p(e),$(Ze.$$.fragment,e),Va=p(e),It=l(e,"P",{});var Sr=r(It);Hn=s(Sr,"and load the checkpoint we just downloaded with:"),Sr.forEach(o),Ka=p(e),$(et.$$.fragment,e),Qa=p(e),Pe=l(e,"P",{});var Ys=r(Pe);Yn=s(Ys,"By passing "),_o=l(Ys,"CODE",{});var Wr=r(_o);Jn=s(Wr,'device_map="auto"'),Wr.forEach(o),Vn=s(Ys,", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),Ys.forEach(o),Xa=p(e),V=l(e,"UL",{});var Kt=r(V);go=l(Kt,"LI",{});var Fr=r(go);Kn=s(Fr,"first we use the maximum space available on the GPU(s)"),Fr.forEach(o),Qn=p(Kt),vo=l(Kt,"LI",{});var Hr=r(vo);Xn=s(Hr,"if we still need space, we store the remaining weights on the CPU"),Hr.forEach(o),Zn=p(Kt),wo=l(Kt,"LI",{});var Yr=r(wo);ei=s(Yr,"if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),Yr.forEach(o),Kt.forEach(o),Za=p(e),se=l(e,"P",{});var Pa=r(se);yo=l(Pa,"CODE",{});var Jr=r(yo);ti=s(Jr,'no_split_module_classes=["GPTJBlock"]'),Jr.forEach(o),oi=s(Pa," indicates that the modules that are "),bo=l(Pa,"CODE",{});var Vr=r(bo);ai=s(Vr,"GPTJBlock"),Vr.forEach(o),si=s(Pa," should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),Pa.forEach(o),es=p(e),K=l(e,"P",{});var Qt=r(K);ni=s(Qt,"You can see the "),$o=l(Qt,"CODE",{});var Kr=r($o);ii=s(Kr,"device_map"),Kr.forEach(o),li=s(Qt," that \u{1F917} Accelerate picked by accessing the "),ko=l(Qt,"CODE",{});var Qr=r(ko);ri=s(Qr,"hf_device_map"),Qr.forEach(o),di=s(Qt," attribute of your model:"),Qt.forEach(o),ts=p(e),$(tt.$$.fragment,e),os=p(e),$(ot.$$.fragment,e),as=p(e),Ee=l(e,"P",{});var Js=r(Ee);ci=s(Js,"You can also design your "),Po=l(Js,"CODE",{});var Xr=r(Po);hi=s(Xr,"device_map"),Xr.forEach(o),pi=s(Js," yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),Js.forEach(o),ss=p(e),$(at.$$.fragment,e),ns=p(e),ne=l(e,"H2",{class:!0});var Vs=r(ne);je=l(Vs,"A",{id:!0,class:!0,href:!0});var Zr=r(je);Eo=l(Zr,"SPAN",{});var ed=r(Eo);$(st.$$.fragment,ed),ed.forEach(o),Zr.forEach(o),fi=p(Vs),jo=l(Vs,"SPAN",{});var td=r(jo);mi=s(td,"Run the model"),td.forEach(o),Vs.forEach(o),is=p(e),Lt=l(e,"P",{});var od=r(Lt);ui=s(od,"Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),od.forEach(o),ls=p(e),$(nt.$$.fragment,e),rs=p(e),Dt=l(e,"P",{});var ad=r(Dt);_i=s(ad,"Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),ad.forEach(o),ds=p(e),Q=l(e,"UL",{});var Xt=r(Q);xo=l(Xt,"LI",{});var sd=r(xo);gi=s(sd,"at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),sd.forEach(o),vi=p(Xt),Uo=l(Xt,"LI",{});var nd=r(Uo);wi=s(nd,"for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),nd.forEach(o),yi=p(Xt),Ao=l(Xt,"LI",{});var id=r(Ao);bi=s(id,"for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),id.forEach(o),Xt.forEach(o),cs=p(e),Mt=l(e,"P",{});var ld=r(Mt);$i=s(ld,"This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),ld.forEach(o),hs=p(e),$(xe.$$.fragment,e),ps=p(e),ie=l(e,"H2",{class:!0});var Ks=r(ie);Ue=l(Ks,"A",{id:!0,class:!0,href:!0});var rd=r(Ue);Co=l(rd,"SPAN",{});var dd=r(Co);$(it.$$.fragment,dd),dd.forEach(o),rd.forEach(o),ki=p(Ks),Go=l(Ks,"SPAN",{});var cd=r(Go);Pi=s(cd,"Designing a device map"),cd.forEach(o),Ks.forEach(o),fs=p(e),Ae=l(e,"P",{});var Qs=r(Ae);Ei=s(Qs,"You can let \u{1F917} Accelerate handle the device map computation by setting "),qo=l(Qs,"CODE",{});var hd=r(qo);ji=s(hd,'device_map="auto"'),hd.forEach(o),xi=s(Qs," or create one yourself, if you want more control over where each layer should go."),Qs.forEach(o),ms=p(e),$(Ce.$$.fragment,e),us=p(e),T=l(e,"P",{});var D=r(T);Ui=s(D,"First note that you can limit the memory used on each GPU by using the "),To=l(D,"CODE",{});var pd=r(To);Ai=s(pd,"max_memory"),pd.forEach(o),Ci=s(D," argument (available in "),Bt=l(D,"A",{href:!0});var fd=r(Bt);Gi=s(fd,"infer_auto_device_map()"),fd.forEach(o),qi=s(D," and in all functions using it). When setting "),Io=l(D,"CODE",{});var md=r(Io);Ti=s(md,"max_memory"),md.forEach(o),Ii=s(D,", you should pass along a dictionary containing the GPU identifiers (for instance "),Lo=l(D,"CODE",{});var ud=r(Lo);Li=s(ud,"0"),ud.forEach(o),Di=s(D,", "),Do=l(D,"CODE",{});var _d=r(Do);Mi=s(_d,"1"),_d.forEach(o),Bi=s(D," etc.) and the "),Mo=l(D,"CODE",{});var gd=r(Mo);zi=s(gd,'"cpu"'),gd.forEach(o),Ni=s(D," key for the maximum RAM you want used for CPU offload. The values can either be an integer (in bytes) or a string representing a number with its unit, such as "),Bo=l(D,"CODE",{});var vd=r(Bo);Oi=s(vd,'"10GiB"'),vd.forEach(o),Ri=s(D," or "),zo=l(D,"CODE",{});var wd=r(zo);Si=s(wd,'"10GB"'),wd.forEach(o),Wi=s(D,"."),D.forEach(o),_s=p(e),zt=l(e,"P",{});var yd=r(zt);Fi=s(yd,"Here is an example where we don\u2019t want to use more than 10GiB on each of two GPUs and no more than 30GiB of CPU RAM for the model weights:"),yd.forEach(o),gs=p(e),$(lt.$$.fragment,e),vs=p(e),$(Ge.$$.fragment,e),ws=p(e),qe=l(e,"P",{});var Xs=r(qe);Hi=s(Xs,"Additionally, if you do some additional operations with your outputs without placing them back on the CPU (for instance inside the "),No=l(Xs,"CODE",{});var bd=r(No);Yi=s(bd,"generate"),bd.forEach(o),Ji=s(Xs," method of Transformers) and if you placed your inputs on a GPU, that GPU will consume more memory than the others (Accelerate always place the output back to the device of the input). Therefore if you would like to optimize the maximum batch size and you have many GPUs, give the first GPU less memory. For example, with BLOOM-176B on 8x80 A100 setup the close to ideal map is:"),Xs.forEach(o),ys=p(e),$(rt.$$.fragment,e),bs=p(e),Nt=l(e,"P",{});var $d=r(Nt);Vi=s($d,"as you can see we gave the remaining 7 GPUs ~50% more memory than GPU 0."),$d.forEach(o),$s=p(e),I=l(e,"P",{});var M=r(I);Ki=s(M,"If you opt to fully design the "),Oo=l(M,"CODE",{});var kd=r(Oo);Qi=s(kd,"device_map"),kd.forEach(o),Xi=s(M," yourself, it should be a dictionary with keys being module names of your model and values being a valid device identifier (for instance an integer for the GPUs) or "),Ro=l(M,"CODE",{});var Pd=r(Ro);Zi=s(Pd,'"cpu"'),Pd.forEach(o),el=s(M," for CPU offload, "),So=l(M,"CODE",{});var Ed=r(So);tl=s(Ed,'"disk"'),Ed.forEach(o),ol=s(M," for disk offload. The keys need to cover the whole model, you can then define your device map as you wish: for instance if your model has two blocks (let\u2019s say "),Wo=l(M,"CODE",{});var jd=r(Wo);al=s(jd,"block1"),jd.forEach(o),sl=s(M," and "),Fo=l(M,"CODE",{});var xd=r(Fo);nl=s(xd,"block2"),xd.forEach(o),il=s(M,") which each contain three linear layers (let\u2019s say "),Ho=l(M,"CODE",{});var Ud=r(Ho);ll=s(Ud,"linear1"),Ud.forEach(o),rl=s(M,", "),Yo=l(M,"CODE",{});var Ad=r(Yo);dl=s(Ad,"linear2"),Ad.forEach(o),cl=s(M," and "),Jo=l(M,"CODE",{});var Cd=r(Jo);hl=s(Cd,"linear3"),Cd.forEach(o),pl=s(M,"), a valid device map can be:"),M.forEach(o),ks=p(e),$(dt.$$.fragment,e),Ps=p(e),Ot=l(e,"P",{});var Gd=r(Ot);fl=s(Gd,"another one that is valid could be:"),Gd.forEach(o),Es=p(e),$(ct.$$.fragment,e),js=p(e),Rt=l(e,"P",{});var qd=r(Rt);ml=s(qd,"On the other hand, this one is not valid as it does not cover every parameter of the model:"),qd.forEach(o),xs=p(e),$(ht.$$.fragment,e),Us=p(e),$(Te.$$.fragment,e),As=p(e),le=l(e,"H2",{class:!0});var Zs=r(le);Ie=l(Zs,"A",{id:!0,class:!0,href:!0});var Td=r(Ie);Vo=l(Td,"SPAN",{});var Id=r(Vo);$(pt.$$.fragment,Id),Id.forEach(o),Td.forEach(o),ul=p(Zs),Ko=l(Zs,"SPAN",{});var Ld=r(Ko);_l=s(Ld,"Limits and further development"),Ld.forEach(o),Zs.forEach(o),Cs=p(e),St=l(e,"P",{});var Dd=r(St);gl=s(Dd,"We are aware of the current limitations in the API:"),Dd.forEach(o),Gs=p(e),L=l(e,"UL",{});var N=r(L);Qo=l(N,"LI",{});var Md=r(Qo);vl=s(Md,"While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),Md.forEach(o),wl=p(N),X=l(N,"LI",{});var $t=r(X);Wt=l($t,"A",{href:!0});var Bd=r(Wt);yl=s(Bd,"infer_auto_device_map()"),Bd.forEach(o),bl=s($t," (or "),Xo=l($t,"CODE",{});var zd=r(Xo);$l=s(zd,'device_map="auto"'),zd.forEach(o),kl=s($t," in "),Ft=l($t,"A",{href:!0});var Nd=r(Ft);Pl=s(Nd,"load_checkpoint_and_dispatch()"),Nd.forEach(o),El=s($t,") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),$t.forEach(o),jl=p(N),Z=l(N,"LI",{});var kt=r(Z);Ht=l(kt,"A",{href:!0});var Od=r(Ht);xl=s(Od,"infer_auto_device_map()"),Od.forEach(o),Ul=s(kt," (or "),Zo=l(kt,"CODE",{});var Rd=r(Zo);Al=s(Rd,'device_map="auto"'),Rd.forEach(o),Cl=s(kt," in "),Yt=l(kt,"A",{href:!0});var Sd=r(Yt);Gl=s(Sd,"load_checkpoint_and_dispatch()"),Sd.forEach(o),ql=s(kt,") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),kt.forEach(o),Tl=p(N),Le=l(N,"LI",{});var Ea=r(Le);Jt=l(Ea,"A",{href:!0});var Wd=r(Jt);Il=s(Wd,"load_checkpoint_and_dispatch()"),Wd.forEach(o),Ll=s(Ea," and "),Vt=l(Ea,"A",{href:!0});var Fd=r(Vt);Dl=s(Fd,"load_checkpoint_in_model()"),Fd.forEach(o),Ml=s(Ea," do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),Ea.forEach(o),Bl=p(N),ea=l(N,"LI",{});var Hd=r(ea);zl=s(Hd,"The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),Hd.forEach(o),Nl=p(N),ta=l(N,"LI",{});var Yd=r(ta);Ol=s(Yd,"When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),Yd.forEach(o),Rl=p(N),oa=l(N,"LI",{});var Jd=r(oa);Sl=s(Jd,"Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),Jd.forEach(o),N.forEach(o),qs=p(e),re=l(e,"H2",{class:!0});var en=r(re);De=l(en,"A",{id:!0,class:!0,href:!0});var Vd=r(De);aa=l(Vd,"SPAN",{});var Kd=r(aa);$(ft.$$.fragment,Kd),Kd.forEach(o),Vd.forEach(o),Wl=p(en),sa=l(en,"SPAN",{});var Qd=r(sa);Fl=s(Qd,"API doc"),Qd.forEach(o),en.forEach(o),Ts=p(e),de=l(e,"DIV",{class:!0});var tn=r(de);$(mt.$$.fragment,tn),Hl=p(tn),na=l(tn,"P",{});var Xd=r(na);Yl=s(Xd,`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),Xd.forEach(o),tn.forEach(o),Is=p(e),ce=l(e,"DIV",{class:!0});var on=r(ce);$(ut.$$.fragment,on),Jl=p(on),ia=l(on,"P",{});var Zd=r(ia);Vl=s(Zd,`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),Zd.forEach(o),on.forEach(o),Ls=p(e),he=l(e,"DIV",{class:!0});var an=r(he);$(_t.$$.fragment,an),Kl=p(an),la=l(an,"P",{});var ec=r(la);Ql=s(ec,`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),ec.forEach(o),an.forEach(o),Ds=p(e),R=l(e,"DIV",{class:!0});var Oe=r(R);$(gt.$$.fragment,Oe),Xl=p(Oe),ra=l(Oe,"P",{});var tc=r(ra);Zl=s(tc,`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),tc.forEach(o),er=p(Oe),H=l(Oe,"UL",{});var Re=r(H);da=l(Re,"LI",{});var oc=r(da);tr=s(oc,"we don\u2019t exceed the memory available of any of the GPU."),oc.forEach(o),or=p(Re),ca=l(Re,"LI",{});var ac=r(ca);ar=s(ac,`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),ac.forEach(o),sr=p(Re),ha=l(Re,"LI",{});var sc=r(ha);nr=s(sc,"if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),sc.forEach(o),ir=p(Re),pa=l(Re,"LI",{});var nc=r(pa);lr=s(nc,`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),nc.forEach(o),Re.forEach(o),rr=p(Oe),$(Me.$$.fragment,Oe),Oe.forEach(o),Ms=p(e),S=l(e,"DIV",{class:!0});var Se=r(S);$(vt.$$.fragment,Se),dr=p(Se),fa=l(Se,"P",{});var ic=r(fa);cr=s(ic,`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),ic.forEach(o),hr=p(Se),$(Be.$$.fragment,Se),pr=p(Se),$(ze.$$.fragment,Se),Se.forEach(o),Bs=p(e),pe=l(e,"DIV",{class:!0});var sn=r(pe);$(wt.$$.fragment,sn),fr=p(sn),ma=l(sn,"P",{});var lc=r(ma);mr=s(lc,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),lc.forEach(o),sn.forEach(o),zs=p(e),Y=l(e,"DIV",{class:!0});var Zt=r(Y);$(yt.$$.fragment,Zt),ur=p(Zt),ua=l(Zt,"P",{});var rc=r(ua);_r=s(rc,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),rc.forEach(o),gr=p(Zt),$(Ne.$$.fragment,Zt),Zt.forEach(o),this.h()},h(){_(c,"name","hf:doc:metadata"),_(c,"content",JSON.stringify(Bc)),_(u,"id","handling-big-models"),_(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(u,"href","#handling-big-models"),_(f,"class","relative group"),_(ge,"id","instantiating-an-empty-model"),_(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(ge,"href","#instantiating-an-empty-model"),_(te,"class","relative group"),_(jt,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.init_empty_weights"),_(ye,"id","sharded-checkpoints"),_(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(ye,"href","#sharded-checkpoints"),_(oe,"class","relative group"),_(be,"id","accelerate.cpu_offload"),_(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(be,"href","#accelerate.cpu_offload"),_(ae,"class","relative group"),_(qt,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),_(Qe,"href","https://huggingface.co/EleutherAI/gpt-j-6B"),_(Qe,"rel","nofollow"),_(je,"id","run-the-model"),_(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(je,"href","#run-the-model"),_(ne,"class","relative group"),_(Ue,"id","designing-a-device-map"),_(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(Ue,"href","#designing-a-device-map"),_(ie,"class","relative group"),_(Bt,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.infer_auto_device_map"),_(Ie,"id","limits-and-further-development"),_(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(Ie,"href","#limits-and-further-development"),_(le,"class","relative group"),_(Wt,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.infer_auto_device_map"),_(Ft,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),_(Ht,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.infer_auto_device_map"),_(Yt,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),_(Jt,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),_(Vt,"href","/docs/accelerate/pr_539/en/big_modeling#accelerate.load_checkpoint_in_model"),_(De,"id","api-doc"),_(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(De,"href","#api-doc"),_(re,"class","relative group"),_(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,n){t(document.head,c),d(e,v,n),d(e,f,n),t(f,u),t(u,E),k(m,E,null),t(f,g),t(f,A),t(A,U),d(e,C,n),d(e,G,n),t(G,j),d(e,q,n),k(O,e,n),d(e,F,n),d(e,ee,n),t(ee,nn),d(e,ja,n),d(e,J,n),t(J,eo),t(eo,ln),t(J,rn),t(J,to),t(to,dn),t(J,cn),t(J,oo),t(oo,hn),d(e,xa,n),d(e,Et,n),t(Et,pn),d(e,Ua,n),k(_e,e,n),d(e,Aa,n),d(e,te,n),t(te,ge),t(ge,ao),k(We,ao,null),t(te,fn),t(te,so),t(so,mn),d(e,Ca,n),d(e,ve,n),t(ve,un),t(ve,jt),t(jt,_n),t(ve,gn),d(e,Ga,n),k(Fe,e,n),d(e,qa,n),d(e,xt,n),t(xt,vn),d(e,Ta,n),k(He,e,n),d(e,Ia,n),d(e,Ut,n),t(Ut,wn),d(e,La,n),k(we,e,n),d(e,Da,n),d(e,oe,n),t(oe,ye),t(ye,no),k(Ye,no,null),t(oe,yn),t(oe,io),t(io,bn),d(e,Ma,n),d(e,At,n),t(At,$n),d(e,Ba,n),d(e,Ct,n),t(Ct,kn),d(e,za,n),k(Je,e,n),d(e,Na,n),d(e,Gt,n),t(Gt,Pn),d(e,Oa,n),k(Ve,e,n),d(e,Ra,n),d(e,z,n),t(z,En),t(z,lo),t(lo,jn),t(z,xn),t(z,ro),t(ro,Un),t(z,An),t(z,co),t(co,Cn),t(z,Gn),t(z,ho),t(ho,qn),t(z,Tn),t(z,po),t(po,In),t(z,Ln),t(z,fo),t(fo,Dn),d(e,Sa,n),d(e,ae,n),t(ae,be),t(be,mo),k(Ke,mo,null),t(ae,Mn),t(ae,uo),t(uo,Bn),d(e,Wa,n),d(e,$e,n),t($e,zn),t($e,qt),t(qt,Nn),t($e,On),d(e,Fa,n),d(e,ke,n),t(ke,Rn),t(ke,Qe),t(Qe,Sn),t(ke,Wn),d(e,Ha,n),k(Xe,e,n),d(e,Ya,n),d(e,Tt,n),t(Tt,Fn),d(e,Ja,n),k(Ze,e,n),d(e,Va,n),d(e,It,n),t(It,Hn),d(e,Ka,n),k(et,e,n),d(e,Qa,n),d(e,Pe,n),t(Pe,Yn),t(Pe,_o),t(_o,Jn),t(Pe,Vn),d(e,Xa,n),d(e,V,n),t(V,go),t(go,Kn),t(V,Qn),t(V,vo),t(vo,Xn),t(V,Zn),t(V,wo),t(wo,ei),d(e,Za,n),d(e,se,n),t(se,yo),t(yo,ti),t(se,oi),t(se,bo),t(bo,ai),t(se,si),d(e,es,n),d(e,K,n),t(K,ni),t(K,$o),t($o,ii),t(K,li),t(K,ko),t(ko,ri),t(K,di),d(e,ts,n),k(tt,e,n),d(e,os,n),k(ot,e,n),d(e,as,n),d(e,Ee,n),t(Ee,ci),t(Ee,Po),t(Po,hi),t(Ee,pi),d(e,ss,n),k(at,e,n),d(e,ns,n),d(e,ne,n),t(ne,je),t(je,Eo),k(st,Eo,null),t(ne,fi),t(ne,jo),t(jo,mi),d(e,is,n),d(e,Lt,n),t(Lt,ui),d(e,ls,n),k(nt,e,n),d(e,rs,n),d(e,Dt,n),t(Dt,_i),d(e,ds,n),d(e,Q,n),t(Q,xo),t(xo,gi),t(Q,vi),t(Q,Uo),t(Uo,wi),t(Q,yi),t(Q,Ao),t(Ao,bi),d(e,cs,n),d(e,Mt,n),t(Mt,$i),d(e,hs,n),k(xe,e,n),d(e,ps,n),d(e,ie,n),t(ie,Ue),t(Ue,Co),k(it,Co,null),t(ie,ki),t(ie,Go),t(Go,Pi),d(e,fs,n),d(e,Ae,n),t(Ae,Ei),t(Ae,qo),t(qo,ji),t(Ae,xi),d(e,ms,n),k(Ce,e,n),d(e,us,n),d(e,T,n),t(T,Ui),t(T,To),t(To,Ai),t(T,Ci),t(T,Bt),t(Bt,Gi),t(T,qi),t(T,Io),t(Io,Ti),t(T,Ii),t(T,Lo),t(Lo,Li),t(T,Di),t(T,Do),t(Do,Mi),t(T,Bi),t(T,Mo),t(Mo,zi),t(T,Ni),t(T,Bo),t(Bo,Oi),t(T,Ri),t(T,zo),t(zo,Si),t(T,Wi),d(e,_s,n),d(e,zt,n),t(zt,Fi),d(e,gs,n),k(lt,e,n),d(e,vs,n),k(Ge,e,n),d(e,ws,n),d(e,qe,n),t(qe,Hi),t(qe,No),t(No,Yi),t(qe,Ji),d(e,ys,n),k(rt,e,n),d(e,bs,n),d(e,Nt,n),t(Nt,Vi),d(e,$s,n),d(e,I,n),t(I,Ki),t(I,Oo),t(Oo,Qi),t(I,Xi),t(I,Ro),t(Ro,Zi),t(I,el),t(I,So),t(So,tl),t(I,ol),t(I,Wo),t(Wo,al),t(I,sl),t(I,Fo),t(Fo,nl),t(I,il),t(I,Ho),t(Ho,ll),t(I,rl),t(I,Yo),t(Yo,dl),t(I,cl),t(I,Jo),t(Jo,hl),t(I,pl),d(e,ks,n),k(dt,e,n),d(e,Ps,n),d(e,Ot,n),t(Ot,fl),d(e,Es,n),k(ct,e,n),d(e,js,n),d(e,Rt,n),t(Rt,ml),d(e,xs,n),k(ht,e,n),d(e,Us,n),k(Te,e,n),d(e,As,n),d(e,le,n),t(le,Ie),t(Ie,Vo),k(pt,Vo,null),t(le,ul),t(le,Ko),t(Ko,_l),d(e,Cs,n),d(e,St,n),t(St,gl),d(e,Gs,n),d(e,L,n),t(L,Qo),t(Qo,vl),t(L,wl),t(L,X),t(X,Wt),t(Wt,yl),t(X,bl),t(X,Xo),t(Xo,$l),t(X,kl),t(X,Ft),t(Ft,Pl),t(X,El),t(L,jl),t(L,Z),t(Z,Ht),t(Ht,xl),t(Z,Ul),t(Z,Zo),t(Zo,Al),t(Z,Cl),t(Z,Yt),t(Yt,Gl),t(Z,ql),t(L,Tl),t(L,Le),t(Le,Jt),t(Jt,Il),t(Le,Ll),t(Le,Vt),t(Vt,Dl),t(Le,Ml),t(L,Bl),t(L,ea),t(ea,zl),t(L,Nl),t(L,ta),t(ta,Ol),t(L,Rl),t(L,oa),t(oa,Sl),d(e,qs,n),d(e,re,n),t(re,De),t(De,aa),k(ft,aa,null),t(re,Wl),t(re,sa),t(sa,Fl),d(e,Ts,n),d(e,de,n),k(mt,de,null),t(de,Hl),t(de,na),t(na,Yl),d(e,Is,n),d(e,ce,n),k(ut,ce,null),t(ce,Jl),t(ce,ia),t(ia,Vl),d(e,Ls,n),d(e,he,n),k(_t,he,null),t(he,Kl),t(he,la),t(la,Ql),d(e,Ds,n),d(e,R,n),k(gt,R,null),t(R,Xl),t(R,ra),t(ra,Zl),t(R,er),t(R,H),t(H,da),t(da,tr),t(H,or),t(H,ca),t(ca,ar),t(H,sr),t(H,ha),t(ha,nr),t(H,ir),t(H,pa),t(pa,lr),t(R,rr),k(Me,R,null),d(e,Ms,n),d(e,S,n),k(vt,S,null),t(S,dr),t(S,fa),t(fa,cr),t(S,hr),k(Be,S,null),t(S,pr),k(ze,S,null),d(e,Bs,n),d(e,pe,n),k(wt,pe,null),t(pe,fr),t(pe,ma),t(ma,mr),d(e,zs,n),d(e,Y,n),k(yt,Y,null),t(Y,ur),t(Y,ua),t(ua,_r),t(Y,gr),k(Ne,Y,null),Ns=!0},p(e,[n]){const bt={};n&2&&(bt.$$scope={dirty:n,ctx:e}),_e.$set(bt);const _a={};n&2&&(_a.$$scope={dirty:n,ctx:e}),we.$set(_a);const ga={};n&2&&(ga.$$scope={dirty:n,ctx:e}),xe.$set(ga);const va={};n&2&&(va.$$scope={dirty:n,ctx:e}),Ce.$set(va);const wa={};n&2&&(wa.$$scope={dirty:n,ctx:e}),Ge.$set(wa);const ya={};n&2&&(ya.$$scope={dirty:n,ctx:e}),Te.$set(ya);const fe={};n&2&&(fe.$$scope={dirty:n,ctx:e}),Me.$set(fe);const ba={};n&2&&(ba.$$scope={dirty:n,ctx:e}),Be.$set(ba);const $a={};n&2&&($a.$$scope={dirty:n,ctx:e}),ze.$set($a);const ka={};n&2&&(ka.$$scope={dirty:n,ctx:e}),Ne.$set(ka)},i(e){Ns||(w(m.$$.fragment,e),w(O.$$.fragment,e),w(_e.$$.fragment,e),w(We.$$.fragment,e),w(Fe.$$.fragment,e),w(He.$$.fragment,e),w(we.$$.fragment,e),w(Ye.$$.fragment,e),w(Je.$$.fragment,e),w(Ve.$$.fragment,e),w(Ke.$$.fragment,e),w(Xe.$$.fragment,e),w(Ze.$$.fragment,e),w(et.$$.fragment,e),w(tt.$$.fragment,e),w(ot.$$.fragment,e),w(at.$$.fragment,e),w(st.$$.fragment,e),w(nt.$$.fragment,e),w(xe.$$.fragment,e),w(it.$$.fragment,e),w(Ce.$$.fragment,e),w(lt.$$.fragment,e),w(Ge.$$.fragment,e),w(rt.$$.fragment,e),w(dt.$$.fragment,e),w(ct.$$.fragment,e),w(ht.$$.fragment,e),w(Te.$$.fragment,e),w(pt.$$.fragment,e),w(ft.$$.fragment,e),w(mt.$$.fragment,e),w(ut.$$.fragment,e),w(_t.$$.fragment,e),w(gt.$$.fragment,e),w(Me.$$.fragment,e),w(vt.$$.fragment,e),w(Be.$$.fragment,e),w(ze.$$.fragment,e),w(wt.$$.fragment,e),w(yt.$$.fragment,e),w(Ne.$$.fragment,e),Ns=!0)},o(e){y(m.$$.fragment,e),y(O.$$.fragment,e),y(_e.$$.fragment,e),y(We.$$.fragment,e),y(Fe.$$.fragment,e),y(He.$$.fragment,e),y(we.$$.fragment,e),y(Ye.$$.fragment,e),y(Je.$$.fragment,e),y(Ve.$$.fragment,e),y(Ke.$$.fragment,e),y(Xe.$$.fragment,e),y(Ze.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(ot.$$.fragment,e),y(at.$$.fragment,e),y(st.$$.fragment,e),y(nt.$$.fragment,e),y(xe.$$.fragment,e),y(it.$$.fragment,e),y(Ce.$$.fragment,e),y(lt.$$.fragment,e),y(Ge.$$.fragment,e),y(rt.$$.fragment,e),y(dt.$$.fragment,e),y(ct.$$.fragment,e),y(ht.$$.fragment,e),y(Te.$$.fragment,e),y(pt.$$.fragment,e),y(ft.$$.fragment,e),y(mt.$$.fragment,e),y(ut.$$.fragment,e),y(_t.$$.fragment,e),y(gt.$$.fragment,e),y(Me.$$.fragment,e),y(vt.$$.fragment,e),y(Be.$$.fragment,e),y(ze.$$.fragment,e),y(wt.$$.fragment,e),y(yt.$$.fragment,e),y(Ne.$$.fragment,e),Ns=!1},d(e){o(c),e&&o(v),e&&o(f),P(m),e&&o(C),e&&o(G),e&&o(q),P(O,e),e&&o(F),e&&o(ee),e&&o(ja),e&&o(J),e&&o(xa),e&&o(Et),e&&o(Ua),P(_e,e),e&&o(Aa),e&&o(te),P(We),e&&o(Ca),e&&o(ve),e&&o(Ga),P(Fe,e),e&&o(qa),e&&o(xt),e&&o(Ta),P(He,e),e&&o(Ia),e&&o(Ut),e&&o(La),P(we,e),e&&o(Da),e&&o(oe),P(Ye),e&&o(Ma),e&&o(At),e&&o(Ba),e&&o(Ct),e&&o(za),P(Je,e),e&&o(Na),e&&o(Gt),e&&o(Oa),P(Ve,e),e&&o(Ra),e&&o(z),e&&o(Sa),e&&o(ae),P(Ke),e&&o(Wa),e&&o($e),e&&o(Fa),e&&o(ke),e&&o(Ha),P(Xe,e),e&&o(Ya),e&&o(Tt),e&&o(Ja),P(Ze,e),e&&o(Va),e&&o(It),e&&o(Ka),P(et,e),e&&o(Qa),e&&o(Pe),e&&o(Xa),e&&o(V),e&&o(Za),e&&o(se),e&&o(es),e&&o(K),e&&o(ts),P(tt,e),e&&o(os),P(ot,e),e&&o(as),e&&o(Ee),e&&o(ss),P(at,e),e&&o(ns),e&&o(ne),P(st),e&&o(is),e&&o(Lt),e&&o(ls),P(nt,e),e&&o(rs),e&&o(Dt),e&&o(ds),e&&o(Q),e&&o(cs),e&&o(Mt),e&&o(hs),P(xe,e),e&&o(ps),e&&o(ie),P(it),e&&o(fs),e&&o(Ae),e&&o(ms),P(Ce,e),e&&o(us),e&&o(T),e&&o(_s),e&&o(zt),e&&o(gs),P(lt,e),e&&o(vs),P(Ge,e),e&&o(ws),e&&o(qe),e&&o(ys),P(rt,e),e&&o(bs),e&&o(Nt),e&&o($s),e&&o(I),e&&o(ks),P(dt,e),e&&o(Ps),e&&o(Ot),e&&o(Es),P(ct,e),e&&o(js),e&&o(Rt),e&&o(xs),P(ht,e),e&&o(Us),P(Te,e),e&&o(As),e&&o(le),P(pt),e&&o(Cs),e&&o(St),e&&o(Gs),e&&o(L),e&&o(qs),e&&o(re),P(ft),e&&o(Ts),e&&o(de),P(mt),e&&o(Is),e&&o(ce),P(ut),e&&o(Ls),e&&o(he),P(_t),e&&o(Ds),e&&o(R),P(gt),P(Me),e&&o(Ms),e&&o(S),P(vt),P(Be),P(ze),e&&o(Bs),e&&o(pe),P(wt),e&&o(zs),e&&o(Y),P(yt),P(Ne)}}}const Bc={local:"initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram",title:"Initialize a model with 100 billions parameters in no time and without using any RAM."};function zc(x){return fc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fc extends cc{constructor(c){super();hc(this,c,zc,Mc,pc,{})}}export{Fc as default,Bc as metadata};
