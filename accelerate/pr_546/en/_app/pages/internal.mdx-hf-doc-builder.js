import{S as cl,i as il,s as dl,e as r,k as i,w as f,t as n,M as hl,c as o,d as a,m as d,a as s,x as m,h as l,b as c,G as e,g as p,y as g,q as v,o as _,B as b,v as pl}from"../chunks/vendor-hf-doc-builder.js";import{T as ll}from"../chunks/Tip-hf-doc-builder.js";import{D as L}from"../chunks/Docstring-hf-doc-builder.js";import{I as B}from"../chunks/IconCopyLink-hf-doc-builder.js";function ul(st){let u,z,$,S,x;return{c(){u=r("p"),z=n("This does not support "),$=r("code"),S=n("BatchSampler"),x=n(" with varying batch size yet.")},l(w){u=o(w,"P",{});var y=s(u);z=l(y,"This does not support "),$=o(y,"CODE",{});var O=s($);S=l(O,"BatchSampler"),O.forEach(a),x=l(y," with varying batch size yet."),y.forEach(a)},m(w,y){p(w,u,y),e(u,z),e(u,$),e($,S),e(u,x)},d(w){w&&a(u)}}}function fl(st){let u,z,$,S,x;return{c(){u=r("p"),z=n("This does not support "),$=r("code"),S=n("BatchSampler"),x=n(" with varying batch size yet.")},l(w){u=o(w,"P",{});var y=s(u);z=l(y,"This does not support "),$=o(y,"CODE",{});var O=s($);S=l(O,"BatchSampler"),O.forEach(a),x=l(y," with varying batch size yet."),y.forEach(a)},m(w,y){p(w,u,y),e(u,z),e(u,$),e($,S),e(u,x)},d(w){w&&a(u)}}}function ml(st){let u,z,$,S,x,w,y,O,fr,xa,F,oe,mt,Te,mr,gt,gr,Aa,A,ke,vr,V,_r,ze,br,$r,vt,wr,yr,Er,_t,Sr,Dr,Pe,se,bt,xr,Ar,$t,Tr,kr,zr,ne,wt,Pr,Ir,yt,Lr,Or,Ta,U,le,Et,Ie,Nr,St,Cr,ka,N,Le,Gr,Dt,Wr,Br,H,qr,xt,Fr,Vr,At,Ur,Hr,za,R,ce,Tt,Oe,Rr,kt,Mr,Pa,ie,jr,zt,Xr,Jr,Ia,T,Ne,Kr,Ce,Qr,Pt,Yr,Zr,eo,M,to,It,ao,ro,Lt,oo,so,no,de,La,j,he,Ot,Ge,lo,Nt,co,Oa,k,We,io,Be,ho,Ct,po,uo,fo,Gt,Wt,mo,go,qe,Bt,q,qt,vo,_o,Ft,bo,$o,Vt,wo,yo,Eo,Ut,pe,Ht,So,Do,Rt,xo,Ao,Na,X,ue,Mt,Fe,To,jt,ko,Ca,C,Ve,zo,G,Po,Xt,Io,Lo,Jt,Oo,No,Kt,Co,Go,Wo,fe,Ga,J,me,Qt,Ue,Bo,Yt,qo,Wa,K,He,Fo,D,Vo,Zt,Uo,Ho,ea,Ro,Mo,ta,jo,Xo,aa,Jo,Ko,ra,Qo,Yo,Ba,Q,ge,oa,Re,Zo,sa,es,qa,W,Me,ts,na,as,rs,la,os,Fa,Y,ve,ca,je,ss,ia,ns,Va,Z,_e,da,Xe,ls,ha,cs,Ua,ee,Je,is,te,ds,Ke,hs,ps,pa,us,fs,Ha,ae,be,ua,Qe,ms,fa,gs,Ra,E,Ye,vs,ma,_s,bs,$e,$s,ga,ws,ys,nt,Es,Ss,we,Ze,Ds,va,xs,As,ye,et,Ts,re,ks,_a,zs,Ps,ba,Is,Ls,Os,Ee,tt,Ns,at,Cs,$a,Gs,Ws,Ma;return w=new B({}),Te=new B({}),ke=new L({props:{name:"class accelerate.state.GradientState",anchor:"accelerate.state.GradientState",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/state.py#L239"}}),Ie=new B({}),Le=new L({props:{name:"class accelerate.optimizer.AcceleratedOptimizer",anchor:"accelerate.optimizer.AcceleratedOptimizer",parameters:[{name:"optimizer",val:""},{name:"device_placement",val:" = True"},{name:"scaler",val:" = None"}],parametersDescription:[{anchor:"accelerate.optimizer.AcceleratedOptimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the optimizer should handle device placement. If so, it will place the state dictionary of
<code>optimizer</code> on the right device.`,name:"device_placement"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.scaler",description:`<strong>scaler</strong> (<code>torch.cuda.amp.grad_scaler.GradScaler</code>, <em>optional</em>) &#x2014;
The scaler to use in the step function if training with mixed precision.`,name:"scaler"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/optimizer.py#L38"}}),Oe=new B({}),Ne=new L({props:{name:"accelerate.data_loader.prepare_data_loader",anchor:"accelerate.data_loader.prepare_data_loader",parameters:[{name:"dataloader",val:": DataLoader"},{name:"device",val:": typing.Optional[torch.device] = None"},{name:"num_processes",val:": typing.Optional[int] = None"},{name:"process_index",val:": typing.Optional[int] = None"},{name:"split_batches",val:": bool = False"},{name:"put_on_device",val:": bool = False"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"accelerate.data_loader.prepare_data_loader.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.dataloader.DataLoader</code>) &#x2014;
The data loader to split across several devices.`,name:"dataloader"},{anchor:"accelerate.data_loader.prepare_data_loader.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The target device for the returned <code>DataLoader</code>.`,name:"device"},{anchor:"accelerate.data_loader.prepare_data_loader.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of processes running concurrently. Will default to the value given by
<a href="/docs/accelerate/pr_546/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"num_processes"},{anchor:"accelerate.data_loader.prepare_data_loader.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The index of the current process. Will default to the value given by <a href="/docs/accelerate/pr_546/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"process_index"},{anchor:"accelerate.data_loader.prepare_data_loader.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration).</p>
<p>Another way to see this is that the observed batch size will be the same as the initial <code>dataloader</code> if
this option is set to <code>True</code>, the batch size of the initial <code>dataloader</code> multiplied by <code>num_processes</code>
otherwise.</p>
<p>Setting this option to <code>True</code> requires that the batch size of the <code>dataloader</code> is a round multiple of
<code>batch_size</code>.`,name:"split_batches"},{anchor:"accelerate.data_loader.prepare_data_loader.put_on_device",description:`<strong>put_on_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to put the batches on <code>device</code> (only works if the batches are nested list, tuples or
dictionaries of tensors).`,name:"put_on_device"},{anchor:"accelerate.data_loader.prepare_data_loader.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.prepare_data_loader.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the datalaoder prepared is only iterated through on the main process and then the batches
are split and broadcast to each process. Will default to <code>True</code> when the underlying dataset is an
<code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/data_loader.py#L519",returnDescription:`
<p>A new data loader that will yield the portion of the batches</p>
`,returnType:`
<p><code>torch.utils.data.dataloader.DataLoader</code></p>
`}}),de=new ll({props:{warning:!0,$$slots:{default:[ul]},$$scope:{ctx:st}}}),Ge=new B({}),We=new L({props:{name:"class accelerate.data_loader.DataLoaderShard",anchor:"accelerate.data_loader.DataLoaderShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.Dataset</code>) &#x2014;
The dataset to use to build this datalaoder.`,name:"dataset"},{anchor:"accelerate.data_loader.DataLoaderShard.device",description:`<strong>device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
If passed, the device to put all batches on.`,name:"device"},{anchor:"accelerate.data_loader.DataLoaderShard.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: an optional <code>torch.Generator</code></li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.DataLoaderShard.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A random number generator to keep synchronized across processes.
kwargs &#x2014;
All other keyword arguments to pass to the regular <code>DataLoader</code> initialization.`,name:"generator"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/data_loader.py#L293"}}),Fe=new B({}),Ve=new L({props:{name:"class accelerate.data_loader.BatchSamplerShard",anchor:"accelerate.data_loader.BatchSamplerShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.BatchSamplerShard.batch_sampler",description:`<strong>batch_sampler</strong> (<code>torch.utils.data.sampler.BatchSampler</code>) &#x2014;
The batch sampler to split in several shards.`,name:"batch_sampler"},{anchor:"accelerate.data_loader.BatchSamplerShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.BatchSamplerShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.BatchSamplerShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with a sampler of <code>[[0, 1, 2, 3], [4, 5, 6, 7]]</code>, this will result in:</p>
<ul>
<li>the sampler on process 0 to yield <code>[0, 1, 2, 3]</code> and the sampler on process 1 to yield <code>[4, 5, 6, 7]</code> if
this argument is set to <code>False</code>.</li>
<li>the sampler on process 0 to yield <code>[0, 1]</code> then <code>[4, 5]</code> and the sampler on process 1 to yield <code>[2, 3]</code>
then <code>[6, 7]</code> if this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/data_loader.py#L91"}}),fe=new ll({props:{warning:!0,$$slots:{default:[fl]},$$scope:{ctx:st}}}),Ue=new B({}),He=new L({props:{name:"class accelerate.data_loader.IterableDatasetShard",anchor:"accelerate.data_loader.IterableDatasetShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.IterableDatasetShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.IterableDataset</code>) &#x2014;
The batch sampler to split in several shards.`,name:"dataset"},{anchor:"accelerate.data_loader.IterableDatasetShard.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The size of the batches per shard (if <code>split_batches=False</code>) or the size of the batches (if
<code>split_batches=True</code>).`,name:"batch_size"},{anchor:"accelerate.data_loader.IterableDatasetShard.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to drop the last incomplete batch or complete the last batches by using the samples from the
beginning.`,name:"drop_last"},{anchor:"accelerate.data_loader.IterableDatasetShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.IterableDatasetShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.IterableDatasetShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with an iterable dataset yielding of <code>[0, 1, 2, 3, 4, 5, 6, 7]</code>, this will result in:</p>
<ul>
<li>the shard on process 0 to yield <code>[0, 1, 2, 3]</code> and the shard on process 1 to yield <code>[4, 5, 6, 7]</code> if this
argument is set to <code>False</code>.</li>
<li>the shard on process 0 to yield <code>[0, 1, 4, 5]</code> and the sampler on process 1 to yield <code>[2, 3, 6, 7]</code> if
this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/data_loader.py#L212"}}),Re=new B({}),Me=new L({props:{name:"class accelerate.scheduler.AcceleratedScheduler",anchor:"accelerate.scheduler.AcceleratedScheduler",parameters:[{name:"scheduler",val:""},{name:"optimizers",val:""},{name:"step_with_optimizer",val:": bool = True"},{name:"split_batches",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.scheduler.AcceleratedScheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
The scheduler to wrap.`,name:"scheduler"},{anchor:"accelerate.scheduler.AcceleratedScheduler.optimizers",description:`<strong>optimizers</strong> (one or a list of <code>torch.optim.Optimizer</code>) &#x2014;
The optimizers used.`,name:"optimizers"},{anchor:"accelerate.scheduler.AcceleratedScheduler.step_with_optimizer",description:`<strong>step_with_optimizer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the scheduler should be stepped at each optimizer step.`,name:"step_with_optimizer"},{anchor:"accelerate.scheduler.AcceleratedScheduler.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the dataloaders split one batch across the different processes (so batch size is the same
regardless of the number of processes) or create batches on each process (so batch size is the original
batch size multiplied by the number of processes).`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/scheduler.py#L25"}}),je=new B({}),Xe=new B({}),Je=new L({props:{name:"class accelerate.state.AcceleratorState",anchor:"accelerate.state.AcceleratorState",parameters:[{name:"mixed_precision",val:": str = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:" = None"},{name:"fsdp_plugin",val:" = None"},{name:"_from_accelerator",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>device</strong> (<code>torch.device</code>) &#x2014; The device to use. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>sync_gradients</strong> (<code>bool</code>) &#x2014; Whether to sync the gradients or not &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>distributed_type</strong> (<code>~accelerate.state.DistributedType</code>) &#x2014; The type of distributed environment currently &#x2014;
in use.`,name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>num_processes</strong> (<code>int</code>) &#x2014; The number of processes currently launched in parallel. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>process_index</strong> (<code>int</code>) &#x2014; The index of the current process. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>local_process_index</strong> (<code>int</code>) &#x2014; The index of the current process on the current server. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>mixed_precision</strong> (<code>str</code>) &#x2014; Whether or not the current script will use mixed precision. If you are using &#x2014;
mixed precision, define if you want to use FP16 or BF16 (bfloat16) as the floating point.`,name:"-"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/state.py#L48"}}),Qe=new B({}),Ye=new L({props:{name:"class accelerate.tracking.GeneralTracker",anchor:"accelerate.tracking.GeneralTracker",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/tracking.py#L52"}}),Ze=new L({props:{name:"finish",anchor:"accelerate.tracking.GeneralTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/tracking.py#L99"}}),et=new L({props:{name:"log",anchor:"accelerate.tracking.GeneralTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.GeneralTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/tracking.py#L85"}}),tt=new L({props:{name:"store_init_configuration",anchor:"accelerate.tracking.GeneralTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/vr_546/src/accelerate/tracking.py#L72"}}),{c(){u=r("meta"),z=i(),$=r("h1"),S=r("a"),x=r("span"),f(w.$$.fragment),y=i(),O=r("span"),fr=n("Internals"),xa=i(),F=r("h2"),oe=r("a"),mt=r("span"),f(Te.$$.fragment),mr=i(),gt=r("span"),gr=n("Gradient Accumulation states"),Aa=i(),A=r("div"),f(ke.$$.fragment),vr=i(),V=r("p"),_r=n("This is a variation of a "),ze=r("a"),br=n("singleton class"),$r=n(` in the sense that all
instance of `),vt=r("code"),wr=n("GradientState"),yr=n(" share the same state, which is initialized on the first instantiation."),Er=i(),_t=r("p"),Sr=n(`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),Dr=i(),Pe=r("ul"),se=r("li"),bt=r("strong"),xr=n("sync_gradients"),Ar=n(" ("),$t=r("code"),Tr=n("bool"),kr=n(") \u2014 Whether the gradients should be synced"),zr=i(),ne=r("li"),wt=r("strong"),Pr=n("end_of_dataloader"),Ir=n(" ("),yt=r("code"),Lr=n("bool"),Or=n(") \u2014 Whether we have reached the end the current dataloader"),Ta=i(),U=r("h2"),le=r("a"),Et=r("span"),f(Ie.$$.fragment),Nr=i(),St=r("span"),Cr=n("Optimizer"),ka=i(),N=r("div"),f(Le.$$.fragment),Gr=i(),Dt=r("p"),Wr=n("Internal wrapper around a torch optimizer."),Br=i(),H=r("p"),qr=n("Conditionally will perform "),xt=r("code"),Fr=n("step"),Vr=n(" and "),At=r("code"),Ur=n("zero_grad"),Hr=n(` if gradients should be synchronized when performing gradient
accumulation.`),za=i(),R=r("h2"),ce=r("a"),Tt=r("span"),f(Oe.$$.fragment),Rr=i(),kt=r("span"),Mr=n("DataLoader"),Pa=i(),ie=r("p"),jr=n("The main work on your PyTorch "),zt=r("code"),Xr=n("DataLoader"),Jr=n(" is done by the following function:"),Ia=i(),T=r("div"),f(Ne.$$.fragment),Kr=i(),Ce=r("p"),Qr=n("Wraps a PyTorch "),Pt=r("code"),Yr=n("DataLoader"),Zr=n(" to generate batches for one of the processes only."),eo=i(),M=r("p"),to=n("Depending on the value of the "),It=r("code"),ao=n("drop_last"),ro=n(" attribute of the "),Lt=r("code"),oo=n("dataloader"),so=n(` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),no=i(),f(de.$$.fragment),La=i(),j=r("h3"),he=r("a"),Ot=r("span"),f(Ge.$$.fragment),lo=i(),Nt=r("span"),co=n("DataLoaderShard"),Oa=i(),k=r("div"),f(We.$$.fragment),io=i(),Be=r("p"),ho=n("Subclass of a PyTorch "),Ct=r("code"),po=n("DataLoader"),uo=n(" that will deal with device placement and current distributed setup."),fo=i(),Gt=r("p"),Wt=r("strong"),mo=n("Available attributes:"),go=i(),qe=r("ul"),Bt=r("li"),q=r("p"),qt=r("strong"),vo=n("total_batch_size"),_o=n(" ("),Ft=r("code"),bo=n("int"),$o=n(`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),Vt=r("code"),wo=n("split_batches=True"),yo=n(`; otherwise the original batch size * the total
number of processes`),Eo=i(),Ut=r("li"),pe=r("p"),Ht=r("strong"),So=n("total_dataset_length"),Do=n(" ("),Rt=r("code"),xo=n("int"),Ao=n(") \u2014 Total length of the inner dataset across all processes."),Na=i(),X=r("h3"),ue=r("a"),Mt=r("span"),f(Fe.$$.fragment),To=i(),jt=r("span"),ko=n("BatchSamplerShard"),Ca=i(),C=r("div"),f(Ve.$$.fragment),zo=i(),G=r("p"),Po=n("Wraps a PyTorch "),Xt=r("code"),Io=n("BatchSampler"),Lo=n(` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Jt=r("code"),Oo=n("num_processes"),No=n(` and that all have the same size.
Depending on the value of the `),Kt=r("code"),Co=n("drop_last"),Go=n(` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Wo=i(),f(fe.$$.fragment),Ga=i(),J=r("h3"),me=r("a"),Qt=r("span"),f(Ue.$$.fragment),Bo=i(),Yt=r("span"),qo=n("IterableDatasetShard"),Wa=i(),K=r("div"),f(He.$$.fragment),Fo=i(),D=r("p"),Vo=n("Wraps a PyTorch "),Zt=r("code"),Uo=n("IterableDataset"),Ho=n(` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),ea=r("code"),Ro=n("split_batches"),Mo=n(", this is either "),ta=r("code"),jo=n("batch_size"),Xo=n(" or "),aa=r("code"),Jo=n("batch_size x num_processes"),Ko=n(`). Depending on the value of the
`),ra=r("code"),Qo=n("drop_last"),Yo=n(` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),Ba=i(),Q=r("h2"),ge=r("a"),oa=r("span"),f(Re.$$.fragment),Zo=i(),sa=r("span"),es=n("Scheduler"),qa=i(),W=r("div"),f(Me.$$.fragment),ts=i(),na=r("p"),as=n(`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),rs=i(),la=r("p"),os=n(`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),Fa=i(),Y=r("h2"),ve=r("a"),ca=r("span"),f(je.$$.fragment),ss=i(),ia=r("span"),ns=n("Distributed Config"),Va=i(),Z=r("h3"),_e=r("a"),da=r("span"),f(Xe.$$.fragment),ls=i(),ha=r("span"),cs=n("AcceleratorState"),Ua=i(),ee=r("div"),f(Je.$$.fragment),is=i(),te=r("p"),ds=n("This is a variation of a "),Ke=r("a"),hs=n("singleton class"),ps=n(` in the sense that all
instance of `),pa=r("code"),us=n("AcceleratorState"),fs=n(" share the same state, which is initialized on the first instantiation."),Ha=i(),ae=r("h2"),be=r("a"),ua=r("span"),f(Qe.$$.fragment),ms=i(),fa=r("span"),gs=n("Tracking"),Ra=i(),E=r("div"),f(Ye.$$.fragment),vs=i(),ma=r("p"),_s=n("A base Tracker class to be used for all logging integration implementations."),bs=i(),$e=r("p"),$s=n("Each function should take in "),ga=r("code"),ws=n("**kwargs"),ys=n(` that will automatically be passed in from a base dictionary provided to
`),nt=r("a"),Es=n("Accelerator"),Ss=i(),we=r("div"),f(Ze.$$.fragment),Ds=i(),va=r("p"),xs=n(`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),As=i(),ye=r("div"),f(et.$$.fragment),Ts=i(),re=r("p"),ks=n("Logs "),_a=r("code"),zs=n("values"),Ps=n(" to the current run. Base "),ba=r("code"),Is=n("log"),Ls=n(" implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),Os=i(),Ee=r("div"),f(tt.$$.fragment),Ns=i(),at=r("p"),Cs=n("Logs "),$a=r("code"),Gs=n("values"),Ws=n(` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),this.h()},l(t){const h=hl('[data-svelte="svelte-1phssyn"]',document.head);u=o(h,"META",{name:!0,content:!0}),h.forEach(a),z=d(t),$=o(t,"H1",{class:!0});var rt=s($);S=o(rt,"A",{id:!0,class:!0,href:!0});var wa=s(S);x=o(wa,"SPAN",{});var Bs=s(x);m(w.$$.fragment,Bs),Bs.forEach(a),wa.forEach(a),y=d(rt),O=o(rt,"SPAN",{});var qs=s(O);fr=l(qs,"Internals"),qs.forEach(a),rt.forEach(a),xa=d(t),F=o(t,"H2",{class:!0});var ja=s(F);oe=o(ja,"A",{id:!0,class:!0,href:!0});var Fs=s(oe);mt=o(Fs,"SPAN",{});var Vs=s(mt);m(Te.$$.fragment,Vs),Vs.forEach(a),Fs.forEach(a),mr=d(ja),gt=o(ja,"SPAN",{});var Us=s(gt);gr=l(Us,"Gradient Accumulation states"),Us.forEach(a),ja.forEach(a),Aa=d(t),A=o(t,"DIV",{class:!0});var Se=s(A);m(ke.$$.fragment,Se),vr=d(Se),V=o(Se,"P",{});var lt=s(V);_r=l(lt,"This is a variation of a "),ze=o(lt,"A",{href:!0,rel:!0});var Hs=s(ze);br=l(Hs,"singleton class"),Hs.forEach(a),$r=l(lt,` in the sense that all
instance of `),vt=o(lt,"CODE",{});var Rs=s(vt);wr=l(Rs,"GradientState"),Rs.forEach(a),yr=l(lt," share the same state, which is initialized on the first instantiation."),lt.forEach(a),Er=d(Se),_t=o(Se,"P",{});var Ms=s(_t);Sr=l(Ms,`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),Ms.forEach(a),Dr=d(Se),Pe=o(Se,"UL",{});var Xa=s(Pe);se=o(Xa,"LI",{});var ya=s(se);bt=o(ya,"STRONG",{});var js=s(bt);xr=l(js,"sync_gradients"),js.forEach(a),Ar=l(ya," ("),$t=o(ya,"CODE",{});var Xs=s($t);Tr=l(Xs,"bool"),Xs.forEach(a),kr=l(ya,") \u2014 Whether the gradients should be synced"),ya.forEach(a),zr=d(Xa),ne=o(Xa,"LI",{});var Ea=s(ne);wt=o(Ea,"STRONG",{});var Js=s(wt);Pr=l(Js,"end_of_dataloader"),Js.forEach(a),Ir=l(Ea," ("),yt=o(Ea,"CODE",{});var Ks=s(yt);Lr=l(Ks,"bool"),Ks.forEach(a),Or=l(Ea,") \u2014 Whether we have reached the end the current dataloader"),Ea.forEach(a),Xa.forEach(a),Se.forEach(a),Ta=d(t),U=o(t,"H2",{class:!0});var Ja=s(U);le=o(Ja,"A",{id:!0,class:!0,href:!0});var Qs=s(le);Et=o(Qs,"SPAN",{});var Ys=s(Et);m(Ie.$$.fragment,Ys),Ys.forEach(a),Qs.forEach(a),Nr=d(Ja),St=o(Ja,"SPAN",{});var Zs=s(St);Cr=l(Zs,"Optimizer"),Zs.forEach(a),Ja.forEach(a),ka=d(t),N=o(t,"DIV",{class:!0});var ct=s(N);m(Le.$$.fragment,ct),Gr=d(ct),Dt=o(ct,"P",{});var en=s(Dt);Wr=l(en,"Internal wrapper around a torch optimizer."),en.forEach(a),Br=d(ct),H=o(ct,"P",{});var it=s(H);qr=l(it,"Conditionally will perform "),xt=o(it,"CODE",{});var tn=s(xt);Fr=l(tn,"step"),tn.forEach(a),Vr=l(it," and "),At=o(it,"CODE",{});var an=s(At);Ur=l(an,"zero_grad"),an.forEach(a),Hr=l(it,` if gradients should be synchronized when performing gradient
accumulation.`),it.forEach(a),ct.forEach(a),za=d(t),R=o(t,"H2",{class:!0});var Ka=s(R);ce=o(Ka,"A",{id:!0,class:!0,href:!0});var rn=s(ce);Tt=o(rn,"SPAN",{});var on=s(Tt);m(Oe.$$.fragment,on),on.forEach(a),rn.forEach(a),Rr=d(Ka),kt=o(Ka,"SPAN",{});var sn=s(kt);Mr=l(sn,"DataLoader"),sn.forEach(a),Ka.forEach(a),Pa=d(t),ie=o(t,"P",{});var Qa=s(ie);jr=l(Qa,"The main work on your PyTorch "),zt=o(Qa,"CODE",{});var nn=s(zt);Xr=l(nn,"DataLoader"),nn.forEach(a),Jr=l(Qa," is done by the following function:"),Qa.forEach(a),Ia=d(t),T=o(t,"DIV",{class:!0});var De=s(T);m(Ne.$$.fragment,De),Kr=d(De),Ce=o(De,"P",{});var Ya=s(Ce);Qr=l(Ya,"Wraps a PyTorch "),Pt=o(Ya,"CODE",{});var ln=s(Pt);Yr=l(ln,"DataLoader"),ln.forEach(a),Zr=l(Ya," to generate batches for one of the processes only."),Ya.forEach(a),eo=d(De),M=o(De,"P",{});var dt=s(M);to=l(dt,"Depending on the value of the "),It=o(dt,"CODE",{});var cn=s(It);ao=l(cn,"drop_last"),cn.forEach(a),ro=l(dt," attribute of the "),Lt=o(dt,"CODE",{});var dn=s(Lt);oo=l(dn,"dataloader"),dn.forEach(a),so=l(dt,` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),dt.forEach(a),no=d(De),m(de.$$.fragment,De),De.forEach(a),La=d(t),j=o(t,"H3",{class:!0});var Za=s(j);he=o(Za,"A",{id:!0,class:!0,href:!0});var hn=s(he);Ot=o(hn,"SPAN",{});var pn=s(Ot);m(Ge.$$.fragment,pn),pn.forEach(a),hn.forEach(a),lo=d(Za),Nt=o(Za,"SPAN",{});var un=s(Nt);co=l(un,"DataLoaderShard"),un.forEach(a),Za.forEach(a),Oa=d(t),k=o(t,"DIV",{class:!0});var xe=s(k);m(We.$$.fragment,xe),io=d(xe),Be=o(xe,"P",{});var er=s(Be);ho=l(er,"Subclass of a PyTorch "),Ct=o(er,"CODE",{});var fn=s(Ct);po=l(fn,"DataLoader"),fn.forEach(a),uo=l(er," that will deal with device placement and current distributed setup."),er.forEach(a),fo=d(xe),Gt=o(xe,"P",{});var mn=s(Gt);Wt=o(mn,"STRONG",{});var gn=s(Wt);mo=l(gn,"Available attributes:"),gn.forEach(a),mn.forEach(a),go=d(xe),qe=o(xe,"UL",{});var tr=s(qe);Bt=o(tr,"LI",{});var vn=s(Bt);q=o(vn,"P",{});var ot=s(q);qt=o(ot,"STRONG",{});var _n=s(qt);vo=l(_n,"total_batch_size"),_n.forEach(a),_o=l(ot," ("),Ft=o(ot,"CODE",{});var bn=s(Ft);bo=l(bn,"int"),bn.forEach(a),$o=l(ot,`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),Vt=o(ot,"CODE",{});var $n=s(Vt);wo=l($n,"split_batches=True"),$n.forEach(a),yo=l(ot,`; otherwise the original batch size * the total
number of processes`),ot.forEach(a),vn.forEach(a),Eo=d(tr),Ut=o(tr,"LI",{});var wn=s(Ut);pe=o(wn,"P",{});var Sa=s(pe);Ht=o(Sa,"STRONG",{});var yn=s(Ht);So=l(yn,"total_dataset_length"),yn.forEach(a),Do=l(Sa," ("),Rt=o(Sa,"CODE",{});var En=s(Rt);xo=l(En,"int"),En.forEach(a),Ao=l(Sa,") \u2014 Total length of the inner dataset across all processes."),Sa.forEach(a),wn.forEach(a),tr.forEach(a),xe.forEach(a),Na=d(t),X=o(t,"H3",{class:!0});var ar=s(X);ue=o(ar,"A",{id:!0,class:!0,href:!0});var Sn=s(ue);Mt=o(Sn,"SPAN",{});var Dn=s(Mt);m(Fe.$$.fragment,Dn),Dn.forEach(a),Sn.forEach(a),To=d(ar),jt=o(ar,"SPAN",{});var xn=s(jt);ko=l(xn,"BatchSamplerShard"),xn.forEach(a),ar.forEach(a),Ca=d(t),C=o(t,"DIV",{class:!0});var ht=s(C);m(Ve.$$.fragment,ht),zo=d(ht),G=o(ht,"P",{});var Ae=s(G);Po=l(Ae,"Wraps a PyTorch "),Xt=o(Ae,"CODE",{});var An=s(Xt);Io=l(An,"BatchSampler"),An.forEach(a),Lo=l(Ae,` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Jt=o(Ae,"CODE",{});var Tn=s(Jt);Oo=l(Tn,"num_processes"),Tn.forEach(a),No=l(Ae,` and that all have the same size.
Depending on the value of the `),Kt=o(Ae,"CODE",{});var kn=s(Kt);Co=l(kn,"drop_last"),kn.forEach(a),Go=l(Ae,` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Ae.forEach(a),Wo=d(ht),m(fe.$$.fragment,ht),ht.forEach(a),Ga=d(t),J=o(t,"H3",{class:!0});var rr=s(J);me=o(rr,"A",{id:!0,class:!0,href:!0});var zn=s(me);Qt=o(zn,"SPAN",{});var Pn=s(Qt);m(Ue.$$.fragment,Pn),Pn.forEach(a),zn.forEach(a),Bo=d(rr),Yt=o(rr,"SPAN",{});var In=s(Yt);qo=l(In,"IterableDatasetShard"),In.forEach(a),rr.forEach(a),Wa=d(t),K=o(t,"DIV",{class:!0});var or=s(K);m(He.$$.fragment,or),Fo=d(or),D=o(or,"P",{});var P=s(D);Vo=l(P,"Wraps a PyTorch "),Zt=o(P,"CODE",{});var Ln=s(Zt);Uo=l(Ln,"IterableDataset"),Ln.forEach(a),Ho=l(P,` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),ea=o(P,"CODE",{});var On=s(ea);Ro=l(On,"split_batches"),On.forEach(a),Mo=l(P,", this is either "),ta=o(P,"CODE",{});var Nn=s(ta);jo=l(Nn,"batch_size"),Nn.forEach(a),Xo=l(P," or "),aa=o(P,"CODE",{});var Cn=s(aa);Jo=l(Cn,"batch_size x num_processes"),Cn.forEach(a),Ko=l(P,`). Depending on the value of the
`),ra=o(P,"CODE",{});var Gn=s(ra);Qo=l(Gn,"drop_last"),Gn.forEach(a),Yo=l(P,` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),P.forEach(a),or.forEach(a),Ba=d(t),Q=o(t,"H2",{class:!0});var sr=s(Q);ge=o(sr,"A",{id:!0,class:!0,href:!0});var Wn=s(ge);oa=o(Wn,"SPAN",{});var Bn=s(oa);m(Re.$$.fragment,Bn),Bn.forEach(a),Wn.forEach(a),Zo=d(sr),sa=o(sr,"SPAN",{});var qn=s(sa);es=l(qn,"Scheduler"),qn.forEach(a),sr.forEach(a),qa=d(t),W=o(t,"DIV",{class:!0});var pt=s(W);m(Me.$$.fragment,pt),ts=d(pt),na=o(pt,"P",{});var Fn=s(na);as=l(Fn,`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),Fn.forEach(a),rs=d(pt),la=o(pt,"P",{});var Vn=s(la);os=l(Vn,`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),Vn.forEach(a),pt.forEach(a),Fa=d(t),Y=o(t,"H2",{class:!0});var nr=s(Y);ve=o(nr,"A",{id:!0,class:!0,href:!0});var Un=s(ve);ca=o(Un,"SPAN",{});var Hn=s(ca);m(je.$$.fragment,Hn),Hn.forEach(a),Un.forEach(a),ss=d(nr),ia=o(nr,"SPAN",{});var Rn=s(ia);ns=l(Rn,"Distributed Config"),Rn.forEach(a),nr.forEach(a),Va=d(t),Z=o(t,"H3",{class:!0});var lr=s(Z);_e=o(lr,"A",{id:!0,class:!0,href:!0});var Mn=s(_e);da=o(Mn,"SPAN",{});var jn=s(da);m(Xe.$$.fragment,jn),jn.forEach(a),Mn.forEach(a),ls=d(lr),ha=o(lr,"SPAN",{});var Xn=s(ha);cs=l(Xn,"AcceleratorState"),Xn.forEach(a),lr.forEach(a),Ua=d(t),ee=o(t,"DIV",{class:!0});var cr=s(ee);m(Je.$$.fragment,cr),is=d(cr),te=o(cr,"P",{});var ut=s(te);ds=l(ut,"This is a variation of a "),Ke=o(ut,"A",{href:!0,rel:!0});var Jn=s(Ke);hs=l(Jn,"singleton class"),Jn.forEach(a),ps=l(ut,` in the sense that all
instance of `),pa=o(ut,"CODE",{});var Kn=s(pa);us=l(Kn,"AcceleratorState"),Kn.forEach(a),fs=l(ut," share the same state, which is initialized on the first instantiation."),ut.forEach(a),cr.forEach(a),Ha=d(t),ae=o(t,"H2",{class:!0});var ir=s(ae);be=o(ir,"A",{id:!0,class:!0,href:!0});var Qn=s(be);ua=o(Qn,"SPAN",{});var Yn=s(ua);m(Qe.$$.fragment,Yn),Yn.forEach(a),Qn.forEach(a),ms=d(ir),fa=o(ir,"SPAN",{});var Zn=s(fa);gs=l(Zn,"Tracking"),Zn.forEach(a),ir.forEach(a),Ra=d(t),E=o(t,"DIV",{class:!0});var I=s(E);m(Ye.$$.fragment,I),vs=d(I),ma=o(I,"P",{});var el=s(ma);_s=l(el,"A base Tracker class to be used for all logging integration implementations."),el.forEach(a),bs=d(I),$e=o(I,"P",{});var Da=s($e);$s=l(Da,"Each function should take in "),ga=o(Da,"CODE",{});var tl=s(ga);ws=l(tl,"**kwargs"),tl.forEach(a),ys=l(Da,` that will automatically be passed in from a base dictionary provided to
`),nt=o(Da,"A",{href:!0});var al=s(nt);Es=l(al,"Accelerator"),al.forEach(a),Da.forEach(a),Ss=d(I),we=o(I,"DIV",{class:!0});var dr=s(we);m(Ze.$$.fragment,dr),Ds=d(dr),va=o(dr,"P",{});var rl=s(va);xs=l(rl,`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),rl.forEach(a),dr.forEach(a),As=d(I),ye=o(I,"DIV",{class:!0});var hr=s(ye);m(et.$$.fragment,hr),Ts=d(hr),re=o(hr,"P",{});var ft=s(re);ks=l(ft,"Logs "),_a=o(ft,"CODE",{});var ol=s(_a);zs=l(ol,"values"),ol.forEach(a),Ps=l(ft," to the current run. Base "),ba=o(ft,"CODE",{});var sl=s(ba);Is=l(sl,"log"),sl.forEach(a),Ls=l(ft," implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),ft.forEach(a),hr.forEach(a),Os=d(I),Ee=o(I,"DIV",{class:!0});var pr=s(Ee);m(tt.$$.fragment,pr),Ns=d(pr),at=o(pr,"P",{});var ur=s(at);Cs=l(ur,"Logs "),$a=o(ur,"CODE",{});var nl=s($a);Gs=l(nl,"values"),nl.forEach(a),Ws=l(ur,` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),ur.forEach(a),pr.forEach(a),I.forEach(a),this.h()},h(){c(u,"name","hf:doc:metadata"),c(u,"content",JSON.stringify(gl)),c(S,"id","internals"),c(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S,"href","#internals"),c($,"class","relative group"),c(oe,"id","accelerate.state.GradientState"),c(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oe,"href","#accelerate.state.GradientState"),c(F,"class","relative group"),c(ze,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(ze,"rel","nofollow"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(le,"id","accelerate.optimizer.AcceleratedOptimizer"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#accelerate.optimizer.AcceleratedOptimizer"),c(U,"class","relative group"),c(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ce,"id","accelerate.data_loader.prepare_data_loader"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#accelerate.data_loader.prepare_data_loader"),c(R,"class","relative group"),c(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(he,"id","accelerate.data_loader.DataLoaderShard"),c(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(he,"href","#accelerate.data_loader.DataLoaderShard"),c(j,"class","relative group"),c(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ue,"id","accelerate.data_loader.BatchSamplerShard"),c(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ue,"href","#accelerate.data_loader.BatchSamplerShard"),c(X,"class","relative group"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(me,"id","accelerate.data_loader.IterableDatasetShard"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#accelerate.data_loader.IterableDatasetShard"),c(J,"class","relative group"),c(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ge,"id","accelerate.scheduler.AcceleratedScheduler"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#accelerate.scheduler.AcceleratedScheduler"),c(Q,"class","relative group"),c(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ve,"id","distributed-config"),c(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ve,"href","#distributed-config"),c(Y,"class","relative group"),c(_e,"id","accelerate.state.AcceleratorState"),c(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_e,"href","#accelerate.state.AcceleratorState"),c(Z,"class","relative group"),c(Ke,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(Ke,"rel","nofollow"),c(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(be,"id","accelerate.tracking.GeneralTracker"),c(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(be,"href","#accelerate.tracking.GeneralTracker"),c(ae,"class","relative group"),c(nt,"href","/docs/accelerate/pr_546/en/accelerator#accelerate.Accelerator"),c(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,u),p(t,z,h),p(t,$,h),e($,S),e(S,x),g(w,x,null),e($,y),e($,O),e(O,fr),p(t,xa,h),p(t,F,h),e(F,oe),e(oe,mt),g(Te,mt,null),e(F,mr),e(F,gt),e(gt,gr),p(t,Aa,h),p(t,A,h),g(ke,A,null),e(A,vr),e(A,V),e(V,_r),e(V,ze),e(ze,br),e(V,$r),e(V,vt),e(vt,wr),e(V,yr),e(A,Er),e(A,_t),e(_t,Sr),e(A,Dr),e(A,Pe),e(Pe,se),e(se,bt),e(bt,xr),e(se,Ar),e(se,$t),e($t,Tr),e(se,kr),e(Pe,zr),e(Pe,ne),e(ne,wt),e(wt,Pr),e(ne,Ir),e(ne,yt),e(yt,Lr),e(ne,Or),p(t,Ta,h),p(t,U,h),e(U,le),e(le,Et),g(Ie,Et,null),e(U,Nr),e(U,St),e(St,Cr),p(t,ka,h),p(t,N,h),g(Le,N,null),e(N,Gr),e(N,Dt),e(Dt,Wr),e(N,Br),e(N,H),e(H,qr),e(H,xt),e(xt,Fr),e(H,Vr),e(H,At),e(At,Ur),e(H,Hr),p(t,za,h),p(t,R,h),e(R,ce),e(ce,Tt),g(Oe,Tt,null),e(R,Rr),e(R,kt),e(kt,Mr),p(t,Pa,h),p(t,ie,h),e(ie,jr),e(ie,zt),e(zt,Xr),e(ie,Jr),p(t,Ia,h),p(t,T,h),g(Ne,T,null),e(T,Kr),e(T,Ce),e(Ce,Qr),e(Ce,Pt),e(Pt,Yr),e(Ce,Zr),e(T,eo),e(T,M),e(M,to),e(M,It),e(It,ao),e(M,ro),e(M,Lt),e(Lt,oo),e(M,so),e(T,no),g(de,T,null),p(t,La,h),p(t,j,h),e(j,he),e(he,Ot),g(Ge,Ot,null),e(j,lo),e(j,Nt),e(Nt,co),p(t,Oa,h),p(t,k,h),g(We,k,null),e(k,io),e(k,Be),e(Be,ho),e(Be,Ct),e(Ct,po),e(Be,uo),e(k,fo),e(k,Gt),e(Gt,Wt),e(Wt,mo),e(k,go),e(k,qe),e(qe,Bt),e(Bt,q),e(q,qt),e(qt,vo),e(q,_o),e(q,Ft),e(Ft,bo),e(q,$o),e(q,Vt),e(Vt,wo),e(q,yo),e(qe,Eo),e(qe,Ut),e(Ut,pe),e(pe,Ht),e(Ht,So),e(pe,Do),e(pe,Rt),e(Rt,xo),e(pe,Ao),p(t,Na,h),p(t,X,h),e(X,ue),e(ue,Mt),g(Fe,Mt,null),e(X,To),e(X,jt),e(jt,ko),p(t,Ca,h),p(t,C,h),g(Ve,C,null),e(C,zo),e(C,G),e(G,Po),e(G,Xt),e(Xt,Io),e(G,Lo),e(G,Jt),e(Jt,Oo),e(G,No),e(G,Kt),e(Kt,Co),e(G,Go),e(C,Wo),g(fe,C,null),p(t,Ga,h),p(t,J,h),e(J,me),e(me,Qt),g(Ue,Qt,null),e(J,Bo),e(J,Yt),e(Yt,qo),p(t,Wa,h),p(t,K,h),g(He,K,null),e(K,Fo),e(K,D),e(D,Vo),e(D,Zt),e(Zt,Uo),e(D,Ho),e(D,ea),e(ea,Ro),e(D,Mo),e(D,ta),e(ta,jo),e(D,Xo),e(D,aa),e(aa,Jo),e(D,Ko),e(D,ra),e(ra,Qo),e(D,Yo),p(t,Ba,h),p(t,Q,h),e(Q,ge),e(ge,oa),g(Re,oa,null),e(Q,Zo),e(Q,sa),e(sa,es),p(t,qa,h),p(t,W,h),g(Me,W,null),e(W,ts),e(W,na),e(na,as),e(W,rs),e(W,la),e(la,os),p(t,Fa,h),p(t,Y,h),e(Y,ve),e(ve,ca),g(je,ca,null),e(Y,ss),e(Y,ia),e(ia,ns),p(t,Va,h),p(t,Z,h),e(Z,_e),e(_e,da),g(Xe,da,null),e(Z,ls),e(Z,ha),e(ha,cs),p(t,Ua,h),p(t,ee,h),g(Je,ee,null),e(ee,is),e(ee,te),e(te,ds),e(te,Ke),e(Ke,hs),e(te,ps),e(te,pa),e(pa,us),e(te,fs),p(t,Ha,h),p(t,ae,h),e(ae,be),e(be,ua),g(Qe,ua,null),e(ae,ms),e(ae,fa),e(fa,gs),p(t,Ra,h),p(t,E,h),g(Ye,E,null),e(E,vs),e(E,ma),e(ma,_s),e(E,bs),e(E,$e),e($e,$s),e($e,ga),e(ga,ws),e($e,ys),e($e,nt),e(nt,Es),e(E,Ss),e(E,we),g(Ze,we,null),e(we,Ds),e(we,va),e(va,xs),e(E,As),e(E,ye),g(et,ye,null),e(ye,Ts),e(ye,re),e(re,ks),e(re,_a),e(_a,zs),e(re,Ps),e(re,ba),e(ba,Is),e(re,Ls),e(E,Os),e(E,Ee),g(tt,Ee,null),e(Ee,Ns),e(Ee,at),e(at,Cs),e(at,$a),e($a,Gs),e(at,Ws),Ma=!0},p(t,[h]){const rt={};h&2&&(rt.$$scope={dirty:h,ctx:t}),de.$set(rt);const wa={};h&2&&(wa.$$scope={dirty:h,ctx:t}),fe.$set(wa)},i(t){Ma||(v(w.$$.fragment,t),v(Te.$$.fragment,t),v(ke.$$.fragment,t),v(Ie.$$.fragment,t),v(Le.$$.fragment,t),v(Oe.$$.fragment,t),v(Ne.$$.fragment,t),v(de.$$.fragment,t),v(Ge.$$.fragment,t),v(We.$$.fragment,t),v(Fe.$$.fragment,t),v(Ve.$$.fragment,t),v(fe.$$.fragment,t),v(Ue.$$.fragment,t),v(He.$$.fragment,t),v(Re.$$.fragment,t),v(Me.$$.fragment,t),v(je.$$.fragment,t),v(Xe.$$.fragment,t),v(Je.$$.fragment,t),v(Qe.$$.fragment,t),v(Ye.$$.fragment,t),v(Ze.$$.fragment,t),v(et.$$.fragment,t),v(tt.$$.fragment,t),Ma=!0)},o(t){_(w.$$.fragment,t),_(Te.$$.fragment,t),_(ke.$$.fragment,t),_(Ie.$$.fragment,t),_(Le.$$.fragment,t),_(Oe.$$.fragment,t),_(Ne.$$.fragment,t),_(de.$$.fragment,t),_(Ge.$$.fragment,t),_(We.$$.fragment,t),_(Fe.$$.fragment,t),_(Ve.$$.fragment,t),_(fe.$$.fragment,t),_(Ue.$$.fragment,t),_(He.$$.fragment,t),_(Re.$$.fragment,t),_(Me.$$.fragment,t),_(je.$$.fragment,t),_(Xe.$$.fragment,t),_(Je.$$.fragment,t),_(Qe.$$.fragment,t),_(Ye.$$.fragment,t),_(Ze.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),Ma=!1},d(t){a(u),t&&a(z),t&&a($),b(w),t&&a(xa),t&&a(F),b(Te),t&&a(Aa),t&&a(A),b(ke),t&&a(Ta),t&&a(U),b(Ie),t&&a(ka),t&&a(N),b(Le),t&&a(za),t&&a(R),b(Oe),t&&a(Pa),t&&a(ie),t&&a(Ia),t&&a(T),b(Ne),b(de),t&&a(La),t&&a(j),b(Ge),t&&a(Oa),t&&a(k),b(We),t&&a(Na),t&&a(X),b(Fe),t&&a(Ca),t&&a(C),b(Ve),b(fe),t&&a(Ga),t&&a(J),b(Ue),t&&a(Wa),t&&a(K),b(He),t&&a(Ba),t&&a(Q),b(Re),t&&a(qa),t&&a(W),b(Me),t&&a(Fa),t&&a(Y),b(je),t&&a(Va),t&&a(Z),b(Xe),t&&a(Ua),t&&a(ee),b(Je),t&&a(Ha),t&&a(ae),b(Qe),t&&a(Ra),t&&a(E),b(Ye),b(Ze),b(et),b(tt)}}}const gl={local:"internals",sections:[{local:"accelerate.state.GradientState",title:"Gradient Accumulation states"},{local:"accelerate.optimizer.AcceleratedOptimizer",title:"Optimizer"},{local:"accelerate.data_loader.prepare_data_loader",sections:[{local:"accelerate.data_loader.DataLoaderShard",title:"DataLoaderShard"},{local:"accelerate.data_loader.BatchSamplerShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.IterableDatasetShard",title:"IterableDatasetShard"}],title:"DataLoader"},{local:"accelerate.scheduler.AcceleratedScheduler",title:"Scheduler"},{local:"distributed-config",sections:[{local:"accelerate.state.AcceleratorState",title:"AcceleratorState"}],title:"Distributed Config"},{local:"accelerate.tracking.GeneralTracker",title:"Tracking"}],title:"Internals"};function vl(st){return pl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class yl extends cl{constructor(u){super();il(this,u,vl,ml,dl,{})}}export{yl as default,gl as metadata};
