import{S as $d,i as yd,s as Ed,e as o,k as s,w as m,t as r,M as wd,c,d as t,m as i,a as n,x as u,h as a,b as h,G as e,g as x,y as g,q as f,o as _,B as v,v as Ad}from"../chunks/vendor-hf-doc-builder.js";import{T as bd}from"../chunks/Tip-hf-doc-builder.js";import{D as $}from"../chunks/Docstring-hf-doc-builder.js";import{C as xd}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as Dd}from"../chunks/IconCopyLink-hf-doc-builder.js";function kd(Ut){let b,C,E,k,I;return{c(){b=o("p"),C=r("Using this with "),E=o("code"),k=r("dispatch_batches=True"),I=r("  (which is the default for iterable datasets) is currently not supported.")},l(w){b=c(w,"P",{});var T=n(b);C=a(T,"Using this with "),E=c(T,"CODE",{});var U=n(E);k=a(U,"dispatch_batches=True"),U.forEach(t),I=a(T,"  (which is the default for iterable datasets) is currently not supported."),T.forEach(t)},m(w,T){x(w,b,T),e(b,C),e(b,E),e(E,k),e(b,I)},d(w){w&&t(b)}}}function Td(Ut){let b,C,E,k,I,w,T,U,K,oe,z;return{c(){b=o("p"),C=r("Every "),E=o("code"),k=r("object"),I=r(" must have a "),w=o("code"),T=r("load_state_dict"),U=r(" and "),K=o("code"),oe=r("state_dict"),z=r(" function to be stored.")},l(B){b=c(B,"P",{});var D=n(b);C=a(D,"Every "),E=c(D,"CODE",{});var zt=n(E);k=a(zt,"object"),zt.forEach(t),I=a(D," must have a "),w=c(D,"CODE",{});var jt=n(w);T=a(jt,"load_state_dict"),jt.forEach(t),U=a(D," and "),K=c(D,"CODE",{});var Se=n(K);oe=a(Se,"state_dict"),Se.forEach(t),z=a(D," function to be stored."),D.forEach(t)},m(B,D){x(B,b,D),e(b,C),e(b,E),e(E,k),e(b,I),e(b,w),e(w,T),e(b,U),e(b,K),e(K,oe),e(b,z)},d(B){B&&t(b)}}}function Pd(Ut){let b,C,E,k,I,w,T,U,K,oe,z,B,D,zt,jt,Se,P,X,yo,Nt,Eo,wo,dr,Ao,xo,Do,qe,ko,St,To,Po,Lo,S,Io,pr,Oo,Co,hr,Uo,zo,mr,jo,No,So,J,qo,ur,Vo,Go,gr,Ro,Mo,Wo,Ve,Fo,qt,Ho,Yo,Aa,ce,Ko,fr,Bo,Xo,xa,A,ne,_r,Jo,Qo,Vt,Zo,ec,tc,Ge,rc,vr,ac,oc,cc,Re,nc,br,lc,sc,ic,Me,dc,Gt,pc,hc,mc,We,uc,Rt,gc,fc,_c,Q,vc,Mt,bc,$c,$r,yc,Ec,wc,O,Ac,le,xc,yr,Dc,kc,Tc,Er,Pc,Lc,se,Ic,wr,Oc,Cc,Uc,Ar,zc,jc,Da,V,Nc,Wt,Sc,qc,xr,Vc,Gc,ka,Fe,Ta,ie,Pa,d,He,Rc,Dr,Mc,Wc,kr,Fc,Hc,Ye,de,Tr,Yc,Kc,Pr,Bc,Xc,Jc,pe,Lr,Qc,Zc,Ft,en,tn,rn,he,Ke,an,Ir,on,cn,me,Be,nn,Or,ln,sn,ue,Xe,dn,Z,pn,Cr,hn,mn,Ur,un,gn,fn,ge,Je,_n,Qe,vn,zr,bn,$n,yn,fe,Ze,En,et,wn,jr,An,xn,Dn,_e,tt,kn,rt,Tn,Nr,Pn,Ln,In,ve,at,On,Sr,Cn,Un,be,ot,zn,qr,jn,Nn,G,ct,Sn,nt,qn,Vr,Vn,Gn,Rn,Gr,Mn,Wn,$e,lt,Fn,st,Hn,Rr,Yn,Kn,Bn,ye,it,Xn,dt,Jn,Mr,Qn,Zn,el,Ee,pt,tl,Wr,rl,al,R,ht,ol,Fr,cl,nl,Hr,ll,sl,we,mt,il,ee,dl,Yr,pl,hl,Kr,ml,ul,gl,M,ut,fl,Br,_l,vl,Xr,bl,$l,W,gt,yl,ft,El,Jr,wl,Al,xl,_t,Dl,Qr,kl,Tl,Pl,Ae,vt,Ll,Zr,Il,Ol,xe,bt,Cl,ea,Ul,zl,De,$t,jl,ta,Nl,Sl,j,yt,ql,Et,Vl,ra,Gl,Rl,Ml,aa,Wl,Fl,te,Ht,oa,Hl,Yl,Kl,Yt,ca,Bl,Xl,Jl,Kt,na,Ql,Zl,es,ke,wt,ts,At,rs,la,as,os,cs,F,xt,ns,re,ls,sa,ss,is,ia,ds,ps,hs,da,ms,us,N,Dt,gs,q,fs,pa,_s,vs,ha,bs,$s,ma,ys,Es,ws,ua,As,xs,Te,Ds,Pe,kt,ks,Tt,Ts,ga,Ps,Ls,Is,Le,Pt,Os,fa,Cs,Us,Ie,Lt,zs,_a,js,Ns,Oe,It,Ss,ae,qs,va,Vs,Gs,Bt,Rs,Ms,Ws,Ce,Ot,Fs,ba,Hs,La;return w=new Dd({}),Fe=new xd({props:{code:`accelerator = Accelerator(gradient_accumulation_steps=2)

for (input, label) in enumerate(training_dataloader):
    with accelerator.accumulate(model):
        predictions = model(input)
        loss = loss_function(predictions, labels)
        accelerator.backward(loss)
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`,highlighted:`accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)

<span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, label) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(training_dataloader):
    <span class="hljs-keyword">with</span> accelerator.accumulate(model):
        predictions = model(<span class="hljs-built_in">input</span>)
        loss = loss_function(predictions, labels)
        accelerator.backward(loss)
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`}}),ie=new bd({props:{warning:!0,$$slots:{default:[kd]},$$scope:{ctx:Ut}}}),He=new $({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/pr_488/en/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/pr_488/en/internal#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L79"}}),Ke=new $({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L443"}}),Be=new $({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1200"}}),Xe=new $({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L827"}}),Je=new $({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1117"}}),Ze=new $({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L859"}}),tt=new $({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L876"}}),at=new $({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1039"}}),ot=new $({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1105"}}),ct=new $({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L885",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),lt=new $({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""},{name:"dataloader",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.gather_for_metrics.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.DataLoader</code>) &#x2014;
A dataloader prepared with <code>Accelerator.prepare</code>`,name:"dataloader"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L903"}}),it=new $({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like this:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L985"}}),pt=new $({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1078"}}),ht=new $({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L402"}}),mt=new $({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like this:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1019"}}),ut=new $({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L393"}}),gt=new $({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L411"}}),vt=new $({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L372"}}),bt=new $({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L360"}}),$t=new $({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L950"}}),yt=new $({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L526"}}),wt=new $({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L461"}}),xt=new $({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L932",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Dt=new $({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1176"}}),Te=new bd({props:{$$slots:{default:[Td]},$$scope:{ctx:Ut}}}),kt=new $({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1047"}}),Pt=new $({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1058"}}),Lt=new $({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L839"}}),It=new $({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L967"}}),Ot=new $({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L978"}}),{c(){b=o("meta"),C=s(),E=o("h1"),k=o("a"),I=o("span"),m(w.$$.fragment),T=s(),U=o("span"),K=r("Accelerator"),oe=s(),z=o("p"),B=r("The "),D=o("a"),zt=r("Accelerator"),jt=r(` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),Se=s(),P=o("ol"),X=o("li"),yo=r("Initialize an "),Nt=o("a"),Eo=r("Accelerator"),wo=r(" object (that we will call "),dr=o("code"),Ao=r("accelerator"),xo=r(` in the rest of this
page) as early as possible in your script.`),Do=s(),qe=o("li"),ko=r("Pass along your model(s), optimizer(s), dataloader(s) to the "),St=o("a"),To=r("prepare()"),Po=r(" method."),Lo=s(),S=o("li"),Io=r("(Optional but best practice) Remove all the "),pr=o("code"),Oo=r(".cuda()"),Co=r(" or "),hr=o("code"),Uo=r(".to(device)"),zo=r(` in your code and let the
`),mr=o("code"),jo=r("accelerator"),No=r(" handle device placement for you."),So=s(),J=o("li"),qo=r("Replace the "),ur=o("code"),Vo=r("loss.backward()"),Go=r(" in your code by "),gr=o("code"),Ro=r("accelerator.backward(loss)"),Mo=r("."),Wo=s(),Ve=o("li"),Fo=r(`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),qt=o("a"),Ho=r("gather()"),Yo=r("."),Aa=s(),ce=o("p"),Ko=r(`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),fr=o("code"),Bo=r("accelerator"),Xo=r(":"),xa=s(),A=o("ul"),ne=o("li"),_r=o("code"),Jo=r("print"),Qo=r(" statements should be replaced by "),Vt=o("a"),Zo=r("print()"),ec=r(` to be only printed once per
process.`),tc=s(),Ge=o("li"),rc=r("Use "),vr=o("code"),ac=r("is_local_main_process"),oc=r(" for statements that should be executed once per server."),cc=s(),Re=o("li"),nc=r("Use "),br=o("code"),lc=r("is_main_process"),sc=r(" for statements that should be executed once only."),ic=s(),Me=o("li"),dc=r("Use "),Gt=o("a"),pc=r("wait_for_everyone()"),hc=r(` to make sure all processes join that point before continuing
(useful before a model save for instance).`),mc=s(),We=o("li"),uc=r("Use "),Rt=o("a"),gc=r("unwrap_model()"),fc=r(" to unwrap your model before saving it."),_c=s(),Q=o("li"),vc=r("Use "),Mt=o("a"),bc=r("save()"),$c=r(" instead of "),$r=o("code"),yc=r("torch.save"),Ec=r("."),wc=s(),O=o("li"),Ac=r("Use "),le=o("a"),xc=r("clip"),yr=o("em"),Dc=r("grad_norm"),kc=r("()"),Tc=r(" instead of "),Er=o("code"),Pc=r("torch.nn.utils.clip_grad_norm_"),Lc=r(` and
`),se=o("a"),Ic=r("clip"),wr=o("em"),Oc=r("grad_value"),Cc=r("()"),Uc=r(" instead of "),Ar=o("code"),zc=r("torch.nn.utils.clip_grad_value_"),jc=r("."),Da=s(),V=o("p"),Nc=r("To perform gradient accumulation use "),Wt=o("a"),Sc=r("accumulate()"),qc=r(" and specify a "),xr=o("code"),Vc=r("gradient_accumulation_steps"),Gc=r(`.
This will also automatically ensure the gradients are synced or unsynced when on multi-device training, check if the step should
actually be performed, and auto-scale the loss:`),ka=s(),m(Fe.$$.fragment),Ta=s(),m(ie.$$.fragment),Pa=s(),d=o("div"),m(He.$$.fragment),Rc=s(),Dr=o("p"),Mc=r("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Wc=s(),kr=o("p"),Fc=r("Attributes"),Hc=s(),Ye=o("ul"),de=o("li"),Tr=o("strong"),Yc=r("device"),Kc=r(" ("),Pr=o("code"),Bc=r("torch.device"),Xc=r(") \u2014 The device to use."),Jc=s(),pe=o("li"),Lr=o("strong"),Qc=r("state"),Zc=r(" ("),Ft=o("a"),en=r("AcceleratorState"),tn=r(") \u2014 The distributed setup state."),rn=s(),he=o("div"),m(Ke.$$.fragment),an=s(),Ir=o("p"),on=r("A context manager that will lightly wrap around and perform gradient accumulation automatically"),cn=s(),me=o("div"),m(Be.$$.fragment),nn=s(),Or=o("p"),ln=r(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),sn=s(),ue=o("div"),m(Xe.$$.fragment),dn=s(),Z=o("p"),pn=r("Use "),Cr=o("code"),hn=r("accelerator.backward(loss)"),mn=r(" in lieu of "),Ur=o("code"),un=r("loss.backward()"),gn=r("."),fn=s(),ge=o("div"),m(Je.$$.fragment),_n=s(),Qe=o("p"),vn=r("Alias for "),zr=o("code"),bn=r("Accelerate.free_memory"),$n=r(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),yn=s(),fe=o("div"),m(Ze.$$.fragment),En=s(),et=o("p"),wn=r("Should be used in place of "),jr=o("code"),An=r("torch.nn.utils.clip_grad_norm_"),xn=r("."),Dn=s(),_e=o("div"),m(tt.$$.fragment),kn=s(),rt=o("p"),Tn=r("Should be used in place of "),Nr=o("code"),Pn=r("torch.nn.utils.clip_grad_value_"),Ln=r("."),In=s(),ve=o("div"),m(at.$$.fragment),On=s(),Sr=o("p"),Cn=r("Runs any special end training behaviors, such as stopping trackers"),Un=s(),be=o("div"),m(ot.$$.fragment),zn=s(),qr=o("p"),jn=r(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Nn=s(),G=o("div"),m(ct.$$.fragment),Sn=s(),nt=o("p"),qn=r("Gather the values in "),Vr=o("em"),Vn=r("tensor"),Gn=r(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Rn=s(),Gr=o("p"),Mn=r(`Note:
This gather happens in all processes.`),Wn=s(),$e=o("div"),m(lt.$$.fragment),Fn=s(),st=o("p"),Hn=r("Gathers "),Rr=o("code"),Yn=r("tensor"),Kn=r(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),Bn=s(),ye=o("div"),m(it.$$.fragment),Xn=s(),dt=o("p"),Jn=r("Initializes a run for all trackers stored in "),Mr=o("code"),Qn=r("self.log_with"),Zn=r(", potentially with starting configurations"),el=s(),Ee=o("div"),m(pt.$$.fragment),tl=s(),Wr=o("p"),rl=r("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),al=s(),R=o("div"),m(ht.$$.fragment),ol=s(),Fr=o("p"),cl=r("Lets the local main process go inside a with block."),nl=s(),Hr=o("p"),ll=r("The other processes will enter the with block after the main process exits."),sl=s(),we=o("div"),m(mt.$$.fragment),il=s(),ee=o("p"),dl=r("Logs "),Yr=o("code"),pl=r("values"),hl=r(" to all stored trackers in "),Kr=o("code"),ml=r("self.trackers"),ul=r("."),gl=s(),M=o("div"),m(ut.$$.fragment),fl=s(),Br=o("p"),_l=r("Lets the main process go first inside a with block."),vl=s(),Xr=o("p"),bl=r("The other processes will enter the with block after the main process exits."),$l=s(),W=o("div"),m(gt.$$.fragment),yl=s(),ft=o("p"),El=r(`A context manager to disable gradient synchronizations across DDP processes by calling
`),Jr=o("code"),wl=r("torch.nn.parallel.DistributedDataParallel.no_sync"),Al=r("."),xl=s(),_t=o("p"),Dl=r("If "),Qr=o("code"),kl=r("model"),Tl=r(" is not in DDP, this context manager does nothing"),Pl=s(),Ae=o("div"),m(vt.$$.fragment),Ll=s(),Zr=o("p"),Il=r("Run func on local main process only"),Ol=s(),xe=o("div"),m(bt.$$.fragment),Cl=s(),ea=o("p"),Ul=r("Run func on main process only"),zl=s(),De=o("div"),m($t.$$.fragment),jl=s(),ta=o("p"),Nl=r(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Sl=s(),j=o("div"),m(yt.$$.fragment),ql=s(),Et=o("p"),Vl=r("Prepare all objects passed in "),ra=o("code"),Gl=r("args"),Rl=r(` for distributed training and mixed precision, then return them in the same
order.`),Ml=s(),aa=o("p"),Wl=r("Accepts the following type of objects:"),Fl=s(),te=o("ul"),Ht=o("li"),oa=o("code"),Hl=r("torch.utils.data.DataLoader"),Yl=r(": PyTorch Dataloader"),Kl=s(),Yt=o("li"),ca=o("code"),Bl=r("torch.nn.Module"),Xl=r(": PyTorch Module"),Jl=s(),Kt=o("li"),na=o("code"),Ql=r("torch.optim.Optimizer"),Zl=r(": PyTorch Optimizer"),es=s(),ke=o("div"),m(wt.$$.fragment),ts=s(),At=o("p"),rs=r("Use in replacement of "),la=o("code"),as=r("print()"),os=r(" to only print once per server."),cs=s(),F=o("div"),m(xt.$$.fragment),ns=s(),re=o("p"),ls=r("Reduce the values in "),sa=o("em"),ss=r("tensor"),is=r(" across all processes based on "),ia=o("em"),ds=r("reduction"),ps=r("."),hs=s(),da=o("p"),ms=r(`Note:
All processes get the reduced value.`),us=s(),N=o("div"),m(Dt.$$.fragment),gs=s(),q=o("p"),fs=r("Makes note of "),pa=o("code"),_s=r("objects"),vs=r(" and will save or load them in during "),ha=o("code"),bs=r("save_state"),$s=r(" or "),ma=o("code"),ys=r("load_state"),Es=r("."),ws=s(),ua=o("p"),As=r(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),xs=s(),m(Te.$$.fragment),Ds=s(),Pe=o("div"),m(kt.$$.fragment),ks=s(),Tt=o("p"),Ts=r("Save the object passed to disk once per machine. Use in place of "),ga=o("code"),Ps=r("torch.save"),Ls=r("."),Is=s(),Le=o("div"),m(Pt.$$.fragment),Os=s(),fa=o("p"),Cs=r("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Us=s(),Ie=o("div"),m(Lt.$$.fragment),zs=s(),_a=o("p"),js=r("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Ns=s(),Oe=o("div"),m(It.$$.fragment),Ss=s(),ae=o("p"),qs=r("Unwraps the "),va=o("code"),Vs=r("model"),Gs=r(" from the additional layer possible added by "),Bt=o("a"),Rs=r("prepare()"),Ms=r(`. Useful before saving
the model.`),Ws=s(),Ce=o("div"),m(Ot.$$.fragment),Fs=s(),ba=o("p"),Hs=r(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(l){const y=wd('[data-svelte="svelte-1phssyn"]',document.head);b=c(y,"META",{name:!0,content:!0}),y.forEach(t),C=i(l),E=c(l,"H1",{class:!0});var Ct=n(E);k=c(Ct,"A",{id:!0,class:!0,href:!0});var $a=n(k);I=c($a,"SPAN",{});var Xs=n(I);u(w.$$.fragment,Xs),Xs.forEach(t),$a.forEach(t),T=i(Ct),U=c(Ct,"SPAN",{});var Js=n(U);K=a(Js,"Accelerator"),Js.forEach(t),Ct.forEach(t),oe=i(l),z=c(l,"P",{});var Ia=n(z);B=a(Ia,"The "),D=c(Ia,"A",{href:!0});var Qs=n(D);zt=a(Qs,"Accelerator"),Qs.forEach(t),jt=a(Ia,` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),Ia.forEach(t),Se=i(l),P=c(l,"OL",{});var H=n(P);X=c(H,"LI",{});var Xt=n(X);yo=a(Xt,"Initialize an "),Nt=c(Xt,"A",{href:!0});var Zs=n(Nt);Eo=a(Zs,"Accelerator"),Zs.forEach(t),wo=a(Xt," object (that we will call "),dr=c(Xt,"CODE",{});var ei=n(dr);Ao=a(ei,"accelerator"),ei.forEach(t),xo=a(Xt,` in the rest of this
page) as early as possible in your script.`),Xt.forEach(t),Do=i(H),qe=c(H,"LI",{});var Oa=n(qe);ko=a(Oa,"Pass along your model(s), optimizer(s), dataloader(s) to the "),St=c(Oa,"A",{href:!0});var ti=n(St);To=a(ti,"prepare()"),ti.forEach(t),Po=a(Oa," method."),Oa.forEach(t),Lo=i(H),S=c(H,"LI",{});var Ue=n(S);Io=a(Ue,"(Optional but best practice) Remove all the "),pr=c(Ue,"CODE",{});var ri=n(pr);Oo=a(ri,".cuda()"),ri.forEach(t),Co=a(Ue," or "),hr=c(Ue,"CODE",{});var ai=n(hr);Uo=a(ai,".to(device)"),ai.forEach(t),zo=a(Ue,` in your code and let the
`),mr=c(Ue,"CODE",{});var oi=n(mr);jo=a(oi,"accelerator"),oi.forEach(t),No=a(Ue," handle device placement for you."),Ue.forEach(t),So=i(H),J=c(H,"LI",{});var Jt=n(J);qo=a(Jt,"Replace the "),ur=c(Jt,"CODE",{});var ci=n(ur);Vo=a(ci,"loss.backward()"),ci.forEach(t),Go=a(Jt," in your code by "),gr=c(Jt,"CODE",{});var ni=n(gr);Ro=a(ni,"accelerator.backward(loss)"),ni.forEach(t),Mo=a(Jt,"."),Jt.forEach(t),Wo=i(H),Ve=c(H,"LI",{});var Ca=n(Ve);Fo=a(Ca,`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),qt=c(Ca,"A",{href:!0});var li=n(qt);Ho=a(li,"gather()"),li.forEach(t),Yo=a(Ca,"."),Ca.forEach(t),H.forEach(t),Aa=i(l),ce=c(l,"P",{});var Ua=n(ce);Ko=a(Ua,`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),fr=c(Ua,"CODE",{});var si=n(fr);Bo=a(si,"accelerator"),si.forEach(t),Xo=a(Ua,":"),Ua.forEach(t),xa=i(l),A=c(l,"UL",{});var L=n(A);ne=c(L,"LI",{});var ya=n(ne);_r=c(ya,"CODE",{});var ii=n(_r);Jo=a(ii,"print"),ii.forEach(t),Qo=a(ya," statements should be replaced by "),Vt=c(ya,"A",{href:!0});var di=n(Vt);Zo=a(di,"print()"),di.forEach(t),ec=a(ya,` to be only printed once per
process.`),ya.forEach(t),tc=i(L),Ge=c(L,"LI",{});var za=n(Ge);rc=a(za,"Use "),vr=c(za,"CODE",{});var pi=n(vr);ac=a(pi,"is_local_main_process"),pi.forEach(t),oc=a(za," for statements that should be executed once per server."),za.forEach(t),cc=i(L),Re=c(L,"LI",{});var ja=n(Re);nc=a(ja,"Use "),br=c(ja,"CODE",{});var hi=n(br);lc=a(hi,"is_main_process"),hi.forEach(t),sc=a(ja," for statements that should be executed once only."),ja.forEach(t),ic=i(L),Me=c(L,"LI",{});var Na=n(Me);dc=a(Na,"Use "),Gt=c(Na,"A",{href:!0});var mi=n(Gt);pc=a(mi,"wait_for_everyone()"),mi.forEach(t),hc=a(Na,` to make sure all processes join that point before continuing
(useful before a model save for instance).`),Na.forEach(t),mc=i(L),We=c(L,"LI",{});var Sa=n(We);uc=a(Sa,"Use "),Rt=c(Sa,"A",{href:!0});var ui=n(Rt);gc=a(ui,"unwrap_model()"),ui.forEach(t),fc=a(Sa," to unwrap your model before saving it."),Sa.forEach(t),_c=i(L),Q=c(L,"LI",{});var Qt=n(Q);vc=a(Qt,"Use "),Mt=c(Qt,"A",{href:!0});var gi=n(Mt);bc=a(gi,"save()"),gi.forEach(t),$c=a(Qt," instead of "),$r=c(Qt,"CODE",{});var fi=n($r);yc=a(fi,"torch.save"),fi.forEach(t),Ec=a(Qt,"."),Qt.forEach(t),wc=i(L),O=c(L,"LI",{});var Y=n(O);Ac=a(Y,"Use "),le=c(Y,"A",{href:!0});var qa=n(le);xc=a(qa,"clip"),yr=c(qa,"EM",{});var _i=n(yr);Dc=a(_i,"grad_norm"),_i.forEach(t),kc=a(qa,"()"),qa.forEach(t),Tc=a(Y," instead of "),Er=c(Y,"CODE",{});var vi=n(Er);Pc=a(vi,"torch.nn.utils.clip_grad_norm_"),vi.forEach(t),Lc=a(Y,` and
`),se=c(Y,"A",{href:!0});var Va=n(se);Ic=a(Va,"clip"),wr=c(Va,"EM",{});var bi=n(wr);Oc=a(bi,"grad_value"),bi.forEach(t),Cc=a(Va,"()"),Va.forEach(t),Uc=a(Y," instead of "),Ar=c(Y,"CODE",{});var $i=n(Ar);zc=a($i,"torch.nn.utils.clip_grad_value_"),$i.forEach(t),jc=a(Y,"."),Y.forEach(t),L.forEach(t),Da=i(l),V=c(l,"P",{});var Zt=n(V);Nc=a(Zt,"To perform gradient accumulation use "),Wt=c(Zt,"A",{href:!0});var yi=n(Wt);Sc=a(yi,"accumulate()"),yi.forEach(t),qc=a(Zt," and specify a "),xr=c(Zt,"CODE",{});var Ei=n(xr);Vc=a(Ei,"gradient_accumulation_steps"),Ei.forEach(t),Gc=a(Zt,`.
This will also automatically ensure the gradients are synced or unsynced when on multi-device training, check if the step should
actually be performed, and auto-scale the loss:`),Zt.forEach(t),ka=i(l),u(Fe.$$.fragment,l),Ta=i(l),u(ie.$$.fragment,l),Pa=i(l),d=c(l,"DIV",{class:!0});var p=n(d);u(He.$$.fragment,p),Rc=i(p),Dr=c(p,"P",{});var wi=n(Dr);Mc=a(wi,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),wi.forEach(t),Wc=i(p),kr=c(p,"P",{});var Ai=n(kr);Fc=a(Ai,"Attributes"),Ai.forEach(t),Hc=i(p),Ye=c(p,"UL",{});var Ga=n(Ye);de=c(Ga,"LI",{});var Ea=n(de);Tr=c(Ea,"STRONG",{});var xi=n(Tr);Yc=a(xi,"device"),xi.forEach(t),Kc=a(Ea," ("),Pr=c(Ea,"CODE",{});var Di=n(Pr);Bc=a(Di,"torch.device"),Di.forEach(t),Xc=a(Ea,") \u2014 The device to use."),Ea.forEach(t),Jc=i(Ga),pe=c(Ga,"LI",{});var wa=n(pe);Lr=c(wa,"STRONG",{});var ki=n(Lr);Qc=a(ki,"state"),ki.forEach(t),Zc=a(wa," ("),Ft=c(wa,"A",{href:!0});var Ti=n(Ft);en=a(Ti,"AcceleratorState"),Ti.forEach(t),tn=a(wa,") \u2014 The distributed setup state."),wa.forEach(t),Ga.forEach(t),rn=i(p),he=c(p,"DIV",{class:!0});var Ra=n(he);u(Ke.$$.fragment,Ra),an=i(Ra),Ir=c(Ra,"P",{});var Pi=n(Ir);on=a(Pi,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),Pi.forEach(t),Ra.forEach(t),cn=i(p),me=c(p,"DIV",{class:!0});var Ma=n(me);u(Be.$$.fragment,Ma),nn=i(Ma),Or=c(Ma,"P",{});var Li=n(Or);ln=a(Li,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Li.forEach(t),Ma.forEach(t),sn=i(p),ue=c(p,"DIV",{class:!0});var Wa=n(ue);u(Xe.$$.fragment,Wa),dn=i(Wa),Z=c(Wa,"P",{});var er=n(Z);pn=a(er,"Use "),Cr=c(er,"CODE",{});var Ii=n(Cr);hn=a(Ii,"accelerator.backward(loss)"),Ii.forEach(t),mn=a(er," in lieu of "),Ur=c(er,"CODE",{});var Oi=n(Ur);un=a(Oi,"loss.backward()"),Oi.forEach(t),gn=a(er,"."),er.forEach(t),Wa.forEach(t),fn=i(p),ge=c(p,"DIV",{class:!0});var Fa=n(ge);u(Je.$$.fragment,Fa),_n=i(Fa),Qe=c(Fa,"P",{});var Ha=n(Qe);vn=a(Ha,"Alias for "),zr=c(Ha,"CODE",{});var Ci=n(zr);bn=a(Ci,"Accelerate.free_memory"),Ci.forEach(t),$n=a(Ha,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Ha.forEach(t),Fa.forEach(t),yn=i(p),fe=c(p,"DIV",{class:!0});var Ya=n(fe);u(Ze.$$.fragment,Ya),En=i(Ya),et=c(Ya,"P",{});var Ka=n(et);wn=a(Ka,"Should be used in place of "),jr=c(Ka,"CODE",{});var Ui=n(jr);An=a(Ui,"torch.nn.utils.clip_grad_norm_"),Ui.forEach(t),xn=a(Ka,"."),Ka.forEach(t),Ya.forEach(t),Dn=i(p),_e=c(p,"DIV",{class:!0});var Ba=n(_e);u(tt.$$.fragment,Ba),kn=i(Ba),rt=c(Ba,"P",{});var Xa=n(rt);Tn=a(Xa,"Should be used in place of "),Nr=c(Xa,"CODE",{});var zi=n(Nr);Pn=a(zi,"torch.nn.utils.clip_grad_value_"),zi.forEach(t),Ln=a(Xa,"."),Xa.forEach(t),Ba.forEach(t),In=i(p),ve=c(p,"DIV",{class:!0});var Ja=n(ve);u(at.$$.fragment,Ja),On=i(Ja),Sr=c(Ja,"P",{});var ji=n(Sr);Cn=a(ji,"Runs any special end training behaviors, such as stopping trackers"),ji.forEach(t),Ja.forEach(t),Un=i(p),be=c(p,"DIV",{class:!0});var Qa=n(be);u(ot.$$.fragment,Qa),zn=i(Qa),qr=c(Qa,"P",{});var Ni=n(qr);jn=a(Ni,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Ni.forEach(t),Qa.forEach(t),Nn=i(p),G=c(p,"DIV",{class:!0});var tr=n(G);u(ct.$$.fragment,tr),Sn=i(tr),nt=c(tr,"P",{});var Za=n(nt);qn=a(Za,"Gather the values in "),Vr=c(Za,"EM",{});var Si=n(Vr);Vn=a(Si,"tensor"),Si.forEach(t),Gn=a(Za,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Za.forEach(t),Rn=i(tr),Gr=c(tr,"P",{});var qi=n(Gr);Mn=a(qi,`Note:
This gather happens in all processes.`),qi.forEach(t),tr.forEach(t),Wn=i(p),$e=c(p,"DIV",{class:!0});var eo=n($e);u(lt.$$.fragment,eo),Fn=i(eo),st=c(eo,"P",{});var to=n(st);Hn=a(to,"Gathers "),Rr=c(to,"CODE",{});var Vi=n(Rr);Yn=a(Vi,"tensor"),Vi.forEach(t),Kn=a(to,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),to.forEach(t),eo.forEach(t),Bn=i(p),ye=c(p,"DIV",{class:!0});var ro=n(ye);u(it.$$.fragment,ro),Xn=i(ro),dt=c(ro,"P",{});var ao=n(dt);Jn=a(ao,"Initializes a run for all trackers stored in "),Mr=c(ao,"CODE",{});var Gi=n(Mr);Qn=a(Gi,"self.log_with"),Gi.forEach(t),Zn=a(ao,", potentially with starting configurations"),ao.forEach(t),ro.forEach(t),el=i(p),Ee=c(p,"DIV",{class:!0});var oo=n(Ee);u(pt.$$.fragment,oo),tl=i(oo),Wr=c(oo,"P",{});var Ri=n(Wr);rl=a(Ri,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Ri.forEach(t),oo.forEach(t),al=i(p),R=c(p,"DIV",{class:!0});var rr=n(R);u(ht.$$.fragment,rr),ol=i(rr),Fr=c(rr,"P",{});var Mi=n(Fr);cl=a(Mi,"Lets the local main process go inside a with block."),Mi.forEach(t),nl=i(rr),Hr=c(rr,"P",{});var Wi=n(Hr);ll=a(Wi,"The other processes will enter the with block after the main process exits."),Wi.forEach(t),rr.forEach(t),sl=i(p),we=c(p,"DIV",{class:!0});var co=n(we);u(mt.$$.fragment,co),il=i(co),ee=c(co,"P",{});var ar=n(ee);dl=a(ar,"Logs "),Yr=c(ar,"CODE",{});var Fi=n(Yr);pl=a(Fi,"values"),Fi.forEach(t),hl=a(ar," to all stored trackers in "),Kr=c(ar,"CODE",{});var Hi=n(Kr);ml=a(Hi,"self.trackers"),Hi.forEach(t),ul=a(ar,"."),ar.forEach(t),co.forEach(t),gl=i(p),M=c(p,"DIV",{class:!0});var or=n(M);u(ut.$$.fragment,or),fl=i(or),Br=c(or,"P",{});var Yi=n(Br);_l=a(Yi,"Lets the main process go first inside a with block."),Yi.forEach(t),vl=i(or),Xr=c(or,"P",{});var Ki=n(Xr);bl=a(Ki,"The other processes will enter the with block after the main process exits."),Ki.forEach(t),or.forEach(t),$l=i(p),W=c(p,"DIV",{class:!0});var cr=n(W);u(gt.$$.fragment,cr),yl=i(cr),ft=c(cr,"P",{});var no=n(ft);El=a(no,`A context manager to disable gradient synchronizations across DDP processes by calling
`),Jr=c(no,"CODE",{});var Bi=n(Jr);wl=a(Bi,"torch.nn.parallel.DistributedDataParallel.no_sync"),Bi.forEach(t),Al=a(no,"."),no.forEach(t),xl=i(cr),_t=c(cr,"P",{});var lo=n(_t);Dl=a(lo,"If "),Qr=c(lo,"CODE",{});var Xi=n(Qr);kl=a(Xi,"model"),Xi.forEach(t),Tl=a(lo," is not in DDP, this context manager does nothing"),lo.forEach(t),cr.forEach(t),Pl=i(p),Ae=c(p,"DIV",{class:!0});var so=n(Ae);u(vt.$$.fragment,so),Ll=i(so),Zr=c(so,"P",{});var Ji=n(Zr);Il=a(Ji,"Run func on local main process only"),Ji.forEach(t),so.forEach(t),Ol=i(p),xe=c(p,"DIV",{class:!0});var io=n(xe);u(bt.$$.fragment,io),Cl=i(io),ea=c(io,"P",{});var Qi=n(ea);Ul=a(Qi,"Run func on main process only"),Qi.forEach(t),io.forEach(t),zl=i(p),De=c(p,"DIV",{class:!0});var po=n(De);u($t.$$.fragment,po),jl=i(po),ta=c(po,"P",{});var Zi=n(ta);Nl=a(Zi,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Zi.forEach(t),po.forEach(t),Sl=i(p),j=c(p,"DIV",{class:!0});var ze=n(j);u(yt.$$.fragment,ze),ql=i(ze),Et=c(ze,"P",{});var ho=n(Et);Vl=a(ho,"Prepare all objects passed in "),ra=c(ho,"CODE",{});var ed=n(ra);Gl=a(ed,"args"),ed.forEach(t),Rl=a(ho,` for distributed training and mixed precision, then return them in the same
order.`),ho.forEach(t),Ml=i(ze),aa=c(ze,"P",{});var td=n(aa);Wl=a(td,"Accepts the following type of objects:"),td.forEach(t),Fl=i(ze),te=c(ze,"UL",{});var nr=n(te);Ht=c(nr,"LI",{});var Ys=n(Ht);oa=c(Ys,"CODE",{});var rd=n(oa);Hl=a(rd,"torch.utils.data.DataLoader"),rd.forEach(t),Yl=a(Ys,": PyTorch Dataloader"),Ys.forEach(t),Kl=i(nr),Yt=c(nr,"LI",{});var Ks=n(Yt);ca=c(Ks,"CODE",{});var ad=n(ca);Bl=a(ad,"torch.nn.Module"),ad.forEach(t),Xl=a(Ks,": PyTorch Module"),Ks.forEach(t),Jl=i(nr),Kt=c(nr,"LI",{});var Bs=n(Kt);na=c(Bs,"CODE",{});var od=n(na);Ql=a(od,"torch.optim.Optimizer"),od.forEach(t),Zl=a(Bs,": PyTorch Optimizer"),Bs.forEach(t),nr.forEach(t),ze.forEach(t),es=i(p),ke=c(p,"DIV",{class:!0});var mo=n(ke);u(wt.$$.fragment,mo),ts=i(mo),At=c(mo,"P",{});var uo=n(At);rs=a(uo,"Use in replacement of "),la=c(uo,"CODE",{});var cd=n(la);as=a(cd,"print()"),cd.forEach(t),os=a(uo," to only print once per server."),uo.forEach(t),mo.forEach(t),cs=i(p),F=c(p,"DIV",{class:!0});var lr=n(F);u(xt.$$.fragment,lr),ns=i(lr),re=c(lr,"P",{});var sr=n(re);ls=a(sr,"Reduce the values in "),sa=c(sr,"EM",{});var nd=n(sa);ss=a(nd,"tensor"),nd.forEach(t),is=a(sr," across all processes based on "),ia=c(sr,"EM",{});var ld=n(ia);ds=a(ld,"reduction"),ld.forEach(t),ps=a(sr,"."),sr.forEach(t),hs=i(lr),da=c(lr,"P",{});var sd=n(da);ms=a(sd,`Note:
All processes get the reduced value.`),sd.forEach(t),lr.forEach(t),us=i(p),N=c(p,"DIV",{class:!0});var je=n(N);u(Dt.$$.fragment,je),gs=i(je),q=c(je,"P",{});var Ne=n(q);fs=a(Ne,"Makes note of "),pa=c(Ne,"CODE",{});var id=n(pa);_s=a(id,"objects"),id.forEach(t),vs=a(Ne," and will save or load them in during "),ha=c(Ne,"CODE",{});var dd=n(ha);bs=a(dd,"save_state"),dd.forEach(t),$s=a(Ne," or "),ma=c(Ne,"CODE",{});var pd=n(ma);ys=a(pd,"load_state"),pd.forEach(t),Es=a(Ne,"."),Ne.forEach(t),ws=i(je),ua=c(je,"P",{});var hd=n(ua);As=a(hd,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),hd.forEach(t),xs=i(je),u(Te.$$.fragment,je),je.forEach(t),Ds=i(p),Pe=c(p,"DIV",{class:!0});var go=n(Pe);u(kt.$$.fragment,go),ks=i(go),Tt=c(go,"P",{});var fo=n(Tt);Ts=a(fo,"Save the object passed to disk once per machine. Use in place of "),ga=c(fo,"CODE",{});var md=n(ga);Ps=a(md,"torch.save"),md.forEach(t),Ls=a(fo,"."),fo.forEach(t),go.forEach(t),Is=i(p),Le=c(p,"DIV",{class:!0});var _o=n(Le);u(Pt.$$.fragment,_o),Os=i(_o),fa=c(_o,"P",{});var ud=n(fa);Cs=a(ud,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),ud.forEach(t),_o.forEach(t),Us=i(p),Ie=c(p,"DIV",{class:!0});var vo=n(Ie);u(Lt.$$.fragment,vo),zs=i(vo),_a=c(vo,"P",{});var gd=n(_a);js=a(gd,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),gd.forEach(t),vo.forEach(t),Ns=i(p),Oe=c(p,"DIV",{class:!0});var bo=n(Oe);u(It.$$.fragment,bo),Ss=i(bo),ae=c(bo,"P",{});var ir=n(ae);qs=a(ir,"Unwraps the "),va=c(ir,"CODE",{});var fd=n(va);Vs=a(fd,"model"),fd.forEach(t),Gs=a(ir," from the additional layer possible added by "),Bt=c(ir,"A",{href:!0});var _d=n(Bt);Rs=a(_d,"prepare()"),_d.forEach(t),Ms=a(ir,`. Useful before saving
the model.`),ir.forEach(t),bo.forEach(t),Ws=i(p),Ce=c(p,"DIV",{class:!0});var $o=n(Ce);u(Ot.$$.fragment,$o),Fs=i($o),ba=c($o,"P",{});var vd=n(ba);Hs=a(vd,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),vd.forEach(t),$o.forEach(t),p.forEach(t),this.h()},h(){h(b,"name","hf:doc:metadata"),h(b,"content",JSON.stringify(Ld)),h(k,"id","accelerate.Accelerator"),h(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(k,"href","#accelerate.Accelerator"),h(E,"class","relative group"),h(D,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator"),h(Nt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator"),h(St,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.prepare"),h(qt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.gather"),h(Vt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.print"),h(Gt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.wait_for_everyone"),h(Rt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.unwrap_model"),h(Mt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.save"),h(le,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.clip_grad_norm_"),h(se,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.clip_grad_value_"),h(Wt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.accumulate"),h(Ft,"href","/docs/accelerate/pr_488/en/internal#accelerate.state.AcceleratorState"),h(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Bt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.prepare"),h(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(l,y){e(document.head,b),x(l,C,y),x(l,E,y),e(E,k),e(k,I),g(w,I,null),e(E,T),e(E,U),e(U,K),x(l,oe,y),x(l,z,y),e(z,B),e(z,D),e(D,zt),e(z,jt),x(l,Se,y),x(l,P,y),e(P,X),e(X,yo),e(X,Nt),e(Nt,Eo),e(X,wo),e(X,dr),e(dr,Ao),e(X,xo),e(P,Do),e(P,qe),e(qe,ko),e(qe,St),e(St,To),e(qe,Po),e(P,Lo),e(P,S),e(S,Io),e(S,pr),e(pr,Oo),e(S,Co),e(S,hr),e(hr,Uo),e(S,zo),e(S,mr),e(mr,jo),e(S,No),e(P,So),e(P,J),e(J,qo),e(J,ur),e(ur,Vo),e(J,Go),e(J,gr),e(gr,Ro),e(J,Mo),e(P,Wo),e(P,Ve),e(Ve,Fo),e(Ve,qt),e(qt,Ho),e(Ve,Yo),x(l,Aa,y),x(l,ce,y),e(ce,Ko),e(ce,fr),e(fr,Bo),e(ce,Xo),x(l,xa,y),x(l,A,y),e(A,ne),e(ne,_r),e(_r,Jo),e(ne,Qo),e(ne,Vt),e(Vt,Zo),e(ne,ec),e(A,tc),e(A,Ge),e(Ge,rc),e(Ge,vr),e(vr,ac),e(Ge,oc),e(A,cc),e(A,Re),e(Re,nc),e(Re,br),e(br,lc),e(Re,sc),e(A,ic),e(A,Me),e(Me,dc),e(Me,Gt),e(Gt,pc),e(Me,hc),e(A,mc),e(A,We),e(We,uc),e(We,Rt),e(Rt,gc),e(We,fc),e(A,_c),e(A,Q),e(Q,vc),e(Q,Mt),e(Mt,bc),e(Q,$c),e(Q,$r),e($r,yc),e(Q,Ec),e(A,wc),e(A,O),e(O,Ac),e(O,le),e(le,xc),e(le,yr),e(yr,Dc),e(le,kc),e(O,Tc),e(O,Er),e(Er,Pc),e(O,Lc),e(O,se),e(se,Ic),e(se,wr),e(wr,Oc),e(se,Cc),e(O,Uc),e(O,Ar),e(Ar,zc),e(O,jc),x(l,Da,y),x(l,V,y),e(V,Nc),e(V,Wt),e(Wt,Sc),e(V,qc),e(V,xr),e(xr,Vc),e(V,Gc),x(l,ka,y),g(Fe,l,y),x(l,Ta,y),g(ie,l,y),x(l,Pa,y),x(l,d,y),g(He,d,null),e(d,Rc),e(d,Dr),e(Dr,Mc),e(d,Wc),e(d,kr),e(kr,Fc),e(d,Hc),e(d,Ye),e(Ye,de),e(de,Tr),e(Tr,Yc),e(de,Kc),e(de,Pr),e(Pr,Bc),e(de,Xc),e(Ye,Jc),e(Ye,pe),e(pe,Lr),e(Lr,Qc),e(pe,Zc),e(pe,Ft),e(Ft,en),e(pe,tn),e(d,rn),e(d,he),g(Ke,he,null),e(he,an),e(he,Ir),e(Ir,on),e(d,cn),e(d,me),g(Be,me,null),e(me,nn),e(me,Or),e(Or,ln),e(d,sn),e(d,ue),g(Xe,ue,null),e(ue,dn),e(ue,Z),e(Z,pn),e(Z,Cr),e(Cr,hn),e(Z,mn),e(Z,Ur),e(Ur,un),e(Z,gn),e(d,fn),e(d,ge),g(Je,ge,null),e(ge,_n),e(ge,Qe),e(Qe,vn),e(Qe,zr),e(zr,bn),e(Qe,$n),e(d,yn),e(d,fe),g(Ze,fe,null),e(fe,En),e(fe,et),e(et,wn),e(et,jr),e(jr,An),e(et,xn),e(d,Dn),e(d,_e),g(tt,_e,null),e(_e,kn),e(_e,rt),e(rt,Tn),e(rt,Nr),e(Nr,Pn),e(rt,Ln),e(d,In),e(d,ve),g(at,ve,null),e(ve,On),e(ve,Sr),e(Sr,Cn),e(d,Un),e(d,be),g(ot,be,null),e(be,zn),e(be,qr),e(qr,jn),e(d,Nn),e(d,G),g(ct,G,null),e(G,Sn),e(G,nt),e(nt,qn),e(nt,Vr),e(Vr,Vn),e(nt,Gn),e(G,Rn),e(G,Gr),e(Gr,Mn),e(d,Wn),e(d,$e),g(lt,$e,null),e($e,Fn),e($e,st),e(st,Hn),e(st,Rr),e(Rr,Yn),e(st,Kn),e(d,Bn),e(d,ye),g(it,ye,null),e(ye,Xn),e(ye,dt),e(dt,Jn),e(dt,Mr),e(Mr,Qn),e(dt,Zn),e(d,el),e(d,Ee),g(pt,Ee,null),e(Ee,tl),e(Ee,Wr),e(Wr,rl),e(d,al),e(d,R),g(ht,R,null),e(R,ol),e(R,Fr),e(Fr,cl),e(R,nl),e(R,Hr),e(Hr,ll),e(d,sl),e(d,we),g(mt,we,null),e(we,il),e(we,ee),e(ee,dl),e(ee,Yr),e(Yr,pl),e(ee,hl),e(ee,Kr),e(Kr,ml),e(ee,ul),e(d,gl),e(d,M),g(ut,M,null),e(M,fl),e(M,Br),e(Br,_l),e(M,vl),e(M,Xr),e(Xr,bl),e(d,$l),e(d,W),g(gt,W,null),e(W,yl),e(W,ft),e(ft,El),e(ft,Jr),e(Jr,wl),e(ft,Al),e(W,xl),e(W,_t),e(_t,Dl),e(_t,Qr),e(Qr,kl),e(_t,Tl),e(d,Pl),e(d,Ae),g(vt,Ae,null),e(Ae,Ll),e(Ae,Zr),e(Zr,Il),e(d,Ol),e(d,xe),g(bt,xe,null),e(xe,Cl),e(xe,ea),e(ea,Ul),e(d,zl),e(d,De),g($t,De,null),e(De,jl),e(De,ta),e(ta,Nl),e(d,Sl),e(d,j),g(yt,j,null),e(j,ql),e(j,Et),e(Et,Vl),e(Et,ra),e(ra,Gl),e(Et,Rl),e(j,Ml),e(j,aa),e(aa,Wl),e(j,Fl),e(j,te),e(te,Ht),e(Ht,oa),e(oa,Hl),e(Ht,Yl),e(te,Kl),e(te,Yt),e(Yt,ca),e(ca,Bl),e(Yt,Xl),e(te,Jl),e(te,Kt),e(Kt,na),e(na,Ql),e(Kt,Zl),e(d,es),e(d,ke),g(wt,ke,null),e(ke,ts),e(ke,At),e(At,rs),e(At,la),e(la,as),e(At,os),e(d,cs),e(d,F),g(xt,F,null),e(F,ns),e(F,re),e(re,ls),e(re,sa),e(sa,ss),e(re,is),e(re,ia),e(ia,ds),e(re,ps),e(F,hs),e(F,da),e(da,ms),e(d,us),e(d,N),g(Dt,N,null),e(N,gs),e(N,q),e(q,fs),e(q,pa),e(pa,_s),e(q,vs),e(q,ha),e(ha,bs),e(q,$s),e(q,ma),e(ma,ys),e(q,Es),e(N,ws),e(N,ua),e(ua,As),e(N,xs),g(Te,N,null),e(d,Ds),e(d,Pe),g(kt,Pe,null),e(Pe,ks),e(Pe,Tt),e(Tt,Ts),e(Tt,ga),e(ga,Ps),e(Tt,Ls),e(d,Is),e(d,Le),g(Pt,Le,null),e(Le,Os),e(Le,fa),e(fa,Cs),e(d,Us),e(d,Ie),g(Lt,Ie,null),e(Ie,zs),e(Ie,_a),e(_a,js),e(d,Ns),e(d,Oe),g(It,Oe,null),e(Oe,Ss),e(Oe,ae),e(ae,qs),e(ae,va),e(va,Vs),e(ae,Gs),e(ae,Bt),e(Bt,Rs),e(ae,Ms),e(d,Ws),e(d,Ce),g(Ot,Ce,null),e(Ce,Fs),e(Ce,ba),e(ba,Hs),La=!0},p(l,[y]){const Ct={};y&2&&(Ct.$$scope={dirty:y,ctx:l}),ie.$set(Ct);const $a={};y&2&&($a.$$scope={dirty:y,ctx:l}),Te.$set($a)},i(l){La||(f(w.$$.fragment,l),f(Fe.$$.fragment,l),f(ie.$$.fragment,l),f(He.$$.fragment,l),f(Ke.$$.fragment,l),f(Be.$$.fragment,l),f(Xe.$$.fragment,l),f(Je.$$.fragment,l),f(Ze.$$.fragment,l),f(tt.$$.fragment,l),f(at.$$.fragment,l),f(ot.$$.fragment,l),f(ct.$$.fragment,l),f(lt.$$.fragment,l),f(it.$$.fragment,l),f(pt.$$.fragment,l),f(ht.$$.fragment,l),f(mt.$$.fragment,l),f(ut.$$.fragment,l),f(gt.$$.fragment,l),f(vt.$$.fragment,l),f(bt.$$.fragment,l),f($t.$$.fragment,l),f(yt.$$.fragment,l),f(wt.$$.fragment,l),f(xt.$$.fragment,l),f(Dt.$$.fragment,l),f(Te.$$.fragment,l),f(kt.$$.fragment,l),f(Pt.$$.fragment,l),f(Lt.$$.fragment,l),f(It.$$.fragment,l),f(Ot.$$.fragment,l),La=!0)},o(l){_(w.$$.fragment,l),_(Fe.$$.fragment,l),_(ie.$$.fragment,l),_(He.$$.fragment,l),_(Ke.$$.fragment,l),_(Be.$$.fragment,l),_(Xe.$$.fragment,l),_(Je.$$.fragment,l),_(Ze.$$.fragment,l),_(tt.$$.fragment,l),_(at.$$.fragment,l),_(ot.$$.fragment,l),_(ct.$$.fragment,l),_(lt.$$.fragment,l),_(it.$$.fragment,l),_(pt.$$.fragment,l),_(ht.$$.fragment,l),_(mt.$$.fragment,l),_(ut.$$.fragment,l),_(gt.$$.fragment,l),_(vt.$$.fragment,l),_(bt.$$.fragment,l),_($t.$$.fragment,l),_(yt.$$.fragment,l),_(wt.$$.fragment,l),_(xt.$$.fragment,l),_(Dt.$$.fragment,l),_(Te.$$.fragment,l),_(kt.$$.fragment,l),_(Pt.$$.fragment,l),_(Lt.$$.fragment,l),_(It.$$.fragment,l),_(Ot.$$.fragment,l),La=!1},d(l){t(b),l&&t(C),l&&t(E),v(w),l&&t(oe),l&&t(z),l&&t(Se),l&&t(P),l&&t(Aa),l&&t(ce),l&&t(xa),l&&t(A),l&&t(Da),l&&t(V),l&&t(ka),v(Fe,l),l&&t(Ta),v(ie,l),l&&t(Pa),l&&t(d),v(He),v(Ke),v(Be),v(Xe),v(Je),v(Ze),v(tt),v(at),v(ot),v(ct),v(lt),v(it),v(pt),v(ht),v(mt),v(ut),v(gt),v(vt),v(bt),v($t),v(yt),v(wt),v(xt),v(Dt),v(Te),v(kt),v(Pt),v(Lt),v(It),v(Ot)}}}const Ld={local:"accelerate.Accelerator",title:"Accelerator"};function Id(Ut){return Ad(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Nd extends $d{constructor(b){super();yd(this,b,Id,Pd,Ed,{})}}export{Nd as default,Ld as metadata};
