import{S as Td,i as Pd,s as Ld,e as o,k as s,w as m,t as r,M as Id,c,d as t,m as i,a as n,x as u,h as a,b as h,G as e,g as x,y as g,q as f,o as _,B as v,v as Od}from"../chunks/vendor-hf-doc-builder.js";import{T as kd}from"../chunks/Tip-hf-doc-builder.js";import{D as $}from"../chunks/Docstring-hf-doc-builder.js";import{C as Cd}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as Ud}from"../chunks/IconCopyLink-hf-doc-builder.js";function zd(jt){let b,C,E,k,I;return{c(){b=o("p"),C=r("Using this with "),E=o("code"),k=r("dispatch_batches=True"),I=r("  (which is the default for iterable datasets) is currently not supported.")},l(w){b=c(w,"P",{});var T=n(b);C=a(T,"Using this with "),E=c(T,"CODE",{});var U=n(E);k=a(U,"dispatch_batches=True"),U.forEach(t),I=a(T,"  (which is the default for iterable datasets) is currently not supported."),T.forEach(t)},m(w,T){x(w,b,T),e(b,C),e(b,E),e(E,k),e(b,I)},d(w){w&&t(b)}}}function jd(jt){let b,C,E,k,I,w,T,U,K,oe,z;return{c(){b=o("p"),C=r("Every "),E=o("code"),k=r("object"),I=r(" must have a "),w=o("code"),T=r("load_state_dict"),U=r(" and "),K=o("code"),oe=r("state_dict"),z=r(" function to be stored.")},l(B){b=c(B,"P",{});var D=n(b);C=a(D,"Every "),E=c(D,"CODE",{});var Nt=n(E);k=a(Nt,"object"),Nt.forEach(t),I=a(D," must have a "),w=c(D,"CODE",{});var St=n(w);T=a(St,"load_state_dict"),St.forEach(t),U=a(D," and "),K=c(D,"CODE",{});var Ve=n(K);oe=a(Ve,"state_dict"),Ve.forEach(t),z=a(D," function to be stored."),D.forEach(t)},m(B,D){x(B,b,D),e(b,C),e(b,E),e(E,k),e(b,I),e(b,w),e(w,T),e(b,U),e(b,K),e(K,oe),e(b,z)},d(B){B&&t(b)}}}function Nd(jt){let b,C,E,k,I,w,T,U,K,oe,z,B,D,Nt,St,Ve,P,X,xo,Vt,Do,ko,hr,To,Po,Lo,qe,Io,qt,Oo,Co,Uo,S,zo,mr,jo,No,ur,So,Vo,gr,qo,Ro,Go,J,Mo,fr,Wo,Fo,_r,Ho,Yo,Ko,Re,Bo,Rt,Xo,Jo,ka,ce,Qo,vr,Zo,ec,Ta,A,ne,br,tc,rc,Gt,ac,oc,cc,Ge,nc,$r,lc,sc,ic,Me,dc,yr,pc,hc,mc,We,uc,Mt,gc,fc,_c,Fe,vc,Wt,bc,$c,yc,Q,Ec,Ft,wc,Ac,Er,xc,Dc,kc,O,Tc,le,Pc,wr,Lc,Ic,Oc,Ar,Cc,Uc,se,zc,xr,jc,Nc,Sc,Dr,Vc,qc,Pa,q,Rc,Ht,Gc,Mc,kr,Wc,Fc,La,He,Ia,ie,Oa,d,Ye,Hc,Tr,Yc,Kc,Pr,Bc,Xc,Ke,de,Lr,Jc,Qc,Ir,Zc,en,tn,pe,Or,rn,an,Yt,on,cn,nn,he,Be,ln,Cr,sn,dn,me,Xe,pn,Ur,hn,mn,ue,Je,un,Z,gn,zr,fn,_n,jr,vn,bn,$n,ge,Qe,yn,Ze,En,Nr,wn,An,xn,fe,et,Dn,tt,kn,Sr,Tn,Pn,Ln,_e,rt,In,at,On,Vr,Cn,Un,zn,ve,ot,jn,qr,Nn,Sn,be,ct,Vn,Rr,qn,Rn,R,nt,Gn,lt,Mn,Gr,Wn,Fn,Hn,Mr,Yn,Kn,$e,st,Bn,it,Xn,Wr,Jn,Qn,Zn,ye,dt,el,pt,tl,Fr,rl,al,ol,Ee,ht,cl,Hr,nl,ll,G,mt,sl,Yr,il,dl,Kr,pl,hl,we,ut,ml,ee,ul,Br,gl,fl,Xr,_l,vl,bl,M,gt,$l,Jr,yl,El,Qr,wl,Al,W,ft,xl,_t,Dl,Zr,kl,Tl,Pl,vt,Ll,ea,Il,Ol,Cl,Ae,bt,Ul,ta,zl,jl,xe,$t,Nl,ra,Sl,Vl,De,yt,ql,aa,Rl,Gl,ke,Et,Ml,oa,Wl,Fl,j,wt,Hl,At,Yl,ca,Kl,Bl,Xl,na,Jl,Ql,te,Kt,la,Zl,es,ts,Bt,sa,rs,as,os,Xt,ia,cs,ns,ls,Te,xt,ss,Dt,is,da,ds,ps,hs,F,kt,ms,re,us,pa,gs,fs,ha,_s,vs,bs,ma,$s,ys,N,Tt,Es,V,ws,ua,As,xs,ga,Ds,ks,fa,Ts,Ps,Ls,_a,Is,Os,Pe,Cs,Le,Pt,Us,Lt,zs,va,js,Ns,Ss,Ie,It,Vs,ba,qs,Rs,Oe,Ot,Gs,$a,Ms,Ws,Ce,Ct,Fs,ae,Hs,ya,Ys,Ks,Jt,Bs,Xs,Js,Ue,Ut,Qs,Ea,Zs,Ca;return w=new Ud({}),He=new Cd({props:{code:`accelerator = Accelerator(gradient_accumulation_steps=2)

for (input, label) in enumerate(training_dataloader):
    with accelerator.accumulate(model):
        predictions = model(input)
        loss = loss_function(predictions, labels)
        accelerator.backward(loss)
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`,highlighted:`accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)

<span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, label) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(training_dataloader):
    <span class="hljs-keyword">with</span> accelerator.accumulate(model):
        predictions = model(<span class="hljs-built_in">input</span>)
        loss = loss_function(predictions, labels)
        accelerator.backward(loss)
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`}}),ie=new kd({props:{warning:!0,$$slots:{default:[zd]},$$scope:{ctx:jt}}}),Ye=new $({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/pr_488/en/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/pr_488/en/internal#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L79"}}),Be=new $({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L473"}}),Xe=new $({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1230"}}),Je=new $({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L857"}}),Qe=new $({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1147"}}),et=new $({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L889"}}),rt=new $({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L906"}}),ot=new $({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1069"}}),ct=new $({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1135"}}),nt=new $({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L915",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),st=new $({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""},{name:"dataloader",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.gather_for_metrics.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.DataLoader</code>) &#x2014;
A dataloader prepared with <code>Accelerator.prepare</code>`,name:"dataloader"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L933"}}),dt=new $({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like this:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1015"}}),ht=new $({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1108"}}),mt=new $({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L432"}}),ut=new $({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like this:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1049"}}),gt=new $({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L423"}}),ft=new $({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L441"}}),bt=new $({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L372"}}),$t=new $({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L360"}}),yt=new $({props:{name:"on_process",anchor:"accelerate.Accelerator.on_process",parameters:[{name:"local_process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L399"}}),Et=new $({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L980"}}),wt=new $({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L556"}}),xt=new $({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L491"}}),kt=new $({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L962",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Tt=new $({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1206"}}),Pe=new kd({props:{$$slots:{default:[jd]},$$scope:{ctx:jt}}}),Pt=new $({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1077"}}),It=new $({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1088"}}),Ot=new $({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L869"}}),Ct=new $({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L997"}}),Ut=new $({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_488/src/accelerate/accelerator.py#L1008"}}),{c(){b=o("meta"),C=s(),E=o("h1"),k=o("a"),I=o("span"),m(w.$$.fragment),T=s(),U=o("span"),K=r("Accelerator"),oe=s(),z=o("p"),B=r("The "),D=o("a"),Nt=r("Accelerator"),St=r(` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),Ve=s(),P=o("ol"),X=o("li"),xo=r("Initialize an "),Vt=o("a"),Do=r("Accelerator"),ko=r(" object (that we will call "),hr=o("code"),To=r("accelerator"),Po=r(` in the rest of this
page) as early as possible in your script.`),Lo=s(),qe=o("li"),Io=r("Pass along your model(s), optimizer(s), dataloader(s) to the "),qt=o("a"),Oo=r("prepare()"),Co=r(" method."),Uo=s(),S=o("li"),zo=r("(Optional but best practice) Remove all the "),mr=o("code"),jo=r(".cuda()"),No=r(" or "),ur=o("code"),So=r(".to(device)"),Vo=r(` in your code and let the
`),gr=o("code"),qo=r("accelerator"),Ro=r(" handle device placement for you."),Go=s(),J=o("li"),Mo=r("Replace the "),fr=o("code"),Wo=r("loss.backward()"),Fo=r(" in your code by "),_r=o("code"),Ho=r("accelerator.backward(loss)"),Yo=r("."),Ko=s(),Re=o("li"),Bo=r(`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),Rt=o("a"),Xo=r("gather()"),Jo=r("."),ka=s(),ce=o("p"),Qo=r(`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),vr=o("code"),Zo=r("accelerator"),ec=r(":"),Ta=s(),A=o("ul"),ne=o("li"),br=o("code"),tc=r("print"),rc=r(" statements should be replaced by "),Gt=o("a"),ac=r("print()"),oc=r(` to be only printed once per
process.`),cc=s(),Ge=o("li"),nc=r("Use "),$r=o("code"),lc=r("is_local_main_process"),sc=r(" for statements that should be executed once per server."),ic=s(),Me=o("li"),dc=r("Use "),yr=o("code"),pc=r("is_main_process"),hc=r(" for statements that should be executed once only."),mc=s(),We=o("li"),uc=r("Use "),Mt=o("a"),gc=r("wait_for_everyone()"),fc=r(` to make sure all processes join that point before continuing
(useful before a model save for instance).`),_c=s(),Fe=o("li"),vc=r("Use "),Wt=o("a"),bc=r("unwrap_model()"),$c=r(" to unwrap your model before saving it."),yc=s(),Q=o("li"),Ec=r("Use "),Ft=o("a"),wc=r("save()"),Ac=r(" instead of "),Er=o("code"),xc=r("torch.save"),Dc=r("."),kc=s(),O=o("li"),Tc=r("Use "),le=o("a"),Pc=r("clip"),wr=o("em"),Lc=r("grad_norm"),Ic=r("()"),Oc=r(" instead of "),Ar=o("code"),Cc=r("torch.nn.utils.clip_grad_norm_"),Uc=r(` and
`),se=o("a"),zc=r("clip"),xr=o("em"),jc=r("grad_value"),Nc=r("()"),Sc=r(" instead of "),Dr=o("code"),Vc=r("torch.nn.utils.clip_grad_value_"),qc=r("."),Pa=s(),q=o("p"),Rc=r("To perform gradient accumulation use "),Ht=o("a"),Gc=r("accumulate()"),Mc=r(" and specify a "),kr=o("code"),Wc=r("gradient_accumulation_steps"),Fc=r(`.
This will also automatically ensure the gradients are synced or unsynced when on multi-device training, check if the step should
actually be performed, and auto-scale the loss:`),La=s(),m(He.$$.fragment),Ia=s(),m(ie.$$.fragment),Oa=s(),d=o("div"),m(Ye.$$.fragment),Hc=s(),Tr=o("p"),Yc=r("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Kc=s(),Pr=o("p"),Bc=r("Attributes"),Xc=s(),Ke=o("ul"),de=o("li"),Lr=o("strong"),Jc=r("device"),Qc=r(" ("),Ir=o("code"),Zc=r("torch.device"),en=r(") \u2014 The device to use."),tn=s(),pe=o("li"),Or=o("strong"),rn=r("state"),an=r(" ("),Yt=o("a"),on=r("AcceleratorState"),cn=r(") \u2014 The distributed setup state."),nn=s(),he=o("div"),m(Be.$$.fragment),ln=s(),Cr=o("p"),sn=r("A context manager that will lightly wrap around and perform gradient accumulation automatically"),dn=s(),me=o("div"),m(Xe.$$.fragment),pn=s(),Ur=o("p"),hn=r(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),mn=s(),ue=o("div"),m(Je.$$.fragment),un=s(),Z=o("p"),gn=r("Use "),zr=o("code"),fn=r("accelerator.backward(loss)"),_n=r(" in lieu of "),jr=o("code"),vn=r("loss.backward()"),bn=r("."),$n=s(),ge=o("div"),m(Qe.$$.fragment),yn=s(),Ze=o("p"),En=r("Alias for "),Nr=o("code"),wn=r("Accelerate.free_memory"),An=r(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),xn=s(),fe=o("div"),m(et.$$.fragment),Dn=s(),tt=o("p"),kn=r("Should be used in place of "),Sr=o("code"),Tn=r("torch.nn.utils.clip_grad_norm_"),Pn=r("."),Ln=s(),_e=o("div"),m(rt.$$.fragment),In=s(),at=o("p"),On=r("Should be used in place of "),Vr=o("code"),Cn=r("torch.nn.utils.clip_grad_value_"),Un=r("."),zn=s(),ve=o("div"),m(ot.$$.fragment),jn=s(),qr=o("p"),Nn=r("Runs any special end training behaviors, such as stopping trackers"),Sn=s(),be=o("div"),m(ct.$$.fragment),Vn=s(),Rr=o("p"),qn=r(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Rn=s(),R=o("div"),m(nt.$$.fragment),Gn=s(),lt=o("p"),Mn=r("Gather the values in "),Gr=o("em"),Wn=r("tensor"),Fn=r(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Hn=s(),Mr=o("p"),Yn=r(`Note:
This gather happens in all processes.`),Kn=s(),$e=o("div"),m(st.$$.fragment),Bn=s(),it=o("p"),Xn=r("Gathers "),Wr=o("code"),Jn=r("tensor"),Qn=r(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),Zn=s(),ye=o("div"),m(dt.$$.fragment),el=s(),pt=o("p"),tl=r("Initializes a run for all trackers stored in "),Fr=o("code"),rl=r("self.log_with"),al=r(", potentially with starting configurations"),ol=s(),Ee=o("div"),m(ht.$$.fragment),cl=s(),Hr=o("p"),nl=r("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),ll=s(),G=o("div"),m(mt.$$.fragment),sl=s(),Yr=o("p"),il=r("Lets the local main process go inside a with block."),dl=s(),Kr=o("p"),pl=r("The other processes will enter the with block after the main process exits."),hl=s(),we=o("div"),m(ut.$$.fragment),ml=s(),ee=o("p"),ul=r("Logs "),Br=o("code"),gl=r("values"),fl=r(" to all stored trackers in "),Xr=o("code"),_l=r("self.trackers"),vl=r("."),bl=s(),M=o("div"),m(gt.$$.fragment),$l=s(),Jr=o("p"),yl=r("Lets the main process go first inside a with block."),El=s(),Qr=o("p"),wl=r("The other processes will enter the with block after the main process exits."),Al=s(),W=o("div"),m(ft.$$.fragment),xl=s(),_t=o("p"),Dl=r(`A context manager to disable gradient synchronizations across DDP processes by calling
`),Zr=o("code"),kl=r("torch.nn.parallel.DistributedDataParallel.no_sync"),Tl=r("."),Pl=s(),vt=o("p"),Ll=r("If "),ea=o("code"),Il=r("model"),Ol=r(" is not in DDP, this context manager does nothing"),Cl=s(),Ae=o("div"),m(bt.$$.fragment),Ul=s(),ta=o("p"),zl=r("Run func on local main process only"),jl=s(),xe=o("div"),m($t.$$.fragment),Nl=s(),ra=o("p"),Sl=r("Run func on main process only"),Vl=s(),De=o("div"),m(yt.$$.fragment),ql=s(),aa=o("p"),Rl=r("Run func on certain local process only"),Gl=s(),ke=o("div"),m(Et.$$.fragment),Ml=s(),oa=o("p"),Wl=r(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Fl=s(),j=o("div"),m(wt.$$.fragment),Hl=s(),At=o("p"),Yl=r("Prepare all objects passed in "),ca=o("code"),Kl=r("args"),Bl=r(` for distributed training and mixed precision, then return them in the same
order.`),Xl=s(),na=o("p"),Jl=r("Accepts the following type of objects:"),Ql=s(),te=o("ul"),Kt=o("li"),la=o("code"),Zl=r("torch.utils.data.DataLoader"),es=r(": PyTorch Dataloader"),ts=s(),Bt=o("li"),sa=o("code"),rs=r("torch.nn.Module"),as=r(": PyTorch Module"),os=s(),Xt=o("li"),ia=o("code"),cs=r("torch.optim.Optimizer"),ns=r(": PyTorch Optimizer"),ls=s(),Te=o("div"),m(xt.$$.fragment),ss=s(),Dt=o("p"),is=r("Use in replacement of "),da=o("code"),ds=r("print()"),ps=r(" to only print once per server."),hs=s(),F=o("div"),m(kt.$$.fragment),ms=s(),re=o("p"),us=r("Reduce the values in "),pa=o("em"),gs=r("tensor"),fs=r(" across all processes based on "),ha=o("em"),_s=r("reduction"),vs=r("."),bs=s(),ma=o("p"),$s=r(`Note:
All processes get the reduced value.`),ys=s(),N=o("div"),m(Tt.$$.fragment),Es=s(),V=o("p"),ws=r("Makes note of "),ua=o("code"),As=r("objects"),xs=r(" and will save or load them in during "),ga=o("code"),Ds=r("save_state"),ks=r(" or "),fa=o("code"),Ts=r("load_state"),Ps=r("."),Ls=s(),_a=o("p"),Is=r(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Os=s(),m(Pe.$$.fragment),Cs=s(),Le=o("div"),m(Pt.$$.fragment),Us=s(),Lt=o("p"),zs=r("Save the object passed to disk once per machine. Use in place of "),va=o("code"),js=r("torch.save"),Ns=r("."),Ss=s(),Ie=o("div"),m(It.$$.fragment),Vs=s(),ba=o("p"),qs=r("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Rs=s(),Oe=o("div"),m(Ot.$$.fragment),Gs=s(),$a=o("p"),Ms=r("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Ws=s(),Ce=o("div"),m(Ct.$$.fragment),Fs=s(),ae=o("p"),Hs=r("Unwraps the "),ya=o("code"),Ys=r("model"),Ks=r(" from the additional layer possible added by "),Jt=o("a"),Bs=r("prepare()"),Xs=r(`. Useful before saving
the model.`),Js=s(),Ue=o("div"),m(Ut.$$.fragment),Qs=s(),Ea=o("p"),Zs=r(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(l){const y=Id('[data-svelte="svelte-1phssyn"]',document.head);b=c(y,"META",{name:!0,content:!0}),y.forEach(t),C=i(l),E=c(l,"H1",{class:!0});var zt=n(E);k=c(zt,"A",{id:!0,class:!0,href:!0});var wa=n(k);I=c(wa,"SPAN",{});var ai=n(I);u(w.$$.fragment,ai),ai.forEach(t),wa.forEach(t),T=i(zt),U=c(zt,"SPAN",{});var oi=n(U);K=a(oi,"Accelerator"),oi.forEach(t),zt.forEach(t),oe=i(l),z=c(l,"P",{});var Ua=n(z);B=a(Ua,"The "),D=c(Ua,"A",{href:!0});var ci=n(D);Nt=a(ci,"Accelerator"),ci.forEach(t),St=a(Ua,` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),Ua.forEach(t),Ve=i(l),P=c(l,"OL",{});var H=n(P);X=c(H,"LI",{});var Qt=n(X);xo=a(Qt,"Initialize an "),Vt=c(Qt,"A",{href:!0});var ni=n(Vt);Do=a(ni,"Accelerator"),ni.forEach(t),ko=a(Qt," object (that we will call "),hr=c(Qt,"CODE",{});var li=n(hr);To=a(li,"accelerator"),li.forEach(t),Po=a(Qt,` in the rest of this
page) as early as possible in your script.`),Qt.forEach(t),Lo=i(H),qe=c(H,"LI",{});var za=n(qe);Io=a(za,"Pass along your model(s), optimizer(s), dataloader(s) to the "),qt=c(za,"A",{href:!0});var si=n(qt);Oo=a(si,"prepare()"),si.forEach(t),Co=a(za," method."),za.forEach(t),Uo=i(H),S=c(H,"LI",{});var ze=n(S);zo=a(ze,"(Optional but best practice) Remove all the "),mr=c(ze,"CODE",{});var ii=n(mr);jo=a(ii,".cuda()"),ii.forEach(t),No=a(ze," or "),ur=c(ze,"CODE",{});var di=n(ur);So=a(di,".to(device)"),di.forEach(t),Vo=a(ze,` in your code and let the
`),gr=c(ze,"CODE",{});var pi=n(gr);qo=a(pi,"accelerator"),pi.forEach(t),Ro=a(ze," handle device placement for you."),ze.forEach(t),Go=i(H),J=c(H,"LI",{});var Zt=n(J);Mo=a(Zt,"Replace the "),fr=c(Zt,"CODE",{});var hi=n(fr);Wo=a(hi,"loss.backward()"),hi.forEach(t),Fo=a(Zt," in your code by "),_r=c(Zt,"CODE",{});var mi=n(_r);Ho=a(mi,"accelerator.backward(loss)"),mi.forEach(t),Yo=a(Zt,"."),Zt.forEach(t),Ko=i(H),Re=c(H,"LI",{});var ja=n(Re);Bo=a(ja,`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),Rt=c(ja,"A",{href:!0});var ui=n(Rt);Xo=a(ui,"gather()"),ui.forEach(t),Jo=a(ja,"."),ja.forEach(t),H.forEach(t),ka=i(l),ce=c(l,"P",{});var Na=n(ce);Qo=a(Na,`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),vr=c(Na,"CODE",{});var gi=n(vr);Zo=a(gi,"accelerator"),gi.forEach(t),ec=a(Na,":"),Na.forEach(t),Ta=i(l),A=c(l,"UL",{});var L=n(A);ne=c(L,"LI",{});var Aa=n(ne);br=c(Aa,"CODE",{});var fi=n(br);tc=a(fi,"print"),fi.forEach(t),rc=a(Aa," statements should be replaced by "),Gt=c(Aa,"A",{href:!0});var _i=n(Gt);ac=a(_i,"print()"),_i.forEach(t),oc=a(Aa,` to be only printed once per
process.`),Aa.forEach(t),cc=i(L),Ge=c(L,"LI",{});var Sa=n(Ge);nc=a(Sa,"Use "),$r=c(Sa,"CODE",{});var vi=n($r);lc=a(vi,"is_local_main_process"),vi.forEach(t),sc=a(Sa," for statements that should be executed once per server."),Sa.forEach(t),ic=i(L),Me=c(L,"LI",{});var Va=n(Me);dc=a(Va,"Use "),yr=c(Va,"CODE",{});var bi=n(yr);pc=a(bi,"is_main_process"),bi.forEach(t),hc=a(Va," for statements that should be executed once only."),Va.forEach(t),mc=i(L),We=c(L,"LI",{});var qa=n(We);uc=a(qa,"Use "),Mt=c(qa,"A",{href:!0});var $i=n(Mt);gc=a($i,"wait_for_everyone()"),$i.forEach(t),fc=a(qa,` to make sure all processes join that point before continuing
(useful before a model save for instance).`),qa.forEach(t),_c=i(L),Fe=c(L,"LI",{});var Ra=n(Fe);vc=a(Ra,"Use "),Wt=c(Ra,"A",{href:!0});var yi=n(Wt);bc=a(yi,"unwrap_model()"),yi.forEach(t),$c=a(Ra," to unwrap your model before saving it."),Ra.forEach(t),yc=i(L),Q=c(L,"LI",{});var er=n(Q);Ec=a(er,"Use "),Ft=c(er,"A",{href:!0});var Ei=n(Ft);wc=a(Ei,"save()"),Ei.forEach(t),Ac=a(er," instead of "),Er=c(er,"CODE",{});var wi=n(Er);xc=a(wi,"torch.save"),wi.forEach(t),Dc=a(er,"."),er.forEach(t),kc=i(L),O=c(L,"LI",{});var Y=n(O);Tc=a(Y,"Use "),le=c(Y,"A",{href:!0});var Ga=n(le);Pc=a(Ga,"clip"),wr=c(Ga,"EM",{});var Ai=n(wr);Lc=a(Ai,"grad_norm"),Ai.forEach(t),Ic=a(Ga,"()"),Ga.forEach(t),Oc=a(Y," instead of "),Ar=c(Y,"CODE",{});var xi=n(Ar);Cc=a(xi,"torch.nn.utils.clip_grad_norm_"),xi.forEach(t),Uc=a(Y,` and
`),se=c(Y,"A",{href:!0});var Ma=n(se);zc=a(Ma,"clip"),xr=c(Ma,"EM",{});var Di=n(xr);jc=a(Di,"grad_value"),Di.forEach(t),Nc=a(Ma,"()"),Ma.forEach(t),Sc=a(Y," instead of "),Dr=c(Y,"CODE",{});var ki=n(Dr);Vc=a(ki,"torch.nn.utils.clip_grad_value_"),ki.forEach(t),qc=a(Y,"."),Y.forEach(t),L.forEach(t),Pa=i(l),q=c(l,"P",{});var tr=n(q);Rc=a(tr,"To perform gradient accumulation use "),Ht=c(tr,"A",{href:!0});var Ti=n(Ht);Gc=a(Ti,"accumulate()"),Ti.forEach(t),Mc=a(tr," and specify a "),kr=c(tr,"CODE",{});var Pi=n(kr);Wc=a(Pi,"gradient_accumulation_steps"),Pi.forEach(t),Fc=a(tr,`.
This will also automatically ensure the gradients are synced or unsynced when on multi-device training, check if the step should
actually be performed, and auto-scale the loss:`),tr.forEach(t),La=i(l),u(He.$$.fragment,l),Ia=i(l),u(ie.$$.fragment,l),Oa=i(l),d=c(l,"DIV",{class:!0});var p=n(d);u(Ye.$$.fragment,p),Hc=i(p),Tr=c(p,"P",{});var Li=n(Tr);Yc=a(Li,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Li.forEach(t),Kc=i(p),Pr=c(p,"P",{});var Ii=n(Pr);Bc=a(Ii,"Attributes"),Ii.forEach(t),Xc=i(p),Ke=c(p,"UL",{});var Wa=n(Ke);de=c(Wa,"LI",{});var xa=n(de);Lr=c(xa,"STRONG",{});var Oi=n(Lr);Jc=a(Oi,"device"),Oi.forEach(t),Qc=a(xa," ("),Ir=c(xa,"CODE",{});var Ci=n(Ir);Zc=a(Ci,"torch.device"),Ci.forEach(t),en=a(xa,") \u2014 The device to use."),xa.forEach(t),tn=i(Wa),pe=c(Wa,"LI",{});var Da=n(pe);Or=c(Da,"STRONG",{});var Ui=n(Or);rn=a(Ui,"state"),Ui.forEach(t),an=a(Da," ("),Yt=c(Da,"A",{href:!0});var zi=n(Yt);on=a(zi,"AcceleratorState"),zi.forEach(t),cn=a(Da,") \u2014 The distributed setup state."),Da.forEach(t),Wa.forEach(t),nn=i(p),he=c(p,"DIV",{class:!0});var Fa=n(he);u(Be.$$.fragment,Fa),ln=i(Fa),Cr=c(Fa,"P",{});var ji=n(Cr);sn=a(ji,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),ji.forEach(t),Fa.forEach(t),dn=i(p),me=c(p,"DIV",{class:!0});var Ha=n(me);u(Xe.$$.fragment,Ha),pn=i(Ha),Ur=c(Ha,"P",{});var Ni=n(Ur);hn=a(Ni,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Ni.forEach(t),Ha.forEach(t),mn=i(p),ue=c(p,"DIV",{class:!0});var Ya=n(ue);u(Je.$$.fragment,Ya),un=i(Ya),Z=c(Ya,"P",{});var rr=n(Z);gn=a(rr,"Use "),zr=c(rr,"CODE",{});var Si=n(zr);fn=a(Si,"accelerator.backward(loss)"),Si.forEach(t),_n=a(rr," in lieu of "),jr=c(rr,"CODE",{});var Vi=n(jr);vn=a(Vi,"loss.backward()"),Vi.forEach(t),bn=a(rr,"."),rr.forEach(t),Ya.forEach(t),$n=i(p),ge=c(p,"DIV",{class:!0});var Ka=n(ge);u(Qe.$$.fragment,Ka),yn=i(Ka),Ze=c(Ka,"P",{});var Ba=n(Ze);En=a(Ba,"Alias for "),Nr=c(Ba,"CODE",{});var qi=n(Nr);wn=a(qi,"Accelerate.free_memory"),qi.forEach(t),An=a(Ba,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Ba.forEach(t),Ka.forEach(t),xn=i(p),fe=c(p,"DIV",{class:!0});var Xa=n(fe);u(et.$$.fragment,Xa),Dn=i(Xa),tt=c(Xa,"P",{});var Ja=n(tt);kn=a(Ja,"Should be used in place of "),Sr=c(Ja,"CODE",{});var Ri=n(Sr);Tn=a(Ri,"torch.nn.utils.clip_grad_norm_"),Ri.forEach(t),Pn=a(Ja,"."),Ja.forEach(t),Xa.forEach(t),Ln=i(p),_e=c(p,"DIV",{class:!0});var Qa=n(_e);u(rt.$$.fragment,Qa),In=i(Qa),at=c(Qa,"P",{});var Za=n(at);On=a(Za,"Should be used in place of "),Vr=c(Za,"CODE",{});var Gi=n(Vr);Cn=a(Gi,"torch.nn.utils.clip_grad_value_"),Gi.forEach(t),Un=a(Za,"."),Za.forEach(t),Qa.forEach(t),zn=i(p),ve=c(p,"DIV",{class:!0});var eo=n(ve);u(ot.$$.fragment,eo),jn=i(eo),qr=c(eo,"P",{});var Mi=n(qr);Nn=a(Mi,"Runs any special end training behaviors, such as stopping trackers"),Mi.forEach(t),eo.forEach(t),Sn=i(p),be=c(p,"DIV",{class:!0});var to=n(be);u(ct.$$.fragment,to),Vn=i(to),Rr=c(to,"P",{});var Wi=n(Rr);qn=a(Wi,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Wi.forEach(t),to.forEach(t),Rn=i(p),R=c(p,"DIV",{class:!0});var ar=n(R);u(nt.$$.fragment,ar),Gn=i(ar),lt=c(ar,"P",{});var ro=n(lt);Mn=a(ro,"Gather the values in "),Gr=c(ro,"EM",{});var Fi=n(Gr);Wn=a(Fi,"tensor"),Fi.forEach(t),Fn=a(ro,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),ro.forEach(t),Hn=i(ar),Mr=c(ar,"P",{});var Hi=n(Mr);Yn=a(Hi,`Note:
This gather happens in all processes.`),Hi.forEach(t),ar.forEach(t),Kn=i(p),$e=c(p,"DIV",{class:!0});var ao=n($e);u(st.$$.fragment,ao),Bn=i(ao),it=c(ao,"P",{});var oo=n(it);Xn=a(oo,"Gathers "),Wr=c(oo,"CODE",{});var Yi=n(Wr);Jn=a(Yi,"tensor"),Yi.forEach(t),Qn=a(oo,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),oo.forEach(t),ao.forEach(t),Zn=i(p),ye=c(p,"DIV",{class:!0});var co=n(ye);u(dt.$$.fragment,co),el=i(co),pt=c(co,"P",{});var no=n(pt);tl=a(no,"Initializes a run for all trackers stored in "),Fr=c(no,"CODE",{});var Ki=n(Fr);rl=a(Ki,"self.log_with"),Ki.forEach(t),al=a(no,", potentially with starting configurations"),no.forEach(t),co.forEach(t),ol=i(p),Ee=c(p,"DIV",{class:!0});var lo=n(Ee);u(ht.$$.fragment,lo),cl=i(lo),Hr=c(lo,"P",{});var Bi=n(Hr);nl=a(Bi,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Bi.forEach(t),lo.forEach(t),ll=i(p),G=c(p,"DIV",{class:!0});var or=n(G);u(mt.$$.fragment,or),sl=i(or),Yr=c(or,"P",{});var Xi=n(Yr);il=a(Xi,"Lets the local main process go inside a with block."),Xi.forEach(t),dl=i(or),Kr=c(or,"P",{});var Ji=n(Kr);pl=a(Ji,"The other processes will enter the with block after the main process exits."),Ji.forEach(t),or.forEach(t),hl=i(p),we=c(p,"DIV",{class:!0});var so=n(we);u(ut.$$.fragment,so),ml=i(so),ee=c(so,"P",{});var cr=n(ee);ul=a(cr,"Logs "),Br=c(cr,"CODE",{});var Qi=n(Br);gl=a(Qi,"values"),Qi.forEach(t),fl=a(cr," to all stored trackers in "),Xr=c(cr,"CODE",{});var Zi=n(Xr);_l=a(Zi,"self.trackers"),Zi.forEach(t),vl=a(cr,"."),cr.forEach(t),so.forEach(t),bl=i(p),M=c(p,"DIV",{class:!0});var nr=n(M);u(gt.$$.fragment,nr),$l=i(nr),Jr=c(nr,"P",{});var ed=n(Jr);yl=a(ed,"Lets the main process go first inside a with block."),ed.forEach(t),El=i(nr),Qr=c(nr,"P",{});var td=n(Qr);wl=a(td,"The other processes will enter the with block after the main process exits."),td.forEach(t),nr.forEach(t),Al=i(p),W=c(p,"DIV",{class:!0});var lr=n(W);u(ft.$$.fragment,lr),xl=i(lr),_t=c(lr,"P",{});var io=n(_t);Dl=a(io,`A context manager to disable gradient synchronizations across DDP processes by calling
`),Zr=c(io,"CODE",{});var rd=n(Zr);kl=a(rd,"torch.nn.parallel.DistributedDataParallel.no_sync"),rd.forEach(t),Tl=a(io,"."),io.forEach(t),Pl=i(lr),vt=c(lr,"P",{});var po=n(vt);Ll=a(po,"If "),ea=c(po,"CODE",{});var ad=n(ea);Il=a(ad,"model"),ad.forEach(t),Ol=a(po," is not in DDP, this context manager does nothing"),po.forEach(t),lr.forEach(t),Cl=i(p),Ae=c(p,"DIV",{class:!0});var ho=n(Ae);u(bt.$$.fragment,ho),Ul=i(ho),ta=c(ho,"P",{});var od=n(ta);zl=a(od,"Run func on local main process only"),od.forEach(t),ho.forEach(t),jl=i(p),xe=c(p,"DIV",{class:!0});var mo=n(xe);u($t.$$.fragment,mo),Nl=i(mo),ra=c(mo,"P",{});var cd=n(ra);Sl=a(cd,"Run func on main process only"),cd.forEach(t),mo.forEach(t),Vl=i(p),De=c(p,"DIV",{class:!0});var uo=n(De);u(yt.$$.fragment,uo),ql=i(uo),aa=c(uo,"P",{});var nd=n(aa);Rl=a(nd,"Run func on certain local process only"),nd.forEach(t),uo.forEach(t),Gl=i(p),ke=c(p,"DIV",{class:!0});var go=n(ke);u(Et.$$.fragment,go),Ml=i(go),oa=c(go,"P",{});var ld=n(oa);Wl=a(ld,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),ld.forEach(t),go.forEach(t),Fl=i(p),j=c(p,"DIV",{class:!0});var je=n(j);u(wt.$$.fragment,je),Hl=i(je),At=c(je,"P",{});var fo=n(At);Yl=a(fo,"Prepare all objects passed in "),ca=c(fo,"CODE",{});var sd=n(ca);Kl=a(sd,"args"),sd.forEach(t),Bl=a(fo,` for distributed training and mixed precision, then return them in the same
order.`),fo.forEach(t),Xl=i(je),na=c(je,"P",{});var id=n(na);Jl=a(id,"Accepts the following type of objects:"),id.forEach(t),Ql=i(je),te=c(je,"UL",{});var sr=n(te);Kt=c(sr,"LI",{});var ei=n(Kt);la=c(ei,"CODE",{});var dd=n(la);Zl=a(dd,"torch.utils.data.DataLoader"),dd.forEach(t),es=a(ei,": PyTorch Dataloader"),ei.forEach(t),ts=i(sr),Bt=c(sr,"LI",{});var ti=n(Bt);sa=c(ti,"CODE",{});var pd=n(sa);rs=a(pd,"torch.nn.Module"),pd.forEach(t),as=a(ti,": PyTorch Module"),ti.forEach(t),os=i(sr),Xt=c(sr,"LI",{});var ri=n(Xt);ia=c(ri,"CODE",{});var hd=n(ia);cs=a(hd,"torch.optim.Optimizer"),hd.forEach(t),ns=a(ri,": PyTorch Optimizer"),ri.forEach(t),sr.forEach(t),je.forEach(t),ls=i(p),Te=c(p,"DIV",{class:!0});var _o=n(Te);u(xt.$$.fragment,_o),ss=i(_o),Dt=c(_o,"P",{});var vo=n(Dt);is=a(vo,"Use in replacement of "),da=c(vo,"CODE",{});var md=n(da);ds=a(md,"print()"),md.forEach(t),ps=a(vo," to only print once per server."),vo.forEach(t),_o.forEach(t),hs=i(p),F=c(p,"DIV",{class:!0});var ir=n(F);u(kt.$$.fragment,ir),ms=i(ir),re=c(ir,"P",{});var dr=n(re);us=a(dr,"Reduce the values in "),pa=c(dr,"EM",{});var ud=n(pa);gs=a(ud,"tensor"),ud.forEach(t),fs=a(dr," across all processes based on "),ha=c(dr,"EM",{});var gd=n(ha);_s=a(gd,"reduction"),gd.forEach(t),vs=a(dr,"."),dr.forEach(t),bs=i(ir),ma=c(ir,"P",{});var fd=n(ma);$s=a(fd,`Note:
All processes get the reduced value.`),fd.forEach(t),ir.forEach(t),ys=i(p),N=c(p,"DIV",{class:!0});var Ne=n(N);u(Tt.$$.fragment,Ne),Es=i(Ne),V=c(Ne,"P",{});var Se=n(V);ws=a(Se,"Makes note of "),ua=c(Se,"CODE",{});var _d=n(ua);As=a(_d,"objects"),_d.forEach(t),xs=a(Se," and will save or load them in during "),ga=c(Se,"CODE",{});var vd=n(ga);Ds=a(vd,"save_state"),vd.forEach(t),ks=a(Se," or "),fa=c(Se,"CODE",{});var bd=n(fa);Ts=a(bd,"load_state"),bd.forEach(t),Ps=a(Se,"."),Se.forEach(t),Ls=i(Ne),_a=c(Ne,"P",{});var $d=n(_a);Is=a($d,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),$d.forEach(t),Os=i(Ne),u(Pe.$$.fragment,Ne),Ne.forEach(t),Cs=i(p),Le=c(p,"DIV",{class:!0});var bo=n(Le);u(Pt.$$.fragment,bo),Us=i(bo),Lt=c(bo,"P",{});var $o=n(Lt);zs=a($o,"Save the object passed to disk once per machine. Use in place of "),va=c($o,"CODE",{});var yd=n(va);js=a(yd,"torch.save"),yd.forEach(t),Ns=a($o,"."),$o.forEach(t),bo.forEach(t),Ss=i(p),Ie=c(p,"DIV",{class:!0});var yo=n(Ie);u(It.$$.fragment,yo),Vs=i(yo),ba=c(yo,"P",{});var Ed=n(ba);qs=a(Ed,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Ed.forEach(t),yo.forEach(t),Rs=i(p),Oe=c(p,"DIV",{class:!0});var Eo=n(Oe);u(Ot.$$.fragment,Eo),Gs=i(Eo),$a=c(Eo,"P",{});var wd=n($a);Ms=a(wd,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),wd.forEach(t),Eo.forEach(t),Ws=i(p),Ce=c(p,"DIV",{class:!0});var wo=n(Ce);u(Ct.$$.fragment,wo),Fs=i(wo),ae=c(wo,"P",{});var pr=n(ae);Hs=a(pr,"Unwraps the "),ya=c(pr,"CODE",{});var Ad=n(ya);Ys=a(Ad,"model"),Ad.forEach(t),Ks=a(pr," from the additional layer possible added by "),Jt=c(pr,"A",{href:!0});var xd=n(Jt);Bs=a(xd,"prepare()"),xd.forEach(t),Xs=a(pr,`. Useful before saving
the model.`),pr.forEach(t),wo.forEach(t),Js=i(p),Ue=c(p,"DIV",{class:!0});var Ao=n(Ue);u(Ut.$$.fragment,Ao),Qs=i(Ao),Ea=c(Ao,"P",{});var Dd=n(Ea);Zs=a(Dd,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),Dd.forEach(t),Ao.forEach(t),p.forEach(t),this.h()},h(){h(b,"name","hf:doc:metadata"),h(b,"content",JSON.stringify(Sd)),h(k,"id","accelerate.Accelerator"),h(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(k,"href","#accelerate.Accelerator"),h(E,"class","relative group"),h(D,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator"),h(Vt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator"),h(qt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.prepare"),h(Rt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.gather"),h(Gt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.print"),h(Mt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.wait_for_everyone"),h(Wt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.unwrap_model"),h(Ft,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.save"),h(le,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.clip_grad_norm_"),h(se,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.clip_grad_value_"),h(Ht,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.accumulate"),h(Yt,"href","/docs/accelerate/pr_488/en/internal#accelerate.state.AcceleratorState"),h(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Jt,"href","/docs/accelerate/pr_488/en/accelerator#accelerate.Accelerator.prepare"),h(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(l,y){e(document.head,b),x(l,C,y),x(l,E,y),e(E,k),e(k,I),g(w,I,null),e(E,T),e(E,U),e(U,K),x(l,oe,y),x(l,z,y),e(z,B),e(z,D),e(D,Nt),e(z,St),x(l,Ve,y),x(l,P,y),e(P,X),e(X,xo),e(X,Vt),e(Vt,Do),e(X,ko),e(X,hr),e(hr,To),e(X,Po),e(P,Lo),e(P,qe),e(qe,Io),e(qe,qt),e(qt,Oo),e(qe,Co),e(P,Uo),e(P,S),e(S,zo),e(S,mr),e(mr,jo),e(S,No),e(S,ur),e(ur,So),e(S,Vo),e(S,gr),e(gr,qo),e(S,Ro),e(P,Go),e(P,J),e(J,Mo),e(J,fr),e(fr,Wo),e(J,Fo),e(J,_r),e(_r,Ho),e(J,Yo),e(P,Ko),e(P,Re),e(Re,Bo),e(Re,Rt),e(Rt,Xo),e(Re,Jo),x(l,ka,y),x(l,ce,y),e(ce,Qo),e(ce,vr),e(vr,Zo),e(ce,ec),x(l,Ta,y),x(l,A,y),e(A,ne),e(ne,br),e(br,tc),e(ne,rc),e(ne,Gt),e(Gt,ac),e(ne,oc),e(A,cc),e(A,Ge),e(Ge,nc),e(Ge,$r),e($r,lc),e(Ge,sc),e(A,ic),e(A,Me),e(Me,dc),e(Me,yr),e(yr,pc),e(Me,hc),e(A,mc),e(A,We),e(We,uc),e(We,Mt),e(Mt,gc),e(We,fc),e(A,_c),e(A,Fe),e(Fe,vc),e(Fe,Wt),e(Wt,bc),e(Fe,$c),e(A,yc),e(A,Q),e(Q,Ec),e(Q,Ft),e(Ft,wc),e(Q,Ac),e(Q,Er),e(Er,xc),e(Q,Dc),e(A,kc),e(A,O),e(O,Tc),e(O,le),e(le,Pc),e(le,wr),e(wr,Lc),e(le,Ic),e(O,Oc),e(O,Ar),e(Ar,Cc),e(O,Uc),e(O,se),e(se,zc),e(se,xr),e(xr,jc),e(se,Nc),e(O,Sc),e(O,Dr),e(Dr,Vc),e(O,qc),x(l,Pa,y),x(l,q,y),e(q,Rc),e(q,Ht),e(Ht,Gc),e(q,Mc),e(q,kr),e(kr,Wc),e(q,Fc),x(l,La,y),g(He,l,y),x(l,Ia,y),g(ie,l,y),x(l,Oa,y),x(l,d,y),g(Ye,d,null),e(d,Hc),e(d,Tr),e(Tr,Yc),e(d,Kc),e(d,Pr),e(Pr,Bc),e(d,Xc),e(d,Ke),e(Ke,de),e(de,Lr),e(Lr,Jc),e(de,Qc),e(de,Ir),e(Ir,Zc),e(de,en),e(Ke,tn),e(Ke,pe),e(pe,Or),e(Or,rn),e(pe,an),e(pe,Yt),e(Yt,on),e(pe,cn),e(d,nn),e(d,he),g(Be,he,null),e(he,ln),e(he,Cr),e(Cr,sn),e(d,dn),e(d,me),g(Xe,me,null),e(me,pn),e(me,Ur),e(Ur,hn),e(d,mn),e(d,ue),g(Je,ue,null),e(ue,un),e(ue,Z),e(Z,gn),e(Z,zr),e(zr,fn),e(Z,_n),e(Z,jr),e(jr,vn),e(Z,bn),e(d,$n),e(d,ge),g(Qe,ge,null),e(ge,yn),e(ge,Ze),e(Ze,En),e(Ze,Nr),e(Nr,wn),e(Ze,An),e(d,xn),e(d,fe),g(et,fe,null),e(fe,Dn),e(fe,tt),e(tt,kn),e(tt,Sr),e(Sr,Tn),e(tt,Pn),e(d,Ln),e(d,_e),g(rt,_e,null),e(_e,In),e(_e,at),e(at,On),e(at,Vr),e(Vr,Cn),e(at,Un),e(d,zn),e(d,ve),g(ot,ve,null),e(ve,jn),e(ve,qr),e(qr,Nn),e(d,Sn),e(d,be),g(ct,be,null),e(be,Vn),e(be,Rr),e(Rr,qn),e(d,Rn),e(d,R),g(nt,R,null),e(R,Gn),e(R,lt),e(lt,Mn),e(lt,Gr),e(Gr,Wn),e(lt,Fn),e(R,Hn),e(R,Mr),e(Mr,Yn),e(d,Kn),e(d,$e),g(st,$e,null),e($e,Bn),e($e,it),e(it,Xn),e(it,Wr),e(Wr,Jn),e(it,Qn),e(d,Zn),e(d,ye),g(dt,ye,null),e(ye,el),e(ye,pt),e(pt,tl),e(pt,Fr),e(Fr,rl),e(pt,al),e(d,ol),e(d,Ee),g(ht,Ee,null),e(Ee,cl),e(Ee,Hr),e(Hr,nl),e(d,ll),e(d,G),g(mt,G,null),e(G,sl),e(G,Yr),e(Yr,il),e(G,dl),e(G,Kr),e(Kr,pl),e(d,hl),e(d,we),g(ut,we,null),e(we,ml),e(we,ee),e(ee,ul),e(ee,Br),e(Br,gl),e(ee,fl),e(ee,Xr),e(Xr,_l),e(ee,vl),e(d,bl),e(d,M),g(gt,M,null),e(M,$l),e(M,Jr),e(Jr,yl),e(M,El),e(M,Qr),e(Qr,wl),e(d,Al),e(d,W),g(ft,W,null),e(W,xl),e(W,_t),e(_t,Dl),e(_t,Zr),e(Zr,kl),e(_t,Tl),e(W,Pl),e(W,vt),e(vt,Ll),e(vt,ea),e(ea,Il),e(vt,Ol),e(d,Cl),e(d,Ae),g(bt,Ae,null),e(Ae,Ul),e(Ae,ta),e(ta,zl),e(d,jl),e(d,xe),g($t,xe,null),e(xe,Nl),e(xe,ra),e(ra,Sl),e(d,Vl),e(d,De),g(yt,De,null),e(De,ql),e(De,aa),e(aa,Rl),e(d,Gl),e(d,ke),g(Et,ke,null),e(ke,Ml),e(ke,oa),e(oa,Wl),e(d,Fl),e(d,j),g(wt,j,null),e(j,Hl),e(j,At),e(At,Yl),e(At,ca),e(ca,Kl),e(At,Bl),e(j,Xl),e(j,na),e(na,Jl),e(j,Ql),e(j,te),e(te,Kt),e(Kt,la),e(la,Zl),e(Kt,es),e(te,ts),e(te,Bt),e(Bt,sa),e(sa,rs),e(Bt,as),e(te,os),e(te,Xt),e(Xt,ia),e(ia,cs),e(Xt,ns),e(d,ls),e(d,Te),g(xt,Te,null),e(Te,ss),e(Te,Dt),e(Dt,is),e(Dt,da),e(da,ds),e(Dt,ps),e(d,hs),e(d,F),g(kt,F,null),e(F,ms),e(F,re),e(re,us),e(re,pa),e(pa,gs),e(re,fs),e(re,ha),e(ha,_s),e(re,vs),e(F,bs),e(F,ma),e(ma,$s),e(d,ys),e(d,N),g(Tt,N,null),e(N,Es),e(N,V),e(V,ws),e(V,ua),e(ua,As),e(V,xs),e(V,ga),e(ga,Ds),e(V,ks),e(V,fa),e(fa,Ts),e(V,Ps),e(N,Ls),e(N,_a),e(_a,Is),e(N,Os),g(Pe,N,null),e(d,Cs),e(d,Le),g(Pt,Le,null),e(Le,Us),e(Le,Lt),e(Lt,zs),e(Lt,va),e(va,js),e(Lt,Ns),e(d,Ss),e(d,Ie),g(It,Ie,null),e(Ie,Vs),e(Ie,ba),e(ba,qs),e(d,Rs),e(d,Oe),g(Ot,Oe,null),e(Oe,Gs),e(Oe,$a),e($a,Ms),e(d,Ws),e(d,Ce),g(Ct,Ce,null),e(Ce,Fs),e(Ce,ae),e(ae,Hs),e(ae,ya),e(ya,Ys),e(ae,Ks),e(ae,Jt),e(Jt,Bs),e(ae,Xs),e(d,Js),e(d,Ue),g(Ut,Ue,null),e(Ue,Qs),e(Ue,Ea),e(Ea,Zs),Ca=!0},p(l,[y]){const zt={};y&2&&(zt.$$scope={dirty:y,ctx:l}),ie.$set(zt);const wa={};y&2&&(wa.$$scope={dirty:y,ctx:l}),Pe.$set(wa)},i(l){Ca||(f(w.$$.fragment,l),f(He.$$.fragment,l),f(ie.$$.fragment,l),f(Ye.$$.fragment,l),f(Be.$$.fragment,l),f(Xe.$$.fragment,l),f(Je.$$.fragment,l),f(Qe.$$.fragment,l),f(et.$$.fragment,l),f(rt.$$.fragment,l),f(ot.$$.fragment,l),f(ct.$$.fragment,l),f(nt.$$.fragment,l),f(st.$$.fragment,l),f(dt.$$.fragment,l),f(ht.$$.fragment,l),f(mt.$$.fragment,l),f(ut.$$.fragment,l),f(gt.$$.fragment,l),f(ft.$$.fragment,l),f(bt.$$.fragment,l),f($t.$$.fragment,l),f(yt.$$.fragment,l),f(Et.$$.fragment,l),f(wt.$$.fragment,l),f(xt.$$.fragment,l),f(kt.$$.fragment,l),f(Tt.$$.fragment,l),f(Pe.$$.fragment,l),f(Pt.$$.fragment,l),f(It.$$.fragment,l),f(Ot.$$.fragment,l),f(Ct.$$.fragment,l),f(Ut.$$.fragment,l),Ca=!0)},o(l){_(w.$$.fragment,l),_(He.$$.fragment,l),_(ie.$$.fragment,l),_(Ye.$$.fragment,l),_(Be.$$.fragment,l),_(Xe.$$.fragment,l),_(Je.$$.fragment,l),_(Qe.$$.fragment,l),_(et.$$.fragment,l),_(rt.$$.fragment,l),_(ot.$$.fragment,l),_(ct.$$.fragment,l),_(nt.$$.fragment,l),_(st.$$.fragment,l),_(dt.$$.fragment,l),_(ht.$$.fragment,l),_(mt.$$.fragment,l),_(ut.$$.fragment,l),_(gt.$$.fragment,l),_(ft.$$.fragment,l),_(bt.$$.fragment,l),_($t.$$.fragment,l),_(yt.$$.fragment,l),_(Et.$$.fragment,l),_(wt.$$.fragment,l),_(xt.$$.fragment,l),_(kt.$$.fragment,l),_(Tt.$$.fragment,l),_(Pe.$$.fragment,l),_(Pt.$$.fragment,l),_(It.$$.fragment,l),_(Ot.$$.fragment,l),_(Ct.$$.fragment,l),_(Ut.$$.fragment,l),Ca=!1},d(l){t(b),l&&t(C),l&&t(E),v(w),l&&t(oe),l&&t(z),l&&t(Ve),l&&t(P),l&&t(ka),l&&t(ce),l&&t(Ta),l&&t(A),l&&t(Pa),l&&t(q),l&&t(La),v(He,l),l&&t(Ia),v(ie,l),l&&t(Oa),l&&t(d),v(Ye),v(Be),v(Xe),v(Je),v(Qe),v(et),v(rt),v(ot),v(ct),v(nt),v(st),v(dt),v(ht),v(mt),v(ut),v(gt),v(ft),v(bt),v($t),v(yt),v(Et),v(wt),v(xt),v(kt),v(Tt),v(Pe),v(Pt),v(It),v(Ot),v(Ct),v(Ut)}}}const Sd={local:"accelerate.Accelerator",title:"Accelerator"};function Vd(jt){return Od(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fd extends Td{constructor(b){super();Pd(this,b,Vd,Nd,Ld,{})}}export{Fd as default,Sd as metadata};
