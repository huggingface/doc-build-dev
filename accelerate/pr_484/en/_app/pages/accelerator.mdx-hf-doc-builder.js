import{S as xi,i as Di,s as Pi,e as o,k as s,w as m,t,M as Ti,c,d as a,m as i,a as n,x as g,h as r,b as h,G as e,g as k,y as u,q as f,o as _,B as v,v as ki}from"../chunks/vendor-hf-doc-builder.js";import{T as Li}from"../chunks/Tip-hf-doc-builder.js";import{D as b}from"../chunks/Docstring-hf-doc-builder.js";import{I as Ii}from"../chunks/IconCopyLink-hf-doc-builder.js";function Oi(oa){let $,ee,A,L,M,P,Oe,R,W,te,I;return{c(){$=o("p"),ee=t("Every "),A=o("code"),L=t("object"),M=t(" must have a "),P=o("code"),Oe=t("load_state_dict"),R=t(" and "),W=o("code"),te=t("state_dict"),I=t(" function to be stored.")},l(F){$=c(F,"P",{});var w=n($);ee=r(w,"Every "),A=c(w,"CODE",{});var At=n(A);L=r(At,"object"),At.forEach(a),M=r(w," must have a "),P=c(w,"CODE",{});var xt=n(P);Oe=r(xt,"load_state_dict"),xt.forEach(a),R=r(w," and "),W=c(w,"CODE",{});var Ce=n(W);te=r(Ce,"state_dict"),Ce.forEach(a),I=r(w," function to be stored."),w.forEach(a)},m(F,w){k(F,$,w),e($,ee),e($,A),e(A,L),e($,M),e($,P),e(P,Oe),e($,R),e($,W),e(W,te),e($,I)},d(F){F&&a($)}}}function Ci(oa){let $,ee,A,L,M,P,Oe,R,W,te,I,F,w,At,xt,Ce,x,H,Xa,Dt,Ba,Ja,Bt,Qa,Za,eo,Ue,to,Pt,ro,ao,oo,U,co,Jt,no,lo,Qt,so,io,Zt,po,ho,mo,Y,go,er,uo,fo,tr,_o,vo,bo,ze,$o,Tt,yo,Eo,ca,re,wo,rr,Ao,xo,na,y,ae,ar,Do,Po,kt,To,ko,Lo,je,Io,or,Oo,Co,Uo,Ne,zo,cr,jo,No,So,Se,qo,Lt,Vo,Go,Mo,qe,Ro,It,Wo,Fo,Ho,K,Yo,Ot,Ko,Xo,nr,Bo,Jo,Qo,T,Zo,oe,ec,lr,tc,rc,ac,sr,oc,cc,ce,nc,ir,lc,sc,ic,dr,dc,pc,la,d,Ve,hc,pr,mc,gc,hr,uc,fc,Ge,ne,mr,_c,vc,gr,bc,$c,yc,le,ur,Ec,wc,Ct,Ac,xc,Dc,se,Me,Pc,fr,Tc,kc,ie,Re,Lc,_r,Ic,Oc,de,We,Cc,X,Uc,vr,zc,jc,br,Nc,Sc,qc,pe,Fe,Vc,He,Gc,$r,Mc,Rc,Wc,he,Ye,Fc,Ke,Hc,yr,Yc,Kc,Xc,me,Xe,Bc,Be,Jc,Er,Qc,Zc,en,ge,Je,tn,wr,rn,an,ue,Qe,on,Ar,cn,nn,j,Ze,ln,et,sn,xr,dn,pn,hn,Dr,mn,gn,fe,tt,un,rt,fn,Pr,_n,vn,bn,_e,at,$n,Tr,yn,En,N,ot,wn,kr,An,xn,Lr,Dn,Pn,ve,ct,Tn,B,kn,Ir,Ln,In,Or,On,Cn,Un,S,nt,zn,Cr,jn,Nn,Ur,Sn,qn,q,lt,Vn,st,Gn,zr,Mn,Rn,Wn,it,Fn,jr,Hn,Yn,Kn,be,dt,Xn,Nr,Bn,Jn,O,pt,Qn,ht,Zn,Sr,el,tl,rl,qr,al,ol,J,Ut,Vr,cl,nl,ll,zt,Gr,sl,il,dl,jt,Mr,pl,hl,ml,$e,mt,gl,gt,ul,Rr,fl,_l,vl,ye,ut,bl,Q,$l,Wr,yl,El,Fr,wl,Al,xl,C,ft,Dl,z,Pl,Hr,Tl,kl,Yr,Ll,Il,Kr,Ol,Cl,Ul,Xr,zl,jl,Ee,Nl,we,_t,Sl,vt,ql,Br,Vl,Gl,Ml,Ae,bt,Rl,Jr,Wl,Fl,xe,$t,Hl,Qr,Yl,Kl,De,yt,Xl,Z,Bl,Zr,Jl,Ql,Nt,Zl,es,ts,Pe,Et,rs,ea,as,sa;return P=new Ii({}),Ve=new b({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of steps that should pass before gradients are accumulated. Should be combined with
<code>Accelerator.accumulate</code>`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/pr_484/en/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/pr_484/en/internal#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L77"}}),Me=new b({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"},{anchor:"accelerate.Accelerator.accumulate.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.DataLoader</code>) &#x2014;
PyTorch DataLoader that was prepared with <code>Accelerator.prepare</code>`,name:"dataloader"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L392"}}),Re=new b({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1099"}}),We=new b({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L777"}}),Fe=new b({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1017"}}),Ye=new b({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L809"}}),Xe=new b({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L825"}}),Je=new b({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L939"}}),Qe=new b({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1005"}}),Ze=new b({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L834",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),tt=new b({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L899"}}),at=new b({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L978"}}),ot=new b({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L337"}}),ct=new b({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L925"}}),nt=new b({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L346"}}),lt=new b({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L364"}}),dt=new b({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L864"}}),pt=new b({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L478"}}),mt=new b({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L414"}}),ut=new b({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:": Tensor"},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L852"}}),ft=new b({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1075"}}),Ee=new Li({props:{$$slots:{default:[Oi]},$$scope:{ctx:oa}}}),_t=new b({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L947"}}),bt=new b({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L958"}}),$t=new b({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L789"}}),yt=new b({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L881"}}),Et=new b({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L892"}}),{c(){$=o("meta"),ee=s(),A=o("h1"),L=o("a"),M=o("span"),m(P.$$.fragment),Oe=s(),R=o("span"),W=t("Accelerator"),te=s(),I=o("p"),F=t("The "),w=o("a"),At=t("Accelerator"),xt=t(` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),Ce=s(),x=o("ol"),H=o("li"),Xa=t("Initialize an "),Dt=o("a"),Ba=t("Accelerator"),Ja=t(" object (that we will call "),Bt=o("code"),Qa=t("accelerator"),Za=t(` in the rest of this
page) as early as possible in your script.`),eo=s(),Ue=o("li"),to=t("Pass along your model(s), optimizer(s), dataloader(s) to the "),Pt=o("a"),ro=t("prepare()"),ao=t(" method."),oo=s(),U=o("li"),co=t("(Optional but best practice) Remove all the "),Jt=o("code"),no=t(".cuda()"),lo=t(" or "),Qt=o("code"),so=t(".to(device)"),io=t(` in your code and let the
`),Zt=o("code"),po=t("accelerator"),ho=t(" handle device placement for you."),mo=s(),Y=o("li"),go=t("Replace the "),er=o("code"),uo=t("loss.backward()"),fo=t(" in your code by "),tr=o("code"),_o=t("accelerator.backward(loss)"),vo=t("."),bo=s(),ze=o("li"),$o=t(`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),Tt=o("a"),yo=t("gather()"),Eo=t("."),ca=s(),re=o("p"),wo=t(`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),rr=o("code"),Ao=t("accelerator"),xo=t(":"),na=s(),y=o("ul"),ae=o("li"),ar=o("code"),Do=t("print"),Po=t(" statements should be replaced by "),kt=o("a"),To=t("print()"),ko=t(` to be only printed once per
process.`),Lo=s(),je=o("li"),Io=t("Use "),or=o("code"),Oo=t("is_local_main_process()"),Co=t(" for statements that should be executed once per server."),Uo=s(),Ne=o("li"),zo=t("Use "),cr=o("code"),jo=t("is_main_process()"),No=t(" for statements that should be executed once only."),So=s(),Se=o("li"),qo=t("Use "),Lt=o("a"),Vo=t("wait_for_everyone()"),Go=t(` to make sure all processes join that point before continuing
(useful before a model save for instance).`),Mo=s(),qe=o("li"),Ro=t("Use "),It=o("a"),Wo=t("unwrap_model()"),Fo=t(" to unwrap your model before saving it."),Ho=s(),K=o("li"),Yo=t("Use "),Ot=o("a"),Ko=t("save()"),Xo=t(" instead of "),nr=o("code"),Bo=t("torch.save"),Jo=t("."),Qo=s(),T=o("li"),Zo=t("Use "),oe=o("a"),ec=t("clip"),lr=o("em"),tc=t("grad_norm"),rc=t("()"),ac=t(" instead of "),sr=o("code"),oc=t("torch.nn.utils.clip_grad_norm_"),cc=t(` and
`),ce=o("a"),nc=t("clip"),ir=o("em"),lc=t("grad_value"),sc=t("()"),ic=t(" instead of "),dr=o("code"),dc=t("torch.nn.utils.clip_grad_value_"),pc=t("."),la=s(),d=o("div"),m(Ve.$$.fragment),hc=s(),pr=o("p"),mc=t("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),gc=s(),hr=o("p"),uc=t("Attributes"),fc=s(),Ge=o("ul"),ne=o("li"),mr=o("strong"),_c=t("device"),vc=t(" ("),gr=o("code"),bc=t("torch.device"),$c=t(") \u2014 The device to use."),yc=s(),le=o("li"),ur=o("strong"),Ec=t("state"),wc=t(" ("),Ct=o("a"),Ac=t("AcceleratorState"),xc=t(") \u2014 The distributed setup state."),Dc=s(),se=o("div"),m(Me.$$.fragment),Pc=s(),fr=o("p"),Tc=t("A context manager that will lightly wrap around and perform gradient accumulation automatically"),kc=s(),ie=o("div"),m(Re.$$.fragment),Lc=s(),_r=o("p"),Ic=t(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Oc=s(),de=o("div"),m(We.$$.fragment),Cc=s(),X=o("p"),Uc=t("Use "),vr=o("code"),zc=t("accelerator.backward(loss)"),jc=t(" in lieu of "),br=o("code"),Nc=t("loss.backward()"),Sc=t("."),qc=s(),pe=o("div"),m(Fe.$$.fragment),Vc=s(),He=o("p"),Gc=t("Alias for "),$r=o("code"),Mc=t("Accelerate.free_memory"),Rc=t(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Wc=s(),he=o("div"),m(Ye.$$.fragment),Fc=s(),Ke=o("p"),Hc=t("Should be used in place of "),yr=o("code"),Yc=t("torch.nn.utils.clip_grad_norm_"),Kc=t("."),Xc=s(),me=o("div"),m(Xe.$$.fragment),Bc=s(),Be=o("p"),Jc=t("Should be used in place of "),Er=o("code"),Qc=t("torch.nn.utils.clip_grad_value_"),Zc=t("."),en=s(),ge=o("div"),m(Je.$$.fragment),tn=s(),wr=o("p"),rn=t("Runs any special end training behaviors, such as stopping trackers"),an=s(),ue=o("div"),m(Qe.$$.fragment),on=s(),Ar=o("p"),cn=t(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),nn=s(),j=o("div"),m(Ze.$$.fragment),ln=s(),et=o("p"),sn=t("Gather the values in "),xr=o("em"),dn=t("tensor"),pn=t(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),hn=s(),Dr=o("p"),mn=t(`Note:
This gather happens in all processes.`),gn=s(),fe=o("div"),m(tt.$$.fragment),un=s(),rt=o("p"),fn=t("Initializes a run for all trackers stored in "),Pr=o("code"),_n=t("self.log_with"),vn=t(", potentially with starting configurations"),bn=s(),_e=o("div"),m(at.$$.fragment),$n=s(),Tr=o("p"),yn=t("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),En=s(),N=o("div"),m(ot.$$.fragment),wn=s(),kr=o("p"),An=t("Lets the local main process go inside a with block."),xn=s(),Lr=o("p"),Dn=t("The other processes will enter the with block after the main process exits."),Pn=s(),ve=o("div"),m(ct.$$.fragment),Tn=s(),B=o("p"),kn=t("Logs "),Ir=o("code"),Ln=t("values"),In=t(" to all stored trackers in "),Or=o("code"),On=t("self.trackers"),Cn=t("."),Un=s(),S=o("div"),m(nt.$$.fragment),zn=s(),Cr=o("p"),jn=t("Lets the main process go first inside a with block."),Nn=s(),Ur=o("p"),Sn=t("The other processes will enter the with block after the main process exits."),qn=s(),q=o("div"),m(lt.$$.fragment),Vn=s(),st=o("p"),Gn=t(`A context manager to disable gradient synchronizations across DDP processes by calling
`),zr=o("code"),Mn=t("torch.nn.parallel.DistributedDataParallel.no_sync"),Rn=t("."),Wn=s(),it=o("p"),Fn=t("If "),jr=o("code"),Hn=t("model"),Yn=t(" is not in DDP, this context manager does nothing"),Kn=s(),be=o("div"),m(dt.$$.fragment),Xn=s(),Nr=o("p"),Bn=t(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Jn=s(),O=o("div"),m(pt.$$.fragment),Qn=s(),ht=o("p"),Zn=t("Prepare all objects passed in "),Sr=o("code"),el=t("args"),tl=t(` for distributed training and mixed precision, then return them in the same
order.`),rl=s(),qr=o("p"),al=t("Accepts the following type of objects:"),ol=s(),J=o("ul"),Ut=o("li"),Vr=o("code"),cl=t("torch.utils.data.DataLoader"),nl=t(": PyTorch Dataloader"),ll=s(),zt=o("li"),Gr=o("code"),sl=t("torch.nn.Module"),il=t(": PyTorch Module"),dl=s(),jt=o("li"),Mr=o("code"),pl=t("torch.optim.Optimizer"),hl=t(": PyTorch Optimizer"),ml=s(),$e=o("div"),m(mt.$$.fragment),gl=s(),gt=o("p"),ul=t("Use in replacement of "),Rr=o("code"),fl=t("print()"),_l=t(" to only print once per server."),vl=s(),ye=o("div"),m(ut.$$.fragment),bl=s(),Q=o("p"),$l=t("Reduce the values in "),Wr=o("em"),yl=t("tensor"),El=t(" across all processes based on "),Fr=o("em"),wl=t("reduction"),Al=t("."),xl=s(),C=o("div"),m(ft.$$.fragment),Dl=s(),z=o("p"),Pl=t("Makes note of "),Hr=o("code"),Tl=t("objects"),kl=t(" and will save or load them in during "),Yr=o("code"),Ll=t("save_state"),Il=t(" or "),Kr=o("code"),Ol=t("load_state"),Cl=t("."),Ul=s(),Xr=o("p"),zl=t(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),jl=s(),m(Ee.$$.fragment),Nl=s(),we=o("div"),m(_t.$$.fragment),Sl=s(),vt=o("p"),ql=t("Save the object passed to disk once per machine. Use in place of "),Br=o("code"),Vl=t("torch.save"),Gl=t("."),Ml=s(),Ae=o("div"),m(bt.$$.fragment),Rl=s(),Jr=o("p"),Wl=t("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Fl=s(),xe=o("div"),m($t.$$.fragment),Hl=s(),Qr=o("p"),Yl=t("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Kl=s(),De=o("div"),m(yt.$$.fragment),Xl=s(),Z=o("p"),Bl=t("Unwraps the "),Zr=o("code"),Jl=t("model"),Ql=t(" from the additional layer possible added by "),Nt=o("a"),Zl=t("prepare()"),es=t(`. Useful before saving
the model.`),ts=s(),Pe=o("div"),m(Et.$$.fragment),rs=s(),ea=o("p"),as=t(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(l){const E=Ti('[data-svelte="svelte-1phssyn"]',document.head);$=c(E,"META",{name:!0,content:!0}),E.forEach(a),ee=i(l),A=c(l,"H1",{class:!0});var wt=n(A);L=c(wt,"A",{id:!0,class:!0,href:!0});var ls=n(L);M=c(ls,"SPAN",{});var ss=n(M);g(P.$$.fragment,ss),ss.forEach(a),ls.forEach(a),Oe=i(wt),R=c(wt,"SPAN",{});var is=n(R);W=r(is,"Accelerator"),is.forEach(a),wt.forEach(a),te=i(l),I=c(l,"P",{});var ia=n(I);F=r(ia,"The "),w=c(ia,"A",{href:!0});var ds=n(w);At=r(ds,"Accelerator"),ds.forEach(a),xt=r(ia,` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),ia.forEach(a),Ce=i(l),x=c(l,"OL",{});var V=n(x);H=c(V,"LI",{});var St=n(H);Xa=r(St,"Initialize an "),Dt=c(St,"A",{href:!0});var ps=n(Dt);Ba=r(ps,"Accelerator"),ps.forEach(a),Ja=r(St," object (that we will call "),Bt=c(St,"CODE",{});var hs=n(Bt);Qa=r(hs,"accelerator"),hs.forEach(a),Za=r(St,` in the rest of this
page) as early as possible in your script.`),St.forEach(a),eo=i(V),Ue=c(V,"LI",{});var da=n(Ue);to=r(da,"Pass along your model(s), optimizer(s), dataloader(s) to the "),Pt=c(da,"A",{href:!0});var ms=n(Pt);ro=r(ms,"prepare()"),ms.forEach(a),ao=r(da," method."),da.forEach(a),oo=i(V),U=c(V,"LI",{});var Te=n(U);co=r(Te,"(Optional but best practice) Remove all the "),Jt=c(Te,"CODE",{});var gs=n(Jt);no=r(gs,".cuda()"),gs.forEach(a),lo=r(Te," or "),Qt=c(Te,"CODE",{});var us=n(Qt);so=r(us,".to(device)"),us.forEach(a),io=r(Te,` in your code and let the
`),Zt=c(Te,"CODE",{});var fs=n(Zt);po=r(fs,"accelerator"),fs.forEach(a),ho=r(Te," handle device placement for you."),Te.forEach(a),mo=i(V),Y=c(V,"LI",{});var qt=n(Y);go=r(qt,"Replace the "),er=c(qt,"CODE",{});var _s=n(er);uo=r(_s,"loss.backward()"),_s.forEach(a),fo=r(qt," in your code by "),tr=c(qt,"CODE",{});var vs=n(tr);_o=r(vs,"accelerator.backward(loss)"),vs.forEach(a),vo=r(qt,"."),qt.forEach(a),bo=i(V),ze=c(V,"LI",{});var pa=n(ze);$o=r(pa,`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),Tt=c(pa,"A",{href:!0});var bs=n(Tt);yo=r(bs,"gather()"),bs.forEach(a),Eo=r(pa,"."),pa.forEach(a),V.forEach(a),ca=i(l),re=c(l,"P",{});var ha=n(re);wo=r(ha,`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),rr=c(ha,"CODE",{});var $s=n(rr);Ao=r($s,"accelerator"),$s.forEach(a),xo=r(ha,":"),ha.forEach(a),na=i(l),y=c(l,"UL",{});var D=n(y);ae=c(D,"LI",{});var ta=n(ae);ar=c(ta,"CODE",{});var ys=n(ar);Do=r(ys,"print"),ys.forEach(a),Po=r(ta," statements should be replaced by "),kt=c(ta,"A",{href:!0});var Es=n(kt);To=r(Es,"print()"),Es.forEach(a),ko=r(ta,` to be only printed once per
process.`),ta.forEach(a),Lo=i(D),je=c(D,"LI",{});var ma=n(je);Io=r(ma,"Use "),or=c(ma,"CODE",{});var ws=n(or);Oo=r(ws,"is_local_main_process()"),ws.forEach(a),Co=r(ma," for statements that should be executed once per server."),ma.forEach(a),Uo=i(D),Ne=c(D,"LI",{});var ga=n(Ne);zo=r(ga,"Use "),cr=c(ga,"CODE",{});var As=n(cr);jo=r(As,"is_main_process()"),As.forEach(a),No=r(ga," for statements that should be executed once only."),ga.forEach(a),So=i(D),Se=c(D,"LI",{});var ua=n(Se);qo=r(ua,"Use "),Lt=c(ua,"A",{href:!0});var xs=n(Lt);Vo=r(xs,"wait_for_everyone()"),xs.forEach(a),Go=r(ua,` to make sure all processes join that point before continuing
(useful before a model save for instance).`),ua.forEach(a),Mo=i(D),qe=c(D,"LI",{});var fa=n(qe);Ro=r(fa,"Use "),It=c(fa,"A",{href:!0});var Ds=n(It);Wo=r(Ds,"unwrap_model()"),Ds.forEach(a),Fo=r(fa," to unwrap your model before saving it."),fa.forEach(a),Ho=i(D),K=c(D,"LI",{});var Vt=n(K);Yo=r(Vt,"Use "),Ot=c(Vt,"A",{href:!0});var Ps=n(Ot);Ko=r(Ps,"save()"),Ps.forEach(a),Xo=r(Vt," instead of "),nr=c(Vt,"CODE",{});var Ts=n(nr);Bo=r(Ts,"torch.save"),Ts.forEach(a),Jo=r(Vt,"."),Vt.forEach(a),Qo=i(D),T=c(D,"LI",{});var G=n(T);Zo=r(G,"Use "),oe=c(G,"A",{href:!0});var _a=n(oe);ec=r(_a,"clip"),lr=c(_a,"EM",{});var ks=n(lr);tc=r(ks,"grad_norm"),ks.forEach(a),rc=r(_a,"()"),_a.forEach(a),ac=r(G," instead of "),sr=c(G,"CODE",{});var Ls=n(sr);oc=r(Ls,"torch.nn.utils.clip_grad_norm_"),Ls.forEach(a),cc=r(G,` and
`),ce=c(G,"A",{href:!0});var va=n(ce);nc=r(va,"clip"),ir=c(va,"EM",{});var Is=n(ir);lc=r(Is,"grad_value"),Is.forEach(a),sc=r(va,"()"),va.forEach(a),ic=r(G," instead of "),dr=c(G,"CODE",{});var Os=n(dr);dc=r(Os,"torch.nn.utils.clip_grad_value_"),Os.forEach(a),pc=r(G,"."),G.forEach(a),D.forEach(a),la=i(l),d=c(l,"DIV",{class:!0});var p=n(d);g(Ve.$$.fragment,p),hc=i(p),pr=c(p,"P",{});var Cs=n(pr);mc=r(Cs,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Cs.forEach(a),gc=i(p),hr=c(p,"P",{});var Us=n(hr);uc=r(Us,"Attributes"),Us.forEach(a),fc=i(p),Ge=c(p,"UL",{});var ba=n(Ge);ne=c(ba,"LI",{});var ra=n(ne);mr=c(ra,"STRONG",{});var zs=n(mr);_c=r(zs,"device"),zs.forEach(a),vc=r(ra," ("),gr=c(ra,"CODE",{});var js=n(gr);bc=r(js,"torch.device"),js.forEach(a),$c=r(ra,") \u2014 The device to use."),ra.forEach(a),yc=i(ba),le=c(ba,"LI",{});var aa=n(le);ur=c(aa,"STRONG",{});var Ns=n(ur);Ec=r(Ns,"state"),Ns.forEach(a),wc=r(aa," ("),Ct=c(aa,"A",{href:!0});var Ss=n(Ct);Ac=r(Ss,"AcceleratorState"),Ss.forEach(a),xc=r(aa,") \u2014 The distributed setup state."),aa.forEach(a),ba.forEach(a),Dc=i(p),se=c(p,"DIV",{class:!0});var $a=n(se);g(Me.$$.fragment,$a),Pc=i($a),fr=c($a,"P",{});var qs=n(fr);Tc=r(qs,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),qs.forEach(a),$a.forEach(a),kc=i(p),ie=c(p,"DIV",{class:!0});var ya=n(ie);g(Re.$$.fragment,ya),Lc=i(ya),_r=c(ya,"P",{});var Vs=n(_r);Ic=r(Vs,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Vs.forEach(a),ya.forEach(a),Oc=i(p),de=c(p,"DIV",{class:!0});var Ea=n(de);g(We.$$.fragment,Ea),Cc=i(Ea),X=c(Ea,"P",{});var Gt=n(X);Uc=r(Gt,"Use "),vr=c(Gt,"CODE",{});var Gs=n(vr);zc=r(Gs,"accelerator.backward(loss)"),Gs.forEach(a),jc=r(Gt," in lieu of "),br=c(Gt,"CODE",{});var Ms=n(br);Nc=r(Ms,"loss.backward()"),Ms.forEach(a),Sc=r(Gt,"."),Gt.forEach(a),Ea.forEach(a),qc=i(p),pe=c(p,"DIV",{class:!0});var wa=n(pe);g(Fe.$$.fragment,wa),Vc=i(wa),He=c(wa,"P",{});var Aa=n(He);Gc=r(Aa,"Alias for "),$r=c(Aa,"CODE",{});var Rs=n($r);Mc=r(Rs,"Accelerate.free_memory"),Rs.forEach(a),Rc=r(Aa,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Aa.forEach(a),wa.forEach(a),Wc=i(p),he=c(p,"DIV",{class:!0});var xa=n(he);g(Ye.$$.fragment,xa),Fc=i(xa),Ke=c(xa,"P",{});var Da=n(Ke);Hc=r(Da,"Should be used in place of "),yr=c(Da,"CODE",{});var Ws=n(yr);Yc=r(Ws,"torch.nn.utils.clip_grad_norm_"),Ws.forEach(a),Kc=r(Da,"."),Da.forEach(a),xa.forEach(a),Xc=i(p),me=c(p,"DIV",{class:!0});var Pa=n(me);g(Xe.$$.fragment,Pa),Bc=i(Pa),Be=c(Pa,"P",{});var Ta=n(Be);Jc=r(Ta,"Should be used in place of "),Er=c(Ta,"CODE",{});var Fs=n(Er);Qc=r(Fs,"torch.nn.utils.clip_grad_value_"),Fs.forEach(a),Zc=r(Ta,"."),Ta.forEach(a),Pa.forEach(a),en=i(p),ge=c(p,"DIV",{class:!0});var ka=n(ge);g(Je.$$.fragment,ka),tn=i(ka),wr=c(ka,"P",{});var Hs=n(wr);rn=r(Hs,"Runs any special end training behaviors, such as stopping trackers"),Hs.forEach(a),ka.forEach(a),an=i(p),ue=c(p,"DIV",{class:!0});var La=n(ue);g(Qe.$$.fragment,La),on=i(La),Ar=c(La,"P",{});var Ys=n(Ar);cn=r(Ys,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Ys.forEach(a),La.forEach(a),nn=i(p),j=c(p,"DIV",{class:!0});var Mt=n(j);g(Ze.$$.fragment,Mt),ln=i(Mt),et=c(Mt,"P",{});var Ia=n(et);sn=r(Ia,"Gather the values in "),xr=c(Ia,"EM",{});var Ks=n(xr);dn=r(Ks,"tensor"),Ks.forEach(a),pn=r(Ia,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Ia.forEach(a),hn=i(Mt),Dr=c(Mt,"P",{});var Xs=n(Dr);mn=r(Xs,`Note:
This gather happens in all processes.`),Xs.forEach(a),Mt.forEach(a),gn=i(p),fe=c(p,"DIV",{class:!0});var Oa=n(fe);g(tt.$$.fragment,Oa),un=i(Oa),rt=c(Oa,"P",{});var Ca=n(rt);fn=r(Ca,"Initializes a run for all trackers stored in "),Pr=c(Ca,"CODE",{});var Bs=n(Pr);_n=r(Bs,"self.log_with"),Bs.forEach(a),vn=r(Ca,", potentially with starting configurations"),Ca.forEach(a),Oa.forEach(a),bn=i(p),_e=c(p,"DIV",{class:!0});var Ua=n(_e);g(at.$$.fragment,Ua),$n=i(Ua),Tr=c(Ua,"P",{});var Js=n(Tr);yn=r(Js,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Js.forEach(a),Ua.forEach(a),En=i(p),N=c(p,"DIV",{class:!0});var Rt=n(N);g(ot.$$.fragment,Rt),wn=i(Rt),kr=c(Rt,"P",{});var Qs=n(kr);An=r(Qs,"Lets the local main process go inside a with block."),Qs.forEach(a),xn=i(Rt),Lr=c(Rt,"P",{});var Zs=n(Lr);Dn=r(Zs,"The other processes will enter the with block after the main process exits."),Zs.forEach(a),Rt.forEach(a),Pn=i(p),ve=c(p,"DIV",{class:!0});var za=n(ve);g(ct.$$.fragment,za),Tn=i(za),B=c(za,"P",{});var Wt=n(B);kn=r(Wt,"Logs "),Ir=c(Wt,"CODE",{});var ei=n(Ir);Ln=r(ei,"values"),ei.forEach(a),In=r(Wt," to all stored trackers in "),Or=c(Wt,"CODE",{});var ti=n(Or);On=r(ti,"self.trackers"),ti.forEach(a),Cn=r(Wt,"."),Wt.forEach(a),za.forEach(a),Un=i(p),S=c(p,"DIV",{class:!0});var Ft=n(S);g(nt.$$.fragment,Ft),zn=i(Ft),Cr=c(Ft,"P",{});var ri=n(Cr);jn=r(ri,"Lets the main process go first inside a with block."),ri.forEach(a),Nn=i(Ft),Ur=c(Ft,"P",{});var ai=n(Ur);Sn=r(ai,"The other processes will enter the with block after the main process exits."),ai.forEach(a),Ft.forEach(a),qn=i(p),q=c(p,"DIV",{class:!0});var Ht=n(q);g(lt.$$.fragment,Ht),Vn=i(Ht),st=c(Ht,"P",{});var ja=n(st);Gn=r(ja,`A context manager to disable gradient synchronizations across DDP processes by calling
`),zr=c(ja,"CODE",{});var oi=n(zr);Mn=r(oi,"torch.nn.parallel.DistributedDataParallel.no_sync"),oi.forEach(a),Rn=r(ja,"."),ja.forEach(a),Wn=i(Ht),it=c(Ht,"P",{});var Na=n(it);Fn=r(Na,"If "),jr=c(Na,"CODE",{});var ci=n(jr);Hn=r(ci,"model"),ci.forEach(a),Yn=r(Na," is not in DDP, this context manager does nothing"),Na.forEach(a),Ht.forEach(a),Kn=i(p),be=c(p,"DIV",{class:!0});var Sa=n(be);g(dt.$$.fragment,Sa),Xn=i(Sa),Nr=c(Sa,"P",{});var ni=n(Nr);Bn=r(ni,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),ni.forEach(a),Sa.forEach(a),Jn=i(p),O=c(p,"DIV",{class:!0});var ke=n(O);g(pt.$$.fragment,ke),Qn=i(ke),ht=c(ke,"P",{});var qa=n(ht);Zn=r(qa,"Prepare all objects passed in "),Sr=c(qa,"CODE",{});var li=n(Sr);el=r(li,"args"),li.forEach(a),tl=r(qa,` for distributed training and mixed precision, then return them in the same
order.`),qa.forEach(a),rl=i(ke),qr=c(ke,"P",{});var si=n(qr);al=r(si,"Accepts the following type of objects:"),si.forEach(a),ol=i(ke),J=c(ke,"UL",{});var Yt=n(J);Ut=c(Yt,"LI",{});var os=n(Ut);Vr=c(os,"CODE",{});var ii=n(Vr);cl=r(ii,"torch.utils.data.DataLoader"),ii.forEach(a),nl=r(os,": PyTorch Dataloader"),os.forEach(a),ll=i(Yt),zt=c(Yt,"LI",{});var cs=n(zt);Gr=c(cs,"CODE",{});var di=n(Gr);sl=r(di,"torch.nn.Module"),di.forEach(a),il=r(cs,": PyTorch Module"),cs.forEach(a),dl=i(Yt),jt=c(Yt,"LI",{});var ns=n(jt);Mr=c(ns,"CODE",{});var pi=n(Mr);pl=r(pi,"torch.optim.Optimizer"),pi.forEach(a),hl=r(ns,": PyTorch Optimizer"),ns.forEach(a),Yt.forEach(a),ke.forEach(a),ml=i(p),$e=c(p,"DIV",{class:!0});var Va=n($e);g(mt.$$.fragment,Va),gl=i(Va),gt=c(Va,"P",{});var Ga=n(gt);ul=r(Ga,"Use in replacement of "),Rr=c(Ga,"CODE",{});var hi=n(Rr);fl=r(hi,"print()"),hi.forEach(a),_l=r(Ga," to only print once per server."),Ga.forEach(a),Va.forEach(a),vl=i(p),ye=c(p,"DIV",{class:!0});var Ma=n(ye);g(ut.$$.fragment,Ma),bl=i(Ma),Q=c(Ma,"P",{});var Kt=n(Q);$l=r(Kt,"Reduce the values in "),Wr=c(Kt,"EM",{});var mi=n(Wr);yl=r(mi,"tensor"),mi.forEach(a),El=r(Kt," across all processes based on "),Fr=c(Kt,"EM",{});var gi=n(Fr);wl=r(gi,"reduction"),gi.forEach(a),Al=r(Kt,"."),Kt.forEach(a),Ma.forEach(a),xl=i(p),C=c(p,"DIV",{class:!0});var Le=n(C);g(ft.$$.fragment,Le),Dl=i(Le),z=c(Le,"P",{});var Ie=n(z);Pl=r(Ie,"Makes note of "),Hr=c(Ie,"CODE",{});var ui=n(Hr);Tl=r(ui,"objects"),ui.forEach(a),kl=r(Ie," and will save or load them in during "),Yr=c(Ie,"CODE",{});var fi=n(Yr);Ll=r(fi,"save_state"),fi.forEach(a),Il=r(Ie," or "),Kr=c(Ie,"CODE",{});var _i=n(Kr);Ol=r(_i,"load_state"),_i.forEach(a),Cl=r(Ie,"."),Ie.forEach(a),Ul=i(Le),Xr=c(Le,"P",{});var vi=n(Xr);zl=r(vi,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),vi.forEach(a),jl=i(Le),g(Ee.$$.fragment,Le),Le.forEach(a),Nl=i(p),we=c(p,"DIV",{class:!0});var Ra=n(we);g(_t.$$.fragment,Ra),Sl=i(Ra),vt=c(Ra,"P",{});var Wa=n(vt);ql=r(Wa,"Save the object passed to disk once per machine. Use in place of "),Br=c(Wa,"CODE",{});var bi=n(Br);Vl=r(bi,"torch.save"),bi.forEach(a),Gl=r(Wa,"."),Wa.forEach(a),Ra.forEach(a),Ml=i(p),Ae=c(p,"DIV",{class:!0});var Fa=n(Ae);g(bt.$$.fragment,Fa),Rl=i(Fa),Jr=c(Fa,"P",{});var $i=n(Jr);Wl=r($i,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),$i.forEach(a),Fa.forEach(a),Fl=i(p),xe=c(p,"DIV",{class:!0});var Ha=n(xe);g($t.$$.fragment,Ha),Hl=i(Ha),Qr=c(Ha,"P",{});var yi=n(Qr);Yl=r(yi,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),yi.forEach(a),Ha.forEach(a),Kl=i(p),De=c(p,"DIV",{class:!0});var Ya=n(De);g(yt.$$.fragment,Ya),Xl=i(Ya),Z=c(Ya,"P",{});var Xt=n(Z);Bl=r(Xt,"Unwraps the "),Zr=c(Xt,"CODE",{});var Ei=n(Zr);Jl=r(Ei,"model"),Ei.forEach(a),Ql=r(Xt," from the additional layer possible added by "),Nt=c(Xt,"A",{href:!0});var wi=n(Nt);Zl=r(wi,"prepare()"),wi.forEach(a),es=r(Xt,`. Useful before saving
the model.`),Xt.forEach(a),Ya.forEach(a),ts=i(p),Pe=c(p,"DIV",{class:!0});var Ka=n(Pe);g(Et.$$.fragment,Ka),rs=i(Ka),ea=c(Ka,"P",{});var Ai=n(ea);as=r(Ai,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),Ai.forEach(a),Ka.forEach(a),p.forEach(a),this.h()},h(){h($,"name","hf:doc:metadata"),h($,"content",JSON.stringify(Ui)),h(L,"id","accelerate.Accelerator"),h(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(L,"href","#accelerate.Accelerator"),h(A,"class","relative group"),h(w,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator"),h(Dt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator"),h(Pt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.prepare"),h(Tt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.gather"),h(kt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.print"),h(Lt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.wait_for_everyone"),h(It,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.unwrap_model"),h(Ot,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.save"),h(oe,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.clip_grad_norm_"),h(ce,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.clip_grad_value_"),h(Ct,"href","/docs/accelerate/pr_484/en/internal#accelerate.state.AcceleratorState"),h(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Nt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.prepare"),h(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(l,E){e(document.head,$),k(l,ee,E),k(l,A,E),e(A,L),e(L,M),u(P,M,null),e(A,Oe),e(A,R),e(R,W),k(l,te,E),k(l,I,E),e(I,F),e(I,w),e(w,At),e(I,xt),k(l,Ce,E),k(l,x,E),e(x,H),e(H,Xa),e(H,Dt),e(Dt,Ba),e(H,Ja),e(H,Bt),e(Bt,Qa),e(H,Za),e(x,eo),e(x,Ue),e(Ue,to),e(Ue,Pt),e(Pt,ro),e(Ue,ao),e(x,oo),e(x,U),e(U,co),e(U,Jt),e(Jt,no),e(U,lo),e(U,Qt),e(Qt,so),e(U,io),e(U,Zt),e(Zt,po),e(U,ho),e(x,mo),e(x,Y),e(Y,go),e(Y,er),e(er,uo),e(Y,fo),e(Y,tr),e(tr,_o),e(Y,vo),e(x,bo),e(x,ze),e(ze,$o),e(ze,Tt),e(Tt,yo),e(ze,Eo),k(l,ca,E),k(l,re,E),e(re,wo),e(re,rr),e(rr,Ao),e(re,xo),k(l,na,E),k(l,y,E),e(y,ae),e(ae,ar),e(ar,Do),e(ae,Po),e(ae,kt),e(kt,To),e(ae,ko),e(y,Lo),e(y,je),e(je,Io),e(je,or),e(or,Oo),e(je,Co),e(y,Uo),e(y,Ne),e(Ne,zo),e(Ne,cr),e(cr,jo),e(Ne,No),e(y,So),e(y,Se),e(Se,qo),e(Se,Lt),e(Lt,Vo),e(Se,Go),e(y,Mo),e(y,qe),e(qe,Ro),e(qe,It),e(It,Wo),e(qe,Fo),e(y,Ho),e(y,K),e(K,Yo),e(K,Ot),e(Ot,Ko),e(K,Xo),e(K,nr),e(nr,Bo),e(K,Jo),e(y,Qo),e(y,T),e(T,Zo),e(T,oe),e(oe,ec),e(oe,lr),e(lr,tc),e(oe,rc),e(T,ac),e(T,sr),e(sr,oc),e(T,cc),e(T,ce),e(ce,nc),e(ce,ir),e(ir,lc),e(ce,sc),e(T,ic),e(T,dr),e(dr,dc),e(T,pc),k(l,la,E),k(l,d,E),u(Ve,d,null),e(d,hc),e(d,pr),e(pr,mc),e(d,gc),e(d,hr),e(hr,uc),e(d,fc),e(d,Ge),e(Ge,ne),e(ne,mr),e(mr,_c),e(ne,vc),e(ne,gr),e(gr,bc),e(ne,$c),e(Ge,yc),e(Ge,le),e(le,ur),e(ur,Ec),e(le,wc),e(le,Ct),e(Ct,Ac),e(le,xc),e(d,Dc),e(d,se),u(Me,se,null),e(se,Pc),e(se,fr),e(fr,Tc),e(d,kc),e(d,ie),u(Re,ie,null),e(ie,Lc),e(ie,_r),e(_r,Ic),e(d,Oc),e(d,de),u(We,de,null),e(de,Cc),e(de,X),e(X,Uc),e(X,vr),e(vr,zc),e(X,jc),e(X,br),e(br,Nc),e(X,Sc),e(d,qc),e(d,pe),u(Fe,pe,null),e(pe,Vc),e(pe,He),e(He,Gc),e(He,$r),e($r,Mc),e(He,Rc),e(d,Wc),e(d,he),u(Ye,he,null),e(he,Fc),e(he,Ke),e(Ke,Hc),e(Ke,yr),e(yr,Yc),e(Ke,Kc),e(d,Xc),e(d,me),u(Xe,me,null),e(me,Bc),e(me,Be),e(Be,Jc),e(Be,Er),e(Er,Qc),e(Be,Zc),e(d,en),e(d,ge),u(Je,ge,null),e(ge,tn),e(ge,wr),e(wr,rn),e(d,an),e(d,ue),u(Qe,ue,null),e(ue,on),e(ue,Ar),e(Ar,cn),e(d,nn),e(d,j),u(Ze,j,null),e(j,ln),e(j,et),e(et,sn),e(et,xr),e(xr,dn),e(et,pn),e(j,hn),e(j,Dr),e(Dr,mn),e(d,gn),e(d,fe),u(tt,fe,null),e(fe,un),e(fe,rt),e(rt,fn),e(rt,Pr),e(Pr,_n),e(rt,vn),e(d,bn),e(d,_e),u(at,_e,null),e(_e,$n),e(_e,Tr),e(Tr,yn),e(d,En),e(d,N),u(ot,N,null),e(N,wn),e(N,kr),e(kr,An),e(N,xn),e(N,Lr),e(Lr,Dn),e(d,Pn),e(d,ve),u(ct,ve,null),e(ve,Tn),e(ve,B),e(B,kn),e(B,Ir),e(Ir,Ln),e(B,In),e(B,Or),e(Or,On),e(B,Cn),e(d,Un),e(d,S),u(nt,S,null),e(S,zn),e(S,Cr),e(Cr,jn),e(S,Nn),e(S,Ur),e(Ur,Sn),e(d,qn),e(d,q),u(lt,q,null),e(q,Vn),e(q,st),e(st,Gn),e(st,zr),e(zr,Mn),e(st,Rn),e(q,Wn),e(q,it),e(it,Fn),e(it,jr),e(jr,Hn),e(it,Yn),e(d,Kn),e(d,be),u(dt,be,null),e(be,Xn),e(be,Nr),e(Nr,Bn),e(d,Jn),e(d,O),u(pt,O,null),e(O,Qn),e(O,ht),e(ht,Zn),e(ht,Sr),e(Sr,el),e(ht,tl),e(O,rl),e(O,qr),e(qr,al),e(O,ol),e(O,J),e(J,Ut),e(Ut,Vr),e(Vr,cl),e(Ut,nl),e(J,ll),e(J,zt),e(zt,Gr),e(Gr,sl),e(zt,il),e(J,dl),e(J,jt),e(jt,Mr),e(Mr,pl),e(jt,hl),e(d,ml),e(d,$e),u(mt,$e,null),e($e,gl),e($e,gt),e(gt,ul),e(gt,Rr),e(Rr,fl),e(gt,_l),e(d,vl),e(d,ye),u(ut,ye,null),e(ye,bl),e(ye,Q),e(Q,$l),e(Q,Wr),e(Wr,yl),e(Q,El),e(Q,Fr),e(Fr,wl),e(Q,Al),e(d,xl),e(d,C),u(ft,C,null),e(C,Dl),e(C,z),e(z,Pl),e(z,Hr),e(Hr,Tl),e(z,kl),e(z,Yr),e(Yr,Ll),e(z,Il),e(z,Kr),e(Kr,Ol),e(z,Cl),e(C,Ul),e(C,Xr),e(Xr,zl),e(C,jl),u(Ee,C,null),e(d,Nl),e(d,we),u(_t,we,null),e(we,Sl),e(we,vt),e(vt,ql),e(vt,Br),e(Br,Vl),e(vt,Gl),e(d,Ml),e(d,Ae),u(bt,Ae,null),e(Ae,Rl),e(Ae,Jr),e(Jr,Wl),e(d,Fl),e(d,xe),u($t,xe,null),e(xe,Hl),e(xe,Qr),e(Qr,Yl),e(d,Kl),e(d,De),u(yt,De,null),e(De,Xl),e(De,Z),e(Z,Bl),e(Z,Zr),e(Zr,Jl),e(Z,Ql),e(Z,Nt),e(Nt,Zl),e(Z,es),e(d,ts),e(d,Pe),u(Et,Pe,null),e(Pe,rs),e(Pe,ea),e(ea,as),sa=!0},p(l,[E]){const wt={};E&2&&(wt.$$scope={dirty:E,ctx:l}),Ee.$set(wt)},i(l){sa||(f(P.$$.fragment,l),f(Ve.$$.fragment,l),f(Me.$$.fragment,l),f(Re.$$.fragment,l),f(We.$$.fragment,l),f(Fe.$$.fragment,l),f(Ye.$$.fragment,l),f(Xe.$$.fragment,l),f(Je.$$.fragment,l),f(Qe.$$.fragment,l),f(Ze.$$.fragment,l),f(tt.$$.fragment,l),f(at.$$.fragment,l),f(ot.$$.fragment,l),f(ct.$$.fragment,l),f(nt.$$.fragment,l),f(lt.$$.fragment,l),f(dt.$$.fragment,l),f(pt.$$.fragment,l),f(mt.$$.fragment,l),f(ut.$$.fragment,l),f(ft.$$.fragment,l),f(Ee.$$.fragment,l),f(_t.$$.fragment,l),f(bt.$$.fragment,l),f($t.$$.fragment,l),f(yt.$$.fragment,l),f(Et.$$.fragment,l),sa=!0)},o(l){_(P.$$.fragment,l),_(Ve.$$.fragment,l),_(Me.$$.fragment,l),_(Re.$$.fragment,l),_(We.$$.fragment,l),_(Fe.$$.fragment,l),_(Ye.$$.fragment,l),_(Xe.$$.fragment,l),_(Je.$$.fragment,l),_(Qe.$$.fragment,l),_(Ze.$$.fragment,l),_(tt.$$.fragment,l),_(at.$$.fragment,l),_(ot.$$.fragment,l),_(ct.$$.fragment,l),_(nt.$$.fragment,l),_(lt.$$.fragment,l),_(dt.$$.fragment,l),_(pt.$$.fragment,l),_(mt.$$.fragment,l),_(ut.$$.fragment,l),_(ft.$$.fragment,l),_(Ee.$$.fragment,l),_(_t.$$.fragment,l),_(bt.$$.fragment,l),_($t.$$.fragment,l),_(yt.$$.fragment,l),_(Et.$$.fragment,l),sa=!1},d(l){a($),l&&a(ee),l&&a(A),v(P),l&&a(te),l&&a(I),l&&a(Ce),l&&a(x),l&&a(ca),l&&a(re),l&&a(na),l&&a(y),l&&a(la),l&&a(d),v(Ve),v(Me),v(Re),v(We),v(Fe),v(Ye),v(Xe),v(Je),v(Qe),v(Ze),v(tt),v(at),v(ot),v(ct),v(nt),v(lt),v(dt),v(pt),v(mt),v(ut),v(ft),v(Ee),v(_t),v(bt),v($t),v(yt),v(Et)}}}const Ui={local:"accelerate.Accelerator",title:"Accelerator"};function zi(oa){return ki(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vi extends xi{constructor($){super();Di(this,$,zi,Ci,Pi,{})}}export{Vi as default,Ui as metadata};
