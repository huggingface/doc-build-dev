import{S as Xi,i as Ji,s as Qi,e as o,k as s,w as m,t as r,M as Zi,c,d as t,m as i,a as n,x as u,h as a,b as h,G as e,g as w,y as g,q as f,o as _,B as v,v as ed}from"../chunks/vendor-hf-doc-builder.js";import{T as td}from"../chunks/Tip-hf-doc-builder.js";import{D as b}from"../chunks/Docstring-hf-doc-builder.js";import{C as rd}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as ad}from"../chunks/IconCopyLink-hf-doc-builder.js";function od(ma){let $,re,x,L,R,P,Ue,W,F,ae,I;return{c(){$=o("p"),re=r("Every "),x=o("code"),L=r("object"),R=r(" must have a "),P=o("code"),Ue=r("load_state_dict"),W=r(" and "),F=o("code"),ae=r("state_dict"),I=r(" function to be stored.")},l(H){$=c(H,"P",{});var A=n($);re=a(A,"Every "),x=c(A,"CODE",{});var Tt=n(x);L=a(Tt,"object"),Tt.forEach(t),R=a(A," must have a "),P=c(A,"CODE",{});var Pt=n(P);Ue=a(Pt,"load_state_dict"),Pt.forEach(t),W=a(A," and "),F=c(A,"CODE",{});var ze=n(F);ae=a(ze,"state_dict"),ze.forEach(t),I=a(A," function to be stored."),A.forEach(t)},m(H,A){w(H,$,A),e($,re),e($,x),e(x,L),e($,R),e($,P),e(P,Ue),e($,W),e($,F),e(F,ae),e($,I)},d(H){H&&t($)}}}function cd(ma){let $,re,x,L,R,P,Ue,W,F,ae,I,H,A,Tt,Pt,ze,D,Y,lo,kt,so,io,tr,po,ho,mo,je,uo,Lt,go,fo,_o,U,vo,rr,bo,yo,ar,$o,Eo,or,wo,Ao,xo,K,Do,cr,To,Po,nr,ko,Lo,Io,Ne,Oo,It,Co,Uo,ua,oe,zo,lr,jo,No,ga,E,ce,sr,So,qo,Ot,Vo,Go,Mo,Se,Ro,ir,Wo,Fo,Ho,qe,Yo,dr,Ko,Bo,Xo,Ve,Jo,Ct,Qo,Zo,ec,Ge,tc,Ut,rc,ac,oc,B,cc,zt,nc,lc,pr,sc,ic,dc,k,pc,ne,hc,hr,mc,uc,gc,mr,fc,_c,le,vc,ur,bc,yc,$c,gr,Ec,wc,fa,j,Ac,jt,xc,Dc,fr,Tc,Pc,_a,Me,va,X,_r,kc,Lc,vr,Ic,Oc,ba,d,Re,Cc,br,Uc,zc,yr,jc,Nc,We,se,$r,Sc,qc,Er,Vc,Gc,Mc,ie,wr,Rc,Wc,Nt,Fc,Hc,Yc,de,Fe,Kc,Ar,Bc,Xc,pe,He,Jc,xr,Qc,Zc,he,Ye,en,J,tn,Dr,rn,an,Tr,on,cn,nn,me,Ke,ln,Be,sn,Pr,dn,pn,hn,ue,Xe,mn,Je,un,kr,gn,fn,_n,ge,Qe,vn,Ze,bn,Lr,yn,$n,En,fe,et,wn,Ir,An,xn,_e,tt,Dn,Or,Tn,Pn,N,rt,kn,at,Ln,Cr,In,On,Cn,Ur,Un,zn,ve,ot,jn,ct,Nn,zr,Sn,qn,Vn,be,nt,Gn,jr,Mn,Rn,S,lt,Wn,Nr,Fn,Hn,Sr,Yn,Kn,ye,st,Bn,Q,Xn,qr,Jn,Qn,Vr,Zn,el,tl,q,it,rl,Gr,al,ol,Mr,cl,nl,V,dt,ll,pt,sl,Rr,il,dl,pl,ht,hl,Wr,ml,ul,gl,$e,mt,fl,Fr,_l,vl,O,ut,bl,gt,yl,Hr,$l,El,wl,Yr,Al,xl,Z,St,Kr,Dl,Tl,Pl,qt,Br,kl,Ll,Il,Vt,Xr,Ol,Cl,Ul,Ee,ft,zl,_t,jl,Jr,Nl,Sl,ql,we,vt,Vl,ee,Gl,Qr,Ml,Rl,Zr,Wl,Fl,Hl,C,bt,Yl,z,Kl,ea,Bl,Xl,ta,Jl,Ql,ra,Zl,es,ts,aa,rs,as,Ae,os,xe,yt,cs,$t,ns,oa,ls,ss,is,De,Et,ds,ca,ps,hs,Te,wt,ms,na,us,gs,Pe,At,fs,te,_s,la,vs,bs,Gt,ys,$s,Es,ke,xt,ws,sa,As,ya;return P=new ad({}),Me=new rd({props:{code:"",highlighted:`accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)

<span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, label) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(training_dataloader):
  <span class="hljs-keyword">with</span> accelerator.accumulate(model):
    predictions = model(<span class="hljs-built_in">input</span>)
    loss = loss_function(predictions, labels)
    accelerator.backward(loss)
    optimizer.step()
    scheduler.step()
    optimizer.zero_grad()`}}),Re=new b({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of steps that should pass before gradients are accumulated. Should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/pr_484/en/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/pr_484/en/internal#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L77"}}),Fe=new b({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L406"}}),He=new b({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1109"}}),Ye=new b({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L787"}}),Ke=new b({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1027"}}),Xe=new b({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L819"}}),Qe=new b({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L835"}}),et=new b({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L949"}}),tt=new b({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1015"}}),rt=new b({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L844",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),ot=new b({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L909"}}),nt=new b({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L988"}}),lt=new b({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L347"}}),st=new b({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L935"}}),it=new b({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L356"}}),dt=new b({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L374"}}),mt=new b({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L874"}}),ut=new b({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L488"}}),ft=new b({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L424"}}),vt=new b({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:": Tensor"},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L862"}}),bt=new b({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L1085"}}),Ae=new td({props:{$$slots:{default:[od]},$$scope:{ctx:ma}}}),yt=new b({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L957"}}),Et=new b({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L968"}}),wt=new b({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L799"}}),At=new b({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L891"}}),xt=new b({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_484/src/accelerate/accelerator.py#L902"}}),{c(){$=o("meta"),re=s(),x=o("h1"),L=o("a"),R=o("span"),m(P.$$.fragment),Ue=s(),W=o("span"),F=r("Accelerator"),ae=s(),I=o("p"),H=r("The "),A=o("a"),Tt=r("Accelerator"),Pt=r(` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),ze=s(),D=o("ol"),Y=o("li"),lo=r("Initialize an "),kt=o("a"),so=r("Accelerator"),io=r(" object (that we will call "),tr=o("code"),po=r("accelerator"),ho=r(` in the rest of this
page) as early as possible in your script.`),mo=s(),je=o("li"),uo=r("Pass along your model(s), optimizer(s), dataloader(s) to the "),Lt=o("a"),go=r("prepare()"),fo=r(" method."),_o=s(),U=o("li"),vo=r("(Optional but best practice) Remove all the "),rr=o("code"),bo=r(".cuda()"),yo=r(" or "),ar=o("code"),$o=r(".to(device)"),Eo=r(` in your code and let the
`),or=o("code"),wo=r("accelerator"),Ao=r(" handle device placement for you."),xo=s(),K=o("li"),Do=r("Replace the "),cr=o("code"),To=r("loss.backward()"),Po=r(" in your code by "),nr=o("code"),ko=r("accelerator.backward(loss)"),Lo=r("."),Io=s(),Ne=o("li"),Oo=r(`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),It=o("a"),Co=r("gather()"),Uo=r("."),ua=s(),oe=o("p"),zo=r(`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),lr=o("code"),jo=r("accelerator"),No=r(":"),ga=s(),E=o("ul"),ce=o("li"),sr=o("code"),So=r("print"),qo=r(" statements should be replaced by "),Ot=o("a"),Vo=r("print()"),Go=r(` to be only printed once per
process.`),Mo=s(),Se=o("li"),Ro=r("Use "),ir=o("code"),Wo=r("is_local_main_process()"),Fo=r(" for statements that should be executed once per server."),Ho=s(),qe=o("li"),Yo=r("Use "),dr=o("code"),Ko=r("is_main_process()"),Bo=r(" for statements that should be executed once only."),Xo=s(),Ve=o("li"),Jo=r("Use "),Ct=o("a"),Qo=r("wait_for_everyone()"),Zo=r(` to make sure all processes join that point before continuing
(useful before a model save for instance).`),ec=s(),Ge=o("li"),tc=r("Use "),Ut=o("a"),rc=r("unwrap_model()"),ac=r(" to unwrap your model before saving it."),oc=s(),B=o("li"),cc=r("Use "),zt=o("a"),nc=r("save()"),lc=r(" instead of "),pr=o("code"),sc=r("torch.save"),ic=r("."),dc=s(),k=o("li"),pc=r("Use "),ne=o("a"),hc=r("clip"),hr=o("em"),mc=r("grad_norm"),uc=r("()"),gc=r(" instead of "),mr=o("code"),fc=r("torch.nn.utils.clip_grad_norm_"),_c=r(` and
`),le=o("a"),vc=r("clip"),ur=o("em"),bc=r("grad_value"),yc=r("()"),$c=r(" instead of "),gr=o("code"),Ec=r("torch.nn.utils.clip_grad_value_"),wc=r("."),fa=s(),j=o("p"),Ac=r("To perform gradient accumulation use "),jt=o("a"),xc=r("accumulate()"),Dc=r(" and specify a "),fr=o("code"),Tc=r("gradient_accumulation_steps"),Pc=r(`.
This will also automatically ensure the gradients are synced or unsynced when on multi-node, check if the step should
actually be performed, and auto-scale the loss:`),_a=s(),m(Me.$$.fragment),va=s(),X=o("p"),_r=o("strong"),kc=r("Note"),Lc=r(": Using this with "),vr=o("code"),Ic=r("dispatch_batches=True"),Oc=r(" is currently not supported."),ba=s(),d=o("div"),m(Re.$$.fragment),Cc=s(),br=o("p"),Uc=r("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),zc=s(),yr=o("p"),jc=r("Attributes"),Nc=s(),We=o("ul"),se=o("li"),$r=o("strong"),Sc=r("device"),qc=r(" ("),Er=o("code"),Vc=r("torch.device"),Gc=r(") \u2014 The device to use."),Mc=s(),ie=o("li"),wr=o("strong"),Rc=r("state"),Wc=r(" ("),Nt=o("a"),Fc=r("AcceleratorState"),Hc=r(") \u2014 The distributed setup state."),Yc=s(),de=o("div"),m(Fe.$$.fragment),Kc=s(),Ar=o("p"),Bc=r("A context manager that will lightly wrap around and perform gradient accumulation automatically"),Xc=s(),pe=o("div"),m(He.$$.fragment),Jc=s(),xr=o("p"),Qc=r(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Zc=s(),he=o("div"),m(Ye.$$.fragment),en=s(),J=o("p"),tn=r("Use "),Dr=o("code"),rn=r("accelerator.backward(loss)"),an=r(" in lieu of "),Tr=o("code"),on=r("loss.backward()"),cn=r("."),nn=s(),me=o("div"),m(Ke.$$.fragment),ln=s(),Be=o("p"),sn=r("Alias for "),Pr=o("code"),dn=r("Accelerate.free_memory"),pn=r(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),hn=s(),ue=o("div"),m(Xe.$$.fragment),mn=s(),Je=o("p"),un=r("Should be used in place of "),kr=o("code"),gn=r("torch.nn.utils.clip_grad_norm_"),fn=r("."),_n=s(),ge=o("div"),m(Qe.$$.fragment),vn=s(),Ze=o("p"),bn=r("Should be used in place of "),Lr=o("code"),yn=r("torch.nn.utils.clip_grad_value_"),$n=r("."),En=s(),fe=o("div"),m(et.$$.fragment),wn=s(),Ir=o("p"),An=r("Runs any special end training behaviors, such as stopping trackers"),xn=s(),_e=o("div"),m(tt.$$.fragment),Dn=s(),Or=o("p"),Tn=r(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Pn=s(),N=o("div"),m(rt.$$.fragment),kn=s(),at=o("p"),Ln=r("Gather the values in "),Cr=o("em"),In=r("tensor"),On=r(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Cn=s(),Ur=o("p"),Un=r(`Note:
This gather happens in all processes.`),zn=s(),ve=o("div"),m(ot.$$.fragment),jn=s(),ct=o("p"),Nn=r("Initializes a run for all trackers stored in "),zr=o("code"),Sn=r("self.log_with"),qn=r(", potentially with starting configurations"),Vn=s(),be=o("div"),m(nt.$$.fragment),Gn=s(),jr=o("p"),Mn=r("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Rn=s(),S=o("div"),m(lt.$$.fragment),Wn=s(),Nr=o("p"),Fn=r("Lets the local main process go inside a with block."),Hn=s(),Sr=o("p"),Yn=r("The other processes will enter the with block after the main process exits."),Kn=s(),ye=o("div"),m(st.$$.fragment),Bn=s(),Q=o("p"),Xn=r("Logs "),qr=o("code"),Jn=r("values"),Qn=r(" to all stored trackers in "),Vr=o("code"),Zn=r("self.trackers"),el=r("."),tl=s(),q=o("div"),m(it.$$.fragment),rl=s(),Gr=o("p"),al=r("Lets the main process go first inside a with block."),ol=s(),Mr=o("p"),cl=r("The other processes will enter the with block after the main process exits."),nl=s(),V=o("div"),m(dt.$$.fragment),ll=s(),pt=o("p"),sl=r(`A context manager to disable gradient synchronizations across DDP processes by calling
`),Rr=o("code"),il=r("torch.nn.parallel.DistributedDataParallel.no_sync"),dl=r("."),pl=s(),ht=o("p"),hl=r("If "),Wr=o("code"),ml=r("model"),ul=r(" is not in DDP, this context manager does nothing"),gl=s(),$e=o("div"),m(mt.$$.fragment),fl=s(),Fr=o("p"),_l=r(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),vl=s(),O=o("div"),m(ut.$$.fragment),bl=s(),gt=o("p"),yl=r("Prepare all objects passed in "),Hr=o("code"),$l=r("args"),El=r(` for distributed training and mixed precision, then return them in the same
order.`),wl=s(),Yr=o("p"),Al=r("Accepts the following type of objects:"),xl=s(),Z=o("ul"),St=o("li"),Kr=o("code"),Dl=r("torch.utils.data.DataLoader"),Tl=r(": PyTorch Dataloader"),Pl=s(),qt=o("li"),Br=o("code"),kl=r("torch.nn.Module"),Ll=r(": PyTorch Module"),Il=s(),Vt=o("li"),Xr=o("code"),Ol=r("torch.optim.Optimizer"),Cl=r(": PyTorch Optimizer"),Ul=s(),Ee=o("div"),m(ft.$$.fragment),zl=s(),_t=o("p"),jl=r("Use in replacement of "),Jr=o("code"),Nl=r("print()"),Sl=r(" to only print once per server."),ql=s(),we=o("div"),m(vt.$$.fragment),Vl=s(),ee=o("p"),Gl=r("Reduce the values in "),Qr=o("em"),Ml=r("tensor"),Rl=r(" across all processes based on "),Zr=o("em"),Wl=r("reduction"),Fl=r("."),Hl=s(),C=o("div"),m(bt.$$.fragment),Yl=s(),z=o("p"),Kl=r("Makes note of "),ea=o("code"),Bl=r("objects"),Xl=r(" and will save or load them in during "),ta=o("code"),Jl=r("save_state"),Ql=r(" or "),ra=o("code"),Zl=r("load_state"),es=r("."),ts=s(),aa=o("p"),rs=r(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),as=s(),m(Ae.$$.fragment),os=s(),xe=o("div"),m(yt.$$.fragment),cs=s(),$t=o("p"),ns=r("Save the object passed to disk once per machine. Use in place of "),oa=o("code"),ls=r("torch.save"),ss=r("."),is=s(),De=o("div"),m(Et.$$.fragment),ds=s(),ca=o("p"),ps=r("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),hs=s(),Te=o("div"),m(wt.$$.fragment),ms=s(),na=o("p"),us=r("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),gs=s(),Pe=o("div"),m(At.$$.fragment),fs=s(),te=o("p"),_s=r("Unwraps the "),la=o("code"),vs=r("model"),bs=r(" from the additional layer possible added by "),Gt=o("a"),ys=r("prepare()"),$s=r(`. Useful before saving
the model.`),Es=s(),ke=o("div"),m(xt.$$.fragment),ws=s(),sa=o("p"),As=r(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(l){const y=Zi('[data-svelte="svelte-1phssyn"]',document.head);$=c(y,"META",{name:!0,content:!0}),y.forEach(t),re=i(l),x=c(l,"H1",{class:!0});var Dt=n(x);L=c(Dt,"A",{id:!0,class:!0,href:!0});var Ps=n(L);R=c(Ps,"SPAN",{});var ks=n(R);u(P.$$.fragment,ks),ks.forEach(t),Ps.forEach(t),Ue=i(Dt),W=c(Dt,"SPAN",{});var Ls=n(W);F=a(Ls,"Accelerator"),Ls.forEach(t),Dt.forEach(t),ae=i(l),I=c(l,"P",{});var $a=n(I);H=a($a,"The "),A=c($a,"A",{href:!0});var Is=n(A);Tt=a(Is,"Accelerator"),Is.forEach(t),Pt=a($a,` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:`),$a.forEach(t),ze=i(l),D=c(l,"OL",{});var G=n(D);Y=c(G,"LI",{});var Mt=n(Y);lo=a(Mt,"Initialize an "),kt=c(Mt,"A",{href:!0});var Os=n(kt);so=a(Os,"Accelerator"),Os.forEach(t),io=a(Mt," object (that we will call "),tr=c(Mt,"CODE",{});var Cs=n(tr);po=a(Cs,"accelerator"),Cs.forEach(t),ho=a(Mt,` in the rest of this
page) as early as possible in your script.`),Mt.forEach(t),mo=i(G),je=c(G,"LI",{});var Ea=n(je);uo=a(Ea,"Pass along your model(s), optimizer(s), dataloader(s) to the "),Lt=c(Ea,"A",{href:!0});var Us=n(Lt);go=a(Us,"prepare()"),Us.forEach(t),fo=a(Ea," method."),Ea.forEach(t),_o=i(G),U=c(G,"LI",{});var Le=n(U);vo=a(Le,"(Optional but best practice) Remove all the "),rr=c(Le,"CODE",{});var zs=n(rr);bo=a(zs,".cuda()"),zs.forEach(t),yo=a(Le," or "),ar=c(Le,"CODE",{});var js=n(ar);$o=a(js,".to(device)"),js.forEach(t),Eo=a(Le,` in your code and let the
`),or=c(Le,"CODE",{});var Ns=n(or);wo=a(Ns,"accelerator"),Ns.forEach(t),Ao=a(Le," handle device placement for you."),Le.forEach(t),xo=i(G),K=c(G,"LI",{});var Rt=n(K);Do=a(Rt,"Replace the "),cr=c(Rt,"CODE",{});var Ss=n(cr);To=a(Ss,"loss.backward()"),Ss.forEach(t),Po=a(Rt," in your code by "),nr=c(Rt,"CODE",{});var qs=n(nr);ko=a(qs,"accelerator.backward(loss)"),qs.forEach(t),Lo=a(Rt,"."),Rt.forEach(t),Io=i(G),Ne=c(G,"LI",{});var wa=n(Ne);Oo=a(wa,`(Optional, when using distributed evaluation) Gather your predictions and labels before storing them or using
them for metric computation using `),It=c(wa,"A",{href:!0});var Vs=n(It);Co=a(Vs,"gather()"),Vs.forEach(t),Uo=a(wa,"."),wa.forEach(t),G.forEach(t),ua=i(l),oe=c(l,"P",{});var Aa=n(oe);zo=a(Aa,`This is all that is needed in most cases. For more advanced cases or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),lr=c(Aa,"CODE",{});var Gs=n(lr);jo=a(Gs,"accelerator"),Gs.forEach(t),No=a(Aa,":"),Aa.forEach(t),ga=i(l),E=c(l,"UL",{});var T=n(E);ce=c(T,"LI",{});var ia=n(ce);sr=c(ia,"CODE",{});var Ms=n(sr);So=a(Ms,"print"),Ms.forEach(t),qo=a(ia," statements should be replaced by "),Ot=c(ia,"A",{href:!0});var Rs=n(Ot);Vo=a(Rs,"print()"),Rs.forEach(t),Go=a(ia,` to be only printed once per
process.`),ia.forEach(t),Mo=i(T),Se=c(T,"LI",{});var xa=n(Se);Ro=a(xa,"Use "),ir=c(xa,"CODE",{});var Ws=n(ir);Wo=a(Ws,"is_local_main_process()"),Ws.forEach(t),Fo=a(xa," for statements that should be executed once per server."),xa.forEach(t),Ho=i(T),qe=c(T,"LI",{});var Da=n(qe);Yo=a(Da,"Use "),dr=c(Da,"CODE",{});var Fs=n(dr);Ko=a(Fs,"is_main_process()"),Fs.forEach(t),Bo=a(Da," for statements that should be executed once only."),Da.forEach(t),Xo=i(T),Ve=c(T,"LI",{});var Ta=n(Ve);Jo=a(Ta,"Use "),Ct=c(Ta,"A",{href:!0});var Hs=n(Ct);Qo=a(Hs,"wait_for_everyone()"),Hs.forEach(t),Zo=a(Ta,` to make sure all processes join that point before continuing
(useful before a model save for instance).`),Ta.forEach(t),ec=i(T),Ge=c(T,"LI",{});var Pa=n(Ge);tc=a(Pa,"Use "),Ut=c(Pa,"A",{href:!0});var Ys=n(Ut);rc=a(Ys,"unwrap_model()"),Ys.forEach(t),ac=a(Pa," to unwrap your model before saving it."),Pa.forEach(t),oc=i(T),B=c(T,"LI",{});var Wt=n(B);cc=a(Wt,"Use "),zt=c(Wt,"A",{href:!0});var Ks=n(zt);nc=a(Ks,"save()"),Ks.forEach(t),lc=a(Wt," instead of "),pr=c(Wt,"CODE",{});var Bs=n(pr);sc=a(Bs,"torch.save"),Bs.forEach(t),ic=a(Wt,"."),Wt.forEach(t),dc=i(T),k=c(T,"LI",{});var M=n(k);pc=a(M,"Use "),ne=c(M,"A",{href:!0});var ka=n(ne);hc=a(ka,"clip"),hr=c(ka,"EM",{});var Xs=n(hr);mc=a(Xs,"grad_norm"),Xs.forEach(t),uc=a(ka,"()"),ka.forEach(t),gc=a(M," instead of "),mr=c(M,"CODE",{});var Js=n(mr);fc=a(Js,"torch.nn.utils.clip_grad_norm_"),Js.forEach(t),_c=a(M,` and
`),le=c(M,"A",{href:!0});var La=n(le);vc=a(La,"clip"),ur=c(La,"EM",{});var Qs=n(ur);bc=a(Qs,"grad_value"),Qs.forEach(t),yc=a(La,"()"),La.forEach(t),$c=a(M," instead of "),gr=c(M,"CODE",{});var Zs=n(gr);Ec=a(Zs,"torch.nn.utils.clip_grad_value_"),Zs.forEach(t),wc=a(M,"."),M.forEach(t),T.forEach(t),fa=i(l),j=c(l,"P",{});var Ft=n(j);Ac=a(Ft,"To perform gradient accumulation use "),jt=c(Ft,"A",{href:!0});var ei=n(jt);xc=a(ei,"accumulate()"),ei.forEach(t),Dc=a(Ft," and specify a "),fr=c(Ft,"CODE",{});var ti=n(fr);Tc=a(ti,"gradient_accumulation_steps"),ti.forEach(t),Pc=a(Ft,`.
This will also automatically ensure the gradients are synced or unsynced when on multi-node, check if the step should
actually be performed, and auto-scale the loss:`),Ft.forEach(t),_a=i(l),u(Me.$$.fragment,l),va=i(l),X=c(l,"P",{});var da=n(X);_r=c(da,"STRONG",{});var ri=n(_r);kc=a(ri,"Note"),ri.forEach(t),Lc=a(da,": Using this with "),vr=c(da,"CODE",{});var ai=n(vr);Ic=a(ai,"dispatch_batches=True"),ai.forEach(t),Oc=a(da," is currently not supported."),da.forEach(t),ba=i(l),d=c(l,"DIV",{class:!0});var p=n(d);u(Re.$$.fragment,p),Cc=i(p),br=c(p,"P",{});var oi=n(br);Uc=a(oi,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),oi.forEach(t),zc=i(p),yr=c(p,"P",{});var ci=n(yr);jc=a(ci,"Attributes"),ci.forEach(t),Nc=i(p),We=c(p,"UL",{});var Ia=n(We);se=c(Ia,"LI",{});var pa=n(se);$r=c(pa,"STRONG",{});var ni=n($r);Sc=a(ni,"device"),ni.forEach(t),qc=a(pa," ("),Er=c(pa,"CODE",{});var li=n(Er);Vc=a(li,"torch.device"),li.forEach(t),Gc=a(pa,") \u2014 The device to use."),pa.forEach(t),Mc=i(Ia),ie=c(Ia,"LI",{});var ha=n(ie);wr=c(ha,"STRONG",{});var si=n(wr);Rc=a(si,"state"),si.forEach(t),Wc=a(ha," ("),Nt=c(ha,"A",{href:!0});var ii=n(Nt);Fc=a(ii,"AcceleratorState"),ii.forEach(t),Hc=a(ha,") \u2014 The distributed setup state."),ha.forEach(t),Ia.forEach(t),Yc=i(p),de=c(p,"DIV",{class:!0});var Oa=n(de);u(Fe.$$.fragment,Oa),Kc=i(Oa),Ar=c(Oa,"P",{});var di=n(Ar);Bc=a(di,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),di.forEach(t),Oa.forEach(t),Xc=i(p),pe=c(p,"DIV",{class:!0});var Ca=n(pe);u(He.$$.fragment,Ca),Jc=i(Ca),xr=c(Ca,"P",{});var pi=n(xr);Qc=a(pi,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),pi.forEach(t),Ca.forEach(t),Zc=i(p),he=c(p,"DIV",{class:!0});var Ua=n(he);u(Ye.$$.fragment,Ua),en=i(Ua),J=c(Ua,"P",{});var Ht=n(J);tn=a(Ht,"Use "),Dr=c(Ht,"CODE",{});var hi=n(Dr);rn=a(hi,"accelerator.backward(loss)"),hi.forEach(t),an=a(Ht," in lieu of "),Tr=c(Ht,"CODE",{});var mi=n(Tr);on=a(mi,"loss.backward()"),mi.forEach(t),cn=a(Ht,"."),Ht.forEach(t),Ua.forEach(t),nn=i(p),me=c(p,"DIV",{class:!0});var za=n(me);u(Ke.$$.fragment,za),ln=i(za),Be=c(za,"P",{});var ja=n(Be);sn=a(ja,"Alias for "),Pr=c(ja,"CODE",{});var ui=n(Pr);dn=a(ui,"Accelerate.free_memory"),ui.forEach(t),pn=a(ja,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),ja.forEach(t),za.forEach(t),hn=i(p),ue=c(p,"DIV",{class:!0});var Na=n(ue);u(Xe.$$.fragment,Na),mn=i(Na),Je=c(Na,"P",{});var Sa=n(Je);un=a(Sa,"Should be used in place of "),kr=c(Sa,"CODE",{});var gi=n(kr);gn=a(gi,"torch.nn.utils.clip_grad_norm_"),gi.forEach(t),fn=a(Sa,"."),Sa.forEach(t),Na.forEach(t),_n=i(p),ge=c(p,"DIV",{class:!0});var qa=n(ge);u(Qe.$$.fragment,qa),vn=i(qa),Ze=c(qa,"P",{});var Va=n(Ze);bn=a(Va,"Should be used in place of "),Lr=c(Va,"CODE",{});var fi=n(Lr);yn=a(fi,"torch.nn.utils.clip_grad_value_"),fi.forEach(t),$n=a(Va,"."),Va.forEach(t),qa.forEach(t),En=i(p),fe=c(p,"DIV",{class:!0});var Ga=n(fe);u(et.$$.fragment,Ga),wn=i(Ga),Ir=c(Ga,"P",{});var _i=n(Ir);An=a(_i,"Runs any special end training behaviors, such as stopping trackers"),_i.forEach(t),Ga.forEach(t),xn=i(p),_e=c(p,"DIV",{class:!0});var Ma=n(_e);u(tt.$$.fragment,Ma),Dn=i(Ma),Or=c(Ma,"P",{});var vi=n(Or);Tn=a(vi,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),vi.forEach(t),Ma.forEach(t),Pn=i(p),N=c(p,"DIV",{class:!0});var Yt=n(N);u(rt.$$.fragment,Yt),kn=i(Yt),at=c(Yt,"P",{});var Ra=n(at);Ln=a(Ra,"Gather the values in "),Cr=c(Ra,"EM",{});var bi=n(Cr);In=a(bi,"tensor"),bi.forEach(t),On=a(Ra,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Ra.forEach(t),Cn=i(Yt),Ur=c(Yt,"P",{});var yi=n(Ur);Un=a(yi,`Note:
This gather happens in all processes.`),yi.forEach(t),Yt.forEach(t),zn=i(p),ve=c(p,"DIV",{class:!0});var Wa=n(ve);u(ot.$$.fragment,Wa),jn=i(Wa),ct=c(Wa,"P",{});var Fa=n(ct);Nn=a(Fa,"Initializes a run for all trackers stored in "),zr=c(Fa,"CODE",{});var $i=n(zr);Sn=a($i,"self.log_with"),$i.forEach(t),qn=a(Fa,", potentially with starting configurations"),Fa.forEach(t),Wa.forEach(t),Vn=i(p),be=c(p,"DIV",{class:!0});var Ha=n(be);u(nt.$$.fragment,Ha),Gn=i(Ha),jr=c(Ha,"P",{});var Ei=n(jr);Mn=a(Ei,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Ei.forEach(t),Ha.forEach(t),Rn=i(p),S=c(p,"DIV",{class:!0});var Kt=n(S);u(lt.$$.fragment,Kt),Wn=i(Kt),Nr=c(Kt,"P",{});var wi=n(Nr);Fn=a(wi,"Lets the local main process go inside a with block."),wi.forEach(t),Hn=i(Kt),Sr=c(Kt,"P",{});var Ai=n(Sr);Yn=a(Ai,"The other processes will enter the with block after the main process exits."),Ai.forEach(t),Kt.forEach(t),Kn=i(p),ye=c(p,"DIV",{class:!0});var Ya=n(ye);u(st.$$.fragment,Ya),Bn=i(Ya),Q=c(Ya,"P",{});var Bt=n(Q);Xn=a(Bt,"Logs "),qr=c(Bt,"CODE",{});var xi=n(qr);Jn=a(xi,"values"),xi.forEach(t),Qn=a(Bt," to all stored trackers in "),Vr=c(Bt,"CODE",{});var Di=n(Vr);Zn=a(Di,"self.trackers"),Di.forEach(t),el=a(Bt,"."),Bt.forEach(t),Ya.forEach(t),tl=i(p),q=c(p,"DIV",{class:!0});var Xt=n(q);u(it.$$.fragment,Xt),rl=i(Xt),Gr=c(Xt,"P",{});var Ti=n(Gr);al=a(Ti,"Lets the main process go first inside a with block."),Ti.forEach(t),ol=i(Xt),Mr=c(Xt,"P",{});var Pi=n(Mr);cl=a(Pi,"The other processes will enter the with block after the main process exits."),Pi.forEach(t),Xt.forEach(t),nl=i(p),V=c(p,"DIV",{class:!0});var Jt=n(V);u(dt.$$.fragment,Jt),ll=i(Jt),pt=c(Jt,"P",{});var Ka=n(pt);sl=a(Ka,`A context manager to disable gradient synchronizations across DDP processes by calling
`),Rr=c(Ka,"CODE",{});var ki=n(Rr);il=a(ki,"torch.nn.parallel.DistributedDataParallel.no_sync"),ki.forEach(t),dl=a(Ka,"."),Ka.forEach(t),pl=i(Jt),ht=c(Jt,"P",{});var Ba=n(ht);hl=a(Ba,"If "),Wr=c(Ba,"CODE",{});var Li=n(Wr);ml=a(Li,"model"),Li.forEach(t),ul=a(Ba," is not in DDP, this context manager does nothing"),Ba.forEach(t),Jt.forEach(t),gl=i(p),$e=c(p,"DIV",{class:!0});var Xa=n($e);u(mt.$$.fragment,Xa),fl=i(Xa),Fr=c(Xa,"P",{});var Ii=n(Fr);_l=a(Ii,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Ii.forEach(t),Xa.forEach(t),vl=i(p),O=c(p,"DIV",{class:!0});var Ie=n(O);u(ut.$$.fragment,Ie),bl=i(Ie),gt=c(Ie,"P",{});var Ja=n(gt);yl=a(Ja,"Prepare all objects passed in "),Hr=c(Ja,"CODE",{});var Oi=n(Hr);$l=a(Oi,"args"),Oi.forEach(t),El=a(Ja,` for distributed training and mixed precision, then return them in the same
order.`),Ja.forEach(t),wl=i(Ie),Yr=c(Ie,"P",{});var Ci=n(Yr);Al=a(Ci,"Accepts the following type of objects:"),Ci.forEach(t),xl=i(Ie),Z=c(Ie,"UL",{});var Qt=n(Z);St=c(Qt,"LI",{});var xs=n(St);Kr=c(xs,"CODE",{});var Ui=n(Kr);Dl=a(Ui,"torch.utils.data.DataLoader"),Ui.forEach(t),Tl=a(xs,": PyTorch Dataloader"),xs.forEach(t),Pl=i(Qt),qt=c(Qt,"LI",{});var Ds=n(qt);Br=c(Ds,"CODE",{});var zi=n(Br);kl=a(zi,"torch.nn.Module"),zi.forEach(t),Ll=a(Ds,": PyTorch Module"),Ds.forEach(t),Il=i(Qt),Vt=c(Qt,"LI",{});var Ts=n(Vt);Xr=c(Ts,"CODE",{});var ji=n(Xr);Ol=a(ji,"torch.optim.Optimizer"),ji.forEach(t),Cl=a(Ts,": PyTorch Optimizer"),Ts.forEach(t),Qt.forEach(t),Ie.forEach(t),Ul=i(p),Ee=c(p,"DIV",{class:!0});var Qa=n(Ee);u(ft.$$.fragment,Qa),zl=i(Qa),_t=c(Qa,"P",{});var Za=n(_t);jl=a(Za,"Use in replacement of "),Jr=c(Za,"CODE",{});var Ni=n(Jr);Nl=a(Ni,"print()"),Ni.forEach(t),Sl=a(Za," to only print once per server."),Za.forEach(t),Qa.forEach(t),ql=i(p),we=c(p,"DIV",{class:!0});var eo=n(we);u(vt.$$.fragment,eo),Vl=i(eo),ee=c(eo,"P",{});var Zt=n(ee);Gl=a(Zt,"Reduce the values in "),Qr=c(Zt,"EM",{});var Si=n(Qr);Ml=a(Si,"tensor"),Si.forEach(t),Rl=a(Zt," across all processes based on "),Zr=c(Zt,"EM",{});var qi=n(Zr);Wl=a(qi,"reduction"),qi.forEach(t),Fl=a(Zt,"."),Zt.forEach(t),eo.forEach(t),Hl=i(p),C=c(p,"DIV",{class:!0});var Oe=n(C);u(bt.$$.fragment,Oe),Yl=i(Oe),z=c(Oe,"P",{});var Ce=n(z);Kl=a(Ce,"Makes note of "),ea=c(Ce,"CODE",{});var Vi=n(ea);Bl=a(Vi,"objects"),Vi.forEach(t),Xl=a(Ce," and will save or load them in during "),ta=c(Ce,"CODE",{});var Gi=n(ta);Jl=a(Gi,"save_state"),Gi.forEach(t),Ql=a(Ce," or "),ra=c(Ce,"CODE",{});var Mi=n(ra);Zl=a(Mi,"load_state"),Mi.forEach(t),es=a(Ce,"."),Ce.forEach(t),ts=i(Oe),aa=c(Oe,"P",{});var Ri=n(aa);rs=a(Ri,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Ri.forEach(t),as=i(Oe),u(Ae.$$.fragment,Oe),Oe.forEach(t),os=i(p),xe=c(p,"DIV",{class:!0});var to=n(xe);u(yt.$$.fragment,to),cs=i(to),$t=c(to,"P",{});var ro=n($t);ns=a(ro,"Save the object passed to disk once per machine. Use in place of "),oa=c(ro,"CODE",{});var Wi=n(oa);ls=a(Wi,"torch.save"),Wi.forEach(t),ss=a(ro,"."),ro.forEach(t),to.forEach(t),is=i(p),De=c(p,"DIV",{class:!0});var ao=n(De);u(Et.$$.fragment,ao),ds=i(ao),ca=c(ao,"P",{});var Fi=n(ca);ps=a(Fi,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Fi.forEach(t),ao.forEach(t),hs=i(p),Te=c(p,"DIV",{class:!0});var oo=n(Te);u(wt.$$.fragment,oo),ms=i(oo),na=c(oo,"P",{});var Hi=n(na);us=a(Hi,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Hi.forEach(t),oo.forEach(t),gs=i(p),Pe=c(p,"DIV",{class:!0});var co=n(Pe);u(At.$$.fragment,co),fs=i(co),te=c(co,"P",{});var er=n(te);_s=a(er,"Unwraps the "),la=c(er,"CODE",{});var Yi=n(la);vs=a(Yi,"model"),Yi.forEach(t),bs=a(er," from the additional layer possible added by "),Gt=c(er,"A",{href:!0});var Ki=n(Gt);ys=a(Ki,"prepare()"),Ki.forEach(t),$s=a(er,`. Useful before saving
the model.`),er.forEach(t),co.forEach(t),Es=i(p),ke=c(p,"DIV",{class:!0});var no=n(ke);u(xt.$$.fragment,no),ws=i(no),sa=c(no,"P",{});var Bi=n(sa);As=a(Bi,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),Bi.forEach(t),no.forEach(t),p.forEach(t),this.h()},h(){h($,"name","hf:doc:metadata"),h($,"content",JSON.stringify(nd)),h(L,"id","accelerate.Accelerator"),h(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(L,"href","#accelerate.Accelerator"),h(x,"class","relative group"),h(A,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator"),h(kt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator"),h(Lt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.prepare"),h(It,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.gather"),h(Ot,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.print"),h(Ct,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.wait_for_everyone"),h(Ut,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.unwrap_model"),h(zt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.save"),h(ne,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.clip_grad_norm_"),h(le,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.clip_grad_value_"),h(jt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.accumulate"),h(Nt,"href","/docs/accelerate/pr_484/en/internal#accelerate.state.AcceleratorState"),h(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Gt,"href","/docs/accelerate/pr_484/en/accelerator#accelerate.Accelerator.prepare"),h(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(l,y){e(document.head,$),w(l,re,y),w(l,x,y),e(x,L),e(L,R),g(P,R,null),e(x,Ue),e(x,W),e(W,F),w(l,ae,y),w(l,I,y),e(I,H),e(I,A),e(A,Tt),e(I,Pt),w(l,ze,y),w(l,D,y),e(D,Y),e(Y,lo),e(Y,kt),e(kt,so),e(Y,io),e(Y,tr),e(tr,po),e(Y,ho),e(D,mo),e(D,je),e(je,uo),e(je,Lt),e(Lt,go),e(je,fo),e(D,_o),e(D,U),e(U,vo),e(U,rr),e(rr,bo),e(U,yo),e(U,ar),e(ar,$o),e(U,Eo),e(U,or),e(or,wo),e(U,Ao),e(D,xo),e(D,K),e(K,Do),e(K,cr),e(cr,To),e(K,Po),e(K,nr),e(nr,ko),e(K,Lo),e(D,Io),e(D,Ne),e(Ne,Oo),e(Ne,It),e(It,Co),e(Ne,Uo),w(l,ua,y),w(l,oe,y),e(oe,zo),e(oe,lr),e(lr,jo),e(oe,No),w(l,ga,y),w(l,E,y),e(E,ce),e(ce,sr),e(sr,So),e(ce,qo),e(ce,Ot),e(Ot,Vo),e(ce,Go),e(E,Mo),e(E,Se),e(Se,Ro),e(Se,ir),e(ir,Wo),e(Se,Fo),e(E,Ho),e(E,qe),e(qe,Yo),e(qe,dr),e(dr,Ko),e(qe,Bo),e(E,Xo),e(E,Ve),e(Ve,Jo),e(Ve,Ct),e(Ct,Qo),e(Ve,Zo),e(E,ec),e(E,Ge),e(Ge,tc),e(Ge,Ut),e(Ut,rc),e(Ge,ac),e(E,oc),e(E,B),e(B,cc),e(B,zt),e(zt,nc),e(B,lc),e(B,pr),e(pr,sc),e(B,ic),e(E,dc),e(E,k),e(k,pc),e(k,ne),e(ne,hc),e(ne,hr),e(hr,mc),e(ne,uc),e(k,gc),e(k,mr),e(mr,fc),e(k,_c),e(k,le),e(le,vc),e(le,ur),e(ur,bc),e(le,yc),e(k,$c),e(k,gr),e(gr,Ec),e(k,wc),w(l,fa,y),w(l,j,y),e(j,Ac),e(j,jt),e(jt,xc),e(j,Dc),e(j,fr),e(fr,Tc),e(j,Pc),w(l,_a,y),g(Me,l,y),w(l,va,y),w(l,X,y),e(X,_r),e(_r,kc),e(X,Lc),e(X,vr),e(vr,Ic),e(X,Oc),w(l,ba,y),w(l,d,y),g(Re,d,null),e(d,Cc),e(d,br),e(br,Uc),e(d,zc),e(d,yr),e(yr,jc),e(d,Nc),e(d,We),e(We,se),e(se,$r),e($r,Sc),e(se,qc),e(se,Er),e(Er,Vc),e(se,Gc),e(We,Mc),e(We,ie),e(ie,wr),e(wr,Rc),e(ie,Wc),e(ie,Nt),e(Nt,Fc),e(ie,Hc),e(d,Yc),e(d,de),g(Fe,de,null),e(de,Kc),e(de,Ar),e(Ar,Bc),e(d,Xc),e(d,pe),g(He,pe,null),e(pe,Jc),e(pe,xr),e(xr,Qc),e(d,Zc),e(d,he),g(Ye,he,null),e(he,en),e(he,J),e(J,tn),e(J,Dr),e(Dr,rn),e(J,an),e(J,Tr),e(Tr,on),e(J,cn),e(d,nn),e(d,me),g(Ke,me,null),e(me,ln),e(me,Be),e(Be,sn),e(Be,Pr),e(Pr,dn),e(Be,pn),e(d,hn),e(d,ue),g(Xe,ue,null),e(ue,mn),e(ue,Je),e(Je,un),e(Je,kr),e(kr,gn),e(Je,fn),e(d,_n),e(d,ge),g(Qe,ge,null),e(ge,vn),e(ge,Ze),e(Ze,bn),e(Ze,Lr),e(Lr,yn),e(Ze,$n),e(d,En),e(d,fe),g(et,fe,null),e(fe,wn),e(fe,Ir),e(Ir,An),e(d,xn),e(d,_e),g(tt,_e,null),e(_e,Dn),e(_e,Or),e(Or,Tn),e(d,Pn),e(d,N),g(rt,N,null),e(N,kn),e(N,at),e(at,Ln),e(at,Cr),e(Cr,In),e(at,On),e(N,Cn),e(N,Ur),e(Ur,Un),e(d,zn),e(d,ve),g(ot,ve,null),e(ve,jn),e(ve,ct),e(ct,Nn),e(ct,zr),e(zr,Sn),e(ct,qn),e(d,Vn),e(d,be),g(nt,be,null),e(be,Gn),e(be,jr),e(jr,Mn),e(d,Rn),e(d,S),g(lt,S,null),e(S,Wn),e(S,Nr),e(Nr,Fn),e(S,Hn),e(S,Sr),e(Sr,Yn),e(d,Kn),e(d,ye),g(st,ye,null),e(ye,Bn),e(ye,Q),e(Q,Xn),e(Q,qr),e(qr,Jn),e(Q,Qn),e(Q,Vr),e(Vr,Zn),e(Q,el),e(d,tl),e(d,q),g(it,q,null),e(q,rl),e(q,Gr),e(Gr,al),e(q,ol),e(q,Mr),e(Mr,cl),e(d,nl),e(d,V),g(dt,V,null),e(V,ll),e(V,pt),e(pt,sl),e(pt,Rr),e(Rr,il),e(pt,dl),e(V,pl),e(V,ht),e(ht,hl),e(ht,Wr),e(Wr,ml),e(ht,ul),e(d,gl),e(d,$e),g(mt,$e,null),e($e,fl),e($e,Fr),e(Fr,_l),e(d,vl),e(d,O),g(ut,O,null),e(O,bl),e(O,gt),e(gt,yl),e(gt,Hr),e(Hr,$l),e(gt,El),e(O,wl),e(O,Yr),e(Yr,Al),e(O,xl),e(O,Z),e(Z,St),e(St,Kr),e(Kr,Dl),e(St,Tl),e(Z,Pl),e(Z,qt),e(qt,Br),e(Br,kl),e(qt,Ll),e(Z,Il),e(Z,Vt),e(Vt,Xr),e(Xr,Ol),e(Vt,Cl),e(d,Ul),e(d,Ee),g(ft,Ee,null),e(Ee,zl),e(Ee,_t),e(_t,jl),e(_t,Jr),e(Jr,Nl),e(_t,Sl),e(d,ql),e(d,we),g(vt,we,null),e(we,Vl),e(we,ee),e(ee,Gl),e(ee,Qr),e(Qr,Ml),e(ee,Rl),e(ee,Zr),e(Zr,Wl),e(ee,Fl),e(d,Hl),e(d,C),g(bt,C,null),e(C,Yl),e(C,z),e(z,Kl),e(z,ea),e(ea,Bl),e(z,Xl),e(z,ta),e(ta,Jl),e(z,Ql),e(z,ra),e(ra,Zl),e(z,es),e(C,ts),e(C,aa),e(aa,rs),e(C,as),g(Ae,C,null),e(d,os),e(d,xe),g(yt,xe,null),e(xe,cs),e(xe,$t),e($t,ns),e($t,oa),e(oa,ls),e($t,ss),e(d,is),e(d,De),g(Et,De,null),e(De,ds),e(De,ca),e(ca,ps),e(d,hs),e(d,Te),g(wt,Te,null),e(Te,ms),e(Te,na),e(na,us),e(d,gs),e(d,Pe),g(At,Pe,null),e(Pe,fs),e(Pe,te),e(te,_s),e(te,la),e(la,vs),e(te,bs),e(te,Gt),e(Gt,ys),e(te,$s),e(d,Es),e(d,ke),g(xt,ke,null),e(ke,ws),e(ke,sa),e(sa,As),ya=!0},p(l,[y]){const Dt={};y&2&&(Dt.$$scope={dirty:y,ctx:l}),Ae.$set(Dt)},i(l){ya||(f(P.$$.fragment,l),f(Me.$$.fragment,l),f(Re.$$.fragment,l),f(Fe.$$.fragment,l),f(He.$$.fragment,l),f(Ye.$$.fragment,l),f(Ke.$$.fragment,l),f(Xe.$$.fragment,l),f(Qe.$$.fragment,l),f(et.$$.fragment,l),f(tt.$$.fragment,l),f(rt.$$.fragment,l),f(ot.$$.fragment,l),f(nt.$$.fragment,l),f(lt.$$.fragment,l),f(st.$$.fragment,l),f(it.$$.fragment,l),f(dt.$$.fragment,l),f(mt.$$.fragment,l),f(ut.$$.fragment,l),f(ft.$$.fragment,l),f(vt.$$.fragment,l),f(bt.$$.fragment,l),f(Ae.$$.fragment,l),f(yt.$$.fragment,l),f(Et.$$.fragment,l),f(wt.$$.fragment,l),f(At.$$.fragment,l),f(xt.$$.fragment,l),ya=!0)},o(l){_(P.$$.fragment,l),_(Me.$$.fragment,l),_(Re.$$.fragment,l),_(Fe.$$.fragment,l),_(He.$$.fragment,l),_(Ye.$$.fragment,l),_(Ke.$$.fragment,l),_(Xe.$$.fragment,l),_(Qe.$$.fragment,l),_(et.$$.fragment,l),_(tt.$$.fragment,l),_(rt.$$.fragment,l),_(ot.$$.fragment,l),_(nt.$$.fragment,l),_(lt.$$.fragment,l),_(st.$$.fragment,l),_(it.$$.fragment,l),_(dt.$$.fragment,l),_(mt.$$.fragment,l),_(ut.$$.fragment,l),_(ft.$$.fragment,l),_(vt.$$.fragment,l),_(bt.$$.fragment,l),_(Ae.$$.fragment,l),_(yt.$$.fragment,l),_(Et.$$.fragment,l),_(wt.$$.fragment,l),_(At.$$.fragment,l),_(xt.$$.fragment,l),ya=!1},d(l){t($),l&&t(re),l&&t(x),v(P),l&&t(ae),l&&t(I),l&&t(ze),l&&t(D),l&&t(ua),l&&t(oe),l&&t(ga),l&&t(E),l&&t(fa),l&&t(j),l&&t(_a),v(Me,l),l&&t(va),l&&t(X),l&&t(ba),l&&t(d),v(Re),v(Fe),v(He),v(Ye),v(Ke),v(Xe),v(Qe),v(et),v(tt),v(rt),v(ot),v(nt),v(lt),v(st),v(it),v(dt),v(mt),v(ut),v(ft),v(vt),v(bt),v(Ae),v(yt),v(Et),v(wt),v(At),v(xt)}}}const nd={local:"accelerate.Accelerator",title:"Accelerator"};function ld(ma){return ed(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class md extends Xi{constructor($){super();Ji(this,$,ld,cd,Qi,{})}}export{md as default,nd as metadata};
