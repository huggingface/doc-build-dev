import{S as fh,i as mh,s as uh,F as gh,e as n,w as k,k as h,c as i,a as l,x as P,d as o,m as p,b as v,g as d,G as t,y as E,P as vh,H as wh,I as yh,J as bh,q as b,o as $,B as j,v as _h,T as $h,U as kh,t as a,M as Ph,h as s,L as Eh}from"../chunks/vendor-hf-doc-builder.js";import{T as se}from"../chunks/Tip-hf-doc-builder.js";import{D as Ct}from"../chunks/Docstring-hf-doc-builder.js";import{C as O}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as ve}from"../chunks/IconCopyLink-hf-doc-builder.js";const{window:jh}=$h;function xh(U){let c,g,f,u,w,m,_,A,x;u=new ve({props:{classNames:"text-smd"}});const G=U[4].default,C=gh(G,U,U[3],null);return{c(){c=n("div"),g=n("a"),f=n("span"),k(u.$$.fragment),m=h(),C&&C.c(),this.h()},l(y){c=i(y,"DIV",{class:!0});var T=l(c);g=i(T,"A",{id:!0,class:!0,href:!0});var N=l(g);f=i(N,"SPAN",{});var L=l(f);P(u.$$.fragment,L),L.forEach(o),N.forEach(o),m=p(T),C&&C.l(T),T.forEach(o),this.h()},h(){v(g,"id",U[0]),v(g,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(g,"href",w=`#${U[0]}`),v(c,"class","relative group rounded-md")},m(y,T){d(y,c,T),t(c,g),t(g,f),E(u,f,null),t(c,m),C&&C.m(c,null),U[5](c),_=!0,A||(x=vh(jh,"hashchange",U[2]),A=!0)},p(y,[T]){(!_||T&1)&&v(g,"id",y[0]),(!_||T&1&&w!==(w=`#${y[0]}`))&&v(g,"href",w),C&&C.p&&(!_||T&8)&&wh(C,G,y,y[3],_?bh(G,y[3],T,null):yh(y[3]),null)},i(y){_||(b(u.$$.fragment,y),b(C,y),_=!0)},o(y){$(u.$$.fragment,y),$(C,y),_=!1},d(y){y&&o(c),j(u),C&&C.d(y),U[5](null),A=!1,x()}}}const ph="bg-yellow-50 dark:bg-[#494a3d]";function Uh(U,c,g){let{$$slots:f={},$$scope:u}=c,{anchor:w}=c,m;function _(){const{hash:x}=window.location,G=x.substring(1);m&&m.classList.remove(...ph.split(" ")),G===w&&m.classList.add(...ph.split(" "))}_h(()=>{_()});function A(x){kh[x?"unshift":"push"](()=>{m=x,g(1,m)})}return U.$$set=x=>{"anchor"in x&&g(0,w=x.anchor),"$$scope"in x&&g(3,u=x.$$scope)},[w,m,_,u,f,A]}class Ah extends fh{constructor(c){super();mh(this,c,Uh,xh,uh,{anchor:0})}}function Gh(U){let c,g;return{c(){c=n("p"),g=a("This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future.")},l(f){c=i(f,"P",{});var u=l(c);g=s(u,"This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future."),u.forEach(o)},m(f,u){d(f,c,u),t(c,g)},d(f){f&&o(c)}}}function Ch(U){let c,g;return{c(){c=n("p"),g=a("You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device.")},l(f){c=i(f,"P",{});var u=l(c);g=s(u,"You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device."),u.forEach(o)},m(f,u){d(f,c,u),t(c,g)},d(f){f&&o(c)}}}function Th(U){let c,g,f,u,w;return{c(){c=n("p"),g=a("This only supports inference of your model, not training. Most of the computation happens behind "),f=n("code"),u=a("torch.no_grad()"),w=a(" context managers to avoid spending some GPU memory with intermediate activations.")},l(m){c=i(m,"P",{});var _=l(c);g=s(_,"This only supports inference of your model, not training. Most of the computation happens behind "),f=i(_,"CODE",{});var A=l(f);u=s(A,"torch.no_grad()"),A.forEach(o),w=s(_," context managers to avoid spending some GPU memory with intermediate activations."),_.forEach(o)},m(m,_){d(m,c,_),t(c,g),t(c,f),t(f,u),t(c,w)},d(m){m&&o(c)}}}function qh(U){let c,g,f,u,w;return{c(){c=n("p"),g=a("You can derive all sizes of the model (and thus compute a "),f=n("code"),u=a("device_map"),w=a(") on a model that is on the meta device.")},l(m){c=i(m,"P",{});var _=l(c);g=s(_,"You can derive all sizes of the model (and thus compute a "),f=i(_,"CODE",{});var A=l(f);u=s(A,"device_map"),A.forEach(o),w=s(_,") on a model that is on the meta device."),_.forEach(o)},m(m,_){d(m,c,_),t(c,g),t(c,f),t(f,u),t(c,w)},d(m){m&&o(c)}}}function Ih(U){let c,g,f,u,w,m,_,A,x,G,C,y,T,N;return{c(){c=n("p"),g=a("The options "),f=n("code"),u=a('"auto"'),w=a(" and "),m=n("code"),_=a('"balanced"'),A=a(" produce the same results for now, but the behavior of "),x=n("code"),G=a('"auto"'),C=a(" might change in the future if we find a strategy that makes more sense, while "),y=n("code"),T=a('"balanced"'),N=a(" will stay stable.")},l(L){c=i(L,"P",{});var q=l(c);g=s(q,"The options "),f=i(q,"CODE",{});var Tt=l(f);u=s(Tt,'"auto"'),Tt.forEach(o),w=s(q," and "),m=i(q,"CODE",{});var Ke=l(m);_=s(Ke,'"balanced"'),Ke.forEach(o),A=s(q," produce the same results for now, but the behavior of "),x=i(q,"CODE",{});var F=l(x);G=s(F,'"auto"'),F.forEach(o),C=s(q," might change in the future if we find a strategy that makes more sense, while "),y=i(q,"CODE",{});var we=l(y);T=s(we,'"balanced"'),we.forEach(o),N=s(q," will stay stable."),q.forEach(o)},m(L,q){d(L,c,q),t(c,g),t(c,f),t(f,u),t(c,w),t(c,m),t(m,_),t(c,A),t(c,x),t(x,G),t(c,C),t(c,y),t(y,T),t(c,N)},d(L){L&&o(c)}}}function Dh(U){let c,g,f,u,w,m,_,A,x,G,C;return{c(){c=n("p"),g=a("When a first allocation happens in PyTorch, it loads CUDA kernels which take about 1-2GB of memory depending on the GPU. Therefore you always have less usable memory than the actual size of the GPU. To see how much memory is actually used do "),f=n("code"),u=a("torch.ones(1).cuda()"),w=a(" and look at the memory usage."),m=h(),_=n("p"),A=a("Therefore when you create memory maps with "),x=n("code"),G=a("max_memory"),C=a(" make sure to adjust the avaialble memory accordingly to avoid out-of-memory errors.")},l(y){c=i(y,"P",{});var T=l(c);g=s(T,"When a first allocation happens in PyTorch, it loads CUDA kernels which take about 1-2GB of memory depending on the GPU. Therefore you always have less usable memory than the actual size of the GPU. To see how much memory is actually used do "),f=i(T,"CODE",{});var N=l(f);u=s(N,"torch.ones(1).cuda()"),N.forEach(o),w=s(T," and look at the memory usage."),T.forEach(o),m=p(y),_=i(y,"P",{});var L=l(_);A=s(L,"Therefore when you create memory maps with "),x=i(L,"CODE",{});var q=l(x);G=s(q,"max_memory"),q.forEach(o),C=s(L," make sure to adjust the avaialble memory accordingly to avoid out-of-memory errors."),L.forEach(o)},m(y,T){d(y,c,T),t(c,g),t(c,f),t(f,u),t(c,w),d(y,m,T),d(y,_,T),t(_,A),t(_,x),t(x,G),t(_,C)},d(y){y&&o(c),y&&o(m),y&&o(_)}}}function Lh(U){let c,g;return{c(){c=n("p"),g=a("To be the most efficient, make sure your device map puts the parameters on the GPUs in a sequential manner (e.g. don\u2019t put one of the first weights on GPU 0, then weights on GPU 1 and the last weight back to GPU 0) to avoid making many transfers of data between the GPUs.")},l(f){c=i(f,"P",{});var u=l(c);g=s(u,"To be the most efficient, make sure your device map puts the parameters on the GPUs in a sequential manner (e.g. don\u2019t put one of the first weights on GPU 0, then weights on GPU 1 and the last weight back to GPU 0) to avoid making many transfers of data between the GPUs."),u.forEach(o)},m(f,u){d(f,c,u),t(c,g)},d(f){f&&o(c)}}}function Mh(U){let c,g,f,u,w;return{c(){c=n("p"),g=a(`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),f=n("code"),u=a("init_empty_weights"),w=a(" context manager).")},l(m){c=i(m,"P",{});var _=l(c);g=s(_,`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),f=i(_,"CODE",{});var A=l(f);u=s(A,"init_empty_weights"),A.forEach(o),w=s(_," context manager)."),_.forEach(o)},m(m,_){d(m,c,_),t(c,g),t(c,f),t(f,u),t(c,w)},d(m){m&&o(c)}}}function Bh(U){let c,g,f,u,w;return u=new O({props:{code:`import torch.nn as nn
from accelerate import init_empty_weights

<h1 class="relative group">
	<a 
		id="initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Initialize a model with 100 billions parameters in no time and without using any RAM.
	</span>
</h1>

with init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn
<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

&lt;h1 id=&quot;initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram&quot;&gt;Initialize a model <span class="hljs-keyword">with</span> <span class="hljs-number">100</span> billions parameters <span class="hljs-keyword">in</span> <span class="hljs-keyword">no</span> <span class="hljs-type">time</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">without</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">any</span> RAM.&lt;/h1&gt;
<span class="hljs-keyword">with</span> init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>)])`}}),{c(){c=n("p"),g=a("Example:"),f=h(),k(u.$$.fragment)},l(m){c=i(m,"P",{});var _=l(c);g=s(_,"Example:"),_.forEach(o),f=p(m),P(u.$$.fragment,m)},m(m,_){d(m,c,_),t(c,g),d(m,f,_),E(u,m,_),w=!0},p:Eh,i(m){w||(b(u.$$.fragment,m),w=!0)},o(m){$(u.$$.fragment,m),w=!1},d(m){m&&o(c),m&&o(f),j(u,m)}}}function zh(U){let c,g,f,u,w,m,_,A;return{c(){c=n("p"),g=a(`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),f=n("code"),u=a("model.to(some_device)"),w=a(" with it. To load weights inside your empty model, see "),m=n("a"),_=a("load_checkpoint_and_dispatch()"),A=a("."),this.h()},l(x){c=i(x,"P",{});var G=l(c);g=s(G,`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),f=i(G,"CODE",{});var C=l(f);u=s(C,"model.to(some_device)"),C.forEach(o),w=s(G," with it. To load weights inside your empty model, see "),m=i(G,"A",{href:!0});var y=l(m);_=s(y,"load_checkpoint_and_dispatch()"),y.forEach(o),A=s(G,"."),G.forEach(o),this.h()},h(){v(m,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(x,G){d(x,c,G),t(c,g),t(c,f),t(f,u),t(c,w),t(c,m),t(m,_),t(c,A)},d(x){x&&o(c)}}}function Oh(U){let c,g,f,u,w,m,_,A;return{c(){c=n("p"),g=a("Once loaded across devices, you still need to call "),f=n("a"),u=a("dispatch_model()"),w=a(` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),m=n("a"),_=a("load_checkpoint_and_dispatch()"),A=a("."),this.h()},l(x){c=i(x,"P",{});var G=l(c);g=s(G,"Once loaded across devices, you still need to call "),f=i(G,"A",{href:!0});var C=l(f);u=s(C,"dispatch_model()"),C.forEach(o),w=s(G,` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),m=i(G,"A",{href:!0});var y=l(m);_=s(y,"load_checkpoint_and_dispatch()"),y.forEach(o),A=s(G,"."),G.forEach(o),this.h()},h(){v(f,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.dispatch_model"),v(m,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(x,G){d(x,c,G),t(c,g),t(c,f),t(f,u),t(c,w),t(c,m),t(m,_),t(c,A)},d(x){x&&o(c)}}}function Nh(U){let c,g,f,u,w,m,_,A,x,G,C,y,T,N,L,q,Tt,Ke,F,we,Cn,Tn,fo,qn,In,mo,Dn,Va,qt,Ln,Ka,ye,Qa,ne,be,uo,Qe,Mn,_o,Bn,Xa,$e,zn,It,On,Nn,Za,Xe,es,Dt,Rn,ts,Ze,os,Lt,Wn,as,ke,ss,ie,Pe,go,et,Sn,vo,Fn,ns,Mt,Hn,is,Bt,Yn,ls,tt,rs,zt,Jn,ds,ot,cs,R,Vn,wo,Kn,Qn,yo,Xn,Zn,bo,ei,ti,$o,oi,ai,ko,si,ni,Po,ii,hs,le,Ee,Eo,at,li,jo,ri,ps,je,di,Ot,ci,hi,fs,xe,pi,st,fi,mi,ms,nt,us,Nt,ui,_s,it,gs,Rt,_i,vs,lt,ws,Ue,gi,xo,vi,wi,ys,X,Uo,yi,bi,Ao,$i,ki,Go,Pi,bs,re,Co,Ei,ji,To,xi,Ui,$s,Z,Ai,qo,Gi,Ci,Io,Ti,qi,ks,rt,Ps,dt,Es,Ae,Ii,Do,Di,Li,js,ct,xs,de,Ge,Lo,ht,Mi,Mo,Bi,Us,Wt,zi,As,pt,Gs,St,Oi,Cs,ee,Bo,Ni,Ri,zo,Wi,Si,Oo,Fi,Ts,Ft,Hi,qs,Ce,Is,ce,Te,No,ft,Yi,Ro,Ji,Ds,W,Vi,Wo,Ki,Qi,So,Xi,Zi,Fo,el,tl,Ho,ol,al,Yo,sl,nl,Ls,qe,Ms,Ht,il,Bs,Yt,ll,zs,te,Ie,Jo,rl,dl,Vo,cl,hl,pl,De,Ko,fl,ml,Qo,ul,_l,gl,Jt,Xo,vl,wl,Os,Le,Ns,I,yl,Zo,bl,$l,Vt,kl,Pl,ea,El,jl,ta,xl,Ul,oa,Al,Gl,aa,Cl,Tl,sa,ql,Il,na,Dl,Ll,Rs,Kt,Ml,Ws,mt,Ss,Me,Fs,Be,Bl,ia,zl,Ol,Hs,ut,Ys,Qt,Nl,Js,D,Rl,la,Wl,Sl,ra,Fl,Hl,da,Yl,Jl,ca,Vl,Kl,ha,Ql,Xl,pa,Zl,er,fa,tr,or,ma,ar,sr,Vs,_t,Ks,Xt,nr,Qs,gt,Xs,Zt,ir,Zs,vt,en,ze,tn,he,Oe,ua,wt,lr,_a,rr,on,eo,dr,an,M,ga,cr,hr,oe,to,pr,fr,va,mr,ur,oo,_r,gr,vr,ae,ao,wr,yr,wa,br,$r,so,kr,Pr,Er,Ne,no,jr,xr,io,Ur,Ar,Gr,ya,Cr,Tr,ba,qr,Ir,$a,Dr,sn,pe,Re,ka,yt,Lr,Pa,Mr,nn,fe,bt,Br,Ea,zr,ln,me,$t,Or,ja,Nr,rn,ue,kt,Rr,xa,Wr,dn,H,Pt,Sr,Ua,Fr,Hr,K,Aa,Yr,Jr,Ga,Vr,Kr,Ca,Qr,Xr,Ta,Zr,ed,We,cn,Y,Et,td,qa,od,ad,Se,sd,Fe,hn,_e,jt,nd,Ia,id,pn,Q,xt,ld,Da,rd,dd,He,fn;return m=new ve({}),N=new O({props:{code:`import torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`,highlighted:`<span class="hljs-keyword">import</span> torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`}}),ye=new se({props:{warning:!0,$$slots:{default:[Gh]},$$scope:{ctx:U}}}),Qe=new ve({}),Xe=new O({props:{code:`from accelerate import init_empty_weights

with init_empty_weights():
    my_model = ModelClass(...)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

<span class="hljs-keyword">with</span> init_empty_weights():
    my_model = ModelClass(...)`}}),Ze=new O({props:{code:`with init_empty_weights():
    model = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">with</span> init_empty_weights():
    model = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>)])`}}),ke=new se({props:{warning:!0,$$slots:{default:[Ch]},$$scope:{ctx:U}}}),et=new ve({}),tt=new O({props:{code:`first_state_dict.bin
index.json
second_state_dict.bin`,highlighted:`first_state_dict.bin
index.json
second_state_dict.bin`}}),ot=new O({props:{code:`{
  "linear1.weight": "first_state_dict.bin",
  "linear1.bias": "first_state_dict.bin",
  "linear2.weight": "second_state_dict.bin",
  "linear2.bias": "second_state_dict.bin"
}`,highlighted:`<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;linear1.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear1.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span>
<span class="hljs-punctuation">}</span>`}}),at=new ve({}),nt=new O({props:{code:`git clone https://huggingface.co/sgugger/sharded-gpt-j-6B
cd sharded-gpt-j-6B
git-lfs install
git pull`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/sgugger/sharded-gpt-j-6B
<span class="hljs-built_in">cd</span> sharded-gpt-j-6B
git-lfs install
git pull`}}),it=new O({props:{code:`from accelerate import init_empty_weights
from transformers import AutoConfig, AutoModelForCausalLM

checkpoint = "EleutherAI/gpt-j-6B"
config = AutoConfig.from_pretrained(checkpoint)

with init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

checkpoint = <span class="hljs-string">&quot;EleutherAI/gpt-j-6B&quot;</span>
config = AutoConfig.from_pretrained(checkpoint)

<span class="hljs-keyword">with</span> init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`}}),lt=new O({props:{code:`from accelerate import load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, "sharded-gpt-j-6B", device_map="auto", no_split_module_classes=["GPTJBlock"]
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>, no_split_module_classes=[<span class="hljs-string">&quot;GPTJBlock&quot;</span>]
)`}}),rt=new O({props:{code:"model.hf_device_map",highlighted:"model.hf_device_map"}}),dt=new O({props:{code:`{'transformer.wte': 0,
 'transformer.drop': 0,
 'transformer.h.0': 0,
 'transformer.h.1': 0,
 'transformer.h.2': 0,
 'transformer.h.3': 0,
 'transformer.h.4': 0,
 'transformer.h.5': 0,
 'transformer.h.6': 0,
 'transformer.h.7': 0,
 'transformer.h.8': 0,
 'transformer.h.9': 0,
 'transformer.h.10': 0,
 'transformer.h.11': 0,
 'transformer.h.12': 0,
 'transformer.h.13': 0,
 'transformer.h.14': 0,
 'transformer.h.15': 0,
 'transformer.h.16': 0,
 'transformer.h.17': 0,
 'transformer.h.18': 0,
 'transformer.h.19': 0,
 'transformer.h.20': 0,
 'transformer.h.21': 0,
 'transformer.h.22': 0,
 'transformer.h.23': 0,
 'transformer.h.24': 1,
 'transformer.h.25': 1,
 'transformer.h.26': 1,
 'transformer.h.27': 1,
 'transformer.ln_f': 1,
 'lm_head': 1}`,highlighted:`{<span class="hljs-string">&#x27;transformer.wte&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.drop&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.1&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.2&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.3&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.4&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.5&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.6&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.7&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.8&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.9&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.10&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.11&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.12&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.13&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.14&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.15&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.16&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.17&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.18&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.19&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.20&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.21&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.22&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.23&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.24&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.25&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.26&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.27&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.ln_f&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-number">1</span>}`}}),ct=new O({props:{code:'model = load_checkpoint_and_dispatch(model, "sharded-gpt-j-6B", device_map=my_device_map)',highlighted:'model = load_checkpoint_and_dispatch(model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=my_device_map)'}}),ht=new ve({}),pt=new O({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer("Hello, my name is", return_tensors="pt")
inputs = inputs.to(0)
output = model.generate(inputs["input_ids"])
tokenizer.decode(output[0].tolist())`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer(<span class="hljs-string">&quot;Hello, my name is&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
inputs = inputs.to(<span class="hljs-number">0</span>)
output = model.generate(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
tokenizer.decode(output[<span class="hljs-number">0</span>].tolist())`}}),Ce=new se({props:{warning:!0,$$slots:{default:[Th]},$$scope:{ctx:U}}}),ft=new ve({}),qe=new se({props:{$$slots:{default:[qh]},$$scope:{ctx:U}}}),Le=new se({props:{$$slots:{default:[Ih]},$$scope:{ctx:U}}}),mt=new O({props:{code:`from accelerate import infer_auto_device_map

device_map = infer_auto_device_map(my_model, max_memory={0: "10GiB", 1: "10GiB", "cpu": "30GiB"})`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> infer_auto_device_map

device_map = infer_auto_device_map(my_model, max_memory={<span class="hljs-number">0</span>: <span class="hljs-string">&quot;10GiB&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;10GiB&quot;</span>, <span class="hljs-string">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;30GiB&quot;</span>})`}}),Me=new se({props:{warning:!0,$$slots:{default:[Dh]},$$scope:{ctx:U}}}),ut=new O({props:{code:'max_memory = {0: "30GIB", 1: "46GIB", 2: "46GIB", 3: "46GIB", 4: "46GIB", 5: "46GIB", 6: "46GIB", 7: "46GIB"}',highlighted:'max_memory = {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;30GIB&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&quot;46GIB&quot;</span>}'}}),_t=new O({props:{code:'device_map = {"block1": 0, "block2": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2&quot;</span>: <span class="hljs-number">1</span>}'}}),gt=new O({props:{code:'device_map = {"block1": 0, "block2.linear1": 0, "block2.linear2": 1, "block2.linear3": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear2&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;block2.linear3&quot;</span>: <span class="hljs-number">1</span>}'}}),vt=new O({props:{code:'device_map = {"block1": 0, "block2.linear1": 1, "block2.linear2": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear1&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;block2.linear2&quot;</span>: <span class="hljs-number">1</span>}'}}),ze=new se({props:{$$slots:{default:[Lh]},$$scope:{ctx:U}}}),wt=new ve({}),yt=new ve({}),bt=new Ct({props:{name:"accelerate.cpu_offload",anchor:"accelerate.cpu_offload",parameters:[{name:"model",val:": Module"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.cpu_offload.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to offload.`,name:"model"},{anchor:"accelerate.cpu_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model first parameter device.`,name:"execution_device"},{anchor:"accelerate.cpu_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.cpu_offload.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the model that will be kept on CPU.`,name:"state_dict"},{anchor:"accelerate.cpu_offload.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_548/src/accelerate/big_modeling.py#L89"}}),$t=new Ct({props:{name:"accelerate.disk_offload",anchor:"accelerate.disk_offload",parameters:[{name:"model",val:": Module"},{name:"offload_dir",val:": typing.Union[str, os.PathLike]"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.disk_offload.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to offload.",name:"model"},{anchor:"accelerate.disk_offload.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.disk_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model&#x2019;s first parameter device.`,name:"execution_device"},{anchor:"accelerate.disk_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.disk_offload.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_548/src/accelerate/big_modeling.py#L133"}}),kt=new Ct({props:{name:"accelerate.dispatch_model",anchor:"accelerate.dispatch_model",parameters:[{name:"model",val:": Module"},{name:"device_map",val:": typing.Dict[str, typing.Union[int, str, torch.device]]"},{name:"main_device",val:": typing.Optional[torch.device] = None"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"},{name:"offload_dir",val:": typing.Union[str, os.PathLike] = None"},{name:"offload_buffers",val:": bool = False"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.dispatch_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to dispatch.`,name:"model"},{anchor:"accelerate.dispatch_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[str, int, torch.device]]</code>) &#x2014;
A dictionary mapping module names in the models <code>state_dict</code> to the device they should go to. Note that
<code>&quot;disk&quot;</code> is accepted even if it&#x2019;s not a proper value for <code>torch.device</code>.`,name:"device_map"},{anchor:"accelerate.dispatch_model.main_device",description:`<strong>main_device</strong> (<code>str</code>, <code>int</code> or <code>torch.device</code>, <em>optional</em>) &#x2014;
The main execution device. Will default to the first device in the <code>device_map</code> different from <code>&quot;cpu&quot;</code> or
<code>&quot;disk&quot;</code>.`,name:"main_device"},{anchor:"accelerate.dispatch_model.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the part of the model that will be kept on CPU.`,name:"state_dict"},{anchor:"accelerate.dispatch_model.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.dispatch_model.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.dispatch_model.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_548/src/accelerate/big_modeling.py#L177"}}),Pt=new Ct({props:{name:"accelerate.infer_auto_device_map",anchor:"accelerate.infer_auto_device_map",parameters:[{name:"model",val:": Module"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"}],parametersDescription:[{anchor:"accelerate.infer_auto_device_map.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to analyze.",name:"model"},{anchor:"accelerate.infer_auto_device_map.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available if unset.`,name:"max_memory"},{anchor:"accelerate.infer_auto_device_map.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"},{anchor:"accelerate.infer_auto_device_map.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"}],source:"https://github.com/huggingface/accelerate/blob/vr_548/src/accelerate/utils/modeling.py#L424"}}),We=new se({props:{$$slots:{default:[Mh]},$$scope:{ctx:U}}}),Et=new Ct({props:{name:"accelerate.init_empty_weights",anchor:"accelerate.init_empty_weights",parameters:[{name:"include_buffers",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.init_empty_weights.include_buffers",description:`<strong>include_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also put all buffers on the meta device while initializing.`,name:"include_buffers"}],source:"https://github.com/huggingface/accelerate/blob/vr_548/src/accelerate/big_modeling.py#L34"}}),Se=new Ah({props:{anchor:"accelerate.init_empty_weights.example",$$slots:{default:[Bh]},$$scope:{ctx:U}}}),Fe=new se({props:{warning:!0,$$slots:{default:[zh]},$$scope:{ctx:U}}}),jt=new Ct({props:{name:"accelerate.load_checkpoint_and_dispatch",anchor:"accelerate.load_checkpoint_and_dispatch",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[str, typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"offload_buffers",val:": bool = False"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"},{name:"offload_state_dict",val:": typing.Optional[bool] = None"},{name:"preload_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_and_dispatch.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_and_dispatch.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:</p>
<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_and_dispatch.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.</p>
<p>To have Accelerate compute the most optimized <code>device_map</code> automatically, set <code>device_map=&quot;auto&quot;</code>. For more
information about each option see <a href="big_modeling#designing-a-device-map">here</a>.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_and_dispatch.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available for each GPU
and the available CPU RAM if unset.`,name:"max_memory"},{anchor:"accelerate.load_checkpoint_and_dispatch.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
In the layers that are offloaded on the CPU or the hard drive, whether or not to offload the buffers as
well as the parameters.`,name:"offload_buffers"},{anchor:"accelerate.load_checkpoint_and_dispatch.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict on the hard drive to avoig getting out of CPU RAM if
the weight of the CPU state dict + the biggest shard does not fit. Will default to <code>True</code> if the device map
picked contains <code>&quot;disk&quot;</code> values.`,name:"offload_state_dict"},{anchor:"accelerate.load_checkpoint_and_dispatch.preload_module_classes",description:`<strong>preload_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of classes whose instances should load all their weights (even in the submodules) at the beginning
of the forward. This should only be used for classes that have submodules which are registered but not
called directly during the forward, for instance if a <code>dense</code> linear layer is registered, but at forward,
<code>dense.weight</code> and <code>dense.bias</code> are used in some operations instead of calling <code>dense</code> directly.`,name:"preload_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_548/src/accelerate/big_modeling.py#L255"}}),xt=new Ct({props:{name:"accelerate.load_checkpoint_in_model",anchor:"accelerate.load_checkpoint_in_model",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dtype",val:": typing.Union[str, torch.dtype, NoneType] = None"},{name:"offload_state_dict",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_in_model.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_in_model.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_in_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_in_model.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"accelerate.load_checkpoint_in_model.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
If provided, the weights will be converted to that type when loaded.`,name:"dtype"},{anchor:"accelerate.load_checkpoint_in_model.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict on the hard drive to avoig getting out of CPU RAM if
the weight of the CPU state dict + the biggest shard does not fit.`,name:"offload_state_dict"}],source:"https://github.com/huggingface/accelerate/blob/vr_548/src/accelerate/utils/modeling.py#L588"}}),He=new se({props:{warning:!0,$$slots:{default:[Oh]},$$scope:{ctx:U}}}),{c(){c=n("meta"),g=h(),f=n("h1"),u=n("a"),w=n("span"),k(m.$$.fragment),_=h(),A=n("span"),x=a("Handling big models"),G=h(),C=n("p"),y=a("When loading a pretrained model in PyTorch, the usual workflow looks like this:"),T=h(),k(N.$$.fragment),L=h(),q=n("p"),Tt=a("In plain English, those steps are:"),Ke=h(),F=n("ol"),we=n("li"),Cn=a("Create the model with randomly initialized weights"),Tn=h(),fo=n("li"),qn=a("Load the model weights (in a dictionary usually called a state dict) from the disk"),In=h(),mo=n("li"),Dn=a("Load those weights inside the model"),Va=h(),qt=n("p"),Ln=a("While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),Ka=h(),k(ye.$$.fragment),Qa=h(),ne=n("h2"),be=n("a"),uo=n("span"),k(Qe.$$.fragment),Mn=h(),_o=n("span"),Bn=a("Instantiating an empty model"),Xa=h(),$e=n("p"),zn=a("The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),It=n("a"),On=a("init_empty_weights()"),Nn=a(" that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),Za=h(),k(Xe.$$.fragment),es=h(),Dt=n("p"),Rn=a("For instance:"),ts=h(),k(Ze.$$.fragment),os=h(),Lt=n("p"),Wn=a("initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),as=h(),k(ke.$$.fragment),ss=h(),ie=n("h2"),Pe=n("a"),go=n("span"),k(et.$$.fragment),Sn=h(),vo=n("span"),Fn=a("Sharded checkpoints"),ns=h(),Mt=n("p"),Hn=a("It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),is=h(),Bt=n("p"),Yn=a("\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),ls=h(),k(tt.$$.fragment),rs=h(),zt=n("p"),Jn=a("with index.json being the following file:"),ds=h(),k(ot.$$.fragment),cs=h(),R=n("p"),Vn=a("and "),wo=n("code"),Kn=a("first_state_dict.bin"),Qn=a(" containing the weights for "),yo=n("code"),Xn=a('"linear1.weight"'),Zn=a(" and "),bo=n("code"),ei=a('"linear1.bias"'),ti=a(", "),$o=n("code"),oi=a("second_state_dict.bin"),ai=a(" the ones for "),ko=n("code"),si=a('"linear2.weight"'),ni=a(" and "),Po=n("code"),ii=a('"linear2.bias"'),hs=h(),le=n("h2"),Ee=n("a"),Eo=n("span"),k(at.$$.fragment),li=h(),jo=n("span"),ri=a("Loading weights"),ps=h(),je=n("p"),di=a("The second tool \u{1F917} Accelerate introduces is a function "),Ot=n("a"),ci=a("load_checkpoint_and_dispatch()"),hi=a(", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),fs=h(),xe=n("p"),pi=a("Here is how we can use this to load the "),st=n("a"),fi=a("GPT-J-6B"),mi=a(" model. You clone the sharded version of this model with:"),ms=h(),k(nt.$$.fragment),us=h(),Nt=n("p"),ui=a("then we can initialize the model with"),_s=h(),k(it.$$.fragment),gs=h(),Rt=n("p"),_i=a("and load the checkpoint we just downloaded with:"),vs=h(),k(lt.$$.fragment),ws=h(),Ue=n("p"),gi=a("By passing "),xo=n("code"),vi=a('device_map="auto"'),wi=a(", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),ys=h(),X=n("ul"),Uo=n("li"),yi=a("first we use the maximum space available on the GPU(s)"),bi=h(),Ao=n("li"),$i=a("if we still need space, we store the remaining weights on the CPU"),ki=h(),Go=n("li"),Pi=a("if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),bs=h(),re=n("p"),Co=n("code"),Ei=a('no_split_module_classes=["GPTJBlock"]'),ji=a(" indicates that the modules that are "),To=n("code"),xi=a("GPTJBlock"),Ui=a(" should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),$s=h(),Z=n("p"),Ai=a("You can see the "),qo=n("code"),Gi=a("device_map"),Ci=a(" that \u{1F917} Accelerate picked by accessing the "),Io=n("code"),Ti=a("hf_device_map"),qi=a(" attribute of your model:"),ks=h(),k(rt.$$.fragment),Ps=h(),k(dt.$$.fragment),Es=h(),Ae=n("p"),Ii=a("You can also design your "),Do=n("code"),Di=a("device_map"),Li=a(" yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),js=h(),k(ct.$$.fragment),xs=h(),de=n("h2"),Ge=n("a"),Lo=n("span"),k(ht.$$.fragment),Mi=h(),Mo=n("span"),Bi=a("Run the model"),Us=h(),Wt=n("p"),zi=a("Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),As=h(),k(pt.$$.fragment),Gs=h(),St=n("p"),Oi=a("Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),Cs=h(),ee=n("ul"),Bo=n("li"),Ni=a("at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),Ri=h(),zo=n("li"),Wi=a("for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),Si=h(),Oo=n("li"),Fi=a("for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),Ts=h(),Ft=n("p"),Hi=a("This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),qs=h(),k(Ce.$$.fragment),Is=h(),ce=n("h2"),Te=n("a"),No=n("span"),k(ft.$$.fragment),Yi=h(),Ro=n("span"),Ji=a("Designing a device map"),Ds=h(),W=n("p"),Vi=a("You can let \u{1F917} Accelerate handle the device map computation by setting "),Wo=n("code"),Ki=a("device_map"),Qi=a(" to one of the supported options ("),So=n("code"),Xi=a('"auto"'),Zi=a(", "),Fo=n("code"),el=a('"balanced"'),tl=a(", "),Ho=n("code"),ol=a('"balanced_low_0"'),al=a(", "),Yo=n("code"),sl=a('"sequential"'),nl=a(") or create one yourself, if you want more control over where each layer should go."),Ls=h(),k(qe.$$.fragment),Ms=h(),Ht=n("p"),il=a("All the options will produce the same result when you don\u2019t have enough GPU memory to accomodate the whole model (which is to fit everything that can on the GPU, then offload weights on the CPU or even on the disk if there is not enough RAM)."),Bs=h(),Yt=n("p"),ll=a("When you have more GPU memory available than the model size, here the difference between each option:"),zs=h(),te=n("ul"),Ie=n("li"),Jo=n("code"),rl=a('"auto"'),dl=a(" and "),Vo=n("code"),cl=a('"balanced"'),hl=a(" evenly split the model on all available GPUs, making it possible for you to use a batch size greater than 1."),pl=h(),De=n("li"),Ko=n("code"),fl=a('"balanced_low_0"'),ml=a(" evenly splits the model on all GPUs except the first one, and only puts on GPU 0 what does not fit on the others. This option is great when you need to use GPU 0 for some processing of the outputs, like when using the "),Qo=n("code"),ul=a("generate"),_l=a(" function for Transformers models"),gl=h(),Jt=n("li"),Xo=n("code"),vl=a('"sequential"'),wl=a(" will fit what it can on GPU 0, then move on GPU 1 and so forth (so won\u2019t use the last GPUs if it doesn\u2019t need to)."),Os=h(),k(Le.$$.fragment),Ns=h(),I=n("p"),yl=a("First note that you can limit the memory used on each GPU by using the "),Zo=n("code"),bl=a("max_memory"),$l=a(" argument (available in "),Vt=n("a"),kl=a("infer_auto_device_map()"),Pl=a(" and in all functions using it). When setting "),ea=n("code"),El=a("max_memory"),jl=a(", you should pass along a dictionary containing the GPU identifiers (for instance "),ta=n("code"),xl=a("0"),Ul=a(", "),oa=n("code"),Al=a("1"),Gl=a(" etc.) and the "),aa=n("code"),Cl=a('"cpu"'),Tl=a(" key for the maximum RAM you want used for CPU offload. The values can either be an integer (in bytes) or a string representing a number with its unit, such as "),sa=n("code"),ql=a('"10GiB"'),Il=a(" or "),na=n("code"),Dl=a('"10GB"'),Ll=a("."),Rs=h(),Kt=n("p"),Ml=a("Here is an example where we don\u2019t want to use more than 10GiB on each of two GPUs and no more than 30GiB of CPU RAM for the model weights:"),Ws=h(),k(mt.$$.fragment),Ss=h(),k(Me.$$.fragment),Fs=h(),Be=n("p"),Bl=a("Additionally, if you do some additional operations with your outputs without placing them back on the CPU (for instance inside the "),ia=n("code"),zl=a("generate"),Ol=a(" method of Transformers) and if you placed your inputs on a GPU, that GPU will consume more memory than the others (Accelerate always place the output back to the device of the input). Therefore if you would like to optimize the maximum batch size and you have many GPUs, give the first GPU less memory. For example, with BLOOM-176B on 8x80 A100 setup the close to ideal map is:"),Hs=h(),k(ut.$$.fragment),Ys=h(),Qt=n("p"),Nl=a("as you can see we gave the remaining 7 GPUs ~50% more memory than GPU 0."),Js=h(),D=n("p"),Rl=a("If you opt to fully design the "),la=n("code"),Wl=a("device_map"),Sl=a(" yourself, it should be a dictionary with keys being module names of your model and values being a valid device identifier (for instance an integer for the GPUs) or "),ra=n("code"),Fl=a('"cpu"'),Hl=a(" for CPU offload, "),da=n("code"),Yl=a('"disk"'),Jl=a(" for disk offload. The keys need to cover the whole model, you can then define your device map as you wish: for instance if your model has two blocks (let\u2019s say "),ca=n("code"),Vl=a("block1"),Kl=a(" and "),ha=n("code"),Ql=a("block2"),Xl=a(") which each contain three linear layers (let\u2019s say "),pa=n("code"),Zl=a("linear1"),er=a(", "),fa=n("code"),tr=a("linear2"),or=a(" and "),ma=n("code"),ar=a("linear3"),sr=a("), a valid device map can be:"),Vs=h(),k(_t.$$.fragment),Ks=h(),Xt=n("p"),nr=a("another one that is valid could be:"),Qs=h(),k(gt.$$.fragment),Xs=h(),Zt=n("p"),ir=a("On the other hand, this one is not valid as it does not cover every parameter of the model:"),Zs=h(),k(vt.$$.fragment),en=h(),k(ze.$$.fragment),tn=h(),he=n("h2"),Oe=n("a"),ua=n("span"),k(wt.$$.fragment),lr=h(),_a=n("span"),rr=a("Limits and further development"),on=h(),eo=n("p"),dr=a("We are aware of the current limitations in the API:"),an=h(),M=n("ul"),ga=n("li"),cr=a("While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),hr=h(),oe=n("li"),to=n("a"),pr=a("infer_auto_device_map()"),fr=a(" (or "),va=n("code"),mr=a('device_map="auto"'),ur=a(" in "),oo=n("a"),_r=a("load_checkpoint_and_dispatch()"),gr=a(") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),vr=h(),ae=n("li"),ao=n("a"),wr=a("infer_auto_device_map()"),yr=a(" (or "),wa=n("code"),br=a('device_map="auto"'),$r=a(" in "),so=n("a"),kr=a("load_checkpoint_and_dispatch()"),Pr=a(") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),Er=h(),Ne=n("li"),no=n("a"),jr=a("load_checkpoint_and_dispatch()"),xr=a(" and "),io=n("a"),Ur=a("load_checkpoint_in_model()"),Ar=a(" do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),Gr=h(),ya=n("li"),Cr=a("The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),Tr=h(),ba=n("li"),qr=a("When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),Ir=h(),$a=n("li"),Dr=a("Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),sn=h(),pe=n("h2"),Re=n("a"),ka=n("span"),k(yt.$$.fragment),Lr=h(),Pa=n("span"),Mr=a("API doc"),nn=h(),fe=n("div"),k(bt.$$.fragment),Br=h(),Ea=n("p"),zr=a(`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),ln=h(),me=n("div"),k($t.$$.fragment),Or=h(),ja=n("p"),Nr=a(`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),rn=h(),ue=n("div"),k(kt.$$.fragment),Rr=h(),xa=n("p"),Wr=a(`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),dn=h(),H=n("div"),k(Pt.$$.fragment),Sr=h(),Ua=n("p"),Fr=a(`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),Hr=h(),K=n("ul"),Aa=n("li"),Yr=a("we don\u2019t exceed the memory available of any of the GPU."),Jr=h(),Ga=n("li"),Vr=a(`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),Kr=h(),Ca=n("li"),Qr=a("if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),Xr=h(),Ta=n("li"),Zr=a(`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),ed=h(),k(We.$$.fragment),cn=h(),Y=n("div"),k(Et.$$.fragment),td=h(),qa=n("p"),od=a(`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),ad=h(),k(Se.$$.fragment),sd=h(),k(Fe.$$.fragment),hn=h(),_e=n("div"),k(jt.$$.fragment),nd=h(),Ia=n("p"),id=a(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),pn=h(),Q=n("div"),k(xt.$$.fragment),ld=h(),Da=n("p"),rd=a(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),dd=h(),k(He.$$.fragment),this.h()},l(e){const r=Ph('[data-svelte="svelte-1phssyn"]',document.head);c=i(r,"META",{name:!0,content:!0}),r.forEach(o),g=p(e),f=i(e,"H1",{class:!0});var Ut=l(f);u=i(Ut,"A",{id:!0,class:!0,href:!0});var La=l(u);w=i(La,"SPAN",{});var Ma=l(w);P(m.$$.fragment,Ma),Ma.forEach(o),La.forEach(o),_=p(Ut),A=i(Ut,"SPAN",{});var Ba=l(A);x=s(Ba,"Handling big models"),Ba.forEach(o),Ut.forEach(o),G=p(e),C=i(e,"P",{});var za=l(C);y=s(za,"When loading a pretrained model in PyTorch, the usual workflow looks like this:"),za.forEach(o),T=p(e),P(N.$$.fragment,e),L=p(e),q=i(e,"P",{});var Oa=l(q);Tt=s(Oa,"In plain English, those steps are:"),Oa.forEach(o),Ke=p(e),F=i(e,"OL",{});var ge=l(F);we=i(ge,"LI",{});var Na=l(we);Cn=s(Na,"Create the model with randomly initialized weights"),Na.forEach(o),Tn=p(ge),fo=i(ge,"LI",{});var Ra=l(fo);qn=s(Ra,"Load the model weights (in a dictionary usually called a state dict) from the disk"),Ra.forEach(o),In=p(ge),mo=i(ge,"LI",{});var Wa=l(mo);Dn=s(Wa,"Load those weights inside the model"),Wa.forEach(o),ge.forEach(o),Va=p(e),qt=i(e,"P",{});var Sa=l(qt);Ln=s(Sa,"While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),Sa.forEach(o),Ka=p(e),P(ye.$$.fragment,e),Qa=p(e),ne=i(e,"H2",{class:!0});var mn=l(ne);be=i(mn,"A",{id:!0,class:!0,href:!0});var hd=l(be);uo=i(hd,"SPAN",{});var pd=l(uo);P(Qe.$$.fragment,pd),pd.forEach(o),hd.forEach(o),Mn=p(mn),_o=i(mn,"SPAN",{});var fd=l(_o);Bn=s(fd,"Instantiating an empty model"),fd.forEach(o),mn.forEach(o),Xa=p(e),$e=i(e,"P",{});var un=l($e);zn=s(un,"The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),It=i(un,"A",{href:!0});var md=l(It);On=s(md,"init_empty_weights()"),md.forEach(o),Nn=s(un," that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),un.forEach(o),Za=p(e),P(Xe.$$.fragment,e),es=p(e),Dt=i(e,"P",{});var ud=l(Dt);Rn=s(ud,"For instance:"),ud.forEach(o),ts=p(e),P(Ze.$$.fragment,e),os=p(e),Lt=i(e,"P",{});var _d=l(Lt);Wn=s(_d,"initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),_d.forEach(o),as=p(e),P(ke.$$.fragment,e),ss=p(e),ie=i(e,"H2",{class:!0});var _n=l(ie);Pe=i(_n,"A",{id:!0,class:!0,href:!0});var gd=l(Pe);go=i(gd,"SPAN",{});var vd=l(go);P(et.$$.fragment,vd),vd.forEach(o),gd.forEach(o),Sn=p(_n),vo=i(_n,"SPAN",{});var wd=l(vo);Fn=s(wd,"Sharded checkpoints"),wd.forEach(o),_n.forEach(o),ns=p(e),Mt=i(e,"P",{});var yd=l(Mt);Hn=s(yd,"It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),yd.forEach(o),is=p(e),Bt=i(e,"P",{});var bd=l(Bt);Yn=s(bd,"\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),bd.forEach(o),ls=p(e),P(tt.$$.fragment,e),rs=p(e),zt=i(e,"P",{});var $d=l(zt);Jn=s($d,"with index.json being the following file:"),$d.forEach(o),ds=p(e),P(ot.$$.fragment,e),cs=p(e),R=i(e,"P",{});var J=l(R);Vn=s(J,"and "),wo=i(J,"CODE",{});var kd=l(wo);Kn=s(kd,"first_state_dict.bin"),kd.forEach(o),Qn=s(J," containing the weights for "),yo=i(J,"CODE",{});var Pd=l(yo);Xn=s(Pd,'"linear1.weight"'),Pd.forEach(o),Zn=s(J," and "),bo=i(J,"CODE",{});var Ed=l(bo);ei=s(Ed,'"linear1.bias"'),Ed.forEach(o),ti=s(J,", "),$o=i(J,"CODE",{});var jd=l($o);oi=s(jd,"second_state_dict.bin"),jd.forEach(o),ai=s(J," the ones for "),ko=i(J,"CODE",{});var xd=l(ko);si=s(xd,'"linear2.weight"'),xd.forEach(o),ni=s(J," and "),Po=i(J,"CODE",{});var Ud=l(Po);ii=s(Ud,'"linear2.bias"'),Ud.forEach(o),J.forEach(o),hs=p(e),le=i(e,"H2",{class:!0});var gn=l(le);Ee=i(gn,"A",{id:!0,class:!0,href:!0});var Ad=l(Ee);Eo=i(Ad,"SPAN",{});var Gd=l(Eo);P(at.$$.fragment,Gd),Gd.forEach(o),Ad.forEach(o),li=p(gn),jo=i(gn,"SPAN",{});var Cd=l(jo);ri=s(Cd,"Loading weights"),Cd.forEach(o),gn.forEach(o),ps=p(e),je=i(e,"P",{});var vn=l(je);di=s(vn,"The second tool \u{1F917} Accelerate introduces is a function "),Ot=i(vn,"A",{href:!0});var Td=l(Ot);ci=s(Td,"load_checkpoint_and_dispatch()"),Td.forEach(o),hi=s(vn,", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),vn.forEach(o),fs=p(e),xe=i(e,"P",{});var wn=l(xe);pi=s(wn,"Here is how we can use this to load the "),st=i(wn,"A",{href:!0,rel:!0});var qd=l(st);fi=s(qd,"GPT-J-6B"),qd.forEach(o),mi=s(wn," model. You clone the sharded version of this model with:"),wn.forEach(o),ms=p(e),P(nt.$$.fragment,e),us=p(e),Nt=i(e,"P",{});var Id=l(Nt);ui=s(Id,"then we can initialize the model with"),Id.forEach(o),_s=p(e),P(it.$$.fragment,e),gs=p(e),Rt=i(e,"P",{});var Dd=l(Rt);_i=s(Dd,"and load the checkpoint we just downloaded with:"),Dd.forEach(o),vs=p(e),P(lt.$$.fragment,e),ws=p(e),Ue=i(e,"P",{});var yn=l(Ue);gi=s(yn,"By passing "),xo=i(yn,"CODE",{});var Ld=l(xo);vi=s(Ld,'device_map="auto"'),Ld.forEach(o),wi=s(yn,", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),yn.forEach(o),ys=p(e),X=i(e,"UL",{});var lo=l(X);Uo=i(lo,"LI",{});var Md=l(Uo);yi=s(Md,"first we use the maximum space available on the GPU(s)"),Md.forEach(o),bi=p(lo),Ao=i(lo,"LI",{});var Bd=l(Ao);$i=s(Bd,"if we still need space, we store the remaining weights on the CPU"),Bd.forEach(o),ki=p(lo),Go=i(lo,"LI",{});var zd=l(Go);Pi=s(zd,"if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),zd.forEach(o),lo.forEach(o),bs=p(e),re=i(e,"P",{});var Fa=l(re);Co=i(Fa,"CODE",{});var Od=l(Co);Ei=s(Od,'no_split_module_classes=["GPTJBlock"]'),Od.forEach(o),ji=s(Fa," indicates that the modules that are "),To=i(Fa,"CODE",{});var Nd=l(To);xi=s(Nd,"GPTJBlock"),Nd.forEach(o),Ui=s(Fa," should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),Fa.forEach(o),$s=p(e),Z=i(e,"P",{});var ro=l(Z);Ai=s(ro,"You can see the "),qo=i(ro,"CODE",{});var Rd=l(qo);Gi=s(Rd,"device_map"),Rd.forEach(o),Ci=s(ro," that \u{1F917} Accelerate picked by accessing the "),Io=i(ro,"CODE",{});var Wd=l(Io);Ti=s(Wd,"hf_device_map"),Wd.forEach(o),qi=s(ro," attribute of your model:"),ro.forEach(o),ks=p(e),P(rt.$$.fragment,e),Ps=p(e),P(dt.$$.fragment,e),Es=p(e),Ae=i(e,"P",{});var bn=l(Ae);Ii=s(bn,"You can also design your "),Do=i(bn,"CODE",{});var Sd=l(Do);Di=s(Sd,"device_map"),Sd.forEach(o),Li=s(bn," yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),bn.forEach(o),js=p(e),P(ct.$$.fragment,e),xs=p(e),de=i(e,"H2",{class:!0});var $n=l(de);Ge=i($n,"A",{id:!0,class:!0,href:!0});var Fd=l(Ge);Lo=i(Fd,"SPAN",{});var Hd=l(Lo);P(ht.$$.fragment,Hd),Hd.forEach(o),Fd.forEach(o),Mi=p($n),Mo=i($n,"SPAN",{});var Yd=l(Mo);Bi=s(Yd,"Run the model"),Yd.forEach(o),$n.forEach(o),Us=p(e),Wt=i(e,"P",{});var Jd=l(Wt);zi=s(Jd,"Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),Jd.forEach(o),As=p(e),P(pt.$$.fragment,e),Gs=p(e),St=i(e,"P",{});var Vd=l(St);Oi=s(Vd,"Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),Vd.forEach(o),Cs=p(e),ee=i(e,"UL",{});var co=l(ee);Bo=i(co,"LI",{});var Kd=l(Bo);Ni=s(Kd,"at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),Kd.forEach(o),Ri=p(co),zo=i(co,"LI",{});var Qd=l(zo);Wi=s(Qd,"for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),Qd.forEach(o),Si=p(co),Oo=i(co,"LI",{});var Xd=l(Oo);Fi=s(Xd,"for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),Xd.forEach(o),co.forEach(o),Ts=p(e),Ft=i(e,"P",{});var Zd=l(Ft);Hi=s(Zd,"This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),Zd.forEach(o),qs=p(e),P(Ce.$$.fragment,e),Is=p(e),ce=i(e,"H2",{class:!0});var kn=l(ce);Te=i(kn,"A",{id:!0,class:!0,href:!0});var ec=l(Te);No=i(ec,"SPAN",{});var tc=l(No);P(ft.$$.fragment,tc),tc.forEach(o),ec.forEach(o),Yi=p(kn),Ro=i(kn,"SPAN",{});var oc=l(Ro);Ji=s(oc,"Designing a device map"),oc.forEach(o),kn.forEach(o),Ds=p(e),W=i(e,"P",{});var V=l(W);Vi=s(V,"You can let \u{1F917} Accelerate handle the device map computation by setting "),Wo=i(V,"CODE",{});var ac=l(Wo);Ki=s(ac,"device_map"),ac.forEach(o),Qi=s(V," to one of the supported options ("),So=i(V,"CODE",{});var sc=l(So);Xi=s(sc,'"auto"'),sc.forEach(o),Zi=s(V,", "),Fo=i(V,"CODE",{});var nc=l(Fo);el=s(nc,'"balanced"'),nc.forEach(o),tl=s(V,", "),Ho=i(V,"CODE",{});var ic=l(Ho);ol=s(ic,'"balanced_low_0"'),ic.forEach(o),al=s(V,", "),Yo=i(V,"CODE",{});var lc=l(Yo);sl=s(lc,'"sequential"'),lc.forEach(o),nl=s(V,") or create one yourself, if you want more control over where each layer should go."),V.forEach(o),Ls=p(e),P(qe.$$.fragment,e),Ms=p(e),Ht=i(e,"P",{});var rc=l(Ht);il=s(rc,"All the options will produce the same result when you don\u2019t have enough GPU memory to accomodate the whole model (which is to fit everything that can on the GPU, then offload weights on the CPU or even on the disk if there is not enough RAM)."),rc.forEach(o),Bs=p(e),Yt=i(e,"P",{});var dc=l(Yt);ll=s(dc,"When you have more GPU memory available than the model size, here the difference between each option:"),dc.forEach(o),zs=p(e),te=i(e,"UL",{});var ho=l(te);Ie=i(ho,"LI",{});var Ha=l(Ie);Jo=i(Ha,"CODE",{});var cc=l(Jo);rl=s(cc,'"auto"'),cc.forEach(o),dl=s(Ha," and "),Vo=i(Ha,"CODE",{});var hc=l(Vo);cl=s(hc,'"balanced"'),hc.forEach(o),hl=s(Ha," evenly split the model on all available GPUs, making it possible for you to use a batch size greater than 1."),Ha.forEach(o),pl=p(ho),De=i(ho,"LI",{});var Ya=l(De);Ko=i(Ya,"CODE",{});var pc=l(Ko);fl=s(pc,'"balanced_low_0"'),pc.forEach(o),ml=s(Ya," evenly splits the model on all GPUs except the first one, and only puts on GPU 0 what does not fit on the others. This option is great when you need to use GPU 0 for some processing of the outputs, like when using the "),Qo=i(Ya,"CODE",{});var fc=l(Qo);ul=s(fc,"generate"),fc.forEach(o),_l=s(Ya," function for Transformers models"),Ya.forEach(o),gl=p(ho),Jt=i(ho,"LI",{});var cd=l(Jt);Xo=i(cd,"CODE",{});var mc=l(Xo);vl=s(mc,'"sequential"'),mc.forEach(o),wl=s(cd," will fit what it can on GPU 0, then move on GPU 1 and so forth (so won\u2019t use the last GPUs if it doesn\u2019t need to)."),cd.forEach(o),ho.forEach(o),Os=p(e),P(Le.$$.fragment,e),Ns=p(e),I=i(e,"P",{});var B=l(I);yl=s(B,"First note that you can limit the memory used on each GPU by using the "),Zo=i(B,"CODE",{});var uc=l(Zo);bl=s(uc,"max_memory"),uc.forEach(o),$l=s(B," argument (available in "),Vt=i(B,"A",{href:!0});var _c=l(Vt);kl=s(_c,"infer_auto_device_map()"),_c.forEach(o),Pl=s(B," and in all functions using it). When setting "),ea=i(B,"CODE",{});var gc=l(ea);El=s(gc,"max_memory"),gc.forEach(o),jl=s(B,", you should pass along a dictionary containing the GPU identifiers (for instance "),ta=i(B,"CODE",{});var vc=l(ta);xl=s(vc,"0"),vc.forEach(o),Ul=s(B,", "),oa=i(B,"CODE",{});var wc=l(oa);Al=s(wc,"1"),wc.forEach(o),Gl=s(B," etc.) and the "),aa=i(B,"CODE",{});var yc=l(aa);Cl=s(yc,'"cpu"'),yc.forEach(o),Tl=s(B," key for the maximum RAM you want used for CPU offload. The values can either be an integer (in bytes) or a string representing a number with its unit, such as "),sa=i(B,"CODE",{});var bc=l(sa);ql=s(bc,'"10GiB"'),bc.forEach(o),Il=s(B," or "),na=i(B,"CODE",{});var $c=l(na);Dl=s($c,'"10GB"'),$c.forEach(o),Ll=s(B,"."),B.forEach(o),Rs=p(e),Kt=i(e,"P",{});var kc=l(Kt);Ml=s(kc,"Here is an example where we don\u2019t want to use more than 10GiB on each of two GPUs and no more than 30GiB of CPU RAM for the model weights:"),kc.forEach(o),Ws=p(e),P(mt.$$.fragment,e),Ss=p(e),P(Me.$$.fragment,e),Fs=p(e),Be=i(e,"P",{});var Pn=l(Be);Bl=s(Pn,"Additionally, if you do some additional operations with your outputs without placing them back on the CPU (for instance inside the "),ia=i(Pn,"CODE",{});var Pc=l(ia);zl=s(Pc,"generate"),Pc.forEach(o),Ol=s(Pn," method of Transformers) and if you placed your inputs on a GPU, that GPU will consume more memory than the others (Accelerate always place the output back to the device of the input). Therefore if you would like to optimize the maximum batch size and you have many GPUs, give the first GPU less memory. For example, with BLOOM-176B on 8x80 A100 setup the close to ideal map is:"),Pn.forEach(o),Hs=p(e),P(ut.$$.fragment,e),Ys=p(e),Qt=i(e,"P",{});var Ec=l(Qt);Nl=s(Ec,"as you can see we gave the remaining 7 GPUs ~50% more memory than GPU 0."),Ec.forEach(o),Js=p(e),D=i(e,"P",{});var z=l(D);Rl=s(z,"If you opt to fully design the "),la=i(z,"CODE",{});var jc=l(la);Wl=s(jc,"device_map"),jc.forEach(o),Sl=s(z," yourself, it should be a dictionary with keys being module names of your model and values being a valid device identifier (for instance an integer for the GPUs) or "),ra=i(z,"CODE",{});var xc=l(ra);Fl=s(xc,'"cpu"'),xc.forEach(o),Hl=s(z," for CPU offload, "),da=i(z,"CODE",{});var Uc=l(da);Yl=s(Uc,'"disk"'),Uc.forEach(o),Jl=s(z," for disk offload. The keys need to cover the whole model, you can then define your device map as you wish: for instance if your model has two blocks (let\u2019s say "),ca=i(z,"CODE",{});var Ac=l(ca);Vl=s(Ac,"block1"),Ac.forEach(o),Kl=s(z," and "),ha=i(z,"CODE",{});var Gc=l(ha);Ql=s(Gc,"block2"),Gc.forEach(o),Xl=s(z,") which each contain three linear layers (let\u2019s say "),pa=i(z,"CODE",{});var Cc=l(pa);Zl=s(Cc,"linear1"),Cc.forEach(o),er=s(z,", "),fa=i(z,"CODE",{});var Tc=l(fa);tr=s(Tc,"linear2"),Tc.forEach(o),or=s(z," and "),ma=i(z,"CODE",{});var qc=l(ma);ar=s(qc,"linear3"),qc.forEach(o),sr=s(z,"), a valid device map can be:"),z.forEach(o),Vs=p(e),P(_t.$$.fragment,e),Ks=p(e),Xt=i(e,"P",{});var Ic=l(Xt);nr=s(Ic,"another one that is valid could be:"),Ic.forEach(o),Qs=p(e),P(gt.$$.fragment,e),Xs=p(e),Zt=i(e,"P",{});var Dc=l(Zt);ir=s(Dc,"On the other hand, this one is not valid as it does not cover every parameter of the model:"),Dc.forEach(o),Zs=p(e),P(vt.$$.fragment,e),en=p(e),P(ze.$$.fragment,e),tn=p(e),he=i(e,"H2",{class:!0});var En=l(he);Oe=i(En,"A",{id:!0,class:!0,href:!0});var Lc=l(Oe);ua=i(Lc,"SPAN",{});var Mc=l(ua);P(wt.$$.fragment,Mc),Mc.forEach(o),Lc.forEach(o),lr=p(En),_a=i(En,"SPAN",{});var Bc=l(_a);rr=s(Bc,"Limits and further development"),Bc.forEach(o),En.forEach(o),on=p(e),eo=i(e,"P",{});var zc=l(eo);dr=s(zc,"We are aware of the current limitations in the API:"),zc.forEach(o),an=p(e),M=i(e,"UL",{});var S=l(M);ga=i(S,"LI",{});var Oc=l(ga);cr=s(Oc,"While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),Oc.forEach(o),hr=p(S),oe=i(S,"LI",{});var At=l(oe);to=i(At,"A",{href:!0});var Nc=l(to);pr=s(Nc,"infer_auto_device_map()"),Nc.forEach(o),fr=s(At," (or "),va=i(At,"CODE",{});var Rc=l(va);mr=s(Rc,'device_map="auto"'),Rc.forEach(o),ur=s(At," in "),oo=i(At,"A",{href:!0});var Wc=l(oo);_r=s(Wc,"load_checkpoint_and_dispatch()"),Wc.forEach(o),gr=s(At,") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),At.forEach(o),vr=p(S),ae=i(S,"LI",{});var Gt=l(ae);ao=i(Gt,"A",{href:!0});var Sc=l(ao);wr=s(Sc,"infer_auto_device_map()"),Sc.forEach(o),yr=s(Gt," (or "),wa=i(Gt,"CODE",{});var Fc=l(wa);br=s(Fc,'device_map="auto"'),Fc.forEach(o),$r=s(Gt," in "),so=i(Gt,"A",{href:!0});var Hc=l(so);kr=s(Hc,"load_checkpoint_and_dispatch()"),Hc.forEach(o),Pr=s(Gt,") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),Gt.forEach(o),Er=p(S),Ne=i(S,"LI",{});var Ja=l(Ne);no=i(Ja,"A",{href:!0});var Yc=l(no);jr=s(Yc,"load_checkpoint_and_dispatch()"),Yc.forEach(o),xr=s(Ja," and "),io=i(Ja,"A",{href:!0});var Jc=l(io);Ur=s(Jc,"load_checkpoint_in_model()"),Jc.forEach(o),Ar=s(Ja," do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),Ja.forEach(o),Gr=p(S),ya=i(S,"LI",{});var Vc=l(ya);Cr=s(Vc,"The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),Vc.forEach(o),Tr=p(S),ba=i(S,"LI",{});var Kc=l(ba);qr=s(Kc,"When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),Kc.forEach(o),Ir=p(S),$a=i(S,"LI",{});var Qc=l($a);Dr=s(Qc,"Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),Qc.forEach(o),S.forEach(o),sn=p(e),pe=i(e,"H2",{class:!0});var jn=l(pe);Re=i(jn,"A",{id:!0,class:!0,href:!0});var Xc=l(Re);ka=i(Xc,"SPAN",{});var Zc=l(ka);P(yt.$$.fragment,Zc),Zc.forEach(o),Xc.forEach(o),Lr=p(jn),Pa=i(jn,"SPAN",{});var eh=l(Pa);Mr=s(eh,"API doc"),eh.forEach(o),jn.forEach(o),nn=p(e),fe=i(e,"DIV",{class:!0});var xn=l(fe);P(bt.$$.fragment,xn),Br=p(xn),Ea=i(xn,"P",{});var th=l(Ea);zr=s(th,`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),th.forEach(o),xn.forEach(o),ln=p(e),me=i(e,"DIV",{class:!0});var Un=l(me);P($t.$$.fragment,Un),Or=p(Un),ja=i(Un,"P",{});var oh=l(ja);Nr=s(oh,`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),oh.forEach(o),Un.forEach(o),rn=p(e),ue=i(e,"DIV",{class:!0});var An=l(ue);P(kt.$$.fragment,An),Rr=p(An),xa=i(An,"P",{});var ah=l(xa);Wr=s(ah,`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),ah.forEach(o),An.forEach(o),dn=p(e),H=i(e,"DIV",{class:!0});var Ye=l(H);P(Pt.$$.fragment,Ye),Sr=p(Ye),Ua=i(Ye,"P",{});var sh=l(Ua);Fr=s(sh,`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),sh.forEach(o),Hr=p(Ye),K=i(Ye,"UL",{});var Je=l(K);Aa=i(Je,"LI",{});var nh=l(Aa);Yr=s(nh,"we don\u2019t exceed the memory available of any of the GPU."),nh.forEach(o),Jr=p(Je),Ga=i(Je,"LI",{});var ih=l(Ga);Vr=s(ih,`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),ih.forEach(o),Kr=p(Je),Ca=i(Je,"LI",{});var lh=l(Ca);Qr=s(lh,"if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),lh.forEach(o),Xr=p(Je),Ta=i(Je,"LI",{});var rh=l(Ta);Zr=s(rh,`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),rh.forEach(o),Je.forEach(o),ed=p(Ye),P(We.$$.fragment,Ye),Ye.forEach(o),cn=p(e),Y=i(e,"DIV",{class:!0});var Ve=l(Y);P(Et.$$.fragment,Ve),td=p(Ve),qa=i(Ve,"P",{});var dh=l(qa);od=s(dh,`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),dh.forEach(o),ad=p(Ve),P(Se.$$.fragment,Ve),sd=p(Ve),P(Fe.$$.fragment,Ve),Ve.forEach(o),hn=p(e),_e=i(e,"DIV",{class:!0});var Gn=l(_e);P(jt.$$.fragment,Gn),nd=p(Gn),Ia=i(Gn,"P",{});var ch=l(Ia);id=s(ch,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),ch.forEach(o),Gn.forEach(o),pn=p(e),Q=i(e,"DIV",{class:!0});var po=l(Q);P(xt.$$.fragment,po),ld=p(po),Da=i(po,"P",{});var hh=l(Da);rd=s(hh,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),hh.forEach(o),dd=p(po),P(He.$$.fragment,po),po.forEach(o),this.h()},h(){v(c,"name","hf:doc:metadata"),v(c,"content",JSON.stringify(Rh)),v(u,"id","handling-big-models"),v(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(u,"href","#handling-big-models"),v(f,"class","relative group"),v(be,"id","instantiating-an-empty-model"),v(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(be,"href","#instantiating-an-empty-model"),v(ne,"class","relative group"),v(It,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.init_empty_weights"),v(Pe,"id","sharded-checkpoints"),v(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Pe,"href","#sharded-checkpoints"),v(ie,"class","relative group"),v(Ee,"id","accelerate.cpu_offload"),v(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ee,"href","#accelerate.cpu_offload"),v(le,"class","relative group"),v(Ot,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),v(st,"href","https://huggingface.co/EleutherAI/gpt-j-6B"),v(st,"rel","nofollow"),v(Ge,"id","run-the-model"),v(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ge,"href","#run-the-model"),v(de,"class","relative group"),v(Te,"id","designing-a-device-map"),v(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Te,"href","#designing-a-device-map"),v(ce,"class","relative group"),v(Vt,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.infer_auto_device_map"),v(Oe,"id","limits-and-further-development"),v(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Oe,"href","#limits-and-further-development"),v(he,"class","relative group"),v(to,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.infer_auto_device_map"),v(oo,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),v(ao,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.infer_auto_device_map"),v(so,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),v(no,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),v(io,"href","/docs/accelerate/pr_548/en/big_modeling#accelerate.load_checkpoint_in_model"),v(Re,"id","api-doc"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#api-doc"),v(pe,"class","relative group"),v(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,r){t(document.head,c),d(e,g,r),d(e,f,r),t(f,u),t(u,w),E(m,w,null),t(f,_),t(f,A),t(A,x),d(e,G,r),d(e,C,r),t(C,y),d(e,T,r),E(N,e,r),d(e,L,r),d(e,q,r),t(q,Tt),d(e,Ke,r),d(e,F,r),t(F,we),t(we,Cn),t(F,Tn),t(F,fo),t(fo,qn),t(F,In),t(F,mo),t(mo,Dn),d(e,Va,r),d(e,qt,r),t(qt,Ln),d(e,Ka,r),E(ye,e,r),d(e,Qa,r),d(e,ne,r),t(ne,be),t(be,uo),E(Qe,uo,null),t(ne,Mn),t(ne,_o),t(_o,Bn),d(e,Xa,r),d(e,$e,r),t($e,zn),t($e,It),t(It,On),t($e,Nn),d(e,Za,r),E(Xe,e,r),d(e,es,r),d(e,Dt,r),t(Dt,Rn),d(e,ts,r),E(Ze,e,r),d(e,os,r),d(e,Lt,r),t(Lt,Wn),d(e,as,r),E(ke,e,r),d(e,ss,r),d(e,ie,r),t(ie,Pe),t(Pe,go),E(et,go,null),t(ie,Sn),t(ie,vo),t(vo,Fn),d(e,ns,r),d(e,Mt,r),t(Mt,Hn),d(e,is,r),d(e,Bt,r),t(Bt,Yn),d(e,ls,r),E(tt,e,r),d(e,rs,r),d(e,zt,r),t(zt,Jn),d(e,ds,r),E(ot,e,r),d(e,cs,r),d(e,R,r),t(R,Vn),t(R,wo),t(wo,Kn),t(R,Qn),t(R,yo),t(yo,Xn),t(R,Zn),t(R,bo),t(bo,ei),t(R,ti),t(R,$o),t($o,oi),t(R,ai),t(R,ko),t(ko,si),t(R,ni),t(R,Po),t(Po,ii),d(e,hs,r),d(e,le,r),t(le,Ee),t(Ee,Eo),E(at,Eo,null),t(le,li),t(le,jo),t(jo,ri),d(e,ps,r),d(e,je,r),t(je,di),t(je,Ot),t(Ot,ci),t(je,hi),d(e,fs,r),d(e,xe,r),t(xe,pi),t(xe,st),t(st,fi),t(xe,mi),d(e,ms,r),E(nt,e,r),d(e,us,r),d(e,Nt,r),t(Nt,ui),d(e,_s,r),E(it,e,r),d(e,gs,r),d(e,Rt,r),t(Rt,_i),d(e,vs,r),E(lt,e,r),d(e,ws,r),d(e,Ue,r),t(Ue,gi),t(Ue,xo),t(xo,vi),t(Ue,wi),d(e,ys,r),d(e,X,r),t(X,Uo),t(Uo,yi),t(X,bi),t(X,Ao),t(Ao,$i),t(X,ki),t(X,Go),t(Go,Pi),d(e,bs,r),d(e,re,r),t(re,Co),t(Co,Ei),t(re,ji),t(re,To),t(To,xi),t(re,Ui),d(e,$s,r),d(e,Z,r),t(Z,Ai),t(Z,qo),t(qo,Gi),t(Z,Ci),t(Z,Io),t(Io,Ti),t(Z,qi),d(e,ks,r),E(rt,e,r),d(e,Ps,r),E(dt,e,r),d(e,Es,r),d(e,Ae,r),t(Ae,Ii),t(Ae,Do),t(Do,Di),t(Ae,Li),d(e,js,r),E(ct,e,r),d(e,xs,r),d(e,de,r),t(de,Ge),t(Ge,Lo),E(ht,Lo,null),t(de,Mi),t(de,Mo),t(Mo,Bi),d(e,Us,r),d(e,Wt,r),t(Wt,zi),d(e,As,r),E(pt,e,r),d(e,Gs,r),d(e,St,r),t(St,Oi),d(e,Cs,r),d(e,ee,r),t(ee,Bo),t(Bo,Ni),t(ee,Ri),t(ee,zo),t(zo,Wi),t(ee,Si),t(ee,Oo),t(Oo,Fi),d(e,Ts,r),d(e,Ft,r),t(Ft,Hi),d(e,qs,r),E(Ce,e,r),d(e,Is,r),d(e,ce,r),t(ce,Te),t(Te,No),E(ft,No,null),t(ce,Yi),t(ce,Ro),t(Ro,Ji),d(e,Ds,r),d(e,W,r),t(W,Vi),t(W,Wo),t(Wo,Ki),t(W,Qi),t(W,So),t(So,Xi),t(W,Zi),t(W,Fo),t(Fo,el),t(W,tl),t(W,Ho),t(Ho,ol),t(W,al),t(W,Yo),t(Yo,sl),t(W,nl),d(e,Ls,r),E(qe,e,r),d(e,Ms,r),d(e,Ht,r),t(Ht,il),d(e,Bs,r),d(e,Yt,r),t(Yt,ll),d(e,zs,r),d(e,te,r),t(te,Ie),t(Ie,Jo),t(Jo,rl),t(Ie,dl),t(Ie,Vo),t(Vo,cl),t(Ie,hl),t(te,pl),t(te,De),t(De,Ko),t(Ko,fl),t(De,ml),t(De,Qo),t(Qo,ul),t(De,_l),t(te,gl),t(te,Jt),t(Jt,Xo),t(Xo,vl),t(Jt,wl),d(e,Os,r),E(Le,e,r),d(e,Ns,r),d(e,I,r),t(I,yl),t(I,Zo),t(Zo,bl),t(I,$l),t(I,Vt),t(Vt,kl),t(I,Pl),t(I,ea),t(ea,El),t(I,jl),t(I,ta),t(ta,xl),t(I,Ul),t(I,oa),t(oa,Al),t(I,Gl),t(I,aa),t(aa,Cl),t(I,Tl),t(I,sa),t(sa,ql),t(I,Il),t(I,na),t(na,Dl),t(I,Ll),d(e,Rs,r),d(e,Kt,r),t(Kt,Ml),d(e,Ws,r),E(mt,e,r),d(e,Ss,r),E(Me,e,r),d(e,Fs,r),d(e,Be,r),t(Be,Bl),t(Be,ia),t(ia,zl),t(Be,Ol),d(e,Hs,r),E(ut,e,r),d(e,Ys,r),d(e,Qt,r),t(Qt,Nl),d(e,Js,r),d(e,D,r),t(D,Rl),t(D,la),t(la,Wl),t(D,Sl),t(D,ra),t(ra,Fl),t(D,Hl),t(D,da),t(da,Yl),t(D,Jl),t(D,ca),t(ca,Vl),t(D,Kl),t(D,ha),t(ha,Ql),t(D,Xl),t(D,pa),t(pa,Zl),t(D,er),t(D,fa),t(fa,tr),t(D,or),t(D,ma),t(ma,ar),t(D,sr),d(e,Vs,r),E(_t,e,r),d(e,Ks,r),d(e,Xt,r),t(Xt,nr),d(e,Qs,r),E(gt,e,r),d(e,Xs,r),d(e,Zt,r),t(Zt,ir),d(e,Zs,r),E(vt,e,r),d(e,en,r),E(ze,e,r),d(e,tn,r),d(e,he,r),t(he,Oe),t(Oe,ua),E(wt,ua,null),t(he,lr),t(he,_a),t(_a,rr),d(e,on,r),d(e,eo,r),t(eo,dr),d(e,an,r),d(e,M,r),t(M,ga),t(ga,cr),t(M,hr),t(M,oe),t(oe,to),t(to,pr),t(oe,fr),t(oe,va),t(va,mr),t(oe,ur),t(oe,oo),t(oo,_r),t(oe,gr),t(M,vr),t(M,ae),t(ae,ao),t(ao,wr),t(ae,yr),t(ae,wa),t(wa,br),t(ae,$r),t(ae,so),t(so,kr),t(ae,Pr),t(M,Er),t(M,Ne),t(Ne,no),t(no,jr),t(Ne,xr),t(Ne,io),t(io,Ur),t(Ne,Ar),t(M,Gr),t(M,ya),t(ya,Cr),t(M,Tr),t(M,ba),t(ba,qr),t(M,Ir),t(M,$a),t($a,Dr),d(e,sn,r),d(e,pe,r),t(pe,Re),t(Re,ka),E(yt,ka,null),t(pe,Lr),t(pe,Pa),t(Pa,Mr),d(e,nn,r),d(e,fe,r),E(bt,fe,null),t(fe,Br),t(fe,Ea),t(Ea,zr),d(e,ln,r),d(e,me,r),E($t,me,null),t(me,Or),t(me,ja),t(ja,Nr),d(e,rn,r),d(e,ue,r),E(kt,ue,null),t(ue,Rr),t(ue,xa),t(xa,Wr),d(e,dn,r),d(e,H,r),E(Pt,H,null),t(H,Sr),t(H,Ua),t(Ua,Fr),t(H,Hr),t(H,K),t(K,Aa),t(Aa,Yr),t(K,Jr),t(K,Ga),t(Ga,Vr),t(K,Kr),t(K,Ca),t(Ca,Qr),t(K,Xr),t(K,Ta),t(Ta,Zr),t(H,ed),E(We,H,null),d(e,cn,r),d(e,Y,r),E(Et,Y,null),t(Y,td),t(Y,qa),t(qa,od),t(Y,ad),E(Se,Y,null),t(Y,sd),E(Fe,Y,null),d(e,hn,r),d(e,_e,r),E(jt,_e,null),t(_e,nd),t(_e,Ia),t(Ia,id),d(e,pn,r),d(e,Q,r),E(xt,Q,null),t(Q,ld),t(Q,Da),t(Da,rd),t(Q,dd),E(He,Q,null),fn=!0},p(e,[r]){const Ut={};r&2&&(Ut.$$scope={dirty:r,ctx:e}),ye.$set(Ut);const La={};r&2&&(La.$$scope={dirty:r,ctx:e}),ke.$set(La);const Ma={};r&2&&(Ma.$$scope={dirty:r,ctx:e}),Ce.$set(Ma);const Ba={};r&2&&(Ba.$$scope={dirty:r,ctx:e}),qe.$set(Ba);const za={};r&2&&(za.$$scope={dirty:r,ctx:e}),Le.$set(za);const Oa={};r&2&&(Oa.$$scope={dirty:r,ctx:e}),Me.$set(Oa);const ge={};r&2&&(ge.$$scope={dirty:r,ctx:e}),ze.$set(ge);const Na={};r&2&&(Na.$$scope={dirty:r,ctx:e}),We.$set(Na);const Ra={};r&2&&(Ra.$$scope={dirty:r,ctx:e}),Se.$set(Ra);const Wa={};r&2&&(Wa.$$scope={dirty:r,ctx:e}),Fe.$set(Wa);const Sa={};r&2&&(Sa.$$scope={dirty:r,ctx:e}),He.$set(Sa)},i(e){fn||(b(m.$$.fragment,e),b(N.$$.fragment,e),b(ye.$$.fragment,e),b(Qe.$$.fragment,e),b(Xe.$$.fragment,e),b(Ze.$$.fragment,e),b(ke.$$.fragment,e),b(et.$$.fragment,e),b(tt.$$.fragment,e),b(ot.$$.fragment,e),b(at.$$.fragment,e),b(nt.$$.fragment,e),b(it.$$.fragment,e),b(lt.$$.fragment,e),b(rt.$$.fragment,e),b(dt.$$.fragment,e),b(ct.$$.fragment,e),b(ht.$$.fragment,e),b(pt.$$.fragment,e),b(Ce.$$.fragment,e),b(ft.$$.fragment,e),b(qe.$$.fragment,e),b(Le.$$.fragment,e),b(mt.$$.fragment,e),b(Me.$$.fragment,e),b(ut.$$.fragment,e),b(_t.$$.fragment,e),b(gt.$$.fragment,e),b(vt.$$.fragment,e),b(ze.$$.fragment,e),b(wt.$$.fragment,e),b(yt.$$.fragment,e),b(bt.$$.fragment,e),b($t.$$.fragment,e),b(kt.$$.fragment,e),b(Pt.$$.fragment,e),b(We.$$.fragment,e),b(Et.$$.fragment,e),b(Se.$$.fragment,e),b(Fe.$$.fragment,e),b(jt.$$.fragment,e),b(xt.$$.fragment,e),b(He.$$.fragment,e),fn=!0)},o(e){$(m.$$.fragment,e),$(N.$$.fragment,e),$(ye.$$.fragment,e),$(Qe.$$.fragment,e),$(Xe.$$.fragment,e),$(Ze.$$.fragment,e),$(ke.$$.fragment,e),$(et.$$.fragment,e),$(tt.$$.fragment,e),$(ot.$$.fragment,e),$(at.$$.fragment,e),$(nt.$$.fragment,e),$(it.$$.fragment,e),$(lt.$$.fragment,e),$(rt.$$.fragment,e),$(dt.$$.fragment,e),$(ct.$$.fragment,e),$(ht.$$.fragment,e),$(pt.$$.fragment,e),$(Ce.$$.fragment,e),$(ft.$$.fragment,e),$(qe.$$.fragment,e),$(Le.$$.fragment,e),$(mt.$$.fragment,e),$(Me.$$.fragment,e),$(ut.$$.fragment,e),$(_t.$$.fragment,e),$(gt.$$.fragment,e),$(vt.$$.fragment,e),$(ze.$$.fragment,e),$(wt.$$.fragment,e),$(yt.$$.fragment,e),$(bt.$$.fragment,e),$($t.$$.fragment,e),$(kt.$$.fragment,e),$(Pt.$$.fragment,e),$(We.$$.fragment,e),$(Et.$$.fragment,e),$(Se.$$.fragment,e),$(Fe.$$.fragment,e),$(jt.$$.fragment,e),$(xt.$$.fragment,e),$(He.$$.fragment,e),fn=!1},d(e){o(c),e&&o(g),e&&o(f),j(m),e&&o(G),e&&o(C),e&&o(T),j(N,e),e&&o(L),e&&o(q),e&&o(Ke),e&&o(F),e&&o(Va),e&&o(qt),e&&o(Ka),j(ye,e),e&&o(Qa),e&&o(ne),j(Qe),e&&o(Xa),e&&o($e),e&&o(Za),j(Xe,e),e&&o(es),e&&o(Dt),e&&o(ts),j(Ze,e),e&&o(os),e&&o(Lt),e&&o(as),j(ke,e),e&&o(ss),e&&o(ie),j(et),e&&o(ns),e&&o(Mt),e&&o(is),e&&o(Bt),e&&o(ls),j(tt,e),e&&o(rs),e&&o(zt),e&&o(ds),j(ot,e),e&&o(cs),e&&o(R),e&&o(hs),e&&o(le),j(at),e&&o(ps),e&&o(je),e&&o(fs),e&&o(xe),e&&o(ms),j(nt,e),e&&o(us),e&&o(Nt),e&&o(_s),j(it,e),e&&o(gs),e&&o(Rt),e&&o(vs),j(lt,e),e&&o(ws),e&&o(Ue),e&&o(ys),e&&o(X),e&&o(bs),e&&o(re),e&&o($s),e&&o(Z),e&&o(ks),j(rt,e),e&&o(Ps),j(dt,e),e&&o(Es),e&&o(Ae),e&&o(js),j(ct,e),e&&o(xs),e&&o(de),j(ht),e&&o(Us),e&&o(Wt),e&&o(As),j(pt,e),e&&o(Gs),e&&o(St),e&&o(Cs),e&&o(ee),e&&o(Ts),e&&o(Ft),e&&o(qs),j(Ce,e),e&&o(Is),e&&o(ce),j(ft),e&&o(Ds),e&&o(W),e&&o(Ls),j(qe,e),e&&o(Ms),e&&o(Ht),e&&o(Bs),e&&o(Yt),e&&o(zs),e&&o(te),e&&o(Os),j(Le,e),e&&o(Ns),e&&o(I),e&&o(Rs),e&&o(Kt),e&&o(Ws),j(mt,e),e&&o(Ss),j(Me,e),e&&o(Fs),e&&o(Be),e&&o(Hs),j(ut,e),e&&o(Ys),e&&o(Qt),e&&o(Js),e&&o(D),e&&o(Vs),j(_t,e),e&&o(Ks),e&&o(Xt),e&&o(Qs),j(gt,e),e&&o(Xs),e&&o(Zt),e&&o(Zs),j(vt,e),e&&o(en),j(ze,e),e&&o(tn),e&&o(he),j(wt),e&&o(on),e&&o(eo),e&&o(an),e&&o(M),e&&o(sn),e&&o(pe),j(yt),e&&o(nn),e&&o(fe),j(bt),e&&o(ln),e&&o(me),j($t),e&&o(rn),e&&o(ue),j(kt),e&&o(dn),e&&o(H),j(Pt),j(We),e&&o(cn),e&&o(Y),j(Et),j(Se),j(Fe),e&&o(hn),e&&o(_e),j(jt),e&&o(pn),e&&o(Q),j(xt),j(He)}}}const Rh={local:"initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram",title:"Initialize a model with 100 billions parameters in no time and without using any RAM."};function Wh(U){return _h(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vh extends fh{constructor(c){super();mh(this,c,Wh,Nh,uh,{})}}export{Vh as default,Rh as metadata};
