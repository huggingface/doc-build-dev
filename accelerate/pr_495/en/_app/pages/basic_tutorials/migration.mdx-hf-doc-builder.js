import{S as Cr,i as Or,s as Br,e as o,k as h,w as m,t as c,M as Dr,c as i,d as t,m as f,a as l,x as v,h as p,b as n,G as r,g as s,y as g,q as $,o as w,B as y,v as Ir}from"../../chunks/vendor-hf-doc-builder.js";import{T as Hr}from"../../chunks/Tip-hf-doc-builder.js";import{I as ae}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as ge}from"../../chunks/CodeBlock-hf-doc-builder.js";function Lr(oe){let d;return{c(){d=c("We are under the presumpiton that `training_dataloader`, `model`, `optimizer`, `scheduler`, and `loss_function` have been defined beforehand")},l(u){d=p(u,"We are under the presumpiton that `training_dataloader`, `model`, `optimizer`, `scheduler`, and `loss_function` have been defined beforehand")},m(u,_){s(u,d,_)},d(u){u&&t(d)}}}function Wr(oe){let d;return{c(){d=c("Accelerate will only prepare objects that inherit from their respective PyTorch classes (such as `torch.optim.Optimizer`)")},l(u){d=p(u,"Accelerate will only prepare objects that inherit from their respective PyTorch classes (such as `torch.optim.Optimizer`)")},m(u,_){s(u,d,_)},d(u){u&&t(d)}}}function qr(oe){let d,u,_,S,$e,F,mt,we,vt,Ce,ie,gt,Oe,k,x,ye,Y,$t,_e,wt,Be,le,yt,De,N,Ie,G,Le,E,M,be,J,_t,Ae,bt,We,H,At,se,kt,Et,qe,R,Fe,ne,Pt,Ye,P,C,ke,U,jt,Ee,Tt,Ge,b,zt,ce,St,xt,Pe,Nt,Mt,pe,Ht,Ct,Je,K,Re,j,O,je,Q,Ot,Te,Bt,Ue,B,Dt,he,It,Lt,Ke,V,Qe,A,Wt,ze,qt,Ft,fe,Yt,Gt,Ve,D,Xe,T,I,Se,X,Jt,xe,Rt,Ze,L,Ut,de,Kt,Qt,et,Z,tt,ue,Vt,rt,z,W,Ne,ee,Xt,Me,Zt,at,me,er,ot,te,it;return F=new ae({}),Y=new ae({}),N=new Hr({props:{$$slots:{default:[Lr]},$$scope:{ctx:oe}}}),G=new ge({props:{code:`device = 'cuda'
model.to(device)

for batch in training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    inputs = inputs.to(device)
    targets = targets.to(device)
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    loss.backward()
    optimizer.step()
    scheduler.step()`,highlighted:`device = <span class="hljs-string">&#x27;cuda&#x27;</span>
model.to(device)

<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    inputs = inputs.to(device)
    targets = targets.to(device)
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    loss.backward()
    optimizer.step()
    scheduler.step()`}}),J=new ae({}),R=new ge({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator()`}}),U=new ae({}),K=new ge({props:{code:`-device = 'cuda'
+device = accelerator.device
model.to(device)`,highlighted:`<span class="hljs-deletion">-device = &#x27;cuda&#x27;</span>
<span class="hljs-addition">+device = accelerator.device</span>
model.to(device)`}}),Q=new ae({}),V=new ge({props:{code:`model, optimizer, training_dataloader, scheduler = accelerator.prepare(
    model, optimizer, training_dataloader, scheduler
)`,highlighted:`<span class="hljs-built_in">model,</span> optimizer, training_dataloader, scheduler = accelerator.prepare(
<span class="hljs-built_in">    model,</span> optimizer, training_dataloader, scheduler
)`}}),D=new Hr({props:{warning:!0,$$slots:{default:[Wr]},$$scope:{ctx:oe}}}),X=new ae({}),Z=new ge({props:{code:`-   inputs = inputs.to(device)
-   targets = targets.to(device)
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
-   loss.backward()
+   accelerator.backward(loss)`,highlighted:`<span class="hljs-deletion">-   inputs = inputs.to(device)</span>
<span class="hljs-deletion">-   targets = targets.to(device)</span>
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
<span class="hljs-deletion">-   loss.backward()</span>
<span class="hljs-addition">+   accelerator.backward(loss)</span>`}}),ee=new ae({}),te=new ge({props:{code:`from accelerate import Accelerator
accelerator = Accelerator()

model, optimizer, training_dataloader, scheduler = accelerator.prepare(
    model, optimizer, training_dataloader, scheduler
)

for batch in training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    accelerator.backward(loss)
    optimizer.step()
    scheduler.step()`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator
accelerator = Accelerator()

model, optimizer, training_dataloader, scheduler = accelerator.prepare(
    model, optimizer, training_dataloader, scheduler
)

<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    accelerator.backward(loss)
    optimizer.step()
    scheduler.step()`}}),{c(){d=o("meta"),u=h(),_=o("h1"),S=o("a"),$e=o("span"),m(F.$$.fragment),mt=h(),we=o("span"),vt=c("Migrating your code to \u{1F917} Accelerate"),Ce=h(),ie=o("p"),gt=c(`This tutorial will detail how to easily convert existing PyTorch code into utilizing \u{1F917} Accelerate!
You\u2019ll be able to see that by just changing a few lines of code, \u{1F917} Accelerate can perform its magic and get you on
your way towards running your code on distributed systems with ease!`),Oe=h(),k=o("h2"),x=o("a"),ye=o("span"),m(Y.$$.fragment),$t=h(),_e=o("span"),wt=c("The base training loop"),Be=h(),le=o("p"),yt=c("To begin, first write out a very basic PyTorch training loop."),De=h(),m(N.$$.fragment),Ie=h(),m(G.$$.fragment),Le=h(),E=o("h2"),M=o("a"),be=o("span"),m(J.$$.fragment),_t=h(),Ae=o("span"),bt=c("Add in \u{1F917} Accelerate"),We=h(),H=o("p"),At=c("To start using \u{1F917} Accelerate, first import and create an "),se=o("a"),kt=c("Accelerator"),Et=c(" instance:"),qe=h(),m(R.$$.fragment),Fe=h(),ne=o("p"),Pt=c("This class will be the main force helping you with utilizing everything possible for distributed training!"),Ye=h(),P=o("h3"),C=o("a"),ke=o("span"),m(U.$$.fragment),jt=h(),Ee=o("span"),Tt=c("Setting the right device"),Ge=h(),b=o("p"),zt=c("The "),ce=o("a"),St=c("Accelerator"),xt=c(` class knows the right device to move any PyTorch object to at any time, so you should
change the definition of `),Pe=o("code"),Nt=c("device"),Mt=c(" to come from "),pe=o("a"),Ht=c("Accelerator"),Ct=c(":"),Je=h(),m(K.$$.fragment),Re=h(),j=o("h3"),O=o("a"),je=o("span"),m(Q.$$.fragment),Ot=h(),Te=o("span"),Bt=c("Preparing your objects"),Ue=h(),B=o("p"),Dt=c("Next you need to pass all of the important objects related to training into "),he=o("a"),It=c("Accelerator.prepare()"),Lt=c(`. \u{1F917} Accelerate will
then make sure that everything is setup for the environment you are currently in to start your training:`),Ke=h(),m(V.$$.fragment),Qe=h(),A=o("p"),Wt=c("These objects are returned in the same order they were sent in with. If "),ze=o("code"),qt=c("device_placement=True"),Ft=c(" is passed into the "),fe=o("a"),Yt=c("Accelerator"),Gt=c(` object (the default),
performing this action will also automatically move your model to the proper device as well.`),Ve=h(),m(D.$$.fragment),Xe=h(),T=o("h3"),I=o("a"),Se=o("span"),m(X.$$.fragment),Jt=h(),xe=o("span"),Rt=c("Modifying the training loop"),Ze=h(),L=o("p"),Ut=c(`Finally, three lines of code need changing in our training loop. \u{1F917} Accelerate\u2019s DataLoader classes will automatically handle the device placement by default,
and `),de=o("a"),Kt=c("Accelerator.backward()"),Qt=c(" should be used for performing the backward pass:"),et=h(),m(Z.$$.fragment),tt=h(),ue=o("p"),Vt=c("With that, your training loop is now ready to use \u{1F917} Accelerate!"),rt=h(),z=o("h2"),W=o("a"),Ne=o("span"),m(ee.$$.fragment),Xt=h(),Me=o("span"),Zt=c("The finished code"),at=h(),me=o("p"),er=c("Below is the final version of the converted code:"),ot=h(),m(te.$$.fragment),this.h()},l(e){const a=Dr('[data-svelte="svelte-1phssyn"]',document.head);d=i(a,"META",{name:!0,content:!0}),a.forEach(t),u=f(e),_=i(e,"H1",{class:!0});var re=l(_);S=i(re,"A",{id:!0,class:!0,href:!0});var He=l(S);$e=i(He,"SPAN",{});var tr=l($e);v(F.$$.fragment,tr),tr.forEach(t),He.forEach(t),mt=f(re),we=i(re,"SPAN",{});var rr=l(we);vt=p(rr,"Migrating your code to \u{1F917} Accelerate"),rr.forEach(t),re.forEach(t),Ce=f(e),ie=i(e,"P",{});var ar=l(ie);gt=p(ar,`This tutorial will detail how to easily convert existing PyTorch code into utilizing \u{1F917} Accelerate!
You\u2019ll be able to see that by just changing a few lines of code, \u{1F917} Accelerate can perform its magic and get you on
your way towards running your code on distributed systems with ease!`),ar.forEach(t),Oe=f(e),k=i(e,"H2",{class:!0});var lt=l(k);x=i(lt,"A",{id:!0,class:!0,href:!0});var or=l(x);ye=i(or,"SPAN",{});var ir=l(ye);v(Y.$$.fragment,ir),ir.forEach(t),or.forEach(t),$t=f(lt),_e=i(lt,"SPAN",{});var lr=l(_e);wt=p(lr,"The base training loop"),lr.forEach(t),lt.forEach(t),Be=f(e),le=i(e,"P",{});var sr=l(le);yt=p(sr,"To begin, first write out a very basic PyTorch training loop."),sr.forEach(t),De=f(e),v(N.$$.fragment,e),Ie=f(e),v(G.$$.fragment,e),Le=f(e),E=i(e,"H2",{class:!0});var st=l(E);M=i(st,"A",{id:!0,class:!0,href:!0});var nr=l(M);be=i(nr,"SPAN",{});var cr=l(be);v(J.$$.fragment,cr),cr.forEach(t),nr.forEach(t),_t=f(st),Ae=i(st,"SPAN",{});var pr=l(Ae);bt=p(pr,"Add in \u{1F917} Accelerate"),pr.forEach(t),st.forEach(t),We=f(e),H=i(e,"P",{});var nt=l(H);At=p(nt,"To start using \u{1F917} Accelerate, first import and create an "),se=i(nt,"A",{href:!0});var hr=l(se);kt=p(hr,"Accelerator"),hr.forEach(t),Et=p(nt," instance:"),nt.forEach(t),qe=f(e),v(R.$$.fragment,e),Fe=f(e),ne=i(e,"P",{});var fr=l(ne);Pt=p(fr,"This class will be the main force helping you with utilizing everything possible for distributed training!"),fr.forEach(t),Ye=f(e),P=i(e,"H3",{class:!0});var ct=l(P);C=i(ct,"A",{id:!0,class:!0,href:!0});var dr=l(C);ke=i(dr,"SPAN",{});var ur=l(ke);v(U.$$.fragment,ur),ur.forEach(t),dr.forEach(t),jt=f(ct),Ee=i(ct,"SPAN",{});var mr=l(Ee);Tt=p(mr,"Setting the right device"),mr.forEach(t),ct.forEach(t),Ge=f(e),b=i(e,"P",{});var q=l(b);zt=p(q,"The "),ce=i(q,"A",{href:!0});var vr=l(ce);St=p(vr,"Accelerator"),vr.forEach(t),xt=p(q,` class knows the right device to move any PyTorch object to at any time, so you should
change the definition of `),Pe=i(q,"CODE",{});var gr=l(Pe);Nt=p(gr,"device"),gr.forEach(t),Mt=p(q," to come from "),pe=i(q,"A",{href:!0});var $r=l(pe);Ht=p($r,"Accelerator"),$r.forEach(t),Ct=p(q,":"),q.forEach(t),Je=f(e),v(K.$$.fragment,e),Re=f(e),j=i(e,"H3",{class:!0});var pt=l(j);O=i(pt,"A",{id:!0,class:!0,href:!0});var wr=l(O);je=i(wr,"SPAN",{});var yr=l(je);v(Q.$$.fragment,yr),yr.forEach(t),wr.forEach(t),Ot=f(pt),Te=i(pt,"SPAN",{});var _r=l(Te);Bt=p(_r,"Preparing your objects"),_r.forEach(t),pt.forEach(t),Ue=f(e),B=i(e,"P",{});var ht=l(B);Dt=p(ht,"Next you need to pass all of the important objects related to training into "),he=i(ht,"A",{href:!0});var br=l(he);It=p(br,"Accelerator.prepare()"),br.forEach(t),Lt=p(ht,`. \u{1F917} Accelerate will
then make sure that everything is setup for the environment you are currently in to start your training:`),ht.forEach(t),Ke=f(e),v(V.$$.fragment,e),Qe=f(e),A=i(e,"P",{});var ve=l(A);Wt=p(ve,"These objects are returned in the same order they were sent in with. If "),ze=i(ve,"CODE",{});var Ar=l(ze);qt=p(Ar,"device_placement=True"),Ar.forEach(t),Ft=p(ve," is passed into the "),fe=i(ve,"A",{href:!0});var kr=l(fe);Yt=p(kr,"Accelerator"),kr.forEach(t),Gt=p(ve,` object (the default),
performing this action will also automatically move your model to the proper device as well.`),ve.forEach(t),Ve=f(e),v(D.$$.fragment,e),Xe=f(e),T=i(e,"H3",{class:!0});var ft=l(T);I=i(ft,"A",{id:!0,class:!0,href:!0});var Er=l(I);Se=i(Er,"SPAN",{});var Pr=l(Se);v(X.$$.fragment,Pr),Pr.forEach(t),Er.forEach(t),Jt=f(ft),xe=i(ft,"SPAN",{});var jr=l(xe);Rt=p(jr,"Modifying the training loop"),jr.forEach(t),ft.forEach(t),Ze=f(e),L=i(e,"P",{});var dt=l(L);Ut=p(dt,`Finally, three lines of code need changing in our training loop. \u{1F917} Accelerate\u2019s DataLoader classes will automatically handle the device placement by default,
and `),de=i(dt,"A",{href:!0});var Tr=l(de);Kt=p(Tr,"Accelerator.backward()"),Tr.forEach(t),Qt=p(dt," should be used for performing the backward pass:"),dt.forEach(t),et=f(e),v(Z.$$.fragment,e),tt=f(e),ue=i(e,"P",{});var zr=l(ue);Vt=p(zr,"With that, your training loop is now ready to use \u{1F917} Accelerate!"),zr.forEach(t),rt=f(e),z=i(e,"H2",{class:!0});var ut=l(z);W=i(ut,"A",{id:!0,class:!0,href:!0});var Sr=l(W);Ne=i(Sr,"SPAN",{});var xr=l(Ne);v(ee.$$.fragment,xr),xr.forEach(t),Sr.forEach(t),Xt=f(ut),Me=i(ut,"SPAN",{});var Nr=l(Me);Zt=p(Nr,"The finished code"),Nr.forEach(t),ut.forEach(t),at=f(e),me=i(e,"P",{});var Mr=l(me);er=p(Mr,"Below is the final version of the converted code:"),Mr.forEach(t),ot=f(e),v(te.$$.fragment,e),this.h()},h(){n(d,"name","hf:doc:metadata"),n(d,"content",JSON.stringify(Fr)),n(S,"id","migrating-your-code-to-accelerate"),n(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(S,"href","#migrating-your-code-to-accelerate"),n(_,"class","relative group"),n(x,"id","the-base-training-loop"),n(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(x,"href","#the-base-training-loop"),n(k,"class","relative group"),n(M,"id","add-in-accelerate"),n(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(M,"href","#add-in-accelerate"),n(E,"class","relative group"),n(se,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator"),n(C,"id","setting-the-right-device"),n(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(C,"href","#setting-the-right-device"),n(P,"class","relative group"),n(ce,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator"),n(pe,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator"),n(O,"id","preparing-your-objects"),n(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(O,"href","#preparing-your-objects"),n(j,"class","relative group"),n(he,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator.prepare"),n(fe,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator"),n(I,"id","modifying-the-training-loop"),n(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(I,"href","#modifying-the-training-loop"),n(T,"class","relative group"),n(de,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator.backward"),n(W,"id","the-finished-code"),n(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(W,"href","#the-finished-code"),n(z,"class","relative group")},m(e,a){r(document.head,d),s(e,u,a),s(e,_,a),r(_,S),r(S,$e),g(F,$e,null),r(_,mt),r(_,we),r(we,vt),s(e,Ce,a),s(e,ie,a),r(ie,gt),s(e,Oe,a),s(e,k,a),r(k,x),r(x,ye),g(Y,ye,null),r(k,$t),r(k,_e),r(_e,wt),s(e,Be,a),s(e,le,a),r(le,yt),s(e,De,a),g(N,e,a),s(e,Ie,a),g(G,e,a),s(e,Le,a),s(e,E,a),r(E,M),r(M,be),g(J,be,null),r(E,_t),r(E,Ae),r(Ae,bt),s(e,We,a),s(e,H,a),r(H,At),r(H,se),r(se,kt),r(H,Et),s(e,qe,a),g(R,e,a),s(e,Fe,a),s(e,ne,a),r(ne,Pt),s(e,Ye,a),s(e,P,a),r(P,C),r(C,ke),g(U,ke,null),r(P,jt),r(P,Ee),r(Ee,Tt),s(e,Ge,a),s(e,b,a),r(b,zt),r(b,ce),r(ce,St),r(b,xt),r(b,Pe),r(Pe,Nt),r(b,Mt),r(b,pe),r(pe,Ht),r(b,Ct),s(e,Je,a),g(K,e,a),s(e,Re,a),s(e,j,a),r(j,O),r(O,je),g(Q,je,null),r(j,Ot),r(j,Te),r(Te,Bt),s(e,Ue,a),s(e,B,a),r(B,Dt),r(B,he),r(he,It),r(B,Lt),s(e,Ke,a),g(V,e,a),s(e,Qe,a),s(e,A,a),r(A,Wt),r(A,ze),r(ze,qt),r(A,Ft),r(A,fe),r(fe,Yt),r(A,Gt),s(e,Ve,a),g(D,e,a),s(e,Xe,a),s(e,T,a),r(T,I),r(I,Se),g(X,Se,null),r(T,Jt),r(T,xe),r(xe,Rt),s(e,Ze,a),s(e,L,a),r(L,Ut),r(L,de),r(de,Kt),r(L,Qt),s(e,et,a),g(Z,e,a),s(e,tt,a),s(e,ue,a),r(ue,Vt),s(e,rt,a),s(e,z,a),r(z,W),r(W,Ne),g(ee,Ne,null),r(z,Xt),r(z,Me),r(Me,Zt),s(e,at,a),s(e,me,a),r(me,er),s(e,ot,a),g(te,e,a),it=!0},p(e,[a]){const re={};a&2&&(re.$$scope={dirty:a,ctx:e}),N.$set(re);const He={};a&2&&(He.$$scope={dirty:a,ctx:e}),D.$set(He)},i(e){it||($(F.$$.fragment,e),$(Y.$$.fragment,e),$(N.$$.fragment,e),$(G.$$.fragment,e),$(J.$$.fragment,e),$(R.$$.fragment,e),$(U.$$.fragment,e),$(K.$$.fragment,e),$(Q.$$.fragment,e),$(V.$$.fragment,e),$(D.$$.fragment,e),$(X.$$.fragment,e),$(Z.$$.fragment,e),$(ee.$$.fragment,e),$(te.$$.fragment,e),it=!0)},o(e){w(F.$$.fragment,e),w(Y.$$.fragment,e),w(N.$$.fragment,e),w(G.$$.fragment,e),w(J.$$.fragment,e),w(R.$$.fragment,e),w(U.$$.fragment,e),w(K.$$.fragment,e),w(Q.$$.fragment,e),w(V.$$.fragment,e),w(D.$$.fragment,e),w(X.$$.fragment,e),w(Z.$$.fragment,e),w(ee.$$.fragment,e),w(te.$$.fragment,e),it=!1},d(e){t(d),e&&t(u),e&&t(_),y(F),e&&t(Ce),e&&t(ie),e&&t(Oe),e&&t(k),y(Y),e&&t(Be),e&&t(le),e&&t(De),y(N,e),e&&t(Ie),y(G,e),e&&t(Le),e&&t(E),y(J),e&&t(We),e&&t(H),e&&t(qe),y(R,e),e&&t(Fe),e&&t(ne),e&&t(Ye),e&&t(P),y(U),e&&t(Ge),e&&t(b),e&&t(Je),y(K,e),e&&t(Re),e&&t(j),y(Q),e&&t(Ue),e&&t(B),e&&t(Ke),y(V,e),e&&t(Qe),e&&t(A),e&&t(Ve),y(D,e),e&&t(Xe),e&&t(T),y(X),e&&t(Ze),e&&t(L),e&&t(et),y(Z,e),e&&t(tt),e&&t(ue),e&&t(rt),e&&t(z),y(ee),e&&t(at),e&&t(me),e&&t(ot),y(te,e)}}}const Fr={local:"migrating-your-code-to-accelerate",sections:[{local:"the-base-training-loop",title:"The base training loop"},{local:"add-in-accelerate",sections:[{local:"setting-the-right-device",title:"Setting the right device"},{local:"preparing-your-objects",title:"Preparing your objects"},{local:"modifying-the-training-loop",title:"Modifying the training loop"}],title:"Add in \u{1F917} Accelerate"},{local:"the-finished-code",title:"The finished code"}],title:"Migrating your code to \u{1F917} Accelerate"};function Yr(oe){return Ir(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Kr extends Cr{constructor(d){super();Or(this,d,Yr,qr,Br,{})}}export{Kr as default,Fr as metadata};
