import{S as mt,i as dt,s as $t,e as i,k as p,w,t as l,M as yt,c,d as t,m as h,a as n,x as _,h as s,b as $,G as r,g as o,y as g,q as v,o as E,B as b,v as wt}from"../../chunks/vendor-hf-doc-builder.js";import{T as ht}from"../../chunks/Tip-hf-doc-builder.js";import{I as ft}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as re}from"../../chunks/CodeBlock-hf-doc-builder.js";function _t(j){let u;return{c(){u=l("If you are familiar with launching scripts in PyTorch yourself such as with `torchrun`, you can still do this. It is not required to use `accelerate launch`")},l(f){u=s(f,"If you are familiar with launching scripts in PyTorch yourself such as with `torchrun`, you can still do this. It is not required to use `accelerate launch`")},m(f,m){o(f,u,m)},d(f){f&&t(u)}}}function gt(j){let u;return{c(){u=l("Even if you are not using \u{1F917} Accelerate in your code, you can still use the launcher for starting your scripts!")},l(f){u=s(f,"Even if you are not using \u{1F917} Accelerate in your code, you can still use the launcher for starting your scripts!")},m(f,m){o(f,u,m)},d(f){f&&t(u)}}}function vt(j){let u,f,m,k,M,D,Ae,H,Pe,oe,G,xe,le,L,se,N,Ce,ie,y,A,R,U,Ie,V,Se,K,ze,ce,P,De,Q,Le,Ue,ne,x,ue,Y,qe,pe,q,he,C,Te,W,Oe,Be,fe,I,Fe,X,je,Ge,me,T,de,d,Ne,Z,Ve,Ye,ee,Je,Me,te,He,Re,$e,O,ye,J,Ke,we,B,_e,S,ge;return D=new ft({}),L=new re({props:{code:`from accelerate import Accelerator
accelerator = Accelerator()

model, optimizer, training_dataloader, scheduler = accelerator.prepare(
    model, optimizer, training_dataloader, scheduler
)

for batch in training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    accelerator.backward(loss)
    optimizer.step()
    scheduler.step()`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator
accelerator = Accelerator()

model, optimizer, training_dataloader, scheduler = accelerator.prepare(
    model, optimizer, training_dataloader, scheduler
)

<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    accelerator.backward(loss)
    optimizer.step()
    scheduler.step()`}}),U=new ft({}),x=new ht({props:{$$slots:{default:[_t]},$$scope:{ctx:j}}}),q=new re({props:{code:"accelerate launch {script_name.py} --arg1 --arg2 ...",highlighted:"accelerate launch {script_name.py} --arg1 --arg2 ..."}}),T=new re({props:{code:'CUDA_VISIBLE_DEVICES="0" accelerate launch {script_name.py} --arg1 --arg2 ...',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;0&quot;</span> accelerate launch {script_name.py} --arg1 --arg2 ...'}}),O=new re({props:{code:"accelerate launch --multi_gpu --mixed_precision=fp16 --num_processes=2 {script_name.py} --arg1 --arg2 ...",highlighted:"accelerate launch --multi_gpu --mixed_precision=fp16 --num_processes=2 {script_name.py} --arg1 --arg2 ..."}}),B=new re({props:{code:"accelerate launch -h",highlighted:"accelerate launch -h"}}),S=new ht({props:{$$slots:{default:[gt]},$$scope:{ctx:j}}}),{c(){u=i("meta"),f=p(),m=i("h1"),k=i("a"),M=i("span"),w(D.$$.fragment),Ae=p(),H=i("span"),Pe=l("Launching your \u{1F917} Accelerate scripts"),oe=p(),G=i("p"),xe=l(`In the previous tutorial you were introduced with how to modify your current training script to use \u{1F917} Accelerate.
The final version of that code is shown below:`),le=p(),w(L.$$.fragment),se=p(),N=i("p"),Ce=l("But how do you run this code and have it utilize the special hardware available to it?"),ie=p(),y=i("h2"),A=i("a"),R=i("span"),w(U.$$.fragment),Ie=p(),V=i("span"),Se=l("Using "),K=i("code"),ze=l("accelerate launch"),ce=p(),P=i("p"),De=l("\u{1F917} Accelerate has a special CLI command to help you launch your code in your system through "),Q=i("code"),Le=l("accelerate launch"),Ue=l(`.
This command wraps around all of the different commands needed to launch your script on various platforms, without you
having to remember what each of them are.`),ne=p(),w(x.$$.fragment),ue=p(),Y=i("p"),qe=l("You can launch your script quickly by using:"),pe=p(),w(q.$$.fragment),he=p(),C=i("p"),Te=l("Just put "),W=i("code"),Oe=l("accelerate launch"),Be=l(" at the start of your command, and pass in additional arguments and parameters to your script afterwards like normal!"),fe=p(),I=i("p"),Fe=l(`Since this runs the various different torch spawn methods, all of the environmental variables that would be expected for them can be modified here as well.
For example, here is how to use `),X=i("code"),je=l("accelerate launch"),Ge=l(" but only use a single GPU:"),me=p(),w(T.$$.fragment),de=p(),d=i("p"),Ne=l("You can also use "),Z=i("code"),Ve=l("accelerate launch"),Ye=l(" without performing "),ee=i("code"),Je=l("accelerate config"),Me=l(` first, but you will need to manually pass in all of the right configuration parameters.
For example here is how you would launch a script on two GPUs with mixed precision, without doing `),te=i("code"),He=l("accelerate config"),Re=l(" first:"),$e=p(),w(O.$$.fragment),ye=p(),J=i("p"),Ke=l("For a full list of all parameters you can pass in, run:"),we=p(),w(B.$$.fragment),_e=p(),w(S.$$.fragment),this.h()},l(e){const a=yt('[data-svelte="svelte-1phssyn"]',document.head);u=c(a,"META",{name:!0,content:!0}),a.forEach(t),f=h(e),m=c(e,"H1",{class:!0});var F=n(m);k=c(F,"A",{id:!0,class:!0,href:!0});var ae=n(k);M=c(ae,"SPAN",{});var We=n(M);_(D.$$.fragment,We),We.forEach(t),ae.forEach(t),Ae=h(F),H=c(F,"SPAN",{});var Xe=n(H);Pe=s(Xe,"Launching your \u{1F917} Accelerate scripts"),Xe.forEach(t),F.forEach(t),oe=h(e),G=c(e,"P",{});var Ze=n(G);xe=s(Ze,`In the previous tutorial you were introduced with how to modify your current training script to use \u{1F917} Accelerate.
The final version of that code is shown below:`),Ze.forEach(t),le=h(e),_(L.$$.fragment,e),se=h(e),N=c(e,"P",{});var et=n(N);Ce=s(et,"But how do you run this code and have it utilize the special hardware available to it?"),et.forEach(t),ie=h(e),y=c(e,"H2",{class:!0});var ve=n(y);A=c(ve,"A",{id:!0,class:!0,href:!0});var tt=n(A);R=c(tt,"SPAN",{});var at=n(R);_(U.$$.fragment,at),at.forEach(t),tt.forEach(t),Ie=h(ve),V=c(ve,"SPAN",{});var Qe=n(V);Se=s(Qe,"Using "),K=c(Qe,"CODE",{});var rt=n(K);ze=s(rt,"accelerate launch"),rt.forEach(t),Qe.forEach(t),ve.forEach(t),ce=h(e),P=c(e,"P",{});var Ee=n(P);De=s(Ee,"\u{1F917} Accelerate has a special CLI command to help you launch your code in your system through "),Q=c(Ee,"CODE",{});var ot=n(Q);Le=s(ot,"accelerate launch"),ot.forEach(t),Ue=s(Ee,`.
This command wraps around all of the different commands needed to launch your script on various platforms, without you
having to remember what each of them are.`),Ee.forEach(t),ne=h(e),_(x.$$.fragment,e),ue=h(e),Y=c(e,"P",{});var lt=n(Y);qe=s(lt,"You can launch your script quickly by using:"),lt.forEach(t),pe=h(e),_(q.$$.fragment,e),he=h(e),C=c(e,"P",{});var be=n(C);Te=s(be,"Just put "),W=c(be,"CODE",{});var st=n(W);Oe=s(st,"accelerate launch"),st.forEach(t),Be=s(be," at the start of your command, and pass in additional arguments and parameters to your script afterwards like normal!"),be.forEach(t),fe=h(e),I=c(e,"P",{});var ke=n(I);Fe=s(ke,`Since this runs the various different torch spawn methods, all of the environmental variables that would be expected for them can be modified here as well.
For example, here is how to use `),X=c(ke,"CODE",{});var it=n(X);je=s(it,"accelerate launch"),it.forEach(t),Ge=s(ke," but only use a single GPU:"),ke.forEach(t),me=h(e),_(T.$$.fragment,e),de=h(e),d=c(e,"P",{});var z=n(d);Ne=s(z,"You can also use "),Z=c(z,"CODE",{});var ct=n(Z);Ve=s(ct,"accelerate launch"),ct.forEach(t),Ye=s(z," without performing "),ee=c(z,"CODE",{});var nt=n(ee);Je=s(nt,"accelerate config"),nt.forEach(t),Me=s(z,` first, but you will need to manually pass in all of the right configuration parameters.
For example here is how you would launch a script on two GPUs with mixed precision, without doing `),te=c(z,"CODE",{});var ut=n(te);He=s(ut,"accelerate config"),ut.forEach(t),Re=s(z," first:"),z.forEach(t),$e=h(e),_(O.$$.fragment,e),ye=h(e),J=c(e,"P",{});var pt=n(J);Ke=s(pt,"For a full list of all parameters you can pass in, run:"),pt.forEach(t),we=h(e),_(B.$$.fragment,e),_e=h(e),_(S.$$.fragment,e),this.h()},h(){$(u,"name","hf:doc:metadata"),$(u,"content",JSON.stringify(Et)),$(k,"id","launching-your-accelerate-scripts"),$(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),$(k,"href","#launching-your-accelerate-scripts"),$(m,"class","relative group"),$(A,"id","using-accelerate-launch"),$(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),$(A,"href","#using-accelerate-launch"),$(y,"class","relative group")},m(e,a){r(document.head,u),o(e,f,a),o(e,m,a),r(m,k),r(k,M),g(D,M,null),r(m,Ae),r(m,H),r(H,Pe),o(e,oe,a),o(e,G,a),r(G,xe),o(e,le,a),g(L,e,a),o(e,se,a),o(e,N,a),r(N,Ce),o(e,ie,a),o(e,y,a),r(y,A),r(A,R),g(U,R,null),r(y,Ie),r(y,V),r(V,Se),r(V,K),r(K,ze),o(e,ce,a),o(e,P,a),r(P,De),r(P,Q),r(Q,Le),r(P,Ue),o(e,ne,a),g(x,e,a),o(e,ue,a),o(e,Y,a),r(Y,qe),o(e,pe,a),g(q,e,a),o(e,he,a),o(e,C,a),r(C,Te),r(C,W),r(W,Oe),r(C,Be),o(e,fe,a),o(e,I,a),r(I,Fe),r(I,X),r(X,je),r(I,Ge),o(e,me,a),g(T,e,a),o(e,de,a),o(e,d,a),r(d,Ne),r(d,Z),r(Z,Ve),r(d,Ye),r(d,ee),r(ee,Je),r(d,Me),r(d,te),r(te,He),r(d,Re),o(e,$e,a),g(O,e,a),o(e,ye,a),o(e,J,a),r(J,Ke),o(e,we,a),g(B,e,a),o(e,_e,a),g(S,e,a),ge=!0},p(e,[a]){const F={};a&2&&(F.$$scope={dirty:a,ctx:e}),x.$set(F);const ae={};a&2&&(ae.$$scope={dirty:a,ctx:e}),S.$set(ae)},i(e){ge||(v(D.$$.fragment,e),v(L.$$.fragment,e),v(U.$$.fragment,e),v(x.$$.fragment,e),v(q.$$.fragment,e),v(T.$$.fragment,e),v(O.$$.fragment,e),v(B.$$.fragment,e),v(S.$$.fragment,e),ge=!0)},o(e){E(D.$$.fragment,e),E(L.$$.fragment,e),E(U.$$.fragment,e),E(x.$$.fragment,e),E(q.$$.fragment,e),E(T.$$.fragment,e),E(O.$$.fragment,e),E(B.$$.fragment,e),E(S.$$.fragment,e),ge=!1},d(e){t(u),e&&t(f),e&&t(m),b(D),e&&t(oe),e&&t(G),e&&t(le),b(L,e),e&&t(se),e&&t(N),e&&t(ie),e&&t(y),b(U),e&&t(ce),e&&t(P),e&&t(ne),b(x,e),e&&t(ue),e&&t(Y),e&&t(pe),b(q,e),e&&t(he),e&&t(C),e&&t(fe),e&&t(I),e&&t(me),b(T,e),e&&t(de),e&&t(d),e&&t($e),b(O,e),e&&t(ye),e&&t(J),e&&t(we),b(B,e),e&&t(_e),b(S,e)}}}const Et={local:"launching-your-accelerate-scripts",sections:[{local:"using-accelerate-launch",title:"Using `accelerate launch`"}],title:"Launching your \u{1F917} Accelerate scripts"};function bt(j){return wt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ct extends mt{constructor(u){super();dt(this,u,bt,vt,$t,{})}}export{Ct as default,Et as metadata};
