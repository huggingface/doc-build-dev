import{S as Ph,i as jh,s as Gh,e as l,k as d,w as v,t as a,M as Uh,c as i,d as s,m as p,a as r,x as w,h as o,b as u,G as t,g as h,y,q as g,o as b,B as $,v as xh}from"../../chunks/vendor-hf-doc-builder.js";import{T as ot}from"../../chunks/Tip-hf-doc-builder.js";import{I as nt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as O}from"../../chunks/CodeBlock-hf-doc-builder.js";function Ah(D){let c,_;return{c(){c=l("p"),_=a("This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future.")},l(f){c=i(f,"P",{});var m=r(c);_=o(m,"This API is quite new and still in its experimental stage. While we strive to provide a stable API, it\u2019s possible some small parts of the public API will change in the future."),m.forEach(s)},m(f,m){h(f,c,m),t(c,_)},d(f){f&&s(c)}}}function Ch(D){let c,_;return{c(){c=l("p"),_=a("You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device.")},l(f){c=i(f,"P",{});var m=r(c);_=o(m,"You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device."),m.forEach(s)},m(f,m){h(f,c,m),t(c,_)},d(f){f&&s(c)}}}function qh(D){let c,_,f,m,U;return{c(){c=l("p"),_=a("This only supports inference of your model, not training. Most of the computation happens behind "),f=l("code"),m=a("torch.no_grad()"),U=a(" context managers to avoid spending some GPU memory with intermediate activations.")},l(k){c=i(k,"P",{});var E=r(c);_=o(E,"This only supports inference of your model, not training. Most of the computation happens behind "),f=i(E,"CODE",{});var A=r(f);m=o(A,"torch.no_grad()"),A.forEach(s),U=o(E," context managers to avoid spending some GPU memory with intermediate activations."),E.forEach(s)},m(k,E){h(k,c,E),t(c,_),t(c,f),t(f,m),t(c,U)},d(k){k&&s(c)}}}function Bh(D){let c,_,f,m,U;return{c(){c=l("p"),_=a("You can derive all sizes of the model (and thus compute a "),f=l("code"),m=a("device_map"),U=a(") on a model that is on the meta device.")},l(k){c=i(k,"P",{});var E=r(c);_=o(E,"You can derive all sizes of the model (and thus compute a "),f=i(E,"CODE",{});var A=r(f);m=o(A,"device_map"),A.forEach(s),U=o(E,") on a model that is on the meta device."),E.forEach(s)},m(k,E){h(k,c,E),t(c,_),t(c,f),t(f,m),t(c,U)},d(k){k&&s(c)}}}function Ih(D){let c,_,f,m,U,k,E,A,z,F,R,x,I,S;return{c(){c=l("p"),_=a("The options "),f=l("code"),m=a('"auto"'),U=a(" and "),k=l("code"),E=a('"balanced"'),A=a(" produce the same results for now, but the behavior of "),z=l("code"),F=a('"auto"'),R=a(" might change in the future if we find a strategy that makes more sense, while "),x=l("code"),I=a('"balanced"'),S=a(" will stay stable.")},l(L){c=i(L,"P",{});var P=r(c);_=o(P,"The options "),f=i(P,"CODE",{});var lt=r(f);m=o(lt,'"auto"'),lt.forEach(s),U=o(P," and "),k=i(P,"CODE",{});var Ce=r(k);E=o(Ce,'"balanced"'),Ce.forEach(s),A=o(P," produce the same results for now, but the behavior of "),z=i(P,"CODE",{});var H=r(z);F=o(H,'"auto"'),H.forEach(s),R=o(P," might change in the future if we find a strategy that makes more sense, while "),x=i(P,"CODE",{});var re=r(x);I=o(re,'"balanced"'),re.forEach(s),S=o(P," will stay stable."),P.forEach(s)},m(L,P){h(L,c,P),t(c,_),t(c,f),t(f,m),t(c,U),t(c,k),t(k,E),t(c,A),t(c,z),t(z,F),t(c,R),t(c,x),t(x,I),t(c,S)},d(L){L&&s(c)}}}function Th(D){let c,_,f,m,U,k,E,A,z,F,R;return{c(){c=l("p"),_=a("When a first allocation happens in PyTorch, it loads CUDA kernels which take about 1-2GB of memory depending on the GPU. Therefore you always have less usable memory than the actual size of the GPU. To see how much memory is actually used do "),f=l("code"),m=a("torch.ones(1).cuda()"),U=a(" and look at the memory usage."),k=d(),E=l("p"),A=a("Therefore when you create memory maps with "),z=l("code"),F=a("max_memory"),R=a(" make sure to adjust the avaialble memory accordingly to avoid out-of-memory errors.")},l(x){c=i(x,"P",{});var I=r(c);_=o(I,"When a first allocation happens in PyTorch, it loads CUDA kernels which take about 1-2GB of memory depending on the GPU. Therefore you always have less usable memory than the actual size of the GPU. To see how much memory is actually used do "),f=i(I,"CODE",{});var S=r(f);m=o(S,"torch.ones(1).cuda()"),S.forEach(s),U=o(I," and look at the memory usage."),I.forEach(s),k=p(x),E=i(x,"P",{});var L=r(E);A=o(L,"Therefore when you create memory maps with "),z=i(L,"CODE",{});var P=r(z);F=o(P,"max_memory"),P.forEach(s),R=o(L," make sure to adjust the avaialble memory accordingly to avoid out-of-memory errors."),L.forEach(s)},m(x,I){h(x,c,I),t(c,_),t(c,f),t(f,m),t(c,U),h(x,k,I),h(x,E,I),t(E,A),t(E,z),t(z,F),t(E,R)},d(x){x&&s(c),x&&s(k),x&&s(E)}}}function Oh(D){let c,_;return{c(){c=l("p"),_=a("To be the most efficient, make sure your device map puts the parameters on the GPUs in a sequential manner (e.g. don\u2019t put one of the first weights on GPU 0, then weights on GPU 1 and the last weight back to GPU 0) to avoid making many transfers of data between the GPUs.")},l(f){c=i(f,"P",{});var m=r(c);_=o(m,"To be the most efficient, make sure your device map puts the parameters on the GPUs in a sequential manner (e.g. don\u2019t put one of the first weights on GPU 0, then weights on GPU 1 and the last weight back to GPU 0) to avoid making many transfers of data between the GPUs."),m.forEach(s)},m(f,m){h(f,c,m),t(c,_)},d(f){f&&s(c)}}}function Dh(D){let c,_,f,m,U,k,E,A,z,F,R,x,I,S,L,P,lt,Ce,H,re,Go,Uo,Tt,xo,Ao,Ot,Co,oa,it,qo,na,he,la,ee,de,Dt,qe,Bo,Mt,Io,ia,pe,To,rt,Oo,Do,ra,Be,ha,ht,Mo,da,Ie,pa,dt,zo,ca,ce,fa,te,fe,zt,Te,Lo,Lt,Ro,ma,pt,So,ua,ct,No,_a,Oe,va,ft,Ho,wa,De,ya,T,Wo,Rt,Fo,Yo,St,Jo,Vo,Nt,Ko,Qo,Ht,Xo,Zo,Wt,en,tn,Ft,sn,ga,se,me,Yt,Me,an,Jt,on,ba,ue,nn,mt,ln,rn,$a,_e,hn,ze,dn,pn,ka,Le,Ea,ut,cn,Pa,Re,ja,_t,fn,Ga,Se,Ua,ve,mn,Vt,un,_n,xa,J,Kt,vn,wn,Qt,yn,gn,Xt,bn,Aa,ae,Zt,$n,kn,es,En,Pn,Ca,V,jn,ts,Gn,Un,ss,xn,An,qa,Ne,Ba,He,Ia,we,Cn,as,qn,Bn,Ta,We,Oa,oe,ye,os,Fe,In,ns,Tn,Da,vt,On,Ma,Ye,za,wt,Dn,La,K,ls,Mn,zn,is,Ln,Rn,rs,Sn,Ra,yt,Nn,Sa,ge,Na,ne,be,hs,Je,Hn,ds,Wn,Ha,M,Fn,ps,Yn,Jn,cs,Vn,Kn,fs,Qn,Xn,ms,Zn,el,us,tl,sl,Wa,$e,Fa,gt,al,Ya,bt,ol,Ja,Q,ke,_s,nl,ll,vs,il,rl,hl,Ee,ws,dl,pl,ys,cl,fl,ml,$t,gs,ul,_l,Va,Pe,Ka,j,vl,bs,wl,yl,$s,gl,bl,ks,$l,kl,Es,El,Pl,Ps,jl,Gl,js,Ul,xl,Gs,Al,Cl,Us,ql,Bl,Qa,kt,Il,Xa,Ve,Za,je,eo,Ge,Tl,xs,Ol,Dl,to,Ke,so,Et,Ml,ao,G,zl,As,Ll,Rl,Cs,Sl,Nl,qs,Hl,Wl,Bs,Fl,Yl,Is,Jl,Vl,Ts,Kl,Ql,Os,Xl,Zl,Ds,ei,ti,oo,Qe,no,Pt,si,lo,Xe,io,jt,ai,ro,Ze,ho,Ue,po,le,xe,Ms,et,oi,zs,ni,co,Gt,li,fo,C,Ls,ii,ri,X,Rs,hi,di,Ss,pi,ci,Ut,fi,mi,ui,Z,Ns,_i,vi,Hs,wi,yi,xt,gi,bi,$i,Ae,At,ki,Ei,Ws,Pi,ji,Gi,Fs,Ui,xi,Ys,Ai,Ci,Js,qi,mo;return k=new nt({}),S=new O({props:{code:`import torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`,highlighted:`<span class="hljs-keyword">import</span> torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`}}),he=new ot({props:{warning:!0,$$slots:{default:[Ah]},$$scope:{ctx:D}}}),qe=new nt({}),Be=new O({props:{code:`from accelerate import init_empty_weights

with init_empty_weights():
    my_model = ModelClass(...)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

<span class="hljs-keyword">with</span> init_empty_weights():
    my_model = ModelClass(...)`}}),Ie=new O({props:{code:`with init_empty_weights():
    model = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">with</span> init_empty_weights():
    model = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>)])`}}),ce=new ot({props:{warning:!0,$$slots:{default:[Ch]},$$scope:{ctx:D}}}),Te=new nt({}),Oe=new O({props:{code:`first_state_dict.bin
index.json
second_state_dict.bin`,highlighted:`first_state_dict.bin
index.json
second_state_dict.bin`}}),De=new O({props:{code:`{
  "linear1.weight": "first_state_dict.bin",
  "linear1.bias": "first_state_dict.bin",
  "linear2.weight": "second_state_dict.bin",
  "linear2.bias": "second_state_dict.bin"
}`,highlighted:`<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;linear1.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear1.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span>
<span class="hljs-punctuation">}</span>`}}),Me=new nt({}),Le=new O({props:{code:`git clone https://huggingface.co/sgugger/sharded-gpt-j-6B
cd sharded-gpt-j-6B
git-lfs install
git pull`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/sgugger/sharded-gpt-j-6B
<span class="hljs-built_in">cd</span> sharded-gpt-j-6B
git-lfs install
git pull`}}),Re=new O({props:{code:`from accelerate import init_empty_weights
from transformers import AutoConfig, AutoModelForCausalLM

checkpoint = "EleutherAI/gpt-j-6B"
config = AutoConfig.from_pretrained(checkpoint)

with init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

checkpoint = <span class="hljs-string">&quot;EleutherAI/gpt-j-6B&quot;</span>
config = AutoConfig.from_pretrained(checkpoint)

<span class="hljs-keyword">with</span> init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`}}),Se=new O({props:{code:`from accelerate import load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, "sharded-gpt-j-6B", device_map="auto", no_split_module_classes=["GPTJBlock"]
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>, no_split_module_classes=[<span class="hljs-string">&quot;GPTJBlock&quot;</span>]
)`}}),Ne=new O({props:{code:"model.hf_device_map",highlighted:"model.hf_device_map"}}),He=new O({props:{code:`{'transformer.wte': 0,
 'transformer.drop': 0,
 'transformer.h.0': 0,
 'transformer.h.1': 0,
 'transformer.h.2': 0,
 'transformer.h.3': 0,
 'transformer.h.4': 0,
 'transformer.h.5': 0,
 'transformer.h.6': 0,
 'transformer.h.7': 0,
 'transformer.h.8': 0,
 'transformer.h.9': 0,
 'transformer.h.10': 0,
 'transformer.h.11': 0,
 'transformer.h.12': 0,
 'transformer.h.13': 0,
 'transformer.h.14': 0,
 'transformer.h.15': 0,
 'transformer.h.16': 0,
 'transformer.h.17': 0,
 'transformer.h.18': 0,
 'transformer.h.19': 0,
 'transformer.h.20': 0,
 'transformer.h.21': 0,
 'transformer.h.22': 0,
 'transformer.h.23': 0,
 'transformer.h.24': 1,
 'transformer.h.25': 1,
 'transformer.h.26': 1,
 'transformer.h.27': 1,
 'transformer.ln_f': 1,
 'lm_head': 1}`,highlighted:`{<span class="hljs-string">&#x27;transformer.wte&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.drop&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.1&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.2&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.3&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.4&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.5&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.6&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.7&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.8&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.9&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.10&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.11&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.12&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.13&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.14&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.15&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.16&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.17&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.18&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.19&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.20&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.21&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.22&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.23&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.24&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.25&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.26&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.27&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.ln_f&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-number">1</span>}`}}),We=new O({props:{code:'model = load_checkpoint_and_dispatch(model, "sharded-gpt-j-6B", device_map=my_device_map)',highlighted:'model = load_checkpoint_and_dispatch(model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=my_device_map)'}}),Fe=new nt({}),Ye=new O({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer("Hello, my name is", return_tensors="pt")
inputs = inputs.to(0)
output = model.generate(inputs["input_ids"])
tokenizer.decode(output[0].tolist())`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer(<span class="hljs-string">&quot;Hello, my name is&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
inputs = inputs.to(<span class="hljs-number">0</span>)
output = model.generate(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
tokenizer.decode(output[<span class="hljs-number">0</span>].tolist())`}}),ge=new ot({props:{warning:!0,$$slots:{default:[qh]},$$scope:{ctx:D}}}),Je=new nt({}),$e=new ot({props:{$$slots:{default:[Bh]},$$scope:{ctx:D}}}),Pe=new ot({props:{$$slots:{default:[Ih]},$$scope:{ctx:D}}}),Ve=new O({props:{code:`from accelerate import infer_auto_device_map

device_map = infer_auto_device_map(my_model, max_memory={0: "10GiB", 1: "10GiB", "cpu": "30GiB"})`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> infer_auto_device_map

device_map = infer_auto_device_map(my_model, max_memory={<span class="hljs-number">0</span>: <span class="hljs-string">&quot;10GiB&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;10GiB&quot;</span>, <span class="hljs-string">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;30GiB&quot;</span>})`}}),je=new ot({props:{warning:!0,$$slots:{default:[Th]},$$scope:{ctx:D}}}),Ke=new O({props:{code:'max_memory = {0: "30GIB", 1: "46GIB", 2: "46GIB", 3: "46GIB", 4: "46GIB", 5: "46GIB", 6: "46GIB", 7: "46GIB"}',highlighted:'max_memory = {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;30GIB&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&quot;46GIB&quot;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&quot;46GIB&quot;</span>}'}}),Qe=new O({props:{code:'device_map = {"block1": 0, "block2": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2&quot;</span>: <span class="hljs-number">1</span>}'}}),Xe=new O({props:{code:'device_map = {"block1": 0, "block2.linear1": 0, "block2.linear2": 1, "block2.linear3": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear2&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;block2.linear3&quot;</span>: <span class="hljs-number">1</span>}'}}),Ze=new O({props:{code:'device_map = {"block1": 0, "block2.linear1": 1, "block2.linear2": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;block1&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;block2.linear1&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;block2.linear2&quot;</span>: <span class="hljs-number">1</span>}'}}),Ue=new ot({props:{$$slots:{default:[Oh]},$$scope:{ctx:D}}}),et=new nt({}),{c(){c=l("meta"),_=d(),f=l("h1"),m=l("a"),U=l("span"),v(k.$$.fragment),E=d(),A=l("span"),z=a("Handling big models"),F=d(),R=l("p"),x=a("When loading a pretrained model in PyTorch, the usual workflow looks like this:"),I=d(),v(S.$$.fragment),L=d(),P=l("p"),lt=a("In plain English, those steps are:"),Ce=d(),H=l("ol"),re=l("li"),Go=a("Create the model with randomly initialized weights"),Uo=d(),Tt=l("li"),xo=a("Load the model weights (in a dictionary usually called a state dict) from the disk"),Ao=d(),Ot=l("li"),Co=a("Load those weights inside the model"),oa=d(),it=l("p"),qo=a("While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),na=d(),v(he.$$.fragment),la=d(),ee=l("h2"),de=l("a"),Dt=l("span"),v(qe.$$.fragment),Bo=d(),Mt=l("span"),Io=a("Instantiating an empty model"),ia=d(),pe=l("p"),To=a("The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),rt=l("a"),Oo=a("init_empty_weights()"),Do=a(" that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),ra=d(),v(Be.$$.fragment),ha=d(),ht=l("p"),Mo=a("For instance:"),da=d(),v(Ie.$$.fragment),pa=d(),dt=l("p"),zo=a("initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),ca=d(),v(ce.$$.fragment),fa=d(),te=l("h2"),fe=l("a"),zt=l("span"),v(Te.$$.fragment),Lo=d(),Lt=l("span"),Ro=a("Sharded checkpoints"),ma=d(),pt=l("p"),So=a("It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),ua=d(),ct=l("p"),No=a("\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),_a=d(),v(Oe.$$.fragment),va=d(),ft=l("p"),Ho=a("with index.json being the following file:"),wa=d(),v(De.$$.fragment),ya=d(),T=l("p"),Wo=a("and "),Rt=l("code"),Fo=a("first_state_dict.bin"),Yo=a(" containing the weights for "),St=l("code"),Jo=a('"linear1.weight"'),Vo=a(" and "),Nt=l("code"),Ko=a('"linear1.bias"'),Qo=a(", "),Ht=l("code"),Xo=a("second_state_dict.bin"),Zo=a(" the ones for "),Wt=l("code"),en=a('"linear2.weight"'),tn=a(" and "),Ft=l("code"),sn=a('"linear2.bias"'),ga=d(),se=l("h2"),me=l("a"),Yt=l("span"),v(Me.$$.fragment),an=d(),Jt=l("span"),on=a("Loading weights"),ba=d(),ue=l("p"),nn=a("The second tool \u{1F917} Accelerate introduces is a function "),mt=l("a"),ln=a("load_checkpoint_and_dispatch()"),rn=a(", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),$a=d(),_e=l("p"),hn=a("Here is how we can use this to load the "),ze=l("a"),dn=a("GPT-J-6B"),pn=a(" model. You clone the sharded version of this model with:"),ka=d(),v(Le.$$.fragment),Ea=d(),ut=l("p"),cn=a("then we can initialize the model with"),Pa=d(),v(Re.$$.fragment),ja=d(),_t=l("p"),fn=a("and load the checkpoint we just downloaded with:"),Ga=d(),v(Se.$$.fragment),Ua=d(),ve=l("p"),mn=a("By passing "),Vt=l("code"),un=a('device_map="auto"'),_n=a(", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),xa=d(),J=l("ul"),Kt=l("li"),vn=a("first we use the maximum space available on the GPU(s)"),wn=d(),Qt=l("li"),yn=a("if we still need space, we store the remaining weights on the CPU"),gn=d(),Xt=l("li"),bn=a("if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),Aa=d(),ae=l("p"),Zt=l("code"),$n=a('no_split_module_classes=["GPTJBlock"]'),kn=a(" indicates that the modules that are "),es=l("code"),En=a("GPTJBlock"),Pn=a(" should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),Ca=d(),V=l("p"),jn=a("You can see the "),ts=l("code"),Gn=a("device_map"),Un=a(" that \u{1F917} Accelerate picked by accessing the "),ss=l("code"),xn=a("hf_device_map"),An=a(" attribute of your model:"),qa=d(),v(Ne.$$.fragment),Ba=d(),v(He.$$.fragment),Ia=d(),we=l("p"),Cn=a("You can also design your "),as=l("code"),qn=a("device_map"),Bn=a(" yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),Ta=d(),v(We.$$.fragment),Oa=d(),oe=l("h2"),ye=l("a"),os=l("span"),v(Fe.$$.fragment),In=d(),ns=l("span"),Tn=a("Run the model"),Da=d(),vt=l("p"),On=a("Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),Ma=d(),v(Ye.$$.fragment),za=d(),wt=l("p"),Dn=a("Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),La=d(),K=l("ul"),ls=l("li"),Mn=a("at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),zn=d(),is=l("li"),Ln=a("for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),Rn=d(),rs=l("li"),Sn=a("for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),Ra=d(),yt=l("p"),Nn=a("This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),Sa=d(),v(ge.$$.fragment),Na=d(),ne=l("h2"),be=l("a"),hs=l("span"),v(Je.$$.fragment),Hn=d(),ds=l("span"),Wn=a("Designing a device map"),Ha=d(),M=l("p"),Fn=a("You can let \u{1F917} Accelerate handle the device map computation by setting "),ps=l("code"),Yn=a("device_map"),Jn=a(" to one of the supported options ("),cs=l("code"),Vn=a('"auto"'),Kn=a(", "),fs=l("code"),Qn=a('"balanced"'),Xn=a(", "),ms=l("code"),Zn=a('"balanced_low_0"'),el=a(", "),us=l("code"),tl=a('"sequential"'),sl=a(") or create one yourself, if you want more control over where each layer should go."),Wa=d(),v($e.$$.fragment),Fa=d(),gt=l("p"),al=a("All the options will produce the same result when you don\u2019t have enough GPU memory to accomodate the whole model (which is to fit everything that can on the GPU, then offload weights on the CPU or even on the disk if there is not enough RAM)."),Ya=d(),bt=l("p"),ol=a("When you have more GPU memory available than the model size, here the difference between each option:"),Ja=d(),Q=l("ul"),ke=l("li"),_s=l("code"),nl=a('"auto"'),ll=a(" and "),vs=l("code"),il=a('"balanced"'),rl=a(" evenly split the model on all available GPUs, making it possible for you to use a batch size greater than 1."),hl=d(),Ee=l("li"),ws=l("code"),dl=a('"balanced_low_0"'),pl=a(" evenly splits the model on all GPUs except the first one, and only puts on GPU 0 what does not fit on the others. This option is great when you need to use GPU 0 for some processing of the outputs, like when using the "),ys=l("code"),cl=a("generate"),fl=a(" function for Transformers models"),ml=d(),$t=l("li"),gs=l("code"),ul=a('"sequential"'),_l=a(" will fit what it can on GPU 0, then move on GPU 1 and so forth (so won\u2019t use the last GPUs if it doesn\u2019t need to)."),Va=d(),v(Pe.$$.fragment),Ka=d(),j=l("p"),vl=a("First note that you can limit the memory used on each GPU by using the "),bs=l("code"),wl=a("max_memory"),yl=a(" argument (available in "),$s=l("code"),gl=a("infer_auto_device_map()"),bl=a(" and in all functions using it). When setting "),ks=l("code"),$l=a("max_memory"),kl=a(", you should pass along a dictionary containing the GPU identifiers (for instance "),Es=l("code"),El=a("0"),Pl=a(", "),Ps=l("code"),jl=a("1"),Gl=a(" etc.) and the "),js=l("code"),Ul=a('"cpu"'),xl=a(" key for the maximum RAM you want used for CPU offload. The values can either be an integer (in bytes) or a string representing a number with its unit, such as "),Gs=l("code"),Al=a('"10GiB"'),Cl=a(" or "),Us=l("code"),ql=a('"10GB"'),Bl=a("."),Qa=d(),kt=l("p"),Il=a("Here is an example where we don\u2019t want to use more than 10GiB on each of two GPUs and no more than 30GiB of CPU RAM for the model weights:"),Xa=d(),v(Ve.$$.fragment),Za=d(),v(je.$$.fragment),eo=d(),Ge=l("p"),Tl=a("Additionally, if you do some additional operations with your outputs without placing them back on the CPU (for instance inside the "),xs=l("code"),Ol=a("generate"),Dl=a(" method of Transformers) and if you placed your inputs on a GPU, that GPU will consume more memory than the others (Accelerate always place the output back to the device of the input). Therefore if you would like to optimize the maximum batch size and you have many GPUs, give the first GPU less memory. For example, with BLOOM-176B on 8x80 A100 setup the close to ideal map is:"),to=d(),v(Ke.$$.fragment),so=d(),Et=l("p"),Ml=a("as you can see we gave the remaining 7 GPUs ~50% more memory than GPU 0."),ao=d(),G=l("p"),zl=a("If you opt to fully design the "),As=l("code"),Ll=a("device_map"),Rl=a(" yourself, it should be a dictionary with keys being module names of your model and values being a valid device identifier (for instance an integer for the GPUs) or "),Cs=l("code"),Sl=a('"cpu"'),Nl=a(" for CPU offload, "),qs=l("code"),Hl=a('"disk"'),Wl=a(" for disk offload. The keys need to cover the whole model, you can then define your device map as you wish: for instance if your model has two blocks (let\u2019s say "),Bs=l("code"),Fl=a("block1"),Yl=a(" and "),Is=l("code"),Jl=a("block2"),Vl=a(") which each contain three linear layers (let\u2019s say "),Ts=l("code"),Kl=a("linear1"),Ql=a(", "),Os=l("code"),Xl=a("linear2"),Zl=a(" and "),Ds=l("code"),ei=a("linear3"),ti=a("), a valid device map can be:"),oo=d(),v(Qe.$$.fragment),no=d(),Pt=l("p"),si=a("another one that is valid could be:"),lo=d(),v(Xe.$$.fragment),io=d(),jt=l("p"),ai=a("On the other hand, this one is not valid as it does not cover every parameter of the model:"),ro=d(),v(Ze.$$.fragment),ho=d(),v(Ue.$$.fragment),po=d(),le=l("h2"),xe=l("a"),Ms=l("span"),v(et.$$.fragment),oi=d(),zs=l("span"),ni=a("Limits and further development"),co=d(),Gt=l("p"),li=a("We are aware of the current limitations in the API:"),fo=d(),C=l("ul"),Ls=l("li"),ii=a("While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),ri=d(),X=l("li"),Rs=l("code"),hi=a("infer_auto_device_map()"),di=a(" (or "),Ss=l("code"),pi=a('device_map="auto"'),ci=a(" in "),Ut=l("a"),fi=a("load_checkpoint_and_dispatch()"),mi=a(") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),ui=d(),Z=l("li"),Ns=l("code"),_i=a("infer_auto_device_map()"),vi=a(" (or "),Hs=l("code"),wi=a('device_map="auto"'),yi=a(" in "),xt=l("a"),gi=a("load_checkpoint_and_dispatch()"),bi=a(") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),$i=d(),Ae=l("li"),At=l("a"),ki=a("load_checkpoint_and_dispatch()"),Ei=a(" and "),Ws=l("code"),Pi=a("load_checkpoint_in_model()"),ji=a(" do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),Gi=d(),Fs=l("li"),Ui=a("The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),xi=d(),Ys=l("li"),Ai=a("When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),Ci=d(),Js=l("li"),qi=a("Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),this.h()},l(e){const n=Uh('[data-svelte="svelte-1phssyn"]',document.head);c=i(n,"META",{name:!0,content:!0}),n.forEach(s),_=p(e),f=i(e,"H1",{class:!0});var tt=r(f);m=i(tt,"A",{id:!0,class:!0,href:!0});var Vs=r(m);U=i(Vs,"SPAN",{});var Ks=r(U);w(k.$$.fragment,Ks),Ks.forEach(s),Vs.forEach(s),E=p(tt),A=i(tt,"SPAN",{});var Qs=r(A);z=o(Qs,"Handling big models"),Qs.forEach(s),tt.forEach(s),F=p(e),R=i(e,"P",{});var Xs=r(R);x=o(Xs,"When loading a pretrained model in PyTorch, the usual workflow looks like this:"),Xs.forEach(s),I=p(e),w(S.$$.fragment,e),L=p(e),P=i(e,"P",{});var Zs=r(P);lt=o(Zs,"In plain English, those steps are:"),Zs.forEach(s),Ce=p(e),H=i(e,"OL",{});var ie=r(H);re=i(ie,"LI",{});var Ii=r(re);Go=o(Ii,"Create the model with randomly initialized weights"),Ii.forEach(s),Uo=p(ie),Tt=i(ie,"LI",{});var Ti=r(Tt);xo=o(Ti,"Load the model weights (in a dictionary usually called a state dict) from the disk"),Ti.forEach(s),Ao=p(ie),Ot=i(ie,"LI",{});var Oi=r(Ot);Co=o(Oi,"Load those weights inside the model"),Oi.forEach(s),ie.forEach(s),oa=p(e),it=i(e,"P",{});var Di=r(it);qo=o(Di,"While this works very well for regularly sized models, this workflow has some clear limitations when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this means you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),Di.forEach(s),na=p(e),w(he.$$.fragment,e),la=p(e),ee=i(e,"H2",{class:!0});var uo=r(ee);de=i(uo,"A",{id:!0,class:!0,href:!0});var Mi=r(de);Dt=i(Mi,"SPAN",{});var zi=r(Dt);w(qe.$$.fragment,zi),zi.forEach(s),Mi.forEach(s),Bo=p(uo),Mt=i(uo,"SPAN",{});var Li=r(Mt);Io=o(Li,"Instantiating an empty model"),Li.forEach(s),uo.forEach(s),ia=p(e),pe=i(e,"P",{});var _o=r(pe);To=o(_o,"The first tool \u{1F917} Accelerate introduces to help with big models is a context manager "),rt=i(_o,"A",{href:!0});var Ri=r(rt);Oo=o(Ri,"init_empty_weights()"),Ri.forEach(s),Do=o(_o," that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),_o.forEach(s),ra=p(e),w(Be.$$.fragment,e),ha=p(e),ht=i(e,"P",{});var Si=r(ht);Mo=o(Si,"For instance:"),Si.forEach(s),da=p(e),w(Ie.$$.fragment,e),pa=p(e),dt=i(e,"P",{});var Ni=r(dt);zo=o(Ni,"initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),Ni.forEach(s),ca=p(e),w(ce.$$.fragment,e),fa=p(e),te=i(e,"H2",{class:!0});var vo=r(te);fe=i(vo,"A",{id:!0,class:!0,href:!0});var Hi=r(fe);zt=i(Hi,"SPAN",{});var Wi=r(zt);w(Te.$$.fragment,Wi),Wi.forEach(s),Hi.forEach(s),Lo=p(vo),Lt=i(vo,"SPAN",{});var Fi=r(Lt);Ro=o(Fi,"Sharded checkpoints"),Fi.forEach(s),vo.forEach(s),ma=p(e),pt=i(e,"P",{});var Yi=r(pt);So=o(Yi,"It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),Yi.forEach(s),ua=p(e),ct=i(e,"P",{});var Ji=r(ct);No=o(Ji,"\u{1F917} Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),Ji.forEach(s),_a=p(e),w(Oe.$$.fragment,e),va=p(e),ft=i(e,"P",{});var Vi=r(ft);Ho=o(Vi,"with index.json being the following file:"),Vi.forEach(s),wa=p(e),w(De.$$.fragment,e),ya=p(e),T=i(e,"P",{});var W=r(T);Wo=o(W,"and "),Rt=i(W,"CODE",{});var Ki=r(Rt);Fo=o(Ki,"first_state_dict.bin"),Ki.forEach(s),Yo=o(W," containing the weights for "),St=i(W,"CODE",{});var Qi=r(St);Jo=o(Qi,'"linear1.weight"'),Qi.forEach(s),Vo=o(W," and "),Nt=i(W,"CODE",{});var Xi=r(Nt);Ko=o(Xi,'"linear1.bias"'),Xi.forEach(s),Qo=o(W,", "),Ht=i(W,"CODE",{});var Zi=r(Ht);Xo=o(Zi,"second_state_dict.bin"),Zi.forEach(s),Zo=o(W," the ones for "),Wt=i(W,"CODE",{});var er=r(Wt);en=o(er,'"linear2.weight"'),er.forEach(s),tn=o(W," and "),Ft=i(W,"CODE",{});var tr=r(Ft);sn=o(tr,'"linear2.bias"'),tr.forEach(s),W.forEach(s),ga=p(e),se=i(e,"H2",{class:!0});var wo=r(se);me=i(wo,"A",{id:!0,class:!0,href:!0});var sr=r(me);Yt=i(sr,"SPAN",{});var ar=r(Yt);w(Me.$$.fragment,ar),ar.forEach(s),sr.forEach(s),an=p(wo),Jt=i(wo,"SPAN",{});var or=r(Jt);on=o(or,"Loading weights"),or.forEach(s),wo.forEach(s),ba=p(e),ue=i(e,"P",{});var yo=r(ue);nn=o(yo,"The second tool \u{1F917} Accelerate introduces is a function "),mt=i(yo,"A",{href:!0});var nr=r(mt);ln=o(nr,"load_checkpoint_and_dispatch()"),nr.forEach(s),rn=o(yo,", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),yo.forEach(s),$a=p(e),_e=i(e,"P",{});var go=r(_e);hn=o(go,"Here is how we can use this to load the "),ze=i(go,"A",{href:!0,rel:!0});var lr=r(ze);dn=o(lr,"GPT-J-6B"),lr.forEach(s),pn=o(go," model. You clone the sharded version of this model with:"),go.forEach(s),ka=p(e),w(Le.$$.fragment,e),Ea=p(e),ut=i(e,"P",{});var ir=r(ut);cn=o(ir,"then we can initialize the model with"),ir.forEach(s),Pa=p(e),w(Re.$$.fragment,e),ja=p(e),_t=i(e,"P",{});var rr=r(_t);fn=o(rr,"and load the checkpoint we just downloaded with:"),rr.forEach(s),Ga=p(e),w(Se.$$.fragment,e),Ua=p(e),ve=i(e,"P",{});var bo=r(ve);mn=o(bo,"By passing "),Vt=i(bo,"CODE",{});var hr=r(Vt);un=o(hr,'device_map="auto"'),hr.forEach(s),_n=o(bo,", we tell \u{1F917} Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),bo.forEach(s),xa=p(e),J=i(e,"UL",{});var Ct=r(J);Kt=i(Ct,"LI",{});var dr=r(Kt);vn=o(dr,"first we use the maximum space available on the GPU(s)"),dr.forEach(s),wn=p(Ct),Qt=i(Ct,"LI",{});var pr=r(Qt);yn=o(pr,"if we still need space, we store the remaining weights on the CPU"),pr.forEach(s),gn=p(Ct),Xt=i(Ct,"LI",{});var cr=r(Xt);bn=o(cr,"if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),cr.forEach(s),Ct.forEach(s),Aa=p(e),ae=i(e,"P",{});var ea=r(ae);Zt=i(ea,"CODE",{});var fr=r(Zt);$n=o(fr,'no_split_module_classes=["GPTJBlock"]'),fr.forEach(s),kn=o(ea," indicates that the modules that are "),es=i(ea,"CODE",{});var mr=r(es);En=o(mr,"GPTJBlock"),mr.forEach(s),Pn=o(ea," should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),ea.forEach(s),Ca=p(e),V=i(e,"P",{});var qt=r(V);jn=o(qt,"You can see the "),ts=i(qt,"CODE",{});var ur=r(ts);Gn=o(ur,"device_map"),ur.forEach(s),Un=o(qt," that \u{1F917} Accelerate picked by accessing the "),ss=i(qt,"CODE",{});var _r=r(ss);xn=o(_r,"hf_device_map"),_r.forEach(s),An=o(qt," attribute of your model:"),qt.forEach(s),qa=p(e),w(Ne.$$.fragment,e),Ba=p(e),w(He.$$.fragment,e),Ia=p(e),we=i(e,"P",{});var $o=r(we);Cn=o($o,"You can also design your "),as=i($o,"CODE",{});var vr=r(as);qn=o(vr,"device_map"),vr.forEach(s),Bn=o($o," yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),$o.forEach(s),Ta=p(e),w(We.$$.fragment,e),Oa=p(e),oe=i(e,"H2",{class:!0});var ko=r(oe);ye=i(ko,"A",{id:!0,class:!0,href:!0});var wr=r(ye);os=i(wr,"SPAN",{});var yr=r(os);w(Fe.$$.fragment,yr),yr.forEach(s),wr.forEach(s),In=p(ko),ns=i(ko,"SPAN",{});var gr=r(ns);Tn=o(gr,"Run the model"),gr.forEach(s),ko.forEach(s),Da=p(e),vt=i(e,"P",{});var br=r(vt);On=o(br,"Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),br.forEach(s),Ma=p(e),w(Ye.$$.fragment,e),za=p(e),wt=i(e,"P",{});var $r=r(wt);Dn=o($r,"Behind the scenes, \u{1F917} Accelerate added hooks to the model, so that:"),$r.forEach(s),La=p(e),K=i(e,"UL",{});var Bt=r(K);ls=i(Bt,"LI",{});var kr=r(ls);Mn=o(kr,"at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),kr.forEach(s),zn=p(Bt),is=i(Bt,"LI",{});var Er=r(is);Ln=o(Er,"for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),Er.forEach(s),Rn=p(Bt),rs=i(Bt,"LI",{});var Pr=r(rs);Sn=o(Pr,"for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),Pr.forEach(s),Bt.forEach(s),Ra=p(e),yt=i(e,"P",{});var jr=r(yt);Nn=o(jr,"This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),jr.forEach(s),Sa=p(e),w(ge.$$.fragment,e),Na=p(e),ne=i(e,"H2",{class:!0});var Eo=r(ne);be=i(Eo,"A",{id:!0,class:!0,href:!0});var Gr=r(be);hs=i(Gr,"SPAN",{});var Ur=r(hs);w(Je.$$.fragment,Ur),Ur.forEach(s),Gr.forEach(s),Hn=p(Eo),ds=i(Eo,"SPAN",{});var xr=r(ds);Wn=o(xr,"Designing a device map"),xr.forEach(s),Eo.forEach(s),Ha=p(e),M=i(e,"P",{});var Y=r(M);Fn=o(Y,"You can let \u{1F917} Accelerate handle the device map computation by setting "),ps=i(Y,"CODE",{});var Ar=r(ps);Yn=o(Ar,"device_map"),Ar.forEach(s),Jn=o(Y," to one of the supported options ("),cs=i(Y,"CODE",{});var Cr=r(cs);Vn=o(Cr,'"auto"'),Cr.forEach(s),Kn=o(Y,", "),fs=i(Y,"CODE",{});var qr=r(fs);Qn=o(qr,'"balanced"'),qr.forEach(s),Xn=o(Y,", "),ms=i(Y,"CODE",{});var Br=r(ms);Zn=o(Br,'"balanced_low_0"'),Br.forEach(s),el=o(Y,", "),us=i(Y,"CODE",{});var Ir=r(us);tl=o(Ir,'"sequential"'),Ir.forEach(s),sl=o(Y,") or create one yourself, if you want more control over where each layer should go."),Y.forEach(s),Wa=p(e),w($e.$$.fragment,e),Fa=p(e),gt=i(e,"P",{});var Tr=r(gt);al=o(Tr,"All the options will produce the same result when you don\u2019t have enough GPU memory to accomodate the whole model (which is to fit everything that can on the GPU, then offload weights on the CPU or even on the disk if there is not enough RAM)."),Tr.forEach(s),Ya=p(e),bt=i(e,"P",{});var Or=r(bt);ol=o(Or,"When you have more GPU memory available than the model size, here the difference between each option:"),Or.forEach(s),Ja=p(e),Q=i(e,"UL",{});var It=r(Q);ke=i(It,"LI",{});var ta=r(ke);_s=i(ta,"CODE",{});var Dr=r(_s);nl=o(Dr,'"auto"'),Dr.forEach(s),ll=o(ta," and "),vs=i(ta,"CODE",{});var Mr=r(vs);il=o(Mr,'"balanced"'),Mr.forEach(s),rl=o(ta," evenly split the model on all available GPUs, making it possible for you to use a batch size greater than 1."),ta.forEach(s),hl=p(It),Ee=i(It,"LI",{});var sa=r(Ee);ws=i(sa,"CODE",{});var zr=r(ws);dl=o(zr,'"balanced_low_0"'),zr.forEach(s),pl=o(sa," evenly splits the model on all GPUs except the first one, and only puts on GPU 0 what does not fit on the others. This option is great when you need to use GPU 0 for some processing of the outputs, like when using the "),ys=i(sa,"CODE",{});var Lr=r(ys);cl=o(Lr,"generate"),Lr.forEach(s),fl=o(sa," function for Transformers models"),sa.forEach(s),ml=p(It),$t=i(It,"LI",{});var Bi=r($t);gs=i(Bi,"CODE",{});var Rr=r(gs);ul=o(Rr,'"sequential"'),Rr.forEach(s),_l=o(Bi," will fit what it can on GPU 0, then move on GPU 1 and so forth (so won\u2019t use the last GPUs if it doesn\u2019t need to)."),Bi.forEach(s),It.forEach(s),Va=p(e),w(Pe.$$.fragment,e),Ka=p(e),j=i(e,"P",{});var q=r(j);vl=o(q,"First note that you can limit the memory used on each GPU by using the "),bs=i(q,"CODE",{});var Sr=r(bs);wl=o(Sr,"max_memory"),Sr.forEach(s),yl=o(q," argument (available in "),$s=i(q,"CODE",{});var Nr=r($s);gl=o(Nr,"infer_auto_device_map()"),Nr.forEach(s),bl=o(q," and in all functions using it). When setting "),ks=i(q,"CODE",{});var Hr=r(ks);$l=o(Hr,"max_memory"),Hr.forEach(s),kl=o(q,", you should pass along a dictionary containing the GPU identifiers (for instance "),Es=i(q,"CODE",{});var Wr=r(Es);El=o(Wr,"0"),Wr.forEach(s),Pl=o(q,", "),Ps=i(q,"CODE",{});var Fr=r(Ps);jl=o(Fr,"1"),Fr.forEach(s),Gl=o(q," etc.) and the "),js=i(q,"CODE",{});var Yr=r(js);Ul=o(Yr,'"cpu"'),Yr.forEach(s),xl=o(q," key for the maximum RAM you want used for CPU offload. The values can either be an integer (in bytes) or a string representing a number with its unit, such as "),Gs=i(q,"CODE",{});var Jr=r(Gs);Al=o(Jr,'"10GiB"'),Jr.forEach(s),Cl=o(q," or "),Us=i(q,"CODE",{});var Vr=r(Us);ql=o(Vr,'"10GB"'),Vr.forEach(s),Bl=o(q,"."),q.forEach(s),Qa=p(e),kt=i(e,"P",{});var Kr=r(kt);Il=o(Kr,"Here is an example where we don\u2019t want to use more than 10GiB on each of two GPUs and no more than 30GiB of CPU RAM for the model weights:"),Kr.forEach(s),Xa=p(e),w(Ve.$$.fragment,e),Za=p(e),w(je.$$.fragment,e),eo=p(e),Ge=i(e,"P",{});var Po=r(Ge);Tl=o(Po,"Additionally, if you do some additional operations with your outputs without placing them back on the CPU (for instance inside the "),xs=i(Po,"CODE",{});var Qr=r(xs);Ol=o(Qr,"generate"),Qr.forEach(s),Dl=o(Po," method of Transformers) and if you placed your inputs on a GPU, that GPU will consume more memory than the others (Accelerate always place the output back to the device of the input). Therefore if you would like to optimize the maximum batch size and you have many GPUs, give the first GPU less memory. For example, with BLOOM-176B on 8x80 A100 setup the close to ideal map is:"),Po.forEach(s),to=p(e),w(Ke.$$.fragment,e),so=p(e),Et=i(e,"P",{});var Xr=r(Et);Ml=o(Xr,"as you can see we gave the remaining 7 GPUs ~50% more memory than GPU 0."),Xr.forEach(s),ao=p(e),G=i(e,"P",{});var B=r(G);zl=o(B,"If you opt to fully design the "),As=i(B,"CODE",{});var Zr=r(As);Ll=o(Zr,"device_map"),Zr.forEach(s),Rl=o(B," yourself, it should be a dictionary with keys being module names of your model and values being a valid device identifier (for instance an integer for the GPUs) or "),Cs=i(B,"CODE",{});var eh=r(Cs);Sl=o(eh,'"cpu"'),eh.forEach(s),Nl=o(B," for CPU offload, "),qs=i(B,"CODE",{});var th=r(qs);Hl=o(th,'"disk"'),th.forEach(s),Wl=o(B," for disk offload. The keys need to cover the whole model, you can then define your device map as you wish: for instance if your model has two blocks (let\u2019s say "),Bs=i(B,"CODE",{});var sh=r(Bs);Fl=o(sh,"block1"),sh.forEach(s),Yl=o(B," and "),Is=i(B,"CODE",{});var ah=r(Is);Jl=o(ah,"block2"),ah.forEach(s),Vl=o(B,") which each contain three linear layers (let\u2019s say "),Ts=i(B,"CODE",{});var oh=r(Ts);Kl=o(oh,"linear1"),oh.forEach(s),Ql=o(B,", "),Os=i(B,"CODE",{});var nh=r(Os);Xl=o(nh,"linear2"),nh.forEach(s),Zl=o(B," and "),Ds=i(B,"CODE",{});var lh=r(Ds);ei=o(lh,"linear3"),lh.forEach(s),ti=o(B,"), a valid device map can be:"),B.forEach(s),oo=p(e),w(Qe.$$.fragment,e),no=p(e),Pt=i(e,"P",{});var ih=r(Pt);si=o(ih,"another one that is valid could be:"),ih.forEach(s),lo=p(e),w(Xe.$$.fragment,e),io=p(e),jt=i(e,"P",{});var rh=r(jt);ai=o(rh,"On the other hand, this one is not valid as it does not cover every parameter of the model:"),rh.forEach(s),ro=p(e),w(Ze.$$.fragment,e),ho=p(e),w(Ue.$$.fragment,e),po=p(e),le=i(e,"H2",{class:!0});var jo=r(le);xe=i(jo,"A",{id:!0,class:!0,href:!0});var hh=r(xe);Ms=i(hh,"SPAN",{});var dh=r(Ms);w(et.$$.fragment,dh),dh.forEach(s),hh.forEach(s),oi=p(jo),zs=i(jo,"SPAN",{});var ph=r(zs);ni=o(ph,"Limits and further development"),ph.forEach(s),jo.forEach(s),co=p(e),Gt=i(e,"P",{});var ch=r(Gt);li=o(ch,"We are aware of the current limitations in the API:"),ch.forEach(s),fo=p(e),C=i(e,"UL",{});var N=r(C);Ls=i(N,"LI",{});var fh=r(Ls);ii=o(fh,"While this could theoretically work on just one CPU with potential disk offload, you need at least one GPU to run this API. This will be fixed in further development."),fh.forEach(s),ri=p(N),X=i(N,"LI",{});var st=r(X);Rs=i(st,"CODE",{});var mh=r(Rs);hi=o(mh,"infer_auto_device_map()"),mh.forEach(s),di=o(st," (or "),Ss=i(st,"CODE",{});var uh=r(Ss);pi=o(uh,'device_map="auto"'),uh.forEach(s),ci=o(st," in "),Ut=i(st,"A",{href:!0});var _h=r(Ut);fi=o(_h,"load_checkpoint_and_dispatch()"),_h.forEach(s),mi=o(st,") tries to maximize GPU and CPU RAM it sees available when you execute it. While PyTorch is very good at managing GPU RAM efficiently (and giving it back when not needed), it\u2019s not entirely true with Python and CPU RAM. Therefore, an automatically computed device map might be too intense on the CPU. Move a few modules to the disk device if you get crashes due to lack of RAM."),st.forEach(s),ui=p(N),Z=i(N,"LI",{});var at=r(Z);Ns=i(at,"CODE",{});var vh=r(Ns);_i=o(vh,"infer_auto_device_map()"),vh.forEach(s),vi=o(at," (or "),Hs=i(at,"CODE",{});var wh=r(Hs);wi=o(wh,'device_map="auto"'),wh.forEach(s),yi=o(at," in "),xt=i(at,"A",{href:!0});var yh=r(xt);gi=o(yh,"load_checkpoint_and_dispatch()"),yh.forEach(s),bi=o(at,") attributes devices sequentially (to avoid moving things back and forth) so if your first layer is bigger than the size of the GPU you have, it will end up with everything on the CPU/Disk."),at.forEach(s),$i=p(N),Ae=i(N,"LI",{});var aa=r(Ae);At=i(aa,"A",{href:!0});var gh=r(At);ki=o(gh,"load_checkpoint_and_dispatch()"),gh.forEach(s),Ei=o(aa," and "),Ws=i(aa,"CODE",{});var bh=r(Ws);Pi=o(bh,"load_checkpoint_in_model()"),bh.forEach(s),ji=o(aa," do not perform any check on the correctness of your state dict compared to your model at the moment (this will be fixed in a future version), so you may get some weird errors if trying to load a checkpoint with mismatched or missing keys."),aa.forEach(s),Gi=p(N),Fs=i(N,"LI",{});var $h=r(Fs);Ui=o($h,"The model parallelism used when your model is split on several GPUs is naive and not optimized, meaning that only one GPU works at a given time and the other sits idle."),$h.forEach(s),xi=p(N),Ys=i(N,"LI",{});var kh=r(Ys);Ai=o(kh,"When weights are offloaded on the CPU/hard drive, there is no pre-fetching (yet, we will work on this for future versions) which means the weights are put on the GPU when they are needed and not before."),kh.forEach(s),Ci=p(N),Js=i(N,"LI",{});var Eh=r(Js);qi=o(Eh,"Hard-drive offloading might be very slow if the hardware you run on does not have fast communication between disk and CPU (like NVMes)."),Eh.forEach(s),N.forEach(s),this.h()},h(){u(c,"name","hf:doc:metadata"),u(c,"content",JSON.stringify(Mh)),u(m,"id","handling-big-models"),u(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(m,"href","#handling-big-models"),u(f,"class","relative group"),u(de,"id","instantiating-an-empty-model"),u(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(de,"href","#instantiating-an-empty-model"),u(ee,"class","relative group"),u(rt,"href","/docs/accelerate/pr_495/en/package_reference/big_modeling#accelerate.init_empty_weights"),u(fe,"id","sharded-checkpoints"),u(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(fe,"href","#sharded-checkpoints"),u(te,"class","relative group"),u(me,"id","loading-weights"),u(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(me,"href","#loading-weights"),u(se,"class","relative group"),u(mt,"href","/docs/accelerate/pr_495/en/package_reference/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(ze,"href","https://huggingface.co/EleutherAI/gpt-j-6B"),u(ze,"rel","nofollow"),u(ye,"id","run-the-model"),u(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ye,"href","#run-the-model"),u(oe,"class","relative group"),u(be,"id","designing-a-device-map"),u(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(be,"href","#designing-a-device-map"),u(ne,"class","relative group"),u(xe,"id","limits-and-further-development"),u(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(xe,"href","#limits-and-further-development"),u(le,"class","relative group"),u(Ut,"href","/docs/accelerate/pr_495/en/package_reference/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(xt,"href","/docs/accelerate/pr_495/en/package_reference/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(At,"href","/docs/accelerate/pr_495/en/package_reference/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(e,n){t(document.head,c),h(e,_,n),h(e,f,n),t(f,m),t(m,U),y(k,U,null),t(f,E),t(f,A),t(A,z),h(e,F,n),h(e,R,n),t(R,x),h(e,I,n),y(S,e,n),h(e,L,n),h(e,P,n),t(P,lt),h(e,Ce,n),h(e,H,n),t(H,re),t(re,Go),t(H,Uo),t(H,Tt),t(Tt,xo),t(H,Ao),t(H,Ot),t(Ot,Co),h(e,oa,n),h(e,it,n),t(it,qo),h(e,na,n),y(he,e,n),h(e,la,n),h(e,ee,n),t(ee,de),t(de,Dt),y(qe,Dt,null),t(ee,Bo),t(ee,Mt),t(Mt,Io),h(e,ia,n),h(e,pe,n),t(pe,To),t(pe,rt),t(rt,Oo),t(pe,Do),h(e,ra,n),y(Be,e,n),h(e,ha,n),h(e,ht,n),t(ht,Mo),h(e,da,n),y(Ie,e,n),h(e,pa,n),h(e,dt,n),t(dt,zo),h(e,ca,n),y(ce,e,n),h(e,fa,n),h(e,te,n),t(te,fe),t(fe,zt),y(Te,zt,null),t(te,Lo),t(te,Lt),t(Lt,Ro),h(e,ma,n),h(e,pt,n),t(pt,So),h(e,ua,n),h(e,ct,n),t(ct,No),h(e,_a,n),y(Oe,e,n),h(e,va,n),h(e,ft,n),t(ft,Ho),h(e,wa,n),y(De,e,n),h(e,ya,n),h(e,T,n),t(T,Wo),t(T,Rt),t(Rt,Fo),t(T,Yo),t(T,St),t(St,Jo),t(T,Vo),t(T,Nt),t(Nt,Ko),t(T,Qo),t(T,Ht),t(Ht,Xo),t(T,Zo),t(T,Wt),t(Wt,en),t(T,tn),t(T,Ft),t(Ft,sn),h(e,ga,n),h(e,se,n),t(se,me),t(me,Yt),y(Me,Yt,null),t(se,an),t(se,Jt),t(Jt,on),h(e,ba,n),h(e,ue,n),t(ue,nn),t(ue,mt),t(mt,ln),t(ue,rn),h(e,$a,n),h(e,_e,n),t(_e,hn),t(_e,ze),t(ze,dn),t(_e,pn),h(e,ka,n),y(Le,e,n),h(e,Ea,n),h(e,ut,n),t(ut,cn),h(e,Pa,n),y(Re,e,n),h(e,ja,n),h(e,_t,n),t(_t,fn),h(e,Ga,n),y(Se,e,n),h(e,Ua,n),h(e,ve,n),t(ve,mn),t(ve,Vt),t(Vt,un),t(ve,_n),h(e,xa,n),h(e,J,n),t(J,Kt),t(Kt,vn),t(J,wn),t(J,Qt),t(Qt,yn),t(J,gn),t(J,Xt),t(Xt,bn),h(e,Aa,n),h(e,ae,n),t(ae,Zt),t(Zt,$n),t(ae,kn),t(ae,es),t(es,En),t(ae,Pn),h(e,Ca,n),h(e,V,n),t(V,jn),t(V,ts),t(ts,Gn),t(V,Un),t(V,ss),t(ss,xn),t(V,An),h(e,qa,n),y(Ne,e,n),h(e,Ba,n),y(He,e,n),h(e,Ia,n),h(e,we,n),t(we,Cn),t(we,as),t(as,qn),t(we,Bn),h(e,Ta,n),y(We,e,n),h(e,Oa,n),h(e,oe,n),t(oe,ye),t(ye,os),y(Fe,os,null),t(oe,In),t(oe,ns),t(ns,Tn),h(e,Da,n),h(e,vt,n),t(vt,On),h(e,Ma,n),y(Ye,e,n),h(e,za,n),h(e,wt,n),t(wt,Dn),h(e,La,n),h(e,K,n),t(K,ls),t(ls,Mn),t(K,zn),t(K,is),t(is,Ln),t(K,Rn),t(K,rs),t(rs,Sn),h(e,Ra,n),h(e,yt,n),t(yt,Nn),h(e,Sa,n),y(ge,e,n),h(e,Na,n),h(e,ne,n),t(ne,be),t(be,hs),y(Je,hs,null),t(ne,Hn),t(ne,ds),t(ds,Wn),h(e,Ha,n),h(e,M,n),t(M,Fn),t(M,ps),t(ps,Yn),t(M,Jn),t(M,cs),t(cs,Vn),t(M,Kn),t(M,fs),t(fs,Qn),t(M,Xn),t(M,ms),t(ms,Zn),t(M,el),t(M,us),t(us,tl),t(M,sl),h(e,Wa,n),y($e,e,n),h(e,Fa,n),h(e,gt,n),t(gt,al),h(e,Ya,n),h(e,bt,n),t(bt,ol),h(e,Ja,n),h(e,Q,n),t(Q,ke),t(ke,_s),t(_s,nl),t(ke,ll),t(ke,vs),t(vs,il),t(ke,rl),t(Q,hl),t(Q,Ee),t(Ee,ws),t(ws,dl),t(Ee,pl),t(Ee,ys),t(ys,cl),t(Ee,fl),t(Q,ml),t(Q,$t),t($t,gs),t(gs,ul),t($t,_l),h(e,Va,n),y(Pe,e,n),h(e,Ka,n),h(e,j,n),t(j,vl),t(j,bs),t(bs,wl),t(j,yl),t(j,$s),t($s,gl),t(j,bl),t(j,ks),t(ks,$l),t(j,kl),t(j,Es),t(Es,El),t(j,Pl),t(j,Ps),t(Ps,jl),t(j,Gl),t(j,js),t(js,Ul),t(j,xl),t(j,Gs),t(Gs,Al),t(j,Cl),t(j,Us),t(Us,ql),t(j,Bl),h(e,Qa,n),h(e,kt,n),t(kt,Il),h(e,Xa,n),y(Ve,e,n),h(e,Za,n),y(je,e,n),h(e,eo,n),h(e,Ge,n),t(Ge,Tl),t(Ge,xs),t(xs,Ol),t(Ge,Dl),h(e,to,n),y(Ke,e,n),h(e,so,n),h(e,Et,n),t(Et,Ml),h(e,ao,n),h(e,G,n),t(G,zl),t(G,As),t(As,Ll),t(G,Rl),t(G,Cs),t(Cs,Sl),t(G,Nl),t(G,qs),t(qs,Hl),t(G,Wl),t(G,Bs),t(Bs,Fl),t(G,Yl),t(G,Is),t(Is,Jl),t(G,Vl),t(G,Ts),t(Ts,Kl),t(G,Ql),t(G,Os),t(Os,Xl),t(G,Zl),t(G,Ds),t(Ds,ei),t(G,ti),h(e,oo,n),y(Qe,e,n),h(e,no,n),h(e,Pt,n),t(Pt,si),h(e,lo,n),y(Xe,e,n),h(e,io,n),h(e,jt,n),t(jt,ai),h(e,ro,n),y(Ze,e,n),h(e,ho,n),y(Ue,e,n),h(e,po,n),h(e,le,n),t(le,xe),t(xe,Ms),y(et,Ms,null),t(le,oi),t(le,zs),t(zs,ni),h(e,co,n),h(e,Gt,n),t(Gt,li),h(e,fo,n),h(e,C,n),t(C,Ls),t(Ls,ii),t(C,ri),t(C,X),t(X,Rs),t(Rs,hi),t(X,di),t(X,Ss),t(Ss,pi),t(X,ci),t(X,Ut),t(Ut,fi),t(X,mi),t(C,ui),t(C,Z),t(Z,Ns),t(Ns,_i),t(Z,vi),t(Z,Hs),t(Hs,wi),t(Z,yi),t(Z,xt),t(xt,gi),t(Z,bi),t(C,$i),t(C,Ae),t(Ae,At),t(At,ki),t(Ae,Ei),t(Ae,Ws),t(Ws,Pi),t(Ae,ji),t(C,Gi),t(C,Fs),t(Fs,Ui),t(C,xi),t(C,Ys),t(Ys,Ai),t(C,Ci),t(C,Js),t(Js,qi),mo=!0},p(e,[n]){const tt={};n&2&&(tt.$$scope={dirty:n,ctx:e}),he.$set(tt);const Vs={};n&2&&(Vs.$$scope={dirty:n,ctx:e}),ce.$set(Vs);const Ks={};n&2&&(Ks.$$scope={dirty:n,ctx:e}),ge.$set(Ks);const Qs={};n&2&&(Qs.$$scope={dirty:n,ctx:e}),$e.$set(Qs);const Xs={};n&2&&(Xs.$$scope={dirty:n,ctx:e}),Pe.$set(Xs);const Zs={};n&2&&(Zs.$$scope={dirty:n,ctx:e}),je.$set(Zs);const ie={};n&2&&(ie.$$scope={dirty:n,ctx:e}),Ue.$set(ie)},i(e){mo||(g(k.$$.fragment,e),g(S.$$.fragment,e),g(he.$$.fragment,e),g(qe.$$.fragment,e),g(Be.$$.fragment,e),g(Ie.$$.fragment,e),g(ce.$$.fragment,e),g(Te.$$.fragment,e),g(Oe.$$.fragment,e),g(De.$$.fragment,e),g(Me.$$.fragment,e),g(Le.$$.fragment,e),g(Re.$$.fragment,e),g(Se.$$.fragment,e),g(Ne.$$.fragment,e),g(He.$$.fragment,e),g(We.$$.fragment,e),g(Fe.$$.fragment,e),g(Ye.$$.fragment,e),g(ge.$$.fragment,e),g(Je.$$.fragment,e),g($e.$$.fragment,e),g(Pe.$$.fragment,e),g(Ve.$$.fragment,e),g(je.$$.fragment,e),g(Ke.$$.fragment,e),g(Qe.$$.fragment,e),g(Xe.$$.fragment,e),g(Ze.$$.fragment,e),g(Ue.$$.fragment,e),g(et.$$.fragment,e),mo=!0)},o(e){b(k.$$.fragment,e),b(S.$$.fragment,e),b(he.$$.fragment,e),b(qe.$$.fragment,e),b(Be.$$.fragment,e),b(Ie.$$.fragment,e),b(ce.$$.fragment,e),b(Te.$$.fragment,e),b(Oe.$$.fragment,e),b(De.$$.fragment,e),b(Me.$$.fragment,e),b(Le.$$.fragment,e),b(Re.$$.fragment,e),b(Se.$$.fragment,e),b(Ne.$$.fragment,e),b(He.$$.fragment,e),b(We.$$.fragment,e),b(Fe.$$.fragment,e),b(Ye.$$.fragment,e),b(ge.$$.fragment,e),b(Je.$$.fragment,e),b($e.$$.fragment,e),b(Pe.$$.fragment,e),b(Ve.$$.fragment,e),b(je.$$.fragment,e),b(Ke.$$.fragment,e),b(Qe.$$.fragment,e),b(Xe.$$.fragment,e),b(Ze.$$.fragment,e),b(Ue.$$.fragment,e),b(et.$$.fragment,e),mo=!1},d(e){s(c),e&&s(_),e&&s(f),$(k),e&&s(F),e&&s(R),e&&s(I),$(S,e),e&&s(L),e&&s(P),e&&s(Ce),e&&s(H),e&&s(oa),e&&s(it),e&&s(na),$(he,e),e&&s(la),e&&s(ee),$(qe),e&&s(ia),e&&s(pe),e&&s(ra),$(Be,e),e&&s(ha),e&&s(ht),e&&s(da),$(Ie,e),e&&s(pa),e&&s(dt),e&&s(ca),$(ce,e),e&&s(fa),e&&s(te),$(Te),e&&s(ma),e&&s(pt),e&&s(ua),e&&s(ct),e&&s(_a),$(Oe,e),e&&s(va),e&&s(ft),e&&s(wa),$(De,e),e&&s(ya),e&&s(T),e&&s(ga),e&&s(se),$(Me),e&&s(ba),e&&s(ue),e&&s($a),e&&s(_e),e&&s(ka),$(Le,e),e&&s(Ea),e&&s(ut),e&&s(Pa),$(Re,e),e&&s(ja),e&&s(_t),e&&s(Ga),$(Se,e),e&&s(Ua),e&&s(ve),e&&s(xa),e&&s(J),e&&s(Aa),e&&s(ae),e&&s(Ca),e&&s(V),e&&s(qa),$(Ne,e),e&&s(Ba),$(He,e),e&&s(Ia),e&&s(we),e&&s(Ta),$(We,e),e&&s(Oa),e&&s(oe),$(Fe),e&&s(Da),e&&s(vt),e&&s(Ma),$(Ye,e),e&&s(za),e&&s(wt),e&&s(La),e&&s(K),e&&s(Ra),e&&s(yt),e&&s(Sa),$(ge,e),e&&s(Na),e&&s(ne),$(Je),e&&s(Ha),e&&s(M),e&&s(Wa),$($e,e),e&&s(Fa),e&&s(gt),e&&s(Ya),e&&s(bt),e&&s(Ja),e&&s(Q),e&&s(Va),$(Pe,e),e&&s(Ka),e&&s(j),e&&s(Qa),e&&s(kt),e&&s(Xa),$(Ve,e),e&&s(Za),$(je,e),e&&s(eo),e&&s(Ge),e&&s(to),$(Ke,e),e&&s(so),e&&s(Et),e&&s(ao),e&&s(G),e&&s(oo),$(Qe,e),e&&s(no),e&&s(Pt),e&&s(lo),$(Xe,e),e&&s(io),e&&s(jt),e&&s(ro),$(Ze,e),e&&s(ho),$(Ue,e),e&&s(po),e&&s(le),$(et),e&&s(co),e&&s(Gt),e&&s(fo),e&&s(C)}}}const Mh={local:"handling-big-models",sections:[{local:"instantiating-an-empty-model",title:"Instantiating an empty model"},{local:"sharded-checkpoints",title:"Sharded checkpoints"},{local:"loading-weights",title:"Loading weights"}],title:"Handling big models"};function zh(D){return xh(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hh extends Ph{constructor(c){super();jh(this,c,zh,Dh,Gh,{})}}export{Hh as default,Mh as metadata};
