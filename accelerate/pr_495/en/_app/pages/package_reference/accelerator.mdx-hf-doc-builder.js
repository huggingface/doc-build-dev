import{S as El,i as wl,s as xl,e as o,k as l,w as g,t as r,M as Al,c,d as t,m as i,a as n,x as m,h as a,b as h,G as e,g as pt,y as u,q as f,o as _,B as v,v as Tl}from"../../chunks/vendor-hf-doc-builder.js";import{T as Dl}from"../../chunks/Tip-hf-doc-builder.js";import{D as b}from"../../chunks/Docstring-hf-doc-builder.js";import{I as Pl}from"../../chunks/IconCopyLink-hf-doc-builder.js";function kl(Yr){let y,H,x,T,U,A,Te,j,G,Y,D;return{c(){y=o("p"),H=r("Every "),x=o("code"),T=r("object"),U=r(" must have a "),A=o("code"),Te=r("load_state_dict"),j=r(" and "),G=o("code"),Y=r("state_dict"),D=r(" function to be stored.")},l(q){y=c(q,"P",{});var w=n(y);H=a(w,"Every "),x=c(w,"CODE",{});var ht=n(x);T=a(ht,"object"),ht.forEach(t),U=a(w," must have a "),A=c(w,"CODE",{});var gt=n(A);Te=a(gt,"load_state_dict"),gt.forEach(t),j=a(w," and "),G=c(w,"CODE",{});var De=n(G);Y=a(De,"state_dict"),De.forEach(t),D=a(w," function to be stored."),w.forEach(t)},m(q,w){pt(q,y,w),e(y,H),e(y,x),e(x,T),e(y,U),e(y,A),e(A,Te),e(y,j),e(y,G),e(G,Y),e(y,D)},d(q){q&&t(y)}}}function Ll(Yr){let y,H,x,T,U,A,Te,j,G,Y,D,q,w,ht,gt,De,d,Pe,xa,Lt,Aa,Ta,It,Ot,Da,Pa,$,K,Nt,ka,La,zt,Ia,Oa,Na,X,Ct,za,Ca,mt,Sa,Ua,ja,B,St,Ga,qa,Ut,Va,Ra,Wa,J,jt,Ma,Fa,Gt,Ha,Ya,Ka,Q,qt,Xa,Ba,Vt,Ja,Qa,Za,Z,Rt,eo,to,Wt,ro,ao,oo,ee,Mt,co,no,Ft,so,lo,io,te,Ht,po,ho,ut,go,mo,uo,re,Yt,fo,_o,Kt,vo,bo,$o,ae,Xt,yo,Eo,Bt,wo,xo,Ao,oe,ke,To,Jt,Do,Po,ce,Le,ko,Qt,Lo,Io,ne,Ie,Oo,V,No,Zt,zo,Co,er,So,Uo,jo,se,Oe,Go,Ne,qo,tr,Vo,Ro,Wo,le,ze,Mo,Ce,Fo,rr,Ho,Yo,Ko,ie,Se,Xo,Ue,Bo,ar,Jo,Qo,Zo,de,je,ec,or,tc,rc,pe,Ge,ac,cr,oc,cc,O,qe,nc,Ve,sc,nr,lc,ic,dc,sr,pc,hc,he,Re,gc,We,mc,lr,uc,fc,_c,ge,Me,vc,ir,bc,$c,N,Fe,yc,dr,Ec,wc,pr,xc,Ac,me,He,Tc,R,Dc,hr,Pc,kc,gr,Lc,Ic,Oc,z,Ye,Nc,mr,zc,Cc,ur,Sc,Uc,C,Ke,jc,Xe,Gc,fr,qc,Vc,Rc,Be,Wc,_r,Mc,Fc,Hc,ue,Je,Yc,vr,Kc,Xc,P,Qe,Bc,Ze,Jc,br,Qc,Zc,en,$r,tn,rn,W,ft,yr,an,on,cn,_t,Er,nn,sn,ln,vt,wr,dn,pn,hn,fe,et,gn,tt,mn,xr,un,fn,_n,S,rt,vn,M,bn,Ar,$n,yn,Tr,En,wn,xn,Dr,An,Tn,k,at,Dn,I,Pn,Pr,kn,Ln,kr,In,On,Lr,Nn,zn,Cn,Ir,Sn,Un,_e,jn,ve,ot,Gn,ct,qn,Or,Vn,Rn,Wn,be,nt,Mn,Nr,Fn,Hn,$e,st,Yn,zr,Kn,Xn,ye,lt,Bn,F,Jn,Cr,Qn,Zn,bt,es,ts,rs,Ee,it,as,Sr,os,Kr;return A=new Pl({}),Pe=new b({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/pr_495/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/pr_495/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L77"}}),ke=new b({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L423"}}),Le=new b({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1137"}}),Ie=new b({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L807"}}),Oe=new b({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1054"}}),ze=new b({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L839"}}),Se=new b({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L856"}}),je=new b({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L976"}}),Ge=new b({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1042"}}),qe=new b({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L865",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Re=new b({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L936"}}),Me=new b({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1015"}}),Fe=new b({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L364"}}),He=new b({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L962"}}),Ye=new b({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L373"}}),Ke=new b({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L391"}}),Je=new b({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L901"}}),Qe=new b({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L506"}}),et=new b({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L441"}}),rt=new b({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L883",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),at=new b({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1113"}}),_e=new Dl({props:{$$slots:{default:[kl]},$$scope:{ctx:Yr}}}),ot=new b({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L984"}}),nt=new b({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L995"}}),st=new b({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L819"}}),lt=new b({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L918"}}),it=new b({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L929"}}),{c(){y=o("meta"),H=l(),x=o("h1"),T=o("a"),U=o("span"),g(A.$$.fragment),Te=l(),j=o("span"),G=r("Accelerator"),Y=l(),D=o("p"),q=r("The main "),w=o("a"),ht=r("Accelerator"),gt=r(" class:"),De=l(),d=o("div"),g(Pe.$$.fragment),xa=l(),Lt=o("p"),Aa=r("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Ta=l(),It=o("p"),Ot=o("strong"),Da=r("Attributes:"),Pa=l(),$=o("ul"),K=o("li"),Nt=o("strong"),ka=r("device"),La=r(" ("),zt=o("code"),Ia=r("torch.device"),Oa=r(") \u2014 The device to use."),Na=l(),X=o("li"),Ct=o("strong"),za=r("distributed_type"),Ca=r(" ("),mt=o("a"),Sa=r("DistributedType"),Ua=r(") \u2014 The distributed training configuration."),ja=l(),B=o("li"),St=o("strong"),Ga=r("local_process_index"),qa=r(" ("),Ut=o("code"),Va=r("int"),Ra=r(") \u2014 The process index on the current machine."),Wa=l(),J=o("li"),jt=o("strong"),Ma=r("mixed_precision"),Fa=r(" ("),Gt=o("code"),Ha=r("str"),Ya=r(") \u2014 The configured mixed precision mode."),Ka=l(),Q=o("li"),qt=o("strong"),Xa=r("num_processes"),Ba=r(" ("),Vt=o("code"),Ja=r("int"),Qa=r(") \u2014 The total number of processes used for training."),Za=l(),Z=o("li"),Rt=o("strong"),eo=r("optimizer_step_was_skipped"),to=r(" ("),Wt=o("code"),ro=r("bool"),ao=r(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),oo=l(),ee=o("li"),Mt=o("strong"),co=r("process_index"),no=r(" ("),Ft=o("code"),so=r("int"),lo=r(") \u2014 The overall index of the current process among all processes."),io=l(),te=o("li"),Ht=o("strong"),po=r("state"),ho=r(" ("),ut=o("a"),go=r("AcceleratorState"),mo=r(") \u2014 The distributed setup state."),uo=l(),re=o("li"),Yt=o("strong"),fo=r("sync_gradients"),_o=r(" ("),Kt=o("code"),vo=r("bool"),bo=r(") \u2014 Whether the gradients are currently being synced across all processes."),$o=l(),ae=o("li"),Xt=o("strong"),yo=r("use_distributed"),Eo=r(" ("),Bt=o("code"),wo=r("bool"),xo=r(") \u2014 Whether the current configuration is for distributed training."),Ao=l(),oe=o("div"),g(ke.$$.fragment),To=l(),Jt=o("p"),Do=r("A context manager that will lightly wrap around and perform gradient accumulation automatically"),Po=l(),ce=o("div"),g(Le.$$.fragment),ko=l(),Qt=o("p"),Lo=r(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Io=l(),ne=o("div"),g(Ie.$$.fragment),Oo=l(),V=o("p"),No=r("Use "),Zt=o("code"),zo=r("accelerator.backward(loss)"),Co=r(" in lieu of "),er=o("code"),So=r("loss.backward()"),Uo=r("."),jo=l(),se=o("div"),g(Oe.$$.fragment),Go=l(),Ne=o("p"),qo=r("Alias for "),tr=o("code"),Vo=r("Accelerate.free_memory"),Ro=r(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Wo=l(),le=o("div"),g(ze.$$.fragment),Mo=l(),Ce=o("p"),Fo=r("Should be used in place of "),rr=o("code"),Ho=r("torch.nn.utils.clip_grad_norm_"),Yo=r("."),Ko=l(),ie=o("div"),g(Se.$$.fragment),Xo=l(),Ue=o("p"),Bo=r("Should be used in place of "),ar=o("code"),Jo=r("torch.nn.utils.clip_grad_value_"),Qo=r("."),Zo=l(),de=o("div"),g(je.$$.fragment),ec=l(),or=o("p"),tc=r("Runs any special end training behaviors, such as stopping trackers"),rc=l(),pe=o("div"),g(Ge.$$.fragment),ac=l(),cr=o("p"),oc=r(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),cc=l(),O=o("div"),g(qe.$$.fragment),nc=l(),Ve=o("p"),sc=r("Gather the values in "),nr=o("em"),lc=r("tensor"),ic=r(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),dc=l(),sr=o("p"),pc=r(`Note:
This gather happens in all processes.`),hc=l(),he=o("div"),g(Re.$$.fragment),gc=l(),We=o("p"),mc=r("Initializes a run for all trackers stored in "),lr=o("code"),uc=r("self.log_with"),fc=r(", potentially with starting configurations"),_c=l(),ge=o("div"),g(Me.$$.fragment),vc=l(),ir=o("p"),bc=r("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),$c=l(),N=o("div"),g(Fe.$$.fragment),yc=l(),dr=o("p"),Ec=r("Lets the local main process go inside a with block."),wc=l(),pr=o("p"),xc=r("The other processes will enter the with block after the main process exits."),Ac=l(),me=o("div"),g(He.$$.fragment),Tc=l(),R=o("p"),Dc=r("Logs "),hr=o("code"),Pc=r("values"),kc=r(" to all stored trackers in "),gr=o("code"),Lc=r("self.trackers"),Ic=r("."),Oc=l(),z=o("div"),g(Ye.$$.fragment),Nc=l(),mr=o("p"),zc=r("Lets the main process go first inside a with block."),Cc=l(),ur=o("p"),Sc=r("The other processes will enter the with block after the main process exits."),Uc=l(),C=o("div"),g(Ke.$$.fragment),jc=l(),Xe=o("p"),Gc=r(`A context manager to disable gradient synchronizations across DDP processes by calling
`),fr=o("code"),qc=r("torch.nn.parallel.DistributedDataParallel.no_sync"),Vc=r("."),Rc=l(),Be=o("p"),Wc=r("If "),_r=o("code"),Mc=r("model"),Fc=r(" is not in DDP, this context manager does nothing"),Hc=l(),ue=o("div"),g(Je.$$.fragment),Yc=l(),vr=o("p"),Kc=r(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Xc=l(),P=o("div"),g(Qe.$$.fragment),Bc=l(),Ze=o("p"),Jc=r("Prepare all objects passed in "),br=o("code"),Qc=r("args"),Zc=r(` for distributed training and mixed precision, then return them in the same
order.`),en=l(),$r=o("p"),tn=r("Accepts the following type of objects:"),rn=l(),W=o("ul"),ft=o("li"),yr=o("code"),an=r("torch.utils.data.DataLoader"),on=r(": PyTorch Dataloader"),cn=l(),_t=o("li"),Er=o("code"),nn=r("torch.nn.Module"),sn=r(": PyTorch Module"),ln=l(),vt=o("li"),wr=o("code"),dn=r("torch.optim.Optimizer"),pn=r(": PyTorch Optimizer"),hn=l(),fe=o("div"),g(et.$$.fragment),gn=l(),tt=o("p"),mn=r("Use in replacement of "),xr=o("code"),un=r("print()"),fn=r(" to only print once per server."),_n=l(),S=o("div"),g(rt.$$.fragment),vn=l(),M=o("p"),bn=r("Reduce the values in "),Ar=o("em"),$n=r("tensor"),yn=r(" across all processes based on "),Tr=o("em"),En=r("reduction"),wn=r("."),xn=l(),Dr=o("p"),An=r(`Note:
All processes get the reduced value.`),Tn=l(),k=o("div"),g(at.$$.fragment),Dn=l(),I=o("p"),Pn=r("Makes note of "),Pr=o("code"),kn=r("objects"),Ln=r(" and will save or load them in during "),kr=o("code"),In=r("save_state"),On=r(" or "),Lr=o("code"),Nn=r("load_state"),zn=r("."),Cn=l(),Ir=o("p"),Sn=r(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Un=l(),g(_e.$$.fragment),jn=l(),ve=o("div"),g(ot.$$.fragment),Gn=l(),ct=o("p"),qn=r("Save the object passed to disk once per machine. Use in place of "),Or=o("code"),Vn=r("torch.save"),Rn=r("."),Wn=l(),be=o("div"),g(nt.$$.fragment),Mn=l(),Nr=o("p"),Fn=r("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Hn=l(),$e=o("div"),g(st.$$.fragment),Yn=l(),zr=o("p"),Kn=r("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Xn=l(),ye=o("div"),g(lt.$$.fragment),Bn=l(),F=o("p"),Jn=r("Unwraps the "),Cr=o("code"),Qn=r("model"),Zn=r(" from the additional layer possible added by "),bt=o("a"),es=r("prepare()"),ts=r(`. Useful before saving
the model.`),rs=l(),Ee=o("div"),g(it.$$.fragment),as=l(),Sr=o("p"),os=r(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(s){const L=Al('[data-svelte="svelte-1phssyn"]',document.head);y=c(L,"META",{name:!0,content:!0}),L.forEach(t),H=i(s),x=c(s,"H1",{class:!0});var dt=n(x);T=c(dt,"A",{id:!0,class:!0,href:!0});var ls=n(T);U=c(ls,"SPAN",{});var is=n(U);m(A.$$.fragment,is),is.forEach(t),ls.forEach(t),Te=i(dt),j=c(dt,"SPAN",{});var ds=n(j);G=a(ds,"Accelerator"),ds.forEach(t),dt.forEach(t),Y=i(s),D=c(s,"P",{});var Xr=n(D);q=a(Xr,"The main "),w=c(Xr,"A",{href:!0});var ps=n(w);ht=a(ps,"Accelerator"),ps.forEach(t),gt=a(Xr," class:"),Xr.forEach(t),De=i(s),d=c(s,"DIV",{class:!0});var p=n(d);m(Pe.$$.fragment,p),xa=i(p),Lt=c(p,"P",{});var hs=n(Lt);Aa=a(hs,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),hs.forEach(t),Ta=i(p),It=c(p,"P",{});var gs=n(It);Ot=c(gs,"STRONG",{});var ms=n(Ot);Da=a(ms,"Attributes:"),ms.forEach(t),gs.forEach(t),Pa=i(p),$=c(p,"UL",{});var E=n($);K=c(E,"LI",{});var Ur=n(K);Nt=c(Ur,"STRONG",{});var us=n(Nt);ka=a(us,"device"),us.forEach(t),La=a(Ur," ("),zt=c(Ur,"CODE",{});var fs=n(zt);Ia=a(fs,"torch.device"),fs.forEach(t),Oa=a(Ur,") \u2014 The device to use."),Ur.forEach(t),Na=i(E),X=c(E,"LI",{});var jr=n(X);Ct=c(jr,"STRONG",{});var _s=n(Ct);za=a(_s,"distributed_type"),_s.forEach(t),Ca=a(jr," ("),mt=c(jr,"A",{href:!0});var vs=n(mt);Sa=a(vs,"DistributedType"),vs.forEach(t),Ua=a(jr,") \u2014 The distributed training configuration."),jr.forEach(t),ja=i(E),B=c(E,"LI",{});var Gr=n(B);St=c(Gr,"STRONG",{});var bs=n(St);Ga=a(bs,"local_process_index"),bs.forEach(t),qa=a(Gr," ("),Ut=c(Gr,"CODE",{});var $s=n(Ut);Va=a($s,"int"),$s.forEach(t),Ra=a(Gr,") \u2014 The process index on the current machine."),Gr.forEach(t),Wa=i(E),J=c(E,"LI",{});var qr=n(J);jt=c(qr,"STRONG",{});var ys=n(jt);Ma=a(ys,"mixed_precision"),ys.forEach(t),Fa=a(qr," ("),Gt=c(qr,"CODE",{});var Es=n(Gt);Ha=a(Es,"str"),Es.forEach(t),Ya=a(qr,") \u2014 The configured mixed precision mode."),qr.forEach(t),Ka=i(E),Q=c(E,"LI",{});var Vr=n(Q);qt=c(Vr,"STRONG",{});var ws=n(qt);Xa=a(ws,"num_processes"),ws.forEach(t),Ba=a(Vr," ("),Vt=c(Vr,"CODE",{});var xs=n(Vt);Ja=a(xs,"int"),xs.forEach(t),Qa=a(Vr,") \u2014 The total number of processes used for training."),Vr.forEach(t),Za=i(E),Z=c(E,"LI",{});var Rr=n(Z);Rt=c(Rr,"STRONG",{});var As=n(Rt);eo=a(As,"optimizer_step_was_skipped"),As.forEach(t),to=a(Rr," ("),Wt=c(Rr,"CODE",{});var Ts=n(Wt);ro=a(Ts,"bool"),Ts.forEach(t),ao=a(Rr,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Rr.forEach(t),oo=i(E),ee=c(E,"LI",{});var Wr=n(ee);Mt=c(Wr,"STRONG",{});var Ds=n(Mt);co=a(Ds,"process_index"),Ds.forEach(t),no=a(Wr," ("),Ft=c(Wr,"CODE",{});var Ps=n(Ft);so=a(Ps,"int"),Ps.forEach(t),lo=a(Wr,") \u2014 The overall index of the current process among all processes."),Wr.forEach(t),io=i(E),te=c(E,"LI",{});var Mr=n(te);Ht=c(Mr,"STRONG",{});var ks=n(Ht);po=a(ks,"state"),ks.forEach(t),ho=a(Mr," ("),ut=c(Mr,"A",{href:!0});var Ls=n(ut);go=a(Ls,"AcceleratorState"),Ls.forEach(t),mo=a(Mr,") \u2014 The distributed setup state."),Mr.forEach(t),uo=i(E),re=c(E,"LI",{});var Fr=n(re);Yt=c(Fr,"STRONG",{});var Is=n(Yt);fo=a(Is,"sync_gradients"),Is.forEach(t),_o=a(Fr," ("),Kt=c(Fr,"CODE",{});var Os=n(Kt);vo=a(Os,"bool"),Os.forEach(t),bo=a(Fr,") \u2014 Whether the gradients are currently being synced across all processes."),Fr.forEach(t),$o=i(E),ae=c(E,"LI",{});var Hr=n(ae);Xt=c(Hr,"STRONG",{});var Ns=n(Xt);yo=a(Ns,"use_distributed"),Ns.forEach(t),Eo=a(Hr," ("),Bt=c(Hr,"CODE",{});var zs=n(Bt);wo=a(zs,"bool"),zs.forEach(t),xo=a(Hr,") \u2014 Whether the current configuration is for distributed training."),Hr.forEach(t),E.forEach(t),Ao=i(p),oe=c(p,"DIV",{class:!0});var Br=n(oe);m(ke.$$.fragment,Br),To=i(Br),Jt=c(Br,"P",{});var Cs=n(Jt);Do=a(Cs,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),Cs.forEach(t),Br.forEach(t),Po=i(p),ce=c(p,"DIV",{class:!0});var Jr=n(ce);m(Le.$$.fragment,Jr),ko=i(Jr),Qt=c(Jr,"P",{});var Ss=n(Qt);Lo=a(Ss,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Ss.forEach(t),Jr.forEach(t),Io=i(p),ne=c(p,"DIV",{class:!0});var Qr=n(ne);m(Ie.$$.fragment,Qr),Oo=i(Qr),V=c(Qr,"P",{});var $t=n(V);No=a($t,"Use "),Zt=c($t,"CODE",{});var Us=n(Zt);zo=a(Us,"accelerator.backward(loss)"),Us.forEach(t),Co=a($t," in lieu of "),er=c($t,"CODE",{});var js=n(er);So=a(js,"loss.backward()"),js.forEach(t),Uo=a($t,"."),$t.forEach(t),Qr.forEach(t),jo=i(p),se=c(p,"DIV",{class:!0});var Zr=n(se);m(Oe.$$.fragment,Zr),Go=i(Zr),Ne=c(Zr,"P",{});var ea=n(Ne);qo=a(ea,"Alias for "),tr=c(ea,"CODE",{});var Gs=n(tr);Vo=a(Gs,"Accelerate.free_memory"),Gs.forEach(t),Ro=a(ea,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),ea.forEach(t),Zr.forEach(t),Wo=i(p),le=c(p,"DIV",{class:!0});var ta=n(le);m(ze.$$.fragment,ta),Mo=i(ta),Ce=c(ta,"P",{});var ra=n(Ce);Fo=a(ra,"Should be used in place of "),rr=c(ra,"CODE",{});var qs=n(rr);Ho=a(qs,"torch.nn.utils.clip_grad_norm_"),qs.forEach(t),Yo=a(ra,"."),ra.forEach(t),ta.forEach(t),Ko=i(p),ie=c(p,"DIV",{class:!0});var aa=n(ie);m(Se.$$.fragment,aa),Xo=i(aa),Ue=c(aa,"P",{});var oa=n(Ue);Bo=a(oa,"Should be used in place of "),ar=c(oa,"CODE",{});var Vs=n(ar);Jo=a(Vs,"torch.nn.utils.clip_grad_value_"),Vs.forEach(t),Qo=a(oa,"."),oa.forEach(t),aa.forEach(t),Zo=i(p),de=c(p,"DIV",{class:!0});var ca=n(de);m(je.$$.fragment,ca),ec=i(ca),or=c(ca,"P",{});var Rs=n(or);tc=a(Rs,"Runs any special end training behaviors, such as stopping trackers"),Rs.forEach(t),ca.forEach(t),rc=i(p),pe=c(p,"DIV",{class:!0});var na=n(pe);m(Ge.$$.fragment,na),ac=i(na),cr=c(na,"P",{});var Ws=n(cr);oc=a(Ws,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Ws.forEach(t),na.forEach(t),cc=i(p),O=c(p,"DIV",{class:!0});var yt=n(O);m(qe.$$.fragment,yt),nc=i(yt),Ve=c(yt,"P",{});var sa=n(Ve);sc=a(sa,"Gather the values in "),nr=c(sa,"EM",{});var Ms=n(nr);lc=a(Ms,"tensor"),Ms.forEach(t),ic=a(sa,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),sa.forEach(t),dc=i(yt),sr=c(yt,"P",{});var Fs=n(sr);pc=a(Fs,`Note:
This gather happens in all processes.`),Fs.forEach(t),yt.forEach(t),hc=i(p),he=c(p,"DIV",{class:!0});var la=n(he);m(Re.$$.fragment,la),gc=i(la),We=c(la,"P",{});var ia=n(We);mc=a(ia,"Initializes a run for all trackers stored in "),lr=c(ia,"CODE",{});var Hs=n(lr);uc=a(Hs,"self.log_with"),Hs.forEach(t),fc=a(ia,", potentially with starting configurations"),ia.forEach(t),la.forEach(t),_c=i(p),ge=c(p,"DIV",{class:!0});var da=n(ge);m(Me.$$.fragment,da),vc=i(da),ir=c(da,"P",{});var Ys=n(ir);bc=a(Ys,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Ys.forEach(t),da.forEach(t),$c=i(p),N=c(p,"DIV",{class:!0});var Et=n(N);m(Fe.$$.fragment,Et),yc=i(Et),dr=c(Et,"P",{});var Ks=n(dr);Ec=a(Ks,"Lets the local main process go inside a with block."),Ks.forEach(t),wc=i(Et),pr=c(Et,"P",{});var Xs=n(pr);xc=a(Xs,"The other processes will enter the with block after the main process exits."),Xs.forEach(t),Et.forEach(t),Ac=i(p),me=c(p,"DIV",{class:!0});var pa=n(me);m(He.$$.fragment,pa),Tc=i(pa),R=c(pa,"P",{});var wt=n(R);Dc=a(wt,"Logs "),hr=c(wt,"CODE",{});var Bs=n(hr);Pc=a(Bs,"values"),Bs.forEach(t),kc=a(wt," to all stored trackers in "),gr=c(wt,"CODE",{});var Js=n(gr);Lc=a(Js,"self.trackers"),Js.forEach(t),Ic=a(wt,"."),wt.forEach(t),pa.forEach(t),Oc=i(p),z=c(p,"DIV",{class:!0});var xt=n(z);m(Ye.$$.fragment,xt),Nc=i(xt),mr=c(xt,"P",{});var Qs=n(mr);zc=a(Qs,"Lets the main process go first inside a with block."),Qs.forEach(t),Cc=i(xt),ur=c(xt,"P",{});var Zs=n(ur);Sc=a(Zs,"The other processes will enter the with block after the main process exits."),Zs.forEach(t),xt.forEach(t),Uc=i(p),C=c(p,"DIV",{class:!0});var At=n(C);m(Ke.$$.fragment,At),jc=i(At),Xe=c(At,"P",{});var ha=n(Xe);Gc=a(ha,`A context manager to disable gradient synchronizations across DDP processes by calling
`),fr=c(ha,"CODE",{});var el=n(fr);qc=a(el,"torch.nn.parallel.DistributedDataParallel.no_sync"),el.forEach(t),Vc=a(ha,"."),ha.forEach(t),Rc=i(At),Be=c(At,"P",{});var ga=n(Be);Wc=a(ga,"If "),_r=c(ga,"CODE",{});var tl=n(_r);Mc=a(tl,"model"),tl.forEach(t),Fc=a(ga," is not in DDP, this context manager does nothing"),ga.forEach(t),At.forEach(t),Hc=i(p),ue=c(p,"DIV",{class:!0});var ma=n(ue);m(Je.$$.fragment,ma),Yc=i(ma),vr=c(ma,"P",{});var rl=n(vr);Kc=a(rl,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),rl.forEach(t),ma.forEach(t),Xc=i(p),P=c(p,"DIV",{class:!0});var we=n(P);m(Qe.$$.fragment,we),Bc=i(we),Ze=c(we,"P",{});var ua=n(Ze);Jc=a(ua,"Prepare all objects passed in "),br=c(ua,"CODE",{});var al=n(br);Qc=a(al,"args"),al.forEach(t),Zc=a(ua,` for distributed training and mixed precision, then return them in the same
order.`),ua.forEach(t),en=i(we),$r=c(we,"P",{});var ol=n($r);tn=a(ol,"Accepts the following type of objects:"),ol.forEach(t),rn=i(we),W=c(we,"UL",{});var Tt=n(W);ft=c(Tt,"LI",{});var cs=n(ft);yr=c(cs,"CODE",{});var cl=n(yr);an=a(cl,"torch.utils.data.DataLoader"),cl.forEach(t),on=a(cs,": PyTorch Dataloader"),cs.forEach(t),cn=i(Tt),_t=c(Tt,"LI",{});var ns=n(_t);Er=c(ns,"CODE",{});var nl=n(Er);nn=a(nl,"torch.nn.Module"),nl.forEach(t),sn=a(ns,": PyTorch Module"),ns.forEach(t),ln=i(Tt),vt=c(Tt,"LI",{});var ss=n(vt);wr=c(ss,"CODE",{});var sl=n(wr);dn=a(sl,"torch.optim.Optimizer"),sl.forEach(t),pn=a(ss,": PyTorch Optimizer"),ss.forEach(t),Tt.forEach(t),we.forEach(t),hn=i(p),fe=c(p,"DIV",{class:!0});var fa=n(fe);m(et.$$.fragment,fa),gn=i(fa),tt=c(fa,"P",{});var _a=n(tt);mn=a(_a,"Use in replacement of "),xr=c(_a,"CODE",{});var ll=n(xr);un=a(ll,"print()"),ll.forEach(t),fn=a(_a," to only print once per server."),_a.forEach(t),fa.forEach(t),_n=i(p),S=c(p,"DIV",{class:!0});var Dt=n(S);m(rt.$$.fragment,Dt),vn=i(Dt),M=c(Dt,"P",{});var Pt=n(M);bn=a(Pt,"Reduce the values in "),Ar=c(Pt,"EM",{});var il=n(Ar);$n=a(il,"tensor"),il.forEach(t),yn=a(Pt," across all processes based on "),Tr=c(Pt,"EM",{});var dl=n(Tr);En=a(dl,"reduction"),dl.forEach(t),wn=a(Pt,"."),Pt.forEach(t),xn=i(Dt),Dr=c(Dt,"P",{});var pl=n(Dr);An=a(pl,`Note:
All processes get the reduced value.`),pl.forEach(t),Dt.forEach(t),Tn=i(p),k=c(p,"DIV",{class:!0});var xe=n(k);m(at.$$.fragment,xe),Dn=i(xe),I=c(xe,"P",{});var Ae=n(I);Pn=a(Ae,"Makes note of "),Pr=c(Ae,"CODE",{});var hl=n(Pr);kn=a(hl,"objects"),hl.forEach(t),Ln=a(Ae," and will save or load them in during "),kr=c(Ae,"CODE",{});var gl=n(kr);In=a(gl,"save_state"),gl.forEach(t),On=a(Ae," or "),Lr=c(Ae,"CODE",{});var ml=n(Lr);Nn=a(ml,"load_state"),ml.forEach(t),zn=a(Ae,"."),Ae.forEach(t),Cn=i(xe),Ir=c(xe,"P",{});var ul=n(Ir);Sn=a(ul,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),ul.forEach(t),Un=i(xe),m(_e.$$.fragment,xe),xe.forEach(t),jn=i(p),ve=c(p,"DIV",{class:!0});var va=n(ve);m(ot.$$.fragment,va),Gn=i(va),ct=c(va,"P",{});var ba=n(ct);qn=a(ba,"Save the object passed to disk once per machine. Use in place of "),Or=c(ba,"CODE",{});var fl=n(Or);Vn=a(fl,"torch.save"),fl.forEach(t),Rn=a(ba,"."),ba.forEach(t),va.forEach(t),Wn=i(p),be=c(p,"DIV",{class:!0});var $a=n(be);m(nt.$$.fragment,$a),Mn=i($a),Nr=c($a,"P",{});var _l=n(Nr);Fn=a(_l,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),_l.forEach(t),$a.forEach(t),Hn=i(p),$e=c(p,"DIV",{class:!0});var ya=n($e);m(st.$$.fragment,ya),Yn=i(ya),zr=c(ya,"P",{});var vl=n(zr);Kn=a(vl,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),vl.forEach(t),ya.forEach(t),Xn=i(p),ye=c(p,"DIV",{class:!0});var Ea=n(ye);m(lt.$$.fragment,Ea),Bn=i(Ea),F=c(Ea,"P",{});var kt=n(F);Jn=a(kt,"Unwraps the "),Cr=c(kt,"CODE",{});var bl=n(Cr);Qn=a(bl,"model"),bl.forEach(t),Zn=a(kt," from the additional layer possible added by "),bt=c(kt,"A",{href:!0});var $l=n(bt);es=a($l,"prepare()"),$l.forEach(t),ts=a(kt,`. Useful before saving
the model.`),kt.forEach(t),Ea.forEach(t),rs=i(p),Ee=c(p,"DIV",{class:!0});var wa=n(Ee);m(it.$$.fragment,wa),as=i(wa),Sr=c(wa,"P",{});var yl=n(Sr);os=a(yl,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),yl.forEach(t),wa.forEach(t),p.forEach(t),this.h()},h(){h(y,"name","hf:doc:metadata"),h(y,"content",JSON.stringify(Il)),h(T,"id","accelerate.Accelerator"),h(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(T,"href","#accelerate.Accelerator"),h(x,"class","relative group"),h(w,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator"),h(mt,"href","/docs/accelerate/pr_495/en/package_reference/utilities#accelerate.DistributedType"),h(ut,"href","/docs/accelerate/pr_495/en/package_reference/state#accelerate.state.AcceleratorState"),h(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(bt,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator.prepare"),h(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,L){e(document.head,y),pt(s,H,L),pt(s,x,L),e(x,T),e(T,U),u(A,U,null),e(x,Te),e(x,j),e(j,G),pt(s,Y,L),pt(s,D,L),e(D,q),e(D,w),e(w,ht),e(D,gt),pt(s,De,L),pt(s,d,L),u(Pe,d,null),e(d,xa),e(d,Lt),e(Lt,Aa),e(d,Ta),e(d,It),e(It,Ot),e(Ot,Da),e(d,Pa),e(d,$),e($,K),e(K,Nt),e(Nt,ka),e(K,La),e(K,zt),e(zt,Ia),e(K,Oa),e($,Na),e($,X),e(X,Ct),e(Ct,za),e(X,Ca),e(X,mt),e(mt,Sa),e(X,Ua),e($,ja),e($,B),e(B,St),e(St,Ga),e(B,qa),e(B,Ut),e(Ut,Va),e(B,Ra),e($,Wa),e($,J),e(J,jt),e(jt,Ma),e(J,Fa),e(J,Gt),e(Gt,Ha),e(J,Ya),e($,Ka),e($,Q),e(Q,qt),e(qt,Xa),e(Q,Ba),e(Q,Vt),e(Vt,Ja),e(Q,Qa),e($,Za),e($,Z),e(Z,Rt),e(Rt,eo),e(Z,to),e(Z,Wt),e(Wt,ro),e(Z,ao),e($,oo),e($,ee),e(ee,Mt),e(Mt,co),e(ee,no),e(ee,Ft),e(Ft,so),e(ee,lo),e($,io),e($,te),e(te,Ht),e(Ht,po),e(te,ho),e(te,ut),e(ut,go),e(te,mo),e($,uo),e($,re),e(re,Yt),e(Yt,fo),e(re,_o),e(re,Kt),e(Kt,vo),e(re,bo),e($,$o),e($,ae),e(ae,Xt),e(Xt,yo),e(ae,Eo),e(ae,Bt),e(Bt,wo),e(ae,xo),e(d,Ao),e(d,oe),u(ke,oe,null),e(oe,To),e(oe,Jt),e(Jt,Do),e(d,Po),e(d,ce),u(Le,ce,null),e(ce,ko),e(ce,Qt),e(Qt,Lo),e(d,Io),e(d,ne),u(Ie,ne,null),e(ne,Oo),e(ne,V),e(V,No),e(V,Zt),e(Zt,zo),e(V,Co),e(V,er),e(er,So),e(V,Uo),e(d,jo),e(d,se),u(Oe,se,null),e(se,Go),e(se,Ne),e(Ne,qo),e(Ne,tr),e(tr,Vo),e(Ne,Ro),e(d,Wo),e(d,le),u(ze,le,null),e(le,Mo),e(le,Ce),e(Ce,Fo),e(Ce,rr),e(rr,Ho),e(Ce,Yo),e(d,Ko),e(d,ie),u(Se,ie,null),e(ie,Xo),e(ie,Ue),e(Ue,Bo),e(Ue,ar),e(ar,Jo),e(Ue,Qo),e(d,Zo),e(d,de),u(je,de,null),e(de,ec),e(de,or),e(or,tc),e(d,rc),e(d,pe),u(Ge,pe,null),e(pe,ac),e(pe,cr),e(cr,oc),e(d,cc),e(d,O),u(qe,O,null),e(O,nc),e(O,Ve),e(Ve,sc),e(Ve,nr),e(nr,lc),e(Ve,ic),e(O,dc),e(O,sr),e(sr,pc),e(d,hc),e(d,he),u(Re,he,null),e(he,gc),e(he,We),e(We,mc),e(We,lr),e(lr,uc),e(We,fc),e(d,_c),e(d,ge),u(Me,ge,null),e(ge,vc),e(ge,ir),e(ir,bc),e(d,$c),e(d,N),u(Fe,N,null),e(N,yc),e(N,dr),e(dr,Ec),e(N,wc),e(N,pr),e(pr,xc),e(d,Ac),e(d,me),u(He,me,null),e(me,Tc),e(me,R),e(R,Dc),e(R,hr),e(hr,Pc),e(R,kc),e(R,gr),e(gr,Lc),e(R,Ic),e(d,Oc),e(d,z),u(Ye,z,null),e(z,Nc),e(z,mr),e(mr,zc),e(z,Cc),e(z,ur),e(ur,Sc),e(d,Uc),e(d,C),u(Ke,C,null),e(C,jc),e(C,Xe),e(Xe,Gc),e(Xe,fr),e(fr,qc),e(Xe,Vc),e(C,Rc),e(C,Be),e(Be,Wc),e(Be,_r),e(_r,Mc),e(Be,Fc),e(d,Hc),e(d,ue),u(Je,ue,null),e(ue,Yc),e(ue,vr),e(vr,Kc),e(d,Xc),e(d,P),u(Qe,P,null),e(P,Bc),e(P,Ze),e(Ze,Jc),e(Ze,br),e(br,Qc),e(Ze,Zc),e(P,en),e(P,$r),e($r,tn),e(P,rn),e(P,W),e(W,ft),e(ft,yr),e(yr,an),e(ft,on),e(W,cn),e(W,_t),e(_t,Er),e(Er,nn),e(_t,sn),e(W,ln),e(W,vt),e(vt,wr),e(wr,dn),e(vt,pn),e(d,hn),e(d,fe),u(et,fe,null),e(fe,gn),e(fe,tt),e(tt,mn),e(tt,xr),e(xr,un),e(tt,fn),e(d,_n),e(d,S),u(rt,S,null),e(S,vn),e(S,M),e(M,bn),e(M,Ar),e(Ar,$n),e(M,yn),e(M,Tr),e(Tr,En),e(M,wn),e(S,xn),e(S,Dr),e(Dr,An),e(d,Tn),e(d,k),u(at,k,null),e(k,Dn),e(k,I),e(I,Pn),e(I,Pr),e(Pr,kn),e(I,Ln),e(I,kr),e(kr,In),e(I,On),e(I,Lr),e(Lr,Nn),e(I,zn),e(k,Cn),e(k,Ir),e(Ir,Sn),e(k,Un),u(_e,k,null),e(d,jn),e(d,ve),u(ot,ve,null),e(ve,Gn),e(ve,ct),e(ct,qn),e(ct,Or),e(Or,Vn),e(ct,Rn),e(d,Wn),e(d,be),u(nt,be,null),e(be,Mn),e(be,Nr),e(Nr,Fn),e(d,Hn),e(d,$e),u(st,$e,null),e($e,Yn),e($e,zr),e(zr,Kn),e(d,Xn),e(d,ye),u(lt,ye,null),e(ye,Bn),e(ye,F),e(F,Jn),e(F,Cr),e(Cr,Qn),e(F,Zn),e(F,bt),e(bt,es),e(F,ts),e(d,rs),e(d,Ee),u(it,Ee,null),e(Ee,as),e(Ee,Sr),e(Sr,os),Kr=!0},p(s,[L]){const dt={};L&2&&(dt.$$scope={dirty:L,ctx:s}),_e.$set(dt)},i(s){Kr||(f(A.$$.fragment,s),f(Pe.$$.fragment,s),f(ke.$$.fragment,s),f(Le.$$.fragment,s),f(Ie.$$.fragment,s),f(Oe.$$.fragment,s),f(ze.$$.fragment,s),f(Se.$$.fragment,s),f(je.$$.fragment,s),f(Ge.$$.fragment,s),f(qe.$$.fragment,s),f(Re.$$.fragment,s),f(Me.$$.fragment,s),f(Fe.$$.fragment,s),f(He.$$.fragment,s),f(Ye.$$.fragment,s),f(Ke.$$.fragment,s),f(Je.$$.fragment,s),f(Qe.$$.fragment,s),f(et.$$.fragment,s),f(rt.$$.fragment,s),f(at.$$.fragment,s),f(_e.$$.fragment,s),f(ot.$$.fragment,s),f(nt.$$.fragment,s),f(st.$$.fragment,s),f(lt.$$.fragment,s),f(it.$$.fragment,s),Kr=!0)},o(s){_(A.$$.fragment,s),_(Pe.$$.fragment,s),_(ke.$$.fragment,s),_(Le.$$.fragment,s),_(Ie.$$.fragment,s),_(Oe.$$.fragment,s),_(ze.$$.fragment,s),_(Se.$$.fragment,s),_(je.$$.fragment,s),_(Ge.$$.fragment,s),_(qe.$$.fragment,s),_(Re.$$.fragment,s),_(Me.$$.fragment,s),_(Fe.$$.fragment,s),_(He.$$.fragment,s),_(Ye.$$.fragment,s),_(Ke.$$.fragment,s),_(Je.$$.fragment,s),_(Qe.$$.fragment,s),_(et.$$.fragment,s),_(rt.$$.fragment,s),_(at.$$.fragment,s),_(_e.$$.fragment,s),_(ot.$$.fragment,s),_(nt.$$.fragment,s),_(st.$$.fragment,s),_(lt.$$.fragment,s),_(it.$$.fragment,s),Kr=!1},d(s){t(y),s&&t(H),s&&t(x),v(A),s&&t(Y),s&&t(D),s&&t(De),s&&t(d),v(Pe),v(ke),v(Le),v(Ie),v(Oe),v(ze),v(Se),v(je),v(Ge),v(qe),v(Re),v(Me),v(Fe),v(He),v(Ye),v(Ke),v(Je),v(Qe),v(et),v(rt),v(at),v(_e),v(ot),v(nt),v(st),v(lt),v(it)}}}const Il={local:"accelerate.Accelerator",title:"Accelerator"};function Ol(Yr){return Tl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ul extends El{constructor(y){super();wl(this,y,Ol,Ll,xl,{})}}export{Ul as default,Il as metadata};
