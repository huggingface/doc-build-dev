import{S as Sl,i as zl,s as Cl,e as o,k as l,w as g,t as r,M as Ul,c,d as t,m as i,a as n,x as m,h as a,b as h,G as e,g as mt,y as u,q as f,o as _,B as v,v as Gl}from"../../chunks/vendor-hf-doc-builder.js";import{T as jl}from"../../chunks/Tip-hf-doc-builder.js";import{D as b}from"../../chunks/Docstring-hf-doc-builder.js";import{I as ql}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Vl(Jr){let y,H,x,T,U,A,De,G,j,Y,D;return{c(){y=o("p"),H=r("Every "),x=o("code"),T=r("object"),U=r(" must have a "),A=o("code"),De=r("load_state_dict"),G=r(" and "),j=o("code"),Y=r("state_dict"),D=r(" function to be stored.")},l(q){y=c(q,"P",{});var w=n(y);H=a(w,"Every "),x=c(w,"CODE",{});var ut=n(x);T=a(ut,"object"),ut.forEach(t),U=a(w," must have a "),A=c(w,"CODE",{});var ft=n(A);De=a(ft,"load_state_dict"),ft.forEach(t),G=a(w," and "),j=c(w,"CODE",{});var ke=n(j);Y=a(ke,"state_dict"),ke.forEach(t),D=a(w," function to be stored."),w.forEach(t)},m(q,w){mt(q,y,w),e(y,H),e(y,x),e(x,T),e(y,U),e(y,A),e(A,De),e(y,G),e(y,j),e(j,Y),e(y,D)},d(q){q&&t(y)}}}function Rl(Jr){let y,H,x,T,U,A,De,G,j,Y,D,q,w,ut,ft,ke,d,Pe,La,Nt,Ia,Oa,St,zt,Na,Sa,$,K,Ct,za,Ca,Ut,Ua,Ga,ja,X,Gt,qa,Va,_t,Ra,Wa,Ma,B,jt,Fa,Ha,qt,Ya,Ka,Xa,J,Vt,Ba,Ja,Rt,Qa,Za,eo,Q,Wt,to,ro,Mt,ao,oo,co,Z,Ft,no,so,Ht,lo,io,po,ee,Yt,ho,go,Kt,mo,uo,fo,te,Xt,_o,vo,vt,bo,$o,yo,re,Bt,Eo,wo,Jt,xo,Ao,To,ae,Qt,Do,ko,Zt,Po,Lo,Io,oe,Le,Oo,er,No,So,ce,Ie,zo,tr,Co,Uo,ne,Oe,Go,V,jo,rr,qo,Vo,ar,Ro,Wo,Mo,se,Ne,Fo,Se,Ho,or,Yo,Ko,Xo,le,ze,Bo,Ce,Jo,cr,Qo,Zo,ec,ie,Ue,tc,Ge,rc,nr,ac,oc,cc,de,je,nc,sr,sc,lc,pe,qe,ic,lr,dc,pc,O,Ve,hc,Re,gc,ir,mc,uc,fc,dr,_c,vc,he,We,bc,Me,$c,pr,yc,Ec,wc,ge,Fe,xc,He,Ac,hr,Tc,Dc,kc,me,Ye,Pc,gr,Lc,Ic,N,Ke,Oc,mr,Nc,Sc,ur,zc,Cc,ue,Xe,Uc,R,Gc,fr,jc,qc,_r,Vc,Rc,Wc,S,Be,Mc,vr,Fc,Hc,br,Yc,Kc,z,Je,Xc,Qe,Bc,$r,Jc,Qc,Zc,Ze,en,yr,tn,rn,an,fe,et,on,Er,cn,nn,k,tt,sn,rt,ln,wr,dn,pn,hn,xr,gn,mn,W,bt,Ar,un,fn,_n,$t,Tr,vn,bn,$n,yt,Dr,yn,En,wn,_e,at,xn,ot,An,kr,Tn,Dn,kn,C,ct,Pn,M,Ln,Pr,In,On,Lr,Nn,Sn,zn,Ir,Cn,Un,P,nt,Gn,I,jn,Or,qn,Vn,Nr,Rn,Wn,Sr,Mn,Fn,Hn,zr,Yn,Kn,ve,Xn,be,st,Bn,lt,Jn,Cr,Qn,Zn,es,$e,it,ts,Ur,rs,as,ye,dt,os,Gr,cs,ns,Ee,pt,ss,F,ls,jr,is,ds,Et,ps,hs,gs,we,ht,ms,qr,us,Qr;return A=new ql({}),Pe=new b({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/pr_495/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/pr_495/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L78"}}),Le=new b({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L431"}}),Ie=new b({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1188"}}),Oe=new b({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L815"}}),Ne=new b({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1105"}}),ze=new b({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L847"}}),Ue=new b({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L864"}}),je=new b({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1027"}}),qe=new b({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1093"}}),Ve=new b({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L873",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),We=new b({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""},{name:"dataloader",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.gather_for_metrics.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.DataLoader</code>) &#x2014;
A dataloader prepared with <code>Accelerator.prepare</code>`,name:"dataloader"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L891"}}),Fe=new b({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like this:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L973"}}),Ye=new b({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1066"}}),Ke=new b({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L372"}}),Xe=new b({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like this:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1007"}}),Be=new b({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L381"}}),Je=new b({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L399"}}),et=new b({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L938"}}),tt=new b({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L514"}}),at=new b({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L449"}}),ct=new b({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L920",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),nt=new b({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1164"}}),ve=new jl({props:{$$slots:{default:[Vl]},$$scope:{ctx:Jr}}}),st=new b({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1035"}}),it=new b({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L1046"}}),dt=new b({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L827"}}),pt=new b({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L955"}}),ht=new b({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/accelerator.py#L966"}}),{c(){y=o("meta"),H=l(),x=o("h1"),T=o("a"),U=o("span"),g(A.$$.fragment),De=l(),G=o("span"),j=r("Accelerator"),Y=l(),D=o("p"),q=r("The main "),w=o("a"),ut=r("Accelerator"),ft=r(" class:"),ke=l(),d=o("div"),g(Pe.$$.fragment),La=l(),Nt=o("p"),Ia=r("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Oa=l(),St=o("p"),zt=o("strong"),Na=r("Attributes:"),Sa=l(),$=o("ul"),K=o("li"),Ct=o("strong"),za=r("device"),Ca=r(" ("),Ut=o("code"),Ua=r("torch.device"),Ga=r(") \u2014 The device to use."),ja=l(),X=o("li"),Gt=o("strong"),qa=r("distributed_type"),Va=r(" ("),_t=o("a"),Ra=r("DistributedType"),Wa=r(") \u2014 The distributed training configuration."),Ma=l(),B=o("li"),jt=o("strong"),Fa=r("local_process_index"),Ha=r(" ("),qt=o("code"),Ya=r("int"),Ka=r(") \u2014 The process index on the current machine."),Xa=l(),J=o("li"),Vt=o("strong"),Ba=r("mixed_precision"),Ja=r(" ("),Rt=o("code"),Qa=r("str"),Za=r(") \u2014 The configured mixed precision mode."),eo=l(),Q=o("li"),Wt=o("strong"),to=r("num_processes"),ro=r(" ("),Mt=o("code"),ao=r("int"),oo=r(") \u2014 The total number of processes used for training."),co=l(),Z=o("li"),Ft=o("strong"),no=r("optimizer_step_was_skipped"),so=r(" ("),Ht=o("code"),lo=r("bool"),io=r(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),po=l(),ee=o("li"),Yt=o("strong"),ho=r("process_index"),go=r(" ("),Kt=o("code"),mo=r("int"),uo=r(") \u2014 The overall index of the current process among all processes."),fo=l(),te=o("li"),Xt=o("strong"),_o=r("state"),vo=r(" ("),vt=o("a"),bo=r("AcceleratorState"),$o=r(") \u2014 The distributed setup state."),yo=l(),re=o("li"),Bt=o("strong"),Eo=r("sync_gradients"),wo=r(" ("),Jt=o("code"),xo=r("bool"),Ao=r(") \u2014 Whether the gradients are currently being synced across all processes."),To=l(),ae=o("li"),Qt=o("strong"),Do=r("use_distributed"),ko=r(" ("),Zt=o("code"),Po=r("bool"),Lo=r(") \u2014 Whether the current configuration is for distributed training."),Io=l(),oe=o("div"),g(Le.$$.fragment),Oo=l(),er=o("p"),No=r("A context manager that will lightly wrap around and perform gradient accumulation automatically"),So=l(),ce=o("div"),g(Ie.$$.fragment),zo=l(),tr=o("p"),Co=r(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Uo=l(),ne=o("div"),g(Oe.$$.fragment),Go=l(),V=o("p"),jo=r("Use "),rr=o("code"),qo=r("accelerator.backward(loss)"),Vo=r(" in lieu of "),ar=o("code"),Ro=r("loss.backward()"),Wo=r("."),Mo=l(),se=o("div"),g(Ne.$$.fragment),Fo=l(),Se=o("p"),Ho=r("Alias for "),or=o("code"),Yo=r("Accelerate.free_memory"),Ko=r(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Xo=l(),le=o("div"),g(ze.$$.fragment),Bo=l(),Ce=o("p"),Jo=r("Should be used in place of "),cr=o("code"),Qo=r("torch.nn.utils.clip_grad_norm_"),Zo=r("."),ec=l(),ie=o("div"),g(Ue.$$.fragment),tc=l(),Ge=o("p"),rc=r("Should be used in place of "),nr=o("code"),ac=r("torch.nn.utils.clip_grad_value_"),oc=r("."),cc=l(),de=o("div"),g(je.$$.fragment),nc=l(),sr=o("p"),sc=r("Runs any special end training behaviors, such as stopping trackers"),lc=l(),pe=o("div"),g(qe.$$.fragment),ic=l(),lr=o("p"),dc=r(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),pc=l(),O=o("div"),g(Ve.$$.fragment),hc=l(),Re=o("p"),gc=r("Gather the values in "),ir=o("em"),mc=r("tensor"),uc=r(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),fc=l(),dr=o("p"),_c=r(`Note:
This gather happens in all processes.`),vc=l(),he=o("div"),g(We.$$.fragment),bc=l(),Me=o("p"),$c=r("Gathers "),pr=o("code"),yc=r("tensor"),Ec=r(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),wc=l(),ge=o("div"),g(Fe.$$.fragment),xc=l(),He=o("p"),Ac=r("Initializes a run for all trackers stored in "),hr=o("code"),Tc=r("self.log_with"),Dc=r(", potentially with starting configurations"),kc=l(),me=o("div"),g(Ye.$$.fragment),Pc=l(),gr=o("p"),Lc=r("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Ic=l(),N=o("div"),g(Ke.$$.fragment),Oc=l(),mr=o("p"),Nc=r("Lets the local main process go inside a with block."),Sc=l(),ur=o("p"),zc=r("The other processes will enter the with block after the main process exits."),Cc=l(),ue=o("div"),g(Xe.$$.fragment),Uc=l(),R=o("p"),Gc=r("Logs "),fr=o("code"),jc=r("values"),qc=r(" to all stored trackers in "),_r=o("code"),Vc=r("self.trackers"),Rc=r("."),Wc=l(),S=o("div"),g(Be.$$.fragment),Mc=l(),vr=o("p"),Fc=r("Lets the main process go first inside a with block."),Hc=l(),br=o("p"),Yc=r("The other processes will enter the with block after the main process exits."),Kc=l(),z=o("div"),g(Je.$$.fragment),Xc=l(),Qe=o("p"),Bc=r(`A context manager to disable gradient synchronizations across DDP processes by calling
`),$r=o("code"),Jc=r("torch.nn.parallel.DistributedDataParallel.no_sync"),Qc=r("."),Zc=l(),Ze=o("p"),en=r("If "),yr=o("code"),tn=r("model"),rn=r(" is not in DDP, this context manager does nothing"),an=l(),fe=o("div"),g(et.$$.fragment),on=l(),Er=o("p"),cn=r(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),nn=l(),k=o("div"),g(tt.$$.fragment),sn=l(),rt=o("p"),ln=r("Prepare all objects passed in "),wr=o("code"),dn=r("args"),pn=r(` for distributed training and mixed precision, then return them in the same
order.`),hn=l(),xr=o("p"),gn=r("Accepts the following type of objects:"),mn=l(),W=o("ul"),bt=o("li"),Ar=o("code"),un=r("torch.utils.data.DataLoader"),fn=r(": PyTorch Dataloader"),_n=l(),$t=o("li"),Tr=o("code"),vn=r("torch.nn.Module"),bn=r(": PyTorch Module"),$n=l(),yt=o("li"),Dr=o("code"),yn=r("torch.optim.Optimizer"),En=r(": PyTorch Optimizer"),wn=l(),_e=o("div"),g(at.$$.fragment),xn=l(),ot=o("p"),An=r("Use in replacement of "),kr=o("code"),Tn=r("print()"),Dn=r(" to only print once per server."),kn=l(),C=o("div"),g(ct.$$.fragment),Pn=l(),M=o("p"),Ln=r("Reduce the values in "),Pr=o("em"),In=r("tensor"),On=r(" across all processes based on "),Lr=o("em"),Nn=r("reduction"),Sn=r("."),zn=l(),Ir=o("p"),Cn=r(`Note:
All processes get the reduced value.`),Un=l(),P=o("div"),g(nt.$$.fragment),Gn=l(),I=o("p"),jn=r("Makes note of "),Or=o("code"),qn=r("objects"),Vn=r(" and will save or load them in during "),Nr=o("code"),Rn=r("save_state"),Wn=r(" or "),Sr=o("code"),Mn=r("load_state"),Fn=r("."),Hn=l(),zr=o("p"),Yn=r(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Kn=l(),g(ve.$$.fragment),Xn=l(),be=o("div"),g(st.$$.fragment),Bn=l(),lt=o("p"),Jn=r("Save the object passed to disk once per machine. Use in place of "),Cr=o("code"),Qn=r("torch.save"),Zn=r("."),es=l(),$e=o("div"),g(it.$$.fragment),ts=l(),Ur=o("p"),rs=r("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),as=l(),ye=o("div"),g(dt.$$.fragment),os=l(),Gr=o("p"),cs=r("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),ns=l(),Ee=o("div"),g(pt.$$.fragment),ss=l(),F=o("p"),ls=r("Unwraps the "),jr=o("code"),is=r("model"),ds=r(" from the additional layer possible added by "),Et=o("a"),ps=r("prepare()"),hs=r(`. Useful before saving
the model.`),gs=l(),we=o("div"),g(ht.$$.fragment),ms=l(),qr=o("p"),us=r(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(s){const L=Ul('[data-svelte="svelte-1phssyn"]',document.head);y=c(L,"META",{name:!0,content:!0}),L.forEach(t),H=i(s),x=c(s,"H1",{class:!0});var gt=n(x);T=c(gt,"A",{id:!0,class:!0,href:!0});var bs=n(T);U=c(bs,"SPAN",{});var $s=n(U);m(A.$$.fragment,$s),$s.forEach(t),bs.forEach(t),De=i(gt),G=c(gt,"SPAN",{});var ys=n(G);j=a(ys,"Accelerator"),ys.forEach(t),gt.forEach(t),Y=i(s),D=c(s,"P",{});var Zr=n(D);q=a(Zr,"The main "),w=c(Zr,"A",{href:!0});var Es=n(w);ut=a(Es,"Accelerator"),Es.forEach(t),ft=a(Zr," class:"),Zr.forEach(t),ke=i(s),d=c(s,"DIV",{class:!0});var p=n(d);m(Pe.$$.fragment,p),La=i(p),Nt=c(p,"P",{});var ws=n(Nt);Ia=a(ws,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),ws.forEach(t),Oa=i(p),St=c(p,"P",{});var xs=n(St);zt=c(xs,"STRONG",{});var As=n(zt);Na=a(As,"Attributes:"),As.forEach(t),xs.forEach(t),Sa=i(p),$=c(p,"UL",{});var E=n($);K=c(E,"LI",{});var Vr=n(K);Ct=c(Vr,"STRONG",{});var Ts=n(Ct);za=a(Ts,"device"),Ts.forEach(t),Ca=a(Vr," ("),Ut=c(Vr,"CODE",{});var Ds=n(Ut);Ua=a(Ds,"torch.device"),Ds.forEach(t),Ga=a(Vr,") \u2014 The device to use."),Vr.forEach(t),ja=i(E),X=c(E,"LI",{});var Rr=n(X);Gt=c(Rr,"STRONG",{});var ks=n(Gt);qa=a(ks,"distributed_type"),ks.forEach(t),Va=a(Rr," ("),_t=c(Rr,"A",{href:!0});var Ps=n(_t);Ra=a(Ps,"DistributedType"),Ps.forEach(t),Wa=a(Rr,") \u2014 The distributed training configuration."),Rr.forEach(t),Ma=i(E),B=c(E,"LI",{});var Wr=n(B);jt=c(Wr,"STRONG",{});var Ls=n(jt);Fa=a(Ls,"local_process_index"),Ls.forEach(t),Ha=a(Wr," ("),qt=c(Wr,"CODE",{});var Is=n(qt);Ya=a(Is,"int"),Is.forEach(t),Ka=a(Wr,") \u2014 The process index on the current machine."),Wr.forEach(t),Xa=i(E),J=c(E,"LI",{});var Mr=n(J);Vt=c(Mr,"STRONG",{});var Os=n(Vt);Ba=a(Os,"mixed_precision"),Os.forEach(t),Ja=a(Mr," ("),Rt=c(Mr,"CODE",{});var Ns=n(Rt);Qa=a(Ns,"str"),Ns.forEach(t),Za=a(Mr,") \u2014 The configured mixed precision mode."),Mr.forEach(t),eo=i(E),Q=c(E,"LI",{});var Fr=n(Q);Wt=c(Fr,"STRONG",{});var Ss=n(Wt);to=a(Ss,"num_processes"),Ss.forEach(t),ro=a(Fr," ("),Mt=c(Fr,"CODE",{});var zs=n(Mt);ao=a(zs,"int"),zs.forEach(t),oo=a(Fr,") \u2014 The total number of processes used for training."),Fr.forEach(t),co=i(E),Z=c(E,"LI",{});var Hr=n(Z);Ft=c(Hr,"STRONG",{});var Cs=n(Ft);no=a(Cs,"optimizer_step_was_skipped"),Cs.forEach(t),so=a(Hr," ("),Ht=c(Hr,"CODE",{});var Us=n(Ht);lo=a(Us,"bool"),Us.forEach(t),io=a(Hr,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Hr.forEach(t),po=i(E),ee=c(E,"LI",{});var Yr=n(ee);Yt=c(Yr,"STRONG",{});var Gs=n(Yt);ho=a(Gs,"process_index"),Gs.forEach(t),go=a(Yr," ("),Kt=c(Yr,"CODE",{});var js=n(Kt);mo=a(js,"int"),js.forEach(t),uo=a(Yr,") \u2014 The overall index of the current process among all processes."),Yr.forEach(t),fo=i(E),te=c(E,"LI",{});var Kr=n(te);Xt=c(Kr,"STRONG",{});var qs=n(Xt);_o=a(qs,"state"),qs.forEach(t),vo=a(Kr," ("),vt=c(Kr,"A",{href:!0});var Vs=n(vt);bo=a(Vs,"AcceleratorState"),Vs.forEach(t),$o=a(Kr,") \u2014 The distributed setup state."),Kr.forEach(t),yo=i(E),re=c(E,"LI",{});var Xr=n(re);Bt=c(Xr,"STRONG",{});var Rs=n(Bt);Eo=a(Rs,"sync_gradients"),Rs.forEach(t),wo=a(Xr," ("),Jt=c(Xr,"CODE",{});var Ws=n(Jt);xo=a(Ws,"bool"),Ws.forEach(t),Ao=a(Xr,") \u2014 Whether the gradients are currently being synced across all processes."),Xr.forEach(t),To=i(E),ae=c(E,"LI",{});var Br=n(ae);Qt=c(Br,"STRONG",{});var Ms=n(Qt);Do=a(Ms,"use_distributed"),Ms.forEach(t),ko=a(Br," ("),Zt=c(Br,"CODE",{});var Fs=n(Zt);Po=a(Fs,"bool"),Fs.forEach(t),Lo=a(Br,") \u2014 Whether the current configuration is for distributed training."),Br.forEach(t),E.forEach(t),Io=i(p),oe=c(p,"DIV",{class:!0});var ea=n(oe);m(Le.$$.fragment,ea),Oo=i(ea),er=c(ea,"P",{});var Hs=n(er);No=a(Hs,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),Hs.forEach(t),ea.forEach(t),So=i(p),ce=c(p,"DIV",{class:!0});var ta=n(ce);m(Ie.$$.fragment,ta),zo=i(ta),tr=c(ta,"P",{});var Ys=n(tr);Co=a(Ys,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Ys.forEach(t),ta.forEach(t),Uo=i(p),ne=c(p,"DIV",{class:!0});var ra=n(ne);m(Oe.$$.fragment,ra),Go=i(ra),V=c(ra,"P",{});var wt=n(V);jo=a(wt,"Use "),rr=c(wt,"CODE",{});var Ks=n(rr);qo=a(Ks,"accelerator.backward(loss)"),Ks.forEach(t),Vo=a(wt," in lieu of "),ar=c(wt,"CODE",{});var Xs=n(ar);Ro=a(Xs,"loss.backward()"),Xs.forEach(t),Wo=a(wt,"."),wt.forEach(t),ra.forEach(t),Mo=i(p),se=c(p,"DIV",{class:!0});var aa=n(se);m(Ne.$$.fragment,aa),Fo=i(aa),Se=c(aa,"P",{});var oa=n(Se);Ho=a(oa,"Alias for "),or=c(oa,"CODE",{});var Bs=n(or);Yo=a(Bs,"Accelerate.free_memory"),Bs.forEach(t),Ko=a(oa,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),oa.forEach(t),aa.forEach(t),Xo=i(p),le=c(p,"DIV",{class:!0});var ca=n(le);m(ze.$$.fragment,ca),Bo=i(ca),Ce=c(ca,"P",{});var na=n(Ce);Jo=a(na,"Should be used in place of "),cr=c(na,"CODE",{});var Js=n(cr);Qo=a(Js,"torch.nn.utils.clip_grad_norm_"),Js.forEach(t),Zo=a(na,"."),na.forEach(t),ca.forEach(t),ec=i(p),ie=c(p,"DIV",{class:!0});var sa=n(ie);m(Ue.$$.fragment,sa),tc=i(sa),Ge=c(sa,"P",{});var la=n(Ge);rc=a(la,"Should be used in place of "),nr=c(la,"CODE",{});var Qs=n(nr);ac=a(Qs,"torch.nn.utils.clip_grad_value_"),Qs.forEach(t),oc=a(la,"."),la.forEach(t),sa.forEach(t),cc=i(p),de=c(p,"DIV",{class:!0});var ia=n(de);m(je.$$.fragment,ia),nc=i(ia),sr=c(ia,"P",{});var Zs=n(sr);sc=a(Zs,"Runs any special end training behaviors, such as stopping trackers"),Zs.forEach(t),ia.forEach(t),lc=i(p),pe=c(p,"DIV",{class:!0});var da=n(pe);m(qe.$$.fragment,da),ic=i(da),lr=c(da,"P",{});var el=n(lr);dc=a(el,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),el.forEach(t),da.forEach(t),pc=i(p),O=c(p,"DIV",{class:!0});var xt=n(O);m(Ve.$$.fragment,xt),hc=i(xt),Re=c(xt,"P",{});var pa=n(Re);gc=a(pa,"Gather the values in "),ir=c(pa,"EM",{});var tl=n(ir);mc=a(tl,"tensor"),tl.forEach(t),uc=a(pa,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),pa.forEach(t),fc=i(xt),dr=c(xt,"P",{});var rl=n(dr);_c=a(rl,`Note:
This gather happens in all processes.`),rl.forEach(t),xt.forEach(t),vc=i(p),he=c(p,"DIV",{class:!0});var ha=n(he);m(We.$$.fragment,ha),bc=i(ha),Me=c(ha,"P",{});var ga=n(Me);$c=a(ga,"Gathers "),pr=c(ga,"CODE",{});var al=n(pr);yc=a(al,"tensor"),al.forEach(t),Ec=a(ga,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),ga.forEach(t),ha.forEach(t),wc=i(p),ge=c(p,"DIV",{class:!0});var ma=n(ge);m(Fe.$$.fragment,ma),xc=i(ma),He=c(ma,"P",{});var ua=n(He);Ac=a(ua,"Initializes a run for all trackers stored in "),hr=c(ua,"CODE",{});var ol=n(hr);Tc=a(ol,"self.log_with"),ol.forEach(t),Dc=a(ua,", potentially with starting configurations"),ua.forEach(t),ma.forEach(t),kc=i(p),me=c(p,"DIV",{class:!0});var fa=n(me);m(Ye.$$.fragment,fa),Pc=i(fa),gr=c(fa,"P",{});var cl=n(gr);Lc=a(cl,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),cl.forEach(t),fa.forEach(t),Ic=i(p),N=c(p,"DIV",{class:!0});var At=n(N);m(Ke.$$.fragment,At),Oc=i(At),mr=c(At,"P",{});var nl=n(mr);Nc=a(nl,"Lets the local main process go inside a with block."),nl.forEach(t),Sc=i(At),ur=c(At,"P",{});var sl=n(ur);zc=a(sl,"The other processes will enter the with block after the main process exits."),sl.forEach(t),At.forEach(t),Cc=i(p),ue=c(p,"DIV",{class:!0});var _a=n(ue);m(Xe.$$.fragment,_a),Uc=i(_a),R=c(_a,"P",{});var Tt=n(R);Gc=a(Tt,"Logs "),fr=c(Tt,"CODE",{});var ll=n(fr);jc=a(ll,"values"),ll.forEach(t),qc=a(Tt," to all stored trackers in "),_r=c(Tt,"CODE",{});var il=n(_r);Vc=a(il,"self.trackers"),il.forEach(t),Rc=a(Tt,"."),Tt.forEach(t),_a.forEach(t),Wc=i(p),S=c(p,"DIV",{class:!0});var Dt=n(S);m(Be.$$.fragment,Dt),Mc=i(Dt),vr=c(Dt,"P",{});var dl=n(vr);Fc=a(dl,"Lets the main process go first inside a with block."),dl.forEach(t),Hc=i(Dt),br=c(Dt,"P",{});var pl=n(br);Yc=a(pl,"The other processes will enter the with block after the main process exits."),pl.forEach(t),Dt.forEach(t),Kc=i(p),z=c(p,"DIV",{class:!0});var kt=n(z);m(Je.$$.fragment,kt),Xc=i(kt),Qe=c(kt,"P",{});var va=n(Qe);Bc=a(va,`A context manager to disable gradient synchronizations across DDP processes by calling
`),$r=c(va,"CODE",{});var hl=n($r);Jc=a(hl,"torch.nn.parallel.DistributedDataParallel.no_sync"),hl.forEach(t),Qc=a(va,"."),va.forEach(t),Zc=i(kt),Ze=c(kt,"P",{});var ba=n(Ze);en=a(ba,"If "),yr=c(ba,"CODE",{});var gl=n(yr);tn=a(gl,"model"),gl.forEach(t),rn=a(ba," is not in DDP, this context manager does nothing"),ba.forEach(t),kt.forEach(t),an=i(p),fe=c(p,"DIV",{class:!0});var $a=n(fe);m(et.$$.fragment,$a),on=i($a),Er=c($a,"P",{});var ml=n(Er);cn=a(ml,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),ml.forEach(t),$a.forEach(t),nn=i(p),k=c(p,"DIV",{class:!0});var xe=n(k);m(tt.$$.fragment,xe),sn=i(xe),rt=c(xe,"P",{});var ya=n(rt);ln=a(ya,"Prepare all objects passed in "),wr=c(ya,"CODE",{});var ul=n(wr);dn=a(ul,"args"),ul.forEach(t),pn=a(ya,` for distributed training and mixed precision, then return them in the same
order.`),ya.forEach(t),hn=i(xe),xr=c(xe,"P",{});var fl=n(xr);gn=a(fl,"Accepts the following type of objects:"),fl.forEach(t),mn=i(xe),W=c(xe,"UL",{});var Pt=n(W);bt=c(Pt,"LI",{});var fs=n(bt);Ar=c(fs,"CODE",{});var _l=n(Ar);un=a(_l,"torch.utils.data.DataLoader"),_l.forEach(t),fn=a(fs,": PyTorch Dataloader"),fs.forEach(t),_n=i(Pt),$t=c(Pt,"LI",{});var _s=n($t);Tr=c(_s,"CODE",{});var vl=n(Tr);vn=a(vl,"torch.nn.Module"),vl.forEach(t),bn=a(_s,": PyTorch Module"),_s.forEach(t),$n=i(Pt),yt=c(Pt,"LI",{});var vs=n(yt);Dr=c(vs,"CODE",{});var bl=n(Dr);yn=a(bl,"torch.optim.Optimizer"),bl.forEach(t),En=a(vs,": PyTorch Optimizer"),vs.forEach(t),Pt.forEach(t),xe.forEach(t),wn=i(p),_e=c(p,"DIV",{class:!0});var Ea=n(_e);m(at.$$.fragment,Ea),xn=i(Ea),ot=c(Ea,"P",{});var wa=n(ot);An=a(wa,"Use in replacement of "),kr=c(wa,"CODE",{});var $l=n(kr);Tn=a($l,"print()"),$l.forEach(t),Dn=a(wa," to only print once per server."),wa.forEach(t),Ea.forEach(t),kn=i(p),C=c(p,"DIV",{class:!0});var Lt=n(C);m(ct.$$.fragment,Lt),Pn=i(Lt),M=c(Lt,"P",{});var It=n(M);Ln=a(It,"Reduce the values in "),Pr=c(It,"EM",{});var yl=n(Pr);In=a(yl,"tensor"),yl.forEach(t),On=a(It," across all processes based on "),Lr=c(It,"EM",{});var El=n(Lr);Nn=a(El,"reduction"),El.forEach(t),Sn=a(It,"."),It.forEach(t),zn=i(Lt),Ir=c(Lt,"P",{});var wl=n(Ir);Cn=a(wl,`Note:
All processes get the reduced value.`),wl.forEach(t),Lt.forEach(t),Un=i(p),P=c(p,"DIV",{class:!0});var Ae=n(P);m(nt.$$.fragment,Ae),Gn=i(Ae),I=c(Ae,"P",{});var Te=n(I);jn=a(Te,"Makes note of "),Or=c(Te,"CODE",{});var xl=n(Or);qn=a(xl,"objects"),xl.forEach(t),Vn=a(Te," and will save or load them in during "),Nr=c(Te,"CODE",{});var Al=n(Nr);Rn=a(Al,"save_state"),Al.forEach(t),Wn=a(Te," or "),Sr=c(Te,"CODE",{});var Tl=n(Sr);Mn=a(Tl,"load_state"),Tl.forEach(t),Fn=a(Te,"."),Te.forEach(t),Hn=i(Ae),zr=c(Ae,"P",{});var Dl=n(zr);Yn=a(Dl,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Dl.forEach(t),Kn=i(Ae),m(ve.$$.fragment,Ae),Ae.forEach(t),Xn=i(p),be=c(p,"DIV",{class:!0});var xa=n(be);m(st.$$.fragment,xa),Bn=i(xa),lt=c(xa,"P",{});var Aa=n(lt);Jn=a(Aa,"Save the object passed to disk once per machine. Use in place of "),Cr=c(Aa,"CODE",{});var kl=n(Cr);Qn=a(kl,"torch.save"),kl.forEach(t),Zn=a(Aa,"."),Aa.forEach(t),xa.forEach(t),es=i(p),$e=c(p,"DIV",{class:!0});var Ta=n($e);m(it.$$.fragment,Ta),ts=i(Ta),Ur=c(Ta,"P",{});var Pl=n(Ur);rs=a(Pl,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Pl.forEach(t),Ta.forEach(t),as=i(p),ye=c(p,"DIV",{class:!0});var Da=n(ye);m(dt.$$.fragment,Da),os=i(Da),Gr=c(Da,"P",{});var Ll=n(Gr);cs=a(Ll,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Ll.forEach(t),Da.forEach(t),ns=i(p),Ee=c(p,"DIV",{class:!0});var ka=n(Ee);m(pt.$$.fragment,ka),ss=i(ka),F=c(ka,"P",{});var Ot=n(F);ls=a(Ot,"Unwraps the "),jr=c(Ot,"CODE",{});var Il=n(jr);is=a(Il,"model"),Il.forEach(t),ds=a(Ot," from the additional layer possible added by "),Et=c(Ot,"A",{href:!0});var Ol=n(Et);ps=a(Ol,"prepare()"),Ol.forEach(t),hs=a(Ot,`. Useful before saving
the model.`),Ot.forEach(t),ka.forEach(t),gs=i(p),we=c(p,"DIV",{class:!0});var Pa=n(we);m(ht.$$.fragment,Pa),ms=i(Pa),qr=c(Pa,"P",{});var Nl=n(qr);us=a(Nl,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),Nl.forEach(t),Pa.forEach(t),p.forEach(t),this.h()},h(){h(y,"name","hf:doc:metadata"),h(y,"content",JSON.stringify(Wl)),h(T,"id","accelerate.Accelerator"),h(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(T,"href","#accelerate.Accelerator"),h(x,"class","relative group"),h(w,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator"),h(_t,"href","/docs/accelerate/pr_495/en/package_reference/utilities#accelerate.DistributedType"),h(vt,"href","/docs/accelerate/pr_495/en/package_reference/state#accelerate.state.AcceleratorState"),h(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Et,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator.prepare"),h(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,L){e(document.head,y),mt(s,H,L),mt(s,x,L),e(x,T),e(T,U),u(A,U,null),e(x,De),e(x,G),e(G,j),mt(s,Y,L),mt(s,D,L),e(D,q),e(D,w),e(w,ut),e(D,ft),mt(s,ke,L),mt(s,d,L),u(Pe,d,null),e(d,La),e(d,Nt),e(Nt,Ia),e(d,Oa),e(d,St),e(St,zt),e(zt,Na),e(d,Sa),e(d,$),e($,K),e(K,Ct),e(Ct,za),e(K,Ca),e(K,Ut),e(Ut,Ua),e(K,Ga),e($,ja),e($,X),e(X,Gt),e(Gt,qa),e(X,Va),e(X,_t),e(_t,Ra),e(X,Wa),e($,Ma),e($,B),e(B,jt),e(jt,Fa),e(B,Ha),e(B,qt),e(qt,Ya),e(B,Ka),e($,Xa),e($,J),e(J,Vt),e(Vt,Ba),e(J,Ja),e(J,Rt),e(Rt,Qa),e(J,Za),e($,eo),e($,Q),e(Q,Wt),e(Wt,to),e(Q,ro),e(Q,Mt),e(Mt,ao),e(Q,oo),e($,co),e($,Z),e(Z,Ft),e(Ft,no),e(Z,so),e(Z,Ht),e(Ht,lo),e(Z,io),e($,po),e($,ee),e(ee,Yt),e(Yt,ho),e(ee,go),e(ee,Kt),e(Kt,mo),e(ee,uo),e($,fo),e($,te),e(te,Xt),e(Xt,_o),e(te,vo),e(te,vt),e(vt,bo),e(te,$o),e($,yo),e($,re),e(re,Bt),e(Bt,Eo),e(re,wo),e(re,Jt),e(Jt,xo),e(re,Ao),e($,To),e($,ae),e(ae,Qt),e(Qt,Do),e(ae,ko),e(ae,Zt),e(Zt,Po),e(ae,Lo),e(d,Io),e(d,oe),u(Le,oe,null),e(oe,Oo),e(oe,er),e(er,No),e(d,So),e(d,ce),u(Ie,ce,null),e(ce,zo),e(ce,tr),e(tr,Co),e(d,Uo),e(d,ne),u(Oe,ne,null),e(ne,Go),e(ne,V),e(V,jo),e(V,rr),e(rr,qo),e(V,Vo),e(V,ar),e(ar,Ro),e(V,Wo),e(d,Mo),e(d,se),u(Ne,se,null),e(se,Fo),e(se,Se),e(Se,Ho),e(Se,or),e(or,Yo),e(Se,Ko),e(d,Xo),e(d,le),u(ze,le,null),e(le,Bo),e(le,Ce),e(Ce,Jo),e(Ce,cr),e(cr,Qo),e(Ce,Zo),e(d,ec),e(d,ie),u(Ue,ie,null),e(ie,tc),e(ie,Ge),e(Ge,rc),e(Ge,nr),e(nr,ac),e(Ge,oc),e(d,cc),e(d,de),u(je,de,null),e(de,nc),e(de,sr),e(sr,sc),e(d,lc),e(d,pe),u(qe,pe,null),e(pe,ic),e(pe,lr),e(lr,dc),e(d,pc),e(d,O),u(Ve,O,null),e(O,hc),e(O,Re),e(Re,gc),e(Re,ir),e(ir,mc),e(Re,uc),e(O,fc),e(O,dr),e(dr,_c),e(d,vc),e(d,he),u(We,he,null),e(he,bc),e(he,Me),e(Me,$c),e(Me,pr),e(pr,yc),e(Me,Ec),e(d,wc),e(d,ge),u(Fe,ge,null),e(ge,xc),e(ge,He),e(He,Ac),e(He,hr),e(hr,Tc),e(He,Dc),e(d,kc),e(d,me),u(Ye,me,null),e(me,Pc),e(me,gr),e(gr,Lc),e(d,Ic),e(d,N),u(Ke,N,null),e(N,Oc),e(N,mr),e(mr,Nc),e(N,Sc),e(N,ur),e(ur,zc),e(d,Cc),e(d,ue),u(Xe,ue,null),e(ue,Uc),e(ue,R),e(R,Gc),e(R,fr),e(fr,jc),e(R,qc),e(R,_r),e(_r,Vc),e(R,Rc),e(d,Wc),e(d,S),u(Be,S,null),e(S,Mc),e(S,vr),e(vr,Fc),e(S,Hc),e(S,br),e(br,Yc),e(d,Kc),e(d,z),u(Je,z,null),e(z,Xc),e(z,Qe),e(Qe,Bc),e(Qe,$r),e($r,Jc),e(Qe,Qc),e(z,Zc),e(z,Ze),e(Ze,en),e(Ze,yr),e(yr,tn),e(Ze,rn),e(d,an),e(d,fe),u(et,fe,null),e(fe,on),e(fe,Er),e(Er,cn),e(d,nn),e(d,k),u(tt,k,null),e(k,sn),e(k,rt),e(rt,ln),e(rt,wr),e(wr,dn),e(rt,pn),e(k,hn),e(k,xr),e(xr,gn),e(k,mn),e(k,W),e(W,bt),e(bt,Ar),e(Ar,un),e(bt,fn),e(W,_n),e(W,$t),e($t,Tr),e(Tr,vn),e($t,bn),e(W,$n),e(W,yt),e(yt,Dr),e(Dr,yn),e(yt,En),e(d,wn),e(d,_e),u(at,_e,null),e(_e,xn),e(_e,ot),e(ot,An),e(ot,kr),e(kr,Tn),e(ot,Dn),e(d,kn),e(d,C),u(ct,C,null),e(C,Pn),e(C,M),e(M,Ln),e(M,Pr),e(Pr,In),e(M,On),e(M,Lr),e(Lr,Nn),e(M,Sn),e(C,zn),e(C,Ir),e(Ir,Cn),e(d,Un),e(d,P),u(nt,P,null),e(P,Gn),e(P,I),e(I,jn),e(I,Or),e(Or,qn),e(I,Vn),e(I,Nr),e(Nr,Rn),e(I,Wn),e(I,Sr),e(Sr,Mn),e(I,Fn),e(P,Hn),e(P,zr),e(zr,Yn),e(P,Kn),u(ve,P,null),e(d,Xn),e(d,be),u(st,be,null),e(be,Bn),e(be,lt),e(lt,Jn),e(lt,Cr),e(Cr,Qn),e(lt,Zn),e(d,es),e(d,$e),u(it,$e,null),e($e,ts),e($e,Ur),e(Ur,rs),e(d,as),e(d,ye),u(dt,ye,null),e(ye,os),e(ye,Gr),e(Gr,cs),e(d,ns),e(d,Ee),u(pt,Ee,null),e(Ee,ss),e(Ee,F),e(F,ls),e(F,jr),e(jr,is),e(F,ds),e(F,Et),e(Et,ps),e(F,hs),e(d,gs),e(d,we),u(ht,we,null),e(we,ms),e(we,qr),e(qr,us),Qr=!0},p(s,[L]){const gt={};L&2&&(gt.$$scope={dirty:L,ctx:s}),ve.$set(gt)},i(s){Qr||(f(A.$$.fragment,s),f(Pe.$$.fragment,s),f(Le.$$.fragment,s),f(Ie.$$.fragment,s),f(Oe.$$.fragment,s),f(Ne.$$.fragment,s),f(ze.$$.fragment,s),f(Ue.$$.fragment,s),f(je.$$.fragment,s),f(qe.$$.fragment,s),f(Ve.$$.fragment,s),f(We.$$.fragment,s),f(Fe.$$.fragment,s),f(Ye.$$.fragment,s),f(Ke.$$.fragment,s),f(Xe.$$.fragment,s),f(Be.$$.fragment,s),f(Je.$$.fragment,s),f(et.$$.fragment,s),f(tt.$$.fragment,s),f(at.$$.fragment,s),f(ct.$$.fragment,s),f(nt.$$.fragment,s),f(ve.$$.fragment,s),f(st.$$.fragment,s),f(it.$$.fragment,s),f(dt.$$.fragment,s),f(pt.$$.fragment,s),f(ht.$$.fragment,s),Qr=!0)},o(s){_(A.$$.fragment,s),_(Pe.$$.fragment,s),_(Le.$$.fragment,s),_(Ie.$$.fragment,s),_(Oe.$$.fragment,s),_(Ne.$$.fragment,s),_(ze.$$.fragment,s),_(Ue.$$.fragment,s),_(je.$$.fragment,s),_(qe.$$.fragment,s),_(Ve.$$.fragment,s),_(We.$$.fragment,s),_(Fe.$$.fragment,s),_(Ye.$$.fragment,s),_(Ke.$$.fragment,s),_(Xe.$$.fragment,s),_(Be.$$.fragment,s),_(Je.$$.fragment,s),_(et.$$.fragment,s),_(tt.$$.fragment,s),_(at.$$.fragment,s),_(ct.$$.fragment,s),_(nt.$$.fragment,s),_(ve.$$.fragment,s),_(st.$$.fragment,s),_(it.$$.fragment,s),_(dt.$$.fragment,s),_(pt.$$.fragment,s),_(ht.$$.fragment,s),Qr=!1},d(s){t(y),s&&t(H),s&&t(x),v(A),s&&t(Y),s&&t(D),s&&t(ke),s&&t(d),v(Pe),v(Le),v(Ie),v(Oe),v(Ne),v(ze),v(Ue),v(je),v(qe),v(Ve),v(We),v(Fe),v(Ye),v(Ke),v(Xe),v(Be),v(Je),v(et),v(tt),v(at),v(ct),v(nt),v(ve),v(st),v(it),v(dt),v(pt),v(ht)}}}const Wl={local:"accelerate.Accelerator",title:"Accelerator"};function Ml(Jr){return Gl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Xl extends Sl{constructor(y){super();zl(this,y,Ml,Rl,Cl,{})}}export{Xl as default,Wl as metadata};
