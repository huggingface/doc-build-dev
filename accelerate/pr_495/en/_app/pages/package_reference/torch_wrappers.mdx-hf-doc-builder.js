import{S as mo,i as uo,s as fo,e as o,k as d,w as $,t as c,M as go,c as r,d as a,m as i,a as s,x as z,h as n,b as p,G as e,g as m,y as D,q as E,o as S,B as x,v as bo}from"../../chunks/vendor-hf-doc-builder.js";import{T as po}from"../../chunks/Tip-hf-doc-builder.js";import{D as pe}from"../../chunks/Docstring-hf-doc-builder.js";import{I as ft}from"../../chunks/IconCopyLink-hf-doc-builder.js";function _o(me){let h,T,u,b,v;return{c(){h=o("p"),T=c("This does not support "),u=o("code"),b=c("BatchSampler"),v=c(" with varying batch size yet.")},l(f){h=r(f,"P",{});var g=s(h);T=n(g,"This does not support "),u=r(g,"CODE",{});var O=s(u);b=n(O,"BatchSampler"),O.forEach(a),v=n(g," with varying batch size yet."),g.forEach(a)},m(f,g){m(f,h,g),e(h,T),e(h,u),e(u,b),e(h,v)},d(f){f&&a(h)}}}function vo(me){let h,T,u,b,v;return{c(){h=o("p"),T=c("This does not support "),u=o("code"),b=c("BatchSampler"),v=c(" with varying batch size yet.")},l(f){h=r(f,"P",{});var g=s(h);T=n(g,"This does not support "),u=r(g,"CODE",{});var O=s(u);b=n(O,"BatchSampler"),O.forEach(a),v=n(g," with varying batch size yet."),g.forEach(a)},m(f,g){m(f,h,g),e(h,T),e(h,u),e(u,b),e(h,v)},d(f){f&&a(h)}}}function wo(me){let h,T,u,b,v,f,g,O,gt,Ke,U,bt,ue,_t,vt,Qe,C,R,we,Q,wt,ye,yt,Ye,w,Y,$t,Z,zt,$e,Dt,Et,St,W,xt,ze,Tt,At,De,Ot,Lt,Pt,V,Ze,L,ee,It,P,kt,Ee,qt,Ct,Se,Wt,Nt,xe,Bt,Ft,Gt,H,et,N,te,Ut,_,Rt,Te,Vt,Ht,Ae,Mt,jt,Oe,Xt,Jt,Le,Kt,Qt,Pe,Yt,Zt,tt,y,ae,ea,oe,ta,Ie,aa,oa,ra,ke,qe,sa,ca,Ce,q,We,na,la,Ne,da,ia,Be,ha,pa,at,re,se,ot,B,M,Fe,ce,ma,Ge,ua,rt,I,ne,fa,Ue,ga,ba,F,_a,Re,va,wa,Ve,ya,$a,st,G,j,He,le,za,Me,Da,ct,k,de,Ea,je,Sa,xa,Xe,Ta,nt;return f=new ft({}),Q=new ft({}),Y=new pe({props:{name:"accelerate.data_loader.prepare_data_loader",anchor:"accelerate.data_loader.prepare_data_loader",parameters:[{name:"dataloader",val:": DataLoader"},{name:"device",val:": typing.Optional[torch.device] = None"},{name:"num_processes",val:": typing.Optional[int] = None"},{name:"process_index",val:": typing.Optional[int] = None"},{name:"split_batches",val:": bool = False"},{name:"put_on_device",val:": bool = False"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"accelerate.data_loader.prepare_data_loader.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.dataloader.DataLoader</code>) &#x2014;
The data loader to split across several devices.`,name:"dataloader"},{anchor:"accelerate.data_loader.prepare_data_loader.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The target device for the returned <code>DataLoader</code>.`,name:"device"},{anchor:"accelerate.data_loader.prepare_data_loader.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of processes running concurrently. Will default to the value given by
<a href="/docs/accelerate/pr_495/en/package_reference/state#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"num_processes"},{anchor:"accelerate.data_loader.prepare_data_loader.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The index of the current process. Will default to the value given by <a href="/docs/accelerate/pr_495/en/package_reference/state#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"process_index"},{anchor:"accelerate.data_loader.prepare_data_loader.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration).</p>
<p>Another way to see this is that the observed batch size will be the same as the initial <code>dataloader</code> if
this option is set to <code>True</code>, the batch size of the initial <code>dataloader</code> multiplied by <code>num_processes</code>
otherwise.</p>
<p>Setting this option to <code>True</code> requires that the batch size of the <code>dataloader</code> is a round multiple of
<code>batch_size</code>.`,name:"split_batches"},{anchor:"accelerate.data_loader.prepare_data_loader.put_on_device",description:`<strong>put_on_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to put the batches on <code>device</code> (only works if the batches are nested list, tuples or
dictionaries of tensors).`,name:"put_on_device"},{anchor:"accelerate.data_loader.prepare_data_loader.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.prepare_data_loader.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the datalaoder prepared is only iterated through on the main process and then the batches
are split and broadcast to each process. Will default to <code>True</code> when the underlying dataset is an
<code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/data_loader.py#L478",returnDescription:`
<p>A new data loader that will yield the portion of the batches</p>
`,returnType:`
<p><code>torch.utils.data.dataloader.DataLoader</code></p>
`}}),V=new po({props:{warning:!0,$$slots:{default:[_o]},$$scope:{ctx:me}}}),ee=new pe({props:{name:"class accelerate.data_loader.BatchSamplerShard",anchor:"accelerate.data_loader.BatchSamplerShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.BatchSamplerShard.batch_sampler",description:`<strong>batch_sampler</strong> (<code>torch.utils.data.sampler.BatchSampler</code>) &#x2014;
The batch sampler to split in several shards.`,name:"batch_sampler"},{anchor:"accelerate.data_loader.BatchSamplerShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.BatchSamplerShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.BatchSamplerShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with a sampler of <code>[[0, 1, 2, 3], [4, 5, 6, 7]]</code>, this will result in:</p>
<ul>
<li>the sampler on process 0 to yield <code>[0, 1, 2, 3]</code> and the sampler on process 1 to yield <code>[4, 5, 6, 7]</code> if
this argument is set to <code>False</code>.</li>
<li>the sampler on process 0 to yield <code>[0, 1]</code> then <code>[4, 5]</code> and the sampler on process 1 to yield <code>[2, 3]</code>
then <code>[6, 7]</code> if this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/data_loader.py#L85"}}),H=new po({props:{warning:!0,$$slots:{default:[vo]},$$scope:{ctx:me}}}),te=new pe({props:{name:"class accelerate.data_loader.IterableDatasetShard",anchor:"accelerate.data_loader.IterableDatasetShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.IterableDatasetShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.IterableDataset</code>) &#x2014;
The batch sampler to split in several shards.`,name:"dataset"},{anchor:"accelerate.data_loader.IterableDatasetShard.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The size of the batches per shard (if <code>split_batches=False</code>) or the size of the batches (if
<code>split_batches=True</code>).`,name:"batch_size"},{anchor:"accelerate.data_loader.IterableDatasetShard.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to drop the last incomplete batch or complete the last batches by using the samples from the
beginning.`,name:"drop_last"},{anchor:"accelerate.data_loader.IterableDatasetShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.IterableDatasetShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.IterableDatasetShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with an iterable dataset yielding of <code>[0, 1, 2, 3, 4, 5, 6, 7]</code>, this will result in:</p>
<ul>
<li>the shard on process 0 to yield <code>[0, 1, 2, 3]</code> and the shard on process 1 to yield <code>[4, 5, 6, 7]</code> if this
argument is set to <code>False</code>.</li>
<li>the shard on process 0 to yield <code>[0, 1, 4, 5]</code> and the sampler on process 1 to yield <code>[2, 3, 6, 7]</code> if
this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/data_loader.py#L206"}}),ae=new pe({props:{name:"class accelerate.data_loader.DataLoaderShard",anchor:"accelerate.data_loader.DataLoaderShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.Dataset</code>) &#x2014;
The dataset to use to build this datalaoder.`,name:"dataset"},{anchor:"accelerate.data_loader.DataLoaderShard.device",description:`<strong>device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
If passed, the device to put all batches on.`,name:"device"},{anchor:"accelerate.data_loader.DataLoaderShard.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: an optional <code>torch.Generator</code></li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.DataLoaderShard.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A random number generator to keep synchronized across processes.
kwargs &#x2014;
All other keyword arguments to pass to the regular <code>DataLoader</code> initialization.`,name:"generator"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/data_loader.py#L287"}}),se=new pe({props:{name:"class accelerate.data_loader.DataLoaderDispatcher",anchor:"accelerate.data_loader.DataLoaderDispatcher",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderDispatcher.Subclass",description:"<strong>Subclass</strong> of a PyTorch <code>DataLoader</code> that will iterate and preprocess on process 0 only, then dispatch on each &#x2014;",name:"Subclass"},{anchor:"accelerate.data_loader.DataLoaderDispatcher.process",description:`<strong>process</strong> their part of the batch. &#x2014;
split_batches (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration). Another way to see this is that the observed batch size will be
the same as the initial <code>dataloader</code> if this option is set to <code>True</code>, the batch size of the initial
<code>dataloader</code> multiplied by <code>num_processes</code> otherwise. Setting this option to <code>True</code> requires that the batch
size of the <code>dataloader</code> is a round multiple of <code>batch_size</code>.`,name:"process"},{anchor:"accelerate.data_loader.DataLoaderDispatcher.*Available",description:`*<strong>*Available</strong> attributes &#x2014;**</p>
<ul>
<li><strong>total_batch_size</strong> (<code>int</code>) &#x2014; Total batch size of the dataloader across all processes.
Equal to the original batch size when <code>split_batches=True</code>; otherwise the original batch size * the total
number of processes</li>
</ul>`,name:"*Available"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/data_loader.py#L355"}}),ce=new ft({}),ne=new pe({props:{name:"class accelerate.optimizer.AcceleratedOptimizer",anchor:"accelerate.optimizer.AcceleratedOptimizer",parameters:[{name:"optimizer",val:""},{name:"device_placement",val:" = True"},{name:"scaler",val:" = None"}],parametersDescription:[{anchor:"accelerate.optimizer.AcceleratedOptimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the optimizer should handle device placement. If so, it will place the state dictionary of
<code>optimizer</code> on the right device.`,name:"device_placement"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.scaler",description:`<strong>scaler</strong> (<code>torch.cuda.amp.grad_scaler.GradScaler</code>, <em>optional</em>) &#x2014;
The scaler to use in the step function if training with mixed precision.`,name:"scaler"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/optimizer.py#L38"}}),le=new ft({}),de=new pe({props:{name:"class accelerate.scheduler.AcceleratedScheduler",anchor:"accelerate.scheduler.AcceleratedScheduler",parameters:[{name:"scheduler",val:""},{name:"optimizers",val:""},{name:"step_with_optimizer",val:": bool = True"},{name:"split_batches",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.scheduler.AcceleratedScheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
The scheduler to wrap.`,name:"scheduler"},{anchor:"accelerate.scheduler.AcceleratedScheduler.optimizers",description:`<strong>optimizers</strong> (one or a list of <code>torch.optim.Optimizer</code>) &#x2014;
The optimizers used.`,name:"optimizers"},{anchor:"accelerate.scheduler.AcceleratedScheduler.step_with_optimizer",description:`<strong>step_with_optimizer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the scheduler should be stepped at each optimizer step.`,name:"step_with_optimizer"},{anchor:"accelerate.scheduler.AcceleratedScheduler.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the dataloaders split one batch across the different processes (so batch size is the same
regardless of the number of processes) or create batches on each process (so batch size is the original
batch size multiplied by the number of processes).`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/scheduler.py#L25"}}),{c(){h=o("meta"),T=d(),u=o("h1"),b=o("a"),v=o("span"),$(f.$$.fragment),g=d(),O=o("span"),gt=c("Wrapper classes for torch Dataloaders, Optimizers, and Schedulers"),Ke=d(),U=o("p"),bt=c(`The internal classes Accelerate uses to prepare objects for distributed training
when calling `),ue=o("a"),_t=c("prepare()"),vt=c("."),Qe=d(),C=o("h2"),R=o("a"),we=o("span"),$(Q.$$.fragment),wt=d(),ye=o("span"),yt=c("Datasets and DataLoaders"),Ye=d(),w=o("div"),$(Y.$$.fragment),$t=d(),Z=o("p"),zt=c("Wraps a PyTorch "),$e=o("code"),Dt=c("DataLoader"),Et=c(" to generate batches for one of the processes only."),St=d(),W=o("p"),xt=c("Depending on the value of the "),ze=o("code"),Tt=c("drop_last"),At=c(" attribute of the "),De=o("code"),Ot=c("dataloader"),Lt=c(` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Pt=d(),$(V.$$.fragment),Ze=d(),L=o("div"),$(ee.$$.fragment),It=d(),P=o("p"),kt=c("Wraps a PyTorch "),Ee=o("code"),qt=c("BatchSampler"),Ct=c(` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Se=o("code"),Wt=c("num_processes"),Nt=c(` and that all have the same size.
Depending on the value of the `),xe=o("code"),Bt=c("drop_last"),Ft=c(` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Gt=d(),$(H.$$.fragment),et=d(),N=o("div"),$(te.$$.fragment),Ut=d(),_=o("p"),Rt=c("Wraps a PyTorch "),Te=o("code"),Vt=c("IterableDataset"),Ht=c(` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),Ae=o("code"),Mt=c("split_batches"),jt=c(", this is either "),Oe=o("code"),Xt=c("batch_size"),Jt=c(" or "),Le=o("code"),Kt=c("batch_size x num_processes"),Qt=c(`). Depending on the value of the
`),Pe=o("code"),Yt=c("drop_last"),Zt=c(` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),tt=d(),y=o("div"),$(ae.$$.fragment),ea=d(),oe=o("p"),ta=c("Subclass of a PyTorch "),Ie=o("code"),aa=c("DataLoader"),oa=c(" that will deal with device placement and current distributed setup."),ra=d(),ke=o("p"),qe=o("strong"),sa=c("Available attributes:"),ca=d(),Ce=o("ul"),q=o("li"),We=o("strong"),na=c("total_batch_size"),la=c(" ("),Ne=o("code"),da=c("int"),ia=c(`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),Be=o("code"),ha=c("split_batches=True"),pa=c(`; otherwise the original batch size * the total
number of processes`),at=d(),re=o("div"),$(se.$$.fragment),ot=d(),B=o("h2"),M=o("a"),Fe=o("span"),$(ce.$$.fragment),ma=d(),Ge=o("span"),ua=c("Optimizers"),rt=d(),I=o("div"),$(ne.$$.fragment),fa=d(),Ue=o("p"),ga=c("Internal wrapper around a torch optimizer."),ba=d(),F=o("p"),_a=c("Conditionally will perform "),Re=o("code"),va=c("step"),wa=c(" and "),Ve=o("code"),ya=c("zero_grad"),$a=c(` if gradients should be synchronized when performing gradient
accumulation.`),st=d(),G=o("h2"),j=o("a"),He=o("span"),$(le.$$.fragment),za=d(),Me=o("span"),Da=c("Schedulers"),ct=d(),k=o("div"),$(de.$$.fragment),Ea=d(),je=o("p"),Sa=c(`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),xa=d(),Xe=o("p"),Ta=c(`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),this.h()},l(t){const l=go('[data-svelte="svelte-1phssyn"]',document.head);h=r(l,"META",{name:!0,content:!0}),l.forEach(a),T=i(t),u=r(t,"H1",{class:!0});var ie=s(u);b=r(ie,"A",{id:!0,class:!0,href:!0});var Je=s(b);v=r(Je,"SPAN",{});var Aa=s(v);z(f.$$.fragment,Aa),Aa.forEach(a),Je.forEach(a),g=i(ie),O=r(ie,"SPAN",{});var Oa=s(O);gt=n(Oa,"Wrapper classes for torch Dataloaders, Optimizers, and Schedulers"),Oa.forEach(a),ie.forEach(a),Ke=i(t),U=r(t,"P",{});var lt=s(U);bt=n(lt,`The internal classes Accelerate uses to prepare objects for distributed training
when calling `),ue=r(lt,"A",{href:!0});var La=s(ue);_t=n(La,"prepare()"),La.forEach(a),vt=n(lt,"."),lt.forEach(a),Qe=i(t),C=r(t,"H2",{class:!0});var dt=s(C);R=r(dt,"A",{id:!0,class:!0,href:!0});var Pa=s(R);we=r(Pa,"SPAN",{});var Ia=s(we);z(Q.$$.fragment,Ia),Ia.forEach(a),Pa.forEach(a),wt=i(dt),ye=r(dt,"SPAN",{});var ka=s(ye);yt=n(ka,"Datasets and DataLoaders"),ka.forEach(a),dt.forEach(a),Ye=i(t),w=r(t,"DIV",{class:!0});var X=s(w);z(Y.$$.fragment,X),$t=i(X),Z=r(X,"P",{});var it=s(Z);zt=n(it,"Wraps a PyTorch "),$e=r(it,"CODE",{});var qa=s($e);Dt=n(qa,"DataLoader"),qa.forEach(a),Et=n(it," to generate batches for one of the processes only."),it.forEach(a),St=i(X),W=r(X,"P",{});var fe=s(W);xt=n(fe,"Depending on the value of the "),ze=r(fe,"CODE",{});var Ca=s(ze);Tt=n(Ca,"drop_last"),Ca.forEach(a),At=n(fe," attribute of the "),De=r(fe,"CODE",{});var Wa=s(De);Ot=n(Wa,"dataloader"),Wa.forEach(a),Lt=n(fe,` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),fe.forEach(a),Pt=i(X),z(V.$$.fragment,X),X.forEach(a),Ze=i(t),L=r(t,"DIV",{class:!0});var ge=s(L);z(ee.$$.fragment,ge),It=i(ge),P=r(ge,"P",{});var J=s(P);kt=n(J,"Wraps a PyTorch "),Ee=r(J,"CODE",{});var Na=s(Ee);qt=n(Na,"BatchSampler"),Na.forEach(a),Ct=n(J,` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Se=r(J,"CODE",{});var Ba=s(Se);Wt=n(Ba,"num_processes"),Ba.forEach(a),Nt=n(J,` and that all have the same size.
Depending on the value of the `),xe=r(J,"CODE",{});var Fa=s(xe);Bt=n(Fa,"drop_last"),Fa.forEach(a),Ft=n(J,` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),J.forEach(a),Gt=i(ge),z(H.$$.fragment,ge),ge.forEach(a),et=i(t),N=r(t,"DIV",{class:!0});var ht=s(N);z(te.$$.fragment,ht),Ut=i(ht),_=r(ht,"P",{});var A=s(_);Rt=n(A,"Wraps a PyTorch "),Te=r(A,"CODE",{});var Ga=s(Te);Vt=n(Ga,"IterableDataset"),Ga.forEach(a),Ht=n(A,` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),Ae=r(A,"CODE",{});var Ua=s(Ae);Mt=n(Ua,"split_batches"),Ua.forEach(a),jt=n(A,", this is either "),Oe=r(A,"CODE",{});var Ra=s(Oe);Xt=n(Ra,"batch_size"),Ra.forEach(a),Jt=n(A," or "),Le=r(A,"CODE",{});var Va=s(Le);Kt=n(Va,"batch_size x num_processes"),Va.forEach(a),Qt=n(A,`). Depending on the value of the
`),Pe=r(A,"CODE",{});var Ha=s(Pe);Yt=n(Ha,"drop_last"),Ha.forEach(a),Zt=n(A,` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),A.forEach(a),ht.forEach(a),tt=i(t),y=r(t,"DIV",{class:!0});var K=s(y);z(ae.$$.fragment,K),ea=i(K),oe=r(K,"P",{});var pt=s(oe);ta=n(pt,"Subclass of a PyTorch "),Ie=r(pt,"CODE",{});var Ma=s(Ie);aa=n(Ma,"DataLoader"),Ma.forEach(a),oa=n(pt," that will deal with device placement and current distributed setup."),pt.forEach(a),ra=i(K),ke=r(K,"P",{});var ja=s(ke);qe=r(ja,"STRONG",{});var Xa=s(qe);sa=n(Xa,"Available attributes:"),Xa.forEach(a),ja.forEach(a),ca=i(K),Ce=r(K,"UL",{});var Ja=s(Ce);q=r(Ja,"LI",{});var he=s(q);We=r(he,"STRONG",{});var Ka=s(We);na=n(Ka,"total_batch_size"),Ka.forEach(a),la=n(he," ("),Ne=r(he,"CODE",{});var Qa=s(Ne);da=n(Qa,"int"),Qa.forEach(a),ia=n(he,`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),Be=r(he,"CODE",{});var Ya=s(Be);ha=n(Ya,"split_batches=True"),Ya.forEach(a),pa=n(he,`; otherwise the original batch size * the total
number of processes`),he.forEach(a),Ja.forEach(a),K.forEach(a),at=i(t),re=r(t,"DIV",{class:!0});var Za=s(re);z(se.$$.fragment,Za),Za.forEach(a),ot=i(t),B=r(t,"H2",{class:!0});var mt=s(B);M=r(mt,"A",{id:!0,class:!0,href:!0});var eo=s(M);Fe=r(eo,"SPAN",{});var to=s(Fe);z(ce.$$.fragment,to),to.forEach(a),eo.forEach(a),ma=i(mt),Ge=r(mt,"SPAN",{});var ao=s(Ge);ua=n(ao,"Optimizers"),ao.forEach(a),mt.forEach(a),rt=i(t),I=r(t,"DIV",{class:!0});var be=s(I);z(ne.$$.fragment,be),fa=i(be),Ue=r(be,"P",{});var oo=s(Ue);ga=n(oo,"Internal wrapper around a torch optimizer."),oo.forEach(a),ba=i(be),F=r(be,"P",{});var _e=s(F);_a=n(_e,"Conditionally will perform "),Re=r(_e,"CODE",{});var ro=s(Re);va=n(ro,"step"),ro.forEach(a),wa=n(_e," and "),Ve=r(_e,"CODE",{});var so=s(Ve);ya=n(so,"zero_grad"),so.forEach(a),$a=n(_e,` if gradients should be synchronized when performing gradient
accumulation.`),_e.forEach(a),be.forEach(a),st=i(t),G=r(t,"H2",{class:!0});var ut=s(G);j=r(ut,"A",{id:!0,class:!0,href:!0});var co=s(j);He=r(co,"SPAN",{});var no=s(He);z(le.$$.fragment,no),no.forEach(a),co.forEach(a),za=i(ut),Me=r(ut,"SPAN",{});var lo=s(Me);Da=n(lo,"Schedulers"),lo.forEach(a),ut.forEach(a),ct=i(t),k=r(t,"DIV",{class:!0});var ve=s(k);z(de.$$.fragment,ve),Ea=i(ve),je=r(ve,"P",{});var io=s(je);Sa=n(io,`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),io.forEach(a),xa=i(ve),Xe=r(ve,"P",{});var ho=s(Xe);Ta=n(ho,`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),ho.forEach(a),ve.forEach(a),this.h()},h(){p(h,"name","hf:doc:metadata"),p(h,"content",JSON.stringify(yo)),p(b,"id","wrapper-classes-for-torch-dataloaders-optimizers-and-schedulers"),p(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(b,"href","#wrapper-classes-for-torch-dataloaders-optimizers-and-schedulers"),p(u,"class","relative group"),p(ue,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator.prepare"),p(R,"id","accelerate.data_loader.prepare_data_loader"),p(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(R,"href","#accelerate.data_loader.prepare_data_loader"),p(C,"class","relative group"),p(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(M,"id","accelerate.optimizer.AcceleratedOptimizer"),p(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(M,"href","#accelerate.optimizer.AcceleratedOptimizer"),p(B,"class","relative group"),p(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(j,"id","accelerate.scheduler.AcceleratedScheduler"),p(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(j,"href","#accelerate.scheduler.AcceleratedScheduler"),p(G,"class","relative group"),p(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,l){e(document.head,h),m(t,T,l),m(t,u,l),e(u,b),e(b,v),D(f,v,null),e(u,g),e(u,O),e(O,gt),m(t,Ke,l),m(t,U,l),e(U,bt),e(U,ue),e(ue,_t),e(U,vt),m(t,Qe,l),m(t,C,l),e(C,R),e(R,we),D(Q,we,null),e(C,wt),e(C,ye),e(ye,yt),m(t,Ye,l),m(t,w,l),D(Y,w,null),e(w,$t),e(w,Z),e(Z,zt),e(Z,$e),e($e,Dt),e(Z,Et),e(w,St),e(w,W),e(W,xt),e(W,ze),e(ze,Tt),e(W,At),e(W,De),e(De,Ot),e(W,Lt),e(w,Pt),D(V,w,null),m(t,Ze,l),m(t,L,l),D(ee,L,null),e(L,It),e(L,P),e(P,kt),e(P,Ee),e(Ee,qt),e(P,Ct),e(P,Se),e(Se,Wt),e(P,Nt),e(P,xe),e(xe,Bt),e(P,Ft),e(L,Gt),D(H,L,null),m(t,et,l),m(t,N,l),D(te,N,null),e(N,Ut),e(N,_),e(_,Rt),e(_,Te),e(Te,Vt),e(_,Ht),e(_,Ae),e(Ae,Mt),e(_,jt),e(_,Oe),e(Oe,Xt),e(_,Jt),e(_,Le),e(Le,Kt),e(_,Qt),e(_,Pe),e(Pe,Yt),e(_,Zt),m(t,tt,l),m(t,y,l),D(ae,y,null),e(y,ea),e(y,oe),e(oe,ta),e(oe,Ie),e(Ie,aa),e(oe,oa),e(y,ra),e(y,ke),e(ke,qe),e(qe,sa),e(y,ca),e(y,Ce),e(Ce,q),e(q,We),e(We,na),e(q,la),e(q,Ne),e(Ne,da),e(q,ia),e(q,Be),e(Be,ha),e(q,pa),m(t,at,l),m(t,re,l),D(se,re,null),m(t,ot,l),m(t,B,l),e(B,M),e(M,Fe),D(ce,Fe,null),e(B,ma),e(B,Ge),e(Ge,ua),m(t,rt,l),m(t,I,l),D(ne,I,null),e(I,fa),e(I,Ue),e(Ue,ga),e(I,ba),e(I,F),e(F,_a),e(F,Re),e(Re,va),e(F,wa),e(F,Ve),e(Ve,ya),e(F,$a),m(t,st,l),m(t,G,l),e(G,j),e(j,He),D(le,He,null),e(G,za),e(G,Me),e(Me,Da),m(t,ct,l),m(t,k,l),D(de,k,null),e(k,Ea),e(k,je),e(je,Sa),e(k,xa),e(k,Xe),e(Xe,Ta),nt=!0},p(t,[l]){const ie={};l&2&&(ie.$$scope={dirty:l,ctx:t}),V.$set(ie);const Je={};l&2&&(Je.$$scope={dirty:l,ctx:t}),H.$set(Je)},i(t){nt||(E(f.$$.fragment,t),E(Q.$$.fragment,t),E(Y.$$.fragment,t),E(V.$$.fragment,t),E(ee.$$.fragment,t),E(H.$$.fragment,t),E(te.$$.fragment,t),E(ae.$$.fragment,t),E(se.$$.fragment,t),E(ce.$$.fragment,t),E(ne.$$.fragment,t),E(le.$$.fragment,t),E(de.$$.fragment,t),nt=!0)},o(t){S(f.$$.fragment,t),S(Q.$$.fragment,t),S(Y.$$.fragment,t),S(V.$$.fragment,t),S(ee.$$.fragment,t),S(H.$$.fragment,t),S(te.$$.fragment,t),S(ae.$$.fragment,t),S(se.$$.fragment,t),S(ce.$$.fragment,t),S(ne.$$.fragment,t),S(le.$$.fragment,t),S(de.$$.fragment,t),nt=!1},d(t){a(h),t&&a(T),t&&a(u),x(f),t&&a(Ke),t&&a(U),t&&a(Qe),t&&a(C),x(Q),t&&a(Ye),t&&a(w),x(Y),x(V),t&&a(Ze),t&&a(L),x(ee),x(H),t&&a(et),t&&a(N),x(te),t&&a(tt),t&&a(y),x(ae),t&&a(at),t&&a(re),x(se),t&&a(ot),t&&a(B),x(ce),t&&a(rt),t&&a(I),x(ne),t&&a(st),t&&a(G),x(le),t&&a(ct),t&&a(k),x(de)}}}const yo={local:"wrapper-classes-for-torch-dataloaders-optimizers-and-schedulers",sections:[{local:"accelerate.data_loader.prepare_data_loader",title:"Datasets and DataLoaders"},{local:"accelerate.optimizer.AcceleratedOptimizer",title:"Optimizers "},{local:"accelerate.scheduler.AcceleratedScheduler",title:"Schedulers "}],title:"Wrapper classes for torch Dataloaders, Optimizers, and Schedulers"};function $o(me){return bo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xo extends mo{constructor(h){super();uo(this,h,$o,wo,fo,{})}}export{xo as default,yo as metadata};
