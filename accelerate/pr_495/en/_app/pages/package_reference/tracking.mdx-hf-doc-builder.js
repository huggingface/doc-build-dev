import{S as ct,i as st,s as lt,e as a,k as l,w as u,t as c,M as it,c as n,d as t,m as i,a as o,x as f,h as s,b as d,G as e,g as m,y as v,L as dt,q as _,o as k,B as $,v as gt}from"../../chunks/vendor-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{I as Sr}from"../../chunks/IconCopyLink-hf-doc-builder.js";function pt(Gr){let w,Ie,x,B,ie,M,qe,de,He,Pe,I,S,ge,W,Ue,pe,je,Ae,p,q,Je,me,Re,Fe,G,H,Ke,he,Qe,Xe,V,U,Ye,P,Ze,ue,er,rr,fe,tr,ar,nr,O,j,or,J,cr,ve,sr,lr,De,A,N,_e,R,ir,ke,dr,Le,b,F,gr,D,pr,$e,mr,hr,be,ur,fr,vr,ee,K,Ce,T,Q,_r,L,kr,Te,$r,br,ye,Tr,yr,Er,re,X,Be,h,Y,wr,C,xr,Ee,Ir,Pr,we,Ar,Dr,Lr,xe,Cr,Br,te,Z,Se;return M=new Sr({}),W=new Sr({}),q=new E({props:{name:"class accelerate.tracking.GeneralTracker",anchor:"accelerate.tracking.GeneralTracker",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L52"}}),H=new E({props:{name:"finish",anchor:"accelerate.tracking.GeneralTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L91"}}),U=new E({props:{name:"log",anchor:"accelerate.tracking.GeneralTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int]"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.GeneralTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L77"}}),j=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.GeneralTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L64"}}),R=new Sr({}),F=new E({props:{name:"class accelerate.tracking.TensorBoardTracker",anchor:"accelerate.tracking.TensorBoardTracker",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType]"}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run`,name:"run_name"},{anchor:"accelerate.tracking.TensorBoardTracker.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>) &#x2014;
Location for TensorBoard logs to be stored.`,name:"logging_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L99"}}),K=new E({props:{name:"__init__",anchor:"accelerate.tracking.TensorBoardTracker.__init__",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType]"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L112"}}),Q=new E({props:{name:"class accelerate.tracking.WandBTracker",anchor:"accelerate.tracking.WandBTracker",parameters:[{name:"run_name",val:": str"}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L163"}}),X=new E({props:{name:"__init__",anchor:"accelerate.tracking.WandBTracker.__init__",parameters:[{name:"run_name",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L174"}}),Y=new E({props:{name:"class accelerate.tracking.CometMLTracker",anchor:"accelerate.tracking.CometMLTracker",parameters:[{name:"run_name",val:": str"}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L216"}}),Z=new E({props:{name:"__init__",anchor:"accelerate.tracking.CometMLTracker.__init__",parameters:[{name:"run_name",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L229"}}),{c(){w=a("meta"),Ie=l(),x=a("h1"),B=a("a"),ie=a("span"),u(M.$$.fragment),qe=l(),de=a("span"),He=c("Experiment Tracking"),Pe=l(),I=a("h2"),S=a("a"),ge=a("span"),u(W.$$.fragment),Ue=l(),pe=a("span"),je=c("The Base Tracker Class"),Ae=l(),p=a("div"),u(q.$$.fragment),Je=l(),me=a("p"),Re=c("A base Tracker class to be used for all logging integration implementations."),Fe=l(),G=a("div"),u(H.$$.fragment),Ke=l(),he=a("p"),Qe=c(`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),Xe=l(),V=a("div"),u(U.$$.fragment),Ye=l(),P=a("p"),Ze=c("Logs "),ue=a("code"),er=c("values"),rr=c(" to the current run. Base "),fe=a("code"),tr=c("log"),ar=c(" implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),nr=l(),O=a("div"),u(j.$$.fragment),or=l(),J=a("p"),cr=c("Logs "),ve=a("code"),sr=c("values"),lr=c(` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),De=l(),A=a("h2"),N=a("a"),_e=a("span"),u(R.$$.fragment),ir=l(),ke=a("span"),dr=c("Integrated Trackers"),Le=l(),b=a("div"),u(F.$$.fragment),gr=l(),D=a("p"),pr=c("A "),$e=a("code"),mr=c("Tracker"),hr=c(" class that supports "),be=a("code"),ur=c("tensorboard"),fr=c(". Should be initialized at the start of your script."),vr=l(),ee=a("div"),u(K.$$.fragment),Ce=l(),T=a("div"),u(Q.$$.fragment),_r=l(),L=a("p"),kr=c("A "),Te=a("code"),$r=c("Tracker"),br=c(" class that supports "),ye=a("code"),Tr=c("wandb"),yr=c(". Should be initialized at the start of your script."),Er=l(),re=a("div"),u(X.$$.fragment),Be=l(),h=a("div"),u(Y.$$.fragment),wr=l(),C=a("p"),xr=c("A "),Ee=a("code"),Ir=c("Tracker"),Pr=c(" class that supports "),we=a("code"),Ar=c("comet_ml"),Dr=c(". Should be initialized at the start of your script."),Lr=l(),xe=a("p"),Cr=c("API keys must be stored in a Comet config file."),Br=l(),te=a("div"),u(Z.$$.fragment),this.h()},l(r){const g=it('[data-svelte="svelte-1phssyn"]',document.head);w=n(g,"META",{name:!0,content:!0}),g.forEach(t),Ie=i(r),x=n(r,"H1",{class:!0});var Ge=o(x);B=n(Ge,"A",{id:!0,class:!0,href:!0});var Vr=o(B);ie=n(Vr,"SPAN",{});var Or=o(ie);f(M.$$.fragment,Or),Or.forEach(t),Vr.forEach(t),qe=i(Ge),de=n(Ge,"SPAN",{});var Nr=o(de);He=s(Nr,"Experiment Tracking"),Nr.forEach(t),Ge.forEach(t),Pe=i(r),I=n(r,"H2",{class:!0});var Ve=o(I);S=n(Ve,"A",{id:!0,class:!0,href:!0});var zr=o(S);ge=n(zr,"SPAN",{});var Mr=o(ge);f(W.$$.fragment,Mr),Mr.forEach(t),zr.forEach(t),Ue=i(Ve),pe=n(Ve,"SPAN",{});var Wr=o(pe);je=s(Wr,"The Base Tracker Class"),Wr.forEach(t),Ve.forEach(t),Ae=i(r),p=n(r,"DIV",{class:!0});var y=o(p);f(q.$$.fragment,y),Je=i(y),me=n(y,"P",{});var qr=o(me);Re=s(qr,"A base Tracker class to be used for all logging integration implementations."),qr.forEach(t),Fe=i(y),G=n(y,"DIV",{class:!0});var Oe=o(G);f(H.$$.fragment,Oe),Ke=i(Oe),he=n(Oe,"P",{});var Hr=o(he);Qe=s(Hr,`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),Hr.forEach(t),Oe.forEach(t),Xe=i(y),V=n(y,"DIV",{class:!0});var Ne=o(V);f(U.$$.fragment,Ne),Ye=i(Ne),P=n(Ne,"P",{});var ae=o(P);Ze=s(ae,"Logs "),ue=n(ae,"CODE",{});var Ur=o(ue);er=s(Ur,"values"),Ur.forEach(t),rr=s(ae," to the current run. Base "),fe=n(ae,"CODE",{});var jr=o(fe);tr=s(jr,"log"),jr.forEach(t),ar=s(ae," implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),ae.forEach(t),Ne.forEach(t),nr=i(y),O=n(y,"DIV",{class:!0});var ze=o(O);f(j.$$.fragment,ze),or=i(ze),J=n(ze,"P",{});var Me=o(J);cr=s(Me,"Logs "),ve=n(Me,"CODE",{});var Jr=o(ve);sr=s(Jr,"values"),Jr.forEach(t),lr=s(Me,` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),Me.forEach(t),ze.forEach(t),y.forEach(t),De=i(r),A=n(r,"H2",{class:!0});var We=o(A);N=n(We,"A",{id:!0,class:!0,href:!0});var Rr=o(N);_e=n(Rr,"SPAN",{});var Fr=o(_e);f(R.$$.fragment,Fr),Fr.forEach(t),Rr.forEach(t),ir=i(We),ke=n(We,"SPAN",{});var Kr=o(ke);dr=s(Kr,"Integrated Trackers"),Kr.forEach(t),We.forEach(t),Le=i(r),b=n(r,"DIV",{class:!0});var ne=o(b);f(F.$$.fragment,ne),gr=i(ne),D=n(ne,"P",{});var oe=o(D);pr=s(oe,"A "),$e=n(oe,"CODE",{});var Qr=o($e);mr=s(Qr,"Tracker"),Qr.forEach(t),hr=s(oe," class that supports "),be=n(oe,"CODE",{});var Xr=o(be);ur=s(Xr,"tensorboard"),Xr.forEach(t),fr=s(oe,". Should be initialized at the start of your script."),oe.forEach(t),vr=i(ne),ee=n(ne,"DIV",{class:!0});var Yr=o(ee);f(K.$$.fragment,Yr),Yr.forEach(t),ne.forEach(t),Ce=i(r),T=n(r,"DIV",{class:!0});var ce=o(T);f(Q.$$.fragment,ce),_r=i(ce),L=n(ce,"P",{});var se=o(L);kr=s(se,"A "),Te=n(se,"CODE",{});var Zr=o(Te);$r=s(Zr,"Tracker"),Zr.forEach(t),br=s(se," class that supports "),ye=n(se,"CODE",{});var et=o(ye);Tr=s(et,"wandb"),et.forEach(t),yr=s(se,". Should be initialized at the start of your script."),se.forEach(t),Er=i(ce),re=n(ce,"DIV",{class:!0});var rt=o(re);f(X.$$.fragment,rt),rt.forEach(t),ce.forEach(t),Be=i(r),h=n(r,"DIV",{class:!0});var z=o(h);f(Y.$$.fragment,z),wr=i(z),C=n(z,"P",{});var le=o(C);xr=s(le,"A "),Ee=n(le,"CODE",{});var tt=o(Ee);Ir=s(tt,"Tracker"),tt.forEach(t),Pr=s(le," class that supports "),we=n(le,"CODE",{});var at=o(we);Ar=s(at,"comet_ml"),at.forEach(t),Dr=s(le,". Should be initialized at the start of your script."),le.forEach(t),Lr=i(z),xe=n(z,"P",{});var nt=o(xe);Cr=s(nt,"API keys must be stored in a Comet config file."),nt.forEach(t),Br=i(z),te=n(z,"DIV",{class:!0});var ot=o(te);f(Z.$$.fragment,ot),ot.forEach(t),z.forEach(t),this.h()},h(){d(w,"name","hf:doc:metadata"),d(w,"content",JSON.stringify(mt)),d(B,"id","experiment-tracking"),d(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B,"href","#experiment-tracking"),d(x,"class","relative group"),d(S,"id","accelerate.tracking.GeneralTracker"),d(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S,"href","#accelerate.tracking.GeneralTracker"),d(I,"class","relative group"),d(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"id","accelerate.tracking.TensorBoardTracker"),d(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N,"href","#accelerate.tracking.TensorBoardTracker"),d(A,"class","relative group"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(r,g){e(document.head,w),m(r,Ie,g),m(r,x,g),e(x,B),e(B,ie),v(M,ie,null),e(x,qe),e(x,de),e(de,He),m(r,Pe,g),m(r,I,g),e(I,S),e(S,ge),v(W,ge,null),e(I,Ue),e(I,pe),e(pe,je),m(r,Ae,g),m(r,p,g),v(q,p,null),e(p,Je),e(p,me),e(me,Re),e(p,Fe),e(p,G),v(H,G,null),e(G,Ke),e(G,he),e(he,Qe),e(p,Xe),e(p,V),v(U,V,null),e(V,Ye),e(V,P),e(P,Ze),e(P,ue),e(ue,er),e(P,rr),e(P,fe),e(fe,tr),e(P,ar),e(p,nr),e(p,O),v(j,O,null),e(O,or),e(O,J),e(J,cr),e(J,ve),e(ve,sr),e(J,lr),m(r,De,g),m(r,A,g),e(A,N),e(N,_e),v(R,_e,null),e(A,ir),e(A,ke),e(ke,dr),m(r,Le,g),m(r,b,g),v(F,b,null),e(b,gr),e(b,D),e(D,pr),e(D,$e),e($e,mr),e(D,hr),e(D,be),e(be,ur),e(D,fr),e(b,vr),e(b,ee),v(K,ee,null),m(r,Ce,g),m(r,T,g),v(Q,T,null),e(T,_r),e(T,L),e(L,kr),e(L,Te),e(Te,$r),e(L,br),e(L,ye),e(ye,Tr),e(L,yr),e(T,Er),e(T,re),v(X,re,null),m(r,Be,g),m(r,h,g),v(Y,h,null),e(h,wr),e(h,C),e(C,xr),e(C,Ee),e(Ee,Ir),e(C,Pr),e(C,we),e(we,Ar),e(C,Dr),e(h,Lr),e(h,xe),e(xe,Cr),e(h,Br),e(h,te),v(Z,te,null),Se=!0},p:dt,i(r){Se||(_(M.$$.fragment,r),_(W.$$.fragment,r),_(q.$$.fragment,r),_(H.$$.fragment,r),_(U.$$.fragment,r),_(j.$$.fragment,r),_(R.$$.fragment,r),_(F.$$.fragment,r),_(K.$$.fragment,r),_(Q.$$.fragment,r),_(X.$$.fragment,r),_(Y.$$.fragment,r),_(Z.$$.fragment,r),Se=!0)},o(r){k(M.$$.fragment,r),k(W.$$.fragment,r),k(q.$$.fragment,r),k(H.$$.fragment,r),k(U.$$.fragment,r),k(j.$$.fragment,r),k(R.$$.fragment,r),k(F.$$.fragment,r),k(K.$$.fragment,r),k(Q.$$.fragment,r),k(X.$$.fragment,r),k(Y.$$.fragment,r),k(Z.$$.fragment,r),Se=!1},d(r){t(w),r&&t(Ie),r&&t(x),$(M),r&&t(Pe),r&&t(I),$(W),r&&t(Ae),r&&t(p),$(q),$(H),$(U),$(j),r&&t(De),r&&t(A),$(R),r&&t(Le),r&&t(b),$(F),$(K),r&&t(Ce),r&&t(T),$(Q),$(X),r&&t(Be),r&&t(h),$(Y),$(Z)}}}const mt={local:"experiment-tracking",sections:[{local:"accelerate.tracking.GeneralTracker",title:"The Base Tracker Class"},{local:"accelerate.tracking.TensorBoardTracker",title:"Integrated Trackers"}],title:"Experiment Tracking"};function ht(Gr){return gt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _t extends ct{constructor(w){super();st(this,w,ht,pt,lt,{})}}export{_t as default,mt as metadata};
