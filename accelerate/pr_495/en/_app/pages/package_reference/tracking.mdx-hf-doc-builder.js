import{S as vt,i as _t,s as kt,e as a,k as l,w as u,t as c,M as bt,c as n,d as t,m as i,a as o,x as f,h as s,b as d,G as e,g as m,y as v,L as $t,q as _,o as k,B as b,v as yt}from"../../chunks/vendor-hf-doc-builder.js";import{D as w}from"../../chunks/Docstring-hf-doc-builder.js";import{I as Hr}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Tt(Ur){let E,Le,x,B,ge,W,Je,pe,Re,Ce,A,S,me,q,Fe,he,Ke,Be,g,H,Qe,ue,Xe,Ye,G,Ze,fe,er,rr,re,tr,ar,O,U,nr,ve,or,cr,V,j,sr,P,lr,_e,ir,dr,ke,gr,pr,mr,N,J,hr,R,ur,be,fr,vr,Se,I,z,$e,F,_r,ye,kr,Ge,y,K,br,D,$r,Te,yr,Tr,we,wr,Er,xr,te,Q,Oe,T,X,Ar,L,Pr,Ee,Ir,Dr,xe,Lr,Cr,Br,ae,Y,Ve,h,Z,Sr,C,Gr,Ae,Or,Vr,Pe,Nr,zr,Mr,Ie,Wr,qr,ne,ee,Ne;return W=new Hr({}),q=new Hr({}),H=new w({props:{name:"class accelerate.tracking.GeneralTracker",anchor:"accelerate.tracking.GeneralTracker",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L52"}}),U=new w({props:{name:"finish",anchor:"accelerate.tracking.GeneralTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L99"}}),j=new w({props:{name:"log",anchor:"accelerate.tracking.GeneralTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.GeneralTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L85"}}),J=new w({props:{name:"store_init_configuration",anchor:"accelerate.tracking.GeneralTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L72"}}),F=new Hr({}),K=new w({props:{name:"class accelerate.tracking.TensorBoardTracker",anchor:"accelerate.tracking.TensorBoardTracker",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run`,name:"run_name"},{anchor:"accelerate.tracking.TensorBoardTracker.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>) &#x2014;
Location for TensorBoard logs to be stored.
kwargs &#x2014;
Additional key word arguments passed along to the <code>tensorboard.SummaryWriter.__init__</code> method.`,name:"logging_dir"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L107"}}),Q=new w({props:{name:"__init__",anchor:"accelerate.tracking.TensorBoardTracker.__init__",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L123"}}),X=new w({props:{name:"class accelerate.tracking.WandBTracker",anchor:"accelerate.tracking.WandBTracker",parameters:[{name:"run_name",val:": str"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.
kwargs &#x2014;
Additional key word arguments passed along to the <code>wandb.init</code> method.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L177"}}),Y=new w({props:{name:"__init__",anchor:"accelerate.tracking.WandBTracker.__init__",parameters:[{name:"run_name",val:": str"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L191"}}),Z=new w({props:{name:"class accelerate.tracking.CometMLTracker",anchor:"accelerate.tracking.CometMLTracker",parameters:[{name:"run_name",val:": str"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.
kwargs &#x2014;
Additional key word arguments passed along to the <code>Experiment.__init__</code> method.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L235"}}),ee=new w({props:{name:"__init__",anchor:"accelerate.tracking.CometMLTracker.__init__",parameters:[{name:"run_name",val:": str"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_495/src/accelerate/tracking.py#L251"}}),{c(){E=a("meta"),Le=l(),x=a("h1"),B=a("a"),ge=a("span"),u(W.$$.fragment),Je=l(),pe=a("span"),Re=c("Experiment Tracking"),Ce=l(),A=a("h2"),S=a("a"),me=a("span"),u(q.$$.fragment),Fe=l(),he=a("span"),Ke=c("The Base Tracker Class"),Be=l(),g=a("div"),u(H.$$.fragment),Qe=l(),ue=a("p"),Xe=c("A base Tracker class to be used for all logging integration implementations."),Ye=l(),G=a("p"),Ze=c("Each function should take in "),fe=a("code"),er=c("**kwargs"),rr=c(` that will automatically be passed in from a base dictionary provided to
`),re=a("a"),tr=c("Accelerator"),ar=l(),O=a("div"),u(U.$$.fragment),nr=l(),ve=a("p"),or=c(`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),cr=l(),V=a("div"),u(j.$$.fragment),sr=l(),P=a("p"),lr=c("Logs "),_e=a("code"),ir=c("values"),dr=c(" to the current run. Base "),ke=a("code"),gr=c("log"),pr=c(" implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),mr=l(),N=a("div"),u(J.$$.fragment),hr=l(),R=a("p"),ur=c("Logs "),be=a("code"),fr=c("values"),vr=c(` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),Se=l(),I=a("h2"),z=a("a"),$e=a("span"),u(F.$$.fragment),_r=l(),ye=a("span"),kr=c("Integrated Trackers"),Ge=l(),y=a("div"),u(K.$$.fragment),br=l(),D=a("p"),$r=c("A "),Te=a("code"),yr=c("Tracker"),Tr=c(" class that supports "),we=a("code"),wr=c("tensorboard"),Er=c(". Should be initialized at the start of your script."),xr=l(),te=a("div"),u(Q.$$.fragment),Oe=l(),T=a("div"),u(X.$$.fragment),Ar=l(),L=a("p"),Pr=c("A "),Ee=a("code"),Ir=c("Tracker"),Dr=c(" class that supports "),xe=a("code"),Lr=c("wandb"),Cr=c(". Should be initialized at the start of your script."),Br=l(),ae=a("div"),u(Y.$$.fragment),Ve=l(),h=a("div"),u(Z.$$.fragment),Sr=l(),C=a("p"),Gr=c("A "),Ae=a("code"),Or=c("Tracker"),Vr=c(" class that supports "),Pe=a("code"),Nr=c("comet_ml"),zr=c(". Should be initialized at the start of your script."),Mr=l(),Ie=a("p"),Wr=c("API keys must be stored in a Comet config file."),qr=l(),ne=a("div"),u(ee.$$.fragment),this.h()},l(r){const p=bt('[data-svelte="svelte-1phssyn"]',document.head);E=n(p,"META",{name:!0,content:!0}),p.forEach(t),Le=i(r),x=n(r,"H1",{class:!0});var ze=o(x);B=n(ze,"A",{id:!0,class:!0,href:!0});var jr=o(B);ge=n(jr,"SPAN",{});var Jr=o(ge);f(W.$$.fragment,Jr),Jr.forEach(t),jr.forEach(t),Je=i(ze),pe=n(ze,"SPAN",{});var Rr=o(pe);Re=s(Rr,"Experiment Tracking"),Rr.forEach(t),ze.forEach(t),Ce=i(r),A=n(r,"H2",{class:!0});var Me=o(A);S=n(Me,"A",{id:!0,class:!0,href:!0});var Fr=o(S);me=n(Fr,"SPAN",{});var Kr=o(me);f(q.$$.fragment,Kr),Kr.forEach(t),Fr.forEach(t),Fe=i(Me),he=n(Me,"SPAN",{});var Qr=o(he);Ke=s(Qr,"The Base Tracker Class"),Qr.forEach(t),Me.forEach(t),Be=i(r),g=n(r,"DIV",{class:!0});var $=o(g);f(H.$$.fragment,$),Qe=i($),ue=n($,"P",{});var Xr=o(ue);Xe=s(Xr,"A base Tracker class to be used for all logging integration implementations."),Xr.forEach(t),Ye=i($),G=n($,"P",{});var De=o(G);Ze=s(De,"Each function should take in "),fe=n(De,"CODE",{});var Yr=o(fe);er=s(Yr,"**kwargs"),Yr.forEach(t),rr=s(De,` that will automatically be passed in from a base dictionary provided to
`),re=n(De,"A",{href:!0});var Zr=o(re);tr=s(Zr,"Accelerator"),Zr.forEach(t),De.forEach(t),ar=i($),O=n($,"DIV",{class:!0});var We=o(O);f(U.$$.fragment,We),nr=i(We),ve=n(We,"P",{});var et=o(ve);or=s(et,`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),et.forEach(t),We.forEach(t),cr=i($),V=n($,"DIV",{class:!0});var qe=o(V);f(j.$$.fragment,qe),sr=i(qe),P=n(qe,"P",{});var oe=o(P);lr=s(oe,"Logs "),_e=n(oe,"CODE",{});var rt=o(_e);ir=s(rt,"values"),rt.forEach(t),dr=s(oe," to the current run. Base "),ke=n(oe,"CODE",{});var tt=o(ke);gr=s(tt,"log"),tt.forEach(t),pr=s(oe," implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),oe.forEach(t),qe.forEach(t),mr=i($),N=n($,"DIV",{class:!0});var He=o(N);f(J.$$.fragment,He),hr=i(He),R=n(He,"P",{});var Ue=o(R);ur=s(Ue,"Logs "),be=n(Ue,"CODE",{});var at=o(be);fr=s(at,"values"),at.forEach(t),vr=s(Ue,` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),Ue.forEach(t),He.forEach(t),$.forEach(t),Se=i(r),I=n(r,"H2",{class:!0});var je=o(I);z=n(je,"A",{id:!0,class:!0,href:!0});var nt=o(z);$e=n(nt,"SPAN",{});var ot=o($e);f(F.$$.fragment,ot),ot.forEach(t),nt.forEach(t),_r=i(je),ye=n(je,"SPAN",{});var ct=o(ye);kr=s(ct,"Integrated Trackers"),ct.forEach(t),je.forEach(t),Ge=i(r),y=n(r,"DIV",{class:!0});var ce=o(y);f(K.$$.fragment,ce),br=i(ce),D=n(ce,"P",{});var se=o(D);$r=s(se,"A "),Te=n(se,"CODE",{});var st=o(Te);yr=s(st,"Tracker"),st.forEach(t),Tr=s(se," class that supports "),we=n(se,"CODE",{});var lt=o(we);wr=s(lt,"tensorboard"),lt.forEach(t),Er=s(se,". Should be initialized at the start of your script."),se.forEach(t),xr=i(ce),te=n(ce,"DIV",{class:!0});var it=o(te);f(Q.$$.fragment,it),it.forEach(t),ce.forEach(t),Oe=i(r),T=n(r,"DIV",{class:!0});var le=o(T);f(X.$$.fragment,le),Ar=i(le),L=n(le,"P",{});var ie=o(L);Pr=s(ie,"A "),Ee=n(ie,"CODE",{});var dt=o(Ee);Ir=s(dt,"Tracker"),dt.forEach(t),Dr=s(ie," class that supports "),xe=n(ie,"CODE",{});var gt=o(xe);Lr=s(gt,"wandb"),gt.forEach(t),Cr=s(ie,". Should be initialized at the start of your script."),ie.forEach(t),Br=i(le),ae=n(le,"DIV",{class:!0});var pt=o(ae);f(Y.$$.fragment,pt),pt.forEach(t),le.forEach(t),Ve=i(r),h=n(r,"DIV",{class:!0});var M=o(h);f(Z.$$.fragment,M),Sr=i(M),C=n(M,"P",{});var de=o(C);Gr=s(de,"A "),Ae=n(de,"CODE",{});var mt=o(Ae);Or=s(mt,"Tracker"),mt.forEach(t),Vr=s(de," class that supports "),Pe=n(de,"CODE",{});var ht=o(Pe);Nr=s(ht,"comet_ml"),ht.forEach(t),zr=s(de,". Should be initialized at the start of your script."),de.forEach(t),Mr=i(M),Ie=n(M,"P",{});var ut=o(Ie);Wr=s(ut,"API keys must be stored in a Comet config file."),ut.forEach(t),qr=i(M),ne=n(M,"DIV",{class:!0});var ft=o(ne);f(ee.$$.fragment,ft),ft.forEach(t),M.forEach(t),this.h()},h(){d(E,"name","hf:doc:metadata"),d(E,"content",JSON.stringify(wt)),d(B,"id","experiment-tracking"),d(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B,"href","#experiment-tracking"),d(x,"class","relative group"),d(S,"id","accelerate.tracking.GeneralTracker"),d(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S,"href","#accelerate.tracking.GeneralTracker"),d(A,"class","relative group"),d(re,"href","/docs/accelerate/pr_495/en/package_reference/accelerator#accelerate.Accelerator"),d(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z,"id","accelerate.tracking.TensorBoardTracker"),d(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z,"href","#accelerate.tracking.TensorBoardTracker"),d(I,"class","relative group"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(r,p){e(document.head,E),m(r,Le,p),m(r,x,p),e(x,B),e(B,ge),v(W,ge,null),e(x,Je),e(x,pe),e(pe,Re),m(r,Ce,p),m(r,A,p),e(A,S),e(S,me),v(q,me,null),e(A,Fe),e(A,he),e(he,Ke),m(r,Be,p),m(r,g,p),v(H,g,null),e(g,Qe),e(g,ue),e(ue,Xe),e(g,Ye),e(g,G),e(G,Ze),e(G,fe),e(fe,er),e(G,rr),e(G,re),e(re,tr),e(g,ar),e(g,O),v(U,O,null),e(O,nr),e(O,ve),e(ve,or),e(g,cr),e(g,V),v(j,V,null),e(V,sr),e(V,P),e(P,lr),e(P,_e),e(_e,ir),e(P,dr),e(P,ke),e(ke,gr),e(P,pr),e(g,mr),e(g,N),v(J,N,null),e(N,hr),e(N,R),e(R,ur),e(R,be),e(be,fr),e(R,vr),m(r,Se,p),m(r,I,p),e(I,z),e(z,$e),v(F,$e,null),e(I,_r),e(I,ye),e(ye,kr),m(r,Ge,p),m(r,y,p),v(K,y,null),e(y,br),e(y,D),e(D,$r),e(D,Te),e(Te,yr),e(D,Tr),e(D,we),e(we,wr),e(D,Er),e(y,xr),e(y,te),v(Q,te,null),m(r,Oe,p),m(r,T,p),v(X,T,null),e(T,Ar),e(T,L),e(L,Pr),e(L,Ee),e(Ee,Ir),e(L,Dr),e(L,xe),e(xe,Lr),e(L,Cr),e(T,Br),e(T,ae),v(Y,ae,null),m(r,Ve,p),m(r,h,p),v(Z,h,null),e(h,Sr),e(h,C),e(C,Gr),e(C,Ae),e(Ae,Or),e(C,Vr),e(C,Pe),e(Pe,Nr),e(C,zr),e(h,Mr),e(h,Ie),e(Ie,Wr),e(h,qr),e(h,ne),v(ee,ne,null),Ne=!0},p:$t,i(r){Ne||(_(W.$$.fragment,r),_(q.$$.fragment,r),_(H.$$.fragment,r),_(U.$$.fragment,r),_(j.$$.fragment,r),_(J.$$.fragment,r),_(F.$$.fragment,r),_(K.$$.fragment,r),_(Q.$$.fragment,r),_(X.$$.fragment,r),_(Y.$$.fragment,r),_(Z.$$.fragment,r),_(ee.$$.fragment,r),Ne=!0)},o(r){k(W.$$.fragment,r),k(q.$$.fragment,r),k(H.$$.fragment,r),k(U.$$.fragment,r),k(j.$$.fragment,r),k(J.$$.fragment,r),k(F.$$.fragment,r),k(K.$$.fragment,r),k(Q.$$.fragment,r),k(X.$$.fragment,r),k(Y.$$.fragment,r),k(Z.$$.fragment,r),k(ee.$$.fragment,r),Ne=!1},d(r){t(E),r&&t(Le),r&&t(x),b(W),r&&t(Ce),r&&t(A),b(q),r&&t(Be),r&&t(g),b(H),b(U),b(j),b(J),r&&t(Se),r&&t(I),b(F),r&&t(Ge),r&&t(y),b(K),b(Q),r&&t(Oe),r&&t(T),b(X),b(Y),r&&t(Ve),r&&t(h),b(Z),b(ee)}}}const wt={local:"experiment-tracking",sections:[{local:"accelerate.tracking.GeneralTracker",title:"The Base Tracker Class"},{local:"accelerate.tracking.TensorBoardTracker",title:"Integrated Trackers"}],title:"Experiment Tracking"};function Et(Ur){return yt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class It extends vt{constructor(E){super();_t(this,E,Et,Tt,kt,{})}}export{It as default,wt as metadata};
