import{S as Yn,i as Zn,s as el,e as a,k as n,w as m,t as c,M as tl,c as o,d as r,m as l,a as s,x as f,h as d,b as u,G as t,g as p,y as h,q as v,o as g,B as _,v as rl}from"../chunks/vendor-hf-doc-builder.js";import{T as al}from"../chunks/Tip-hf-doc-builder.js";import{D as b}from"../chunks/Docstring-hf-doc-builder.js";import{I as ge}from"../chunks/IconCopyLink-hf-doc-builder.js";function ol(hr){let $,re;return{c(){$=a("p"),re=c("Make sure all processes will reach this instruction otherwise one of your processes will hang forever.")},l(y){$=o(y,"P",{});var E=s($);re=d(E,"Make sure all processes will reach this instruction otherwise one of your processes will hang forever."),E.forEach(r)},m(y,E){p(y,$,E),t($,re)},d(y){y&&r($)}}}function sl(hr){let $,re,y,E,ft,_e,ya,ht,Ea,vr,C,ae,vt,be,xa,gt,wa,gr,x,$e,Da,_t,Pa,Ta,bt,Na,La,w,et,$t,ka,Ca,Ua,tt,yt,Ia,Sa,Ra,rt,Et,Oa,Aa,Va,at,xt,Ma,Ga,Fa,ot,wt,Ha,qa,_r,D,ye,za,Dt,Ba,Wa,Pt,ja,Ja,T,st,Tt,Ka,Qa,Xa,nt,Nt,Ya,Za,eo,lt,Lt,to,ro,ao,it,kt,oo,so,br,P,Ee,no,Ct,lo,io,Ut,co,po,U,ct,It,uo,mo,fo,dt,St,ho,vo,go,pt,Rt,_o,bo,$r,I,oe,Ot,xe,$o,At,yo,yr,se,Eo,Vt,xo,wo,Er,S,we,Do,Mt,Po,xr,R,De,To,Gt,No,wr,O,Pe,Lo,Ft,ko,Dr,A,Te,Co,Ht,Uo,Pr,V,Ne,Io,qt,So,Tr,M,Le,Ro,zt,Oo,Nr,G,ne,Bt,ke,Ao,Wt,Vo,Lr,F,Ce,Mo,jt,Go,kr,H,Ue,Fo,Jt,Ho,Cr,q,Ie,qo,Se,zo,Kt,Bo,Wo,Ur,z,le,Qt,Re,jo,Xt,Jo,Ir,B,Oe,Ko,Yt,Qo,Sr,W,ie,Zt,Ae,Xo,er,Yo,Rr,j,Ve,Zo,tr,es,Or,J,Me,ts,rr,rs,Ar,K,Ge,as,ar,os,Vr,Q,Fe,ss,or,ns,Mr,X,ce,sr,He,ls,nr,is,Gr,Y,qe,cs,lr,ds,Fr,Z,ze,ps,Be,us,ir,ms,fs,Hr,N,We,hs,cr,vs,gs,de,qr,ee,pe,dr,je,_s,pr,bs,zr,te,Je,$s,L,ys,ur,Es,xs,mr,ws,Ds,fr,Ps,Ts,Br,Ke,Qe,Wr,Xe,Ye,jr;return _e=new ge({}),be=new ge({}),$e=new b({props:{name:"class accelerate.DistributedType",anchor:"accelerate.DistributedType",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/dataclasses.py#L104"}}),ye=new b({props:{name:"class accelerate.utils.LoggerType",anchor:"accelerate.utils.LoggerType",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/dataclasses.py#L181"}}),Ee=new b({props:{name:"class accelerate.utils.PrecisionType",anchor:"accelerate.utils.PrecisionType",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/dataclasses.py#L198"}}),xe=new ge({}),we=new b({props:{name:"accelerate.utils.broadcast",anchor:"accelerate.utils.broadcast",parameters:[{name:"tensor",val:""},{name:"from_process",val:": int = 0"}],parametersDescription:[{anchor:"accelerate.utils.broadcast.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.utils.broadcast.from_process",description:`<strong>from_process</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The process from which to send the data`,name:"from_process"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/operations.py#L277",returnDescription:`
<p>The same data structure as <code>tensor</code> with all tensors broadcasted to the proper device.</p>
`}}),De=new b({props:{name:"accelerate.utils.concatenate",anchor:"accelerate.utils.concatenate",parameters:[{name:"data",val:""},{name:"dim",val:" = 0"}],parametersDescription:[{anchor:"accelerate.utils.concatenate.data",description:`<strong>data</strong> (nested list/tuple/dictionary of lists of tensors <code>torch.Tensor</code>) &#x2014;
The data to concatenate.`,name:"data"},{anchor:"accelerate.utils.concatenate.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to concatenate.`,name:"dim"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/operations.py#L343",returnDescription:`
<p>The same data structure as <code>data</code> with all the tensors concatenated.</p>
`}}),Pe=new b({props:{name:"accelerate.utils.gather",anchor:"accelerate.utils.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.utils.gather.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/operations.py#L207",returnDescription:`
<p>The same data structure as <code>tensor</code> with all tensors sent to the proper device.</p>
`}}),Te=new b({props:{name:"accelerate.utils.pad_across_processes",anchor:"accelerate.utils.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.utils.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.utils.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.utils.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.utils.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/operations.py#L365"}}),Ne=new b({props:{name:"accelerate.utils.reduce",anchor:"accelerate.utils.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'mean'"}],parametersDescription:[{anchor:"accelerate.utils.reduce.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to reduce.`,name:"tensor"},{anchor:"accelerate.utils.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;mean&quot;</code>) &#x2014;
A reduction method. Can be of &#x201C;mean&#x201D;, &#x201C;sum&#x201D;, or &#x201C;none&#x201D;`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/operations.py#L411",returnDescription:`
<p>The same data structure as <code>data</code> with all the tensors reduced.</p>
`}}),Le=new b({props:{name:"accelerate.utils.send_to_device",anchor:"accelerate.utils.send_to_device",parameters:[{name:"tensor",val:""},{name:"device",val:""}],parametersDescription:[{anchor:"accelerate.utils.send_to_device.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to send to a given device.`,name:"tensor"},{anchor:"accelerate.utils.send_to_device.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The device to send the data to.`,name:"device"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/operations.py#L106",returnDescription:`
<p>The same data structure as <code>tensor</code> with all tensors sent to the proper device.</p>
`}}),ke=new ge({}),Ce=new b({props:{name:"accelerate.utils.is_bf16_available",anchor:"accelerate.utils.is_bf16_available",parameters:[{name:"ignore_tpu",val:" = False"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/imports.py#L76"}}),Ue=new b({props:{name:"accelerate.utils.is_torch_version",anchor:"accelerate.utils.is_torch_version",parameters:[{name:"operation",val:": str"},{name:"version",val:": str"}],parametersDescription:[{anchor:"accelerate.utils.is_torch_version.operation",description:`<strong>operation</strong> (<code>str</code>) &#x2014;
A string representation of an operator, such as <code>&quot;&gt;&quot;</code> or <code>&quot;&lt;=&quot;</code>`,name:"operation"},{anchor:"accelerate.utils.is_torch_version.version",description:`<strong>version</strong> (<code>str</code>) &#x2014;
A string version of PyTorch`,name:"version"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/versions.py#L51"}}),Ie=new b({props:{name:"accelerate.utils.is_tpu_available",anchor:"accelerate.utils.is_tpu_available",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/imports.py#L59"}}),Re=new ge({}),Oe=new b({props:{name:"accelerate.utils.write_basic_config",anchor:"accelerate.utils.write_basic_config",parameters:[{name:"mixed_precision",val:" = 'no'"},{name:"save_location",val:": str = '/github/home/.cache/huggingface/accelerate/default_config.yaml'"}],parametersDescription:[{anchor:"accelerate.utils.write_basic_config.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;no&#x201D;) &#x2014;
Mixed Precision to use. Should be one of &#x201C;no&#x201D;, &#x201C;fp16&#x201D;, or &#x201C;bf16&#x201D;`,name:"mixed_precision"},{anchor:"accelerate.utils.write_basic_config.save_location",description:`<strong>save_location</strong> (<code>str</code>, <em>optional</em>, defaults to <code>default_json_config_file</code>) &#x2014;
Optional custom save location. Should be passed to <code>--config_file</code> when using <code>accelerate launch</code>. Default
location is inside the huggingface cache folder (<code>~/.cache/huggingface</code>) but can be overriden by setting
the <code>HF_HOME</code> environmental variable, followed by <code>accelerate/default_config.yaml</code>.`,name:"save_location"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/other.py#L117"}}),Ae=new ge({}),Ve=new b({props:{name:"accelerate.utils.extract_model_from_parallel",anchor:"accelerate.utils.extract_model_from_parallel",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.utils.extract_model_from_parallel.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to extract.",name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/other.py#L35",returnDescription:`
<p>The extracted model.</p>
`,returnType:`
<p><code>torch.nn.Module</code></p>
`}}),Me=new b({props:{name:"accelerate.utils.compute_module_sizes",anchor:"accelerate.utils.compute_module_sizes",parameters:[{name:"model",val:": Module"},{name:"dtype",val:": typing.Union[str, torch.device, NoneType] = None"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/modeling.py#L210"}}),Ge=new b({props:{name:"accelerate.utils.get_max_memory",anchor:"accelerate.utils.get_max_memory",parameters:[{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/modeling.py#L272"}}),Fe=new b({props:{name:"accelerate.utils.offload_state_dict",anchor:"accelerate.utils.offload_state_dict",parameters:[{name:"save_dir",val:": typing.Union[str, os.PathLike]"},{name:"state_dict",val:": typing.Dict[str, torch.Tensor]"}],parametersDescription:[{anchor:"accelerate.utils.offload_state_dict.save_dir",description:"<strong>save_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014; The directory in which to offload the state dict.",name:"save_dir"},{anchor:"accelerate.utils.offload_state_dict.state_dict",description:"<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>) &#x2014; The dictionary of tensors to offload.",name:"state_dict"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/offload.py#L84"}}),He=new ge({}),qe=new b({props:{name:"accelerate.utils.extract_model_from_parallel",anchor:"accelerate.utils.extract_model_from_parallel",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.utils.extract_model_from_parallel.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to extract.",name:"model"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/other.py#L35",returnDescription:`
<p>The extracted model.</p>
`,returnType:`
<p><code>torch.nn.Module</code></p>
`}}),ze=new b({props:{name:"accelerate.utils.save",anchor:"accelerate.utils.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/other.py#L74"}}),We=new b({props:{name:"accelerate.utils.wait_for_everyone",anchor:"accelerate.utils.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/other.py#L54"}}),de=new al({props:{warning:!0,$$slots:{default:[ol]},$$scope:{ctx:hr}}}),je=new ge({}),Je=new b({props:{name:"accelerate.utils.set_seed",anchor:"accelerate.utils.set_seed",parameters:[{name:"seed",val:": int"},{name:"device_specific",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.utils.set_seed.seed",description:"<strong>seed</strong> (<code>int</code>) &#x2014; The seed to set.",name:"seed"},{anchor:"accelerate.utils.set_seed.device_specific",description:`<strong>device_specific</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to differ the seed on each device slightly with <code>self.process_index</code>.`,name:"device_specific"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/random.py#L30"}}),Qe=new b({props:{name:"accelerate.utils.synchronize_rng_state",anchor:"accelerate.utils.synchronize_rng_state",parameters:[{name:"rng_type",val:": typing.Optional[accelerate.utils.dataclasses.RNGType] = None"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/random.py#L50"}}),Ye=new b({props:{name:"accelerate.synchronize_rng_states",anchor:"accelerate.synchronize_rng_states",parameters:[{name:"rng_types",val:": typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]]"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/accelerate/blob/vr_467/src/accelerate/utils/random.py#L85"}}),{c(){$=a("meta"),re=n(),y=a("h1"),E=a("a"),ft=a("span"),m(_e.$$.fragment),ya=n(),ht=a("span"),Ea=c("Helpful Utility Functions"),vr=n(),C=a("h2"),ae=a("a"),vt=a("span"),m(be.$$.fragment),xa=n(),gt=a("span"),wa=c("Data Classes"),gr=n(),x=a("div"),m($e.$$.fragment),Da=n(),_t=a("p"),Pa=c("Represents a type of distributed environment."),Ta=n(),bt=a("p"),Na=c("Values:"),La=n(),w=a("ul"),et=a("li"),$t=a("strong"),ka=c("NO"),Ca=c(" \u2014 Not a distributed environment, just a single process."),Ua=n(),tt=a("li"),yt=a("strong"),Ia=c("MULTI_CPU"),Sa=c(" \u2014 Distributed on multiple CPU nodes."),Ra=n(),rt=a("li"),Et=a("strong"),Oa=c("MULTI_GPU"),Aa=c(" \u2014 Distributed on multiple GPUs."),Va=n(),at=a("li"),xt=a("strong"),Ma=c("DEEPSPEED"),Ga=c(" \u2014 Using DeepSpeed."),Fa=n(),ot=a("li"),wt=a("strong"),Ha=c("TPU"),qa=c(" \u2014 Distributed on TPUs."),_r=n(),D=a("div"),m(ye.$$.fragment),za=n(),Dt=a("p"),Ba=c("Represents a type of supported experiment tracker"),Wa=n(),Pt=a("p"),ja=c("Values:"),Ja=n(),T=a("ul"),st=a("li"),Tt=a("strong"),Ka=c("ALL"),Qa=c(" \u2014 all available trackers in the environment that are supported"),Xa=n(),nt=a("li"),Nt=a("strong"),Ya=c("TENSORBOARD"),Za=c(" \u2014 TensorBoard as an experiment tracker"),eo=n(),lt=a("li"),Lt=a("strong"),to=c("WANDB"),ro=c(" \u2014 wandb as an experiment tracker"),ao=n(),it=a("li"),kt=a("strong"),oo=c("COMETML"),so=c(" \u2014 comet_ml as an experiment tracker"),br=n(),P=a("div"),m(Ee.$$.fragment),no=n(),Ct=a("p"),lo=c("Represents a type of precision used on floating point values"),io=n(),Ut=a("p"),co=c("Values:"),po=n(),U=a("ul"),ct=a("li"),It=a("strong"),uo=c("NO"),mo=c(" \u2014 using full precision (FP32)"),fo=n(),dt=a("li"),St=a("strong"),ho=c("FP16"),vo=c(" \u2014 using half precision"),go=n(),pt=a("li"),Rt=a("strong"),_o=c("BF16"),bo=c(" \u2014 using brain floating point precision"),$r=n(),I=a("h2"),oe=a("a"),Ot=a("span"),m(xe.$$.fragment),$o=n(),At=a("span"),yo=c("Data Manipulation and Operations"),yr=n(),se=a("p"),Eo=c("These include data operations that mimic the same "),Vt=a("code"),xo=c("torch"),wo=c(" ops but can be used on distributed processes."),Er=n(),S=a("div"),m(we.$$.fragment),Do=n(),Mt=a("p"),Po=c("Recursively broadcast tensor in a nested list/tuple/dictionary of tensors to all devices."),xr=n(),R=a("div"),m(De.$$.fragment),To=n(),Gt=a("p"),No=c("Recursively concatenate the tensors in a nested list/tuple/dictionary of lists of tensors with the same shape."),wr=n(),O=a("div"),m(Pe.$$.fragment),Lo=n(),Ft=a("p"),ko=c("Recursively gather tensor in a nested list/tuple/dictionary of tensors from all devices."),Dr=n(),A=a("div"),m(Te.$$.fragment),Co=n(),Ht=a("p"),Uo=c(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so they
can safely be gathered.`),Pr=n(),V=a("div"),m(Ne.$$.fragment),Io=n(),qt=a("p"),So=c(`Recursively reduce the tensors in a nested list/tuple/dictionary of lists of tensors across all processes by the
mean of a given operation.`),Tr=n(),M=a("div"),m(Le.$$.fragment),Ro=n(),zt=a("p"),Oo=c("Recursively sends the elements in a nested list/tuple/dictionary of tensors to a given device."),Nr=n(),G=a("h2"),ne=a("a"),Bt=a("span"),m(ke.$$.fragment),Ao=n(),Wt=a("span"),Vo=c("Environment Checks"),Lr=n(),F=a("div"),m(Ce.$$.fragment),Mo=n(),jt=a("p"),Go=c("Checks if bf16 is supported, optionally ignoring the TPU"),kr=n(),H=a("div"),m(Ue.$$.fragment),Fo=n(),Jt=a("p"),Ho=c("Compares the current PyTorch version to a given reference with an operation."),Cr=n(),q=a("div"),m(Ie.$$.fragment),qo=n(),Se=a("p"),zo=c("Checks if "),Kt=a("code"),Bo=c("torch_xla"),Wo=c(" is installed and if a TPU is in the environment"),Ur=n(),z=a("h2"),le=a("a"),Qt=a("span"),m(Re.$$.fragment),jo=n(),Xt=a("span"),Jo=c("Environment Configuration"),Ir=n(),B=a("div"),m(Oe.$$.fragment),Ko=n(),Yt=a("p"),Qo=c(`Creates and saves a basic cluster config to be used on a local machine with potentially multiple GPUs. Will also
set CPU if it is a CPU-only machine.`),Sr=n(),W=a("h2"),ie=a("a"),Zt=a("span"),m(Ae.$$.fragment),Xo=n(),er=a("span"),Yo=c("Modeling"),Rr=n(),j=a("div"),m(Ve.$$.fragment),Zo=n(),tr=a("p"),es=c("Extract a model from its distributed containers."),Or=n(),J=a("div"),m(Me.$$.fragment),ts=n(),rr=a("p"),rs=c("Compute the size of each submodule of a given model."),Ar=n(),K=a("div"),m(Ge.$$.fragment),as=n(),ar=a("p"),os=c("Get the maximum memory available if nothing is passed, converts string to int otherwise."),Vr=n(),Q=a("div"),m(Fe.$$.fragment),ss=n(),or=a("p"),ns=c("Offload a state dict in a given folder."),Mr=n(),X=a("h2"),ce=a("a"),sr=a("span"),m(He.$$.fragment),ls=n(),nr=a("span"),is=c("Parallel"),Gr=n(),Y=a("div"),m(qe.$$.fragment),cs=n(),lr=a("p"),ds=c("Extract a model from its distributed containers."),Fr=n(),Z=a("div"),m(ze.$$.fragment),ps=n(),Be=a("p"),us=c("Save the data to disk. Use in place of "),ir=a("code"),ms=c("torch.save()"),fs=c("."),Hr=n(),N=a("div"),m(We.$$.fragment),hs=n(),cr=a("p"),vs=c("Introduces a blocking point in the script, making sure all processes have reached this point before continuing."),gs=n(),m(de.$$.fragment),qr=n(),ee=a("h2"),pe=a("a"),dr=a("span"),m(je.$$.fragment),_s=n(),pr=a("span"),bs=c("Random"),zr=n(),te=a("div"),m(Je.$$.fragment),$s=n(),L=a("p"),ys=c("Helper function for reproducible behavior to set the seed in "),ur=a("code"),Es=c("random"),xs=c(", "),mr=a("code"),ws=c("numpy"),Ds=c(", "),fr=a("code"),Ps=c("torch"),Ts=c("."),Br=n(),Ke=a("div"),m(Qe.$$.fragment),Wr=n(),Xe=a("div"),m(Ye.$$.fragment),this.h()},l(e){const i=tl('[data-svelte="svelte-1phssyn"]',document.head);$=o(i,"META",{name:!0,content:!0}),i.forEach(r),re=l(e),y=o(e,"H1",{class:!0});var Ze=s(y);E=o(Ze,"A",{id:!0,class:!0,href:!0});var Gs=s(E);ft=o(Gs,"SPAN",{});var Fs=s(ft);f(_e.$$.fragment,Fs),Fs.forEach(r),Gs.forEach(r),ya=l(Ze),ht=o(Ze,"SPAN",{});var Hs=s(ht);Ea=d(Hs,"Helpful Utility Functions"),Hs.forEach(r),Ze.forEach(r),vr=l(e),C=o(e,"H2",{class:!0});var Jr=s(C);ae=o(Jr,"A",{id:!0,class:!0,href:!0});var qs=s(ae);vt=o(qs,"SPAN",{});var zs=s(vt);f(be.$$.fragment,zs),zs.forEach(r),qs.forEach(r),xa=l(Jr),gt=o(Jr,"SPAN",{});var Bs=s(gt);wa=d(Bs,"Data Classes"),Bs.forEach(r),Jr.forEach(r),gr=l(e),x=o(e,"DIV",{class:!0});var ue=s(x);f($e.$$.fragment,ue),Da=l(ue),_t=o(ue,"P",{});var Ws=s(_t);Pa=d(Ws,"Represents a type of distributed environment."),Ws.forEach(r),Ta=l(ue),bt=o(ue,"P",{});var js=s(bt);Na=d(js,"Values:"),js.forEach(r),La=l(ue),w=o(ue,"UL",{});var k=s(w);et=o(k,"LI",{});var Ns=s(et);$t=o(Ns,"STRONG",{});var Js=s($t);ka=d(Js,"NO"),Js.forEach(r),Ca=d(Ns," \u2014 Not a distributed environment, just a single process."),Ns.forEach(r),Ua=l(k),tt=o(k,"LI",{});var Ls=s(tt);yt=o(Ls,"STRONG",{});var Ks=s(yt);Ia=d(Ks,"MULTI_CPU"),Ks.forEach(r),Sa=d(Ls," \u2014 Distributed on multiple CPU nodes."),Ls.forEach(r),Ra=l(k),rt=o(k,"LI",{});var ks=s(rt);Et=o(ks,"STRONG",{});var Qs=s(Et);Oa=d(Qs,"MULTI_GPU"),Qs.forEach(r),Aa=d(ks," \u2014 Distributed on multiple GPUs."),ks.forEach(r),Va=l(k),at=o(k,"LI",{});var Cs=s(at);xt=o(Cs,"STRONG",{});var Xs=s(xt);Ma=d(Xs,"DEEPSPEED"),Xs.forEach(r),Ga=d(Cs," \u2014 Using DeepSpeed."),Cs.forEach(r),Fa=l(k),ot=o(k,"LI",{});var Us=s(ot);wt=o(Us,"STRONG",{});var Ys=s(wt);Ha=d(Ys,"TPU"),Ys.forEach(r),qa=d(Us," \u2014 Distributed on TPUs."),Us.forEach(r),k.forEach(r),ue.forEach(r),_r=l(e),D=o(e,"DIV",{class:!0});var me=s(D);f(ye.$$.fragment,me),za=l(me),Dt=o(me,"P",{});var Zs=s(Dt);Ba=d(Zs,"Represents a type of supported experiment tracker"),Zs.forEach(r),Wa=l(me),Pt=o(me,"P",{});var en=s(Pt);ja=d(en,"Values:"),en.forEach(r),Ja=l(me),T=o(me,"UL",{});var fe=s(T);st=o(fe,"LI",{});var Is=s(st);Tt=o(Is,"STRONG",{});var tn=s(Tt);Ka=d(tn,"ALL"),tn.forEach(r),Qa=d(Is," \u2014 all available trackers in the environment that are supported"),Is.forEach(r),Xa=l(fe),nt=o(fe,"LI",{});var Ss=s(nt);Nt=o(Ss,"STRONG",{});var rn=s(Nt);Ya=d(rn,"TENSORBOARD"),rn.forEach(r),Za=d(Ss," \u2014 TensorBoard as an experiment tracker"),Ss.forEach(r),eo=l(fe),lt=o(fe,"LI",{});var Rs=s(lt);Lt=o(Rs,"STRONG",{});var an=s(Lt);to=d(an,"WANDB"),an.forEach(r),ro=d(Rs," \u2014 wandb as an experiment tracker"),Rs.forEach(r),ao=l(fe),it=o(fe,"LI",{});var Os=s(it);kt=o(Os,"STRONG",{});var on=s(kt);oo=d(on,"COMETML"),on.forEach(r),so=d(Os," \u2014 comet_ml as an experiment tracker"),Os.forEach(r),fe.forEach(r),me.forEach(r),br=l(e),P=o(e,"DIV",{class:!0});var he=s(P);f(Ee.$$.fragment,he),no=l(he),Ct=o(he,"P",{});var sn=s(Ct);lo=d(sn,"Represents a type of precision used on floating point values"),sn.forEach(r),io=l(he),Ut=o(he,"P",{});var nn=s(Ut);co=d(nn,"Values:"),nn.forEach(r),po=l(he),U=o(he,"UL",{});var ut=s(U);ct=o(ut,"LI",{});var As=s(ct);It=o(As,"STRONG",{});var ln=s(It);uo=d(ln,"NO"),ln.forEach(r),mo=d(As," \u2014 using full precision (FP32)"),As.forEach(r),fo=l(ut),dt=o(ut,"LI",{});var Vs=s(dt);St=o(Vs,"STRONG",{});var cn=s(St);ho=d(cn,"FP16"),cn.forEach(r),vo=d(Vs," \u2014 using half precision"),Vs.forEach(r),go=l(ut),pt=o(ut,"LI",{});var Ms=s(pt);Rt=o(Ms,"STRONG",{});var dn=s(Rt);_o=d(dn,"BF16"),dn.forEach(r),bo=d(Ms," \u2014 using brain floating point precision"),Ms.forEach(r),ut.forEach(r),he.forEach(r),$r=l(e),I=o(e,"H2",{class:!0});var Kr=s(I);oe=o(Kr,"A",{id:!0,class:!0,href:!0});var pn=s(oe);Ot=o(pn,"SPAN",{});var un=s(Ot);f(xe.$$.fragment,un),un.forEach(r),pn.forEach(r),$o=l(Kr),At=o(Kr,"SPAN",{});var mn=s(At);yo=d(mn,"Data Manipulation and Operations"),mn.forEach(r),Kr.forEach(r),yr=l(e),se=o(e,"P",{});var Qr=s(se);Eo=d(Qr,"These include data operations that mimic the same "),Vt=o(Qr,"CODE",{});var fn=s(Vt);xo=d(fn,"torch"),fn.forEach(r),wo=d(Qr," ops but can be used on distributed processes."),Qr.forEach(r),Er=l(e),S=o(e,"DIV",{class:!0});var Xr=s(S);f(we.$$.fragment,Xr),Do=l(Xr),Mt=o(Xr,"P",{});var hn=s(Mt);Po=d(hn,"Recursively broadcast tensor in a nested list/tuple/dictionary of tensors to all devices."),hn.forEach(r),Xr.forEach(r),xr=l(e),R=o(e,"DIV",{class:!0});var Yr=s(R);f(De.$$.fragment,Yr),To=l(Yr),Gt=o(Yr,"P",{});var vn=s(Gt);No=d(vn,"Recursively concatenate the tensors in a nested list/tuple/dictionary of lists of tensors with the same shape."),vn.forEach(r),Yr.forEach(r),wr=l(e),O=o(e,"DIV",{class:!0});var Zr=s(O);f(Pe.$$.fragment,Zr),Lo=l(Zr),Ft=o(Zr,"P",{});var gn=s(Ft);ko=d(gn,"Recursively gather tensor in a nested list/tuple/dictionary of tensors from all devices."),gn.forEach(r),Zr.forEach(r),Dr=l(e),A=o(e,"DIV",{class:!0});var ea=s(A);f(Te.$$.fragment,ea),Co=l(ea),Ht=o(ea,"P",{});var _n=s(Ht);Uo=d(_n,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so they
can safely be gathered.`),_n.forEach(r),ea.forEach(r),Pr=l(e),V=o(e,"DIV",{class:!0});var ta=s(V);f(Ne.$$.fragment,ta),Io=l(ta),qt=o(ta,"P",{});var bn=s(qt);So=d(bn,`Recursively reduce the tensors in a nested list/tuple/dictionary of lists of tensors across all processes by the
mean of a given operation.`),bn.forEach(r),ta.forEach(r),Tr=l(e),M=o(e,"DIV",{class:!0});var ra=s(M);f(Le.$$.fragment,ra),Ro=l(ra),zt=o(ra,"P",{});var $n=s(zt);Oo=d($n,"Recursively sends the elements in a nested list/tuple/dictionary of tensors to a given device."),$n.forEach(r),ra.forEach(r),Nr=l(e),G=o(e,"H2",{class:!0});var aa=s(G);ne=o(aa,"A",{id:!0,class:!0,href:!0});var yn=s(ne);Bt=o(yn,"SPAN",{});var En=s(Bt);f(ke.$$.fragment,En),En.forEach(r),yn.forEach(r),Ao=l(aa),Wt=o(aa,"SPAN",{});var xn=s(Wt);Vo=d(xn,"Environment Checks"),xn.forEach(r),aa.forEach(r),Lr=l(e),F=o(e,"DIV",{class:!0});var oa=s(F);f(Ce.$$.fragment,oa),Mo=l(oa),jt=o(oa,"P",{});var wn=s(jt);Go=d(wn,"Checks if bf16 is supported, optionally ignoring the TPU"),wn.forEach(r),oa.forEach(r),kr=l(e),H=o(e,"DIV",{class:!0});var sa=s(H);f(Ue.$$.fragment,sa),Fo=l(sa),Jt=o(sa,"P",{});var Dn=s(Jt);Ho=d(Dn,"Compares the current PyTorch version to a given reference with an operation."),Dn.forEach(r),sa.forEach(r),Cr=l(e),q=o(e,"DIV",{class:!0});var na=s(q);f(Ie.$$.fragment,na),qo=l(na),Se=o(na,"P",{});var la=s(Se);zo=d(la,"Checks if "),Kt=o(la,"CODE",{});var Pn=s(Kt);Bo=d(Pn,"torch_xla"),Pn.forEach(r),Wo=d(la," is installed and if a TPU is in the environment"),la.forEach(r),na.forEach(r),Ur=l(e),z=o(e,"H2",{class:!0});var ia=s(z);le=o(ia,"A",{id:!0,class:!0,href:!0});var Tn=s(le);Qt=o(Tn,"SPAN",{});var Nn=s(Qt);f(Re.$$.fragment,Nn),Nn.forEach(r),Tn.forEach(r),jo=l(ia),Xt=o(ia,"SPAN",{});var Ln=s(Xt);Jo=d(Ln,"Environment Configuration"),Ln.forEach(r),ia.forEach(r),Ir=l(e),B=o(e,"DIV",{class:!0});var ca=s(B);f(Oe.$$.fragment,ca),Ko=l(ca),Yt=o(ca,"P",{});var kn=s(Yt);Qo=d(kn,`Creates and saves a basic cluster config to be used on a local machine with potentially multiple GPUs. Will also
set CPU if it is a CPU-only machine.`),kn.forEach(r),ca.forEach(r),Sr=l(e),W=o(e,"H2",{class:!0});var da=s(W);ie=o(da,"A",{id:!0,class:!0,href:!0});var Cn=s(ie);Zt=o(Cn,"SPAN",{});var Un=s(Zt);f(Ae.$$.fragment,Un),Un.forEach(r),Cn.forEach(r),Xo=l(da),er=o(da,"SPAN",{});var In=s(er);Yo=d(In,"Modeling"),In.forEach(r),da.forEach(r),Rr=l(e),j=o(e,"DIV",{class:!0});var pa=s(j);f(Ve.$$.fragment,pa),Zo=l(pa),tr=o(pa,"P",{});var Sn=s(tr);es=d(Sn,"Extract a model from its distributed containers."),Sn.forEach(r),pa.forEach(r),Or=l(e),J=o(e,"DIV",{class:!0});var ua=s(J);f(Me.$$.fragment,ua),ts=l(ua),rr=o(ua,"P",{});var Rn=s(rr);rs=d(Rn,"Compute the size of each submodule of a given model."),Rn.forEach(r),ua.forEach(r),Ar=l(e),K=o(e,"DIV",{class:!0});var ma=s(K);f(Ge.$$.fragment,ma),as=l(ma),ar=o(ma,"P",{});var On=s(ar);os=d(On,"Get the maximum memory available if nothing is passed, converts string to int otherwise."),On.forEach(r),ma.forEach(r),Vr=l(e),Q=o(e,"DIV",{class:!0});var fa=s(Q);f(Fe.$$.fragment,fa),ss=l(fa),or=o(fa,"P",{});var An=s(or);ns=d(An,"Offload a state dict in a given folder."),An.forEach(r),fa.forEach(r),Mr=l(e),X=o(e,"H2",{class:!0});var ha=s(X);ce=o(ha,"A",{id:!0,class:!0,href:!0});var Vn=s(ce);sr=o(Vn,"SPAN",{});var Mn=s(sr);f(He.$$.fragment,Mn),Mn.forEach(r),Vn.forEach(r),ls=l(ha),nr=o(ha,"SPAN",{});var Gn=s(nr);is=d(Gn,"Parallel"),Gn.forEach(r),ha.forEach(r),Gr=l(e),Y=o(e,"DIV",{class:!0});var va=s(Y);f(qe.$$.fragment,va),cs=l(va),lr=o(va,"P",{});var Fn=s(lr);ds=d(Fn,"Extract a model from its distributed containers."),Fn.forEach(r),va.forEach(r),Fr=l(e),Z=o(e,"DIV",{class:!0});var ga=s(Z);f(ze.$$.fragment,ga),ps=l(ga),Be=o(ga,"P",{});var _a=s(Be);us=d(_a,"Save the data to disk. Use in place of "),ir=o(_a,"CODE",{});var Hn=s(ir);ms=d(Hn,"torch.save()"),Hn.forEach(r),fs=d(_a,"."),_a.forEach(r),ga.forEach(r),Hr=l(e),N=o(e,"DIV",{class:!0});var mt=s(N);f(We.$$.fragment,mt),hs=l(mt),cr=o(mt,"P",{});var qn=s(cr);vs=d(qn,"Introduces a blocking point in the script, making sure all processes have reached this point before continuing."),qn.forEach(r),gs=l(mt),f(de.$$.fragment,mt),mt.forEach(r),qr=l(e),ee=o(e,"H2",{class:!0});var ba=s(ee);pe=o(ba,"A",{id:!0,class:!0,href:!0});var zn=s(pe);dr=o(zn,"SPAN",{});var Bn=s(dr);f(je.$$.fragment,Bn),Bn.forEach(r),zn.forEach(r),_s=l(ba),pr=o(ba,"SPAN",{});var Wn=s(pr);bs=d(Wn,"Random"),Wn.forEach(r),ba.forEach(r),zr=l(e),te=o(e,"DIV",{class:!0});var $a=s(te);f(Je.$$.fragment,$a),$s=l($a),L=o($a,"P",{});var ve=s(L);ys=d(ve,"Helper function for reproducible behavior to set the seed in "),ur=o(ve,"CODE",{});var jn=s(ur);Es=d(jn,"random"),jn.forEach(r),xs=d(ve,", "),mr=o(ve,"CODE",{});var Jn=s(mr);ws=d(Jn,"numpy"),Jn.forEach(r),Ds=d(ve,", "),fr=o(ve,"CODE",{});var Kn=s(fr);Ps=d(Kn,"torch"),Kn.forEach(r),Ts=d(ve,"."),ve.forEach(r),$a.forEach(r),Br=l(e),Ke=o(e,"DIV",{class:!0});var Qn=s(Ke);f(Qe.$$.fragment,Qn),Qn.forEach(r),Wr=l(e),Xe=o(e,"DIV",{class:!0});var Xn=s(Xe);f(Ye.$$.fragment,Xn),Xn.forEach(r),this.h()},h(){u($,"name","hf:doc:metadata"),u($,"content",JSON.stringify(nl)),u(E,"id","helpful-utility-functions"),u(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(E,"href","#helpful-utility-functions"),u(y,"class","relative group"),u(ae,"id","accelerate.DistributedType"),u(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ae,"href","#accelerate.DistributedType"),u(C,"class","relative group"),u(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(oe,"id","accelerate.utils.broadcast"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#accelerate.utils.broadcast"),u(I,"class","relative group"),u(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ne,"id","accelerate.utils.is_bf16_available"),u(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ne,"href","#accelerate.utils.is_bf16_available"),u(G,"class","relative group"),u(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(le,"id","accelerate.utils.write_basic_config"),u(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(le,"href","#accelerate.utils.write_basic_config"),u(z,"class","relative group"),u(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ie,"id","accelerate.utils.extract_model_from_parallel"),u(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ie,"href","#accelerate.utils.extract_model_from_parallel"),u(W,"class","relative group"),u(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ce,"id","accelerate.utils.extract_model_from_parallel"),u(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ce,"href","#accelerate.utils.extract_model_from_parallel"),u(X,"class","relative group"),u(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(pe,"id","accelerate.utils.set_seed"),u(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(pe,"href","#accelerate.utils.set_seed"),u(ee,"class","relative group"),u(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,i){t(document.head,$),p(e,re,i),p(e,y,i),t(y,E),t(E,ft),h(_e,ft,null),t(y,ya),t(y,ht),t(ht,Ea),p(e,vr,i),p(e,C,i),t(C,ae),t(ae,vt),h(be,vt,null),t(C,xa),t(C,gt),t(gt,wa),p(e,gr,i),p(e,x,i),h($e,x,null),t(x,Da),t(x,_t),t(_t,Pa),t(x,Ta),t(x,bt),t(bt,Na),t(x,La),t(x,w),t(w,et),t(et,$t),t($t,ka),t(et,Ca),t(w,Ua),t(w,tt),t(tt,yt),t(yt,Ia),t(tt,Sa),t(w,Ra),t(w,rt),t(rt,Et),t(Et,Oa),t(rt,Aa),t(w,Va),t(w,at),t(at,xt),t(xt,Ma),t(at,Ga),t(w,Fa),t(w,ot),t(ot,wt),t(wt,Ha),t(ot,qa),p(e,_r,i),p(e,D,i),h(ye,D,null),t(D,za),t(D,Dt),t(Dt,Ba),t(D,Wa),t(D,Pt),t(Pt,ja),t(D,Ja),t(D,T),t(T,st),t(st,Tt),t(Tt,Ka),t(st,Qa),t(T,Xa),t(T,nt),t(nt,Nt),t(Nt,Ya),t(nt,Za),t(T,eo),t(T,lt),t(lt,Lt),t(Lt,to),t(lt,ro),t(T,ao),t(T,it),t(it,kt),t(kt,oo),t(it,so),p(e,br,i),p(e,P,i),h(Ee,P,null),t(P,no),t(P,Ct),t(Ct,lo),t(P,io),t(P,Ut),t(Ut,co),t(P,po),t(P,U),t(U,ct),t(ct,It),t(It,uo),t(ct,mo),t(U,fo),t(U,dt),t(dt,St),t(St,ho),t(dt,vo),t(U,go),t(U,pt),t(pt,Rt),t(Rt,_o),t(pt,bo),p(e,$r,i),p(e,I,i),t(I,oe),t(oe,Ot),h(xe,Ot,null),t(I,$o),t(I,At),t(At,yo),p(e,yr,i),p(e,se,i),t(se,Eo),t(se,Vt),t(Vt,xo),t(se,wo),p(e,Er,i),p(e,S,i),h(we,S,null),t(S,Do),t(S,Mt),t(Mt,Po),p(e,xr,i),p(e,R,i),h(De,R,null),t(R,To),t(R,Gt),t(Gt,No),p(e,wr,i),p(e,O,i),h(Pe,O,null),t(O,Lo),t(O,Ft),t(Ft,ko),p(e,Dr,i),p(e,A,i),h(Te,A,null),t(A,Co),t(A,Ht),t(Ht,Uo),p(e,Pr,i),p(e,V,i),h(Ne,V,null),t(V,Io),t(V,qt),t(qt,So),p(e,Tr,i),p(e,M,i),h(Le,M,null),t(M,Ro),t(M,zt),t(zt,Oo),p(e,Nr,i),p(e,G,i),t(G,ne),t(ne,Bt),h(ke,Bt,null),t(G,Ao),t(G,Wt),t(Wt,Vo),p(e,Lr,i),p(e,F,i),h(Ce,F,null),t(F,Mo),t(F,jt),t(jt,Go),p(e,kr,i),p(e,H,i),h(Ue,H,null),t(H,Fo),t(H,Jt),t(Jt,Ho),p(e,Cr,i),p(e,q,i),h(Ie,q,null),t(q,qo),t(q,Se),t(Se,zo),t(Se,Kt),t(Kt,Bo),t(Se,Wo),p(e,Ur,i),p(e,z,i),t(z,le),t(le,Qt),h(Re,Qt,null),t(z,jo),t(z,Xt),t(Xt,Jo),p(e,Ir,i),p(e,B,i),h(Oe,B,null),t(B,Ko),t(B,Yt),t(Yt,Qo),p(e,Sr,i),p(e,W,i),t(W,ie),t(ie,Zt),h(Ae,Zt,null),t(W,Xo),t(W,er),t(er,Yo),p(e,Rr,i),p(e,j,i),h(Ve,j,null),t(j,Zo),t(j,tr),t(tr,es),p(e,Or,i),p(e,J,i),h(Me,J,null),t(J,ts),t(J,rr),t(rr,rs),p(e,Ar,i),p(e,K,i),h(Ge,K,null),t(K,as),t(K,ar),t(ar,os),p(e,Vr,i),p(e,Q,i),h(Fe,Q,null),t(Q,ss),t(Q,or),t(or,ns),p(e,Mr,i),p(e,X,i),t(X,ce),t(ce,sr),h(He,sr,null),t(X,ls),t(X,nr),t(nr,is),p(e,Gr,i),p(e,Y,i),h(qe,Y,null),t(Y,cs),t(Y,lr),t(lr,ds),p(e,Fr,i),p(e,Z,i),h(ze,Z,null),t(Z,ps),t(Z,Be),t(Be,us),t(Be,ir),t(ir,ms),t(Be,fs),p(e,Hr,i),p(e,N,i),h(We,N,null),t(N,hs),t(N,cr),t(cr,vs),t(N,gs),h(de,N,null),p(e,qr,i),p(e,ee,i),t(ee,pe),t(pe,dr),h(je,dr,null),t(ee,_s),t(ee,pr),t(pr,bs),p(e,zr,i),p(e,te,i),h(Je,te,null),t(te,$s),t(te,L),t(L,ys),t(L,ur),t(ur,Es),t(L,xs),t(L,mr),t(mr,ws),t(L,Ds),t(L,fr),t(fr,Ps),t(L,Ts),p(e,Br,i),p(e,Ke,i),h(Qe,Ke,null),p(e,Wr,i),p(e,Xe,i),h(Ye,Xe,null),jr=!0},p(e,[i]){const Ze={};i&2&&(Ze.$$scope={dirty:i,ctx:e}),de.$set(Ze)},i(e){jr||(v(_e.$$.fragment,e),v(be.$$.fragment,e),v($e.$$.fragment,e),v(ye.$$.fragment,e),v(Ee.$$.fragment,e),v(xe.$$.fragment,e),v(we.$$.fragment,e),v(De.$$.fragment,e),v(Pe.$$.fragment,e),v(Te.$$.fragment,e),v(Ne.$$.fragment,e),v(Le.$$.fragment,e),v(ke.$$.fragment,e),v(Ce.$$.fragment,e),v(Ue.$$.fragment,e),v(Ie.$$.fragment,e),v(Re.$$.fragment,e),v(Oe.$$.fragment,e),v(Ae.$$.fragment,e),v(Ve.$$.fragment,e),v(Me.$$.fragment,e),v(Ge.$$.fragment,e),v(Fe.$$.fragment,e),v(He.$$.fragment,e),v(qe.$$.fragment,e),v(ze.$$.fragment,e),v(We.$$.fragment,e),v(de.$$.fragment,e),v(je.$$.fragment,e),v(Je.$$.fragment,e),v(Qe.$$.fragment,e),v(Ye.$$.fragment,e),jr=!0)},o(e){g(_e.$$.fragment,e),g(be.$$.fragment,e),g($e.$$.fragment,e),g(ye.$$.fragment,e),g(Ee.$$.fragment,e),g(xe.$$.fragment,e),g(we.$$.fragment,e),g(De.$$.fragment,e),g(Pe.$$.fragment,e),g(Te.$$.fragment,e),g(Ne.$$.fragment,e),g(Le.$$.fragment,e),g(ke.$$.fragment,e),g(Ce.$$.fragment,e),g(Ue.$$.fragment,e),g(Ie.$$.fragment,e),g(Re.$$.fragment,e),g(Oe.$$.fragment,e),g(Ae.$$.fragment,e),g(Ve.$$.fragment,e),g(Me.$$.fragment,e),g(Ge.$$.fragment,e),g(Fe.$$.fragment,e),g(He.$$.fragment,e),g(qe.$$.fragment,e),g(ze.$$.fragment,e),g(We.$$.fragment,e),g(de.$$.fragment,e),g(je.$$.fragment,e),g(Je.$$.fragment,e),g(Qe.$$.fragment,e),g(Ye.$$.fragment,e),jr=!1},d(e){r($),e&&r(re),e&&r(y),_(_e),e&&r(vr),e&&r(C),_(be),e&&r(gr),e&&r(x),_($e),e&&r(_r),e&&r(D),_(ye),e&&r(br),e&&r(P),_(Ee),e&&r($r),e&&r(I),_(xe),e&&r(yr),e&&r(se),e&&r(Er),e&&r(S),_(we),e&&r(xr),e&&r(R),_(De),e&&r(wr),e&&r(O),_(Pe),e&&r(Dr),e&&r(A),_(Te),e&&r(Pr),e&&r(V),_(Ne),e&&r(Tr),e&&r(M),_(Le),e&&r(Nr),e&&r(G),_(ke),e&&r(Lr),e&&r(F),_(Ce),e&&r(kr),e&&r(H),_(Ue),e&&r(Cr),e&&r(q),_(Ie),e&&r(Ur),e&&r(z),_(Re),e&&r(Ir),e&&r(B),_(Oe),e&&r(Sr),e&&r(W),_(Ae),e&&r(Rr),e&&r(j),_(Ve),e&&r(Or),e&&r(J),_(Me),e&&r(Ar),e&&r(K),_(Ge),e&&r(Vr),e&&r(Q),_(Fe),e&&r(Mr),e&&r(X),_(He),e&&r(Gr),e&&r(Y),_(qe),e&&r(Fr),e&&r(Z),_(ze),e&&r(Hr),e&&r(N),_(We),_(de),e&&r(qr),e&&r(ee),_(je),e&&r(zr),e&&r(te),_(Je),e&&r(Br),e&&r(Ke),_(Qe),e&&r(Wr),e&&r(Xe),_(Ye)}}}const nl={local:"helpful-utility-functions",sections:[{local:"accelerate.DistributedType",title:"Data Classes"},{local:"accelerate.utils.broadcast",title:"Data Manipulation and Operations"},{local:"accelerate.utils.is_bf16_available",title:"Environment Checks"},{local:"accelerate.utils.write_basic_config",title:"Environment Configuration"},{local:"accelerate.utils.extract_model_from_parallel",title:"Modeling"},{local:"accelerate.utils.extract_model_from_parallel",title:"Parallel"},{local:"accelerate.utils.set_seed",title:"Random"}],title:"Helpful Utility Functions"};function ll(hr){return rl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ul extends Yn{constructor($){super();Zn(this,$,ll,sl,el,{})}}export{ul as default,nl as metadata};
