import{S as At,i as kt,s as xt,e as r,k as d,w as u,t as n,M as zt,c as l,d as a,m,a as o,x as _,h as i,b as c,G as t,g as p,y as g,L as Lt,q as w,o as y,B as b,v as Tt}from"../chunks/vendor-hf-doc-builder.js";import{D as Et}from"../chunks/Docstring-hf-doc-builder.js";import{C as J}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as Ba}from"../chunks/IconCopyLink-hf-doc-builder.js";function Ct(Ka){let $,Ee,D,E,le,N,aa,oe,ta,Ae,A,ra,O,la,oa,ke,S,k,se,H,sa,ne,na,xe,X,ia,ze,W,Le,Y,pa,Te,I,Ce,Z,da,je,M,Ne,q,Oe,x,ma,ie,ca,ha,He,U,We,F,z,pe,G,fa,de,ua,Ie,ee,L,_a,me,ga,wa,ce,he,ya,Me,ae,ba,qe,R,Ue,te,v,fe,va,Pa,ue,_e,$a,Da,ge,Sa,Fa,B,Ge,T,we,Ea,Aa,ye,ka,Re,h,xa,be,za,La,ve,Ta,Ca,Pe,ja,Na,$e,Oa,Ha,K,Wa,Ia,Be,P,Q,Ma,De,qa,Ua,C,V,Ga,Se,Ra,Ke;return N=new Ba({}),H=new Ba({}),W=new J({props:{code:"accelerate config",highlighted:"accelerate config"}}),I=new J({props:{code:"accelerate launch my_script.py --args_to_my_script",highlighted:"accelerate launch my_script.py --args_to_my_script"}}),M=new J({props:{code:`compute_environment: LOCAL_MACHINE
deepspeed_config: {}
distributed_type: FSDP
fsdp_config:
  min_num_params: 2000
  offload_params: false
  sharding_strategy: 1
machine_rank: 0
main_process_ip: null
main_process_port: null
main_training_function: main
mixed_precision: 'no'
num_machines: 1
num_processes: 2
use_cpu: false`,highlighted:`compute_environment: LOCAL_MACHINE
deepspeed_config: {}
distributed_type: FSDP
fsdp_config:
  min_num_params: 2000
  offload_params: <span class="hljs-literal">false</span>
  sharding_strategy: 1
machine_rank: 0
main_process_ip: null
main_process_port: null
main_training_function: main
mixed_precision: <span class="hljs-string">&#x27;no&#x27;</span>
num_machines: 1
num_processes: 2
use_cpu: <span class="hljs-literal">false</span>`}}),q=new J({props:{code:"accelerate launch examples/nlp_example.py",highlighted:"accelerate launch examples/nlp_example.py"}}),U=new J({props:{code:"`Sharding Strategy`: [1] FULL_SHARD, [2] SHARD_GRAD_OP\n`Min Num Params`: FSDP\\'s minimum number of parameters for Default Auto Wrapping.\n`Offload Params`: Decides Whether to offload parameters and gradients to CPU.",highlighted:'`Sharding Strategy`: [1] FULL_SHARD, [2] SHARD_GRAD_OP\n`Min Num Params`: FSDP\\<span class="hljs-string">&#x27;s minimum number of parameters for Default Auto Wrapping.\n`Offload Params`: Decides Whether to offload parameters and gradients to CPU.</span>'}}),G=new Ba({}),R=new J({props:{code:`model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", return_dict=True)
+ model = accelerator.prepare(model)

optimizer = torch.optim.AdamW(params=model.parameters(), lr=lr)

- model, optimizer, train_dataloader, eval_dataloader, lr_scheduler = accelerator.prepare(model,
-        optimizer, train_dataloader, eval_dataloader, lr_scheduler
-    )

+ optimizer, train_dataloader, eval_dataloader, lr_scheduler = accelerator.prepare(
+         optimizer, train_dataloader, eval_dataloader, lr_scheduler
+        )
`,highlighted:`model = AutoModelForSequenceClassification.from_pretrained(&quot;bert-base-cased&quot;, return_dict=True)
<span class="hljs-addition">+ model = accelerator.prepare(model)</span>

optimizer = torch.optim.AdamW(params=model.parameters(), lr=lr)

<span class="hljs-deletion">- model, optimizer, train_dataloader, eval_dataloader, lr_scheduler = accelerator.prepare(model,</span>
<span class="hljs-deletion">-        optimizer, train_dataloader, eval_dataloader, lr_scheduler</span>
<span class="hljs-deletion">-    )</span>

<span class="hljs-addition">+ optimizer, train_dataloader, eval_dataloader, lr_scheduler = accelerator.prepare(</span>
<span class="hljs-addition">+         optimizer, train_dataloader, eval_dataloader, lr_scheduler</span>
<span class="hljs-addition">+        )</span>
`}}),B=new J({props:{code:`{
  '_fsdp_wrapped_module.flat_param': torch.Size([494209]), 
  '_fsdp_wrapped_module._fpw_module.bert.embeddings.word_embeddings._fsdp_wrapped_module.flat_param': torch.Size([11720448]), 
  '_fsdp_wrapped_module._fpw_module.bert.encoder._fsdp_wrapped_module.flat_param': torch.Size([42527232])
}`,highlighted:`{
  <span class="hljs-string">&#x27;_fsdp_wrapped_module.flat_param&#x27;</span>: torch<span class="hljs-selector-class">.Size</span>(<span class="hljs-selector-attr">[494209]</span>), 
  <span class="hljs-string">&#x27;_fsdp_wrapped_module._fpw_module.bert.embeddings.word_embeddings._fsdp_wrapped_module.flat_param&#x27;</span>: torch<span class="hljs-selector-class">.Size</span>(<span class="hljs-selector-attr">[11720448]</span>), 
  <span class="hljs-string">&#x27;_fsdp_wrapped_module._fpw_module.bert.encoder._fsdp_wrapped_module.flat_param&#x27;</span>: torch<span class="hljs-selector-class">.Size</span>(<span class="hljs-selector-attr">[42527232]</span>)
}`}}),Q=new Et({props:{name:"class accelerate.FullyShardedDataParallelPlugin",anchor:"accelerate.FullyShardedDataParallelPlugin",parameters:[{name:"sharding_strategy",val:": typing.Any = None"},{name:"backward_prefetch",val:": typing.Any = None"},{name:"mixed_precision_policy",val:": typing.Any = None"},{name:"auto_wrap_policy",val:": typing.Optional[typing.Callable] = None"},{name:"cpu_offload",val:": typing.Any = None"},{name:"ignored_modules",val:": typing.Optional[typing.Iterable[torch.nn.modules.module.Module]] = None"}],source:"https://github.com/huggingface/accelerate/blob/vr_531/src/accelerate/utils/dataclasses.py#L416"}}),V=new Et({props:{name:"get_module_class_from_name",anchor:"accelerate.FullyShardedDataParallelPlugin.get_module_class_from_name",parameters:[{name:"module",val:""},{name:"name",val:""}],parametersDescription:[{anchor:"accelerate.FullyShardedDataParallelPlugin.get_module_class_from_name.module",description:"<strong>module</strong> (<code>torch.nn.Module</code>) &#x2014; The module to get the class from.",name:"module"},{anchor:"accelerate.FullyShardedDataParallelPlugin.get_module_class_from_name.name",description:"<strong>name</strong> (<code>str</code>) &#x2014; The name of the class.",name:"name"}],source:"https://github.com/huggingface/accelerate/blob/vr_531/src/accelerate/utils/dataclasses.py#L475"}}),{c(){$=r("meta"),Ee=d(),D=r("h1"),E=r("a"),le=r("span"),u(N.$$.fragment),aa=d(),oe=r("span"),ta=n("Fully Sharded Data Parallel"),Ae=d(),A=r("p"),ra=n(`To accelerate training huge models on larger batch sizes, we can use a fully sharded data parallel model.
This type of data parallel paradigm enables fitting more data and larger models by sharding the optimizer states, gradients and parameters.
To read more about it and the benefits, check out the `),O=r("a"),la=n("Fully Sharded Data Parallel blog"),oa=n(`.
We have integrated the latest PyTorch\u2019s Fully Sharded Data Parallel (FSDP) training feature.
All you need to do is enable it through the config.`),ke=d(),S=r("h2"),k=r("a"),se=r("span"),u(H.$$.fragment),sa=d(),ne=r("span"),na=n("How it works out of the box"),xe=d(),X=r("p"),ia=n("On your machine(s) just run:"),ze=d(),u(W.$$.fragment),Le=d(),Y=r("p"),pa=n(`and answer the questions asked. This will generate a config file that will be used automatically to properly set the
default options when doing`),Te=d(),u(I.$$.fragment),Ce=d(),Z=r("p"),da=n("For instance, here is how you would run the NLP example (from the root of the repo) with FSDP enabled:"),je=d(),u(M.$$.fragment),Ne=d(),u(q.$$.fragment),Oe=d(),x=r("p"),ma=n("Currently, "),ie=r("code"),ca=n("Accelerate"),ha=n(" supports the following config through the CLI:"),He=d(),u(U.$$.fragment),We=d(),F=r("h2"),z=r("a"),pe=r("span"),u(G.$$.fragment),fa=d(),de=r("span"),ua=n("A few caveats to be aware of"),Ie=d(),ee=r("ul"),L=r("li"),_a=n(`PyTorch FSDP auto wraps sub-modules, flattens the parameters and shards the parameters in place.
Due to this, any optimizer created before model wrapping gets broken and occupies more memory.
Hence, it is highly recommended and efficient to prepare the model before creating the optimizer.
`),me=r("code"),ga=n("Accelerate"),wa=n(" will automatically wrap the model and create an optimizer for you in case of single model with a warning message."),ce=r("blockquote"),he=r("p"),ya=n("FSDP Warning: When using FSDP, it is efficient and recommended to call prepare for the model before creating the optimizer"),Me=d(),ae=r("p"),ba=n("However, below is the recommended way to prepare model and optimizer while using FSDP:"),qe=d(),u(R.$$.fragment),Ue=d(),te=r("ul"),v=r("li"),fe=r("p"),va=n(`In case of a single model, if you have created the optimizer with multiple parameter groups and called prepare with them together,
then the parameter groups will be lost and the following warning is displayed:`),Pa=d(),ue=r("blockquote"),_e=r("p"),$a=n(`FSDP Warning: When using FSDP, several parameter groups will be conflated into
a single one due to nested module wrapping and parameter flattening.`),Da=d(),ge=r("p"),Sa=n(`This is because parameter groups created before wrapping will have no meaning post wrapping due to parameter flattening of nested FSDP modules into 1D arrays (which can consume many layers).
For instance, below are the named parameters of an FSDP model on GPU 0 (When using 2 GPUs. Around 55M (110M/2) params in 1D arrays as this will have the 1st shard of the parameters).
Here, if one has applied no weight decay for [bias, LayerNorm.weight] the named parameters of an unwrapped BERT model,
it can\u2019t be applied to the below FSDP wrapped model as there are no named parameters with either of those strings and
the parameters of those layers are concatenated with parameters of various other layers.`),Fa=d(),u(B.$$.fragment),Ge=d(),T=r("ul"),we=r("li"),Ea=n("In case of multiple models, it is necessary to prepare the models before creating optimizers or else it will throw an error."),Aa=d(),ye=r("li"),ka=n("Mixed precision is currently not supported with FSDP."),Re=d(),h=r("p"),xa=n("For more control, users can leverage the "),be=r("code"),za=n("FullyShardedDataParallelPlugin"),La=n(" wherein they can specify "),ve=r("code"),Ta=n("auto_wrap_policy"),Ca=n(", "),Pe=r("code"),ja=n("backward_prefetch"),Na=n(" and "),$e=r("code"),Oa=n("ignored_modules"),Ha=n(`.
After creating an instance of this class, users can pass it to the Accelerator class instantiation.
For more information on these options, please refer to the PyTorch `),K=r("a"),Wa=n("FullyShardedDataParallel"),Ia=n(" code."),Be=d(),P=r("div"),u(Q.$$.fragment),Ma=d(),De=r("p"),qa=n("This plugin is used to enable fully sharded data parallelism."),Ua=d(),C=r("div"),u(V.$$.fragment),Ga=d(),Se=r("p"),Ra=n("Gets a class from a module by its name."),this.h()},l(e){const s=zt('[data-svelte="svelte-1phssyn"]',document.head);$=l(s,"META",{name:!0,content:!0}),s.forEach(a),Ee=m(e),D=l(e,"H1",{class:!0});var Qe=o(D);E=l(Qe,"A",{id:!0,class:!0,href:!0});var Qa=o(E);le=l(Qa,"SPAN",{});var Va=o(le);_(N.$$.fragment,Va),Va.forEach(a),Qa.forEach(a),aa=m(Qe),oe=l(Qe,"SPAN",{});var Ja=o(oe);ta=i(Ja,"Fully Sharded Data Parallel"),Ja.forEach(a),Qe.forEach(a),Ae=m(e),A=l(e,"P",{});var Ve=o(A);ra=i(Ve,`To accelerate training huge models on larger batch sizes, we can use a fully sharded data parallel model.
This type of data parallel paradigm enables fitting more data and larger models by sharding the optimizer states, gradients and parameters.
To read more about it and the benefits, check out the `),O=l(Ve,"A",{href:!0,rel:!0});var Xa=o(O);la=i(Xa,"Fully Sharded Data Parallel blog"),Xa.forEach(a),oa=i(Ve,`.
We have integrated the latest PyTorch\u2019s Fully Sharded Data Parallel (FSDP) training feature.
All you need to do is enable it through the config.`),Ve.forEach(a),ke=m(e),S=l(e,"H2",{class:!0});var Je=o(S);k=l(Je,"A",{id:!0,class:!0,href:!0});var Ya=o(k);se=l(Ya,"SPAN",{});var Za=o(se);_(H.$$.fragment,Za),Za.forEach(a),Ya.forEach(a),sa=m(Je),ne=l(Je,"SPAN",{});var et=o(ne);na=i(et,"How it works out of the box"),et.forEach(a),Je.forEach(a),xe=m(e),X=l(e,"P",{});var at=o(X);ia=i(at,"On your machine(s) just run:"),at.forEach(a),ze=m(e),_(W.$$.fragment,e),Le=m(e),Y=l(e,"P",{});var tt=o(Y);pa=i(tt,`and answer the questions asked. This will generate a config file that will be used automatically to properly set the
default options when doing`),tt.forEach(a),Te=m(e),_(I.$$.fragment,e),Ce=m(e),Z=l(e,"P",{});var rt=o(Z);da=i(rt,"For instance, here is how you would run the NLP example (from the root of the repo) with FSDP enabled:"),rt.forEach(a),je=m(e),_(M.$$.fragment,e),Ne=m(e),_(q.$$.fragment,e),Oe=m(e),x=l(e,"P",{});var Xe=o(x);ma=i(Xe,"Currently, "),ie=l(Xe,"CODE",{});var lt=o(ie);ca=i(lt,"Accelerate"),lt.forEach(a),ha=i(Xe," supports the following config through the CLI:"),Xe.forEach(a),He=m(e),_(U.$$.fragment,e),We=m(e),F=l(e,"H2",{class:!0});var Ye=o(F);z=l(Ye,"A",{id:!0,class:!0,href:!0});var ot=o(z);pe=l(ot,"SPAN",{});var st=o(pe);_(G.$$.fragment,st),st.forEach(a),ot.forEach(a),fa=m(Ye),de=l(Ye,"SPAN",{});var nt=o(de);ua=i(nt,"A few caveats to be aware of"),nt.forEach(a),Ye.forEach(a),Ie=m(e),ee=l(e,"UL",{});var it=o(ee);L=l(it,"LI",{});var Fe=o(L);_a=i(Fe,`PyTorch FSDP auto wraps sub-modules, flattens the parameters and shards the parameters in place.
Due to this, any optimizer created before model wrapping gets broken and occupies more memory.
Hence, it is highly recommended and efficient to prepare the model before creating the optimizer.
`),me=l(Fe,"CODE",{});var pt=o(me);ga=i(pt,"Accelerate"),pt.forEach(a),wa=i(Fe," will automatically wrap the model and create an optimizer for you in case of single model with a warning message."),ce=l(Fe,"BLOCKQUOTE",{});var dt=o(ce);he=l(dt,"P",{});var mt=o(he);ya=i(mt,"FSDP Warning: When using FSDP, it is efficient and recommended to call prepare for the model before creating the optimizer"),mt.forEach(a),dt.forEach(a),Fe.forEach(a),it.forEach(a),Me=m(e),ae=l(e,"P",{});var ct=o(ae);ba=i(ct,"However, below is the recommended way to prepare model and optimizer while using FSDP:"),ct.forEach(a),qe=m(e),_(R.$$.fragment,e),Ue=m(e),te=l(e,"UL",{});var ht=o(te);v=l(ht,"LI",{});var j=o(v);fe=l(j,"P",{});var ft=o(fe);va=i(ft,`In case of a single model, if you have created the optimizer with multiple parameter groups and called prepare with them together,
then the parameter groups will be lost and the following warning is displayed:`),ft.forEach(a),Pa=m(j),ue=l(j,"BLOCKQUOTE",{});var ut=o(ue);_e=l(ut,"P",{});var _t=o(_e);$a=i(_t,`FSDP Warning: When using FSDP, several parameter groups will be conflated into
a single one due to nested module wrapping and parameter flattening.`),_t.forEach(a),ut.forEach(a),Da=m(j),ge=l(j,"P",{});var gt=o(ge);Sa=i(gt,`This is because parameter groups created before wrapping will have no meaning post wrapping due to parameter flattening of nested FSDP modules into 1D arrays (which can consume many layers).
For instance, below are the named parameters of an FSDP model on GPU 0 (When using 2 GPUs. Around 55M (110M/2) params in 1D arrays as this will have the 1st shard of the parameters).
Here, if one has applied no weight decay for [bias, LayerNorm.weight] the named parameters of an unwrapped BERT model,
it can\u2019t be applied to the below FSDP wrapped model as there are no named parameters with either of those strings and
the parameters of those layers are concatenated with parameters of various other layers.`),gt.forEach(a),Fa=m(j),_(B.$$.fragment,j),j.forEach(a),ht.forEach(a),Ge=m(e),T=l(e,"UL",{});var Ze=o(T);we=l(Ze,"LI",{});var wt=o(we);Ea=i(wt,"In case of multiple models, it is necessary to prepare the models before creating optimizers or else it will throw an error."),wt.forEach(a),Aa=m(Ze),ye=l(Ze,"LI",{});var yt=o(ye);ka=i(yt,"Mixed precision is currently not supported with FSDP."),yt.forEach(a),Ze.forEach(a),Re=m(e),h=l(e,"P",{});var f=o(h);xa=i(f,"For more control, users can leverage the "),be=l(f,"CODE",{});var bt=o(be);za=i(bt,"FullyShardedDataParallelPlugin"),bt.forEach(a),La=i(f," wherein they can specify "),ve=l(f,"CODE",{});var vt=o(ve);Ta=i(vt,"auto_wrap_policy"),vt.forEach(a),Ca=i(f,", "),Pe=l(f,"CODE",{});var Pt=o(Pe);ja=i(Pt,"backward_prefetch"),Pt.forEach(a),Na=i(f," and "),$e=l(f,"CODE",{});var $t=o($e);Oa=i($t,"ignored_modules"),$t.forEach(a),Ha=i(f,`.
After creating an instance of this class, users can pass it to the Accelerator class instantiation.
For more information on these options, please refer to the PyTorch `),K=l(f,"A",{href:!0,rel:!0});var Dt=o(K);Wa=i(Dt,"FullyShardedDataParallel"),Dt.forEach(a),Ia=i(f," code."),f.forEach(a),Be=m(e),P=l(e,"DIV",{class:!0});var re=o(P);_(Q.$$.fragment,re),Ma=m(re),De=l(re,"P",{});var St=o(De);qa=i(St,"This plugin is used to enable fully sharded data parallelism."),St.forEach(a),Ua=m(re),C=l(re,"DIV",{class:!0});var ea=o(C);_(V.$$.fragment,ea),Ga=m(ea),Se=l(ea,"P",{});var Ft=o(Se);Ra=i(Ft,"Gets a class from a module by its name."),Ft.forEach(a),ea.forEach(a),re.forEach(a),this.h()},h(){c($,"name","hf:doc:metadata"),c($,"content",JSON.stringify(jt)),c(E,"id","fully-sharded-data-parallel"),c(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E,"href","#fully-sharded-data-parallel"),c(D,"class","relative group"),c(O,"href","https://pytorch.org/blog/introducing-pytorch-fully-sharded-data-parallel-api/"),c(O,"rel","nofollow"),c(k,"id","how-it-works-out-of-the-box"),c(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k,"href","#how-it-works-out-of-the-box"),c(S,"class","relative group"),c(z,"id","accelerate.FullyShardedDataParallelPlugin"),c(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z,"href","#accelerate.FullyShardedDataParallelPlugin"),c(F,"class","relative group"),c(K,"href","https://github.com/pytorch/pytorch/blob/0df2e863fbd5993a7b9e652910792bd21a516ff3/torch/distributed/fsdp/fully_sharded_data_parallel.py#L236"),c(K,"rel","nofollow"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){t(document.head,$),p(e,Ee,s),p(e,D,s),t(D,E),t(E,le),g(N,le,null),t(D,aa),t(D,oe),t(oe,ta),p(e,Ae,s),p(e,A,s),t(A,ra),t(A,O),t(O,la),t(A,oa),p(e,ke,s),p(e,S,s),t(S,k),t(k,se),g(H,se,null),t(S,sa),t(S,ne),t(ne,na),p(e,xe,s),p(e,X,s),t(X,ia),p(e,ze,s),g(W,e,s),p(e,Le,s),p(e,Y,s),t(Y,pa),p(e,Te,s),g(I,e,s),p(e,Ce,s),p(e,Z,s),t(Z,da),p(e,je,s),g(M,e,s),p(e,Ne,s),g(q,e,s),p(e,Oe,s),p(e,x,s),t(x,ma),t(x,ie),t(ie,ca),t(x,ha),p(e,He,s),g(U,e,s),p(e,We,s),p(e,F,s),t(F,z),t(z,pe),g(G,pe,null),t(F,fa),t(F,de),t(de,ua),p(e,Ie,s),p(e,ee,s),t(ee,L),t(L,_a),t(L,me),t(me,ga),t(L,wa),t(L,ce),t(ce,he),t(he,ya),p(e,Me,s),p(e,ae,s),t(ae,ba),p(e,qe,s),g(R,e,s),p(e,Ue,s),p(e,te,s),t(te,v),t(v,fe),t(fe,va),t(v,Pa),t(v,ue),t(ue,_e),t(_e,$a),t(v,Da),t(v,ge),t(ge,Sa),t(v,Fa),g(B,v,null),p(e,Ge,s),p(e,T,s),t(T,we),t(we,Ea),t(T,Aa),t(T,ye),t(ye,ka),p(e,Re,s),p(e,h,s),t(h,xa),t(h,be),t(be,za),t(h,La),t(h,ve),t(ve,Ta),t(h,Ca),t(h,Pe),t(Pe,ja),t(h,Na),t(h,$e),t($e,Oa),t(h,Ha),t(h,K),t(K,Wa),t(h,Ia),p(e,Be,s),p(e,P,s),g(Q,P,null),t(P,Ma),t(P,De),t(De,qa),t(P,Ua),t(P,C),g(V,C,null),t(C,Ga),t(C,Se),t(Se,Ra),Ke=!0},p:Lt,i(e){Ke||(w(N.$$.fragment,e),w(H.$$.fragment,e),w(W.$$.fragment,e),w(I.$$.fragment,e),w(M.$$.fragment,e),w(q.$$.fragment,e),w(U.$$.fragment,e),w(G.$$.fragment,e),w(R.$$.fragment,e),w(B.$$.fragment,e),w(Q.$$.fragment,e),w(V.$$.fragment,e),Ke=!0)},o(e){y(N.$$.fragment,e),y(H.$$.fragment,e),y(W.$$.fragment,e),y(I.$$.fragment,e),y(M.$$.fragment,e),y(q.$$.fragment,e),y(U.$$.fragment,e),y(G.$$.fragment,e),y(R.$$.fragment,e),y(B.$$.fragment,e),y(Q.$$.fragment,e),y(V.$$.fragment,e),Ke=!1},d(e){a($),e&&a(Ee),e&&a(D),b(N),e&&a(Ae),e&&a(A),e&&a(ke),e&&a(S),b(H),e&&a(xe),e&&a(X),e&&a(ze),b(W,e),e&&a(Le),e&&a(Y),e&&a(Te),b(I,e),e&&a(Ce),e&&a(Z),e&&a(je),b(M,e),e&&a(Ne),b(q,e),e&&a(Oe),e&&a(x),e&&a(He),b(U,e),e&&a(We),e&&a(F),b(G),e&&a(Ie),e&&a(ee),e&&a(Me),e&&a(ae),e&&a(qe),b(R,e),e&&a(Ue),e&&a(te),b(B),e&&a(Ge),e&&a(T),e&&a(Re),e&&a(h),e&&a(Be),e&&a(P),b(Q),b(V)}}}const jt={local:"fully-sharded-data-parallel",sections:[{local:"how-it-works-out-of-the-box",title:"How it works out of the box"},{local:"accelerate.FullyShardedDataParallelPlugin",title:"A few caveats to be aware of"}],title:"Fully Sharded Data Parallel"};function Nt(Ka){return Tt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Mt extends At{constructor($){super();kt(this,$,Nt,Ct,xt,{})}}export{Mt as default,jt as metadata};
