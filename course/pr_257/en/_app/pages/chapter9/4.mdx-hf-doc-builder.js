import{S as cn,i as hn,s as pn,e as n,k as p,w as k,t as a,M as un,c as r,d as o,m as u,a as l,x as _,h as s,b as h,N as no,G as t,g as c,y as E,L as dn,q as $,o as x,B as j,v as mn}from"../../chunks/vendor-hf-doc-builder.js";import{Y as fn}from"../../chunks/Youtube-hf-doc-builder.js";import{I as wt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as ro}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as gn}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";function yn(ts){let C,vt,D,R,xe,Z,lo,je,io,bt,ee,kt,q,co,qe,Se,ho,po,Te,Pe,uo,mo,_t,fe,fo,Et,I,N,Ce,te,go,De,yo,$t,A,oe,os,wo,ae,as,xt,G,vo,Ie,bo,ko,jt,f,H,Ae,_o,Eo,Le,$o,xo,jo,ge,Me,qo,So,To,F,Oe,Po,Co,Re,Do,Io,Ao,d,Ne,Lo,Mo,Ge,Oo,Ro,He,No,Go,Fe,Ho,Fo,Ue,Uo,Wo,We,Bo,Xo,Be,zo,Yo,Xe,Qo,Ko,Vo,U,ze,Jo,Zo,Ye,ea,ta,oa,W,Qe,aa,sa,Ke,na,ra,qt,se,St,ye,la,Tt,g,ss,Pt,L,B,Ve,ne,ia,Je,ca,Ct,re,Dt,X,ha,Ze,pa,ua,It,z,da,et,ma,fa,At,M,Y,tt,le,ga,ot,ya,Lt,we,wa,Mt,w,va,at,ba,ka,st,_a,Ea,ie,$a,xa,Ot,ce,Rt,O,Q,nt,he,ja,rt,qa,Nt,S,Sa,ve,Ta,Pa,lt,Ca,Da,Gt,v,Ia,pe,Aa,La,ue,Ma,Oa,it,Ra,Na,Ht,de,Ft,K,Ga,ct,Ha,Fa,Ut,me,Wt,y,ns,Bt,T,Ua,ht,Wa,Ba,pt,Xa,za,Xt,P,Ya,ut,Qa,Ka,dt,Va,Ja,zt,be,Za,Yt;return Z=new wt({}),ee=new gn({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter9/section4.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter9/section4.ipynb"}]}}),te=new wt({}),se=new ro({props:{code:`
`,highlighted:`title = <span class="hljs-string">&quot;Ask Rick a Question&quot;</span>
description = <span class="hljs-string">&quot;&quot;&quot;
The bot was trained to answer questions based on Rick and Morty dialogues. Ask Rick anything!
&lt;img src=&quot;https://huggingface.co/spaces/course-demos/Rick_and_Morty_QA/resolve/main/rick.png&quot; width=200px&gt;
&quot;&quot;&quot;</span>

article = <span class="hljs-string">&quot;Check out [the original Rick and Morty Bot](https://huggingface.co/spaces/kingabzpro/Rick_and_Morty_Bot) that this demo is based off of.&quot;</span>

gr.Interface(
    fn=predict,
    inputs=<span class="hljs-string">&quot;textbox&quot;</span>,
    outputs=<span class="hljs-string">&quot;text&quot;</span>,
    title=title,
    description=description,
    article=article,
    examples=[[<span class="hljs-string">&quot;What are you doing?&quot;</span>], [<span class="hljs-string">&quot;Where should we time travel to?&quot;</span>]],
).launch()`}}),ne=new wt({}),re=new ro({props:{code:'gr.Interface(classify_image, "image", "label").launch(share=True)',highlighted:'gr.Interface(classify_image, <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>).launch(share=<span class="hljs-literal">True</span>)'}}),le=new wt({}),ce=new fn({props:{id:"LS9Y2wDVI0k"}}),he=new wt({}),de=new ro({props:{code:`


`,highlighted:`<span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr
<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn

LABELS = Path(<span class="hljs-string">&quot;class_names.txt&quot;</span>).read_text().splitlines()

model = nn.Sequential(
    nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),
    nn.ReLU(),
    nn.MaxPool2d(<span class="hljs-number">2</span>),
    nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">3</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),
    nn.ReLU(),
    nn.MaxPool2d(<span class="hljs-number">2</span>),
    nn.Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">3</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),
    nn.ReLU(),
    nn.MaxPool2d(<span class="hljs-number">2</span>),
    nn.Flatten(),
    nn.Linear(<span class="hljs-number">1152</span>, <span class="hljs-number">256</span>),
    nn.ReLU(),
    nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-built_in">len</span>(LABELS)),
)
state_dict = torch.load(<span class="hljs-string">&quot;pytorch_model.bin&quot;</span>, map_location=<span class="hljs-string">&quot;cpu&quot;</span>)
model.load_state_dict(state_dict, strict=<span class="hljs-literal">False</span>)
model.<span class="hljs-built_in">eval</span>()


<span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">im</span>):
    x = torch.tensor(im, dtype=torch.float32).unsqueeze(<span class="hljs-number">0</span>).unsqueeze(<span class="hljs-number">0</span>) / <span class="hljs-number">255.0</span>
    <span class="hljs-keyword">with</span> torch.no_grad():
        out = model(x)
    probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
    values, indices = torch.topk(probabilities, <span class="hljs-number">5</span>)
    <span class="hljs-keyword">return</span> {LABELS[i]: v.item() <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(indices, values)}`}}),me=new ro({props:{code:`interface = gr.Interface(
    predict,
    inputs="sketchpad",
    outputs="label",
    theme="huggingface",
    title="Sketch Recognition",
    description="Who wants to play Pictionary? Draw a common object like a shovel or a laptop, and the algorithm will guess in real time!",
    article="<p style='text-align: center'>Sketch Recognition | Demo Model</p>",
    live=True,
)
interface.launch(share=True)`,highlighted:`interface = gr.Interface(
    predict,
    inputs=<span class="hljs-string">&quot;sketchpad&quot;</span>,
    outputs=<span class="hljs-string">&quot;label&quot;</span>,
    theme=<span class="hljs-string">&quot;huggingface&quot;</span>,
    title=<span class="hljs-string">&quot;Sketch Recognition&quot;</span>,
    description=<span class="hljs-string">&quot;Who wants to play Pictionary? Draw a common object like a shovel or a laptop, and the algorithm will guess in real time!&quot;</span>,
    article=<span class="hljs-string">&quot;&lt;p style=&#x27;text-align: center&#x27;&gt;Sketch Recognition | Demo Model&lt;/p&gt;&quot;</span>,
    live=<span class="hljs-literal">True</span>,
)
interface.launch(share=<span class="hljs-literal">True</span>)`}}),{c(){C=n("meta"),vt=p(),D=n("h1"),R=n("a"),xe=n("span"),k(Z.$$.fragment),lo=p(),je=n("span"),io=a("Sharing demos with others"),bt=p(),k(ee.$$.fragment),kt=p(),q=n("p"),co=a(`Now that you\u2019ve built a demo, you\u2019ll probably want to share it with others. Gradio demos
can be shared in two ways: using a `),qe=n("strong"),Se=n("em"),ho=a("temporary share link"),po=a(" or "),Te=n("strong"),Pe=n("em"),uo=a("permanent hosting on Spaces"),mo=a("."),_t=p(),fe=n("p"),fo=a("We\u2019ll cover both of these approaches shortly. But before you share your demo, you may want to polish it up \u{1F485}."),Et=p(),I=n("h3"),N=n("a"),Ce=n("span"),k(te.$$.fragment),go=p(),De=n("span"),yo=a("Polishing your Gradio demo:"),$t=p(),A=n("div"),oe=n("img"),wo=p(),ae=n("img"),xt=p(),G=n("p"),vo=a("To add additional content to your demo, the "),Ie=n("code"),bo=a("Interface"),ko=a(" class supports some optional parameters:"),jt=p(),f=n("ul"),H=n("li"),Ae=n("code"),_o=a("title"),Eo=a(": you can give a title to your demo, which appears "),Le=n("em"),$o=a("above"),xo=a(" the input and output components."),jo=p(),ge=n("li"),Me=n("code"),qo=a("description"),So=a(": you can give a description (in text, Markdown, or HTML) for the interface, which appears above the input and output components and below the title."),To=p(),F=n("li"),Oe=n("code"),Po=a("article"),Co=a(": you can also write an expanded article (in text, Markdown, or HTML) explaining the interface. If provided, it appears "),Re=n("em"),Do=a("below"),Io=a(" the input and output components."),Ao=p(),d=n("li"),Ne=n("code"),Lo=a("theme"),Mo=a(": don\u2019t like the default colors? Set the theme to use one of "),Ge=n("code"),Oo=a("default"),Ro=a(", "),He=n("code"),No=a("huggingface"),Go=a(", "),Fe=n("code"),Ho=a("grass"),Fo=a(", "),Ue=n("code"),Uo=a("peach"),Wo=a(". You can also add the "),We=n("code"),Bo=a("dark-"),Xo=a(" prefix, e.g. "),Be=n("code"),zo=a("dark-peach"),Yo=a(" for dark theme (or just "),Xe=n("code"),Qo=a("dark"),Ko=a(" for the default dark theme)."),Vo=p(),U=n("li"),ze=n("code"),Jo=a("examples"),Zo=a(": to make your demo "),Ye=n("em"),ea=a("way easier to use"),ta=a(", you can provide some example inputs for the function. These appear below the UI components and can be used to populate the interface. These should be provided as a nested list, in which the outer list consists of samples and each inner list consists of an input corresponding to each input component."),oa=p(),W=n("li"),Qe=n("code"),aa=a("live"),sa=a(": if you want to make your demo \u201Clive\u201D, meaning that your model reruns every time the input changes, you can set "),Ke=n("code"),na=a("live=True"),ra=a(`. This makes sense to use with quick models (we\u2019ll see an example at the end of this section)
Using the options above, we end up with a more complete interface. Run the code below so you can chat with Rick and Morty:`),qt=p(),k(se.$$.fragment),St=p(),ye=n("p"),la=a("Using the options above, we end up with a more complete interface. Try the interface below:"),Tt=p(),g=n("iframe"),Pt=p(),L=n("h3"),B=n("a"),Ve=n("span"),k(ne.$$.fragment),ia=p(),Je=n("span"),ca=a("Sharing your demo with temporary links"),Ct=a(`

Now that we have a working demo of our machine learning model, let's learn how to easily share a link to our interface.
Interfaces can be easily shared publicly by setting \`share=True\` in the \`launch()\` method:

	`),k(re.$$.fragment),Dt=p(),X=n("p"),ha=a("This generates a public, shareable link that you can send to anybody! When you send this link, the user on the other side can try out the model in their browser for up to 72 hours. Because the processing happens on your device (as long as your device stays on!), you don\u2019t have to worry about packaging any dependencies. If you\u2019re working out of a Google Colab notebook, a share link is always automatically created. It usually looks something like this: "),Ze=n("strong"),pa=a("XXXXX.gradio.app"),ua=a(". Although the link is served through a Gradio link, we are only a proxy for your local server, and do not store any data sent through the interfaces."),It=p(),z=n("p"),da=a("Keep in mind, however, that these links are publicly accessible, meaning that anyone can use your model for prediction! Therefore, make sure not to expose any sensitive information through the functions you write, or allow any critical changes to occur on your device. If you set "),et=n("code"),ma=a("share=False"),fa=a(" (the default), only a local link is created."),At=p(),M=n("h3"),Y=n("a"),tt=n("span"),k(le.$$.fragment),ga=p(),ot=n("span"),ya=a("Hosting your demo on Hugging Face Spaces"),Lt=p(),we=n("p"),wa=a("A share link that you can pass around to collegues is cool, but how can you permanently host your demo and have it exist in its own \u201Cspace\u201D on the internet?"),Mt=p(),w=n("p"),va=a("Hugging Face Spaces provides the infrastructure to permanently host your Gradio model on the internet, "),at=n("strong"),ba=a("for free"),ka=a(`! Spaces allows you to create and push to a (public or private) repo,
where your Gradio
interface code will exist in an `),st=n("code"),_a=a("app.py"),Ea=a(" file. "),ie=n("a"),$a=a("Read a step-by-step tutorial"),xa=a(" to get started, or watch an example video below."),Ot=p(),k(ce.$$.fragment),Rt=p(),O=n("h2"),Q=n("a"),nt=n("span"),k(he.$$.fragment),ja=p(),rt=n("span"),qa=a("\u270F\uFE0F Let's apply it!"),Nt=p(),S=n("p"),Sa=a("Using what we just learned in the sections so far, let\u2019s create the sketch recognition demo we saw in "),ve=n("a"),Ta=a("section one of this chapter"),Pa=a(". Let\u2019s add some customization to our interface and set "),lt=n("code"),Ca=a("share=True"),Da=a(" to create a public link we can pass around."),Gt=p(),v=n("p"),Ia=a("We can load the labels from "),pe=n("a"),Aa=a("class_names.txt"),La=a(" and load the pre-trained pytorch model from "),ue=n("a"),Ma=a("pytorch_model.bin"),Oa=a(". Download these files by following the link and clicking download on the top left corner of the file preview. Let\u2019s take a look at the code below to see how we use these files to load our model and create a "),it=n("code"),Ra=a("predict()"),Na=a(" function:"),Ht=p(),k(de.$$.fragment),Ft=p(),K=n("p"),Ga=a("Now that we have a "),ct=n("code"),Ha=a("predict()"),Fa=a(" function. The next step is to define and launch our gradio interface:"),Ut=p(),k(me.$$.fragment),Wt=p(),y=n("iframe"),Bt=p(),T=n("p"),Ua=a("Notice the "),ht=n("code"),Wa=a("live=True"),Ba=a(" parameter in "),pt=n("code"),Xa=a("Interface"),za=a(`, which means that the sketch demo makes
a prediction every time someone draws on the sketchpad (no submit button!).`),Xt=p(),P=n("p"),Ya=a("Furthermore, we also set the "),ut=n("code"),Qa=a("share=True"),Ka=a(" argument in the "),dt=n("code"),Va=a("launch()"),Ja=a(` method.
This will create a public link that you can
send to anyone! When you send this link, the user on the other side can try out the
sketch recognition model. To reiterate, you could also host the model on Hugging Face Spaces,
which is how we are able to embed the demo above.`),zt=p(),be=n("p"),Za=a("Next up, we\u2019ll cover other ways that Gradio can be used with the Hugging Face ecosystem!"),this.h()},l(e){const i=un('[data-svelte="svelte-1phssyn"]',document.head);C=r(i,"META",{name:!0,content:!0}),i.forEach(o),vt=u(e),D=r(e,"H1",{class:!0});var Qt=l(D);R=r(Qt,"A",{id:!0,class:!0,href:!0});var rs=l(R);xe=r(rs,"SPAN",{});var ls=l(xe);_(Z.$$.fragment,ls),ls.forEach(o),rs.forEach(o),lo=u(Qt),je=r(Qt,"SPAN",{});var is=l(je);io=s(is,"Sharing demos with others"),is.forEach(o),Qt.forEach(o),bt=u(e),_(ee.$$.fragment,e),kt=u(e),q=r(e,"P",{});var ke=l(q);co=s(ke,`Now that you\u2019ve built a demo, you\u2019ll probably want to share it with others. Gradio demos
can be shared in two ways: using a `),qe=r(ke,"STRONG",{});var cs=l(qe);Se=r(cs,"EM",{});var hs=l(Se);ho=s(hs,"temporary share link"),hs.forEach(o),cs.forEach(o),po=s(ke," or "),Te=r(ke,"STRONG",{});var ps=l(Te);Pe=r(ps,"EM",{});var us=l(Pe);uo=s(us,"permanent hosting on Spaces"),us.forEach(o),ps.forEach(o),mo=s(ke,"."),ke.forEach(o),_t=u(e),fe=r(e,"P",{});var ds=l(fe);fo=s(ds,"We\u2019ll cover both of these approaches shortly. But before you share your demo, you may want to polish it up \u{1F485}."),ds.forEach(o),Et=u(e),I=r(e,"H3",{class:!0});var Kt=l(I);N=r(Kt,"A",{id:!0,class:!0,href:!0});var ms=l(N);Ce=r(ms,"SPAN",{});var fs=l(Ce);_(te.$$.fragment,fs),fs.forEach(o),ms.forEach(o),go=u(Kt),De=r(Kt,"SPAN",{});var gs=l(De);yo=s(gs,"Polishing your Gradio demo:"),gs.forEach(o),Kt.forEach(o),$t=u(e),A=r(e,"DIV",{class:!0});var Vt=l(A);oe=r(Vt,"IMG",{class:!0,src:!0,alt:!0}),wo=u(Vt),ae=r(Vt,"IMG",{class:!0,src:!0,alt:!0}),Vt.forEach(o),xt=u(e),G=r(e,"P",{});var Jt=l(G);vo=s(Jt,"To add additional content to your demo, the "),Ie=r(Jt,"CODE",{});var ys=l(Ie);bo=s(ys,"Interface"),ys.forEach(o),ko=s(Jt," class supports some optional parameters:"),Jt.forEach(o),jt=u(e),f=r(e,"UL",{});var b=l(f);H=r(b,"LI",{});var mt=l(H);Ae=r(mt,"CODE",{});var ws=l(Ae);_o=s(ws,"title"),ws.forEach(o),Eo=s(mt,": you can give a title to your demo, which appears "),Le=r(mt,"EM",{});var vs=l(Le);$o=s(vs,"above"),vs.forEach(o),xo=s(mt," the input and output components."),mt.forEach(o),jo=u(b),ge=r(b,"LI",{});var es=l(ge);Me=r(es,"CODE",{});var bs=l(Me);qo=s(bs,"description"),bs.forEach(o),So=s(es,": you can give a description (in text, Markdown, or HTML) for the interface, which appears above the input and output components and below the title."),es.forEach(o),To=u(b),F=r(b,"LI",{});var ft=l(F);Oe=r(ft,"CODE",{});var ks=l(Oe);Po=s(ks,"article"),ks.forEach(o),Co=s(ft,": you can also write an expanded article (in text, Markdown, or HTML) explaining the interface. If provided, it appears "),Re=r(ft,"EM",{});var _s=l(Re);Do=s(_s,"below"),_s.forEach(o),Io=s(ft," the input and output components."),ft.forEach(o),Ao=u(b),d=r(b,"LI",{});var m=l(d);Ne=r(m,"CODE",{});var Es=l(Ne);Lo=s(Es,"theme"),Es.forEach(o),Mo=s(m,": don\u2019t like the default colors? Set the theme to use one of "),Ge=r(m,"CODE",{});var $s=l(Ge);Oo=s($s,"default"),$s.forEach(o),Ro=s(m,", "),He=r(m,"CODE",{});var xs=l(He);No=s(xs,"huggingface"),xs.forEach(o),Go=s(m,", "),Fe=r(m,"CODE",{});var js=l(Fe);Ho=s(js,"grass"),js.forEach(o),Fo=s(m,", "),Ue=r(m,"CODE",{});var qs=l(Ue);Uo=s(qs,"peach"),qs.forEach(o),Wo=s(m,". You can also add the "),We=r(m,"CODE",{});var Ss=l(We);Bo=s(Ss,"dark-"),Ss.forEach(o),Xo=s(m," prefix, e.g. "),Be=r(m,"CODE",{});var Ts=l(Be);zo=s(Ts,"dark-peach"),Ts.forEach(o),Yo=s(m," for dark theme (or just "),Xe=r(m,"CODE",{});var Ps=l(Xe);Qo=s(Ps,"dark"),Ps.forEach(o),Ko=s(m," for the default dark theme)."),m.forEach(o),Vo=u(b),U=r(b,"LI",{});var gt=l(U);ze=r(gt,"CODE",{});var Cs=l(ze);Jo=s(Cs,"examples"),Cs.forEach(o),Zo=s(gt,": to make your demo "),Ye=r(gt,"EM",{});var Ds=l(Ye);ea=s(Ds,"way easier to use"),Ds.forEach(o),ta=s(gt,", you can provide some example inputs for the function. These appear below the UI components and can be used to populate the interface. These should be provided as a nested list, in which the outer list consists of samples and each inner list consists of an input corresponding to each input component."),gt.forEach(o),oa=u(b),W=r(b,"LI",{});var yt=l(W);Qe=r(yt,"CODE",{});var Is=l(Qe);aa=s(Is,"live"),Is.forEach(o),sa=s(yt,": if you want to make your demo \u201Clive\u201D, meaning that your model reruns every time the input changes, you can set "),Ke=r(yt,"CODE",{});var As=l(Ke);na=s(As,"live=True"),As.forEach(o),ra=s(yt,`. This makes sense to use with quick models (we\u2019ll see an example at the end of this section)
Using the options above, we end up with a more complete interface. Run the code below so you can chat with Rick and Morty:`),yt.forEach(o),b.forEach(o),qt=u(e),_(se.$$.fragment,e),St=u(e),ye=r(e,"P",{});var Ls=l(ye);la=s(Ls,"Using the options above, we end up with a more complete interface. Try the interface below:"),Ls.forEach(o),Tt=u(e),g=r(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),l(g).forEach(o),Pt=u(e),L=r(e,"H3",{class:!0});var Zt=l(L);B=r(Zt,"A",{id:!0,class:!0,href:!0});var Ms=l(B);Ve=r(Ms,"SPAN",{});var Os=l(Ve);_(ne.$$.fragment,Os),Os.forEach(o),Ms.forEach(o),ia=u(Zt),Je=r(Zt,"SPAN",{});var Rs=l(Je);ca=s(Rs,"Sharing your demo with temporary links"),Rs.forEach(o),Zt.forEach(o),Ct=s(e,`

Now that we have a working demo of our machine learning model, let's learn how to easily share a link to our interface.
Interfaces can be easily shared publicly by setting \`share=True\` in the \`launch()\` method:

	`),_(re.$$.fragment,e),Dt=u(e),X=r(e,"P",{});var eo=l(X);ha=s(eo,"This generates a public, shareable link that you can send to anybody! When you send this link, the user on the other side can try out the model in their browser for up to 72 hours. Because the processing happens on your device (as long as your device stays on!), you don\u2019t have to worry about packaging any dependencies. If you\u2019re working out of a Google Colab notebook, a share link is always automatically created. It usually looks something like this: "),Ze=r(eo,"STRONG",{});var Ns=l(Ze);pa=s(Ns,"XXXXX.gradio.app"),Ns.forEach(o),ua=s(eo,". Although the link is served through a Gradio link, we are only a proxy for your local server, and do not store any data sent through the interfaces."),eo.forEach(o),It=u(e),z=r(e,"P",{});var to=l(z);da=s(to,"Keep in mind, however, that these links are publicly accessible, meaning that anyone can use your model for prediction! Therefore, make sure not to expose any sensitive information through the functions you write, or allow any critical changes to occur on your device. If you set "),et=r(to,"CODE",{});var Gs=l(et);ma=s(Gs,"share=False"),Gs.forEach(o),fa=s(to," (the default), only a local link is created."),to.forEach(o),At=u(e),M=r(e,"H3",{class:!0});var oo=l(M);Y=r(oo,"A",{id:!0,class:!0,href:!0});var Hs=l(Y);tt=r(Hs,"SPAN",{});var Fs=l(tt);_(le.$$.fragment,Fs),Fs.forEach(o),Hs.forEach(o),ga=u(oo),ot=r(oo,"SPAN",{});var Us=l(ot);ya=s(Us,"Hosting your demo on Hugging Face Spaces"),Us.forEach(o),oo.forEach(o),Lt=u(e),we=r(e,"P",{});var Ws=l(we);wa=s(Ws,"A share link that you can pass around to collegues is cool, but how can you permanently host your demo and have it exist in its own \u201Cspace\u201D on the internet?"),Ws.forEach(o),Mt=u(e),w=r(e,"P",{});var V=l(w);va=s(V,"Hugging Face Spaces provides the infrastructure to permanently host your Gradio model on the internet, "),at=r(V,"STRONG",{});var Bs=l(at);ba=s(Bs,"for free"),Bs.forEach(o),ka=s(V,`! Spaces allows you to create and push to a (public or private) repo,
where your Gradio
interface code will exist in an `),st=r(V,"CODE",{});var Xs=l(st);_a=s(Xs,"app.py"),Xs.forEach(o),Ea=s(V," file. "),ie=r(V,"A",{href:!0,rel:!0});var zs=l(ie);$a=s(zs,"Read a step-by-step tutorial"),zs.forEach(o),xa=s(V," to get started, or watch an example video below."),V.forEach(o),Ot=u(e),_(ce.$$.fragment,e),Rt=u(e),O=r(e,"H2",{class:!0});var ao=l(O);Q=r(ao,"A",{id:!0,class:!0,href:!0});var Ys=l(Q);nt=r(Ys,"SPAN",{});var Qs=l(nt);_(he.$$.fragment,Qs),Qs.forEach(o),Ys.forEach(o),ja=u(ao),rt=r(ao,"SPAN",{});var Ks=l(rt);qa=s(Ks,"\u270F\uFE0F Let's apply it!"),Ks.forEach(o),ao.forEach(o),Nt=u(e),S=r(e,"P",{});var _e=l(S);Sa=s(_e,"Using what we just learned in the sections so far, let\u2019s create the sketch recognition demo we saw in "),ve=r(_e,"A",{href:!0});var Vs=l(ve);Ta=s(Vs,"section one of this chapter"),Vs.forEach(o),Pa=s(_e,". Let\u2019s add some customization to our interface and set "),lt=r(_e,"CODE",{});var Js=l(lt);Ca=s(Js,"share=True"),Js.forEach(o),Da=s(_e," to create a public link we can pass around."),_e.forEach(o),Gt=u(e),v=r(e,"P",{});var J=l(v);Ia=s(J,"We can load the labels from "),pe=r(J,"A",{href:!0,rel:!0});var Zs=l(pe);Aa=s(Zs,"class_names.txt"),Zs.forEach(o),La=s(J," and load the pre-trained pytorch model from "),ue=r(J,"A",{href:!0,rel:!0});var en=l(ue);Ma=s(en,"pytorch_model.bin"),en.forEach(o),Oa=s(J,". Download these files by following the link and clicking download on the top left corner of the file preview. Let\u2019s take a look at the code below to see how we use these files to load our model and create a "),it=r(J,"CODE",{});var tn=l(it);Ra=s(tn,"predict()"),tn.forEach(o),Na=s(J," function:"),J.forEach(o),Ht=u(e),_(de.$$.fragment,e),Ft=u(e),K=r(e,"P",{});var so=l(K);Ga=s(so,"Now that we have a "),ct=r(so,"CODE",{});var on=l(ct);Ha=s(on,"predict()"),on.forEach(o),Fa=s(so," function. The next step is to define and launch our gradio interface:"),so.forEach(o),Ut=u(e),_(me.$$.fragment,e),Wt=u(e),y=r(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),l(y).forEach(o),Bt=u(e),T=r(e,"P",{});var Ee=l(T);Ua=s(Ee,"Notice the "),ht=r(Ee,"CODE",{});var an=l(ht);Wa=s(an,"live=True"),an.forEach(o),Ba=s(Ee," parameter in "),pt=r(Ee,"CODE",{});var sn=l(pt);Xa=s(sn,"Interface"),sn.forEach(o),za=s(Ee,`, which means that the sketch demo makes
a prediction every time someone draws on the sketchpad (no submit button!).`),Ee.forEach(o),Xt=u(e),P=r(e,"P",{});var $e=l(P);Ya=s($e,"Furthermore, we also set the "),ut=r($e,"CODE",{});var nn=l(ut);Qa=s(nn,"share=True"),nn.forEach(o),Ka=s($e," argument in the "),dt=r($e,"CODE",{});var rn=l(dt);Va=s(rn,"launch()"),rn.forEach(o),Ja=s($e,` method.
This will create a public link that you can
send to anyone! When you send this link, the user on the other side can try out the
sketch recognition model. To reiterate, you could also host the model on Hugging Face Spaces,
which is how we are able to embed the demo above.`),$e.forEach(o),zt=u(e),be=r(e,"P",{});var ln=l(be);Za=s(ln,"Next up, we\u2019ll cover other ways that Gradio can be used with the Hugging Face ecosystem!"),ln.forEach(o),this.h()},h(){h(C,"name","hf:doc:metadata"),h(C,"content",JSON.stringify(wn)),h(R,"id","sharing-demos-with-others"),h(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(R,"href","#sharing-demos-with-others"),h(D,"class","relative group"),h(N,"id","polishing-your-gradio-demo"),h(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(N,"href","#polishing-your-gradio-demo"),h(I,"class","relative group"),h(oe,"class","block dark:hidden"),no(oe.src,os="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter9/gradio-demo-overview.png")||h(oe,"src",os),h(oe,"alt","Overview of a gradio interface"),h(ae,"class","hidden dark:block"),no(ae.src,as="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter9/gradio-demo-overview-dark.png")||h(ae,"src",as),h(ae,"alt","Overview of a gradio interface"),h(A,"class","flex justify-center"),no(g.src,ss="https://hf.space/gradioiframe/course-demos/Rick_and_Morty_QA/+")||h(g,"src",ss),h(g,"frameborder","0"),h(g,"height","800"),h(g,"title","Gradio app"),h(g,"class","container p-0 flex-grow space-iframe"),h(g,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),h(g,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),h(B,"id","sharing-your-demo-with-temporary-links"),h(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(B,"href","#sharing-your-demo-with-temporary-links"),h(L,"class","relative group"),h(Y,"id","hosting-your-demo-on-hugging-face-spaces"),h(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Y,"href","#hosting-your-demo-on-hugging-face-spaces"),h(M,"class","relative group"),h(ie,"href","https://huggingface.co/blog/gradio-spaces"),h(ie,"rel","nofollow"),h(Q,"id","lets-apply-it"),h(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Q,"href","#lets-apply-it"),h(O,"class","relative group"),h(ve,"href","/course/chapter9/1"),h(pe,"href","https://huggingface.co/spaces/dawood/Sketch-Recognition/blob/main/class_names.txt"),h(pe,"rel","nofollow"),h(ue,"href","https://huggingface.co/spaces/dawood/Sketch-Recognition/blob/main/pytorch_model.bin"),h(ue,"rel","nofollow"),no(y.src,ns="https://hf.space/gradioiframe/course-demos/Sketch-Recognition/+")||h(y,"src",ns),h(y,"frameborder","0"),h(y,"height","650"),h(y,"title","Gradio app"),h(y,"class","container p-0 flex-grow space-iframe"),h(y,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),h(y,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads")},m(e,i){t(document.head,C),c(e,vt,i),c(e,D,i),t(D,R),t(R,xe),E(Z,xe,null),t(D,lo),t(D,je),t(je,io),c(e,bt,i),E(ee,e,i),c(e,kt,i),c(e,q,i),t(q,co),t(q,qe),t(qe,Se),t(Se,ho),t(q,po),t(q,Te),t(Te,Pe),t(Pe,uo),t(q,mo),c(e,_t,i),c(e,fe,i),t(fe,fo),c(e,Et,i),c(e,I,i),t(I,N),t(N,Ce),E(te,Ce,null),t(I,go),t(I,De),t(De,yo),c(e,$t,i),c(e,A,i),t(A,oe),t(A,wo),t(A,ae),c(e,xt,i),c(e,G,i),t(G,vo),t(G,Ie),t(Ie,bo),t(G,ko),c(e,jt,i),c(e,f,i),t(f,H),t(H,Ae),t(Ae,_o),t(H,Eo),t(H,Le),t(Le,$o),t(H,xo),t(f,jo),t(f,ge),t(ge,Me),t(Me,qo),t(ge,So),t(f,To),t(f,F),t(F,Oe),t(Oe,Po),t(F,Co),t(F,Re),t(Re,Do),t(F,Io),t(f,Ao),t(f,d),t(d,Ne),t(Ne,Lo),t(d,Mo),t(d,Ge),t(Ge,Oo),t(d,Ro),t(d,He),t(He,No),t(d,Go),t(d,Fe),t(Fe,Ho),t(d,Fo),t(d,Ue),t(Ue,Uo),t(d,Wo),t(d,We),t(We,Bo),t(d,Xo),t(d,Be),t(Be,zo),t(d,Yo),t(d,Xe),t(Xe,Qo),t(d,Ko),t(f,Vo),t(f,U),t(U,ze),t(ze,Jo),t(U,Zo),t(U,Ye),t(Ye,ea),t(U,ta),t(f,oa),t(f,W),t(W,Qe),t(Qe,aa),t(W,sa),t(W,Ke),t(Ke,na),t(W,ra),c(e,qt,i),E(se,e,i),c(e,St,i),c(e,ye,i),t(ye,la),c(e,Tt,i),c(e,g,i),c(e,Pt,i),c(e,L,i),t(L,B),t(B,Ve),E(ne,Ve,null),t(L,ia),t(L,Je),t(Je,ca),c(e,Ct,i),E(re,e,i),c(e,Dt,i),c(e,X,i),t(X,ha),t(X,Ze),t(Ze,pa),t(X,ua),c(e,It,i),c(e,z,i),t(z,da),t(z,et),t(et,ma),t(z,fa),c(e,At,i),c(e,M,i),t(M,Y),t(Y,tt),E(le,tt,null),t(M,ga),t(M,ot),t(ot,ya),c(e,Lt,i),c(e,we,i),t(we,wa),c(e,Mt,i),c(e,w,i),t(w,va),t(w,at),t(at,ba),t(w,ka),t(w,st),t(st,_a),t(w,Ea),t(w,ie),t(ie,$a),t(w,xa),c(e,Ot,i),E(ce,e,i),c(e,Rt,i),c(e,O,i),t(O,Q),t(Q,nt),E(he,nt,null),t(O,ja),t(O,rt),t(rt,qa),c(e,Nt,i),c(e,S,i),t(S,Sa),t(S,ve),t(ve,Ta),t(S,Pa),t(S,lt),t(lt,Ca),t(S,Da),c(e,Gt,i),c(e,v,i),t(v,Ia),t(v,pe),t(pe,Aa),t(v,La),t(v,ue),t(ue,Ma),t(v,Oa),t(v,it),t(it,Ra),t(v,Na),c(e,Ht,i),E(de,e,i),c(e,Ft,i),c(e,K,i),t(K,Ga),t(K,ct),t(ct,Ha),t(K,Fa),c(e,Ut,i),E(me,e,i),c(e,Wt,i),c(e,y,i),c(e,Bt,i),c(e,T,i),t(T,Ua),t(T,ht),t(ht,Wa),t(T,Ba),t(T,pt),t(pt,Xa),t(T,za),c(e,Xt,i),c(e,P,i),t(P,Ya),t(P,ut),t(ut,Qa),t(P,Ka),t(P,dt),t(dt,Va),t(P,Ja),c(e,zt,i),c(e,be,i),t(be,Za),Yt=!0},p:dn,i(e){Yt||($(Z.$$.fragment,e),$(ee.$$.fragment,e),$(te.$$.fragment,e),$(se.$$.fragment,e),$(ne.$$.fragment,e),$(re.$$.fragment,e),$(le.$$.fragment,e),$(ce.$$.fragment,e),$(he.$$.fragment,e),$(de.$$.fragment,e),$(me.$$.fragment,e),Yt=!0)},o(e){x(Z.$$.fragment,e),x(ee.$$.fragment,e),x(te.$$.fragment,e),x(se.$$.fragment,e),x(ne.$$.fragment,e),x(re.$$.fragment,e),x(le.$$.fragment,e),x(ce.$$.fragment,e),x(he.$$.fragment,e),x(de.$$.fragment,e),x(me.$$.fragment,e),Yt=!1},d(e){o(C),e&&o(vt),e&&o(D),j(Z),e&&o(bt),j(ee,e),e&&o(kt),e&&o(q),e&&o(_t),e&&o(fe),e&&o(Et),e&&o(I),j(te),e&&o($t),e&&o(A),e&&o(xt),e&&o(G),e&&o(jt),e&&o(f),e&&o(qt),j(se,e),e&&o(St),e&&o(ye),e&&o(Tt),e&&o(g),e&&o(Pt),e&&o(L),j(ne),e&&o(Ct),j(re,e),e&&o(Dt),e&&o(X),e&&o(It),e&&o(z),e&&o(At),e&&o(M),j(le),e&&o(Lt),e&&o(we),e&&o(Mt),e&&o(w),e&&o(Ot),j(ce,e),e&&o(Rt),e&&o(O),j(he),e&&o(Nt),e&&o(S),e&&o(Gt),e&&o(v),e&&o(Ht),j(de,e),e&&o(Ft),e&&o(K),e&&o(Ut),j(me,e),e&&o(Wt),e&&o(y),e&&o(Bt),e&&o(T),e&&o(Xt),e&&o(P),e&&o(zt),e&&o(be)}}}const wn={local:"sharing-demos-with-others",sections:[{local:null,sections:[{local:"polishing-your-gradio-demo",title:"Polishing your Gradio demo:"},{local:"sharing-your-demo-with-temporary-links",title:"Sharing your demo with temporary links"},{local:"hosting-your-demo-on-hugging-face-spaces",title:"Hosting your demo on Hugging Face Spaces"}],title:null},{local:"lets-apply-it",title:"\u270F\uFE0F Let's apply it!"}],title:"Sharing demos with others"};function vn(ts){return mn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xn extends cn{constructor(C){super();hn(this,C,vn,yn,pn,{})}}export{xn as default,wn as metadata};
