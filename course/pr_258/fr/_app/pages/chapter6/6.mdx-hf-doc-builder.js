import{S as Gi,i as Ji,s as Qi,e as p,k as u,w as h,t as n,U as Yi,M as Xi,c as r,d as a,m as c,a as o,x as d,h as t,V as Zi,b as B,G as e,g as i,y as f,q as j,o as g,B as b,v as su}from"../../chunks/vendor-hf-doc-builder.js";import{T as en}from"../../chunks/Tip-hf-doc-builder.js";import{Y as eu}from"../../chunks/Youtube-hf-doc-builder.js";import{I as Bt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as $}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as au}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";function nu(F){let m,E,x,_,w;return{c(){m=p("p"),E=n("\u{1F4A1} Cette section couvre le "),x=p("i"),_=n("WordPiece"),w=n(" en profondeur, allant jusqu\u2019\xE0 montrer une impl\xE9mentation compl\xE8te. Vous pouvez passer directement \xE0 la fin si vous souhaitez simplement avoir un aper\xE7u g\xE9n\xE9ral de l\u2019algorithme de tok\xE9nisation.")},l(v){m=r(v,"P",{});var q=o(m);E=t(q,"\u{1F4A1} Cette section couvre le "),x=r(q,"I",{});var y=o(x);_=t(y,"WordPiece"),y.forEach(a),w=t(q," en profondeur, allant jusqu\u2019\xE0 montrer une impl\xE9mentation compl\xE8te. Vous pouvez passer directement \xE0 la fin si vous souhaitez simplement avoir un aper\xE7u g\xE9n\xE9ral de l\u2019algorithme de tok\xE9nisation."),q.forEach(a)},m(v,q){i(v,m,q),e(m,E),e(m,x),e(x,_),e(m,w)},d(v){v&&a(m)}}}function tu(F){let m,E,x,_,w;return{c(){m=p("p"),E=n("\u26A0\uFE0F Google n\u2019a jamais mis en ligne son impl\xE9mentation de l\u2019algorithme d\u2019entra\xEEnement du "),x=p("i"),_=n("WordPiece"),w=n(". Ce qui suit est donc notre meilleure estimation bas\xE9e sur la litt\xE9rature publi\xE9e. Il se peut qu\u2019elle ne soit pas exacte \xE0 100 %.")},l(v){m=r(v,"P",{});var q=o(m);E=t(q,"\u26A0\uFE0F Google n\u2019a jamais mis en ligne son impl\xE9mentation de l\u2019algorithme d\u2019entra\xEEnement du "),x=r(q,"I",{});var y=o(x);_=t(y,"WordPiece"),y.forEach(a),w=t(q,". Ce qui suit est donc notre meilleure estimation bas\xE9e sur la litt\xE9rature publi\xE9e. Il se peut qu\u2019elle ne soit pas exacte \xE0 100 %."),q.forEach(a)},m(v,q){i(v,m,q),e(m,E),e(m,x),e(x,_),e(m,w)},d(v){v&&a(m)}}}function lu(F){let m,E,x,_,w;return{c(){m=p("p"),E=n("\u270F\uFE0F "),x=p("strong"),_=n("A votre tour !"),w=n(" Quelle sera la prochaine r\xE8gle de fusion ?")},l(v){m=r(v,"P",{});var q=o(m);E=t(q,"\u270F\uFE0F "),x=r(q,"STRONG",{});var y=o(x);_=t(y,"A votre tour !"),y.forEach(a),w=t(q," Quelle sera la prochaine r\xE8gle de fusion ?"),q.forEach(a)},m(v,q){i(v,m,q),e(m,E),e(m,x),e(x,_),e(m,w)},d(v){v&&a(m)}}}function pu(F){let m,E,x,_,w,v,q,y;return{c(){m=p("p"),E=n("\u270F\uFE0F "),x=p("strong"),_=n("A votre tour !"),w=n(" Comment le mot "),v=p("code"),q=n('"pugs"'),y=n(" sera-t-il tokenis\xE9 ?")},l(S){m=r(S,"P",{});var O=o(m);E=t(O,"\u270F\uFE0F "),x=r(O,"STRONG",{});var G=o(x);_=t(G,"A votre tour !"),G.forEach(a),w=t(O," Comment le mot "),v=r(O,"CODE",{});var U=o(v);q=t(U,'"pugs"'),U.forEach(a),y=t(O," sera-t-il tokenis\xE9 ?"),O.forEach(a)},m(S,O){i(S,m,O),e(m,E),e(m,x),e(x,_),e(m,w),e(m,v),e(v,q),e(m,y)},d(S){S&&a(m)}}}function ru(F){let m,E,x,_,w,v,q,y,S,O,G;return{c(){m=p("p"),E=n("\u{1F4A1} Utiliser "),x=p("code"),_=n("train_new_from_iterator()"),w=n(" sur le m\xEAme corpus ne donnera pas exactement le m\xEAme vocabulaire. C\u2019est parce que la biblioth\xE8que \u{1F917} "),v=p("em"),q=n("Tokenizers"),y=n(" n\u2019impl\xE9mente pas "),S=p("em"),O=n("WordPiece"),G=n(" pour l\u2019entra\xEEnement (puisque nous ne sommes pas compl\xE8tement s\xFBrs de son fonctionnement interne), mais utilise le BPE \xE0 la place.")},l(U){m=r(U,"P",{});var T=o(m);E=t(T,"\u{1F4A1} Utiliser "),x=r(T,"CODE",{});var $s=o(x);_=t($s,"train_new_from_iterator()"),$s.forEach(a),w=t(T," sur le m\xEAme corpus ne donnera pas exactement le m\xEAme vocabulaire. C\u2019est parce que la biblioth\xE8que \u{1F917} "),v=r(T,"EM",{});var L=o(v);q=t(L,"Tokenizers"),L.forEach(a),y=t(T," n\u2019impl\xE9mente pas "),S=r(T,"EM",{});var ls=o(S);O=t(ls,"WordPiece"),ls.forEach(a),G=t(T," pour l\u2019entra\xEEnement (puisque nous ne sommes pas compl\xE8tement s\xFBrs de son fonctionnement interne), mais utilise le BPE \xE0 la place."),T.forEach(a)},m(U,T){i(U,m,T),e(m,E),e(m,x),e(x,_),e(m,w),e(m,v),e(v,q),e(m,y),e(m,S),e(S,O),e(m,G)},d(U){U&&a(m)}}}function ou(F){let m,E,x,_,w,v,q,y,S,O,G,U,T,$s,L,ls,Ht,St,ze,Wt,Kt,an,_s,nn,ps,tn,as,rs,De,ws,Ut,Oe,Ft,ln,os,pn,W,Lt,Te,Rt,It,Ae,Vt,Gt,Ne,Jt,Qt,Me,Yt,Xt,rn,Es,on,is,Zt,Be,sl,el,un,V,al,He,nl,tl,Se,ll,pl,cn,Vi='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi></mrow><mo>=</mo><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">f</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">q</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">p</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">r</mi></mrow><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">f</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">q</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">t</mi></mrow><mo>\xD7</mo><mrow><mi mathvariant="normal">f</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">q</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi><mi mathvariant="normal">_</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">t</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathrm{score} = (\\mathrm{freq\\_of\\_pair}) / (\\mathrm{freq\\_of\\_first\\_element} \\times \\mathrm{freq\\_of\\_second\\_element})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord"><span class="mord mathrm">score</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">freq_of_pair</span></span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">freq_of_first_element</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord"><span class="mord mathrm">freq_of_second_element</span></span><span class="mclose">)</span></span></span></span></span>',mn,z,rl,We,ol,il,Ke,ul,cl,Ue,ml,hl,Fe,dl,fl,Le,jl,gl,Re,bl,xl,Ie,vl,ql,hn,re,$l,dn,ks,fn,oe,_l,jn,ys,gn,P,wl,Ve,El,kl,Ge,yl,Pl,Je,Cl,zl,Qe,Dl,Ol,Ye,Tl,Al,Xe,Nl,Ml,Ze,Bl,Hl,sa,Sl,Wl,bn,R,Kl,ea,Ul,Fl,aa,Ll,Rl,na,Il,Vl,xn,Ps,vn,J,Gl,ta,Jl,Ql,la,Yl,Xl,qn,Cs,$n,Q,Zl,pa,sp,ep,ra,ap,np,_n,zs,wn,ie,tp,En,us,kn,ns,cs,oa,Ds,lp,ia,pp,yn,k,rp,ua,op,ip,ca,up,cp,ma,mp,hp,ha,dp,fp,da,jp,gp,fa,bp,xp,ja,vp,qp,ga,$p,_p,ba,wp,Ep,Pn,ms,kp,xa,yp,Pp,Cn,C,Cp,va,zp,Dp,qa,Op,Tp,$a,Ap,Np,_a,Mp,Bp,wa,Hp,Sp,Ea,Wp,Kp,ka,Up,Fp,ya,Lp,Rp,zn,A,Ip,Pa,Vp,Gp,Ca,Jp,Qp,za,Yp,Xp,Da,Zp,sr,Oa,er,ar,Ta,nr,tr,Dn,hs,On,ts,ds,Aa,Os,lr,ue,pr,Na,rr,Tn,fs,or,Ma,ir,ur,An,ce,cr,Nn,Ts,Mn,I,mr,Ba,hr,dr,Ha,fr,jr,Sa,gr,br,Bn,As,Hn,me,xr,Sn,Ns,Wn,Ms,Kn,js,vr,Wa,qr,$r,Un,Bs,Fn,Hs,Ln,Y,_r,Ka,wr,Er,Ua,kr,yr,Rn,Ss,In,gs,Pr,Fa,Cr,zr,Vn,Ws,Gn,he,Dr,Jn,Ks,Qn,de,Or,Yn,Us,Xn,Fs,Zn,fe,Tr,st,Ls,et,Rs,at,X,Ar,La,Nr,Mr,Ra,Br,Hr,nt,Is,tt,bs,Sr,Ia,Wr,Kr,lt,Vs,pt,je,Ur,rt,Gs,ot,Js,it,ge,Fr,ut,Qs,ct,be,Lr,mt,Ys,ht,Xs,dt,Z,Rr,Va,Ir,Vr,Ga,Gr,Jr,ft,xs,jt,xe,Qr,gt,Zs,bt,ve,Yr,xt,se,vt,ee,qt,qe,Xr,$t,ae,_t,$e,Zr,wt,ne,Et,te,kt,ss,so,Ja,eo,ao,Qa,no,to,yt;return v=new Bt({}),T=new au({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter6/section6.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter6/section6.ipynb"}]}}),_s=new eu({props:{id:"qpv6ms_t_1A"}}),ps=new en({props:{$$slots:{default:[nu]},$$scope:{ctx:F}}}),ws=new Bt({}),os=new en({props:{warning:!0,$$slots:{default:[tu]},$$scope:{ctx:F}}}),Es=new $({props:{code:"w ##o ##r ##d",highlighted:"w ##o ##r ##d"}}),ks=new $({props:{code:'("hug", 10), ("pug", 5), ("pun", 12), ("bun", 4), ("hugs", 5)',highlighted:'(<span class="hljs-string">&quot;hug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;bun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;hugs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)'}}),ys=new $({props:{code:'("h" "##u" "##g", 10), ("p" "##u" "##g", 5), ("p" "##u" "##n", 12), ("b" "##u" "##n", 4), ("h" "##u" "##g" "##s", 5)',highlighted:'(<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-number">5</span>)'}}),Ps=new $({props:{code:`Vocabulary: ["b", "h", "p", "##g", "##n", "##s", "##u", "##gs"]
Corpus: ("h" "##u" "##g", 10), ("p" "##u" "##g", 5), ("p" "##u" "##n", 12), ("b" "##u" "##n", 4), ("h" "##u" "##gs", 5)`,highlighted:`Vocabulary: [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>]
Corpus: (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-number">5</span>)`}}),Cs=new $({props:{code:`Vocabulary: ["b", "h", "p", "##g", "##n", "##s", "##u", "##gs", "hu"]
Corpus: ("hu" "##g", 10), ("p" "##u" "##g", 5), ("p" "##u" "##n", 12), ("b" "##u" "##n", 4), ("hu" "##gs", 5)`,highlighted:`Vocabulary: [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-string">&quot;hu&quot;</span>]
Corpus: (<span class="hljs-string">&quot;hu&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;hu&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-number">5</span>)`}}),zs=new $({props:{code:`Vocabulary: ["b", "h", "p", "##g", "##n", "##s", "##u", "##gs", "hu", "hug"]
Corpus: ("hug", 10), ("p" "##u" "##g", 5), ("p" "##u" "##n", 12), ("b" "##u" "##n", 4), ("hu" "##gs", 5)`,highlighted:`Vocabulary: [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-string">&quot;hu&quot;</span>, <span class="hljs-string">&quot;hug&quot;</span>]
Corpus: (<span class="hljs-string">&quot;hug&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;hu&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-number">5</span>)`}}),us=new en({props:{$$slots:{default:[lu]},$$scope:{ctx:F}}}),Ds=new Bt({}),hs=new en({props:{$$slots:{default:[pu]},$$scope:{ctx:F}}}),Os=new Bt({}),Ts=new $({props:{code:`corpus = [
    "This is the Hugging Face Course.",
    # C'est le cours d'Hugging Face.
    "This chapter is about tokenization.",
    # This chapter is about tokenization
    "This section shows several tokenizer algorithms.",
    # Cette section pr\xE9sente plusieurs algorithmes de tokenizer.
    "Hopefully, you will be able to understand how they are trained and generate tokens.",
    # Avec un peu de chance, vous serez en mesure de comprendre comment ils sont entra\xEEn\xE9s et g\xE9n\xE8rent des tokens.
]`,highlighted:`corpus = [
    <span class="hljs-string">&quot;This is the Hugging Face Course.&quot;</span>,
    <span class="hljs-comment"># C&#x27;est le cours d&#x27;Hugging Face.</span>
    <span class="hljs-string">&quot;This chapter is about tokenization.&quot;</span>,
    <span class="hljs-comment"># This chapter is about tokenization</span>
    <span class="hljs-string">&quot;This section shows several tokenizer algorithms.&quot;</span>,
    <span class="hljs-comment"># Cette section pr\xE9sente plusieurs algorithmes de tokenizer.</span>
    <span class="hljs-string">&quot;Hopefully, you will be able to understand how they are trained and generate tokens.&quot;</span>,
    <span class="hljs-comment"># Avec un peu de chance, vous serez en mesure de comprendre comment ils sont entra\xEEn\xE9s et g\xE9n\xE8rent des tokens.</span>
]`}}),As=new $({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)`}}),Ns=new $({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict

word_freqs = defaultdict(<span class="hljs-built_in">int</span>)
<span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> corpus:
    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)
    new_words = [word <span class="hljs-keyword">for</span> word, offset <span class="hljs-keyword">in</span> words_with_offsets]
    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> new_words:
        word_freqs[word] += <span class="hljs-number">1</span>

word_freqs`}}),Ms=new $({props:{code:`defaultdict(
    int, {'This': 3, 'is': 2, 'the': 1, 'Hugging': 1, 'Face': 1, 'Course': 1, '.': 4, 'chapter': 1, 'about': 1,
    'tokenization': 1, 'section': 1, 'shows': 1, 'several': 1, 'tokenizer': 1, 'algorithms': 1, 'Hopefully': 1,
    ',': 1, 'you': 1, 'will': 1, 'be': 1, 'able': 1, 'to': 1, 'understand': 1, 'how': 1, 'they': 1, 'are': 1,
    'trained': 1, 'and': 1, 'generate': 1, 'tokens': 1})`,highlighted:`defaultdict(
    <span class="hljs-built_in">int</span>, {<span class="hljs-string">&#x27;This&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;is&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;the&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Hugging&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Face&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Course&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;.&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;chapter&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;about&#x27;</span>: <span class="hljs-number">1</span>,
    <span class="hljs-string">&#x27;tokenization&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;section&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;shows&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;several&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;tokenizer&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;algorithms&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Hopefully&#x27;</span>: <span class="hljs-number">1</span>,
    <span class="hljs-string">&#x27;,&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;you&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;will&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;be&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;able&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;understand&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;how&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;they&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;are&#x27;</span>: <span class="hljs-number">1</span>,
    <span class="hljs-string">&#x27;trained&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;and&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;generate&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;tokens&#x27;</span>: <span class="hljs-number">1</span>})`}}),Bs=new $({props:{code:`
`,highlighted:`alphabet = []
<span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> word_freqs.keys():
    <span class="hljs-keyword">if</span> word[<span class="hljs-number">0</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> alphabet:
        alphabet.append(word[<span class="hljs-number">0</span>])
    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> word[<span class="hljs-number">1</span>:]:
        <span class="hljs-keyword">if</span> <span class="hljs-string">f&quot;##<span class="hljs-subst">{letter}</span>&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> alphabet:
            alphabet.append(<span class="hljs-string">f&quot;##<span class="hljs-subst">{letter}</span>&quot;</span>)

alphabet.sort()
alphabet

<span class="hljs-built_in">print</span>(alphabet)`}}),Hs=new $({props:{code:`['##a', '##b', '##c', '##d', '##e', '##f', '##g', '##h', '##i', '##k', '##l', '##m', '##n', '##o', '##p', '##r', '##s',
 '##t', '##u', '##v', '##w', '##y', '##z', ',', '.', 'C', 'F', 'H', 'T', 'a', 'b', 'c', 'g', 'h', 'i', 's', 't', 'u',
 'w', 'y']`,highlighted:`[<span class="hljs-string">&#x27;##a&#x27;</span>, <span class="hljs-string">&#x27;##b&#x27;</span>, <span class="hljs-string">&#x27;##c&#x27;</span>, <span class="hljs-string">&#x27;##d&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;##f&#x27;</span>, <span class="hljs-string">&#x27;##g&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##k&#x27;</span>, <span class="hljs-string">&#x27;##l&#x27;</span>, <span class="hljs-string">&#x27;##m&#x27;</span>, <span class="hljs-string">&#x27;##n&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>, <span class="hljs-string">&#x27;##p&#x27;</span>, <span class="hljs-string">&#x27;##r&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>,
 <span class="hljs-string">&#x27;##t&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##v&#x27;</span>, <span class="hljs-string">&#x27;##w&#x27;</span>, <span class="hljs-string">&#x27;##y&#x27;</span>, <span class="hljs-string">&#x27;##z&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>,
 <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>]`}}),Ss=new $({props:{code:'vocab = ["[PAD]", "[UNK]", "[CLS]", "[SEP]", "[MASK]"] + alphabet.copy()',highlighted:'vocab = [<span class="hljs-string">&quot;[PAD]&quot;</span>, <span class="hljs-string">&quot;[UNK]&quot;</span>, <span class="hljs-string">&quot;[CLS]&quot;</span>, <span class="hljs-string">&quot;[SEP]&quot;</span>, <span class="hljs-string">&quot;[MASK]&quot;</span>] + alphabet.copy()'}}),Ws=new $({props:{code:`splits = {
    word: [c if i == 0 else f"##{c}" for i, c in enumerate(word)]
    for word in word_freqs.keys()
}`,highlighted:`splits = {
    word: [c <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">f&quot;##<span class="hljs-subst">{c}</span>&quot;</span> <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(word)]
    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> word_freqs.keys()
}`}}),Ks=new $({props:{code:"",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_pair_scores</span>(<span class="hljs-params">splits</span>):
    letter_freqs = defaultdict(<span class="hljs-built_in">int</span>)
    pair_freqs = defaultdict(<span class="hljs-built_in">int</span>)
    <span class="hljs-keyword">for</span> word, freq <span class="hljs-keyword">in</span> word_freqs.items():
        split = splits[word]
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(split) == <span class="hljs-number">1</span>:
            letter_freqs[split[<span class="hljs-number">0</span>]] += freq
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>):
            pair = (split[i], split[i + <span class="hljs-number">1</span>])
            letter_freqs[split[i]] += freq
            pair_freqs[pair] += freq
        letter_freqs[split[-<span class="hljs-number">1</span>]] += freq

    scores = {
        pair: freq / (letter_freqs[pair[<span class="hljs-number">0</span>]] * letter_freqs[pair[<span class="hljs-number">1</span>]])
        <span class="hljs-keyword">for</span> pair, freq <span class="hljs-keyword">in</span> pair_freqs.items()
    }
    <span class="hljs-keyword">return</span> scores`}}),Us=new $({props:{code:`pair_scores = compute_pair_scores(splits)
for i, key in enumerate(pair_scores.keys()):
    print(f"{key}: {pair_scores[key]}")
    if i >= 5:
        break`,highlighted:`pair_scores = compute_pair_scores(splits)
<span class="hljs-keyword">for</span> i, key <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(pair_scores.keys()):
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">{key}</span>: <span class="hljs-subst">{pair_scores[key]}</span>&quot;</span>)
    <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">5</span>:
        <span class="hljs-keyword">break</span>`}}),Fs=new $({props:{code:`('T', '##h'): 0.125
('##h', '##i'): 0.03409090909090909
('##i', '##s'): 0.02727272727272727
('i', '##s'): 0.1
('t', '##h'): 0.03571428571428571
('##h', '##e'): 0.011904761904761904`,highlighted:`(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>): <span class="hljs-number">0.125</span>
(<span class="hljs-string">&#x27;##h&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>): <span class="hljs-number">0.03409090909090909</span>
(<span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>): <span class="hljs-number">0.02727272727272727</span>
(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>): <span class="hljs-number">0.1</span>
(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>): <span class="hljs-number">0.03571428571428571</span>
(<span class="hljs-string">&#x27;##h&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>): <span class="hljs-number">0.011904761904761904</span>`}}),Ls=new $({props:{code:"",highlighted:`best_pair = <span class="hljs-string">&quot;&quot;</span>
max_score = <span class="hljs-literal">None</span>
<span class="hljs-keyword">for</span> pair, score <span class="hljs-keyword">in</span> pair_scores.items():
    <span class="hljs-keyword">if</span> max_score <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> max_score &lt; score:
        best_pair = pair
        max_score = score

<span class="hljs-built_in">print</span>(best_pair, max_score)`}}),Rs=new $({props:{code:"('a', '##b') 0.2",highlighted:'(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;##b&#x27;</span>) <span class="hljs-number">0.2</span>'}}),Is=new $({props:{code:'vocab.append("ab")',highlighted:'vocab.append(<span class="hljs-string">&quot;ab&quot;</span>)'}}),Vs=new $({props:{code:`def merge_pair(a, b, splits):
    for word in word_freqs:
        split = splits[word]
        if len(split) == 1:
            continue
        i = 0
        while i < len(split) - 1:
            if split[i] == a and split[i + 1] == b:
                merge = a + b[2:] if b.startswith("##") else a + b
                split = split[:i] + [merge] + split[i + 2 :]
            else:
                i += 1
        splits[word] = split
    return splits`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_pair</span>(<span class="hljs-params">a, b, splits</span>):
    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> word_freqs:
        split = splits[word]
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(split) == <span class="hljs-number">1</span>:
            <span class="hljs-keyword">continue</span>
        i = <span class="hljs-number">0</span>
        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>:
            <span class="hljs-keyword">if</span> split[i] == a <span class="hljs-keyword">and</span> split[i + <span class="hljs-number">1</span>] == b:
                merge = a + b[<span class="hljs-number">2</span>:] <span class="hljs-keyword">if</span> b.startswith(<span class="hljs-string">&quot;##&quot;</span>) <span class="hljs-keyword">else</span> a + b
                split = split[:i] + [merge] + split[i + <span class="hljs-number">2</span> :]
            <span class="hljs-keyword">else</span>:
                i += <span class="hljs-number">1</span>
        splits[word] = split
    <span class="hljs-keyword">return</span> splits`}}),Gs=new $({props:{code:`splits = merge_pair("a", "##b", splits)
splits["about"]`,highlighted:`splits = merge_pair(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;##b&quot;</span>, splits)
splits[<span class="hljs-string">&quot;about&quot;</span>]`}}),Js=new $({props:{code:"['ab', '##o', '##u', '##t']",highlighted:'[<span class="hljs-string">&#x27;ab&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##t&#x27;</span>]'}}),Qs=new $({props:{code:`vocab_size = 70
while len(vocab) < vocab_size:
    scores = compute_pair_scores(splits)
    best_pair, max_score = "", None
    for pair, score in scores.items():
        if max_score is None or max_score < score:
            best_pair = pair
            max_score = score
    splits = merge_pair(*best_pair, splits)
    new_token = (
        best_pair[0] + best_pair[1][2:]
        if best_pair[1].startswith("##")
        else best_pair[0] + best_pair[1]
    )
    vocab.append(new_token)`,highlighted:`vocab_size = <span class="hljs-number">70</span>
<span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(vocab) &lt; vocab_size:
    scores = compute_pair_scores(splits)
    best_pair, max_score = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">None</span>
    <span class="hljs-keyword">for</span> pair, score <span class="hljs-keyword">in</span> scores.items():
        <span class="hljs-keyword">if</span> max_score <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> max_score &lt; score:
            best_pair = pair
            max_score = score
    splits = merge_pair(*best_pair, splits)
    new_token = (
        best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>:]
        <span class="hljs-keyword">if</span> best_pair[<span class="hljs-number">1</span>].startswith(<span class="hljs-string">&quot;##&quot;</span>)
        <span class="hljs-keyword">else</span> best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>]
    )
    vocab.append(new_token)`}}),Ys=new $({props:{code:"print(vocab)",highlighted:'<span class="hljs-built_in">print</span>(vocab)'}}),Xs=new $({props:{code:`['[PAD]', '[UNK]', '[CLS]', '[SEP]', '[MASK]', '##a', '##b', '##c', '##d', '##e', '##f', '##g', '##h', '##i', '##k',
 '##l', '##m', '##n', '##o', '##p', '##r', '##s', '##t', '##u', '##v', '##w', '##y', '##z', ',', '.', 'C', 'F', 'H',
 'T', 'a', 'b', 'c', 'g', 'h', 'i', 's', 't', 'u', 'w', 'y', '##fu', 'Fa', 'Fac', '##ct', '##ful', '##full', '##fully',
 'Th', 'ch', '##hm', 'cha', 'chap', 'chapt', '##thm', 'Hu', 'Hug', 'Hugg', 'sh', 'th', 'is', '##thms', '##za', '##zat',
 '##ut']`,highlighted:`[<span class="hljs-string">&#x27;[PAD]&#x27;</span>, <span class="hljs-string">&#x27;[UNK]&#x27;</span>, <span class="hljs-string">&#x27;[CLS]&#x27;</span>, <span class="hljs-string">&#x27;[SEP]&#x27;</span>, <span class="hljs-string">&#x27;[MASK]&#x27;</span>, <span class="hljs-string">&#x27;##a&#x27;</span>, <span class="hljs-string">&#x27;##b&#x27;</span>, <span class="hljs-string">&#x27;##c&#x27;</span>, <span class="hljs-string">&#x27;##d&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;##f&#x27;</span>, <span class="hljs-string">&#x27;##g&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##k&#x27;</span>,
 <span class="hljs-string">&#x27;##l&#x27;</span>, <span class="hljs-string">&#x27;##m&#x27;</span>, <span class="hljs-string">&#x27;##n&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>, <span class="hljs-string">&#x27;##p&#x27;</span>, <span class="hljs-string">&#x27;##r&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>, <span class="hljs-string">&#x27;##t&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##v&#x27;</span>, <span class="hljs-string">&#x27;##w&#x27;</span>, <span class="hljs-string">&#x27;##y&#x27;</span>, <span class="hljs-string">&#x27;##z&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>,
 <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;##fu&#x27;</span>, <span class="hljs-string">&#x27;Fa&#x27;</span>, <span class="hljs-string">&#x27;Fac&#x27;</span>, <span class="hljs-string">&#x27;##ct&#x27;</span>, <span class="hljs-string">&#x27;##ful&#x27;</span>, <span class="hljs-string">&#x27;##full&#x27;</span>, <span class="hljs-string">&#x27;##fully&#x27;</span>,
 <span class="hljs-string">&#x27;Th&#x27;</span>, <span class="hljs-string">&#x27;ch&#x27;</span>, <span class="hljs-string">&#x27;##hm&#x27;</span>, <span class="hljs-string">&#x27;cha&#x27;</span>, <span class="hljs-string">&#x27;chap&#x27;</span>, <span class="hljs-string">&#x27;chapt&#x27;</span>, <span class="hljs-string">&#x27;##thm&#x27;</span>, <span class="hljs-string">&#x27;Hu&#x27;</span>, <span class="hljs-string">&#x27;Hug&#x27;</span>, <span class="hljs-string">&#x27;Hugg&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;th&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;##thms&#x27;</span>, <span class="hljs-string">&#x27;##za&#x27;</span>, <span class="hljs-string">&#x27;##zat&#x27;</span>,
 <span class="hljs-string">&#x27;##ut&#x27;</span>]`}}),xs=new en({props:{$$slots:{default:[ru]},$$scope:{ctx:F}}}),Zs=new $({props:{code:`def encode_word(word):
    tokens = []
    while len(word) > 0:
        i = len(word)
        while i > 0 and word[:i] not in vocab:
            i -= 1
        if i == 0:
            return ["[UNK]"]
        tokens.append(word[:i])
        word = word[i:]
        if len(word) > 0:
            word = f"##{word}"
    return tokens`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_word</span>(<span class="hljs-params">word</span>):
    tokens = []
    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(word) &gt; <span class="hljs-number">0</span>:
        i = <span class="hljs-built_in">len</span>(word)
        <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> word[:i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> vocab:
            i -= <span class="hljs-number">1</span>
        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:
            <span class="hljs-keyword">return</span> [<span class="hljs-string">&quot;[UNK]&quot;</span>]
        tokens.append(word[:i])
        word = word[i:]
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) &gt; <span class="hljs-number">0</span>:
            word = <span class="hljs-string">f&quot;##<span class="hljs-subst">{word}</span>&quot;</span>
    <span class="hljs-keyword">return</span> tokens`}}),se=new $({props:{code:`print(encode_word("Hugging"))
print(encode_word("HOgging"))`,highlighted:`<span class="hljs-built_in">print</span>(encode_word(<span class="hljs-string">&quot;Hugging&quot;</span>))
<span class="hljs-built_in">print</span>(encode_word(<span class="hljs-string">&quot;HOgging&quot;</span>))`}}),ee=new $({props:{code:`['Hugg', '##i', '##n', '##g']
['[UNK]']`,highlighted:`[<span class="hljs-string">&#x27;Hugg&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##n&#x27;</span>, <span class="hljs-string">&#x27;##g&#x27;</span>]
[<span class="hljs-string">&#x27;[UNK]&#x27;</span>]`}}),ae=new $({props:{code:`def tokenize(text):
    pre_tokenize_result = tokenizer._tokenizer.pre_tokenizer.pre_tokenize_str(text)
    pre_tokenized_text = [word for word, offset in pre_tokenize_result]
    encoded_words = [encode_word(word) for word in pre_tokenized_text]
    return sum(encoded_words, [])`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">text</span>):
    pre_tokenize_result = tokenizer._tokenizer.pre_tokenizer.pre_tokenize_str(text)
    pre_tokenized_text = [word <span class="hljs-keyword">for</span> word, offset <span class="hljs-keyword">in</span> pre_tokenize_result]
    encoded_words = [encode_word(word) <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> pre_tokenized_text]
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(encoded_words, [])`}}),ne=new $({props:{code:`tokenize("This is the Hugging Face Course!")  # C'est le cours d'Hugging Face`,highlighted:'tokenize(<span class="hljs-string">&quot;This is the Hugging Face Course!&quot;</span>)  <span class="hljs-comment"># C&#x27;est le cours d&#x27;Hugging Face</span>'}}),te=new $({props:{code:`['Th', '##i', '##s', 'is', 'th', '##e', 'Hugg', '##i', '##n', '##g', 'Fac', '##e', 'c', '##o', '##u', '##r', '##s',
 '##e', '[UNK]']`,highlighted:`[<span class="hljs-string">&#x27;Th&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;th&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;Hugg&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##n&#x27;</span>, <span class="hljs-string">&#x27;##g&#x27;</span>, <span class="hljs-string">&#x27;Fac&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##r&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>,
 <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;[UNK]&#x27;</span>]`}}),{c(){m=p("meta"),E=u(),x=p("h1"),_=p("a"),w=p("span"),h(v.$$.fragment),q=u(),y=p("span"),S=n("Tok\xE9nisation "),O=p("i"),G=n("WordPiece"),U=u(),h(T.$$.fragment),$s=u(),L=p("p"),ls=p("em"),Ht=n("WordPiece"),St=n(" est l\u2019algorithme de tok\xE9nisation d\xE9velopp\xE9 par Google pour pr\xE9tra\xEEner BERT. Il a depuis \xE9t\xE9 r\xE9utilis\xE9 dans un grand nombre de mod\xE8les de "),ze=p("em"),Wt=n("transformers"),Kt=n(" bas\xE9s sur BERT tels que DistilBERT, MobileBERT, Funnel Transformers et MPNET. Il est tr\xE8s similaire au BPE en termes d\u2019entra\xEEnement mais la tokenisation r\xE9elle est effectu\xE9e diff\xE9remment."),an=u(),h(_s.$$.fragment),nn=u(),h(ps.$$.fragment),tn=u(),as=p("h2"),rs=p("a"),De=p("span"),h(ws.$$.fragment),Ut=u(),Oe=p("span"),Ft=n("Algorithme d'entra\xEEnement"),ln=u(),h(os.$$.fragment),pn=u(),W=p("p"),Lt=n("Comme le BPE, "),Te=p("em"),Rt=n("WordPiece"),It=n(" part d\u2019un petit vocabulaire comprenant les "),Ae=p("em"),Vt=n("tokens"),Gt=n(" sp\xE9ciaux utilis\xE9s par le mod\xE8le et l\u2019alphabet initial. Puisqu\u2019il identifie les sous-mots en ajoutant un pr\xE9fixe (comme "),Ne=p("code"),Jt=n("##"),Qt=n(" pour BERT), chaque mot est initialement d\xE9coup\xE9 en ajoutant ce pr\xE9fixe \xE0 tous les caract\xE8res du mot. Ainsi par exemple, "),Me=p("code"),Yt=n('"word"'),Xt=n(" est divis\xE9 comme ceci :"),rn=u(),h(Es.$$.fragment),on=u(),is=p("p"),Zt=n("Ainsi, l\u2019alphabet initial contient tous les caract\xE8res pr\xE9sents au d\xE9but d\u2019un mot et les caract\xE8res pr\xE9sents \xE0 l\u2019int\xE9rieur d\u2019un mot pr\xE9c\xE9d\xE9 du pr\xE9fixe de "),Be=p("em"),sl=n("WordPiece"),el=n("."),un=u(),V=p("p"),al=n("Ensuite, toujours comme le BPE, "),He=p("em"),nl=n("WordPiece"),tl=n(" apprend des r\xE8gles de fusion. La principale diff\xE9rence r\xE9side dans la mani\xE8re dont la paire \xE0 fusionner est s\xE9lectionn\xE9e. Au lieu de s\xE9lectionner la paire la plus fr\xE9quente, "),Se=p("em"),ll=n("WordPiece"),pl=n(` calcule un score pour chaque paire en utilisant la formule suivante :
`),cn=new Yi,mn=u(),z=p("p"),rl=n("En divisant la fr\xE9quence de la paire par le produit des fr\xE9quences de chacune de ses parties, l\u2019algorithme donne la priorit\xE9 \xE0 la fusion des paires dont les parties individuelles sont moins fr\xE9quentes dans le vocabulaire. Par exemple, il ne fusionnera pas n\xE9cessairement "),We=p("code"),ol=n('("un", "##able")'),il=n(" m\xEAme si cette paire appara\xEEt tr\xE8s fr\xE9quemment dans le vocabulaire car les deux paires "),Ke=p("code"),ul=n('"un"'),cl=n("\u201D et "),Ue=p("code"),ml=n('"##able"'),hl=n(" appara\xEEtront probablement chacune dans un batch d\u2019autres mots et auront une fr\xE9quence \xE9lev\xE9e. En revanche, une paire comme "),Fe=p("code"),dl=n('("hu", "##gging")'),fl=n(" sera probablement fusionn\xE9e plus rapidement (en supposant que le mot "),Le=p("code"),jl=n('"hugging"'),gl=n(" apparaisse souvent dans le vocabulaire) puisque "),Re=p("code"),bl=n('"hu"'),xl=n(" et "),Ie=p("code"),vl=n('"##gging"'),ql=n(" sont probablement moins fr\xE9quents individuellement."),hn=u(),re=p("p"),$l=n("Examinons le m\xEAme vocabulaire que celui utilis\xE9 dans l\u2019exemple d\u2019entra\xEEnement du BPE :"),dn=u(),h(ks.$$.fragment),fn=u(),oe=p("p"),_l=n("Les divisions ici seront :"),jn=u(),h(ys.$$.fragment),gn=u(),P=p("p"),wl=n("Si on oublie les "),Ve=p("em"),El=n("tokens"),kl=n(" sp\xE9ciaux pour l\u2019instant, le vocabulaire initial sera donc "),Ge=p("code"),yl=n('["b", "h", "p", "##g", "##n", "##s", "##u"]'),Pl=n(". La paire la plus fr\xE9quente est "),Je=p("code"),Cl=n('("##u", "##g")'),zl=n(" (pr\xE9sente 20 fois), mais la fr\xE9quence individuelle de "),Qe=p("code"),Dl=n('"##u"'),Ol=n(" est tr\xE8s \xE9lev\xE9e, donc son score n\u2019est pas le plus \xE9lev\xE9 (il est de 1 / 36). Toutes les paires avec un "),Ye=p("code"),Tl=n('"##u"'),Al=n(" ont en fait le m\xEAme score (1 / 36). Ainsi le meilleur score va \xE0 la paire "),Xe=p("code"),Nl=n('("##g", "##s")'),Ml=n(" qui est la seule sans un "),Ze=p("code"),Bl=n('"##u"'),Hl=n(" avec un score 1 / 20. Et la premi\xE8re fusion apprise est "),sa=p("code"),Sl=n('("##g", "##s") -> ("##gs")'),Wl=n("."),bn=u(),R=p("p"),Kl=n("Notez que lorsque nous fusionnons, nous enlevons le "),ea=p("code"),Ul=n("##"),Fl=n(" entre les deux "),aa=p("em"),Ll=n("tokens"),Rl=n(", donc nous ajoutons "),na=p("code"),Il=n('"##gs"'),Vl=n(" au vocabulaire et appliquons la fusion dans les mots du corpus :"),xn=u(),h(Ps.$$.fragment),vn=u(),J=p("p"),Gl=n("\xC0 ce stade, "),ta=p("code"),Jl=n('" ##u "'),Ql=n(" est dans toutes les paires possibles, donc elles finissent toutes par avoir le m\xEAme score. Disons que dans ce cas, la premi\xE8re paire est fusionn\xE9e, donc "),la=p("code"),Yl=n('("h", "##u") -> "hu"'),Xl=n(". Cela nous am\xE8ne \xE0 :"),qn=u(),h(Cs.$$.fragment),$n=u(),Q=p("p"),Zl=n("Ensuite, le meilleur score suivant est partag\xE9 par "),pa=p("code"),sp=n('("hu", "##g")'),ep=n(" et "),ra=p("code"),ap=n('("hu", "##gs")'),np=n(" (avec 1/15, compar\xE9 \xE0 1/21 pour toutes les autres paires). Ainsi la premi\xE8re paire avec le plus grand score est fusionn\xE9e :"),_n=u(),h(zs.$$.fragment),wn=u(),ie=p("p"),tp=n("et nous continuons ainsi jusqu\u2019\xE0 ce que nous atteignions la taille de vocabulaire souhait\xE9e."),En=u(),h(us.$$.fragment),kn=u(),ns=p("h2"),cs=p("a"),oa=p("span"),h(Ds.$$.fragment),lp=u(),ia=p("span"),pp=n("Algorithme de tokenisation"),yn=u(),k=p("p"),rp=n("La tok\xE9nisation diff\xE8re dans "),ua=p("em"),op=n("WordPiece"),ip=n(" et BPE en ce que "),ca=p("em"),up=n("WordPiece"),cp=n(" ne sauvegarde que le vocabulaire final et non pas les r\xE8gles de fusion apprises. En partant du mot \xE0 tokeniser, "),ma=p("em"),mp=n("WordPiece"),hp=n(" trouve le sous-mot le plus long qui se trouve dans le vocabulaire, puis se s\xE9pare sur celui-ci. Par exemple, si nous utilisons le vocabulaire appris dans l\u2019exemple ci-dessus, pour le mot "),ha=p("code"),dp=n('"hugs"'),fp=n(" le plus long sous-mot en partant du d\xE9but qui est dans le vocabulaire est "),da=p("code"),jp=n('"hug"'),gp=n(". Donc nous le divisons et obtenons "),fa=p("code"),bp=n('["hug", "##s"]'),xp=n(". On continue avec "),ja=p("code"),vp=n('"##s"'),qp=n(", qui est dans le vocabulaire, donc la tokenisation de "),ga=p("code"),$p=n('"hugs"'),_p=n(" est "),ba=p("code"),wp=n('["hug", "##s"]'),Ep=n("."),Pn=u(),ms=p("p"),kp=n("Avec BPE, nous aurions appliqu\xE9 les fusions apprises dans l\u2019ordre et la tok\xE9nisation aurait \xE9t\xE9 "),xa=p("code"),yp=n('["hu", "##gs"]'),Pp=n(", l\u2019encodage est donc diff\xE9rent."),Cn=u(),C=p("p"),Cp=n("Comme autre exemple, voyons comment le mot "),va=p("code"),zp=n('"bugs"'),Dp=n(" serait tokenis\xE9. "),qa=p("code"),Op=n('"b"'),Tp=n(" est le plus long sous-mot commen\xE7ant au d\xE9but du mot qui est dans le vocabulaire donc on le divise et on obtient "),$a=p("code"),Ap=n('["b", "##ugs"]'),Np=n(". Ensuite, "),_a=p("code"),Mp=n('"##u"'),Bp=n(" est le plus long sous-mot commen\xE7ant au d\xE9but de "),wa=p("code"),Hp=n('"##ugs"'),Sp=n(" qui est dans le vocabulaire, donc on le s\xE9pare et on obtient "),Ea=p("code"),Wp=n('["b", "##u, "##gs"]'),Kp=n(". Enfin, "),ka=p("code"),Up=n('"##gs"'),Fp=n(" est dans le vocabulaire, donc cette derni\xE8re liste est la tokenization de "),ya=p("code"),Lp=n('"bugs"'),Rp=n("."),zn=u(),A=p("p"),Ip=n("Lorsque la tokenisation arrive \xE0 un stade o\xF9 il n\u2019est pas possible de trouver un sous-mot dans le vocabulaire, le mot entier est tokenis\xE9 comme inconnu. Par exemple, "),Pa=p("code"),Vp=n('"mug"'),Gp=n(" serait tokenis\xE9 comme "),Ca=p("code"),Jp=n('["[UNK]"]'),Qp=n(", tout comme "),za=p("code"),Yp=n('"bum"'),Xp=n(" (m\xEAme si on peut commencer par \u201D b \u201D et \u201D ##u \u201D, \u201D ##m \u201D ne fait pas partie du vocabulaire, et le "),Da=p("em"),Zp=n("tokenizer"),sr=n(" r\xE9sultant sera simplement "),Oa=p("code"),er=n('["[UNK]"]'),ar=n(" \u201D et non "),Ta=p("code"),nr=n('["b", "##u", "[UNK]"]'),tr=n(" \u201D). C\u2019est une autre diff\xE9rence avec le BPE qui classerait seulement les caract\xE8res individuels qui ne sont pas dans le vocabulaire comme inconnus."),Dn=u(),h(hs.$$.fragment),On=u(),ts=p("h2"),ds=p("a"),Aa=p("span"),h(Os.$$.fragment),lr=u(),ue=p("span"),pr=n("Impl\xE9mentation de "),Na=p("i"),rr=n("WordPiece"),Tn=u(),fs=p("p"),or=n("Voyons maintenant une impl\xE9mentation de l\u2019algorithme "),Ma=p("em"),ir=n("WordPiece"),ur=n(". Comme pour le BPE, il s\u2019agit d\u2019un exemple p\xE9dagogique et vous ne pourrez pas l\u2019utiliser sur un grand corpus."),An=u(),ce=p("p"),cr=n("Nous utiliserons le m\xEAme corpus que dans l\u2019exemple BPE :"),Nn=u(),h(Ts.$$.fragment),Mn=u(),I=p("p"),mr=n("Tout d\u2019abord, nous devons pr\xE9tok\xE9niser le corpus en mots. Puisque nous r\xE9pliquons un "),Ba=p("em"),hr=n("tokenizer WordPiece"),dr=n(" (comme BERT), nous utiliserons le "),Ha=p("em"),fr=n("tokenizer"),jr=u(),Sa=p("code"),gr=n("bert-base-cased"),br=n(" pour la pr\xE9tok\xE9nisation :"),Bn=u(),h(As.$$.fragment),Hn=u(),me=p("p"),xr=n("Ensuite, nous calculons les fr\xE9quences de chaque mot dans le corpus comme nous le faisons pour la pr\xE9tok\xE9nisation :"),Sn=u(),h(Ns.$$.fragment),Wn=u(),h(Ms.$$.fragment),Kn=u(),js=p("p"),vr=n("Comme nous l\u2019avons vu pr\xE9c\xE9demment, l\u2019alphabet est l\u2019unique ensemble compos\xE9 de toutes les premi\xE8res lettres des mots, et de toutes les autres lettres qui apparaissent dans les mots pr\xE9fix\xE9s par "),Wa=p("code"),qr=n("##"),$r=n(" :"),Un=u(),h(Bs.$$.fragment),Fn=u(),h(Hs.$$.fragment),Ln=u(),Y=p("p"),_r=n("Nous ajoutons \xE9galement les "),Ka=p("em"),wr=n("tokens"),Er=n(" sp\xE9ciaux utilis\xE9s par le mod\xE8le au d\xE9but de ce vocabulaire. Dans le cas de BERT, il s\u2019agit de la liste "),Ua=p("code"),kr=n('["[PAD]", "[UNK]", "[CLS]", "[SEP]", "[MASK]"]'),yr=n(" :"),Rn=u(),h(Ss.$$.fragment),In=u(),gs=p("p"),Pr=n("Ensuite, nous devons diviser chaque mot, avec toutes les lettres qui ne sont pas les premi\xE8res pr\xE9fix\xE9es par "),Fa=p("code"),Cr=n("##"),zr=n(" :"),Vn=u(),h(Ws.$$.fragment),Gn=u(),he=p("p"),Dr=n("Maintenant que nous sommes pr\xEAts pour l\u2019entra\xEEnement, \xE9crivons une fonction qui calcule le score de chaque paire. Nous devrons l\u2019utiliser \xE0 chaque \xE9tape de l\u2019entra\xEEnement :"),Jn=u(),h(Ks.$$.fragment),Qn=u(),de=p("p"),Or=n("Jetons un coup d\u2019\u0153il \xE0 une partie de ce dictionnaire apr\xE8s les premi\xE8res divisions :"),Yn=u(),h(Us.$$.fragment),Xn=u(),h(Fs.$$.fragment),Zn=u(),fe=p("p"),Tr=n("Maintenant, trouver la paire avec le meilleur score ne prend qu\u2019une rapide boucle :"),st=u(),h(Ls.$$.fragment),et=u(),h(Rs.$$.fragment),at=u(),X=p("p"),Ar=n("Ainsi, la premi\xE8re fusion \xE0 apprendre est "),La=p("code"),Nr=n("('a', '##b') -> 'ab'"),Mr=n(" et nous ajoutons "),Ra=p("code"),Br=n("'ab'"),Hr=n(" au vocabulaire :"),nt=u(),h(Is.$$.fragment),tt=u(),bs=p("p"),Sr=n("Pour continuer, nous devons appliquer cette fusion dans notre dictionnaire "),Ia=p("code"),Wr=n("splits"),Kr=n(". \xC9crivons une autre fonction pour cela :"),lt=u(),h(Vs.$$.fragment),pt=u(),je=p("p"),Ur=n("Et nous pouvons regarder le r\xE9sultat de la premi\xE8re fusion :"),rt=u(),h(Gs.$$.fragment),ot=u(),h(Js.$$.fragment),it=u(),ge=p("p"),Fr=n("Nous avons maintenant tout ce dont nous avons besoin pour boucler jusqu\u2019\xE0 ce que nous ayons appris toutes les fusions que nous voulons. Visons une taille de vocabulaire de 70 :"),ut=u(),h(Qs.$$.fragment),ct=u(),be=p("p"),Lr=n("Nous pouvons ensuite examiner le vocabulaire g\xE9n\xE9r\xE9 :"),mt=u(),h(Ys.$$.fragment),ht=u(),h(Xs.$$.fragment),dt=u(),Z=p("p"),Rr=n("Comme nous pouvons le voir, compar\xE9 \xE0 BPE, ce "),Va=p("em"),Ir=n("tokenizer"),Vr=n(" apprend les parties de mots comme des "),Ga=p("em"),Gr=n("tokens"),Jr=n(" un peu plus rapidement."),ft=u(),h(xs.$$.fragment),jt=u(),xe=p("p"),Qr=n("Pour tokeniser un nouveau texte, on le pr\xE9tokenise, on le divise, puis on applique l\u2019algorithme de tokenisation sur chaque mot. En d\u2019autres termes, nous recherchons le plus grand sous-mot commen\xE7ant au d\xE9but du premier mot et le divisons. Puis nous r\xE9p\xE9tons le processus sur la deuxi\xE8me partie et ainsi de suite pour le reste de ce mot et les mots suivants dans le texte :"),gt=u(),h(Zs.$$.fragment),bt=u(),ve=p("p"),Yr=n("Testons-le sur un mot qui fait partie du vocabulaire, et un autre qui n\u2019en fait pas partie :"),xt=u(),h(se.$$.fragment),vt=u(),h(ee.$$.fragment),qt=u(),qe=p("p"),Xr=n("Maintenant, \xE9crivons une fonction qui permet de tokeniser un texte :"),$t=u(),h(ae.$$.fragment),_t=u(),$e=p("p"),Zr=n("On peut l\u2019essayer sur n\u2019importe quel texte :"),wt=u(),h(ne.$$.fragment),Et=u(),h(te.$$.fragment),kt=u(),ss=p("p"),so=n("C\u2019est tout pour l\u2019algorithme "),Ja=p("em"),eo=n("WordPiece"),ao=n(" ! Maintenant, jetons un coup d\u2019oeil \xE0 "),Qa=p("em"),no=n("Unigram"),to=n("."),this.h()},l(s){const l=Xi('[data-svelte="svelte-1phssyn"]',document.head);m=r(l,"META",{name:!0,content:!0}),l.forEach(a),E=c(s),x=r(s,"H1",{class:!0});var le=o(x);_=r(le,"A",{id:!0,class:!0,href:!0});var Ya=o(_);w=r(Ya,"SPAN",{});var Xa=o(w);d(v.$$.fragment,Xa),Xa.forEach(a),Ya.forEach(a),q=c(le),y=r(le,"SPAN",{});var _e=o(y);S=t(_e,"Tok\xE9nisation "),O=r(_e,"I",{});var Za=o(O);G=t(Za,"WordPiece"),Za.forEach(a),_e.forEach(a),le.forEach(a),U=c(s),d(T.$$.fragment,s),$s=c(s),L=r(s,"P",{});var sn=o(L);ls=r(sn,"EM",{});var po=o(ls);Ht=t(po,"WordPiece"),po.forEach(a),St=t(sn," est l\u2019algorithme de tok\xE9nisation d\xE9velopp\xE9 par Google pour pr\xE9tra\xEEner BERT. Il a depuis \xE9t\xE9 r\xE9utilis\xE9 dans un grand nombre de mod\xE8les de "),ze=r(sn,"EM",{});var ro=o(ze);Wt=t(ro,"transformers"),ro.forEach(a),Kt=t(sn," bas\xE9s sur BERT tels que DistilBERT, MobileBERT, Funnel Transformers et MPNET. Il est tr\xE8s similaire au BPE en termes d\u2019entra\xEEnement mais la tokenisation r\xE9elle est effectu\xE9e diff\xE9remment."),sn.forEach(a),an=c(s),d(_s.$$.fragment,s),nn=c(s),d(ps.$$.fragment,s),tn=c(s),as=r(s,"H2",{class:!0});var Pt=o(as);rs=r(Pt,"A",{id:!0,class:!0,href:!0});var oo=o(rs);De=r(oo,"SPAN",{});var io=o(De);d(ws.$$.fragment,io),io.forEach(a),oo.forEach(a),Ut=c(Pt),Oe=r(Pt,"SPAN",{});var uo=o(Oe);Ft=t(uo,"Algorithme d'entra\xEEnement"),uo.forEach(a),Pt.forEach(a),ln=c(s),d(os.$$.fragment,s),pn=c(s),W=r(s,"P",{});var es=o(W);Lt=t(es,"Comme le BPE, "),Te=r(es,"EM",{});var co=o(Te);Rt=t(co,"WordPiece"),co.forEach(a),It=t(es," part d\u2019un petit vocabulaire comprenant les "),Ae=r(es,"EM",{});var mo=o(Ae);Vt=t(mo,"tokens"),mo.forEach(a),Gt=t(es," sp\xE9ciaux utilis\xE9s par le mod\xE8le et l\u2019alphabet initial. Puisqu\u2019il identifie les sous-mots en ajoutant un pr\xE9fixe (comme "),Ne=r(es,"CODE",{});var ho=o(Ne);Jt=t(ho,"##"),ho.forEach(a),Qt=t(es," pour BERT), chaque mot est initialement d\xE9coup\xE9 en ajoutant ce pr\xE9fixe \xE0 tous les caract\xE8res du mot. Ainsi par exemple, "),Me=r(es,"CODE",{});var fo=o(Me);Yt=t(fo,'"word"'),fo.forEach(a),Xt=t(es," est divis\xE9 comme ceci :"),es.forEach(a),rn=c(s),d(Es.$$.fragment,s),on=c(s),is=r(s,"P",{});var Ct=o(is);Zt=t(Ct,"Ainsi, l\u2019alphabet initial contient tous les caract\xE8res pr\xE9sents au d\xE9but d\u2019un mot et les caract\xE8res pr\xE9sents \xE0 l\u2019int\xE9rieur d\u2019un mot pr\xE9c\xE9d\xE9 du pr\xE9fixe de "),Be=r(Ct,"EM",{});var jo=o(Be);sl=t(jo,"WordPiece"),jo.forEach(a),el=t(Ct,"."),Ct.forEach(a),un=c(s),V=r(s,"P",{});var pe=o(V);al=t(pe,"Ensuite, toujours comme le BPE, "),He=r(pe,"EM",{});var go=o(He);nl=t(go,"WordPiece"),go.forEach(a),tl=t(pe," apprend des r\xE8gles de fusion. La principale diff\xE9rence r\xE9side dans la mani\xE8re dont la paire \xE0 fusionner est s\xE9lectionn\xE9e. Au lieu de s\xE9lectionner la paire la plus fr\xE9quente, "),Se=r(pe,"EM",{});var bo=o(Se);ll=t(bo,"WordPiece"),bo.forEach(a),pl=t(pe,` calcule un score pour chaque paire en utilisant la formule suivante :
`),cn=Zi(pe),pe.forEach(a),mn=c(s),z=r(s,"P",{});var H=o(z);rl=t(H,"En divisant la fr\xE9quence de la paire par le produit des fr\xE9quences de chacune de ses parties, l\u2019algorithme donne la priorit\xE9 \xE0 la fusion des paires dont les parties individuelles sont moins fr\xE9quentes dans le vocabulaire. Par exemple, il ne fusionnera pas n\xE9cessairement "),We=r(H,"CODE",{});var xo=o(We);ol=t(xo,'("un", "##able")'),xo.forEach(a),il=t(H," m\xEAme si cette paire appara\xEEt tr\xE8s fr\xE9quemment dans le vocabulaire car les deux paires "),Ke=r(H,"CODE",{});var vo=o(Ke);ul=t(vo,'"un"'),vo.forEach(a),cl=t(H,"\u201D et "),Ue=r(H,"CODE",{});var qo=o(Ue);ml=t(qo,'"##able"'),qo.forEach(a),hl=t(H," appara\xEEtront probablement chacune dans un batch d\u2019autres mots et auront une fr\xE9quence \xE9lev\xE9e. En revanche, une paire comme "),Fe=r(H,"CODE",{});var $o=o(Fe);dl=t($o,'("hu", "##gging")'),$o.forEach(a),fl=t(H," sera probablement fusionn\xE9e plus rapidement (en supposant que le mot "),Le=r(H,"CODE",{});var _o=o(Le);jl=t(_o,'"hugging"'),_o.forEach(a),gl=t(H," apparaisse souvent dans le vocabulaire) puisque "),Re=r(H,"CODE",{});var wo=o(Re);bl=t(wo,'"hu"'),wo.forEach(a),xl=t(H," et "),Ie=r(H,"CODE",{});var Eo=o(Ie);vl=t(Eo,'"##gging"'),Eo.forEach(a),ql=t(H," sont probablement moins fr\xE9quents individuellement."),H.forEach(a),hn=c(s),re=r(s,"P",{});var ko=o(re);$l=t(ko,"Examinons le m\xEAme vocabulaire que celui utilis\xE9 dans l\u2019exemple d\u2019entra\xEEnement du BPE :"),ko.forEach(a),dn=c(s),d(ks.$$.fragment,s),fn=c(s),oe=r(s,"P",{});var yo=o(oe);_l=t(yo,"Les divisions ici seront :"),yo.forEach(a),jn=c(s),d(ys.$$.fragment,s),gn=c(s),P=r(s,"P",{});var N=o(P);wl=t(N,"Si on oublie les "),Ve=r(N,"EM",{});var Po=o(Ve);El=t(Po,"tokens"),Po.forEach(a),kl=t(N," sp\xE9ciaux pour l\u2019instant, le vocabulaire initial sera donc "),Ge=r(N,"CODE",{});var Co=o(Ge);yl=t(Co,'["b", "h", "p", "##g", "##n", "##s", "##u"]'),Co.forEach(a),Pl=t(N,". La paire la plus fr\xE9quente est "),Je=r(N,"CODE",{});var zo=o(Je);Cl=t(zo,'("##u", "##g")'),zo.forEach(a),zl=t(N," (pr\xE9sente 20 fois), mais la fr\xE9quence individuelle de "),Qe=r(N,"CODE",{});var Do=o(Qe);Dl=t(Do,'"##u"'),Do.forEach(a),Ol=t(N," est tr\xE8s \xE9lev\xE9e, donc son score n\u2019est pas le plus \xE9lev\xE9 (il est de 1 / 36). Toutes les paires avec un "),Ye=r(N,"CODE",{});var Oo=o(Ye);Tl=t(Oo,'"##u"'),Oo.forEach(a),Al=t(N," ont en fait le m\xEAme score (1 / 36). Ainsi le meilleur score va \xE0 la paire "),Xe=r(N,"CODE",{});var To=o(Xe);Nl=t(To,'("##g", "##s")'),To.forEach(a),Ml=t(N," qui est la seule sans un "),Ze=r(N,"CODE",{});var Ao=o(Ze);Bl=t(Ao,'"##u"'),Ao.forEach(a),Hl=t(N," avec un score 1 / 20. Et la premi\xE8re fusion apprise est "),sa=r(N,"CODE",{});var No=o(sa);Sl=t(No,'("##g", "##s") -> ("##gs")'),No.forEach(a),Wl=t(N,"."),N.forEach(a),bn=c(s),R=r(s,"P",{});var vs=o(R);Kl=t(vs,"Notez que lorsque nous fusionnons, nous enlevons le "),ea=r(vs,"CODE",{});var Mo=o(ea);Ul=t(Mo,"##"),Mo.forEach(a),Fl=t(vs," entre les deux "),aa=r(vs,"EM",{});var Bo=o(aa);Ll=t(Bo,"tokens"),Bo.forEach(a),Rl=t(vs,", donc nous ajoutons "),na=r(vs,"CODE",{});var Ho=o(na);Il=t(Ho,'"##gs"'),Ho.forEach(a),Vl=t(vs," au vocabulaire et appliquons la fusion dans les mots du corpus :"),vs.forEach(a),xn=c(s),d(Ps.$$.fragment,s),vn=c(s),J=r(s,"P",{});var we=o(J);Gl=t(we,"\xC0 ce stade, "),ta=r(we,"CODE",{});var So=o(ta);Jl=t(So,'" ##u "'),So.forEach(a),Ql=t(we," est dans toutes les paires possibles, donc elles finissent toutes par avoir le m\xEAme score. Disons que dans ce cas, la premi\xE8re paire est fusionn\xE9e, donc "),la=r(we,"CODE",{});var Wo=o(la);Yl=t(Wo,'("h", "##u") -> "hu"'),Wo.forEach(a),Xl=t(we,". Cela nous am\xE8ne \xE0 :"),we.forEach(a),qn=c(s),d(Cs.$$.fragment,s),$n=c(s),Q=r(s,"P",{});var Ee=o(Q);Zl=t(Ee,"Ensuite, le meilleur score suivant est partag\xE9 par "),pa=r(Ee,"CODE",{});var Ko=o(pa);sp=t(Ko,'("hu", "##g")'),Ko.forEach(a),ep=t(Ee," et "),ra=r(Ee,"CODE",{});var Uo=o(ra);ap=t(Uo,'("hu", "##gs")'),Uo.forEach(a),np=t(Ee," (avec 1/15, compar\xE9 \xE0 1/21 pour toutes les autres paires). Ainsi la premi\xE8re paire avec le plus grand score est fusionn\xE9e :"),Ee.forEach(a),_n=c(s),d(zs.$$.fragment,s),wn=c(s),ie=r(s,"P",{});var Fo=o(ie);tp=t(Fo,"et nous continuons ainsi jusqu\u2019\xE0 ce que nous atteignions la taille de vocabulaire souhait\xE9e."),Fo.forEach(a),En=c(s),d(us.$$.fragment,s),kn=c(s),ns=r(s,"H2",{class:!0});var zt=o(ns);cs=r(zt,"A",{id:!0,class:!0,href:!0});var Lo=o(cs);oa=r(Lo,"SPAN",{});var Ro=o(oa);d(Ds.$$.fragment,Ro),Ro.forEach(a),Lo.forEach(a),lp=c(zt),ia=r(zt,"SPAN",{});var Io=o(ia);pp=t(Io,"Algorithme de tokenisation"),Io.forEach(a),zt.forEach(a),yn=c(s),k=r(s,"P",{});var D=o(k);rp=t(D,"La tok\xE9nisation diff\xE8re dans "),ua=r(D,"EM",{});var Vo=o(ua);op=t(Vo,"WordPiece"),Vo.forEach(a),ip=t(D," et BPE en ce que "),ca=r(D,"EM",{});var Go=o(ca);up=t(Go,"WordPiece"),Go.forEach(a),cp=t(D," ne sauvegarde que le vocabulaire final et non pas les r\xE8gles de fusion apprises. En partant du mot \xE0 tokeniser, "),ma=r(D,"EM",{});var Jo=o(ma);mp=t(Jo,"WordPiece"),Jo.forEach(a),hp=t(D," trouve le sous-mot le plus long qui se trouve dans le vocabulaire, puis se s\xE9pare sur celui-ci. Par exemple, si nous utilisons le vocabulaire appris dans l\u2019exemple ci-dessus, pour le mot "),ha=r(D,"CODE",{});var Qo=o(ha);dp=t(Qo,'"hugs"'),Qo.forEach(a),fp=t(D," le plus long sous-mot en partant du d\xE9but qui est dans le vocabulaire est "),da=r(D,"CODE",{});var Yo=o(da);jp=t(Yo,'"hug"'),Yo.forEach(a),gp=t(D,". Donc nous le divisons et obtenons "),fa=r(D,"CODE",{});var Xo=o(fa);bp=t(Xo,'["hug", "##s"]'),Xo.forEach(a),xp=t(D,". On continue avec "),ja=r(D,"CODE",{});var Zo=o(ja);vp=t(Zo,'"##s"'),Zo.forEach(a),qp=t(D,", qui est dans le vocabulaire, donc la tokenisation de "),ga=r(D,"CODE",{});var si=o(ga);$p=t(si,'"hugs"'),si.forEach(a),_p=t(D," est "),ba=r(D,"CODE",{});var ei=o(ba);wp=t(ei,'["hug", "##s"]'),ei.forEach(a),Ep=t(D,"."),D.forEach(a),Pn=c(s),ms=r(s,"P",{});var Dt=o(ms);kp=t(Dt,"Avec BPE, nous aurions appliqu\xE9 les fusions apprises dans l\u2019ordre et la tok\xE9nisation aurait \xE9t\xE9 "),xa=r(Dt,"CODE",{});var ai=o(xa);yp=t(ai,'["hu", "##gs"]'),ai.forEach(a),Pp=t(Dt,", l\u2019encodage est donc diff\xE9rent."),Dt.forEach(a),Cn=c(s),C=r(s,"P",{});var M=o(C);Cp=t(M,"Comme autre exemple, voyons comment le mot "),va=r(M,"CODE",{});var ni=o(va);zp=t(ni,'"bugs"'),ni.forEach(a),Dp=t(M," serait tokenis\xE9. "),qa=r(M,"CODE",{});var ti=o(qa);Op=t(ti,'"b"'),ti.forEach(a),Tp=t(M," est le plus long sous-mot commen\xE7ant au d\xE9but du mot qui est dans le vocabulaire donc on le divise et on obtient "),$a=r(M,"CODE",{});var li=o($a);Ap=t(li,'["b", "##ugs"]'),li.forEach(a),Np=t(M,". Ensuite, "),_a=r(M,"CODE",{});var pi=o(_a);Mp=t(pi,'"##u"'),pi.forEach(a),Bp=t(M," est le plus long sous-mot commen\xE7ant au d\xE9but de "),wa=r(M,"CODE",{});var ri=o(wa);Hp=t(ri,'"##ugs"'),ri.forEach(a),Sp=t(M," qui est dans le vocabulaire, donc on le s\xE9pare et on obtient "),Ea=r(M,"CODE",{});var oi=o(Ea);Wp=t(oi,'["b", "##u, "##gs"]'),oi.forEach(a),Kp=t(M,". Enfin, "),ka=r(M,"CODE",{});var ii=o(ka);Up=t(ii,'"##gs"'),ii.forEach(a),Fp=t(M," est dans le vocabulaire, donc cette derni\xE8re liste est la tokenization de "),ya=r(M,"CODE",{});var ui=o(ya);Lp=t(ui,'"bugs"'),ui.forEach(a),Rp=t(M,"."),M.forEach(a),zn=c(s),A=r(s,"P",{});var K=o(A);Ip=t(K,"Lorsque la tokenisation arrive \xE0 un stade o\xF9 il n\u2019est pas possible de trouver un sous-mot dans le vocabulaire, le mot entier est tokenis\xE9 comme inconnu. Par exemple, "),Pa=r(K,"CODE",{});var ci=o(Pa);Vp=t(ci,'"mug"'),ci.forEach(a),Gp=t(K," serait tokenis\xE9 comme "),Ca=r(K,"CODE",{});var mi=o(Ca);Jp=t(mi,'["[UNK]"]'),mi.forEach(a),Qp=t(K,", tout comme "),za=r(K,"CODE",{});var hi=o(za);Yp=t(hi,'"bum"'),hi.forEach(a),Xp=t(K," (m\xEAme si on peut commencer par \u201D b \u201D et \u201D ##u \u201D, \u201D ##m \u201D ne fait pas partie du vocabulaire, et le "),Da=r(K,"EM",{});var di=o(Da);Zp=t(di,"tokenizer"),di.forEach(a),sr=t(K," r\xE9sultant sera simplement "),Oa=r(K,"CODE",{});var fi=o(Oa);er=t(fi,'["[UNK]"]'),fi.forEach(a),ar=t(K," \u201D et non "),Ta=r(K,"CODE",{});var ji=o(Ta);nr=t(ji,'["b", "##u", "[UNK]"]'),ji.forEach(a),tr=t(K," \u201D). C\u2019est une autre diff\xE9rence avec le BPE qui classerait seulement les caract\xE8res individuels qui ne sont pas dans le vocabulaire comme inconnus."),K.forEach(a),Dn=c(s),d(hs.$$.fragment,s),On=c(s),ts=r(s,"H2",{class:!0});var Ot=o(ts);ds=r(Ot,"A",{id:!0,class:!0,href:!0});var gi=o(ds);Aa=r(gi,"SPAN",{});var bi=o(Aa);d(Os.$$.fragment,bi),bi.forEach(a),gi.forEach(a),lr=c(Ot),ue=r(Ot,"SPAN",{});var lo=o(ue);pr=t(lo,"Impl\xE9mentation de "),Na=r(lo,"I",{});var xi=o(Na);rr=t(xi,"WordPiece"),xi.forEach(a),lo.forEach(a),Ot.forEach(a),Tn=c(s),fs=r(s,"P",{});var Tt=o(fs);or=t(Tt,"Voyons maintenant une impl\xE9mentation de l\u2019algorithme "),Ma=r(Tt,"EM",{});var vi=o(Ma);ir=t(vi,"WordPiece"),vi.forEach(a),ur=t(Tt,". Comme pour le BPE, il s\u2019agit d\u2019un exemple p\xE9dagogique et vous ne pourrez pas l\u2019utiliser sur un grand corpus."),Tt.forEach(a),An=c(s),ce=r(s,"P",{});var qi=o(ce);cr=t(qi,"Nous utiliserons le m\xEAme corpus que dans l\u2019exemple BPE :"),qi.forEach(a),Nn=c(s),d(Ts.$$.fragment,s),Mn=c(s),I=r(s,"P",{});var qs=o(I);mr=t(qs,"Tout d\u2019abord, nous devons pr\xE9tok\xE9niser le corpus en mots. Puisque nous r\xE9pliquons un "),Ba=r(qs,"EM",{});var $i=o(Ba);hr=t($i,"tokenizer WordPiece"),$i.forEach(a),dr=t(qs," (comme BERT), nous utiliserons le "),Ha=r(qs,"EM",{});var _i=o(Ha);fr=t(_i,"tokenizer"),_i.forEach(a),jr=c(qs),Sa=r(qs,"CODE",{});var wi=o(Sa);gr=t(wi,"bert-base-cased"),wi.forEach(a),br=t(qs," pour la pr\xE9tok\xE9nisation :"),qs.forEach(a),Bn=c(s),d(As.$$.fragment,s),Hn=c(s),me=r(s,"P",{});var Ei=o(me);xr=t(Ei,"Ensuite, nous calculons les fr\xE9quences de chaque mot dans le corpus comme nous le faisons pour la pr\xE9tok\xE9nisation :"),Ei.forEach(a),Sn=c(s),d(Ns.$$.fragment,s),Wn=c(s),d(Ms.$$.fragment,s),Kn=c(s),js=r(s,"P",{});var At=o(js);vr=t(At,"Comme nous l\u2019avons vu pr\xE9c\xE9demment, l\u2019alphabet est l\u2019unique ensemble compos\xE9 de toutes les premi\xE8res lettres des mots, et de toutes les autres lettres qui apparaissent dans les mots pr\xE9fix\xE9s par "),Wa=r(At,"CODE",{});var ki=o(Wa);qr=t(ki,"##"),ki.forEach(a),$r=t(At," :"),At.forEach(a),Un=c(s),d(Bs.$$.fragment,s),Fn=c(s),d(Hs.$$.fragment,s),Ln=c(s),Y=r(s,"P",{});var ke=o(Y);_r=t(ke,"Nous ajoutons \xE9galement les "),Ka=r(ke,"EM",{});var yi=o(Ka);wr=t(yi,"tokens"),yi.forEach(a),Er=t(ke," sp\xE9ciaux utilis\xE9s par le mod\xE8le au d\xE9but de ce vocabulaire. Dans le cas de BERT, il s\u2019agit de la liste "),Ua=r(ke,"CODE",{});var Pi=o(Ua);kr=t(Pi,'["[PAD]", "[UNK]", "[CLS]", "[SEP]", "[MASK]"]'),Pi.forEach(a),yr=t(ke," :"),ke.forEach(a),Rn=c(s),d(Ss.$$.fragment,s),In=c(s),gs=r(s,"P",{});var Nt=o(gs);Pr=t(Nt,"Ensuite, nous devons diviser chaque mot, avec toutes les lettres qui ne sont pas les premi\xE8res pr\xE9fix\xE9es par "),Fa=r(Nt,"CODE",{});var Ci=o(Fa);Cr=t(Ci,"##"),Ci.forEach(a),zr=t(Nt," :"),Nt.forEach(a),Vn=c(s),d(Ws.$$.fragment,s),Gn=c(s),he=r(s,"P",{});var zi=o(he);Dr=t(zi,"Maintenant que nous sommes pr\xEAts pour l\u2019entra\xEEnement, \xE9crivons une fonction qui calcule le score de chaque paire. Nous devrons l\u2019utiliser \xE0 chaque \xE9tape de l\u2019entra\xEEnement :"),zi.forEach(a),Jn=c(s),d(Ks.$$.fragment,s),Qn=c(s),de=r(s,"P",{});var Di=o(de);Or=t(Di,"Jetons un coup d\u2019\u0153il \xE0 une partie de ce dictionnaire apr\xE8s les premi\xE8res divisions :"),Di.forEach(a),Yn=c(s),d(Us.$$.fragment,s),Xn=c(s),d(Fs.$$.fragment,s),Zn=c(s),fe=r(s,"P",{});var Oi=o(fe);Tr=t(Oi,"Maintenant, trouver la paire avec le meilleur score ne prend qu\u2019une rapide boucle :"),Oi.forEach(a),st=c(s),d(Ls.$$.fragment,s),et=c(s),d(Rs.$$.fragment,s),at=c(s),X=r(s,"P",{});var ye=o(X);Ar=t(ye,"Ainsi, la premi\xE8re fusion \xE0 apprendre est "),La=r(ye,"CODE",{});var Ti=o(La);Nr=t(Ti,"('a', '##b') -> 'ab'"),Ti.forEach(a),Mr=t(ye," et nous ajoutons "),Ra=r(ye,"CODE",{});var Ai=o(Ra);Br=t(Ai,"'ab'"),Ai.forEach(a),Hr=t(ye," au vocabulaire :"),ye.forEach(a),nt=c(s),d(Is.$$.fragment,s),tt=c(s),bs=r(s,"P",{});var Mt=o(bs);Sr=t(Mt,"Pour continuer, nous devons appliquer cette fusion dans notre dictionnaire "),Ia=r(Mt,"CODE",{});var Ni=o(Ia);Wr=t(Ni,"splits"),Ni.forEach(a),Kr=t(Mt,". \xC9crivons une autre fonction pour cela :"),Mt.forEach(a),lt=c(s),d(Vs.$$.fragment,s),pt=c(s),je=r(s,"P",{});var Mi=o(je);Ur=t(Mi,"Et nous pouvons regarder le r\xE9sultat de la premi\xE8re fusion :"),Mi.forEach(a),rt=c(s),d(Gs.$$.fragment,s),ot=c(s),d(Js.$$.fragment,s),it=c(s),ge=r(s,"P",{});var Bi=o(ge);Fr=t(Bi,"Nous avons maintenant tout ce dont nous avons besoin pour boucler jusqu\u2019\xE0 ce que nous ayons appris toutes les fusions que nous voulons. Visons une taille de vocabulaire de 70 :"),Bi.forEach(a),ut=c(s),d(Qs.$$.fragment,s),ct=c(s),be=r(s,"P",{});var Hi=o(be);Lr=t(Hi,"Nous pouvons ensuite examiner le vocabulaire g\xE9n\xE9r\xE9 :"),Hi.forEach(a),mt=c(s),d(Ys.$$.fragment,s),ht=c(s),d(Xs.$$.fragment,s),dt=c(s),Z=r(s,"P",{});var Pe=o(Z);Rr=t(Pe,"Comme nous pouvons le voir, compar\xE9 \xE0 BPE, ce "),Va=r(Pe,"EM",{});var Si=o(Va);Ir=t(Si,"tokenizer"),Si.forEach(a),Vr=t(Pe," apprend les parties de mots comme des "),Ga=r(Pe,"EM",{});var Wi=o(Ga);Gr=t(Wi,"tokens"),Wi.forEach(a),Jr=t(Pe," un peu plus rapidement."),Pe.forEach(a),ft=c(s),d(xs.$$.fragment,s),jt=c(s),xe=r(s,"P",{});var Ki=o(xe);Qr=t(Ki,"Pour tokeniser un nouveau texte, on le pr\xE9tokenise, on le divise, puis on applique l\u2019algorithme de tokenisation sur chaque mot. En d\u2019autres termes, nous recherchons le plus grand sous-mot commen\xE7ant au d\xE9but du premier mot et le divisons. Puis nous r\xE9p\xE9tons le processus sur la deuxi\xE8me partie et ainsi de suite pour le reste de ce mot et les mots suivants dans le texte :"),Ki.forEach(a),gt=c(s),d(Zs.$$.fragment,s),bt=c(s),ve=r(s,"P",{});var Ui=o(ve);Yr=t(Ui,"Testons-le sur un mot qui fait partie du vocabulaire, et un autre qui n\u2019en fait pas partie :"),Ui.forEach(a),xt=c(s),d(se.$$.fragment,s),vt=c(s),d(ee.$$.fragment,s),qt=c(s),qe=r(s,"P",{});var Fi=o(qe);Xr=t(Fi,"Maintenant, \xE9crivons une fonction qui permet de tokeniser un texte :"),Fi.forEach(a),$t=c(s),d(ae.$$.fragment,s),_t=c(s),$e=r(s,"P",{});var Li=o($e);Zr=t(Li,"On peut l\u2019essayer sur n\u2019importe quel texte :"),Li.forEach(a),wt=c(s),d(ne.$$.fragment,s),Et=c(s),d(te.$$.fragment,s),kt=c(s),ss=r(s,"P",{});var Ce=o(ss);so=t(Ce,"C\u2019est tout pour l\u2019algorithme "),Ja=r(Ce,"EM",{});var Ri=o(Ja);eo=t(Ri,"WordPiece"),Ri.forEach(a),ao=t(Ce," ! Maintenant, jetons un coup d\u2019oeil \xE0 "),Qa=r(Ce,"EM",{});var Ii=o(Qa);no=t(Ii,"Unigram"),Ii.forEach(a),to=t(Ce,"."),Ce.forEach(a),this.h()},h(){B(m,"name","hf:doc:metadata"),B(m,"content",JSON.stringify(iu)),B(_,"id","toknisation-iwordpiecei"),B(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),B(_,"href","#toknisation-iwordpiecei"),B(x,"class","relative group"),B(rs,"id","algorithme-dentranement"),B(rs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),B(rs,"href","#algorithme-dentranement"),B(as,"class","relative group"),cn.a=null,B(cs,"id","algorithme-de-tokenisation"),B(cs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),B(cs,"href","#algorithme-de-tokenisation"),B(ns,"class","relative group"),B(ds,"id","implmentation-de-iwordpiecei"),B(ds,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),B(ds,"href","#implmentation-de-iwordpiecei"),B(ts,"class","relative group")},m(s,l){e(document.head,m),i(s,E,l),i(s,x,l),e(x,_),e(_,w),f(v,w,null),e(x,q),e(x,y),e(y,S),e(y,O),e(O,G),i(s,U,l),f(T,s,l),i(s,$s,l),i(s,L,l),e(L,ls),e(ls,Ht),e(L,St),e(L,ze),e(ze,Wt),e(L,Kt),i(s,an,l),f(_s,s,l),i(s,nn,l),f(ps,s,l),i(s,tn,l),i(s,as,l),e(as,rs),e(rs,De),f(ws,De,null),e(as,Ut),e(as,Oe),e(Oe,Ft),i(s,ln,l),f(os,s,l),i(s,pn,l),i(s,W,l),e(W,Lt),e(W,Te),e(Te,Rt),e(W,It),e(W,Ae),e(Ae,Vt),e(W,Gt),e(W,Ne),e(Ne,Jt),e(W,Qt),e(W,Me),e(Me,Yt),e(W,Xt),i(s,rn,l),f(Es,s,l),i(s,on,l),i(s,is,l),e(is,Zt),e(is,Be),e(Be,sl),e(is,el),i(s,un,l),i(s,V,l),e(V,al),e(V,He),e(He,nl),e(V,tl),e(V,Se),e(Se,ll),e(V,pl),cn.m(Vi,V),i(s,mn,l),i(s,z,l),e(z,rl),e(z,We),e(We,ol),e(z,il),e(z,Ke),e(Ke,ul),e(z,cl),e(z,Ue),e(Ue,ml),e(z,hl),e(z,Fe),e(Fe,dl),e(z,fl),e(z,Le),e(Le,jl),e(z,gl),e(z,Re),e(Re,bl),e(z,xl),e(z,Ie),e(Ie,vl),e(z,ql),i(s,hn,l),i(s,re,l),e(re,$l),i(s,dn,l),f(ks,s,l),i(s,fn,l),i(s,oe,l),e(oe,_l),i(s,jn,l),f(ys,s,l),i(s,gn,l),i(s,P,l),e(P,wl),e(P,Ve),e(Ve,El),e(P,kl),e(P,Ge),e(Ge,yl),e(P,Pl),e(P,Je),e(Je,Cl),e(P,zl),e(P,Qe),e(Qe,Dl),e(P,Ol),e(P,Ye),e(Ye,Tl),e(P,Al),e(P,Xe),e(Xe,Nl),e(P,Ml),e(P,Ze),e(Ze,Bl),e(P,Hl),e(P,sa),e(sa,Sl),e(P,Wl),i(s,bn,l),i(s,R,l),e(R,Kl),e(R,ea),e(ea,Ul),e(R,Fl),e(R,aa),e(aa,Ll),e(R,Rl),e(R,na),e(na,Il),e(R,Vl),i(s,xn,l),f(Ps,s,l),i(s,vn,l),i(s,J,l),e(J,Gl),e(J,ta),e(ta,Jl),e(J,Ql),e(J,la),e(la,Yl),e(J,Xl),i(s,qn,l),f(Cs,s,l),i(s,$n,l),i(s,Q,l),e(Q,Zl),e(Q,pa),e(pa,sp),e(Q,ep),e(Q,ra),e(ra,ap),e(Q,np),i(s,_n,l),f(zs,s,l),i(s,wn,l),i(s,ie,l),e(ie,tp),i(s,En,l),f(us,s,l),i(s,kn,l),i(s,ns,l),e(ns,cs),e(cs,oa),f(Ds,oa,null),e(ns,lp),e(ns,ia),e(ia,pp),i(s,yn,l),i(s,k,l),e(k,rp),e(k,ua),e(ua,op),e(k,ip),e(k,ca),e(ca,up),e(k,cp),e(k,ma),e(ma,mp),e(k,hp),e(k,ha),e(ha,dp),e(k,fp),e(k,da),e(da,jp),e(k,gp),e(k,fa),e(fa,bp),e(k,xp),e(k,ja),e(ja,vp),e(k,qp),e(k,ga),e(ga,$p),e(k,_p),e(k,ba),e(ba,wp),e(k,Ep),i(s,Pn,l),i(s,ms,l),e(ms,kp),e(ms,xa),e(xa,yp),e(ms,Pp),i(s,Cn,l),i(s,C,l),e(C,Cp),e(C,va),e(va,zp),e(C,Dp),e(C,qa),e(qa,Op),e(C,Tp),e(C,$a),e($a,Ap),e(C,Np),e(C,_a),e(_a,Mp),e(C,Bp),e(C,wa),e(wa,Hp),e(C,Sp),e(C,Ea),e(Ea,Wp),e(C,Kp),e(C,ka),e(ka,Up),e(C,Fp),e(C,ya),e(ya,Lp),e(C,Rp),i(s,zn,l),i(s,A,l),e(A,Ip),e(A,Pa),e(Pa,Vp),e(A,Gp),e(A,Ca),e(Ca,Jp),e(A,Qp),e(A,za),e(za,Yp),e(A,Xp),e(A,Da),e(Da,Zp),e(A,sr),e(A,Oa),e(Oa,er),e(A,ar),e(A,Ta),e(Ta,nr),e(A,tr),i(s,Dn,l),f(hs,s,l),i(s,On,l),i(s,ts,l),e(ts,ds),e(ds,Aa),f(Os,Aa,null),e(ts,lr),e(ts,ue),e(ue,pr),e(ue,Na),e(Na,rr),i(s,Tn,l),i(s,fs,l),e(fs,or),e(fs,Ma),e(Ma,ir),e(fs,ur),i(s,An,l),i(s,ce,l),e(ce,cr),i(s,Nn,l),f(Ts,s,l),i(s,Mn,l),i(s,I,l),e(I,mr),e(I,Ba),e(Ba,hr),e(I,dr),e(I,Ha),e(Ha,fr),e(I,jr),e(I,Sa),e(Sa,gr),e(I,br),i(s,Bn,l),f(As,s,l),i(s,Hn,l),i(s,me,l),e(me,xr),i(s,Sn,l),f(Ns,s,l),i(s,Wn,l),f(Ms,s,l),i(s,Kn,l),i(s,js,l),e(js,vr),e(js,Wa),e(Wa,qr),e(js,$r),i(s,Un,l),f(Bs,s,l),i(s,Fn,l),f(Hs,s,l),i(s,Ln,l),i(s,Y,l),e(Y,_r),e(Y,Ka),e(Ka,wr),e(Y,Er),e(Y,Ua),e(Ua,kr),e(Y,yr),i(s,Rn,l),f(Ss,s,l),i(s,In,l),i(s,gs,l),e(gs,Pr),e(gs,Fa),e(Fa,Cr),e(gs,zr),i(s,Vn,l),f(Ws,s,l),i(s,Gn,l),i(s,he,l),e(he,Dr),i(s,Jn,l),f(Ks,s,l),i(s,Qn,l),i(s,de,l),e(de,Or),i(s,Yn,l),f(Us,s,l),i(s,Xn,l),f(Fs,s,l),i(s,Zn,l),i(s,fe,l),e(fe,Tr),i(s,st,l),f(Ls,s,l),i(s,et,l),f(Rs,s,l),i(s,at,l),i(s,X,l),e(X,Ar),e(X,La),e(La,Nr),e(X,Mr),e(X,Ra),e(Ra,Br),e(X,Hr),i(s,nt,l),f(Is,s,l),i(s,tt,l),i(s,bs,l),e(bs,Sr),e(bs,Ia),e(Ia,Wr),e(bs,Kr),i(s,lt,l),f(Vs,s,l),i(s,pt,l),i(s,je,l),e(je,Ur),i(s,rt,l),f(Gs,s,l),i(s,ot,l),f(Js,s,l),i(s,it,l),i(s,ge,l),e(ge,Fr),i(s,ut,l),f(Qs,s,l),i(s,ct,l),i(s,be,l),e(be,Lr),i(s,mt,l),f(Ys,s,l),i(s,ht,l),f(Xs,s,l),i(s,dt,l),i(s,Z,l),e(Z,Rr),e(Z,Va),e(Va,Ir),e(Z,Vr),e(Z,Ga),e(Ga,Gr),e(Z,Jr),i(s,ft,l),f(xs,s,l),i(s,jt,l),i(s,xe,l),e(xe,Qr),i(s,gt,l),f(Zs,s,l),i(s,bt,l),i(s,ve,l),e(ve,Yr),i(s,xt,l),f(se,s,l),i(s,vt,l),f(ee,s,l),i(s,qt,l),i(s,qe,l),e(qe,Xr),i(s,$t,l),f(ae,s,l),i(s,_t,l),i(s,$e,l),e($e,Zr),i(s,wt,l),f(ne,s,l),i(s,Et,l),f(te,s,l),i(s,kt,l),i(s,ss,l),e(ss,so),e(ss,Ja),e(Ja,eo),e(ss,ao),e(ss,Qa),e(Qa,no),e(ss,to),yt=!0},p(s,[l]){const le={};l&2&&(le.$$scope={dirty:l,ctx:s}),ps.$set(le);const Ya={};l&2&&(Ya.$$scope={dirty:l,ctx:s}),os.$set(Ya);const Xa={};l&2&&(Xa.$$scope={dirty:l,ctx:s}),us.$set(Xa);const _e={};l&2&&(_e.$$scope={dirty:l,ctx:s}),hs.$set(_e);const Za={};l&2&&(Za.$$scope={dirty:l,ctx:s}),xs.$set(Za)},i(s){yt||(j(v.$$.fragment,s),j(T.$$.fragment,s),j(_s.$$.fragment,s),j(ps.$$.fragment,s),j(ws.$$.fragment,s),j(os.$$.fragment,s),j(Es.$$.fragment,s),j(ks.$$.fragment,s),j(ys.$$.fragment,s),j(Ps.$$.fragment,s),j(Cs.$$.fragment,s),j(zs.$$.fragment,s),j(us.$$.fragment,s),j(Ds.$$.fragment,s),j(hs.$$.fragment,s),j(Os.$$.fragment,s),j(Ts.$$.fragment,s),j(As.$$.fragment,s),j(Ns.$$.fragment,s),j(Ms.$$.fragment,s),j(Bs.$$.fragment,s),j(Hs.$$.fragment,s),j(Ss.$$.fragment,s),j(Ws.$$.fragment,s),j(Ks.$$.fragment,s),j(Us.$$.fragment,s),j(Fs.$$.fragment,s),j(Ls.$$.fragment,s),j(Rs.$$.fragment,s),j(Is.$$.fragment,s),j(Vs.$$.fragment,s),j(Gs.$$.fragment,s),j(Js.$$.fragment,s),j(Qs.$$.fragment,s),j(Ys.$$.fragment,s),j(Xs.$$.fragment,s),j(xs.$$.fragment,s),j(Zs.$$.fragment,s),j(se.$$.fragment,s),j(ee.$$.fragment,s),j(ae.$$.fragment,s),j(ne.$$.fragment,s),j(te.$$.fragment,s),yt=!0)},o(s){g(v.$$.fragment,s),g(T.$$.fragment,s),g(_s.$$.fragment,s),g(ps.$$.fragment,s),g(ws.$$.fragment,s),g(os.$$.fragment,s),g(Es.$$.fragment,s),g(ks.$$.fragment,s),g(ys.$$.fragment,s),g(Ps.$$.fragment,s),g(Cs.$$.fragment,s),g(zs.$$.fragment,s),g(us.$$.fragment,s),g(Ds.$$.fragment,s),g(hs.$$.fragment,s),g(Os.$$.fragment,s),g(Ts.$$.fragment,s),g(As.$$.fragment,s),g(Ns.$$.fragment,s),g(Ms.$$.fragment,s),g(Bs.$$.fragment,s),g(Hs.$$.fragment,s),g(Ss.$$.fragment,s),g(Ws.$$.fragment,s),g(Ks.$$.fragment,s),g(Us.$$.fragment,s),g(Fs.$$.fragment,s),g(Ls.$$.fragment,s),g(Rs.$$.fragment,s),g(Is.$$.fragment,s),g(Vs.$$.fragment,s),g(Gs.$$.fragment,s),g(Js.$$.fragment,s),g(Qs.$$.fragment,s),g(Ys.$$.fragment,s),g(Xs.$$.fragment,s),g(xs.$$.fragment,s),g(Zs.$$.fragment,s),g(se.$$.fragment,s),g(ee.$$.fragment,s),g(ae.$$.fragment,s),g(ne.$$.fragment,s),g(te.$$.fragment,s),yt=!1},d(s){a(m),s&&a(E),s&&a(x),b(v),s&&a(U),b(T,s),s&&a($s),s&&a(L),s&&a(an),b(_s,s),s&&a(nn),b(ps,s),s&&a(tn),s&&a(as),b(ws),s&&a(ln),b(os,s),s&&a(pn),s&&a(W),s&&a(rn),b(Es,s),s&&a(on),s&&a(is),s&&a(un),s&&a(V),s&&a(mn),s&&a(z),s&&a(hn),s&&a(re),s&&a(dn),b(ks,s),s&&a(fn),s&&a(oe),s&&a(jn),b(ys,s),s&&a(gn),s&&a(P),s&&a(bn),s&&a(R),s&&a(xn),b(Ps,s),s&&a(vn),s&&a(J),s&&a(qn),b(Cs,s),s&&a($n),s&&a(Q),s&&a(_n),b(zs,s),s&&a(wn),s&&a(ie),s&&a(En),b(us,s),s&&a(kn),s&&a(ns),b(Ds),s&&a(yn),s&&a(k),s&&a(Pn),s&&a(ms),s&&a(Cn),s&&a(C),s&&a(zn),s&&a(A),s&&a(Dn),b(hs,s),s&&a(On),s&&a(ts),b(Os),s&&a(Tn),s&&a(fs),s&&a(An),s&&a(ce),s&&a(Nn),b(Ts,s),s&&a(Mn),s&&a(I),s&&a(Bn),b(As,s),s&&a(Hn),s&&a(me),s&&a(Sn),b(Ns,s),s&&a(Wn),b(Ms,s),s&&a(Kn),s&&a(js),s&&a(Un),b(Bs,s),s&&a(Fn),b(Hs,s),s&&a(Ln),s&&a(Y),s&&a(Rn),b(Ss,s),s&&a(In),s&&a(gs),s&&a(Vn),b(Ws,s),s&&a(Gn),s&&a(he),s&&a(Jn),b(Ks,s),s&&a(Qn),s&&a(de),s&&a(Yn),b(Us,s),s&&a(Xn),b(Fs,s),s&&a(Zn),s&&a(fe),s&&a(st),b(Ls,s),s&&a(et),b(Rs,s),s&&a(at),s&&a(X),s&&a(nt),b(Is,s),s&&a(tt),s&&a(bs),s&&a(lt),b(Vs,s),s&&a(pt),s&&a(je),s&&a(rt),b(Gs,s),s&&a(ot),b(Js,s),s&&a(it),s&&a(ge),s&&a(ut),b(Qs,s),s&&a(ct),s&&a(be),s&&a(mt),b(Ys,s),s&&a(ht),b(Xs,s),s&&a(dt),s&&a(Z),s&&a(ft),b(xs,s),s&&a(jt),s&&a(xe),s&&a(gt),b(Zs,s),s&&a(bt),s&&a(ve),s&&a(xt),b(se,s),s&&a(vt),b(ee,s),s&&a(qt),s&&a(qe),s&&a($t),b(ae,s),s&&a(_t),s&&a($e),s&&a(wt),b(ne,s),s&&a(Et),b(te,s),s&&a(kt),s&&a(ss)}}}const iu={local:"toknisation-iwordpiecei",sections:[{local:"algorithme-dentranement",title:"Algorithme d'entra\xEEnement"},{local:"algorithme-de-tokenisation",title:"Algorithme de tokenisation"},{local:"implmentation-de-iwordpiecei",title:"Impl\xE9mentation de <i>WordPiece</i>"}],title:"Tok\xE9nisation <i>WordPiece</i>"};function uu(F){return su(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gu extends Gi{constructor(m){super();Ji(this,m,uu,ou,Qi,{})}}export{gu as default,iu as metadata};
