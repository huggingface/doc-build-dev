import{S as Ra,i as La,s as Ua,e as f,k as m,w as B,t as n,M as Ya,c as h,d as o,m as _,x as C,a as d,h as i,b as q,G as a,g as c,y as P,o as b,p as Fe,q as y,B as A,v as Ga,n as He}from"../../chunks/vendor-hf-doc-builder.js";import{Y as Ha}from"../../chunks/Youtube-hf-doc-builder.js";import{I as _t}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as S}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as Wa}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";import{F as Ja}from"../../chunks/FrameworkSwitchCourse-hf-doc-builder.js";function Va(k){let s,l;return s=new Wa({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter2/section3_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter2/section3_tf.ipynb"}]}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function Ka(k){let s,l;return s=new Wa({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter2/section3_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter2/section3_pt.ipynb"}]}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function Qa(k){let s,l;return s=new Ha({props:{id:"d3JVgghSOew"}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function Xa(k){let s,l;return s=new Ha({props:{id:"AhChOFRegn4"}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function Za(k){let s,l,t,p,E,g,v,T,j,$,M;return{c(){s=f("p"),l=n("In this section we\u2019ll take a closer look at creating and using a model. We\u2019ll use the "),t=f("code"),p=n("TFAutoModel"),E=n(" class, which is handy when you want to instantiate any model from a checkpoint."),g=m(),v=f("p"),T=n("The "),j=f("code"),$=n("TFAutoModel"),M=n(" class and all of its relatives are actually simple wrappers over the wide variety of models available in the library. It\u2019s a clever wrapper as it can automatically guess the appropriate model architecture for your checkpoint, and then instantiates a model with this architecture.")},l(u){s=h(u,"P",{});var w=d(s);l=i(w,"In this section we\u2019ll take a closer look at creating and using a model. We\u2019ll use the "),t=h(w,"CODE",{});var z=d(t);p=i(z,"TFAutoModel"),z.forEach(o),E=i(w," class, which is handy when you want to instantiate any model from a checkpoint."),w.forEach(o),g=_(u),v=h(u,"P",{});var N=d(v);T=i(N,"The "),j=h(N,"CODE",{});var D=d(j);$=i(D,"TFAutoModel"),D.forEach(o),M=i(N," class and all of its relatives are actually simple wrappers over the wide variety of models available in the library. It\u2019s a clever wrapper as it can automatically guess the appropriate model architecture for your checkpoint, and then instantiates a model with this architecture."),N.forEach(o)},m(u,w){c(u,s,w),a(s,l),a(s,t),a(t,p),a(s,E),c(u,g,w),c(u,v,w),a(v,T),a(v,j),a(j,$),a(v,M)},d(u){u&&o(s),u&&o(g),u&&o(v)}}}function er(k){let s,l,t,p,E,g,v,T,j,$,M;return{c(){s=f("p"),l=n("In this section we\u2019ll take a closer look at creating and using a model. We\u2019ll use the "),t=f("code"),p=n("AutoModel"),E=n(" class, which is handy when you want to instantiate any model from a checkpoint."),g=m(),v=f("p"),T=n("The "),j=f("code"),$=n("AutoModel"),M=n(" class and all of its relatives are actually simple wrappers over the wide variety of models available in the library. It\u2019s a clever wrapper as it can automatically guess the appropriate model architecture for your checkpoint, and then instantiates a model with this architecture.")},l(u){s=h(u,"P",{});var w=d(s);l=i(w,"In this section we\u2019ll take a closer look at creating and using a model. We\u2019ll use the "),t=h(w,"CODE",{});var z=d(t);p=i(z,"AutoModel"),z.forEach(o),E=i(w," class, which is handy when you want to instantiate any model from a checkpoint."),w.forEach(o),g=_(u),v=h(u,"P",{});var N=d(v);T=i(N,"The "),j=h(N,"CODE",{});var D=d(j);$=i(D,"AutoModel"),D.forEach(o),M=i(N," class and all of its relatives are actually simple wrappers over the wide variety of models available in the library. It\u2019s a clever wrapper as it can automatically guess the appropriate model architecture for your checkpoint, and then instantiates a model with this architecture."),N.forEach(o)},m(u,w){c(u,s,w),a(s,l),a(s,t),a(t,p),a(s,E),c(u,g,w),c(u,v,w),a(v,T),a(v,j),a(j,$),a(v,M)},d(u){u&&o(s),u&&o(g),u&&o(v)}}}function tr(k){let s,l;return s=new S({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, TFBertModel

<span class="hljs-comment"># Building the config</span>
config = BertConfig()

<span class="hljs-comment"># Building the model from the config</span>
model = TFBertModel(config)`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function or(k){let s,l;return s=new S({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, BertModel

<span class="hljs-comment"># Building the config</span>
config = BertConfig()

<span class="hljs-comment"># Building the model from the config</span>
model = BertModel(config)`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function sr(k){let s,l;return s=new S({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, TFBertModel

config = BertConfig()
model = TFBertModel(config)

<span class="hljs-comment"># Model is randomly initialized!</span>`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function ar(k){let s,l;return s=new S({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, BertModel

config = BertConfig()
model = BertModel(config)

<span class="hljs-comment"># Model is randomly initialized!</span>`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function rr(k){let s,l,t,p,E,g,v,T,j,$,M;return s=new S({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFBertModel

model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)`}}),{c(){B(s.$$.fragment),l=m(),t=f("p"),p=n("As you saw earlier, we could replace "),E=f("code"),g=n("TFBertModel"),v=n(" with the equivalent "),T=f("code"),j=n("TFAutoModel"),$=n(" class. We\u2019ll do this from now on as this produces checkpoint-agnostic code; if your code works for one checkpoint, it should work seamlessly with another. This applies even if the architecture is different, as long as the checkpoint was trained for a similar task (for example, a sentiment analysis task).")},l(u){C(s.$$.fragment,u),l=_(u),t=h(u,"P",{});var w=d(t);p=i(w,"As you saw earlier, we could replace "),E=h(w,"CODE",{});var z=d(E);g=i(z,"TFBertModel"),z.forEach(o),v=i(w," with the equivalent "),T=h(w,"CODE",{});var N=d(T);j=i(N,"TFAutoModel"),N.forEach(o),$=i(w," class. We\u2019ll do this from now on as this produces checkpoint-agnostic code; if your code works for one checkpoint, it should work seamlessly with another. This applies even if the architecture is different, as long as the checkpoint was trained for a similar task (for example, a sentiment analysis task)."),w.forEach(o)},m(u,w){P(s,u,w),c(u,l,w),c(u,t,w),a(t,p),a(t,E),a(E,g),a(t,v),a(t,T),a(T,j),a(t,$),M=!0},i(u){M||(y(s.$$.fragment,u),M=!0)},o(u){b(s.$$.fragment,u),M=!1},d(u){A(s,u),u&&o(l),u&&o(t)}}}function lr(k){let s,l,t,p,E,g,v,T,j,$,M;return s=new S({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel

model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)`}}),{c(){B(s.$$.fragment),l=m(),t=f("p"),p=n("As you saw earlier, we could replace "),E=f("code"),g=n("BertModel"),v=n(" with the equivalent "),T=f("code"),j=n("AutoModel"),$=n(" class. We\u2019ll do this from now on as this produces checkpoint-agnostic code; if your code works for one checkpoint, it should work seamlessly with another. This applies even if the architecture is different, as long as the checkpoint was trained for a similar task (for example, a sentiment analysis task).")},l(u){C(s.$$.fragment,u),l=_(u),t=h(u,"P",{});var w=d(t);p=i(w,"As you saw earlier, we could replace "),E=h(w,"CODE",{});var z=d(E);g=i(z,"BertModel"),z.forEach(o),v=i(w," with the equivalent "),T=h(w,"CODE",{});var N=d(T);j=i(N,"AutoModel"),N.forEach(o),$=i(w," class. We\u2019ll do this from now on as this produces checkpoint-agnostic code; if your code works for one checkpoint, it should work seamlessly with another. This applies even if the architecture is different, as long as the checkpoint was trained for a similar task (for example, a sentiment analysis task)."),w.forEach(o)},m(u,w){P(s,u,w),c(u,l,w),c(u,t,w),a(t,p),a(t,E),a(E,g),a(t,v),a(t,T),a(T,j),a(t,$),M=!0},i(u){M||(y(s.$$.fragment,u),M=!0)},o(u){b(s.$$.fragment,u),M=!1},d(u){A(s,u),u&&o(l),u&&o(t)}}}function nr(k){let s,l;return s=new S({props:{code:"",highlighted:`ls <span class="hljs-keyword">directory_on_my_computer
</span>
<span class="hljs-built_in">config</span>.<span class="hljs-keyword">json </span>tf_model.h5`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function ir(k){let s,l;return s=new S({props:{code:"",highlighted:`ls <span class="hljs-keyword">directory_on_my_computer
</span>
<span class="hljs-built_in">config</span>.<span class="hljs-keyword">json </span>pytorch_model.<span class="hljs-keyword">bin</span>`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function cr(k){let s,l,t,p,E,g,v,T;return{c(){s=f("p"),l=n("The "),t=f("em"),p=n("tf_model.h5"),E=n(" file is known as the "),g=f("em"),v=n("state dictionary"),T=n("; it contains all your model\u2019s weights. The two files go hand in hand; the configuration is necessary to know your model\u2019s architecture, while the model weights are your model\u2019s parameters.")},l(j){s=h(j,"P",{});var $=d(s);l=i($,"The "),t=h($,"EM",{});var M=d(t);p=i(M,"tf_model.h5"),M.forEach(o),E=i($," file is known as the "),g=h($,"EM",{});var u=d(g);v=i(u,"state dictionary"),u.forEach(o),T=i($,"; it contains all your model\u2019s weights. The two files go hand in hand; the configuration is necessary to know your model\u2019s architecture, while the model weights are your model\u2019s parameters."),$.forEach(o)},m(j,$){c(j,s,$),a(s,l),a(s,t),a(t,p),a(s,E),a(s,g),a(g,v),a(s,T)},d(j){j&&o(s)}}}function fr(k){let s,l,t,p,E,g,v,T;return{c(){s=f("p"),l=n("The "),t=f("em"),p=n("pytorch_model.bin"),E=n(" file is known as the "),g=f("em"),v=n("state dictionary"),T=n("; it contains all your model\u2019s weights. The two files go hand in hand; the configuration is necessary to know your model\u2019s architecture, while the model weights are your model\u2019s parameters.")},l(j){s=h(j,"P",{});var $=d(s);l=i($,"The "),t=h($,"EM",{});var M=d(t);p=i(M,"pytorch_model.bin"),M.forEach(o),E=i($," file is known as the "),g=h($,"EM",{});var u=d(g);v=i(u,"state dictionary"),u.forEach(o),T=i($,"; it contains all your model\u2019s weights. The two files go hand in hand; the configuration is necessary to know your model\u2019s architecture, while the model weights are your model\u2019s parameters."),$.forEach(o)},m(j,$){c(j,s,$),a(s,l),a(s,t),a(t,p),a(s,E),a(s,g),a(g,v),a(s,T)},d(j){j&&o(s)}}}function hr(k){let s,l;return s=new S({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

model_inputs = tf.constant(encoded_sequences)`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function dr(k){let s,l;return s=new S({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> torch

model_inputs = torch.tensor(encoded_sequences)`}}),{c(){B(s.$$.fragment)},l(t){C(s.$$.fragment,t)},m(t,p){P(s,t,p),l=!0},i(t){l||(y(s.$$.fragment,t),l=!0)},o(t){b(s.$$.fragment,t),l=!1},d(t){A(s,t)}}}function ur(k){let s,l,t,p,E,g,v,T,j,$,M,u,w,z,N,D,F,We,Re,Le,Co,Ft,X,re,wt,ye,Po,bt,Ao,Ht,Ue,zo,Wt,H,W,Ye,Ge,No,Rt,ke,Lt,ve,Ut,O,Do,yt,So,Oo,kt,Io,xo,vt,Fo,Ho,Yt,Z,le,$t,$e,Wo,gt,Ro,Gt,Je,Lo,Jt,R,L,Ve,ne,Uo,Ke,Yo,Go,Vt,ie,Jo,Et,Vo,Ko,Kt,U,Y,Qe,I,Qo,Tt,Xo,Zo,jt,es,ts,ge,os,ss,Qt,Xe,as,Xt,x,rs,qt,ls,ns,Mt,is,cs,Bt,fs,hs,Zt,ce,ds,Ee,us,ps,eo,ee,fe,Ct,Te,ms,Pt,_s,to,Q,ws,At,bs,ys,zt,ks,vs,oo,je,so,Ze,$s,ao,G,J,et,he,gs,Nt,Es,Ts,ro,tt,te,de,Dt,qe,js,St,qs,lo,ot,Ms,no,st,Bs,io,at,Cs,co,Me,fo,ue,Ps,Ot,As,zs,ho,Be,uo,rt,Ns,po,V,K,lt,oe,pe,It,Ce,Ds,xt,Ss,mo,nt,Os,_o,Pe,wo,it,Is,bo;t=new Ja({props:{fw:k[0]}}),T=new _t({});const xs=[Ka,Va],Ae=[];function Fs(e,r){return e[0]==="pt"?0:1}w=Fs(k),z=Ae[w]=xs[w](k);const Hs=[Xa,Qa],ze=[];function Ws(e,r){return e[0]==="pt"?0:1}D=Ws(k),F=ze[D]=Hs[D](k);function Rs(e,r){return e[0]==="pt"?er:Za}let yo=Rs(k),se=yo(k);ye=new _t({});const Ls=[or,tr],Ne=[];function Us(e,r){return e[0]==="pt"?0:1}H=Us(k),W=Ne[H]=Ls[H](k),ke=new S({props:{code:"print(config)",highlighted:'<span class="hljs-built_in">print</span>(config)'}}),ve=new S({props:{code:`BertConfig {
  [...]
  "hidden_size": 768,
  "intermediate_size": 3072,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  [...]
}`,highlighted:`BertConfig {
  [...]
  <span class="hljs-string">&quot;hidden_size&quot;</span>: <span class="hljs-number">768</span>,
  <span class="hljs-string">&quot;intermediate_size&quot;</span>: <span class="hljs-number">3072</span>,
  <span class="hljs-string">&quot;max_position_embeddings&quot;</span>: <span class="hljs-number">512</span>,
  <span class="hljs-string">&quot;num_attention_heads&quot;</span>: <span class="hljs-number">12</span>,
  <span class="hljs-string">&quot;num_hidden_layers&quot;</span>: <span class="hljs-number">12</span>,
  [...]
}`}}),$e=new _t({});const Ys=[ar,sr],De=[];function Gs(e,r){return e[0]==="pt"?0:1}R=Gs(k),L=De[R]=Ys[R](k);const Js=[lr,rr],Se=[];function Vs(e,r){return e[0]==="pt"?0:1}U=Vs(k),Y=Se[U]=Js[U](k),Te=new _t({}),je=new S({props:{code:'model.save_pretrained("directory_on_my_computer")',highlighted:'model.save_pretrained(<span class="hljs-string">&quot;directory_on_my_computer&quot;</span>)'}});const Ks=[ir,nr],Oe=[];function Qs(e,r){return e[0]==="pt"?0:1}G=Qs(k),J=Oe[G]=Ks[G](k);function Xs(e,r){return e[0]==="pt"?fr:cr}let ko=Xs(k),ae=ko(k);qe=new _t({}),Me=new S({props:{code:'sequences = ["Hello!", "Cool.", "Nice!"]',highlighted:'sequences = [<span class="hljs-string">&quot;Hello!&quot;</span>, <span class="hljs-string">&quot;Cool.&quot;</span>, <span class="hljs-string">&quot;Nice!&quot;</span>]'}}),Be=new S({props:{code:`encoded_sequences = [
    [101, 7592, 999, 102],
    [101, 4658, 1012, 102],
    [101, 3835, 999, 102],
]`,highlighted:`encoded_sequences = [
    [<span class="hljs-number">101</span>, <span class="hljs-number">7592</span>, <span class="hljs-number">999</span>, <span class="hljs-number">102</span>],
    [<span class="hljs-number">101</span>, <span class="hljs-number">4658</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>],
    [<span class="hljs-number">101</span>, <span class="hljs-number">3835</span>, <span class="hljs-number">999</span>, <span class="hljs-number">102</span>],
]`}});const Zs=[dr,hr],Ie=[];function ea(e,r){return e[0]==="pt"?0:1}return V=ea(k),K=Ie[V]=Zs[V](k),Ce=new _t({}),Pe=new S({props:{code:"output = model(model_inputs)",highlighted:"output = model(model_inputs)"}}),{c(){s=f("meta"),l=m(),B(t.$$.fragment),p=m(),E=f("h1"),g=f("a"),v=f("span"),B(T.$$.fragment),j=m(),$=f("span"),M=n("Models"),u=m(),z.c(),N=m(),F.c(),We=m(),se.c(),Re=m(),Le=f("p"),Co=n("However, if you know the type of model you want to use, you can use the class that defines its architecture directly. Let\u2019s take a look at how this works with a BERT model."),Ft=m(),X=f("h2"),re=f("a"),wt=f("span"),B(ye.$$.fragment),Po=m(),bt=f("span"),Ao=n("Creating a Transformer"),Ht=m(),Ue=f("p"),zo=n("The first thing we\u2019ll need to do to initialize a BERT model is load a configuration object:"),Wt=m(),W.c(),Ye=m(),Ge=f("p"),No=n("The configuration contains many attributes that are used to build the model:"),Rt=m(),B(ke.$$.fragment),Lt=m(),B(ve.$$.fragment),Ut=m(),O=f("p"),Do=n("While you haven\u2019t seen what all of these attributes do yet, you should recognize some of them: the "),yt=f("code"),So=n("hidden_size"),Oo=n(" attribute defines the size of the "),kt=f("code"),Io=n("hidden_states"),xo=n(" vector, and "),vt=f("code"),Fo=n("num_hidden_layers"),Ho=n(" defines the number of layers the Transformer model has."),Yt=m(),Z=f("h3"),le=f("a"),$t=f("span"),B($e.$$.fragment),Wo=m(),gt=f("span"),Ro=n("Different loading methods"),Gt=m(),Je=f("p"),Lo=n("Creating a model from the default configuration initializes it with random values:"),Jt=m(),L.c(),Ve=m(),ne=f("p"),Uo=n("The model can be used in this state, but it will output gibberish; it needs to be trained first. We could train the model from scratch on the task at hand, but as you saw in "),Ke=f("a"),Yo=n("Chapter 1"),Go=n(", this would require a long time and a lot of data, and it would have a non-negligible environmental impact. To avoid unnecessary and duplicated effort, it\u2019s imperative to be able to share and reuse models that have already been trained."),Vt=m(),ie=f("p"),Jo=n("Loading a Transformer model that is already trained is simple \u2014 we can do this using the "),Et=f("code"),Vo=n("from_pretrained()"),Ko=n(" method:"),Kt=m(),Y.c(),Qe=m(),I=f("p"),Qo=n("In the code sample above we didn\u2019t use "),Tt=f("code"),Xo=n("BertConfig"),Zo=n(", and instead loaded a pretrained model via the "),jt=f("code"),es=n("bert-base-cased"),ts=n(" identifier. This is a model checkpoint that was trained by the authors of BERT themselves; you can find more details about it in its "),ge=f("a"),os=n("model card"),ss=n("."),Qt=m(),Xe=f("p"),as=n("This model is now initialized with all the weights of the checkpoint. It can be used directly for inference on the tasks it was trained on, and it can also be fine-tuned on a new task. By training with pretrained weights rather than from scratch, we can quickly achieve good results."),Xt=m(),x=f("p"),rs=n("The weights have been downloaded and cached (so future calls to the "),qt=f("code"),ls=n("from_pretrained()"),ns=n(" method won\u2019t re-download them) in the cache folder, which defaults to "),Mt=f("em"),is=n("~/.cache/huggingface/transformers"),cs=n(". You can customize your cache folder by setting the "),Bt=f("code"),fs=n("HF_HOME"),hs=n(" environment variable."),Zt=m(),ce=f("p"),ds=n("The identifier used to load the model can be the identifier of any model on the Model Hub, as long as it is compatible with the BERT architecture. The entire list of available BERT checkpoints can be found "),Ee=f("a"),us=n("here"),ps=n("."),eo=m(),ee=f("h3"),fe=f("a"),Ct=f("span"),B(Te.$$.fragment),ms=m(),Pt=f("span"),_s=n("Saving methods"),to=m(),Q=f("p"),ws=n("Saving a model is as easy as loading one \u2014 we use the "),At=f("code"),bs=n("save_pretrained()"),ys=n(" method, which is analogous to the "),zt=f("code"),ks=n("from_pretrained()"),vs=n(" method:"),oo=m(),B(je.$$.fragment),so=m(),Ze=f("p"),$s=n("This saves two files to your disk:"),ao=m(),J.c(),et=m(),he=f("p"),gs=n("If you take a look at the "),Nt=f("em"),Es=n("config.json"),Ts=n(" file, you\u2019ll recognize the attributes necessary to build the model architecture. This file also contains some metadata, such as where the checkpoint originated and what \u{1F917} Transformers version you were using when you last saved the checkpoint."),ro=m(),ae.c(),tt=m(),te=f("h2"),de=f("a"),Dt=f("span"),B(qe.$$.fragment),js=m(),St=f("span"),qs=n("Using a Transformer model for inference"),lo=m(),ot=f("p"),Ms=n("Now that you know how to load and save a model, let\u2019s try using it to make some predictions. Transformer models can only process numbers \u2014 numbers that the tokenizer generates. But before we discuss tokenizers, let\u2019s explore what inputs the model accepts."),no=m(),st=f("p"),Bs=n("Tokenizers can take care of casting the inputs to the appropriate framework\u2019s tensors, but to help you understand what\u2019s going on, we\u2019ll take a quick look at what must be done before sending the inputs to the model."),io=m(),at=f("p"),Cs=n("Let\u2019s say we have a couple of sequences:"),co=m(),B(Me.$$.fragment),fo=m(),ue=f("p"),Ps=n("The tokenizer converts these to vocabulary indices which are typically called "),Ot=f("em"),As=n("input IDs"),zs=n(". Each sequence is now a list of numbers! The resulting output is:"),ho=m(),B(Be.$$.fragment),uo=m(),rt=f("p"),Ns=n("This is a list of encoded sequences: a list of lists. Tensors only accept rectangular shapes (think matrices). This \u201Carray\u201D is already of rectangular shape, so converting it to a tensor is easy:"),po=m(),K.c(),lt=m(),oe=f("h3"),pe=f("a"),It=f("span"),B(Ce.$$.fragment),Ds=m(),xt=f("span"),Ss=n("Using the tensors as inputs to the model"),mo=m(),nt=f("p"),Os=n("Making use of the tensors with the model is extremely simple \u2014 we just call the model with the inputs:"),_o=m(),B(Pe.$$.fragment),wo=m(),it=f("p"),Is=n(`While the model accepts a lot of different arguments, only the input IDs are necessary. We\u2019ll explain what the other arguments do and when they are required later,
but first we need to take a closer look at the tokenizers that build the inputs that a Transformer model can understand.`),this.h()},l(e){const r=Ya('[data-svelte="svelte-1phssyn"]',document.head);s=h(r,"META",{name:!0,content:!0}),r.forEach(o),l=_(e),C(t.$$.fragment,e),p=_(e),E=h(e,"H1",{class:!0});var xe=d(E);g=h(xe,"A",{id:!0,class:!0,href:!0});var ct=d(g);v=h(ct,"SPAN",{});var ft=d(v);C(T.$$.fragment,ft),ft.forEach(o),ct.forEach(o),j=_(xe),$=h(xe,"SPAN",{});var ht=d($);M=i(ht,"Models"),ht.forEach(o),xe.forEach(o),u=_(e),z.l(e),N=_(e),F.l(e),We=_(e),se.l(e),Re=_(e),Le=h(e,"P",{});var dt=d(Le);Co=i(dt,"However, if you know the type of model you want to use, you can use the class that defines its architecture directly. Let\u2019s take a look at how this works with a BERT model."),dt.forEach(o),Ft=_(e),X=h(e,"H2",{class:!0});var me=d(X);re=h(me,"A",{id:!0,class:!0,href:!0});var ut=d(re);wt=h(ut,"SPAN",{});var pt=d(wt);C(ye.$$.fragment,pt),pt.forEach(o),ut.forEach(o),Po=_(me),bt=h(me,"SPAN",{});var ta=d(bt);Ao=i(ta,"Creating a Transformer"),ta.forEach(o),me.forEach(o),Ht=_(e),Ue=h(e,"P",{});var oa=d(Ue);zo=i(oa,"The first thing we\u2019ll need to do to initialize a BERT model is load a configuration object:"),oa.forEach(o),Wt=_(e),W.l(e),Ye=_(e),Ge=h(e,"P",{});var sa=d(Ge);No=i(sa,"The configuration contains many attributes that are used to build the model:"),sa.forEach(o),Rt=_(e),C(ke.$$.fragment,e),Lt=_(e),C(ve.$$.fragment,e),Ut=_(e),O=h(e,"P",{});var _e=d(O);Do=i(_e,"While you haven\u2019t seen what all of these attributes do yet, you should recognize some of them: the "),yt=h(_e,"CODE",{});var aa=d(yt);So=i(aa,"hidden_size"),aa.forEach(o),Oo=i(_e," attribute defines the size of the "),kt=h(_e,"CODE",{});var ra=d(kt);Io=i(ra,"hidden_states"),ra.forEach(o),xo=i(_e," vector, and "),vt=h(_e,"CODE",{});var la=d(vt);Fo=i(la,"num_hidden_layers"),la.forEach(o),Ho=i(_e," defines the number of layers the Transformer model has."),_e.forEach(o),Yt=_(e),Z=h(e,"H3",{class:!0});var vo=d(Z);le=h(vo,"A",{id:!0,class:!0,href:!0});var na=d(le);$t=h(na,"SPAN",{});var ia=d($t);C($e.$$.fragment,ia),ia.forEach(o),na.forEach(o),Wo=_(vo),gt=h(vo,"SPAN",{});var ca=d(gt);Ro=i(ca,"Different loading methods"),ca.forEach(o),vo.forEach(o),Gt=_(e),Je=h(e,"P",{});var fa=d(Je);Lo=i(fa,"Creating a model from the default configuration initializes it with random values:"),fa.forEach(o),Jt=_(e),L.l(e),Ve=_(e),ne=h(e,"P",{});var $o=d(ne);Uo=i($o,"The model can be used in this state, but it will output gibberish; it needs to be trained first. We could train the model from scratch on the task at hand, but as you saw in "),Ke=h($o,"A",{href:!0});var ha=d(Ke);Yo=i(ha,"Chapter 1"),ha.forEach(o),Go=i($o,", this would require a long time and a lot of data, and it would have a non-negligible environmental impact. To avoid unnecessary and duplicated effort, it\u2019s imperative to be able to share and reuse models that have already been trained."),$o.forEach(o),Vt=_(e),ie=h(e,"P",{});var go=d(ie);Jo=i(go,"Loading a Transformer model that is already trained is simple \u2014 we can do this using the "),Et=h(go,"CODE",{});var da=d(Et);Vo=i(da,"from_pretrained()"),da.forEach(o),Ko=i(go," method:"),go.forEach(o),Kt=_(e),Y.l(e),Qe=_(e),I=h(e,"P",{});var we=d(I);Qo=i(we,"In the code sample above we didn\u2019t use "),Tt=h(we,"CODE",{});var ua=d(Tt);Xo=i(ua,"BertConfig"),ua.forEach(o),Zo=i(we,", and instead loaded a pretrained model via the "),jt=h(we,"CODE",{});var pa=d(jt);es=i(pa,"bert-base-cased"),pa.forEach(o),ts=i(we," identifier. This is a model checkpoint that was trained by the authors of BERT themselves; you can find more details about it in its "),ge=h(we,"A",{href:!0,rel:!0});var ma=d(ge);os=i(ma,"model card"),ma.forEach(o),ss=i(we,"."),we.forEach(o),Qt=_(e),Xe=h(e,"P",{});var _a=d(Xe);as=i(_a,"This model is now initialized with all the weights of the checkpoint. It can be used directly for inference on the tasks it was trained on, and it can also be fine-tuned on a new task. By training with pretrained weights rather than from scratch, we can quickly achieve good results."),_a.forEach(o),Xt=_(e),x=h(e,"P",{});var be=d(x);rs=i(be,"The weights have been downloaded and cached (so future calls to the "),qt=h(be,"CODE",{});var wa=d(qt);ls=i(wa,"from_pretrained()"),wa.forEach(o),ns=i(be," method won\u2019t re-download them) in the cache folder, which defaults to "),Mt=h(be,"EM",{});var ba=d(Mt);is=i(ba,"~/.cache/huggingface/transformers"),ba.forEach(o),cs=i(be,". You can customize your cache folder by setting the "),Bt=h(be,"CODE",{});var ya=d(Bt);fs=i(ya,"HF_HOME"),ya.forEach(o),hs=i(be," environment variable."),be.forEach(o),Zt=_(e),ce=h(e,"P",{});var Eo=d(ce);ds=i(Eo,"The identifier used to load the model can be the identifier of any model on the Model Hub, as long as it is compatible with the BERT architecture. The entire list of available BERT checkpoints can be found "),Ee=h(Eo,"A",{href:!0,rel:!0});var ka=d(Ee);us=i(ka,"here"),ka.forEach(o),ps=i(Eo,"."),Eo.forEach(o),eo=_(e),ee=h(e,"H3",{class:!0});var To=d(ee);fe=h(To,"A",{id:!0,class:!0,href:!0});var va=d(fe);Ct=h(va,"SPAN",{});var $a=d(Ct);C(Te.$$.fragment,$a),$a.forEach(o),va.forEach(o),ms=_(To),Pt=h(To,"SPAN",{});var ga=d(Pt);_s=i(ga,"Saving methods"),ga.forEach(o),To.forEach(o),to=_(e),Q=h(e,"P",{});var mt=d(Q);ws=i(mt,"Saving a model is as easy as loading one \u2014 we use the "),At=h(mt,"CODE",{});var Ea=d(At);bs=i(Ea,"save_pretrained()"),Ea.forEach(o),ys=i(mt," method, which is analogous to the "),zt=h(mt,"CODE",{});var Ta=d(zt);ks=i(Ta,"from_pretrained()"),Ta.forEach(o),vs=i(mt," method:"),mt.forEach(o),oo=_(e),C(je.$$.fragment,e),so=_(e),Ze=h(e,"P",{});var ja=d(Ze);$s=i(ja,"This saves two files to your disk:"),ja.forEach(o),ao=_(e),J.l(e),et=_(e),he=h(e,"P",{});var jo=d(he);gs=i(jo,"If you take a look at the "),Nt=h(jo,"EM",{});var qa=d(Nt);Es=i(qa,"config.json"),qa.forEach(o),Ts=i(jo," file, you\u2019ll recognize the attributes necessary to build the model architecture. This file also contains some metadata, such as where the checkpoint originated and what \u{1F917} Transformers version you were using when you last saved the checkpoint."),jo.forEach(o),ro=_(e),ae.l(e),tt=_(e),te=h(e,"H2",{class:!0});var qo=d(te);de=h(qo,"A",{id:!0,class:!0,href:!0});var Ma=d(de);Dt=h(Ma,"SPAN",{});var Ba=d(Dt);C(qe.$$.fragment,Ba),Ba.forEach(o),Ma.forEach(o),js=_(qo),St=h(qo,"SPAN",{});var Ca=d(St);qs=i(Ca,"Using a Transformer model for inference"),Ca.forEach(o),qo.forEach(o),lo=_(e),ot=h(e,"P",{});var Pa=d(ot);Ms=i(Pa,"Now that you know how to load and save a model, let\u2019s try using it to make some predictions. Transformer models can only process numbers \u2014 numbers that the tokenizer generates. But before we discuss tokenizers, let\u2019s explore what inputs the model accepts."),Pa.forEach(o),no=_(e),st=h(e,"P",{});var Aa=d(st);Bs=i(Aa,"Tokenizers can take care of casting the inputs to the appropriate framework\u2019s tensors, but to help you understand what\u2019s going on, we\u2019ll take a quick look at what must be done before sending the inputs to the model."),Aa.forEach(o),io=_(e),at=h(e,"P",{});var za=d(at);Cs=i(za,"Let\u2019s say we have a couple of sequences:"),za.forEach(o),co=_(e),C(Me.$$.fragment,e),fo=_(e),ue=h(e,"P",{});var Mo=d(ue);Ps=i(Mo,"The tokenizer converts these to vocabulary indices which are typically called "),Ot=h(Mo,"EM",{});var Na=d(Ot);As=i(Na,"input IDs"),Na.forEach(o),zs=i(Mo,". Each sequence is now a list of numbers! The resulting output is:"),Mo.forEach(o),ho=_(e),C(Be.$$.fragment,e),uo=_(e),rt=h(e,"P",{});var Da=d(rt);Ns=i(Da,"This is a list of encoded sequences: a list of lists. Tensors only accept rectangular shapes (think matrices). This \u201Carray\u201D is already of rectangular shape, so converting it to a tensor is easy:"),Da.forEach(o),po=_(e),K.l(e),lt=_(e),oe=h(e,"H3",{class:!0});var Bo=d(oe);pe=h(Bo,"A",{id:!0,class:!0,href:!0});var Sa=d(pe);It=h(Sa,"SPAN",{});var Oa=d(It);C(Ce.$$.fragment,Oa),Oa.forEach(o),Sa.forEach(o),Ds=_(Bo),xt=h(Bo,"SPAN",{});var Ia=d(xt);Ss=i(Ia,"Using the tensors as inputs to the model"),Ia.forEach(o),Bo.forEach(o),mo=_(e),nt=h(e,"P",{});var xa=d(nt);Os=i(xa,"Making use of the tensors with the model is extremely simple \u2014 we just call the model with the inputs:"),xa.forEach(o),_o=_(e),C(Pe.$$.fragment,e),wo=_(e),it=h(e,"P",{});var Fa=d(it);Is=i(Fa,`While the model accepts a lot of different arguments, only the input IDs are necessary. We\u2019ll explain what the other arguments do and when they are required later,
but first we need to take a closer look at the tokenizers that build the inputs that a Transformer model can understand.`),Fa.forEach(o),this.h()},h(){q(s,"name","hf:doc:metadata"),q(s,"content",JSON.stringify(pr)),q(g,"id","models"),q(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(g,"href","#models"),q(E,"class","relative group"),q(re,"id","creating-a-transformer"),q(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(re,"href","#creating-a-transformer"),q(X,"class","relative group"),q(le,"id","different-loading-methods"),q(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(le,"href","#different-loading-methods"),q(Z,"class","relative group"),q(Ke,"href","/course/chapter1"),q(ge,"href","https://huggingface.co/bert-base-cased"),q(ge,"rel","nofollow"),q(Ee,"href","https://huggingface.co/models?filter=bert"),q(Ee,"rel","nofollow"),q(fe,"id","saving-methods"),q(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(fe,"href","#saving-methods"),q(ee,"class","relative group"),q(de,"id","using-a-transformer-model-for-inference"),q(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(de,"href","#using-a-transformer-model-for-inference"),q(te,"class","relative group"),q(pe,"id","using-the-tensors-as-inputs-to-the-model"),q(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(pe,"href","#using-the-tensors-as-inputs-to-the-model"),q(oe,"class","relative group")},m(e,r){a(document.head,s),c(e,l,r),P(t,e,r),c(e,p,r),c(e,E,r),a(E,g),a(g,v),P(T,v,null),a(E,j),a(E,$),a($,M),c(e,u,r),Ae[w].m(e,r),c(e,N,r),ze[D].m(e,r),c(e,We,r),se.m(e,r),c(e,Re,r),c(e,Le,r),a(Le,Co),c(e,Ft,r),c(e,X,r),a(X,re),a(re,wt),P(ye,wt,null),a(X,Po),a(X,bt),a(bt,Ao),c(e,Ht,r),c(e,Ue,r),a(Ue,zo),c(e,Wt,r),Ne[H].m(e,r),c(e,Ye,r),c(e,Ge,r),a(Ge,No),c(e,Rt,r),P(ke,e,r),c(e,Lt,r),P(ve,e,r),c(e,Ut,r),c(e,O,r),a(O,Do),a(O,yt),a(yt,So),a(O,Oo),a(O,kt),a(kt,Io),a(O,xo),a(O,vt),a(vt,Fo),a(O,Ho),c(e,Yt,r),c(e,Z,r),a(Z,le),a(le,$t),P($e,$t,null),a(Z,Wo),a(Z,gt),a(gt,Ro),c(e,Gt,r),c(e,Je,r),a(Je,Lo),c(e,Jt,r),De[R].m(e,r),c(e,Ve,r),c(e,ne,r),a(ne,Uo),a(ne,Ke),a(Ke,Yo),a(ne,Go),c(e,Vt,r),c(e,ie,r),a(ie,Jo),a(ie,Et),a(Et,Vo),a(ie,Ko),c(e,Kt,r),Se[U].m(e,r),c(e,Qe,r),c(e,I,r),a(I,Qo),a(I,Tt),a(Tt,Xo),a(I,Zo),a(I,jt),a(jt,es),a(I,ts),a(I,ge),a(ge,os),a(I,ss),c(e,Qt,r),c(e,Xe,r),a(Xe,as),c(e,Xt,r),c(e,x,r),a(x,rs),a(x,qt),a(qt,ls),a(x,ns),a(x,Mt),a(Mt,is),a(x,cs),a(x,Bt),a(Bt,fs),a(x,hs),c(e,Zt,r),c(e,ce,r),a(ce,ds),a(ce,Ee),a(Ee,us),a(ce,ps),c(e,eo,r),c(e,ee,r),a(ee,fe),a(fe,Ct),P(Te,Ct,null),a(ee,ms),a(ee,Pt),a(Pt,_s),c(e,to,r),c(e,Q,r),a(Q,ws),a(Q,At),a(At,bs),a(Q,ys),a(Q,zt),a(zt,ks),a(Q,vs),c(e,oo,r),P(je,e,r),c(e,so,r),c(e,Ze,r),a(Ze,$s),c(e,ao,r),Oe[G].m(e,r),c(e,et,r),c(e,he,r),a(he,gs),a(he,Nt),a(Nt,Es),a(he,Ts),c(e,ro,r),ae.m(e,r),c(e,tt,r),c(e,te,r),a(te,de),a(de,Dt),P(qe,Dt,null),a(te,js),a(te,St),a(St,qs),c(e,lo,r),c(e,ot,r),a(ot,Ms),c(e,no,r),c(e,st,r),a(st,Bs),c(e,io,r),c(e,at,r),a(at,Cs),c(e,co,r),P(Me,e,r),c(e,fo,r),c(e,ue,r),a(ue,Ps),a(ue,Ot),a(Ot,As),a(ue,zs),c(e,ho,r),P(Be,e,r),c(e,uo,r),c(e,rt,r),a(rt,Ns),c(e,po,r),Ie[V].m(e,r),c(e,lt,r),c(e,oe,r),a(oe,pe),a(pe,It),P(Ce,It,null),a(oe,Ds),a(oe,xt),a(xt,Ss),c(e,mo,r),c(e,nt,r),a(nt,Os),c(e,_o,r),P(Pe,e,r),c(e,wo,r),c(e,it,r),a(it,Is),bo=!0},p(e,[r]){const xe={};r&1&&(xe.fw=e[0]),t.$set(xe);let ct=w;w=Fs(e),w!==ct&&(He(),b(Ae[ct],1,1,()=>{Ae[ct]=null}),Fe(),z=Ae[w],z||(z=Ae[w]=xs[w](e),z.c()),y(z,1),z.m(N.parentNode,N));let ft=D;D=Ws(e),D!==ft&&(He(),b(ze[ft],1,1,()=>{ze[ft]=null}),Fe(),F=ze[D],F||(F=ze[D]=Hs[D](e),F.c()),y(F,1),F.m(We.parentNode,We)),yo!==(yo=Rs(e))&&(se.d(1),se=yo(e),se&&(se.c(),se.m(Re.parentNode,Re)));let ht=H;H=Us(e),H!==ht&&(He(),b(Ne[ht],1,1,()=>{Ne[ht]=null}),Fe(),W=Ne[H],W||(W=Ne[H]=Ls[H](e),W.c()),y(W,1),W.m(Ye.parentNode,Ye));let dt=R;R=Gs(e),R!==dt&&(He(),b(De[dt],1,1,()=>{De[dt]=null}),Fe(),L=De[R],L||(L=De[R]=Ys[R](e),L.c()),y(L,1),L.m(Ve.parentNode,Ve));let me=U;U=Vs(e),U!==me&&(He(),b(Se[me],1,1,()=>{Se[me]=null}),Fe(),Y=Se[U],Y||(Y=Se[U]=Js[U](e),Y.c()),y(Y,1),Y.m(Qe.parentNode,Qe));let ut=G;G=Qs(e),G!==ut&&(He(),b(Oe[ut],1,1,()=>{Oe[ut]=null}),Fe(),J=Oe[G],J||(J=Oe[G]=Ks[G](e),J.c()),y(J,1),J.m(et.parentNode,et)),ko!==(ko=Xs(e))&&(ae.d(1),ae=ko(e),ae&&(ae.c(),ae.m(tt.parentNode,tt)));let pt=V;V=ea(e),V!==pt&&(He(),b(Ie[pt],1,1,()=>{Ie[pt]=null}),Fe(),K=Ie[V],K||(K=Ie[V]=Zs[V](e),K.c()),y(K,1),K.m(lt.parentNode,lt))},i(e){bo||(y(t.$$.fragment,e),y(T.$$.fragment,e),y(z),y(F),y(ye.$$.fragment,e),y(W),y(ke.$$.fragment,e),y(ve.$$.fragment,e),y($e.$$.fragment,e),y(L),y(Y),y(Te.$$.fragment,e),y(je.$$.fragment,e),y(J),y(qe.$$.fragment,e),y(Me.$$.fragment,e),y(Be.$$.fragment,e),y(K),y(Ce.$$.fragment,e),y(Pe.$$.fragment,e),bo=!0)},o(e){b(t.$$.fragment,e),b(T.$$.fragment,e),b(z),b(F),b(ye.$$.fragment,e),b(W),b(ke.$$.fragment,e),b(ve.$$.fragment,e),b($e.$$.fragment,e),b(L),b(Y),b(Te.$$.fragment,e),b(je.$$.fragment,e),b(J),b(qe.$$.fragment,e),b(Me.$$.fragment,e),b(Be.$$.fragment,e),b(K),b(Ce.$$.fragment,e),b(Pe.$$.fragment,e),bo=!1},d(e){o(s),e&&o(l),A(t,e),e&&o(p),e&&o(E),A(T),e&&o(u),Ae[w].d(e),e&&o(N),ze[D].d(e),e&&o(We),se.d(e),e&&o(Re),e&&o(Le),e&&o(Ft),e&&o(X),A(ye),e&&o(Ht),e&&o(Ue),e&&o(Wt),Ne[H].d(e),e&&o(Ye),e&&o(Ge),e&&o(Rt),A(ke,e),e&&o(Lt),A(ve,e),e&&o(Ut),e&&o(O),e&&o(Yt),e&&o(Z),A($e),e&&o(Gt),e&&o(Je),e&&o(Jt),De[R].d(e),e&&o(Ve),e&&o(ne),e&&o(Vt),e&&o(ie),e&&o(Kt),Se[U].d(e),e&&o(Qe),e&&o(I),e&&o(Qt),e&&o(Xe),e&&o(Xt),e&&o(x),e&&o(Zt),e&&o(ce),e&&o(eo),e&&o(ee),A(Te),e&&o(to),e&&o(Q),e&&o(oo),A(je,e),e&&o(so),e&&o(Ze),e&&o(ao),Oe[G].d(e),e&&o(et),e&&o(he),e&&o(ro),ae.d(e),e&&o(tt),e&&o(te),A(qe),e&&o(lo),e&&o(ot),e&&o(no),e&&o(st),e&&o(io),e&&o(at),e&&o(co),A(Me,e),e&&o(fo),e&&o(ue),e&&o(ho),A(Be,e),e&&o(uo),e&&o(rt),e&&o(po),Ie[V].d(e),e&&o(lt),e&&o(oe),A(Ce),e&&o(mo),e&&o(nt),e&&o(_o),A(Pe,e),e&&o(wo),e&&o(it)}}}const pr={local:"models",sections:[{local:"creating-a-transformer",sections:[{local:"different-loading-methods",title:"Different loading methods"},{local:"saving-methods",title:"Saving methods"}],title:"Creating a Transformer"},{local:"using-a-transformer-model-for-inference",sections:[{local:"using-the-tensors-as-inputs-to-the-model",title:"Using the tensors as inputs to the model"}],title:"Using a Transformer model for inference"}],title:"Models"};function mr(k,s,l){let t="pt";return Ga(()=>{const p=new URLSearchParams(window.location.search);l(0,t=p.get("fw")||"pt")}),[t]}class $r extends Ra{constructor(s){super();La(this,s,mr,ur,Ua,{})}}export{$r as default,pr as metadata};
