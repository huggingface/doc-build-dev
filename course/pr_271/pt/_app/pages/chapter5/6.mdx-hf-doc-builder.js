import{S as Om,i as Im,s as zm,e as r,k as d,w as x,t,M as Nm,c as n,d as a,m as p,x as q,a as l,h as o,b as k,N as Am,f as Ao,G as s,g as m,y as E,o as g,p as Po,q as b,B as j,v as Fm,n as So}from"../../chunks/vendor-hf-doc-builder.js";import{T as Pm}from"../../chunks/Tip-hf-doc-builder.js";import{Y as Hm}from"../../chunks/Youtube-hf-doc-builder.js";import{I as _t}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as S}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as Sm}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";import{F as Rm}from"../../chunks/FrameworkSwitchCourse-hf-doc-builder.js";function Mm(L){let c,$;return c=new Sm({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter5/section6_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter5/section6_tf.ipynb"}]}}),{c(){x(c.$$.fragment)},l(f){q(c.$$.fragment,f)},m(f,w){E(c,f,w),$=!0},i(f){$||(b(c.$$.fragment,f),$=!0)},o(f){g(c.$$.fragment,f),$=!1},d(f){j(c,f)}}}function Lm(L){let c,$;return c=new Sm({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter5/section6_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter5/section6_pt.ipynb"}]}}),{c(){x(c.$$.fragment)},l(f){q(c.$$.fragment,f)},m(f,w){E(c,f,w),$=!0},i(f){$||(b(c.$$.fragment,f),$=!0)},o(f){g(c.$$.fragment,f),$=!1},d(f){j(c,f)}}}function Um(L){let c,$,f,w,h,v,O,_,A,y,M,I,P,z,N,H,V,C,F,Y;return{c(){c=r("p"),$=t("\u270F\uFE0F "),f=r("strong"),w=t("Experimente!"),h=t(" Veja se voc\xEA pode usar "),v=r("code"),O=t("Dataset.map()"),_=t(" para explodir a coluna "),A=r("code"),y=t("comments"),M=t(" de "),I=r("code"),P=t("issues_dataset"),z=d(),N=r("em"),H=t("sem"),V=t(" recorrer ao uso de Pandas. Isso \xE9 um pouco complicado; voc\xEA pode achar \xFAtil para esta tarefa a se\xE7\xE3o "),C=r("a"),F=t("\u201CMapeamento em lote\u201D"),Y=t(" da documenta\xE7\xE3o do \u{1F917} Dataset."),this.h()},l(U){c=n(U,"P",{});var D=l(c);$=o(D,"\u270F\uFE0F "),f=n(D,"STRONG",{});var G=l(f);w=o(G,"Experimente!"),G.forEach(a),h=o(D," Veja se voc\xEA pode usar "),v=n(D,"CODE",{});var u=l(v);O=o(u,"Dataset.map()"),u.forEach(a),_=o(D," para explodir a coluna "),A=n(D,"CODE",{});var T=l(A);y=o(T,"comments"),T.forEach(a),M=o(D," de "),I=n(D,"CODE",{});var R=l(I);P=o(R,"issues_dataset"),R.forEach(a),z=p(D),N=n(D,"EM",{});var W=l(N);H=o(W,"sem"),W.forEach(a),V=o(D," recorrer ao uso de Pandas. Isso \xE9 um pouco complicado; voc\xEA pode achar \xFAtil para esta tarefa a se\xE7\xE3o "),C=n(D,"A",{href:!0,rel:!0});var re=l(C);F=o(re,"\u201CMapeamento em lote\u201D"),re.forEach(a),Y=o(D," da documenta\xE7\xE3o do \u{1F917} Dataset."),D.forEach(a),this.h()},h(){k(C,"href","https://huggingface.co/docs/datasets/v1.12.1/about_map_batch.html?batch-mapping#batch-mapping"),k(C,"rel","nofollow")},m(U,D){m(U,c,D),s(c,$),s(c,f),s(f,w),s(c,h),s(c,v),s(v,O),s(c,_),s(c,A),s(A,y),s(c,M),s(c,I),s(I,P),s(c,z),s(c,N),s(N,H),s(c,V),s(c,C),s(C,F),s(c,Y)},d(U){U&&a(c)}}}function Vm(L){let c,$,f,w,h,v,O,_,A,y,M,I,P,z,N,H,V;return c=new S({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModel

model_ckpt = <span class="hljs-string">&quot;sentence-transformers/multi-qa-mpnet-base-dot-v1&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)
model = TFAutoModel.from_pretrained(model_ckpt, from_pt=<span class="hljs-literal">True</span>)`}}),{c(){x(c.$$.fragment),$=d(),f=r("p"),w=t("Observe que definimos "),h=r("code"),v=t("from_pt=True"),O=t(" como um argumento do m\xE9todo "),_=r("code"),A=t("from_pretrained()"),y=t(". Isso ocorre porque o checkpoint "),M=r("code"),I=t("multi-qa-mpnet-base-dot-v1"),P=t(" s\xF3 tem pesos PyTorch, portanto, definir "),z=r("code"),N=t("from_pt=True"),H=t(" ir\xE1 convert\xEA-los automaticamente para o formato TensorFlow para n\xF3s. Como voc\xEA pode ver, \xE9 muito simples alternar entre frameworks no \u{1F917} Transformers!")},l(C){q(c.$$.fragment,C),$=p(C),f=n(C,"P",{});var F=l(f);w=o(F,"Observe que definimos "),h=n(F,"CODE",{});var Y=l(h);v=o(Y,"from_pt=True"),Y.forEach(a),O=o(F," como um argumento do m\xE9todo "),_=n(F,"CODE",{});var U=l(_);A=o(U,"from_pretrained()"),U.forEach(a),y=o(F,". Isso ocorre porque o checkpoint "),M=n(F,"CODE",{});var D=l(M);I=o(D,"multi-qa-mpnet-base-dot-v1"),D.forEach(a),P=o(F," s\xF3 tem pesos PyTorch, portanto, definir "),z=n(F,"CODE",{});var G=l(z);N=o(G,"from_pt=True"),G.forEach(a),H=o(F," ir\xE1 convert\xEA-los automaticamente para o formato TensorFlow para n\xF3s. Como voc\xEA pode ver, \xE9 muito simples alternar entre frameworks no \u{1F917} Transformers!"),F.forEach(a)},m(C,F){E(c,C,F),m(C,$,F),m(C,f,F),s(f,w),s(f,h),s(h,v),s(f,O),s(f,_),s(_,A),s(f,y),s(f,M),s(M,I),s(f,P),s(f,z),s(z,N),s(f,H),V=!0},i(C){V||(b(c.$$.fragment,C),V=!0)},o(C){g(c.$$.fragment,C),V=!1},d(C){j(c,C),C&&a($),C&&a(f)}}}function Gm(L){let c,$,f,w,h,v,O;return c=new S({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModel

model_ckpt = <span class="hljs-string">&quot;sentence-transformers/multi-qa-mpnet-base-dot-v1&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)
model = AutoModel.from_pretrained(model_ckpt)`}}),v=new S({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> torch

device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)
model.to(device)`}}),{c(){x(c.$$.fragment),$=d(),f=r("p"),w=t("Para acelerar o processo de embedding, \xE9 \xFAtil colocar o modelo e as entradas em um dispositivo GPU, ent\xE3o vamos fazer isso agora:"),h=d(),x(v.$$.fragment)},l(_){q(c.$$.fragment,_),$=p(_),f=n(_,"P",{});var A=l(f);w=o(A,"Para acelerar o processo de embedding, \xE9 \xFAtil colocar o modelo e as entradas em um dispositivo GPU, ent\xE3o vamos fazer isso agora:"),A.forEach(a),h=p(_),q(v.$$.fragment,_)},m(_,A){E(c,_,A),m(_,$,A),m(_,f,A),s(f,w),m(_,h,A),E(v,_,A),O=!0},i(_){O||(b(c.$$.fragment,_),b(v.$$.fragment,_),O=!0)},o(_){g(c.$$.fragment,_),g(v.$$.fragment,_),O=!1},d(_){j(c,_),_&&a($),_&&a(f),_&&a(h),j(v,_)}}}function Bm(L){let c,$,f,w,h,v,O,_,A,y,M,I,P,z,N,H,V,C,F,Y,U,D,G;return c=new S({props:{code:`def get_embeddings(text_list):
    encoded_input = tokenizer(
        text_list, padding=True, truncation=True, return_tensors="tf"
    )
    encoded_input = {k: v for k, v in encoded_input.items()}
    model_output = model(**encoded_input)
    return cls_pooling(model_output)`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_embeddings</span>(<span class="hljs-params">text_list</span>):
    encoded_input = tokenizer(
        text_list, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>
    )
    encoded_input = {k: v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> encoded_input.items()}
    model_output = model(**encoded_input)
    <span class="hljs-keyword">return</span> cls_pooling(model_output)`}}),v=new S({props:{code:`embedding = get_embeddings(comments_dataset["text"][0])
embedding.shape`,highlighted:`embedding = get_embeddings(comments_dataset[<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>])
embedding.shape`}}),_=new S({props:{code:"TensorShape([1, 768])",highlighted:'TensorShape([<span class="hljs-number">1</span>, <span class="hljs-number">768</span>])'}}),D=new S({props:{code:`embeddings_dataset = comments_dataset.map(
    lambda x: {"embeddings": get_embeddings(x["text"]).numpy()[0]}
)`,highlighted:`embeddings_dataset = comments_dataset.<span class="hljs-built_in">map</span>(
    <span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;embeddings&quot;</span>: get_embeddings(x[<span class="hljs-string">&quot;text&quot;</span>]).numpy()[<span class="hljs-number">0</span>]}
)`}}),{c(){x(c.$$.fragment),$=d(),f=r("p"),w=t("Podemos testar o funcionamento da fun\xE7\xE3o alimentando-a com a primeira entrada de texto em nosso corpus e inspecionando a forma de sa\xEDda:"),h=d(),x(v.$$.fragment),O=d(),x(_.$$.fragment),A=d(),y=r("p"),M=t("\xD3timo, convertemos a primeira entrada em nosso corpus em um vetor de 768 dimens\xF5es! Podemos usar "),I=r("code"),P=t("Dataset.map()"),z=t(" para aplicar nossa fun\xE7\xE3o "),N=r("code"),H=t("get_embeddings()"),V=t(" a cada linha em nosso corpus, ent\xE3o vamos criar uma nova coluna "),C=r("code"),F=t("embeddings"),Y=t(" da seguinte forma:"),U=d(),x(D.$$.fragment)},l(u){q(c.$$.fragment,u),$=p(u),f=n(u,"P",{});var T=l(f);w=o(T,"Podemos testar o funcionamento da fun\xE7\xE3o alimentando-a com a primeira entrada de texto em nosso corpus e inspecionando a forma de sa\xEDda:"),T.forEach(a),h=p(u),q(v.$$.fragment,u),O=p(u),q(_.$$.fragment,u),A=p(u),y=n(u,"P",{});var R=l(y);M=o(R,"\xD3timo, convertemos a primeira entrada em nosso corpus em um vetor de 768 dimens\xF5es! Podemos usar "),I=n(R,"CODE",{});var W=l(I);P=o(W,"Dataset.map()"),W.forEach(a),z=o(R," para aplicar nossa fun\xE7\xE3o "),N=n(R,"CODE",{});var re=l(N);H=o(re,"get_embeddings()"),re.forEach(a),V=o(R," a cada linha em nosso corpus, ent\xE3o vamos criar uma nova coluna "),C=n(R,"CODE",{});var me=l(C);F=o(me,"embeddings"),me.forEach(a),Y=o(R," da seguinte forma:"),R.forEach(a),U=p(u),q(D.$$.fragment,u)},m(u,T){E(c,u,T),m(u,$,T),m(u,f,T),s(f,w),m(u,h,T),E(v,u,T),m(u,O,T),E(_,u,T),m(u,A,T),m(u,y,T),s(y,M),s(y,I),s(I,P),s(y,z),s(y,N),s(N,H),s(y,V),s(y,C),s(C,F),s(y,Y),m(u,U,T),E(D,u,T),G=!0},i(u){G||(b(c.$$.fragment,u),b(v.$$.fragment,u),b(_.$$.fragment,u),b(D.$$.fragment,u),G=!0)},o(u){g(c.$$.fragment,u),g(v.$$.fragment,u),g(_.$$.fragment,u),g(D.$$.fragment,u),G=!1},d(u){j(c,u),u&&a($),u&&a(f),u&&a(h),j(v,u),u&&a(O),j(_,u),u&&a(A),u&&a(y),u&&a(U),j(D,u)}}}function Ym(L){let c,$,f,w,h,v,O,_,A,y,M,I,P,z,N,H,V,C,F,Y,U,D,G;return c=new S({props:{code:`def get_embeddings(text_list):
    encoded_input = tokenizer(
        text_list, padding=True, truncation=True, return_tensors="pt"
    )
    encoded_input = {k: v.to(device) for k, v in encoded_input.items()}
    model_output = model(**encoded_input)
    return cls_pooling(model_output)`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_embeddings</span>(<span class="hljs-params">text_list</span>):
    encoded_input = tokenizer(
        text_list, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
    )
    encoded_input = {k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> encoded_input.items()}
    model_output = model(**encoded_input)
    <span class="hljs-keyword">return</span> cls_pooling(model_output)`}}),v=new S({props:{code:`embedding = get_embeddings(comments_dataset["text"][0])
embedding.shape`,highlighted:`embedding = get_embeddings(comments_dataset[<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>])
embedding.shape`}}),_=new S({props:{code:"torch.Size([1, 768])",highlighted:'torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">768</span>])'}}),D=new S({props:{code:`embeddings_dataset = comments_dataset.map(
    lambda x: {"embeddings": get_embeddings(x["text"]).detach().cpu().numpy()[0]}
)`,highlighted:`embeddings_dataset = comments_dataset.<span class="hljs-built_in">map</span>(
    <span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;embeddings&quot;</span>: get_embeddings(x[<span class="hljs-string">&quot;text&quot;</span>]).detach().cpu().numpy()[<span class="hljs-number">0</span>]}
)`}}),{c(){x(c.$$.fragment),$=d(),f=r("p"),w=t("Podemos testar o funcionamento da fun\xE7\xE3o alimentando-a com a primeira entrada de texto em nosso corpus e inspecionando a forma de sa\xEDda:"),h=d(),x(v.$$.fragment),O=d(),x(_.$$.fragment),A=d(),y=r("p"),M=t("\xD3timo, convertemos a primeira entrada em nosso corpus em um vetor de 768 dimens\xF5es! Podemos usar "),I=r("code"),P=t("Dataset.map()"),z=t(" para aplicar nossa fun\xE7\xE3o "),N=r("code"),H=t("get_embeddings()"),V=t(" a cada linha em nosso corpus, ent\xE3o vamos criar uma nova coluna "),C=r("code"),F=t("embeddings"),Y=t(" da seguinte forma:"),U=d(),x(D.$$.fragment)},l(u){q(c.$$.fragment,u),$=p(u),f=n(u,"P",{});var T=l(f);w=o(T,"Podemos testar o funcionamento da fun\xE7\xE3o alimentando-a com a primeira entrada de texto em nosso corpus e inspecionando a forma de sa\xEDda:"),T.forEach(a),h=p(u),q(v.$$.fragment,u),O=p(u),q(_.$$.fragment,u),A=p(u),y=n(u,"P",{});var R=l(y);M=o(R,"\xD3timo, convertemos a primeira entrada em nosso corpus em um vetor de 768 dimens\xF5es! Podemos usar "),I=n(R,"CODE",{});var W=l(I);P=o(W,"Dataset.map()"),W.forEach(a),z=o(R," para aplicar nossa fun\xE7\xE3o "),N=n(R,"CODE",{});var re=l(N);H=o(re,"get_embeddings()"),re.forEach(a),V=o(R," a cada linha em nosso corpus, ent\xE3o vamos criar uma nova coluna "),C=n(R,"CODE",{});var me=l(C);F=o(me,"embeddings"),me.forEach(a),Y=o(R," da seguinte forma:"),R.forEach(a),U=p(u),q(D.$$.fragment,u)},m(u,T){E(c,u,T),m(u,$,T),m(u,f,T),s(f,w),m(u,h,T),E(v,u,T),m(u,O,T),E(_,u,T),m(u,A,T),m(u,y,T),s(y,M),s(y,I),s(I,P),s(y,z),s(y,N),s(N,H),s(y,V),s(y,C),s(C,F),s(y,Y),m(u,U,T),E(D,u,T),G=!0},i(u){G||(b(c.$$.fragment,u),b(v.$$.fragment,u),b(_.$$.fragment,u),b(D.$$.fragment,u),G=!0)},o(u){g(c.$$.fragment,u),g(v.$$.fragment,u),g(_.$$.fragment,u),g(D.$$.fragment,u),G=!1},d(u){j(c,u),u&&a($),u&&a(f),u&&a(h),j(v,u),u&&a(O),j(_,u),u&&a(A),u&&a(y),u&&a(U),j(D,u)}}}function Wm(L){let c,$,f,w;return c=new S({props:{code:`question = "How can I load a dataset offline?"
question_embedding = get_embeddings([question]).numpy()
question_embedding.shape`,highlighted:`question = <span class="hljs-string">&quot;How can I load a dataset offline?&quot;</span>
question_embedding = get_embeddings([question]).numpy()
question_embedding.shape`}}),f=new S({props:{code:"(1, 768)",highlighted:'(<span class="hljs-number">1</span>, <span class="hljs-number">768</span>)'}}),{c(){x(c.$$.fragment),$=d(),x(f.$$.fragment)},l(h){q(c.$$.fragment,h),$=p(h),q(f.$$.fragment,h)},m(h,v){E(c,h,v),m(h,$,v),E(f,h,v),w=!0},i(h){w||(b(c.$$.fragment,h),b(f.$$.fragment,h),w=!0)},o(h){g(c.$$.fragment,h),g(f.$$.fragment,h),w=!1},d(h){j(c,h),h&&a($),j(f,h)}}}function Qm(L){let c,$,f,w;return c=new S({props:{code:`question = "How can I load a dataset offline?"
question_embedding = get_embeddings([question]).cpu().detach().numpy()
question_embedding.shape`,highlighted:`question = <span class="hljs-string">&quot;How can I load a dataset offline?&quot;</span>
question_embedding = get_embeddings([question]).cpu().detach().numpy()
question_embedding.shape`}}),f=new S({props:{code:"torch.Size([1, 768])",highlighted:'torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">768</span>])'}}),{c(){x(c.$$.fragment),$=d(),x(f.$$.fragment)},l(h){q(c.$$.fragment,h),$=p(h),q(f.$$.fragment,h)},m(h,v){E(c,h,v),m(h,$,v),E(f,h,v),w=!0},i(h){w||(b(c.$$.fragment,h),b(f.$$.fragment,h),w=!0)},o(h){g(c.$$.fragment,h),g(f.$$.fragment,h),w=!1},d(h){j(c,h),h&&a($),j(f,h)}}}function Jm(L){let c,$,f,w,h,v,O,_,A,y,M;return{c(){c=r("p"),$=t("\u270F\uFE0F "),f=r("strong"),w=t("Experimente!"),h=t(" Crie sua pr\xF3pria consulta e veja se consegue encontrar uma resposta nos documentos recuperados. Voc\xEA pode ter que aumentar o par\xE2metro "),v=r("code"),O=t("k"),_=t(" em "),A=r("code"),y=t("Dataset.get_nearest_examples()"),M=t(" para ampliar a pesquisa.")},l(I){c=n(I,"P",{});var P=l(c);$=o(P,"\u270F\uFE0F "),f=n(P,"STRONG",{});var z=l(f);w=o(z,"Experimente!"),z.forEach(a),h=o(P," Crie sua pr\xF3pria consulta e veja se consegue encontrar uma resposta nos documentos recuperados. Voc\xEA pode ter que aumentar o par\xE2metro "),v=n(P,"CODE",{});var N=l(v);O=o(N,"k"),N.forEach(a),_=o(P," em "),A=n(P,"CODE",{});var H=l(A);y=o(H,"Dataset.get_nearest_examples()"),H.forEach(a),M=o(P," para ampliar a pesquisa."),P.forEach(a)},m(I,P){m(I,c,P),s(c,$),s(c,f),s(f,w),s(c,h),s(c,v),s(v,O),s(c,_),s(c,A),s(A,y),s(c,M)},d(I){I&&a(c)}}}function Xm(L){let c,$,f,w,h,v,O,_,A,y,M,I,P,z,N,H,V,C,F,Y,U,D,G,u,T,R,W,re,me,Oo,gt,ge,Io,Ts,zo,No,aa,Fo,Ho,bt,As,Ro,vt,Te,Be,Hl,Mo,Ye,Rl,$t,Ae,Oe,ta,We,Lo,oa,Uo,xt,Ps,Vo,qt,Qe,Et,be,Go,ra,Bo,Yo,Ss,Wo,Qo,jt,Je,kt,Xe,wt,Q,Jo,na,Xo,Ko,la,Zo,er,ia,sr,ar,ma,tr,or,da,rr,nr,yt,Ke,Dt,Ze,Ct,J,lr,pa,ir,mr,ca,dr,pr,ua,cr,ur,fa,fr,hr,ha,_r,gr,Tt,es,At,ss,Pt,K,br,_a,vr,$r,ga,xr,qr,as,ba,Er,jr,va,kr,wr,St,ts,Ot,Ie,yr,$a,Dr,Cr,It,os,zt,rs,Nt,ze,Tr,xa,Ar,Pr,Ft,ns,Ht,ee,qa,Z,Rt,Sr,Ea,Or,Ir,ja,zr,Nr,ka,Fr,Hr,wa,Rr,Mr,de,se,ya,Lr,Ur,Da,Vr,Gr,Ca,Br,Yr,Ta,Wr,Qr,Aa,Jr,Xr,ae,Pa,Kr,Zr,Sa,en,sn,Oa,an,tn,Ia,on,rn,za,nn,ln,te,Na,mn,dn,Fa,pn,cn,Ha,un,fn,Ra,hn,_n,Ma,gn,bn,oe,La,vn,$n,Ua,xn,qn,Va,En,jn,Ga,kn,wn,Ba,yn,Mt,ne,Dn,Ya,Cn,Tn,Wa,An,Pn,Qa,Sn,On,Lt,ls,Ut,is,Vt,Os,In,Gt,Ne,Bt,Fe,zn,Ja,Nn,Fn,Yt,ms,Wt,Is,Hn,Qt,ds,Jt,ps,Xt,ve,Rn,Xa,Mn,Ln,Ka,Un,Vn,Kt,cs,Zt,zs,Gn,eo,Pe,He,Za,us,Bn,et,Yn,so,B,Wn,Ns,Qn,Jn,st,Xn,Kn,at,Zn,el,fs,sl,al,tt,tl,ol,hs,rl,nl,ot,ll,il,ao,pe,ce,Fs,$e,ml,rt,dl,pl,nt,cl,ul,to,_s,oo,Hs,fl,ro,ue,fe,Rs,Ms,hl,no,Se,Re,lt,gs,_l,it,gl,lo,xe,bl,mt,vl,$l,bs,xl,ql,io,qe,El,dt,jl,kl,pt,wl,yl,mo,vs,po,Me,Dl,ct,Cl,Tl,co,he,_e,Ls,Us,Al,uo,$s,fo,Ee,Pl,ut,Sl,Ol,ft,Il,zl,ho,xs,_o,Vs,Nl,go,qs,bo,Es,vo,Gs,Fl,$o,Le,xo;f=new Rm({props:{fw:L[0]}}),_=new _t({});const Ml=[Lm,Mm],js=[];function Ll(e,i){return e[0]==="pt"?0:1}P=Ll(L),z=js[P]=Ml[P](L),D=new Hm({props:{id:"OATCgQtNX2o"}}),W=new _t({}),We=new _t({}),Qe=new S({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url

data_files = hf_hub_url(
    repo_id=<span class="hljs-string">&quot;lewtun/github-issues&quot;</span>,
    filename=<span class="hljs-string">&quot;datasets-issues-with-hf-doc-builder.jsonl&quot;</span>,
    repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
)`}}),Je=new S({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

issues_dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)
issues_dataset`}}),Xe=new S({props:{code:`Dataset({
    features: ['url', 'repository_url', 'labels_url', 'comments_url', 'events_url', 'html_url', 'id', 'node_id', 'number', 'title', 'user', 'labels', 'state', 'locked', 'assignee', 'assignees', 'milestone', 'comments', 'created_at', 'updated_at', 'closed_at', 'author_association', 'active_lock_reason', 'pull_request', 'body', 'performed_via_github_app', 'is_pull_request'],
    num_rows: 2855
})`,highlighted:`Dataset({
    features: [<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-string">&#x27;repository_url&#x27;</span>, <span class="hljs-string">&#x27;labels_url&#x27;</span>, <span class="hljs-string">&#x27;comments_url&#x27;</span>, <span class="hljs-string">&#x27;events_url&#x27;</span>, <span class="hljs-string">&#x27;html_url&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;node_id&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;labels&#x27;</span>, <span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;locked&#x27;</span>, <span class="hljs-string">&#x27;assignee&#x27;</span>, <span class="hljs-string">&#x27;assignees&#x27;</span>, <span class="hljs-string">&#x27;milestone&#x27;</span>, <span class="hljs-string">&#x27;comments&#x27;</span>, <span class="hljs-string">&#x27;created_at&#x27;</span>, <span class="hljs-string">&#x27;updated_at&#x27;</span>, <span class="hljs-string">&#x27;closed_at&#x27;</span>, <span class="hljs-string">&#x27;author_association&#x27;</span>, <span class="hljs-string">&#x27;active_lock_reason&#x27;</span>, <span class="hljs-string">&#x27;pull_request&#x27;</span>, <span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-string">&#x27;performed_via_github_app&#x27;</span>, <span class="hljs-string">&#x27;is_pull_request&#x27;</span>],
    num_rows: <span class="hljs-number">2855</span>
})`}}),Ke=new S({props:{code:`issues_dataset = issues_dataset.filter(
    lambda x: (x["is_pull_request"] == False and len(x["comments"]) > 0)
)
issues_dataset`,highlighted:`issues_dataset = issues_dataset.<span class="hljs-built_in">filter</span>(
    <span class="hljs-keyword">lambda</span> x: (x[<span class="hljs-string">&quot;is_pull_request&quot;</span>] == <span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(x[<span class="hljs-string">&quot;comments&quot;</span>]) &gt; <span class="hljs-number">0</span>)
)
issues_dataset`}}),Ze=new S({props:{code:`Dataset({
    features: ['url', 'repository_url', 'labels_url', 'comments_url', 'events_url', 'html_url', 'id', 'node_id', 'number', 'title', 'user', 'labels', 'state', 'locked', 'assignee', 'assignees', 'milestone', 'comments', 'created_at', 'updated_at', 'closed_at', 'author_association', 'active_lock_reason', 'pull_request', 'body', 'performed_via_github_app', 'is_pull_request'],
    num_rows: 771
})`,highlighted:`Dataset({
    features: [<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-string">&#x27;repository_url&#x27;</span>, <span class="hljs-string">&#x27;labels_url&#x27;</span>, <span class="hljs-string">&#x27;comments_url&#x27;</span>, <span class="hljs-string">&#x27;events_url&#x27;</span>, <span class="hljs-string">&#x27;html_url&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;node_id&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;labels&#x27;</span>, <span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;locked&#x27;</span>, <span class="hljs-string">&#x27;assignee&#x27;</span>, <span class="hljs-string">&#x27;assignees&#x27;</span>, <span class="hljs-string">&#x27;milestone&#x27;</span>, <span class="hljs-string">&#x27;comments&#x27;</span>, <span class="hljs-string">&#x27;created_at&#x27;</span>, <span class="hljs-string">&#x27;updated_at&#x27;</span>, <span class="hljs-string">&#x27;closed_at&#x27;</span>, <span class="hljs-string">&#x27;author_association&#x27;</span>, <span class="hljs-string">&#x27;active_lock_reason&#x27;</span>, <span class="hljs-string">&#x27;pull_request&#x27;</span>, <span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-string">&#x27;performed_via_github_app&#x27;</span>, <span class="hljs-string">&#x27;is_pull_request&#x27;</span>],
    num_rows: <span class="hljs-number">771</span>
})`}}),es=new S({props:{code:`columns = issues_dataset.column_names
columns_to_keep = ["title", "body", "html_url", "comments"]
columns_to_remove = set(columns_to_keep).symmetric_difference(columns)
issues_dataset = issues_dataset.remove_columns(columns_to_remove)
issues_dataset`,highlighted:`columns = issues_dataset.column_names
columns_to_keep = [<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;html_url&quot;</span>, <span class="hljs-string">&quot;comments&quot;</span>]
columns_to_remove = <span class="hljs-built_in">set</span>(columns_to_keep).symmetric_difference(columns)
issues_dataset = issues_dataset.remove_columns(columns_to_remove)
issues_dataset`}}),ss=new S({props:{code:`Dataset({
    features: ['html_url', 'title', 'comments', 'body'],
    num_rows: 771
})`,highlighted:`Dataset({
    features: [<span class="hljs-string">&#x27;html_url&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;comments&#x27;</span>, <span class="hljs-string">&#x27;body&#x27;</span>],
    num_rows: <span class="hljs-number">771</span>
})`}}),ts=new S({props:{code:`issues_dataset.set_format("pandas")
df = issues_dataset[:]`,highlighted:`issues_dataset.set_format(<span class="hljs-string">&quot;pandas&quot;</span>)
df = issues_dataset[:]`}}),os=new S({props:{code:'df["comments"][0].tolist()',highlighted:'df[<span class="hljs-string">&quot;comments&quot;</span>][<span class="hljs-number">0</span>].tolist()'}}),rs=new S({props:{code:`['the bug code locate in \uFF1A\\r\\n    if data_args.task_name is not None:\\r\\n        # Downloading and loading a dataset from the hub.\\r\\n        datasets = load_dataset("glue", data_args.task_name, cache_dir=model_args.cache_dir)',
 'Hi @jinec,\\r\\n\\r\\nFrom time to time we get this kind of \`ConnectionError\` coming from the github.com website: https://raw.githubusercontent.com\\r\\n\\r\\nNormally, it should work if you wait a little and then retry.\\r\\n\\r\\nCould you please confirm if the problem persists?',
 'cannot connect\uFF0Ceven by Web browser\uFF0Cplease check that  there is some  problems\u3002',
 'I can access https://raw.githubusercontent.com/huggingface/datasets/1.7.0/datasets/glue/glue.py without problem...']`,highlighted:`[<span class="hljs-string">&#x27;the bug code locate in \uFF1A\\r\\n    if data_args.task_name is not None:\\r\\n        # Downloading and loading a dataset from the hub.\\r\\n        datasets = load_dataset(&quot;glue&quot;, data_args.task_name, cache_dir=model_args.cache_dir)&#x27;</span>,
 <span class="hljs-string">&#x27;Hi @jinec,\\r\\n\\r\\nFrom time to time we get this kind of \`ConnectionError\` coming from the github.com website: https://raw.githubusercontent.com\\r\\n\\r\\nNormally, it should work if you wait a little and then retry.\\r\\n\\r\\nCould you please confirm if the problem persists?&#x27;</span>,
 <span class="hljs-string">&#x27;cannot connect\uFF0Ceven by Web browser\uFF0Cplease check that  there is some  problems\u3002&#x27;</span>,
 <span class="hljs-string">&#x27;I can access https://raw.githubusercontent.com/huggingface/datasets/1.7.0/datasets/glue/glue.py without problem...&#x27;</span>]`}}),ns=new S({props:{code:`comments_df = df.explode("comments", ignore_index=True)
comments_df.head(4)`,highlighted:`comments_df = df.explode(<span class="hljs-string">&quot;comments&quot;</span>, ignore_index=<span class="hljs-literal">True</span>)
comments_df.head(<span class="hljs-number">4</span>)`}}),ls=new S({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset

comments_dataset = Dataset.from_pandas(comments_df)
comments_dataset`}}),is=new S({props:{code:`Dataset({
    features: ['html_url', 'title', 'comments', 'body'],
    num_rows: 2842
})`,highlighted:`Dataset({
    features: [<span class="hljs-string">&#x27;html_url&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;comments&#x27;</span>, <span class="hljs-string">&#x27;body&#x27;</span>],
    num_rows: <span class="hljs-number">2842</span>
})`}}),Ne=new Pm({props:{$$slots:{default:[Um]},$$scope:{ctx:L}}}),ms=new S({props:{code:`comments_dataset = comments_dataset.map(
    lambda x: {"comment_length": len(x["comments"].split())}
)`,highlighted:`comments_dataset = comments_dataset.<span class="hljs-built_in">map</span>(
    <span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;comment_length&quot;</span>: <span class="hljs-built_in">len</span>(x[<span class="hljs-string">&quot;comments&quot;</span>].split())}
)`}}),ds=new S({props:{code:`comments_dataset = comments_dataset.filter(lambda x: x["comment_length"] > 15)
comments_dataset`,highlighted:`comments_dataset = comments_dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;comment_length&quot;</span>] &gt; <span class="hljs-number">15</span>)
comments_dataset`}}),ps=new S({props:{code:`Dataset({
    features: ['html_url', 'title', 'comments', 'body', 'comment_length'],
    num_rows: 2098
})`,highlighted:`Dataset({
    features: [<span class="hljs-string">&#x27;html_url&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;comments&#x27;</span>, <span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-string">&#x27;comment_length&#x27;</span>],
    num_rows: <span class="hljs-number">2098</span>
})`}}),cs=new S({props:{code:`
`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">concatenate_text</span>(<span class="hljs-params">examples</span>):
    <span class="hljs-keyword">return</span> {
        <span class="hljs-string">&quot;text&quot;</span>: examples[<span class="hljs-string">&quot;title&quot;</span>]
        + <span class="hljs-string">&quot; \\n &quot;</span>
        + examples[<span class="hljs-string">&quot;body&quot;</span>]
        + <span class="hljs-string">&quot; \\n &quot;</span>
        + examples[<span class="hljs-string">&quot;comments&quot;</span>]
    }


comments_dataset = comments_dataset.<span class="hljs-built_in">map</span>(concatenate_text)`}}),us=new _t({});const Ul=[Gm,Vm],ks=[];function Vl(e,i){return e[0]==="pt"?0:1}pe=Vl(L),ce=ks[pe]=Ul[pe](L),_s=new S({props:{code:`def cls_pooling(model_output):
    return model_output.last_hidden_state[:, 0]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_pooling</span>(<span class="hljs-params">model_output</span>):
    <span class="hljs-keyword">return</span> model_output.last_hidden_state[:, <span class="hljs-number">0</span>]`}});const Gl=[Ym,Bm],ws=[];function Bl(e,i){return e[0]==="pt"?0:1}ue=Bl(L),fe=ws[ue]=Gl[ue](L),gs=new _t({}),vs=new S({props:{code:'embeddings_dataset.add_faiss_index(column="embeddings")',highlighted:'embeddings_dataset.add_faiss_index(column=<span class="hljs-string">&quot;embeddings&quot;</span>)'}});const Yl=[Qm,Wm],ys=[];function Wl(e,i){return e[0]==="pt"?0:1}return he=Wl(L),_e=ys[he]=Yl[he](L),$s=new S({props:{code:`scores, samples = embeddings_dataset.get_nearest_examples(
    "embeddings", question_embedding, k=5
)`,highlighted:`scores, samples = embeddings_dataset.get_nearest_examples(
    <span class="hljs-string">&quot;embeddings&quot;</span>, question_embedding, k=<span class="hljs-number">5</span>
)`}}),xs=new S({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd

samples_df = pd.DataFrame.from_dict(samples)
samples_df[<span class="hljs-string">&quot;scores&quot;</span>] = scores
samples_df.sort_values(<span class="hljs-string">&quot;scores&quot;</span>, ascending=<span class="hljs-literal">False</span>, inplace=<span class="hljs-literal">True</span>)`}}),qs=new S({props:{code:`for _, row in samples_df.iterrows():
    print(f"COMMENT: {row.comments}")
    print(f"SCORE: {row.scores}")
    print(f"TITLE: {row.title}")
    print(f"URL: {row.html_url}")
    print("=" * 50)
    print()`,highlighted:`<span class="hljs-keyword">for</span> _, row <span class="hljs-keyword">in</span> samples_df.iterrows():
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;COMMENT: <span class="hljs-subst">{row.comments}</span>&quot;</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;SCORE: <span class="hljs-subst">{row.scores}</span>&quot;</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;TITLE: <span class="hljs-subst">{row.title}</span>&quot;</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;URL: <span class="hljs-subst">{row.html_url}</span>&quot;</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">50</span>)
    <span class="hljs-built_in">print</span>()`}}),Es=new S({props:{code:`














`,highlighted:`<span class="hljs-string">&quot;&quot;&quot;
COMMENT: Requiring online connection is a deal breaker in some cases unfortunately so it&#x27;d be great if offline mode is added similar to how \`transformers\` loads models offline fine.

@mandubian&#x27;s second bullet point suggests that there&#x27;s a workaround allowing you to use your offline (custom?) dataset with \`datasets\`. Could you please elaborate on how that should look like?
SCORE: 25.505046844482422
TITLE: Discussion using datasets in offline mode
URL: https://github.com/huggingface/datasets/issues/824
==================================================

COMMENT: The local dataset builders (csv, text , json and pandas) are now part of the \`datasets\` package since #1726 :)
You can now use them offline
\\\`\\\`\\\`python
datasets = load_dataset(&quot;text&quot;, data_files=data_files)
\\\`\\\`\\\`

We&#x27;ll do a new release soon
SCORE: 24.555509567260742
TITLE: Discussion using datasets in offline mode
URL: https://github.com/huggingface/datasets/issues/824
==================================================

COMMENT: I opened a PR that allows to reload modules that have already been loaded once even if there&#x27;s no internet.

Let me know if you know other ways that can make the offline mode experience better. I&#x27;d be happy to add them :)

I already note the &quot;freeze&quot; modules option, to prevent local modules updates. It would be a cool feature.

----------

&gt; @mandubian&#x27;s second bullet point suggests that there&#x27;s a workaround allowing you to use your offline (custom?) dataset with \`datasets\`. Could you please elaborate on how that should look like?

Indeed \`load_dataset\` allows to load remote dataset script (squad, glue, etc.) but also you own local ones.
For example if you have a dataset script at \`./my_dataset/my_dataset.py\` then you can do
\\\`\\\`\\\`python
load_dataset(&quot;./my_dataset&quot;)
\\\`\\\`\\\`
and the dataset script will generate your dataset once and for all.

----------

About I&#x27;m looking into having \`csv\`, \`json\`, \`text\`, \`pandas\` dataset builders already included in the \`datasets\` package, so that they are available offline by default, as opposed to the other datasets that require the script to be downloaded.
cf #1724
SCORE: 24.14896583557129
TITLE: Discussion using datasets in offline mode
URL: https://github.com/huggingface/datasets/issues/824
==================================================

COMMENT: &gt; here is my way to load a dataset offline, but it **requires** an online machine
&gt;
&gt; 1. (online machine)
&gt;
&gt; \`\`\`
&gt;
&gt; import datasets
&gt;
&gt; data = datasets.load_dataset(...)
&gt;
&gt; data.save_to_disk(/YOUR/DATASET/DIR)
&gt;
&gt; \`\`\`
&gt;
&gt; 2. copy the dir from online to the offline machine
&gt;
&gt; 3. (offline machine)
&gt;
&gt; \`\`\`
&gt;
&gt; import datasets
&gt;
&gt; data = datasets.load_from_disk(/SAVED/DATA/DIR)
&gt;
&gt; \`\`\`
&gt;
&gt;
&gt;
&gt; HTH.


SCORE: 22.893993377685547
TITLE: Discussion using datasets in offline mode
URL: https://github.com/huggingface/datasets/issues/824
==================================================

COMMENT: here is my way to load a dataset offline, but it **requires** an online machine
1. (online machine)
\\\`\\\`\\\`
import datasets
data = datasets.load_dataset(...)
data.save_to_disk(/YOUR/DATASET/DIR)
\\\`\\\`\\\`
2. copy the dir from online to the offline machine
3. (offline machine)
\\\`\\\`\\\`
import datasets
data = datasets.load_from_disk(/SAVED/DATA/DIR)
\\\`\\\`\\\`

HTH.
SCORE: 22.406635284423828
TITLE: Discussion using datasets in offline mode
URL: https://github.com/huggingface/datasets/issues/824
==================================================
&quot;&quot;&quot;</span>`}}),Le=new Pm({props:{$$slots:{default:[Jm]},$$scope:{ctx:L}}}),{c(){c=r("meta"),$=d(),x(f.$$.fragment),w=d(),h=r("h1"),v=r("a"),O=r("span"),x(_.$$.fragment),A=d(),y=r("span"),M=t("Busca sem\xE2ntica com o FAISS"),I=d(),z.c(),N=d(),H=r("p"),V=t("Na "),C=r("a"),F=t("se\xE7\xE3o 5"),Y=t(", criamos um conjunto de dados de issues e coment\xE1rios do GitHub do reposit\xF3rio \u{1F917} Datasets. Nesta se\xE7\xE3o, usaremos essas informa\xE7\xF5es para construir um mecanismo de pesquisa que pode nos ajudar a encontrar respostas para nossas perguntas mais urgentes sobre a biblioteca!"),U=d(),x(D.$$.fragment),G=d(),u=r("h2"),T=r("a"),R=r("span"),x(W.$$.fragment),re=d(),me=r("span"),Oo=t("Usando embeddings para pesquisa sem\xE2ntica"),gt=d(),ge=r("p"),Io=t("Como vimos no "),Ts=r("a"),zo=t("Cap\xEDtulo 1"),No=t(", os modelos de linguagem baseados em Transformer representam cada token em um intervalo de texto como um "),aa=r("em"),Fo=t("vetor de incorpora\xE7\xE3o"),Ho=t(". Acontece que \xE9 poss\xEDvel \u201Cagrupar\u201D as incorpora\xE7\xF5es individuais para criar uma representa\xE7\xE3o vetorial para frases inteiras, par\xE1grafos ou (em alguns casos) documentos. Essas incorpora\xE7\xF5es podem ser usadas para encontrar documentos semelhantes no corpus calculando a similaridade do produto escalar (ou alguma outra m\xE9trica de similaridade) entre cada incorpora\xE7\xE3o e retornando os documentos com maior sobreposi\xE7\xE3o."),bt=d(),As=r("p"),Ro=t("Nesta se\xE7\xE3o, usaremos embeddings para desenvolver um mecanismo de pesquisa sem\xE2ntica. Esses mecanismos de pesquisa oferecem v\xE1rias vantagens sobre as abordagens convencionais que se baseiam na correspond\xEAncia de palavras-chave em uma consulta com os documentos."),vt=d(),Te=r("div"),Be=r("img"),Mo=d(),Ye=r("img"),$t=d(),Ae=r("h2"),Oe=r("a"),ta=r("span"),x(We.$$.fragment),Lo=d(),oa=r("span"),Uo=t("Carregando e preparando o conjunto de dados"),xt=d(),Ps=r("p"),Vo=t("A primeira coisa que precisamos fazer \xE9 baixar nosso conjunto de dados de issues do GitHub, ent\xE3o vamos usar a biblioteca \u{1F917} Hub para resolver a URL onde nosso arquivo est\xE1 armazenado no Hugging Face Hub:"),qt=d(),x(Qe.$$.fragment),Et=d(),be=r("p"),Go=t("Com a URL armazenada em "),ra=r("code"),Bo=t("data_files"),Yo=t(", podemos carregar o conjunto de dados remoto usando o m\xE9todo apresentado na "),Ss=r("a"),Wo=t("se\xE7\xE3o 2"),Qo=t(":"),jt=d(),x(Je.$$.fragment),kt=d(),x(Xe.$$.fragment),wt=d(),Q=r("p"),Jo=t("Aqui n\xF3s especificamos a divis\xE3o padr\xE3o "),na=r("code"),Xo=t("train"),Ko=t(" em "),la=r("code"),Zo=t("load_dataset()"),er=t(", ent\xE3o ele retorna um "),ia=r("code"),sr=t("Dataset"),ar=t(" em vez de um "),ma=r("code"),tr=t("DatasetDict"),or=t(". A primeira ordem de neg\xF3cios \xE9 filtrar os pull request, pois elas tendem a ser raramente usadas para responder a consultas de usu\xE1rios e introduzir\xE3o ru\xEDdo em nosso mecanismo de pesquisa. Como j\xE1 deve ser familiar, podemos usar a fun\xE7\xE3o "),da=r("code"),rr=t("Dataset.filter()"),nr=t(" para excluir essas linhas em nosso conjunto de dados. Enquanto estamos nisso, tamb\xE9m vamos filtrar as linhas sem coment\xE1rios, pois elas n\xE3o fornecem respostas \xE0s consultas dos usu\xE1rios:"),yt=d(),x(Ke.$$.fragment),Dt=d(),x(Ze.$$.fragment),Ct=d(),J=r("p"),lr=t("Podemos ver que h\xE1 muitas colunas em nosso conjunto de dados, a maioria das quais n\xE3o precisamos para construir nosso mecanismo de pesquisa. De uma perspectiva de pesquisa, as colunas mais informativas s\xE3o "),pa=r("code"),ir=t("title"),mr=t(", "),ca=r("code"),dr=t("body"),pr=t(" e "),ua=r("code"),cr=t("comments"),ur=t(", enquanto "),fa=r("code"),fr=t("html_url"),hr=t(" nos fornece um link de volta para a issue de origem. Vamos usar a fun\xE7\xE3o "),ha=r("code"),_r=t("Dataset.remove_columns()"),gr=t(" para descartar o resto:"),Tt=d(),x(es.$$.fragment),At=d(),x(ss.$$.fragment),Pt=d(),K=r("p"),br=t("Para criar nossos embeddings, aumentaremos cada coment\xE1rio com o t\xEDtulo e o corpo da issue, pois esses campos geralmente incluem informa\xE7\xF5es contextuais \xFAteis. Como nossa coluna "),_a=r("code"),vr=t("comments"),$r=t(" \xE9 atualmente uma lista de coment\xE1rios para cada issue, precisamos \u201Cexplodir\u201D a coluna para que cada linha consista em uma tupla "),ga=r("code"),xr=t("(html_url, title, body, comment)"),qr=t(". No Pandas podemos fazer isso com a fun\xE7\xE3o "),as=r("a"),ba=r("code"),Er=t("DataFrame.explode()"),jr=t(", que cria uma nova linha para cada elemento em uma coluna semelhante a uma lista, enquanto replica todos os outros valores de coluna. Para ver isso em a\xE7\xE3o, vamos primeiro mudar para o formato "),va=r("code"),kr=t("DataFrame"),wr=t(" do Pandas:"),St=d(),x(ts.$$.fragment),Ot=d(),Ie=r("p"),yr=t("Se inspecionarmos a primeira linha neste "),$a=r("code"),Dr=t("DataFrame"),Cr=t(", podemos ver que h\xE1 quatro coment\xE1rios associados a esta issue:"),It=d(),x(os.$$.fragment),zt=d(),x(rs.$$.fragment),Nt=d(),ze=r("p"),Tr=t("Quando explodimos "),xa=r("code"),Ar=t("df"),Pr=t(", esperamos obter uma linha para cada um desses coment\xE1rios. Vamos verificar se \xE9 o caso:"),Ft=d(),x(ns.$$.fragment),Ht=d(),ee=r("table"),qa=r("thead"),Z=r("tr"),Rt=r("th"),Sr=d(),Ea=r("th"),Or=t("html_url"),Ir=d(),ja=r("th"),zr=t("title"),Nr=d(),ka=r("th"),Fr=t("comments"),Hr=d(),wa=r("th"),Rr=t("body"),Mr=d(),de=r("tbody"),se=r("tr"),ya=r("th"),Lr=t("0"),Ur=d(),Da=r("td"),Vr=t("https://github.com/huggingface/datasets/issues/2787"),Gr=d(),Ca=r("td"),Br=t("ConnectionError: Couldn't reach https://raw.githubusercontent.com"),Yr=d(),Ta=r("td"),Wr=t("the bug code locate in \uFF1A\\r\\n    if data_args.task_name is not None..."),Qr=d(),Aa=r("td"),Jr=t("Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),Xr=d(),ae=r("tr"),Pa=r("th"),Kr=t("1"),Zr=d(),Sa=r("td"),en=t("https://github.com/huggingface/datasets/issues/2787"),sn=d(),Oa=r("td"),an=t("ConnectionError: Couldn't reach https://raw.githubusercontent.com"),tn=d(),Ia=r("td"),on=t("Hi @jinec,\\r\\n\\r\\nFrom time to time we get this kind of `ConnectionError` coming from the github.com website: https://raw.githubusercontent.com..."),rn=d(),za=r("td"),nn=t("Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),ln=d(),te=r("tr"),Na=r("th"),mn=t("2"),dn=d(),Fa=r("td"),pn=t("https://github.com/huggingface/datasets/issues/2787"),cn=d(),Ha=r("td"),un=t("ConnectionError: Couldn't reach https://raw.githubusercontent.com"),fn=d(),Ra=r("td"),hn=t("cannot connect\uFF0Ceven by Web browser\uFF0Cplease check that  there is some  problems\u3002"),_n=d(),Ma=r("td"),gn=t("Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),bn=d(),oe=r("tr"),La=r("th"),vn=t("3"),$n=d(),Ua=r("td"),xn=t("https://github.com/huggingface/datasets/issues/2787"),qn=d(),Va=r("td"),En=t("ConnectionError: Couldn't reach https://raw.githubusercontent.com"),jn=d(),Ga=r("td"),kn=t("I can access https://raw.githubusercontent.com/huggingface/datasets/1.7.0/datasets/glue/glue.py without problem..."),wn=d(),Ba=r("td"),yn=t("Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),Mt=d(),ne=r("p"),Dn=t("\xD3timo, podemos ver que as linhas foram replicadas, com a coluna "),Ya=r("code"),Cn=t("comments"),Tn=t(" contendo os coment\xE1rios individuais! Agora que terminamos com o Pandas, podemos voltar rapidamente para um "),Wa=r("code"),An=t("Dataset"),Pn=t(" carregando o "),Qa=r("code"),Sn=t("DataFrame"),On=t(" na mem\xF3ria"),Lt=d(),x(ls.$$.fragment),Ut=d(),x(is.$$.fragment),Vt=d(),Os=r("p"),In=t("Ok, isso nos deu alguns milhares de coment\xE1rios para trabalhar!"),Gt=d(),x(Ne.$$.fragment),Bt=d(),Fe=r("p"),zn=t("Agora que temos um coment\xE1rio por linha, vamos criar uma nova coluna "),Ja=r("code"),Nn=t("comments_length"),Fn=t(" que cont\xE9m o n\xFAmero de palavras por coment\xE1rio:"),Yt=d(),x(ms.$$.fragment),Wt=d(),Is=r("p"),Hn=t("Podemos usar essa nova coluna para filtrar coment\xE1rios curtos, que normalmente incluem coisas como \u201Ccc @lewtun\u201D ou \u201CObrigado!\u201D que n\xE3o s\xE3o relevantes para o nosso motor de busca. N\xE3o h\xE1 um n\xFAmero preciso para selecionar o filtro, mas cerca de 15 palavras parece um bom come\xE7o:"),Qt=d(),x(ds.$$.fragment),Jt=d(),x(ps.$$.fragment),Xt=d(),ve=r("p"),Rn=t("Depois de limpar um pouco nosso conjunto de dados, vamos concatenar o t\xEDtulo, a descri\xE7\xE3o e os coment\xE1rios da issue em uma nova coluna "),Xa=r("code"),Mn=t("text"),Ln=t(". Como de costume, escreveremos uma fun\xE7\xE3o simples que podemos passar para "),Ka=r("code"),Un=t("Dataset.map()"),Vn=t(":"),Kt=d(),x(cs.$$.fragment),Zt=d(),zs=r("p"),Gn=t("Finalmente estamos prontos para criar alguns embeddings! Vamos dar uma olhada."),eo=d(),Pe=r("h2"),He=r("a"),Za=r("span"),x(us.$$.fragment),Bn=d(),et=r("span"),Yn=t("Criando embeddings de texto"),so=d(),B=r("p"),Wn=t("Vimos no "),Ns=r("a"),Qn=t("Cap\xEDtulo 2"),Jn=t(" que podemos obter tokens embeddings usando a classe "),st=r("code"),Xn=t("AutoModel"),Kn=t(". Tudo o que precisamos fazer \xE9 escolher um checkpoint adequado para carregar o modelo. Felizmente, existe uma biblioteca chamada "),at=r("code"),Zn=t("sentence-transformers"),el=t(" dedicada \xE0 cria\xE7\xE3o de embeddings. Conforme descrito na "),fs=r("a"),sl=t("documenta\xE7\xE3o da biblioteca"),al=t(", nosso caso de uso \xE9 um exemplo de "),tt=r("em"),tl=t("asymmetric semantic search"),ol=t(" porque temos uma consulta curta cuja resposta gostar\xEDamos de encontrar em um documento mais longo, como um coment\xE1rio da issue. A \xFAtil "),hs=r("a"),rl=t("tabela de vis\xE3o geral do modelo"),nl=t(" na documenta\xE7\xE3o indica que o checkpoint "),ot=r("code"),ll=t("multi-qa-mpnet-base-dot-v1"),il=t(" tem o melhor desempenho para pesquisa sem\xE2ntica, ent\xE3o usaremos isso para nosso aplicativo. Tamb\xE9m carregaremos o tokenizer usando o mesmo checkpoint:"),ao=d(),ce.c(),Fs=d(),$e=r("p"),ml=t("Como mencionamos anteriormente, gostar\xEDamos de representar cada entrada em nosso corpus de issues do GitHub como um \xFAnico vetor, portanto, precisamos \u201Cpool\u201D ou calcular a m\xE9dia de nossas incorpora\xE7\xF5es de token de alguma forma. Uma abordagem popular \xE9 realizar "),rt=r("em"),dl=t("CLS pooling"),pl=t(" nas sa\xEDdas do nosso modelo, onde simplesmente coletamos o \xFAltimo estado oculto para o token especial "),nt=r("code"),cl=t("[CLS]"),ul=t(". A fun\xE7\xE3o a seguir faz o truque para n\xF3s:"),to=d(),x(_s.$$.fragment),oo=d(),Hs=r("p"),fl=t("Em seguida, criaremos uma fun\xE7\xE3o auxiliar que tokenizar\xE1 uma lista de documentos, colocar\xE1 os tensores na GPU, os alimentar\xE1 no modelo e, finalmente, aplicar\xE1 o agrupamento CLS \xE0s sa\xEDdas:"),ro=d(),fe.c(),Rs=d(),Ms=r("p"),hl=t("Observe que convertemos os embeddings em arrays NumPy \u2014 isso porque \u{1F917} Datasets requer esse formato quando tentamos index\xE1-los com FAISS, o que faremos a seguir."),no=d(),Se=r("h2"),Re=r("a"),lt=r("span"),x(gs.$$.fragment),_l=d(),it=r("span"),gl=t("Usando FAISS para busca de similaridade"),lo=d(),xe=r("p"),bl=t("Agora que temos um conjunto de dados de embeddings, precisamos de alguma maneira de pesquis\xE1-los. Para fazer isso, usaremos uma estrutura de dados especial em \u{1F917} Datasets chamada "),mt=r("em"),vl=t("FAISS index"),$l=t(". "),bs=r("a"),xl=t("FAISS"),ql=t(" (abrevia\xE7\xE3o de Facebook AI Similarity Search) \xE9 uma biblioteca que fornece algoritmos eficientes para pesquisar rapidamente e agrupar vetores de incorpora\xE7\xE3o."),io=d(),qe=r("p"),El=t("A id\xE9ia b\xE1sica por tr\xE1s do FAISS \xE9 criar uma estrutura de dados especial chamada "),dt=r("em"),jl=t("index"),kl=t(" que permite descobrir quais embeddings s\xE3o semelhantes a um embedding de entrada. Criar um \xEDndice FAISS em \u{1F917} Datasets \xE9 simples \u2014 usamos a fun\xE7\xE3o "),pt=r("code"),wl=t("Dataset.add_faiss_index()"),yl=t(" e especificamos qual coluna do nosso conjunto de dados gostar\xEDamos de indexar:"),mo=d(),x(vs.$$.fragment),po=d(),Me=r("p"),Dl=t("Agora podemos realizar consultas neste \xEDndice fazendo uma pesquisa do vizinho mais pr\xF3ximo com a fun\xE7\xE3o "),ct=r("code"),Cl=t("Dataset.get_nearest_examples()"),Tl=t(". Vamos testar isso primeiro incorporando uma pergunta da seguinte forma:"),co=d(),_e.c(),Ls=d(),Us=r("p"),Al=t("Assim como com os documentos, agora temos um vetor de 768 dimens\xF5es representando a consulta, que podemos comparar com todo o corpus para encontrar os embeddings mais semelhantes:"),uo=d(),x($s.$$.fragment),fo=d(),Ee=r("p"),Pl=t("A fun\xE7\xE3o "),ut=r("code"),Sl=t("Dataset.get_nearest_examples()"),Ol=t(" retorna uma tupla de pontua\xE7\xF5es que classificam a sobreposi\xE7\xE3o entre a consulta e o documento e um conjunto correspondente de amostras (aqui, as 5 melhores correspond\xEAncias). Vamos colet\xE1-los em um "),ft=r("code"),Il=t("pandas.DataFrame"),zl=t(" para que possamos classific\xE1-los facilmente:"),ho=d(),x(xs.$$.fragment),_o=d(),Vs=r("p"),Nl=t("Agora podemos iterar nas primeiras linhas para ver como nossa consulta correspondeu aos coment\xE1rios dispon\xEDveis:"),go=d(),x(qs.$$.fragment),bo=d(),x(Es.$$.fragment),vo=d(),Gs=r("p"),Fl=t("Nada mal! Nosso segundo resultado parece corresponder \xE0 consulta."),$o=d(),x(Le.$$.fragment),this.h()},l(e){const i=Nm('[data-svelte="svelte-1phssyn"]',document.head);c=n(i,"META",{name:!0,content:!0}),i.forEach(a),$=p(e),q(f.$$.fragment,e),w=p(e),h=n(e,"H1",{class:!0});var Ds=l(h);v=n(Ds,"A",{id:!0,class:!0,href:!0});var Bs=l(v);O=n(Bs,"SPAN",{});var ht=l(O);q(_.$$.fragment,ht),ht.forEach(a),Bs.forEach(a),A=p(Ds),y=n(Ds,"SPAN",{});var Ys=l(y);M=o(Ys,"Busca sem\xE2ntica com o FAISS"),Ys.forEach(a),Ds.forEach(a),I=p(e),z.l(e),N=p(e),H=n(e,"P",{});var Ue=l(H);V=o(Ue,"Na "),C=n(Ue,"A",{href:!0});var Ws=l(C);F=o(Ws,"se\xE7\xE3o 5"),Ws.forEach(a),Y=o(Ue,", criamos um conjunto de dados de issues e coment\xE1rios do GitHub do reposit\xF3rio \u{1F917} Datasets. Nesta se\xE7\xE3o, usaremos essas informa\xE7\xF5es para construir um mecanismo de pesquisa que pode nos ajudar a encontrar respostas para nossas perguntas mais urgentes sobre a biblioteca!"),Ue.forEach(a),U=p(e),q(D.$$.fragment,e),G=p(e),u=n(e,"H2",{class:!0});var Cs=l(u);T=n(Cs,"A",{id:!0,class:!0,href:!0});var Ql=l(T);R=n(Ql,"SPAN",{});var Jl=l(R);q(W.$$.fragment,Jl),Jl.forEach(a),Ql.forEach(a),re=p(Cs),me=n(Cs,"SPAN",{});var Xl=l(me);Oo=o(Xl,"Usando embeddings para pesquisa sem\xE2ntica"),Xl.forEach(a),Cs.forEach(a),gt=p(e),ge=n(e,"P",{});var Qs=l(ge);Io=o(Qs,"Como vimos no "),Ts=n(Qs,"A",{href:!0});var Kl=l(Ts);zo=o(Kl,"Cap\xEDtulo 1"),Kl.forEach(a),No=o(Qs,", os modelos de linguagem baseados em Transformer representam cada token em um intervalo de texto como um "),aa=n(Qs,"EM",{});var Zl=l(aa);Fo=o(Zl,"vetor de incorpora\xE7\xE3o"),Zl.forEach(a),Ho=o(Qs,". Acontece que \xE9 poss\xEDvel \u201Cagrupar\u201D as incorpora\xE7\xF5es individuais para criar uma representa\xE7\xE3o vetorial para frases inteiras, par\xE1grafos ou (em alguns casos) documentos. Essas incorpora\xE7\xF5es podem ser usadas para encontrar documentos semelhantes no corpus calculando a similaridade do produto escalar (ou alguma outra m\xE9trica de similaridade) entre cada incorpora\xE7\xE3o e retornando os documentos com maior sobreposi\xE7\xE3o."),Qs.forEach(a),bt=p(e),As=n(e,"P",{});var ei=l(As);Ro=o(ei,"Nesta se\xE7\xE3o, usaremos embeddings para desenvolver um mecanismo de pesquisa sem\xE2ntica. Esses mecanismos de pesquisa oferecem v\xE1rias vantagens sobre as abordagens convencionais que se baseiam na correspond\xEAncia de palavras-chave em uma consulta com os documentos."),ei.forEach(a),vt=p(e),Te=n(e,"DIV",{class:!0});var qo=l(Te);Be=n(qo,"IMG",{class:!0,src:!0,alt:!0}),Mo=p(qo),Ye=n(qo,"IMG",{class:!0,src:!0,alt:!0}),qo.forEach(a),$t=p(e),Ae=n(e,"H2",{class:!0});var Eo=l(Ae);Oe=n(Eo,"A",{id:!0,class:!0,href:!0});var si=l(Oe);ta=n(si,"SPAN",{});var ai=l(ta);q(We.$$.fragment,ai),ai.forEach(a),si.forEach(a),Lo=p(Eo),oa=n(Eo,"SPAN",{});var ti=l(oa);Uo=o(ti,"Carregando e preparando o conjunto de dados"),ti.forEach(a),Eo.forEach(a),xt=p(e),Ps=n(e,"P",{});var oi=l(Ps);Vo=o(oi,"A primeira coisa que precisamos fazer \xE9 baixar nosso conjunto de dados de issues do GitHub, ent\xE3o vamos usar a biblioteca \u{1F917} Hub para resolver a URL onde nosso arquivo est\xE1 armazenado no Hugging Face Hub:"),oi.forEach(a),qt=p(e),q(Qe.$$.fragment,e),Et=p(e),be=n(e,"P",{});var Js=l(be);Go=o(Js,"Com a URL armazenada em "),ra=n(Js,"CODE",{});var ri=l(ra);Bo=o(ri,"data_files"),ri.forEach(a),Yo=o(Js,", podemos carregar o conjunto de dados remoto usando o m\xE9todo apresentado na "),Ss=n(Js,"A",{href:!0});var ni=l(Ss);Wo=o(ni,"se\xE7\xE3o 2"),ni.forEach(a),Qo=o(Js,":"),Js.forEach(a),jt=p(e),q(Je.$$.fragment,e),kt=p(e),q(Xe.$$.fragment,e),wt=p(e),Q=n(e,"P",{});var le=l(Q);Jo=o(le,"Aqui n\xF3s especificamos a divis\xE3o padr\xE3o "),na=n(le,"CODE",{});var li=l(na);Xo=o(li,"train"),li.forEach(a),Ko=o(le," em "),la=n(le,"CODE",{});var ii=l(la);Zo=o(ii,"load_dataset()"),ii.forEach(a),er=o(le,", ent\xE3o ele retorna um "),ia=n(le,"CODE",{});var mi=l(ia);sr=o(mi,"Dataset"),mi.forEach(a),ar=o(le," em vez de um "),ma=n(le,"CODE",{});var di=l(ma);tr=o(di,"DatasetDict"),di.forEach(a),or=o(le,". A primeira ordem de neg\xF3cios \xE9 filtrar os pull request, pois elas tendem a ser raramente usadas para responder a consultas de usu\xE1rios e introduzir\xE3o ru\xEDdo em nosso mecanismo de pesquisa. Como j\xE1 deve ser familiar, podemos usar a fun\xE7\xE3o "),da=n(le,"CODE",{});var pi=l(da);rr=o(pi,"Dataset.filter()"),pi.forEach(a),nr=o(le," para excluir essas linhas em nosso conjunto de dados. Enquanto estamos nisso, tamb\xE9m vamos filtrar as linhas sem coment\xE1rios, pois elas n\xE3o fornecem respostas \xE0s consultas dos usu\xE1rios:"),le.forEach(a),yt=p(e),q(Ke.$$.fragment,e),Dt=p(e),q(Ze.$$.fragment,e),Ct=p(e),J=n(e,"P",{});var ie=l(J);lr=o(ie,"Podemos ver que h\xE1 muitas colunas em nosso conjunto de dados, a maioria das quais n\xE3o precisamos para construir nosso mecanismo de pesquisa. De uma perspectiva de pesquisa, as colunas mais informativas s\xE3o "),pa=n(ie,"CODE",{});var ci=l(pa);ir=o(ci,"title"),ci.forEach(a),mr=o(ie,", "),ca=n(ie,"CODE",{});var ui=l(ca);dr=o(ui,"body"),ui.forEach(a),pr=o(ie," e "),ua=n(ie,"CODE",{});var fi=l(ua);cr=o(fi,"comments"),fi.forEach(a),ur=o(ie,", enquanto "),fa=n(ie,"CODE",{});var hi=l(fa);fr=o(hi,"html_url"),hi.forEach(a),hr=o(ie," nos fornece um link de volta para a issue de origem. Vamos usar a fun\xE7\xE3o "),ha=n(ie,"CODE",{});var _i=l(ha);_r=o(_i,"Dataset.remove_columns()"),_i.forEach(a),gr=o(ie," para descartar o resto:"),ie.forEach(a),Tt=p(e),q(es.$$.fragment,e),At=p(e),q(ss.$$.fragment,e),Pt=p(e),K=n(e,"P",{});var je=l(K);br=o(je,"Para criar nossos embeddings, aumentaremos cada coment\xE1rio com o t\xEDtulo e o corpo da issue, pois esses campos geralmente incluem informa\xE7\xF5es contextuais \xFAteis. Como nossa coluna "),_a=n(je,"CODE",{});var gi=l(_a);vr=o(gi,"comments"),gi.forEach(a),$r=o(je," \xE9 atualmente uma lista de coment\xE1rios para cada issue, precisamos \u201Cexplodir\u201D a coluna para que cada linha consista em uma tupla "),ga=n(je,"CODE",{});var bi=l(ga);xr=o(bi,"(html_url, title, body, comment)"),bi.forEach(a),qr=o(je,". No Pandas podemos fazer isso com a fun\xE7\xE3o "),as=n(je,"A",{href:!0,rel:!0});var vi=l(as);ba=n(vi,"CODE",{});var $i=l(ba);Er=o($i,"DataFrame.explode()"),$i.forEach(a),vi.forEach(a),jr=o(je,", que cria uma nova linha para cada elemento em uma coluna semelhante a uma lista, enquanto replica todos os outros valores de coluna. Para ver isso em a\xE7\xE3o, vamos primeiro mudar para o formato "),va=n(je,"CODE",{});var xi=l(va);kr=o(xi,"DataFrame"),xi.forEach(a),wr=o(je," do Pandas:"),je.forEach(a),St=p(e),q(ts.$$.fragment,e),Ot=p(e),Ie=n(e,"P",{});var jo=l(Ie);yr=o(jo,"Se inspecionarmos a primeira linha neste "),$a=n(jo,"CODE",{});var qi=l($a);Dr=o(qi,"DataFrame"),qi.forEach(a),Cr=o(jo,", podemos ver que h\xE1 quatro coment\xE1rios associados a esta issue:"),jo.forEach(a),It=p(e),q(os.$$.fragment,e),zt=p(e),q(rs.$$.fragment,e),Nt=p(e),ze=n(e,"P",{});var ko=l(ze);Tr=o(ko,"Quando explodimos "),xa=n(ko,"CODE",{});var Ei=l(xa);Ar=o(Ei,"df"),Ei.forEach(a),Pr=o(ko,", esperamos obter uma linha para cada um desses coment\xE1rios. Vamos verificar se \xE9 o caso:"),ko.forEach(a),Ft=p(e),q(ns.$$.fragment,e),Ht=p(e),ee=n(e,"TABLE",{border:!0,class:!0,style:!0});var wo=l(ee);qa=n(wo,"THEAD",{});var ji=l(qa);Z=n(ji,"TR",{style:!0});var ke=l(Z);Rt=n(ke,"TH",{}),l(Rt).forEach(a),Sr=p(ke),Ea=n(ke,"TH",{});var ki=l(Ea);Or=o(ki,"html_url"),ki.forEach(a),Ir=p(ke),ja=n(ke,"TH",{});var wi=l(ja);zr=o(wi,"title"),wi.forEach(a),Nr=p(ke),ka=n(ke,"TH",{});var yi=l(ka);Fr=o(yi,"comments"),yi.forEach(a),Hr=p(ke),wa=n(ke,"TH",{});var Di=l(wa);Rr=o(Di,"body"),Di.forEach(a),ke.forEach(a),ji.forEach(a),Mr=p(wo),de=n(wo,"TBODY",{});var Ve=l(de);se=n(Ve,"TR",{});var we=l(se);ya=n(we,"TH",{});var Ci=l(ya);Lr=o(Ci,"0"),Ci.forEach(a),Ur=p(we),Da=n(we,"TD",{});var Ti=l(Da);Vr=o(Ti,"https://github.com/huggingface/datasets/issues/2787"),Ti.forEach(a),Gr=p(we),Ca=n(we,"TD",{});var Ai=l(Ca);Br=o(Ai,"ConnectionError: Couldn't reach https://raw.githubusercontent.com"),Ai.forEach(a),Yr=p(we),Ta=n(we,"TD",{});var Pi=l(Ta);Wr=o(Pi,"the bug code locate in \uFF1A\\r\\n    if data_args.task_name is not None..."),Pi.forEach(a),Qr=p(we),Aa=n(we,"TD",{});var Si=l(Aa);Jr=o(Si,"Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),Si.forEach(a),we.forEach(a),Xr=p(Ve),ae=n(Ve,"TR",{});var ye=l(ae);Pa=n(ye,"TH",{});var Oi=l(Pa);Kr=o(Oi,"1"),Oi.forEach(a),Zr=p(ye),Sa=n(ye,"TD",{});var Ii=l(Sa);en=o(Ii,"https://github.com/huggingface/datasets/issues/2787"),Ii.forEach(a),sn=p(ye),Oa=n(ye,"TD",{});var zi=l(Oa);an=o(zi,"ConnectionError: Couldn't reach https://raw.githubusercontent.com"),zi.forEach(a),tn=p(ye),Ia=n(ye,"TD",{});var Ni=l(Ia);on=o(Ni,"Hi @jinec,\\r\\n\\r\\nFrom time to time we get this kind of `ConnectionError` coming from the github.com website: https://raw.githubusercontent.com..."),Ni.forEach(a),rn=p(ye),za=n(ye,"TD",{});var Fi=l(za);nn=o(Fi,"Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),Fi.forEach(a),ye.forEach(a),ln=p(Ve),te=n(Ve,"TR",{});var De=l(te);Na=n(De,"TH",{});var Hi=l(Na);mn=o(Hi,"2"),Hi.forEach(a),dn=p(De),Fa=n(De,"TD",{});var Ri=l(Fa);pn=o(Ri,"https://github.com/huggingface/datasets/issues/2787"),Ri.forEach(a),cn=p(De),Ha=n(De,"TD",{});var Mi=l(Ha);un=o(Mi,"ConnectionError: Couldn't reach https://raw.githubusercontent.com"),Mi.forEach(a),fn=p(De),Ra=n(De,"TD",{});var Li=l(Ra);hn=o(Li,"cannot connect\uFF0Ceven by Web browser\uFF0Cplease check that  there is some  problems\u3002"),Li.forEach(a),_n=p(De),Ma=n(De,"TD",{});var Ui=l(Ma);gn=o(Ui,"Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),Ui.forEach(a),De.forEach(a),bn=p(Ve),oe=n(Ve,"TR",{});var Ce=l(oe);La=n(Ce,"TH",{});var Vi=l(La);vn=o(Vi,"3"),Vi.forEach(a),$n=p(Ce),Ua=n(Ce,"TD",{});var Gi=l(Ua);xn=o(Gi,"https://github.com/huggingface/datasets/issues/2787"),Gi.forEach(a),qn=p(Ce),Va=n(Ce,"TD",{});var Bi=l(Va);En=o(Bi,"ConnectionError: Couldn't reach https://raw.githubusercontent.com"),Bi.forEach(a),jn=p(Ce),Ga=n(Ce,"TD",{});var Yi=l(Ga);kn=o(Yi,"I can access https://raw.githubusercontent.com/huggingface/datasets/1.7.0/datasets/glue/glue.py without problem..."),Yi.forEach(a),wn=p(Ce),Ba=n(Ce,"TD",{});var Wi=l(Ba);yn=o(Wi,"Hello,\\r\\nI am trying to run run_glue.py and it gives me this error..."),Wi.forEach(a),Ce.forEach(a),Ve.forEach(a),wo.forEach(a),Mt=p(e),ne=n(e,"P",{});var Ge=l(ne);Dn=o(Ge,"\xD3timo, podemos ver que as linhas foram replicadas, com a coluna "),Ya=n(Ge,"CODE",{});var Qi=l(Ya);Cn=o(Qi,"comments"),Qi.forEach(a),Tn=o(Ge," contendo os coment\xE1rios individuais! Agora que terminamos com o Pandas, podemos voltar rapidamente para um "),Wa=n(Ge,"CODE",{});var Ji=l(Wa);An=o(Ji,"Dataset"),Ji.forEach(a),Pn=o(Ge," carregando o "),Qa=n(Ge,"CODE",{});var Xi=l(Qa);Sn=o(Xi,"DataFrame"),Xi.forEach(a),On=o(Ge," na mem\xF3ria"),Ge.forEach(a),Lt=p(e),q(ls.$$.fragment,e),Ut=p(e),q(is.$$.fragment,e),Vt=p(e),Os=n(e,"P",{});var Ki=l(Os);In=o(Ki,"Ok, isso nos deu alguns milhares de coment\xE1rios para trabalhar!"),Ki.forEach(a),Gt=p(e),q(Ne.$$.fragment,e),Bt=p(e),Fe=n(e,"P",{});var yo=l(Fe);zn=o(yo,"Agora que temos um coment\xE1rio por linha, vamos criar uma nova coluna "),Ja=n(yo,"CODE",{});var Zi=l(Ja);Nn=o(Zi,"comments_length"),Zi.forEach(a),Fn=o(yo," que cont\xE9m o n\xFAmero de palavras por coment\xE1rio:"),yo.forEach(a),Yt=p(e),q(ms.$$.fragment,e),Wt=p(e),Is=n(e,"P",{});var em=l(Is);Hn=o(em,"Podemos usar essa nova coluna para filtrar coment\xE1rios curtos, que normalmente incluem coisas como \u201Ccc @lewtun\u201D ou \u201CObrigado!\u201D que n\xE3o s\xE3o relevantes para o nosso motor de busca. N\xE3o h\xE1 um n\xFAmero preciso para selecionar o filtro, mas cerca de 15 palavras parece um bom come\xE7o:"),em.forEach(a),Qt=p(e),q(ds.$$.fragment,e),Jt=p(e),q(ps.$$.fragment,e),Xt=p(e),ve=n(e,"P",{});var Xs=l(ve);Rn=o(Xs,"Depois de limpar um pouco nosso conjunto de dados, vamos concatenar o t\xEDtulo, a descri\xE7\xE3o e os coment\xE1rios da issue em uma nova coluna "),Xa=n(Xs,"CODE",{});var sm=l(Xa);Mn=o(sm,"text"),sm.forEach(a),Ln=o(Xs,". Como de costume, escreveremos uma fun\xE7\xE3o simples que podemos passar para "),Ka=n(Xs,"CODE",{});var am=l(Ka);Un=o(am,"Dataset.map()"),am.forEach(a),Vn=o(Xs,":"),Xs.forEach(a),Kt=p(e),q(cs.$$.fragment,e),Zt=p(e),zs=n(e,"P",{});var tm=l(zs);Gn=o(tm,"Finalmente estamos prontos para criar alguns embeddings! Vamos dar uma olhada."),tm.forEach(a),eo=p(e),Pe=n(e,"H2",{class:!0});var Do=l(Pe);He=n(Do,"A",{id:!0,class:!0,href:!0});var om=l(He);Za=n(om,"SPAN",{});var rm=l(Za);q(us.$$.fragment,rm),rm.forEach(a),om.forEach(a),Bn=p(Do),et=n(Do,"SPAN",{});var nm=l(et);Yn=o(nm,"Criando embeddings de texto"),nm.forEach(a),Do.forEach(a),so=p(e),B=n(e,"P",{});var X=l(B);Wn=o(X,"Vimos no "),Ns=n(X,"A",{href:!0});var lm=l(Ns);Qn=o(lm,"Cap\xEDtulo 2"),lm.forEach(a),Jn=o(X," que podemos obter tokens embeddings usando a classe "),st=n(X,"CODE",{});var im=l(st);Xn=o(im,"AutoModel"),im.forEach(a),Kn=o(X,". Tudo o que precisamos fazer \xE9 escolher um checkpoint adequado para carregar o modelo. Felizmente, existe uma biblioteca chamada "),at=n(X,"CODE",{});var mm=l(at);Zn=o(mm,"sentence-transformers"),mm.forEach(a),el=o(X," dedicada \xE0 cria\xE7\xE3o de embeddings. Conforme descrito na "),fs=n(X,"A",{href:!0,rel:!0});var dm=l(fs);sl=o(dm,"documenta\xE7\xE3o da biblioteca"),dm.forEach(a),al=o(X,", nosso caso de uso \xE9 um exemplo de "),tt=n(X,"EM",{});var pm=l(tt);tl=o(pm,"asymmetric semantic search"),pm.forEach(a),ol=o(X," porque temos uma consulta curta cuja resposta gostar\xEDamos de encontrar em um documento mais longo, como um coment\xE1rio da issue. A \xFAtil "),hs=n(X,"A",{href:!0,rel:!0});var cm=l(hs);rl=o(cm,"tabela de vis\xE3o geral do modelo"),cm.forEach(a),nl=o(X," na documenta\xE7\xE3o indica que o checkpoint "),ot=n(X,"CODE",{});var um=l(ot);ll=o(um,"multi-qa-mpnet-base-dot-v1"),um.forEach(a),il=o(X," tem o melhor desempenho para pesquisa sem\xE2ntica, ent\xE3o usaremos isso para nosso aplicativo. Tamb\xE9m carregaremos o tokenizer usando o mesmo checkpoint:"),X.forEach(a),ao=p(e),ce.l(e),Fs=p(e),$e=n(e,"P",{});var Ks=l($e);ml=o(Ks,"Como mencionamos anteriormente, gostar\xEDamos de representar cada entrada em nosso corpus de issues do GitHub como um \xFAnico vetor, portanto, precisamos \u201Cpool\u201D ou calcular a m\xE9dia de nossas incorpora\xE7\xF5es de token de alguma forma. Uma abordagem popular \xE9 realizar "),rt=n(Ks,"EM",{});var fm=l(rt);dl=o(fm,"CLS pooling"),fm.forEach(a),pl=o(Ks," nas sa\xEDdas do nosso modelo, onde simplesmente coletamos o \xFAltimo estado oculto para o token especial "),nt=n(Ks,"CODE",{});var hm=l(nt);cl=o(hm,"[CLS]"),hm.forEach(a),ul=o(Ks,". A fun\xE7\xE3o a seguir faz o truque para n\xF3s:"),Ks.forEach(a),to=p(e),q(_s.$$.fragment,e),oo=p(e),Hs=n(e,"P",{});var _m=l(Hs);fl=o(_m,"Em seguida, criaremos uma fun\xE7\xE3o auxiliar que tokenizar\xE1 uma lista de documentos, colocar\xE1 os tensores na GPU, os alimentar\xE1 no modelo e, finalmente, aplicar\xE1 o agrupamento CLS \xE0s sa\xEDdas:"),_m.forEach(a),ro=p(e),fe.l(e),Rs=p(e),Ms=n(e,"P",{});var gm=l(Ms);hl=o(gm,"Observe que convertemos os embeddings em arrays NumPy \u2014 isso porque \u{1F917} Datasets requer esse formato quando tentamos index\xE1-los com FAISS, o que faremos a seguir."),gm.forEach(a),no=p(e),Se=n(e,"H2",{class:!0});var Co=l(Se);Re=n(Co,"A",{id:!0,class:!0,href:!0});var bm=l(Re);lt=n(bm,"SPAN",{});var vm=l(lt);q(gs.$$.fragment,vm),vm.forEach(a),bm.forEach(a),_l=p(Co),it=n(Co,"SPAN",{});var $m=l(it);gl=o($m,"Usando FAISS para busca de similaridade"),$m.forEach(a),Co.forEach(a),lo=p(e),xe=n(e,"P",{});var Zs=l(xe);bl=o(Zs,"Agora que temos um conjunto de dados de embeddings, precisamos de alguma maneira de pesquis\xE1-los. Para fazer isso, usaremos uma estrutura de dados especial em \u{1F917} Datasets chamada "),mt=n(Zs,"EM",{});var xm=l(mt);vl=o(xm,"FAISS index"),xm.forEach(a),$l=o(Zs,". "),bs=n(Zs,"A",{href:!0,rel:!0});var qm=l(bs);xl=o(qm,"FAISS"),qm.forEach(a),ql=o(Zs," (abrevia\xE7\xE3o de Facebook AI Similarity Search) \xE9 uma biblioteca que fornece algoritmos eficientes para pesquisar rapidamente e agrupar vetores de incorpora\xE7\xE3o."),Zs.forEach(a),io=p(e),qe=n(e,"P",{});var ea=l(qe);El=o(ea,"A id\xE9ia b\xE1sica por tr\xE1s do FAISS \xE9 criar uma estrutura de dados especial chamada "),dt=n(ea,"EM",{});var Em=l(dt);jl=o(Em,"index"),Em.forEach(a),kl=o(ea," que permite descobrir quais embeddings s\xE3o semelhantes a um embedding de entrada. Criar um \xEDndice FAISS em \u{1F917} Datasets \xE9 simples \u2014 usamos a fun\xE7\xE3o "),pt=n(ea,"CODE",{});var jm=l(pt);wl=o(jm,"Dataset.add_faiss_index()"),jm.forEach(a),yl=o(ea," e especificamos qual coluna do nosso conjunto de dados gostar\xEDamos de indexar:"),ea.forEach(a),mo=p(e),q(vs.$$.fragment,e),po=p(e),Me=n(e,"P",{});var To=l(Me);Dl=o(To,"Agora podemos realizar consultas neste \xEDndice fazendo uma pesquisa do vizinho mais pr\xF3ximo com a fun\xE7\xE3o "),ct=n(To,"CODE",{});var km=l(ct);Cl=o(km,"Dataset.get_nearest_examples()"),km.forEach(a),Tl=o(To,". Vamos testar isso primeiro incorporando uma pergunta da seguinte forma:"),To.forEach(a),co=p(e),_e.l(e),Ls=p(e),Us=n(e,"P",{});var wm=l(Us);Al=o(wm,"Assim como com os documentos, agora temos um vetor de 768 dimens\xF5es representando a consulta, que podemos comparar com todo o corpus para encontrar os embeddings mais semelhantes:"),wm.forEach(a),uo=p(e),q($s.$$.fragment,e),fo=p(e),Ee=n(e,"P",{});var sa=l(Ee);Pl=o(sa,"A fun\xE7\xE3o "),ut=n(sa,"CODE",{});var ym=l(ut);Sl=o(ym,"Dataset.get_nearest_examples()"),ym.forEach(a),Ol=o(sa," retorna uma tupla de pontua\xE7\xF5es que classificam a sobreposi\xE7\xE3o entre a consulta e o documento e um conjunto correspondente de amostras (aqui, as 5 melhores correspond\xEAncias). Vamos colet\xE1-los em um "),ft=n(sa,"CODE",{});var Dm=l(ft);Il=o(Dm,"pandas.DataFrame"),Dm.forEach(a),zl=o(sa," para que possamos classific\xE1-los facilmente:"),sa.forEach(a),ho=p(e),q(xs.$$.fragment,e),_o=p(e),Vs=n(e,"P",{});var Cm=l(Vs);Nl=o(Cm,"Agora podemos iterar nas primeiras linhas para ver como nossa consulta correspondeu aos coment\xE1rios dispon\xEDveis:"),Cm.forEach(a),go=p(e),q(qs.$$.fragment,e),bo=p(e),q(Es.$$.fragment,e),vo=p(e),Gs=n(e,"P",{});var Tm=l(Gs);Fl=o(Tm,"Nada mal! Nosso segundo resultado parece corresponder \xE0 consulta."),Tm.forEach(a),$o=p(e),q(Le.$$.fragment,e),this.h()},h(){k(c,"name","hf:doc:metadata"),k(c,"content",JSON.stringify(Km)),k(v,"id","busca-semntica-com-o-faiss"),k(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(v,"href","#busca-semntica-com-o-faiss"),k(h,"class","relative group"),k(C,"href","/course/chapter5/5"),k(T,"id","usando-embeddings-para-pesquisa-semntica"),k(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(T,"href","#usando-embeddings-para-pesquisa-semntica"),k(u,"class","relative group"),k(Ts,"href","/course/chapter1"),k(Be,"class","block dark:hidden"),Am(Be.src,Hl="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter5/semantic-search.svg")||k(Be,"src",Hl),k(Be,"alt","Semantic search."),k(Ye,"class","hidden dark:block"),Am(Ye.src,Rl="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter5/semantic-search-dark.svg")||k(Ye,"src",Rl),k(Ye,"alt","Semantic search."),k(Te,"class","flex justify-center"),k(Oe,"id","carregando-e-preparando-o-conjunto-de-dados"),k(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(Oe,"href","#carregando-e-preparando-o-conjunto-de-dados"),k(Ae,"class","relative group"),k(Ss,"href","/course/chapter5/2"),k(as,"href","https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.explode.html"),k(as,"rel","nofollow"),Ao(Z,"text-align","right"),k(ee,"border","1"),k(ee,"class","dataframe"),Ao(ee,"table-layout","fixed"),Ao(ee,"word-wrap","break-word"),Ao(ee,"width","100%"),k(He,"id","criando-embeddings-de-texto"),k(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(He,"href","#criando-embeddings-de-texto"),k(Pe,"class","relative group"),k(Ns,"href","/course/chapter2"),k(fs,"href","https://www.sbert.net/examples/applications/semantic-search/README.html#symmetric-vs-asymmetric-semantic-search"),k(fs,"rel","nofollow"),k(hs,"href","https://www.sbert.net/docs/pretrained_models.html#model-overview"),k(hs,"rel","nofollow"),k(Re,"id","usando-faiss-para-busca-de-similaridade"),k(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(Re,"href","#usando-faiss-para-busca-de-similaridade"),k(Se,"class","relative group"),k(bs,"href","https://faiss.ai/"),k(bs,"rel","nofollow")},m(e,i){s(document.head,c),m(e,$,i),E(f,e,i),m(e,w,i),m(e,h,i),s(h,v),s(v,O),E(_,O,null),s(h,A),s(h,y),s(y,M),m(e,I,i),js[P].m(e,i),m(e,N,i),m(e,H,i),s(H,V),s(H,C),s(C,F),s(H,Y),m(e,U,i),E(D,e,i),m(e,G,i),m(e,u,i),s(u,T),s(T,R),E(W,R,null),s(u,re),s(u,me),s(me,Oo),m(e,gt,i),m(e,ge,i),s(ge,Io),s(ge,Ts),s(Ts,zo),s(ge,No),s(ge,aa),s(aa,Fo),s(ge,Ho),m(e,bt,i),m(e,As,i),s(As,Ro),m(e,vt,i),m(e,Te,i),s(Te,Be),s(Te,Mo),s(Te,Ye),m(e,$t,i),m(e,Ae,i),s(Ae,Oe),s(Oe,ta),E(We,ta,null),s(Ae,Lo),s(Ae,oa),s(oa,Uo),m(e,xt,i),m(e,Ps,i),s(Ps,Vo),m(e,qt,i),E(Qe,e,i),m(e,Et,i),m(e,be,i),s(be,Go),s(be,ra),s(ra,Bo),s(be,Yo),s(be,Ss),s(Ss,Wo),s(be,Qo),m(e,jt,i),E(Je,e,i),m(e,kt,i),E(Xe,e,i),m(e,wt,i),m(e,Q,i),s(Q,Jo),s(Q,na),s(na,Xo),s(Q,Ko),s(Q,la),s(la,Zo),s(Q,er),s(Q,ia),s(ia,sr),s(Q,ar),s(Q,ma),s(ma,tr),s(Q,or),s(Q,da),s(da,rr),s(Q,nr),m(e,yt,i),E(Ke,e,i),m(e,Dt,i),E(Ze,e,i),m(e,Ct,i),m(e,J,i),s(J,lr),s(J,pa),s(pa,ir),s(J,mr),s(J,ca),s(ca,dr),s(J,pr),s(J,ua),s(ua,cr),s(J,ur),s(J,fa),s(fa,fr),s(J,hr),s(J,ha),s(ha,_r),s(J,gr),m(e,Tt,i),E(es,e,i),m(e,At,i),E(ss,e,i),m(e,Pt,i),m(e,K,i),s(K,br),s(K,_a),s(_a,vr),s(K,$r),s(K,ga),s(ga,xr),s(K,qr),s(K,as),s(as,ba),s(ba,Er),s(K,jr),s(K,va),s(va,kr),s(K,wr),m(e,St,i),E(ts,e,i),m(e,Ot,i),m(e,Ie,i),s(Ie,yr),s(Ie,$a),s($a,Dr),s(Ie,Cr),m(e,It,i),E(os,e,i),m(e,zt,i),E(rs,e,i),m(e,Nt,i),m(e,ze,i),s(ze,Tr),s(ze,xa),s(xa,Ar),s(ze,Pr),m(e,Ft,i),E(ns,e,i),m(e,Ht,i),m(e,ee,i),s(ee,qa),s(qa,Z),s(Z,Rt),s(Z,Sr),s(Z,Ea),s(Ea,Or),s(Z,Ir),s(Z,ja),s(ja,zr),s(Z,Nr),s(Z,ka),s(ka,Fr),s(Z,Hr),s(Z,wa),s(wa,Rr),s(ee,Mr),s(ee,de),s(de,se),s(se,ya),s(ya,Lr),s(se,Ur),s(se,Da),s(Da,Vr),s(se,Gr),s(se,Ca),s(Ca,Br),s(se,Yr),s(se,Ta),s(Ta,Wr),s(se,Qr),s(se,Aa),s(Aa,Jr),s(de,Xr),s(de,ae),s(ae,Pa),s(Pa,Kr),s(ae,Zr),s(ae,Sa),s(Sa,en),s(ae,sn),s(ae,Oa),s(Oa,an),s(ae,tn),s(ae,Ia),s(Ia,on),s(ae,rn),s(ae,za),s(za,nn),s(de,ln),s(de,te),s(te,Na),s(Na,mn),s(te,dn),s(te,Fa),s(Fa,pn),s(te,cn),s(te,Ha),s(Ha,un),s(te,fn),s(te,Ra),s(Ra,hn),s(te,_n),s(te,Ma),s(Ma,gn),s(de,bn),s(de,oe),s(oe,La),s(La,vn),s(oe,$n),s(oe,Ua),s(Ua,xn),s(oe,qn),s(oe,Va),s(Va,En),s(oe,jn),s(oe,Ga),s(Ga,kn),s(oe,wn),s(oe,Ba),s(Ba,yn),m(e,Mt,i),m(e,ne,i),s(ne,Dn),s(ne,Ya),s(Ya,Cn),s(ne,Tn),s(ne,Wa),s(Wa,An),s(ne,Pn),s(ne,Qa),s(Qa,Sn),s(ne,On),m(e,Lt,i),E(ls,e,i),m(e,Ut,i),E(is,e,i),m(e,Vt,i),m(e,Os,i),s(Os,In),m(e,Gt,i),E(Ne,e,i),m(e,Bt,i),m(e,Fe,i),s(Fe,zn),s(Fe,Ja),s(Ja,Nn),s(Fe,Fn),m(e,Yt,i),E(ms,e,i),m(e,Wt,i),m(e,Is,i),s(Is,Hn),m(e,Qt,i),E(ds,e,i),m(e,Jt,i),E(ps,e,i),m(e,Xt,i),m(e,ve,i),s(ve,Rn),s(ve,Xa),s(Xa,Mn),s(ve,Ln),s(ve,Ka),s(Ka,Un),s(ve,Vn),m(e,Kt,i),E(cs,e,i),m(e,Zt,i),m(e,zs,i),s(zs,Gn),m(e,eo,i),m(e,Pe,i),s(Pe,He),s(He,Za),E(us,Za,null),s(Pe,Bn),s(Pe,et),s(et,Yn),m(e,so,i),m(e,B,i),s(B,Wn),s(B,Ns),s(Ns,Qn),s(B,Jn),s(B,st),s(st,Xn),s(B,Kn),s(B,at),s(at,Zn),s(B,el),s(B,fs),s(fs,sl),s(B,al),s(B,tt),s(tt,tl),s(B,ol),s(B,hs),s(hs,rl),s(B,nl),s(B,ot),s(ot,ll),s(B,il),m(e,ao,i),ks[pe].m(e,i),m(e,Fs,i),m(e,$e,i),s($e,ml),s($e,rt),s(rt,dl),s($e,pl),s($e,nt),s(nt,cl),s($e,ul),m(e,to,i),E(_s,e,i),m(e,oo,i),m(e,Hs,i),s(Hs,fl),m(e,ro,i),ws[ue].m(e,i),m(e,Rs,i),m(e,Ms,i),s(Ms,hl),m(e,no,i),m(e,Se,i),s(Se,Re),s(Re,lt),E(gs,lt,null),s(Se,_l),s(Se,it),s(it,gl),m(e,lo,i),m(e,xe,i),s(xe,bl),s(xe,mt),s(mt,vl),s(xe,$l),s(xe,bs),s(bs,xl),s(xe,ql),m(e,io,i),m(e,qe,i),s(qe,El),s(qe,dt),s(dt,jl),s(qe,kl),s(qe,pt),s(pt,wl),s(qe,yl),m(e,mo,i),E(vs,e,i),m(e,po,i),m(e,Me,i),s(Me,Dl),s(Me,ct),s(ct,Cl),s(Me,Tl),m(e,co,i),ys[he].m(e,i),m(e,Ls,i),m(e,Us,i),s(Us,Al),m(e,uo,i),E($s,e,i),m(e,fo,i),m(e,Ee,i),s(Ee,Pl),s(Ee,ut),s(ut,Sl),s(Ee,Ol),s(Ee,ft),s(ft,Il),s(Ee,zl),m(e,ho,i),E(xs,e,i),m(e,_o,i),m(e,Vs,i),s(Vs,Nl),m(e,go,i),E(qs,e,i),m(e,bo,i),E(Es,e,i),m(e,vo,i),m(e,Gs,i),s(Gs,Fl),m(e,$o,i),E(Le,e,i),xo=!0},p(e,[i]){const Ds={};i&1&&(Ds.fw=e[0]),f.$set(Ds);let Bs=P;P=Ll(e),P!==Bs&&(So(),g(js[Bs],1,1,()=>{js[Bs]=null}),Po(),z=js[P],z||(z=js[P]=Ml[P](e),z.c()),b(z,1),z.m(N.parentNode,N));const ht={};i&2&&(ht.$$scope={dirty:i,ctx:e}),Ne.$set(ht);let Ys=pe;pe=Vl(e),pe!==Ys&&(So(),g(ks[Ys],1,1,()=>{ks[Ys]=null}),Po(),ce=ks[pe],ce||(ce=ks[pe]=Ul[pe](e),ce.c()),b(ce,1),ce.m(Fs.parentNode,Fs));let Ue=ue;ue=Bl(e),ue!==Ue&&(So(),g(ws[Ue],1,1,()=>{ws[Ue]=null}),Po(),fe=ws[ue],fe||(fe=ws[ue]=Gl[ue](e),fe.c()),b(fe,1),fe.m(Rs.parentNode,Rs));let Ws=he;he=Wl(e),he!==Ws&&(So(),g(ys[Ws],1,1,()=>{ys[Ws]=null}),Po(),_e=ys[he],_e||(_e=ys[he]=Yl[he](e),_e.c()),b(_e,1),_e.m(Ls.parentNode,Ls));const Cs={};i&2&&(Cs.$$scope={dirty:i,ctx:e}),Le.$set(Cs)},i(e){xo||(b(f.$$.fragment,e),b(_.$$.fragment,e),b(z),b(D.$$.fragment,e),b(W.$$.fragment,e),b(We.$$.fragment,e),b(Qe.$$.fragment,e),b(Je.$$.fragment,e),b(Xe.$$.fragment,e),b(Ke.$$.fragment,e),b(Ze.$$.fragment,e),b(es.$$.fragment,e),b(ss.$$.fragment,e),b(ts.$$.fragment,e),b(os.$$.fragment,e),b(rs.$$.fragment,e),b(ns.$$.fragment,e),b(ls.$$.fragment,e),b(is.$$.fragment,e),b(Ne.$$.fragment,e),b(ms.$$.fragment,e),b(ds.$$.fragment,e),b(ps.$$.fragment,e),b(cs.$$.fragment,e),b(us.$$.fragment,e),b(ce),b(_s.$$.fragment,e),b(fe),b(gs.$$.fragment,e),b(vs.$$.fragment,e),b(_e),b($s.$$.fragment,e),b(xs.$$.fragment,e),b(qs.$$.fragment,e),b(Es.$$.fragment,e),b(Le.$$.fragment,e),xo=!0)},o(e){g(f.$$.fragment,e),g(_.$$.fragment,e),g(z),g(D.$$.fragment,e),g(W.$$.fragment,e),g(We.$$.fragment,e),g(Qe.$$.fragment,e),g(Je.$$.fragment,e),g(Xe.$$.fragment,e),g(Ke.$$.fragment,e),g(Ze.$$.fragment,e),g(es.$$.fragment,e),g(ss.$$.fragment,e),g(ts.$$.fragment,e),g(os.$$.fragment,e),g(rs.$$.fragment,e),g(ns.$$.fragment,e),g(ls.$$.fragment,e),g(is.$$.fragment,e),g(Ne.$$.fragment,e),g(ms.$$.fragment,e),g(ds.$$.fragment,e),g(ps.$$.fragment,e),g(cs.$$.fragment,e),g(us.$$.fragment,e),g(ce),g(_s.$$.fragment,e),g(fe),g(gs.$$.fragment,e),g(vs.$$.fragment,e),g(_e),g($s.$$.fragment,e),g(xs.$$.fragment,e),g(qs.$$.fragment,e),g(Es.$$.fragment,e),g(Le.$$.fragment,e),xo=!1},d(e){a(c),e&&a($),j(f,e),e&&a(w),e&&a(h),j(_),e&&a(I),js[P].d(e),e&&a(N),e&&a(H),e&&a(U),j(D,e),e&&a(G),e&&a(u),j(W),e&&a(gt),e&&a(ge),e&&a(bt),e&&a(As),e&&a(vt),e&&a(Te),e&&a($t),e&&a(Ae),j(We),e&&a(xt),e&&a(Ps),e&&a(qt),j(Qe,e),e&&a(Et),e&&a(be),e&&a(jt),j(Je,e),e&&a(kt),j(Xe,e),e&&a(wt),e&&a(Q),e&&a(yt),j(Ke,e),e&&a(Dt),j(Ze,e),e&&a(Ct),e&&a(J),e&&a(Tt),j(es,e),e&&a(At),j(ss,e),e&&a(Pt),e&&a(K),e&&a(St),j(ts,e),e&&a(Ot),e&&a(Ie),e&&a(It),j(os,e),e&&a(zt),j(rs,e),e&&a(Nt),e&&a(ze),e&&a(Ft),j(ns,e),e&&a(Ht),e&&a(ee),e&&a(Mt),e&&a(ne),e&&a(Lt),j(ls,e),e&&a(Ut),j(is,e),e&&a(Vt),e&&a(Os),e&&a(Gt),j(Ne,e),e&&a(Bt),e&&a(Fe),e&&a(Yt),j(ms,e),e&&a(Wt),e&&a(Is),e&&a(Qt),j(ds,e),e&&a(Jt),j(ps,e),e&&a(Xt),e&&a(ve),e&&a(Kt),j(cs,e),e&&a(Zt),e&&a(zs),e&&a(eo),e&&a(Pe),j(us),e&&a(so),e&&a(B),e&&a(ao),ks[pe].d(e),e&&a(Fs),e&&a($e),e&&a(to),j(_s,e),e&&a(oo),e&&a(Hs),e&&a(ro),ws[ue].d(e),e&&a(Rs),e&&a(Ms),e&&a(no),e&&a(Se),j(gs),e&&a(lo),e&&a(xe),e&&a(io),e&&a(qe),e&&a(mo),j(vs,e),e&&a(po),e&&a(Me),e&&a(co),ys[he].d(e),e&&a(Ls),e&&a(Us),e&&a(uo),j($s,e),e&&a(fo),e&&a(Ee),e&&a(ho),j(xs,e),e&&a(_o),e&&a(Vs),e&&a(go),j(qs,e),e&&a(bo),j(Es,e),e&&a(vo),e&&a(Gs),e&&a($o),j(Le,e)}}}const Km={local:"busca-semntica-com-o-faiss",sections:[{local:"usando-embeddings-para-pesquisa-semntica",title:"Usando embeddings para pesquisa sem\xE2ntica"},{local:"carregando-e-preparando-o-conjunto-de-dados",title:"Carregando e preparando o conjunto de dados"},{local:"criando-embeddings-de-texto",title:"Criando embeddings de texto"},{local:"usando-faiss-para-busca-de-similaridade",title:"Usando FAISS para busca de similaridade"}],title:"Busca sem\xE2ntica com o FAISS"};function Zm(L,c,$){let f="pt";return Fm(()=>{const w=new URLSearchParams(window.location.search);$(0,f=w.get("fw")||"pt")}),[f]}class ld extends Om{constructor(c){super();Im(this,c,Zm,Xm,zm,{})}}export{ld as default,Km as metadata};
