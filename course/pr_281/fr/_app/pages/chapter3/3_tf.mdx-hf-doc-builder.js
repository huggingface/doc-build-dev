import{S as Dn,i as Mn,s as Nn,e as r,k as d,w as q,t as a,M as Fn,c as l,d as s,m as c,x as b,a as i,h as n,b as h,G as t,g as u,y as g,q as E,o as k,B as j,v as Kn}from"../../chunks/vendor-hf-doc-builder.js";import{T as _s}from"../../chunks/Tip-hf-doc-builder.js";import{Y as hs}from"../../chunks/Youtube-hf-doc-builder.js";import{I as $s}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as G}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as Ln}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";import{F as Un}from"../../chunks/FrameworkSwitchCourse-hf-doc-builder.js";function On(O){let p,z,m,x,$,f,y,w;return{c(){p=r("p"),z=a("Notez que les mod\xE8les \u{1F917} "),m=r("em"),x=a("Transformers"),$=a(" ont une capacit\xE9 sp\xE9ciale que la plupart des mod\xE8les Keras n\u2019ont pas. Ils peuvent automatiquement utiliser une perte appropri\xE9e qu\u2019ils calculent en interne. Ils utiliseront cette perte par d\xE9faut si vous ne d\xE9finissez pas un argument de perte dans "),f=r("code"),y=a("compile()"),w=a(". Notez que pour utiliser la perte interne, vous devrez passer vos labels comme faisant partie de l\u2019entr\xE9e, et non pas comme un label s\xE9par\xE9, ce qui est la fa\xE7on normale d\u2019utiliser les labels avec les mod\xE8les Keras. Vous verrez des exemples de cela dans la partie 2 du cours, o\xF9 la d\xE9finition de la fonction de perte correcte peut \xEAtre d\xE9licate. Pour la classification des s\xE9quences, cependant, une fonction de perte standard de Keras fonctionne bien, et c\u2019est donc ce que nous utiliserons ici.")},l(_){p=l(_,"P",{});var v=i(p);z=n(v,"Notez que les mod\xE8les \u{1F917} "),m=l(v,"EM",{});var A=i(m);x=n(A,"Transformers"),A.forEach(s),$=n(v," ont une capacit\xE9 sp\xE9ciale que la plupart des mod\xE8les Keras n\u2019ont pas. Ils peuvent automatiquement utiliser une perte appropri\xE9e qu\u2019ils calculent en interne. Ils utiliseront cette perte par d\xE9faut si vous ne d\xE9finissez pas un argument de perte dans "),f=l(v,"CODE",{});var C=i(f);y=n(C,"compile()"),C.forEach(s),w=n(v,". Notez que pour utiliser la perte interne, vous devrez passer vos labels comme faisant partie de l\u2019entr\xE9e, et non pas comme un label s\xE9par\xE9, ce qui est la fa\xE7on normale d\u2019utiliser les labels avec les mod\xE8les Keras. Vous verrez des exemples de cela dans la partie 2 du cours, o\xF9 la d\xE9finition de la fonction de perte correcte peut \xEAtre d\xE9licate. Pour la classification des s\xE9quences, cependant, une fonction de perte standard de Keras fonctionne bien, et c\u2019est donc ce que nous utiliserons ici."),v.forEach(s)},m(_,v){u(_,p,v),t(p,z),t(p,m),t(m,x),t(p,$),t(p,f),t(f,y),t(p,w)},d(_){_&&s(p)}}}function In(O){let p,z,m,x,$,f,y,w;return{c(){p=r("p"),z=a("Notez un pi\xE8ge tr\xE8s commun ici. Vous "),m=r("em"),x=a("pouvez"),$=a(" simplement passer le nom de la perte comme une cha\xEEne \xE0 Keras, mais par d\xE9faut Keras supposera que vous avez d\xE9j\xE0 appliqu\xE9 une fonction softmax \xE0 vos sorties. Cependant, de nombreux mod\xE8les produisent les valeurs juste avant l\u2019application de la softmax, que l\u2019on appelle aussi les "),f=r("em"),y=a("logits"),w=a(". Nous devons indiquer \xE0 la fonction de perte que c\u2019est ce que fait notre mod\xE8le, et la seule fa\xE7on de le faire est de l\u2019appeler directement, plut\xF4t que par son nom avec une cha\xEEne.")},l(_){p=l(_,"P",{});var v=i(p);z=n(v,"Notez un pi\xE8ge tr\xE8s commun ici. Vous "),m=l(v,"EM",{});var A=i(m);x=n(A,"pouvez"),A.forEach(s),$=n(v," simplement passer le nom de la perte comme une cha\xEEne \xE0 Keras, mais par d\xE9faut Keras supposera que vous avez d\xE9j\xE0 appliqu\xE9 une fonction softmax \xE0 vos sorties. Cependant, de nombreux mod\xE8les produisent les valeurs juste avant l\u2019application de la softmax, que l\u2019on appelle aussi les "),f=l(v,"EM",{});var C=i(f);y=n(C,"logits"),C.forEach(s),w=n(v,". Nous devons indiquer \xE0 la fonction de perte que c\u2019est ce que fait notre mod\xE8le, et la seule fa\xE7on de le faire est de l\u2019appeler directement, plut\xF4t que par son nom avec une cha\xEEne."),v.forEach(s)},m(_,v){u(_,p,v),t(p,z),t(p,m),t(m,x),t(p,$),t(p,f),t(f,y),t(p,w)},d(_){_&&s(p)}}}function Gn(O){let p,z,m,x,$,f,y,w,_,v,A;return{c(){p=r("p"),z=a("La biblioth\xE8que \u{1F917} "),m=r("em"),x=a("Transformers"),$=a(" poss\xE8de \xE9galement une fonction "),f=r("code"),y=a("create_optimizer()"),w=a(" qui cr\xE9era un optimiseur "),_=r("code"),v=a("AdamW"),A=a(" avec un taux d\u2019apprentissage d\xE9croissant. Il s\u2019agit d\u2019un raccourci pratique que vous verrez en d\xE9tail dans les prochaines sections du cours.")},l(C){p=l(C,"P",{});var T=i(p);z=n(T,"La biblioth\xE8que \u{1F917} "),m=l(T,"EM",{});var I=i(m);x=n(I,"Transformers"),I.forEach(s),$=n(T," poss\xE8de \xE9galement une fonction "),f=l(T,"CODE",{});var S=i(f);y=n(S,"create_optimizer()"),S.forEach(s),w=n(T," qui cr\xE9era un optimiseur "),_=l(T,"CODE",{});var P=i(_);v=n(P,"AdamW"),P.forEach(s),A=n(T," avec un taux d\u2019apprentissage d\xE9croissant. Il s\u2019agit d\u2019un raccourci pratique que vous verrez en d\xE9tail dans les prochaines sections du cours."),T.forEach(s)},m(C,T){u(C,p,T),t(p,z),t(p,m),t(m,x),t(p,$),t(p,f),t(f,y),t(p,w),t(p,_),t(_,v),t(p,A)},d(C){C&&s(p)}}}function Vn(O){let p,z,m,x,$,f,y,w,_,v,A,C,T,I;return{c(){p=r("p"),z=a("\u{1F4A1} Si vous voulez t\xE9l\xE9charger automatiquement votre mod\xE8le sur le "),m=r("em"),x=a("Hub"),$=a(" pendant l\u2019entra\xEEnement, vous pouvez passer un "),f=r("code"),y=a("PushToHubCallback"),w=a(" dans la m\xE9thode "),_=r("code"),v=a("model.fit()"),A=a(". Nous en apprendrons davantage \xE0 ce sujet au "),C=r("a"),T=a("chapitre 4"),I=a("."),this.h()},l(S){p=l(S,"P",{});var P=i(p);z=n(P,"\u{1F4A1} Si vous voulez t\xE9l\xE9charger automatiquement votre mod\xE8le sur le "),m=l(P,"EM",{});var N=i(m);x=n(N,"Hub"),N.forEach(s),$=n(P," pendant l\u2019entra\xEEnement, vous pouvez passer un "),f=l(P,"CODE",{});var Se=i(f);y=n(Se,"PushToHubCallback"),Se.forEach(s),w=n(P," dans la m\xE9thode "),_=l(P,"CODE",{});var Q=i(_);v=n(Q,"model.fit()"),Q.forEach(s),A=n(P,". Nous en apprendrons davantage \xE0 ce sujet au "),C=l(P,"A",{href:!0});var De=i(C);T=n(De,"chapitre 4"),De.forEach(s),I=n(P,"."),P.forEach(s),this.h()},h(){h(C,"href","/course/fr/chapter4/3")},m(S,P){u(S,p,P),t(p,z),t(p,m),t(m,x),t(p,$),t(p,f),t(f,y),t(p,w),t(p,_),t(_,v),t(p,A),t(p,C),t(C,T),t(p,I)},d(S){S&&s(p)}}}function Hn(O){let p,z,m,x,$,f,y,w,_,v,A,C,T,I,S,P,N,Se,Q,De,qs,ce,bs,gs,wt,Me,Es,zt,me,xt,W,X,Re,fe,ks,Be,js,Ct,Z,ws,We,zs,xs,yt,ve,Pt,Ne,Cs,At,_e,Tt,V,ys,Fe,Ps,As,Ye,Ts,Ss,St,he,Dt,ee,Ds,Ke,Ms,Ns,Mt,M,Fs,Je,Ks,Ls,Qe,Us,Os,Xe,Is,Gs,Ze,Vs,Hs,Nt,te,Ft,$e,Kt,se,Lt,Y,ae,et,qe,Rs,tt,Bs,Ut,be,Ot,H,Ws,st,Ys,Js,at,Qs,Xs,It,D,Zs,nt,ea,ta,ot,sa,aa,rt,na,oa,lt,ra,la,it,ia,ua,Gt,ge,Vt,ne,Ht,Le,pa,Rt,Ee,Bt,oe,da,ut,ca,ma,Wt,ke,Yt,re,Jt,J,le,pt,je,fa,dt,va,Qt,we,Xt,R,_a,ct,ha,$a,mt,qa,ba,Zt,ze,es,ie,ga,ft,Ea,ka,ts,xe,ss,Ce,as,F,ja,vt,wa,za,_t,xa,Ca,ht,ya,Pa,ns,ye,os,Pe,rs,K,Aa,Ae,Ta,Sa,$t,Da,Ma,qt,Na,Fa,ls,L,Ka,bt,La,Ua,Ue,Oa,Ia,gt,Ga,Va,is;return m=new Un({props:{fw:O[0]}}),w=new $s({}),S=new Ln({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter3/section3_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter3/section3_tf.ipynb"}]}}),me=new G({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer, DataCollatorWithPadding
import numpy as np

raw_datasets = load_dataset("glue", "mrpc")
checkpoint = "bert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(checkpoint)


def tokenize_function(example):
    return tokenizer(example["sentence1"], example["sentence2"], truncation=True)


tokenized_datasets = raw_datasets.map(tokenize_function, batched=True)

data_collator = DataCollatorWithPadding(tokenizer=tokenizer, return_tensors="tf")

tf_train_dataset = tokenized_datasets["train"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "token_type_ids"],
    label_cols=["labels"],
    shuffle=True,
    collate_fn=data_collator,
    batch_size=8,
)

tf_validation_dataset = tokenized_datasets["validation"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "token_type_ids"],
    label_cols=["labels"],
    shuffle=False,
    collate_fn=data_collator,
    batch_size=8,
)`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, DataCollatorWithPadding
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

raw_datasets = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>)
checkpoint = <span class="hljs-string">&quot;bert-base-uncased&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(checkpoint)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_function</span>(<span class="hljs-params">example</span>):
    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;sentence1&quot;</span>], example[<span class="hljs-string">&quot;sentence2&quot;</span>], truncation=<span class="hljs-literal">True</span>)


tokenized_datasets = raw_datasets.<span class="hljs-built_in">map</span>(tokenize_function, batched=<span class="hljs-literal">True</span>)

data_collator = DataCollatorWithPadding(tokenizer=tokenizer, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

tf_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
    label_cols=[<span class="hljs-string">&quot;labels&quot;</span>],
    shuffle=<span class="hljs-literal">True</span>,
    collate_fn=data_collator,
    batch_size=<span class="hljs-number">8</span>,
)

tf_validation_dataset = tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
    label_cols=[<span class="hljs-string">&quot;labels&quot;</span>],
    shuffle=<span class="hljs-literal">False</span>,
    collate_fn=data_collator,
    batch_size=<span class="hljs-number">8</span>,
)`}}),fe=new $s({}),ve=new hs({props:{id:"rnTGBy2ax1c"}}),_e=new hs({props:{id:"AUozVp78dhk"}}),he=new G({props:{code:`from transformers import TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=<span class="hljs-number">2</span>)`}}),te=new _s({props:{$$slots:{default:[On]},$$scope:{ctx:O}}}),$e=new G({props:{code:`from tensorflow.keras.losses import SparseCategoricalCrossentropy

model.compile(
    optimizer="adam",
    loss=SparseCategoricalCrossentropy(from_logits=True),
    metrics=["accuracy"],
)
model.fit(
    tf_train_dataset,
    validation_data=tf_validation_dataset,
)`,highlighted:`<span class="hljs-keyword">from</span> tensorflow.keras.losses <span class="hljs-keyword">import</span> SparseCategoricalCrossentropy

model.<span class="hljs-built_in">compile</span>(
    optimizer=<span class="hljs-string">&quot;adam&quot;</span>,
    loss=SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),
    metrics=[<span class="hljs-string">&quot;accuracy&quot;</span>],
)
model.fit(
    tf_train_dataset,
    validation_data=tf_validation_dataset,
)`}}),se=new _s({props:{warning:!0,$$slots:{default:[In]},$$scope:{ctx:O}}}),qe=new $s({}),be=new hs({props:{id:"cpzq6ESSM5c"}}),ge=new G({props:{code:`from tensorflow.keras.optimizers.schedules import PolynomialDecay

batch_size = 8
num_epochs = 3
# Le nombre d'\xE9tapes d'entra\xEEnement est le nombre d'\xE9chantillons dans l'ensemble de donn\xE9es, divis\xE9 par la taille du batch puis multipli\xE9
# par le nombre total d'\xE9poques. Notez que le jeu de donn\xE9es tf_train_dataset est ici un lot tf.data.Dataset
# et non le jeu de donn\xE9es original Hugging Face Dataset, donc son len() est d\xE9j\xE0 num_samples // batch_size.
num_train_steps = len(tf_train_dataset) * num_epochs
lr_scheduler = PolynomialDecay(
    initial_learning_rate=5e-5, end_learning_rate=0.0, decay_steps=num_train_steps
)
from tensorflow.keras.optimizers import Adam

opt = Adam(learning_rate=lr_scheduler)`,highlighted:`<span class="hljs-keyword">from</span> tensorflow.keras.optimizers.schedules <span class="hljs-keyword">import</span> PolynomialDecay

batch_size = <span class="hljs-number">8</span>
num_epochs = <span class="hljs-number">3</span>
<span class="hljs-comment"># Le nombre d&#x27;\xE9tapes d&#x27;entra\xEEnement est le nombre d&#x27;\xE9chantillons dans l&#x27;ensemble de donn\xE9es, divis\xE9 par la taille du batch puis multipli\xE9</span>
<span class="hljs-comment"># par le nombre total d&#x27;\xE9poques. Notez que le jeu de donn\xE9es tf_train_dataset est ici un lot tf.data.Dataset</span>
<span class="hljs-comment"># et non le jeu de donn\xE9es original Hugging Face Dataset, donc son len() est d\xE9j\xE0 num_samples // batch_size.</span>
num_train_steps = <span class="hljs-built_in">len</span>(tf_train_dataset) * num_epochs
lr_scheduler = PolynomialDecay(
    initial_learning_rate=<span class="hljs-number">5e-5</span>, end_learning_rate=<span class="hljs-number">0.0</span>, decay_steps=num_train_steps
)
<span class="hljs-keyword">from</span> tensorflow.keras.optimizers <span class="hljs-keyword">import</span> Adam

opt = Adam(learning_rate=lr_scheduler)`}}),ne=new _s({props:{$$slots:{default:[Gn]},$$scope:{ctx:O}}}),Ee=new G({props:{code:`import tensorflow as tf

model = TFAutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)
loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)
model.compile(optimizer=opt, loss=loss, metrics=["accuracy"])`,highlighted:`<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

model = TFAutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=<span class="hljs-number">2</span>)
loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>)
model.<span class="hljs-built_in">compile</span>(optimizer=opt, loss=loss, metrics=[<span class="hljs-string">&quot;accuracy&quot;</span>])`}}),ke=new G({props:{code:"model.fit(tf_train_dataset, validation_data=tf_validation_dataset, epochs=3)",highlighted:'model.fit(tf_train_dataset, validation_data=tf_validation_dataset, epochs=<span class="hljs-number">3</span>)'}}),re=new _s({props:{$$slots:{default:[Vn]},$$scope:{ctx:O}}}),je=new $s({}),we=new hs({props:{id:"nx10eh4CoOs"}}),ze=new G({props:{code:'preds = model.predict(tf_validation_dataset)["logits"]',highlighted:'preds = model.predict(tf_validation_dataset)[<span class="hljs-string">&quot;logits&quot;</span>]'}}),xe=new G({props:{code:`class_preds = np.argmax(preds, axis=1)
print(preds.shape, class_preds.shape)`,highlighted:`class_preds = np.argmax(preds, axis=<span class="hljs-number">1</span>)
<span class="hljs-built_in">print</span>(preds.shape, class_preds.shape)`}}),Ce=new G({props:{code:"(408, 2) (408,)",highlighted:'(<span class="hljs-number">408</span>, <span class="hljs-number">2</span>) (<span class="hljs-number">408</span>,)'}}),ye=new G({props:{code:`import evaluate

metric = evaluate.load("glue", "mrpc")
metric.compute(predictions=class_preds, references=raw_datasets["validation"]["label"])`,highlighted:`<span class="hljs-keyword">import</span> evaluate

metric = evaluate.load(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>)
metric.compute(predictions=class_preds, references=raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>])`}}),Pe=new G({props:{code:"{'accuracy': 0.8578431372549019, 'f1': 0.8996539792387542}",highlighted:'{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.8578431372549019</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">0.8996539792387542</span>}'}}),{c(){p=r("meta"),z=d(),q(m.$$.fragment),x=d(),$=r("h1"),f=r("a"),y=r("span"),q(w.$$.fragment),_=d(),v=r("span"),A=r("i"),C=a("Finetuner"),T=a(" un mod\xE8le avec Keras"),I=d(),q(S.$$.fragment),P=d(),N=r("p"),Se=a("Une fois que vous avez fait tout le travail de pr\xE9traitement des donn\xE9es dans la derni\xE8re section, il ne vous reste que quelques \xE9tapes pour entra\xEEner le mod\xE8le. Notez, cependant, que la commande "),Q=r("code"),De=a("model.fit()"),qs=a(" s\u2019ex\xE9cutera tr\xE8s lentement sur un CPU. Si vous n\u2019avez pas de GPU, vous pouvez avoir acc\xE8s \xE0 des GPUs ou TPUs gratuits sur "),ce=r("a"),bs=a("Google Colab"),gs=a("."),wt=d(),Me=r("p"),Es=a("Les exemples de code ci-dessous supposent que vous avez d\xE9j\xE0 ex\xE9cut\xE9 les exemples de la section pr\xE9c\xE9dente. Voici un bref r\xE9sum\xE9 de ce dont vous avez besoin :"),zt=d(),q(me.$$.fragment),xt=d(),W=r("h3"),X=r("a"),Re=r("span"),q(fe.$$.fragment),ks=d(),Be=r("span"),js=a("Entra\xEEnement"),Ct=d(),Z=r("p"),ws=a("Les mod\xE8les TensorFlow import\xE9s depuis \u{1F917} "),We=r("em"),zs=a("Transformers"),xs=a(" sont d\xE9j\xE0 des mod\xE8les Keras. Voici une courte introduction \xE0 Keras."),yt=d(),q(ve.$$.fragment),Pt=d(),Ne=r("p"),Cs=a("Cela signifie qu\u2019une fois que nous disposons de nos donn\xE9es, tr\xE8s peu de travail est n\xE9cessaire pour commencer \xE0 entra\xEEner sur celles-ci."),At=d(),q(_e.$$.fragment),Tt=d(),V=r("p"),ys=a("Comme dans le "),Fe=r("a"),Ps=a("chapitre pr\xE9c\xE9dent"),As=a(", nous allons utiliser la classe "),Ye=r("code"),Ts=a("TFAutoModelForSequenceClassification"),Ss=a(", avec deux \xE9tiquettes :"),St=d(),q(he.$$.fragment),Dt=d(),ee=r("p"),Ds=a("Vous remarquerez que, contrairement au "),Ke=r("a"),Ms=a("chapitre 2"),Ns=a(", vous obtenez un message d\u2019avertissement apr\xE8s l\u2019instanciation de ce mod\xE8le pr\xE9-entra\xEEn\xE9. Ceci est d\xFB au fait que BERT n\u2019a pas \xE9t\xE9 pr\xE9-entra\xEEn\xE9 \xE0 la classification de paires de phrases, donc la t\xEAte du mod\xE8le pr\xE9-entra\xEEn\xE9 a \xE9t\xE9 supprim\xE9e et une nouvelle t\xEAte adapt\xE9e \xE0 la classification de s\xE9quences a \xE9t\xE9 ins\xE9r\xE9e \xE0 la place. Les messages d\u2019avertissement indiquent que certains poids n\u2019ont pas \xE9t\xE9 utilis\xE9s (ceux correspondant \xE0 la t\xEAte de pr\xE9-entra\xEEnement abandonn\xE9e) et que d\u2019autres ont \xE9t\xE9 initialis\xE9s de mani\xE8re al\xE9atoire (ceux pour la nouvelle t\xEAte). Il conclut en vous encourageant \xE0 entra\xEEner le mod\xE8le, ce qui est exactement ce que nous allons faire maintenant."),Mt=d(),M=r("p"),Fs=a("Pour "),Je=r("em"),Ks=a("finetuner"),Ls=a(" le mod\xE8le sur notre jeu de donn\xE9es, nous devons simplement "),Qe=r("code"),Us=a("compiler()"),Os=a(" notre mod\xE8le et ensuite passer nos donn\xE9es \xE0 la m\xE9thode "),Xe=r("code"),Is=a("fit()"),Gs=a(". Cela va d\xE9marrer le processus de "),Ze=r("em"),Vs=a("finetuning"),Hs=a(" (qui devrait prendre quelques minutes sur un GPU) et rapporter la perte d\u2019entra\xEEnement au fur et \xE0 mesure, plus la perte de validation \xE0 la fin de chaque \xE9poque."),Nt=d(),q(te.$$.fragment),Ft=d(),q($e.$$.fragment),Kt=d(),q(se.$$.fragment),Lt=d(),Y=r("h3"),ae=r("a"),et=r("span"),q(qe.$$.fragment),Rs=d(),tt=r("span"),Bs=a("Am\xE9liorer les performances d'entra\xEEnement"),Ut=d(),q(be.$$.fragment),Ot=d(),H=r("p"),Ws=a("Si vous essayez le code ci-dessus, il fonctionne certainement, mais vous constaterez que la perte ne diminue que lentement ou sporadiquement. La cause principale est le "),st=r("em"),Ys=a("taux d\u2019apprentissage"),Js=a(". Comme pour la perte, lorsque nous transmettons \xE0 Keras le nom d\u2019un optimiseur sous forme de cha\xEEne de caract\xE8res, Keras initialise cet optimiseur avec des valeurs par d\xE9faut pour tous les param\xE8tres, y compris le taux d\u2019apprentissage. Cependant, nous savons depuis longtemps que les "),at=r("em"),Qs=a("transformers"),Xs=a(" b\xE9n\xE9ficient d\u2019un taux d\u2019apprentissage beaucoup plus faible que celui par d\xE9faut d\u2019Adam, qui est de 1e-3, \xE9galement \xE9crit comme 10 \xE0 la puissance -3, ou 0,001. 5e-5 (0,00005), qui est environ vingt fois inf\xE9rieur, est un bien meilleur point de d\xE9part."),It=d(),D=r("p"),Zs=a("En plus de r\xE9duire le taux d\u2019apprentissage, nous avons une deuxi\xE8me astuce dans notre manche : nous pouvons r\xE9duire lentement le taux d\u2019apprentissage au cours de l\u2019entra\xEEnement. Dans la litt\xE9rature, on parle parfois de "),nt=r("em"),ea=a("d\xE9croissance"),ta=a(" ou d\u2019"),ot=r("em"),sa=a("annulation"),aa=a(" du taux d\u2019apprentissage.le taux d\u2019apprentissage. Dans Keras, la meilleure fa\xE7on de le faire est d\u2019utiliser un "),rt=r("em"),na=a("planificateur du taux d\u2019apprentissage"),oa=a(". Un bon planificateur \xE0 utiliser est "),lt=r("code"),ra=a("PolynomialDecay"),la=a(". Malgr\xE9 son nom, avec les param\xE8tres par d\xE9faut, il diminue simplement de fa\xE7on lin\xE9aire le taux d\u2019apprentissage de la valeur initiale \xE0 la valeur finale au cours de l\u2019entra\xEEnement, ce qui est exactement ce que nous voulons. Afin d\u2019utiliser correctement un planificateur, nous devons lui dire combien de temps l\u2019entra\xEEnement va durer. Nous calculons cela comme "),it=r("code"),ia=a("num_train_steps"),ua=a(" ci-dessous."),Gt=d(),q(ge.$$.fragment),Vt=d(),q(ne.$$.fragment),Ht=d(),Le=r("p"),pa=a("Nous avons maintenant notre tout nouvel optimiseur et nous pouvons essayer de nous entra\xEEner avec lui. Tout d\u2019abord, rechargeons le mod\xE8le pour r\xE9initialiser les modifications apport\xE9es aux poids lors de l\u2019entra\xEEnement que nous venons d\u2019effectuer, puis nous pouvons le compiler avec le nouvel optimiseur :"),Rt=d(),q(Ee.$$.fragment),Bt=d(),oe=r("p"),da=a("Maintenant, on "),ut=r("em"),ca=a("fit"),ma=a(" :"),Wt=d(),q(ke.$$.fragment),Yt=d(),q(re.$$.fragment),Jt=d(),J=r("h3"),le=r("a"),pt=r("span"),q(je.$$.fragment),fa=d(),dt=r("span"),va=a("Pr\xE9dictions du mod\xE8le"),Qt=d(),q(we.$$.fragment),Xt=d(),R=r("p"),_a=a("Entra\xEEner et regarder la perte diminuer, c\u2019est tr\xE8s bien, mais que faire si l\u2019on veut r\xE9ellement obtenir des r\xE9sultats du mod\xE8le entra\xEEn\xE9, soit pour calculer des m\xE9triques, soit pour utiliser le mod\xE8le en production ? Pour ce faire, nous pouvons simplement utiliser la m\xE9thode "),ct=r("code"),ha=a("predict()"),$a=a(". Ceci retournera les "),mt=r("em"),qa=a("logits"),ba=a(" de la t\xEAte de sortie du mod\xE8le, un par classe."),Zt=d(),q(ze.$$.fragment),es=d(),ie=r("p"),ga=a("Nous pouvons convertir ces logits en pr\xE9dictions de classe du mod\xE8le en utilisant "),ft=r("code"),Ea=a("argmax"),ka=a(" pour trouver le logit le plus \xE9lev\xE9, qui correspond \xE0 la classe la plus probable :"),ts=d(),q(xe.$$.fragment),ss=d(),q(Ce.$$.fragment),as=d(),F=r("p"),ja=a("Maintenant, utilisons ces "),vt=r("code"),wa=a("preds"),za=a(" pour calculer des m\xE9triques ! Nous pouvons charger les m\xE9triques associ\xE9es au jeu de donn\xE9es MRPC aussi facilement que nous avons charg\xE9 le jeu de donn\xE9es, cette fois avec la fonction "),_t=r("code"),xa=a("evaluate.load()"),Ca=a(". L\u2019objet retourn\xE9 a une m\xE9thode "),ht=r("code"),ya=a("compute()"),Pa=a(" que nous pouvons utiliser pour faire le calcul de la m\xE9trique :"),ns=d(),q(ye.$$.fragment),os=d(),q(Pe.$$.fragment),rs=d(),K=r("p"),Aa=a("Les r\xE9sultats exacts que vous obtiendrez peuvent varier, car l\u2019initialisation al\xE9atoire de la t\xEAte du mod\xE8le peut modifier les m\xE9triques obtenues. Ici, nous pouvons voir que notre mod\xE8le a une pr\xE9cision de 85,78% sur l\u2019ensemble de validation et un score F1 de 89,97. Ce sont les deux m\xE9triques utilis\xE9es pour \xE9valuer les r\xE9sultats sur le jeu de donn\xE9es MRPC pour le benchmark GLUE. Le tableau du papier de "),Ae=r("a"),Ta=a("BERT"),Sa=a(" indique un score F1 de 88,9 pour le mod\xE8le de base. Il s\u2019agissait du mod\xE8le "),$t=r("code"),Da=a("uncased"),Ma=a(" alors que nous utilisons actuellement le mod\xE8le "),qt=r("code"),Na=a("cased"),Fa=a(", ce qui explique le meilleur r\xE9sultat."),ls=d(),L=r("p"),Ka=a("Ceci conclut l\u2019introduction \xE0 le "),bt=r("em"),La=a("finetuning"),Ua=a(" en utilisant l\u2019API Keras. Un exemple d\u2019application de cette m\xE9thode aux t\xE2ches les plus courantes du traitement automatique des langues sera pr\xE9sent\xE9 au "),Ue=r("a"),Oa=a("chapitre 7"),Ia=a(". Si vous souhaitez affiner vos connaissances de l\u2019API Keras, essayez "),gt=r("em"),Ga=a("finetuner"),Va=a(" un mod\xE8le sur le jeu de donn\xE9es GLUE SST-2, en utilisant le traitement des donn\xE9es que vous avez effectu\xE9 dans la section 2."),this.h()},l(e){const o=Fn('[data-svelte="svelte-1phssyn"]',document.head);p=l(o,"META",{name:!0,content:!0}),o.forEach(s),z=c(e),b(m.$$.fragment,e),x=c(e),$=l(e,"H1",{class:!0});var Te=i($);f=l(Te,"A",{id:!0,class:!0,href:!0});var Et=i(f);y=l(Et,"SPAN",{});var kt=i(y);b(w.$$.fragment,kt),kt.forEach(s),Et.forEach(s),_=c(Te),v=l(Te,"SPAN",{});var Oe=i(v);A=l(Oe,"I",{});var jt=i(A);C=n(jt,"Finetuner"),jt.forEach(s),T=n(Oe," un mod\xE8le avec Keras"),Oe.forEach(s),Te.forEach(s),I=c(e),b(S.$$.fragment,e),P=c(e),N=l(e,"P",{});var Ie=i(N);Se=n(Ie,"Une fois que vous avez fait tout le travail de pr\xE9traitement des donn\xE9es dans la derni\xE8re section, il ne vous reste que quelques \xE9tapes pour entra\xEEner le mod\xE8le. Notez, cependant, que la commande "),Q=l(Ie,"CODE",{});var Ha=i(Q);De=n(Ha,"model.fit()"),Ha.forEach(s),qs=n(Ie," s\u2019ex\xE9cutera tr\xE8s lentement sur un CPU. Si vous n\u2019avez pas de GPU, vous pouvez avoir acc\xE8s \xE0 des GPUs ou TPUs gratuits sur "),ce=l(Ie,"A",{href:!0,rel:!0});var Ra=i(ce);bs=n(Ra,"Google Colab"),Ra.forEach(s),gs=n(Ie,"."),Ie.forEach(s),wt=c(e),Me=l(e,"P",{});var Ba=i(Me);Es=n(Ba,"Les exemples de code ci-dessous supposent que vous avez d\xE9j\xE0 ex\xE9cut\xE9 les exemples de la section pr\xE9c\xE9dente. Voici un bref r\xE9sum\xE9 de ce dont vous avez besoin :"),Ba.forEach(s),zt=c(e),b(me.$$.fragment,e),xt=c(e),W=l(e,"H3",{class:!0});var us=i(W);X=l(us,"A",{id:!0,class:!0,href:!0});var Wa=i(X);Re=l(Wa,"SPAN",{});var Ya=i(Re);b(fe.$$.fragment,Ya),Ya.forEach(s),Wa.forEach(s),ks=c(us),Be=l(us,"SPAN",{});var Ja=i(Be);js=n(Ja,"Entra\xEEnement"),Ja.forEach(s),us.forEach(s),Ct=c(e),Z=l(e,"P",{});var ps=i(Z);ws=n(ps,"Les mod\xE8les TensorFlow import\xE9s depuis \u{1F917} "),We=l(ps,"EM",{});var Qa=i(We);zs=n(Qa,"Transformers"),Qa.forEach(s),xs=n(ps," sont d\xE9j\xE0 des mod\xE8les Keras. Voici une courte introduction \xE0 Keras."),ps.forEach(s),yt=c(e),b(ve.$$.fragment,e),Pt=c(e),Ne=l(e,"P",{});var Xa=i(Ne);Cs=n(Xa,"Cela signifie qu\u2019une fois que nous disposons de nos donn\xE9es, tr\xE8s peu de travail est n\xE9cessaire pour commencer \xE0 entra\xEEner sur celles-ci."),Xa.forEach(s),At=c(e),b(_e.$$.fragment,e),Tt=c(e),V=l(e,"P",{});var Ge=i(V);ys=n(Ge,"Comme dans le "),Fe=l(Ge,"A",{href:!0});var Za=i(Fe);Ps=n(Za,"chapitre pr\xE9c\xE9dent"),Za.forEach(s),As=n(Ge,", nous allons utiliser la classe "),Ye=l(Ge,"CODE",{});var en=i(Ye);Ts=n(en,"TFAutoModelForSequenceClassification"),en.forEach(s),Ss=n(Ge,", avec deux \xE9tiquettes :"),Ge.forEach(s),St=c(e),b(he.$$.fragment,e),Dt=c(e),ee=l(e,"P",{});var ds=i(ee);Ds=n(ds,"Vous remarquerez que, contrairement au "),Ke=l(ds,"A",{href:!0});var tn=i(Ke);Ms=n(tn,"chapitre 2"),tn.forEach(s),Ns=n(ds,", vous obtenez un message d\u2019avertissement apr\xE8s l\u2019instanciation de ce mod\xE8le pr\xE9-entra\xEEn\xE9. Ceci est d\xFB au fait que BERT n\u2019a pas \xE9t\xE9 pr\xE9-entra\xEEn\xE9 \xE0 la classification de paires de phrases, donc la t\xEAte du mod\xE8le pr\xE9-entra\xEEn\xE9 a \xE9t\xE9 supprim\xE9e et une nouvelle t\xEAte adapt\xE9e \xE0 la classification de s\xE9quences a \xE9t\xE9 ins\xE9r\xE9e \xE0 la place. Les messages d\u2019avertissement indiquent que certains poids n\u2019ont pas \xE9t\xE9 utilis\xE9s (ceux correspondant \xE0 la t\xEAte de pr\xE9-entra\xEEnement abandonn\xE9e) et que d\u2019autres ont \xE9t\xE9 initialis\xE9s de mani\xE8re al\xE9atoire (ceux pour la nouvelle t\xEAte). Il conclut en vous encourageant \xE0 entra\xEEner le mod\xE8le, ce qui est exactement ce que nous allons faire maintenant."),ds.forEach(s),Mt=c(e),M=l(e,"P",{});var B=i(M);Fs=n(B,"Pour "),Je=l(B,"EM",{});var sn=i(Je);Ks=n(sn,"finetuner"),sn.forEach(s),Ls=n(B," le mod\xE8le sur notre jeu de donn\xE9es, nous devons simplement "),Qe=l(B,"CODE",{});var an=i(Qe);Us=n(an,"compiler()"),an.forEach(s),Os=n(B," notre mod\xE8le et ensuite passer nos donn\xE9es \xE0 la m\xE9thode "),Xe=l(B,"CODE",{});var nn=i(Xe);Is=n(nn,"fit()"),nn.forEach(s),Gs=n(B,". Cela va d\xE9marrer le processus de "),Ze=l(B,"EM",{});var on=i(Ze);Vs=n(on,"finetuning"),on.forEach(s),Hs=n(B," (qui devrait prendre quelques minutes sur un GPU) et rapporter la perte d\u2019entra\xEEnement au fur et \xE0 mesure, plus la perte de validation \xE0 la fin de chaque \xE9poque."),B.forEach(s),Nt=c(e),b(te.$$.fragment,e),Ft=c(e),b($e.$$.fragment,e),Kt=c(e),b(se.$$.fragment,e),Lt=c(e),Y=l(e,"H3",{class:!0});var cs=i(Y);ae=l(cs,"A",{id:!0,class:!0,href:!0});var rn=i(ae);et=l(rn,"SPAN",{});var ln=i(et);b(qe.$$.fragment,ln),ln.forEach(s),rn.forEach(s),Rs=c(cs),tt=l(cs,"SPAN",{});var un=i(tt);Bs=n(un,"Am\xE9liorer les performances d'entra\xEEnement"),un.forEach(s),cs.forEach(s),Ut=c(e),b(be.$$.fragment,e),Ot=c(e),H=l(e,"P",{});var Ve=i(H);Ws=n(Ve,"Si vous essayez le code ci-dessus, il fonctionne certainement, mais vous constaterez que la perte ne diminue que lentement ou sporadiquement. La cause principale est le "),st=l(Ve,"EM",{});var pn=i(st);Ys=n(pn,"taux d\u2019apprentissage"),pn.forEach(s),Js=n(Ve,". Comme pour la perte, lorsque nous transmettons \xE0 Keras le nom d\u2019un optimiseur sous forme de cha\xEEne de caract\xE8res, Keras initialise cet optimiseur avec des valeurs par d\xE9faut pour tous les param\xE8tres, y compris le taux d\u2019apprentissage. Cependant, nous savons depuis longtemps que les "),at=l(Ve,"EM",{});var dn=i(at);Qs=n(dn,"transformers"),dn.forEach(s),Xs=n(Ve," b\xE9n\xE9ficient d\u2019un taux d\u2019apprentissage beaucoup plus faible que celui par d\xE9faut d\u2019Adam, qui est de 1e-3, \xE9galement \xE9crit comme 10 \xE0 la puissance -3, ou 0,001. 5e-5 (0,00005), qui est environ vingt fois inf\xE9rieur, est un bien meilleur point de d\xE9part."),Ve.forEach(s),It=c(e),D=l(e,"P",{});var U=i(D);Zs=n(U,"En plus de r\xE9duire le taux d\u2019apprentissage, nous avons une deuxi\xE8me astuce dans notre manche : nous pouvons r\xE9duire lentement le taux d\u2019apprentissage au cours de l\u2019entra\xEEnement. Dans la litt\xE9rature, on parle parfois de "),nt=l(U,"EM",{});var cn=i(nt);ea=n(cn,"d\xE9croissance"),cn.forEach(s),ta=n(U," ou d\u2019"),ot=l(U,"EM",{});var mn=i(ot);sa=n(mn,"annulation"),mn.forEach(s),aa=n(U," du taux d\u2019apprentissage.le taux d\u2019apprentissage. Dans Keras, la meilleure fa\xE7on de le faire est d\u2019utiliser un "),rt=l(U,"EM",{});var fn=i(rt);na=n(fn,"planificateur du taux d\u2019apprentissage"),fn.forEach(s),oa=n(U,". Un bon planificateur \xE0 utiliser est "),lt=l(U,"CODE",{});var vn=i(lt);ra=n(vn,"PolynomialDecay"),vn.forEach(s),la=n(U,". Malgr\xE9 son nom, avec les param\xE8tres par d\xE9faut, il diminue simplement de fa\xE7on lin\xE9aire le taux d\u2019apprentissage de la valeur initiale \xE0 la valeur finale au cours de l\u2019entra\xEEnement, ce qui est exactement ce que nous voulons. Afin d\u2019utiliser correctement un planificateur, nous devons lui dire combien de temps l\u2019entra\xEEnement va durer. Nous calculons cela comme "),it=l(U,"CODE",{});var _n=i(it);ia=n(_n,"num_train_steps"),_n.forEach(s),ua=n(U," ci-dessous."),U.forEach(s),Gt=c(e),b(ge.$$.fragment,e),Vt=c(e),b(ne.$$.fragment,e),Ht=c(e),Le=l(e,"P",{});var hn=i(Le);pa=n(hn,"Nous avons maintenant notre tout nouvel optimiseur et nous pouvons essayer de nous entra\xEEner avec lui. Tout d\u2019abord, rechargeons le mod\xE8le pour r\xE9initialiser les modifications apport\xE9es aux poids lors de l\u2019entra\xEEnement que nous venons d\u2019effectuer, puis nous pouvons le compiler avec le nouvel optimiseur :"),hn.forEach(s),Rt=c(e),b(Ee.$$.fragment,e),Bt=c(e),oe=l(e,"P",{});var ms=i(oe);da=n(ms,"Maintenant, on "),ut=l(ms,"EM",{});var $n=i(ut);ca=n($n,"fit"),$n.forEach(s),ma=n(ms," :"),ms.forEach(s),Wt=c(e),b(ke.$$.fragment,e),Yt=c(e),b(re.$$.fragment,e),Jt=c(e),J=l(e,"H3",{class:!0});var fs=i(J);le=l(fs,"A",{id:!0,class:!0,href:!0});var qn=i(le);pt=l(qn,"SPAN",{});var bn=i(pt);b(je.$$.fragment,bn),bn.forEach(s),qn.forEach(s),fa=c(fs),dt=l(fs,"SPAN",{});var gn=i(dt);va=n(gn,"Pr\xE9dictions du mod\xE8le"),gn.forEach(s),fs.forEach(s),Qt=c(e),b(we.$$.fragment,e),Xt=c(e),R=l(e,"P",{});var He=i(R);_a=n(He,"Entra\xEEner et regarder la perte diminuer, c\u2019est tr\xE8s bien, mais que faire si l\u2019on veut r\xE9ellement obtenir des r\xE9sultats du mod\xE8le entra\xEEn\xE9, soit pour calculer des m\xE9triques, soit pour utiliser le mod\xE8le en production ? Pour ce faire, nous pouvons simplement utiliser la m\xE9thode "),ct=l(He,"CODE",{});var En=i(ct);ha=n(En,"predict()"),En.forEach(s),$a=n(He,". Ceci retournera les "),mt=l(He,"EM",{});var kn=i(mt);qa=n(kn,"logits"),kn.forEach(s),ba=n(He," de la t\xEAte de sortie du mod\xE8le, un par classe."),He.forEach(s),Zt=c(e),b(ze.$$.fragment,e),es=c(e),ie=l(e,"P",{});var vs=i(ie);ga=n(vs,"Nous pouvons convertir ces logits en pr\xE9dictions de classe du mod\xE8le en utilisant "),ft=l(vs,"CODE",{});var jn=i(ft);Ea=n(jn,"argmax"),jn.forEach(s),ka=n(vs," pour trouver le logit le plus \xE9lev\xE9, qui correspond \xE0 la classe la plus probable :"),vs.forEach(s),ts=c(e),b(xe.$$.fragment,e),ss=c(e),b(Ce.$$.fragment,e),as=c(e),F=l(e,"P",{});var ue=i(F);ja=n(ue,"Maintenant, utilisons ces "),vt=l(ue,"CODE",{});var wn=i(vt);wa=n(wn,"preds"),wn.forEach(s),za=n(ue," pour calculer des m\xE9triques ! Nous pouvons charger les m\xE9triques associ\xE9es au jeu de donn\xE9es MRPC aussi facilement que nous avons charg\xE9 le jeu de donn\xE9es, cette fois avec la fonction "),_t=l(ue,"CODE",{});var zn=i(_t);xa=n(zn,"evaluate.load()"),zn.forEach(s),Ca=n(ue,". L\u2019objet retourn\xE9 a une m\xE9thode "),ht=l(ue,"CODE",{});var xn=i(ht);ya=n(xn,"compute()"),xn.forEach(s),Pa=n(ue," que nous pouvons utiliser pour faire le calcul de la m\xE9trique :"),ue.forEach(s),ns=c(e),b(ye.$$.fragment,e),os=c(e),b(Pe.$$.fragment,e),rs=c(e),K=l(e,"P",{});var pe=i(K);Aa=n(pe,"Les r\xE9sultats exacts que vous obtiendrez peuvent varier, car l\u2019initialisation al\xE9atoire de la t\xEAte du mod\xE8le peut modifier les m\xE9triques obtenues. Ici, nous pouvons voir que notre mod\xE8le a une pr\xE9cision de 85,78% sur l\u2019ensemble de validation et un score F1 de 89,97. Ce sont les deux m\xE9triques utilis\xE9es pour \xE9valuer les r\xE9sultats sur le jeu de donn\xE9es MRPC pour le benchmark GLUE. Le tableau du papier de "),Ae=l(pe,"A",{href:!0,rel:!0});var Cn=i(Ae);Ta=n(Cn,"BERT"),Cn.forEach(s),Sa=n(pe," indique un score F1 de 88,9 pour le mod\xE8le de base. Il s\u2019agissait du mod\xE8le "),$t=l(pe,"CODE",{});var yn=i($t);Da=n(yn,"uncased"),yn.forEach(s),Ma=n(pe," alors que nous utilisons actuellement le mod\xE8le "),qt=l(pe,"CODE",{});var Pn=i(qt);Na=n(Pn,"cased"),Pn.forEach(s),Fa=n(pe,", ce qui explique le meilleur r\xE9sultat."),pe.forEach(s),ls=c(e),L=l(e,"P",{});var de=i(L);Ka=n(de,"Ceci conclut l\u2019introduction \xE0 le "),bt=l(de,"EM",{});var An=i(bt);La=n(An,"finetuning"),An.forEach(s),Ua=n(de," en utilisant l\u2019API Keras. Un exemple d\u2019application de cette m\xE9thode aux t\xE2ches les plus courantes du traitement automatique des langues sera pr\xE9sent\xE9 au "),Ue=l(de,"A",{href:!0});var Tn=i(Ue);Oa=n(Tn,"chapitre 7"),Tn.forEach(s),Ia=n(de,". Si vous souhaitez affiner vos connaissances de l\u2019API Keras, essayez "),gt=l(de,"EM",{});var Sn=i(gt);Ga=n(Sn,"finetuner"),Sn.forEach(s),Va=n(de," un mod\xE8le sur le jeu de donn\xE9es GLUE SST-2, en utilisant le traitement des donn\xE9es que vous avez effectu\xE9 dans la section 2."),de.forEach(s),this.h()},h(){h(p,"name","hf:doc:metadata"),h(p,"content",JSON.stringify(Rn)),h(f,"id","ifinetuneri-un-modle-avec-keras"),h(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(f,"href","#ifinetuneri-un-modle-avec-keras"),h($,"class","relative group"),h(ce,"href","https://colab.research.google.com/"),h(ce,"rel","nofollow"),h(X,"id","entranement"),h(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(X,"href","#entranement"),h(W,"class","relative group"),h(Fe,"href","/course/fr/chapter2"),h(Ke,"href","/course/fr/chapter2"),h(ae,"id","amliorer-les-performances-dentranement"),h(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ae,"href","#amliorer-les-performances-dentranement"),h(Y,"class","relative group"),h(le,"id","prdictions-du-modle"),h(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(le,"href","#prdictions-du-modle"),h(J,"class","relative group"),h(Ae,"href","https://arxiv.org/pdf/1810.04805.pdf"),h(Ae,"rel","nofollow"),h(Ue,"href","/course/fr/chapter7")},m(e,o){t(document.head,p),u(e,z,o),g(m,e,o),u(e,x,o),u(e,$,o),t($,f),t(f,y),g(w,y,null),t($,_),t($,v),t(v,A),t(A,C),t(v,T),u(e,I,o),g(S,e,o),u(e,P,o),u(e,N,o),t(N,Se),t(N,Q),t(Q,De),t(N,qs),t(N,ce),t(ce,bs),t(N,gs),u(e,wt,o),u(e,Me,o),t(Me,Es),u(e,zt,o),g(me,e,o),u(e,xt,o),u(e,W,o),t(W,X),t(X,Re),g(fe,Re,null),t(W,ks),t(W,Be),t(Be,js),u(e,Ct,o),u(e,Z,o),t(Z,ws),t(Z,We),t(We,zs),t(Z,xs),u(e,yt,o),g(ve,e,o),u(e,Pt,o),u(e,Ne,o),t(Ne,Cs),u(e,At,o),g(_e,e,o),u(e,Tt,o),u(e,V,o),t(V,ys),t(V,Fe),t(Fe,Ps),t(V,As),t(V,Ye),t(Ye,Ts),t(V,Ss),u(e,St,o),g(he,e,o),u(e,Dt,o),u(e,ee,o),t(ee,Ds),t(ee,Ke),t(Ke,Ms),t(ee,Ns),u(e,Mt,o),u(e,M,o),t(M,Fs),t(M,Je),t(Je,Ks),t(M,Ls),t(M,Qe),t(Qe,Us),t(M,Os),t(M,Xe),t(Xe,Is),t(M,Gs),t(M,Ze),t(Ze,Vs),t(M,Hs),u(e,Nt,o),g(te,e,o),u(e,Ft,o),g($e,e,o),u(e,Kt,o),g(se,e,o),u(e,Lt,o),u(e,Y,o),t(Y,ae),t(ae,et),g(qe,et,null),t(Y,Rs),t(Y,tt),t(tt,Bs),u(e,Ut,o),g(be,e,o),u(e,Ot,o),u(e,H,o),t(H,Ws),t(H,st),t(st,Ys),t(H,Js),t(H,at),t(at,Qs),t(H,Xs),u(e,It,o),u(e,D,o),t(D,Zs),t(D,nt),t(nt,ea),t(D,ta),t(D,ot),t(ot,sa),t(D,aa),t(D,rt),t(rt,na),t(D,oa),t(D,lt),t(lt,ra),t(D,la),t(D,it),t(it,ia),t(D,ua),u(e,Gt,o),g(ge,e,o),u(e,Vt,o),g(ne,e,o),u(e,Ht,o),u(e,Le,o),t(Le,pa),u(e,Rt,o),g(Ee,e,o),u(e,Bt,o),u(e,oe,o),t(oe,da),t(oe,ut),t(ut,ca),t(oe,ma),u(e,Wt,o),g(ke,e,o),u(e,Yt,o),g(re,e,o),u(e,Jt,o),u(e,J,o),t(J,le),t(le,pt),g(je,pt,null),t(J,fa),t(J,dt),t(dt,va),u(e,Qt,o),g(we,e,o),u(e,Xt,o),u(e,R,o),t(R,_a),t(R,ct),t(ct,ha),t(R,$a),t(R,mt),t(mt,qa),t(R,ba),u(e,Zt,o),g(ze,e,o),u(e,es,o),u(e,ie,o),t(ie,ga),t(ie,ft),t(ft,Ea),t(ie,ka),u(e,ts,o),g(xe,e,o),u(e,ss,o),g(Ce,e,o),u(e,as,o),u(e,F,o),t(F,ja),t(F,vt),t(vt,wa),t(F,za),t(F,_t),t(_t,xa),t(F,Ca),t(F,ht),t(ht,ya),t(F,Pa),u(e,ns,o),g(ye,e,o),u(e,os,o),g(Pe,e,o),u(e,rs,o),u(e,K,o),t(K,Aa),t(K,Ae),t(Ae,Ta),t(K,Sa),t(K,$t),t($t,Da),t(K,Ma),t(K,qt),t(qt,Na),t(K,Fa),u(e,ls,o),u(e,L,o),t(L,Ka),t(L,bt),t(bt,La),t(L,Ua),t(L,Ue),t(Ue,Oa),t(L,Ia),t(L,gt),t(gt,Ga),t(L,Va),is=!0},p(e,[o]){const Te={};o&1&&(Te.fw=e[0]),m.$set(Te);const Et={};o&2&&(Et.$$scope={dirty:o,ctx:e}),te.$set(Et);const kt={};o&2&&(kt.$$scope={dirty:o,ctx:e}),se.$set(kt);const Oe={};o&2&&(Oe.$$scope={dirty:o,ctx:e}),ne.$set(Oe);const jt={};o&2&&(jt.$$scope={dirty:o,ctx:e}),re.$set(jt)},i(e){is||(E(m.$$.fragment,e),E(w.$$.fragment,e),E(S.$$.fragment,e),E(me.$$.fragment,e),E(fe.$$.fragment,e),E(ve.$$.fragment,e),E(_e.$$.fragment,e),E(he.$$.fragment,e),E(te.$$.fragment,e),E($e.$$.fragment,e),E(se.$$.fragment,e),E(qe.$$.fragment,e),E(be.$$.fragment,e),E(ge.$$.fragment,e),E(ne.$$.fragment,e),E(Ee.$$.fragment,e),E(ke.$$.fragment,e),E(re.$$.fragment,e),E(je.$$.fragment,e),E(we.$$.fragment,e),E(ze.$$.fragment,e),E(xe.$$.fragment,e),E(Ce.$$.fragment,e),E(ye.$$.fragment,e),E(Pe.$$.fragment,e),is=!0)},o(e){k(m.$$.fragment,e),k(w.$$.fragment,e),k(S.$$.fragment,e),k(me.$$.fragment,e),k(fe.$$.fragment,e),k(ve.$$.fragment,e),k(_e.$$.fragment,e),k(he.$$.fragment,e),k(te.$$.fragment,e),k($e.$$.fragment,e),k(se.$$.fragment,e),k(qe.$$.fragment,e),k(be.$$.fragment,e),k(ge.$$.fragment,e),k(ne.$$.fragment,e),k(Ee.$$.fragment,e),k(ke.$$.fragment,e),k(re.$$.fragment,e),k(je.$$.fragment,e),k(we.$$.fragment,e),k(ze.$$.fragment,e),k(xe.$$.fragment,e),k(Ce.$$.fragment,e),k(ye.$$.fragment,e),k(Pe.$$.fragment,e),is=!1},d(e){s(p),e&&s(z),j(m,e),e&&s(x),e&&s($),j(w),e&&s(I),j(S,e),e&&s(P),e&&s(N),e&&s(wt),e&&s(Me),e&&s(zt),j(me,e),e&&s(xt),e&&s(W),j(fe),e&&s(Ct),e&&s(Z),e&&s(yt),j(ve,e),e&&s(Pt),e&&s(Ne),e&&s(At),j(_e,e),e&&s(Tt),e&&s(V),e&&s(St),j(he,e),e&&s(Dt),e&&s(ee),e&&s(Mt),e&&s(M),e&&s(Nt),j(te,e),e&&s(Ft),j($e,e),e&&s(Kt),j(se,e),e&&s(Lt),e&&s(Y),j(qe),e&&s(Ut),j(be,e),e&&s(Ot),e&&s(H),e&&s(It),e&&s(D),e&&s(Gt),j(ge,e),e&&s(Vt),j(ne,e),e&&s(Ht),e&&s(Le),e&&s(Rt),j(Ee,e),e&&s(Bt),e&&s(oe),e&&s(Wt),j(ke,e),e&&s(Yt),j(re,e),e&&s(Jt),e&&s(J),j(je),e&&s(Qt),j(we,e),e&&s(Xt),e&&s(R),e&&s(Zt),j(ze,e),e&&s(es),e&&s(ie),e&&s(ts),j(xe,e),e&&s(ss),j(Ce,e),e&&s(as),e&&s(F),e&&s(ns),j(ye,e),e&&s(os),j(Pe,e),e&&s(rs),e&&s(K),e&&s(ls),e&&s(L)}}}const Rn={local:"ifinetuneri-un-modle-avec-keras",sections:[{local:"entranement",title:"Entra\xEEnement"},{local:"amliorer-les-performances-dentranement",title:"Am\xE9liorer les performances d'entra\xEEnement"},{local:"prdictions-du-modle",title:"Pr\xE9dictions du mod\xE8le"}],title:"<i>Finetuner</i> un mod\xE8le avec Keras"};function Bn(O,p,z){let m="pt";return Kn(()=>{const x=new URLSearchParams(window.location.search);z(0,m=x.get("fw")||"pt")}),[m]}class to extends Dn{constructor(p){super();Mn(this,p,Bn,Hn,Nn,{})}}export{to as default,Rn as metadata};
