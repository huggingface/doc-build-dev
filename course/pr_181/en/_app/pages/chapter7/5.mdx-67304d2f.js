import{S as yg,i as kg,s as $g,e as o,t as a,k as h,w as b,c as r,a as l,h as n,d as t,m as c,x as v,b as f,g as i,F as s,y,q as g,o as _,B as k,U as dg,M as jg,V as fg,N as Cr,p as Pr,v as xg,n as Lr}from"../../chunks/vendor-1e8b365d.js";import{T as on}from"../../chunks/Tip-62b14c6e.js";import{Y as ju}from"../../chunks/Youtube-c2a8cc39.js";import{I as Ks}from"../../chunks/IconCopyLink-483c28ba.js";import{C as z}from"../../chunks/CodeBlock-e5764662.js";import{D as wg}from"../../chunks/DocNotebookDropdown-37d928d3.js";import{F as Eg}from"../../chunks/FrameworkSwitchCourse-7f8f0f31.js";function Tg(V){let u,j;return u=new wg({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section5_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section5_tf.ipynb"}]}}),{c(){b(u.$$.fragment)},l(d){v(u.$$.fragment,d)},m(d,E){y(u,d,E),j=!0},i(d){j||(g(u.$$.fragment,d),j=!0)},o(d){_(u.$$.fragment,d),j=!1},d(d){k(u,d)}}}function qg(V){let u,j;return u=new wg({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section5_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section5_pt.ipynb"}]}}),{c(){b(u.$$.fragment)},l(d){v(u.$$.fragment,d)},m(d,E){y(u,d,E),j=!0},i(d){j||(g(u.$$.fragment,d),j=!0)},o(d){_(u.$$.fragment,d),j=!1},d(d){k(u,d)}}}function zg(V){let u,j,d,E,C,x,A,P,T,S,I;return{c(){u=o("p"),j=a("\u270F\uFE0F "),d=o("strong"),E=a("Try it out!"),C=a(" Change the random seed in the "),x=o("code"),A=a("Dataset.shuffle()"),P=a(" command to explore other reviews in the corpus. If you\u2019re a Spanish speaker, take a look at some of the reviews in "),T=o("code"),S=a("spanish_dataset"),I=a(" to see if the titles also seem like reasonable summaries.")},l(D){u=r(D,"P",{});var O=l(u);j=n(O,"\u270F\uFE0F "),d=r(O,"STRONG",{});var G=l(d);E=n(G,"Try it out!"),G.forEach(t),C=n(O," Change the random seed in the "),x=r(O,"CODE",{});var J=l(x);A=n(J,"Dataset.shuffle()"),J.forEach(t),P=n(O," command to explore other reviews in the corpus. If you\u2019re a Spanish speaker, take a look at some of the reviews in "),T=r(O,"CODE",{});var X=l(T);S=n(X,"spanish_dataset"),X.forEach(t),I=n(O," to see if the titles also seem like reasonable summaries."),O.forEach(t)},m(D,O){i(D,u,O),s(u,j),s(u,d),s(d,E),s(u,C),s(u,x),s(x,A),s(u,P),s(u,T),s(T,S),s(u,I)},d(D){D&&t(u)}}}function Dg(V){let u,j,d,E,C,x,A,P;return{c(){u=o("p"),j=a("\u270F\uFE0F "),d=o("strong"),E=a("Try it out!"),C=a(" Once you\u2019ve worked through this section, see how well mT5 compares to mBART by fine-tuning the latter with the same techniques. For bonus points, you can also try fine-tuning T5 on just the English reviews. Since T5 has a special prefix prompt, you\u2019ll need to prepend "),x=o("code"),A=a("summarize:"),P=a(" to the input examples in the preprocessing steps below.")},l(T){u=r(T,"P",{});var S=l(u);j=n(S,"\u270F\uFE0F "),d=r(S,"STRONG",{});var I=l(d);E=n(I,"Try it out!"),I.forEach(t),C=n(S," Once you\u2019ve worked through this section, see how well mT5 compares to mBART by fine-tuning the latter with the same techniques. For bonus points, you can also try fine-tuning T5 on just the English reviews. Since T5 has a special prefix prompt, you\u2019ll need to prepend "),x=r(S,"CODE",{});var D=l(x);A=n(D,"summarize:"),D.forEach(t),P=n(S," to the input examples in the preprocessing steps below."),S.forEach(t)},m(T,S){i(T,u,S),s(u,j),s(u,d),s(d,E),s(u,C),s(u,x),s(x,A),s(u,P)},d(T){T&&t(u)}}}function Sg(V){let u,j;return{c(){u=o("p"),j=a("\u{1F4A1} In the early stages of your NLP projects, a good practice is to train a class of \u201Csmall\u201D models on a small sample of data. This allows you to debug and iterate faster toward an end-to-end workflow. Once you are confident in the results, you can always scale up the model by simply changing the model checkpoint!")},l(d){u=r(d,"P",{});var E=l(u);j=n(E,"\u{1F4A1} In the early stages of your NLP projects, a good practice is to train a class of \u201Csmall\u201D models on a small sample of data. This allows you to debug and iterate faster toward an end-to-end workflow. Once you are confident in the results, you can always scale up the model by simply changing the model checkpoint!"),E.forEach(t)},m(d,E){i(d,u,E),s(u,j)},d(d){d&&t(u)}}}function Ag(V){let u,j,d,E,C,x,A,P,T,S,I;return{c(){u=o("p"),j=a("\u{1F4A1} You may have noticed that we used "),d=o("code"),E=a("batched=True"),C=a(" in our "),x=o("code"),A=a("Dataset.map()"),P=a(" function above. This encodes the examples in batches of 1,000 (the default) and allows you to make use of the multithreading capabilities of the fast tokenizers in \u{1F917} Transformers. Where possible, try using "),T=o("code"),S=a("batched=True"),I=a(" to get the most out of your preprocessing!")},l(D){u=r(D,"P",{});var O=l(u);j=n(O,"\u{1F4A1} You may have noticed that we used "),d=r(O,"CODE",{});var G=l(d);E=n(G,"batched=True"),G.forEach(t),C=n(O," in our "),x=r(O,"CODE",{});var J=l(x);A=n(J,"Dataset.map()"),J.forEach(t),P=n(O," function above. This encodes the examples in batches of 1,000 (the default) and allows you to make use of the multithreading capabilities of the fast tokenizers in \u{1F917} Transformers. Where possible, try using "),T=r(O,"CODE",{});var X=l(T);S=n(X,"batched=True"),X.forEach(t),I=n(O," to get the most out of your preprocessing!"),O.forEach(t)},m(D,O){i(D,u,O),s(u,j),s(u,d),s(d,E),s(u,C),s(u,x),s(x,A),s(u,P),s(u,T),s(T,S),s(u,I)},d(D){D&&t(u)}}}function Og(V){let u,j,d,E,C,x,A,P;return{c(){u=o("p"),j=a("\u{1F64B} Don\u2019t worry if this is the first time you\u2019ve heard of precision and recall \u2014 we\u2019ll go through some explicit examples together to make it all clear. These metrics are usually encountered in classification tasks, so if you want to understand how precision and recall are defined in that context, we recommend checking out the "),d=o("code"),E=a("scikit-learn"),C=h(),x=o("a"),A=a("guides"),P=a("."),this.h()},l(T){u=r(T,"P",{});var S=l(u);j=n(S,"\u{1F64B} Don\u2019t worry if this is the first time you\u2019ve heard of precision and recall \u2014 we\u2019ll go through some explicit examples together to make it all clear. These metrics are usually encountered in classification tasks, so if you want to understand how precision and recall are defined in that context, we recommend checking out the "),d=r(S,"CODE",{});var I=l(d);E=n(I,"scikit-learn"),I.forEach(t),C=c(S),x=r(S,"A",{href:!0,rel:!0});var D=l(x);A=n(D,"guides"),D.forEach(t),P=n(S,"."),S.forEach(t),this.h()},h(){f(x,"href","https://scikit-learn.org/stable/auto_examples/model_selection/plot_precision_recall.html"),f(x,"rel","nofollow")},m(T,S){i(T,u,S),s(u,j),s(u,d),s(d,E),s(u,C),s(u,x),s(x,A),s(u,P)},d(T){T&&t(u)}}}function Cg(V){let u,j,d,E,C,x,A,P;return{c(){u=o("p"),j=a("\u270F\uFE0F "),d=o("strong"),E=a("Try it out!"),C=a(" Create your own example of a generated and reference summary and see if the resulting ROUGE scores agree with a manual calculation based on the formulas for precision and recall. For bonus points, split the text into bigrams and compare the precision and recall for the "),x=o("code"),A=a("rouge2"),P=a(" metric.")},l(T){u=r(T,"P",{});var S=l(u);j=n(S,"\u270F\uFE0F "),d=r(S,"STRONG",{});var I=l(d);E=n(I,"Try it out!"),I.forEach(t),C=n(S," Create your own example of a generated and reference summary and see if the resulting ROUGE scores agree with a manual calculation based on the formulas for precision and recall. For bonus points, split the text into bigrams and compare the precision and recall for the "),x=r(S,"CODE",{});var D=l(x);A=n(D,"rouge2"),D.forEach(t),P=n(S," metric."),S.forEach(t)},m(T,S){i(T,u,S),s(u,j),s(u,d),s(d,E),s(u,C),s(u,x),s(x,A),s(u,P)},d(T){T&&t(u)}}}function Pg(V){let u,j,d,E,C,x,A,P,T,S,I,D,O,G,J,X,Q,W,Z;return E=new Ks({}),W=new z({props:{code:`from transformers import TFAutoModelForSeq2SeqLM

model = TFAutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSeq2SeqLM

model = TFAutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)`}}),{c(){u=o("h2"),j=o("a"),d=o("span"),b(E.$$.fragment),C=h(),x=o("span"),A=a("Fine-tuning mT5 with Keras"),P=h(),T=o("p"),S=a("Fine-tuning a model for summarization is very similar to the other tasks we\u2019ve covered in this chapter. The first thing we need to do is load the pretrained model from the "),I=o("code"),D=a("mt5-small"),O=a(" checkpoint. Since summarization is a sequence-to-sequence task, we can load the model with the "),G=o("code"),J=a("AutoModelForSeq2SeqLM"),X=a(" class, which will automatically download and cache the weights:"),Q=h(),b(W.$$.fragment),this.h()},l(L){u=r(L,"H2",{class:!0});var U=l(u);j=r(U,"A",{id:!0,class:!0,href:!0});var te=l(j);d=r(te,"SPAN",{});var F=l(d);v(E.$$.fragment,F),F.forEach(t),te.forEach(t),C=c(U),x=r(U,"SPAN",{});var B=l(x);A=n(B,"Fine-tuning mT5 with Keras"),B.forEach(t),U.forEach(t),P=c(L),T=r(L,"P",{});var ne=l(T);S=n(ne,"Fine-tuning a model for summarization is very similar to the other tasks we\u2019ve covered in this chapter. The first thing we need to do is load the pretrained model from the "),I=r(ne,"CODE",{});var M=l(I);D=n(M,"mt5-small"),M.forEach(t),O=n(ne," checkpoint. Since summarization is a sequence-to-sequence task, we can load the model with the "),G=r(ne,"CODE",{});var le=l(G);J=n(le,"AutoModelForSeq2SeqLM"),le.forEach(t),X=n(ne," class, which will automatically download and cache the weights:"),ne.forEach(t),Q=c(L),v(W.$$.fragment,L),this.h()},h(){f(j,"id","finetuning-mt5-with-keras"),f(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(j,"href","#finetuning-mt5-with-keras"),f(u,"class","relative group")},m(L,U){i(L,u,U),s(u,j),s(j,d),y(E,d,null),s(u,C),s(u,x),s(x,A),i(L,P,U),i(L,T,U),s(T,S),s(T,I),s(I,D),s(T,O),s(T,G),s(G,J),s(T,X),i(L,Q,U),y(W,L,U),Z=!0},i(L){Z||(g(E.$$.fragment,L),g(W.$$.fragment,L),Z=!0)},o(L){_(E.$$.fragment,L),_(W.$$.fragment,L),Z=!1},d(L){L&&t(u),k(E),L&&t(P),L&&t(T),L&&t(Q),k(W,L)}}}function Lg(V){let u,j,d,E,C,x,A,P,T,S,I,D,O,G,J,X,Q,W,Z,L,U,te;return E=new Ks({}),U=new z({props:{code:`from transformers import AutoModelForSeq2SeqLM

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)`}}),{c(){u=o("h2"),j=o("a"),d=o("span"),b(E.$$.fragment),C=h(),x=o("span"),A=a("Fine-tuning mT5 with the "),P=o("code"),T=a("Trainer"),S=a(" API"),I=h(),D=o("p"),O=a("Fine-tuning a model for summarization is very similar to the other tasks we\u2019ve covered in this chapter. The first thing we need to do is load the pretrained model from the "),G=o("code"),J=a("mt5-small"),X=a(" checkpoint. Since summarization is a sequence-to-sequence task, we can load the model with the "),Q=o("code"),W=a("AutoModelForSeq2SeqLM"),Z=a(" class, which will automatically download and cache the weights:"),L=h(),b(U.$$.fragment),this.h()},l(F){u=r(F,"H2",{class:!0});var B=l(u);j=r(B,"A",{id:!0,class:!0,href:!0});var ne=l(j);d=r(ne,"SPAN",{});var M=l(d);v(E.$$.fragment,M),M.forEach(t),ne.forEach(t),C=c(B),x=r(B,"SPAN",{});var le=l(x);A=n(le,"Fine-tuning mT5 with the "),P=r(le,"CODE",{});var Y=l(P);T=n(Y,"Trainer"),Y.forEach(t),S=n(le," API"),le.forEach(t),B.forEach(t),I=c(F),D=r(F,"P",{});var oe=l(D);O=n(oe,"Fine-tuning a model for summarization is very similar to the other tasks we\u2019ve covered in this chapter. The first thing we need to do is load the pretrained model from the "),G=r(oe,"CODE",{});var fe=l(G);J=n(fe,"mt5-small"),fe.forEach(t),X=n(oe," checkpoint. Since summarization is a sequence-to-sequence task, we can load the model with the "),Q=r(oe,"CODE",{});var we=l(Q);W=n(we,"AutoModelForSeq2SeqLM"),we.forEach(t),Z=n(oe," class, which will automatically download and cache the weights:"),oe.forEach(t),L=c(F),v(U.$$.fragment,F),this.h()},h(){f(j,"id","finetuning-mt5-with-the-trainer-api"),f(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(j,"href","#finetuning-mt5-with-the-trainer-api"),f(u,"class","relative group")},m(F,B){i(F,u,B),s(u,j),s(j,d),y(E,d,null),s(u,C),s(u,x),s(x,A),s(x,P),s(P,T),s(x,S),i(F,I,B),i(F,D,B),s(D,O),s(D,G),s(G,J),s(D,X),s(D,Q),s(Q,W),s(D,Z),i(F,L,B),y(U,F,B),te=!0},i(F){te||(g(E.$$.fragment,F),g(U.$$.fragment,F),te=!0)},o(F){_(E.$$.fragment,F),_(U.$$.fragment,F),te=!1},d(F){F&&t(u),k(E),F&&t(I),F&&t(D),F&&t(L),k(U,F)}}}function Ig(V){let u,j,d,E,C;return{c(){u=o("p"),j=a("\u{1F4A1} If you\u2019re wondering why you don\u2019t see any warnings about fine-tuning the model on a downstream task, that\u2019s because for sequence-to-sequence tasks we keep all the weights of the network. Compare this to our text classification model in "),d=o("a"),E=a("Chapter 3"),C=a(", where the head of the pretrained model was replaced with a randomly initialized network."),this.h()},l(x){u=r(x,"P",{});var A=l(u);j=n(A,"\u{1F4A1} If you\u2019re wondering why you don\u2019t see any warnings about fine-tuning the model on a downstream task, that\u2019s because for sequence-to-sequence tasks we keep all the weights of the network. Compare this to our text classification model in "),d=r(A,"A",{href:!0});var P=l(d);E=n(P,"Chapter 3"),P.forEach(t),C=n(A,", where the head of the pretrained model was replaced with a randomly initialized network."),A.forEach(t),this.h()},h(){f(d,"href","/course/chapter3")},m(x,A){i(x,u,A),s(u,j),s(u,d),s(d,E),s(u,C)},d(x){x&&t(u)}}}function gg(V){let u,j,d,E,C,x,A,P,T,S,I,D,O,G,J,X,Q,W,Z,L,U,te,F,B,ne,M,le,Y,oe,fe,we,Ee,H,ye,ue,ee,ke,$e,re,De,ge,me,w,R,he,$,K,Te,_e,de,Ae,ae,Ne,ns,He,se,Be,je,ks,ce,gs,_s,$s,Ue,os,es,rs,Ke,Vs,ls,Se,ws,js,Me,is;return S=new z({props:{code:`from transformers import Seq2SeqTrainingArguments

batch_size = 8
num_train_epochs = 8
# Show the training loss with every epoch
logging_steps = len(tokenized_datasets["train"]) // batch_size
model_name = model_checkpoint.split("/")[-1]

args = Seq2SeqTrainingArguments(
    output_dir=f"{model_name}-finetuned-amazon-en-es",
    evaluation_strategy="epoch",
    learning_rate=5.6e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=num_train_epochs,
    predict_with_generate=True,
    logging_steps=logging_steps,
    push_to_hub=True,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Seq2SeqTrainingArguments

batch_size = <span class="hljs-number">8</span>
num_train_epochs = <span class="hljs-number">8</span>
<span class="hljs-comment"># Show the training loss with every epoch</span>
logging_steps = <span class="hljs-built_in">len</span>(tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>]) // batch_size
model_name = model_checkpoint.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]

args = Seq2SeqTrainingArguments(
    output_dir=<span class="hljs-string">f&quot;<span class="hljs-subst">{model_name}</span>-finetuned-amazon-en-es&quot;</span>,
    evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
    learning_rate=<span class="hljs-number">5.6e-5</span>,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    weight_decay=<span class="hljs-number">0.01</span>,
    save_total_limit=<span class="hljs-number">3</span>,
    num_train_epochs=num_train_epochs,
    predict_with_generate=<span class="hljs-literal">True</span>,
    logging_steps=logging_steps,
    push_to_hub=<span class="hljs-literal">True</span>,
)`}}),Me=new z({props:{code:`import numpy as np


def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    # Decode generated summaries into text
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
    # Replace -100 in the labels as we can't decode them
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    # Decode reference summaries into text
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)
    # ROUGE expects a newline after each sentence
    decoded_preds = ["\\n".join(sent_tokenize(pred.strip())) for pred in decoded_preds]
    decoded_labels = ["\\n".join(sent_tokenize(label.strip())) for label in decoded_labels]
    # Compute ROUGE scores
    result = rouge_score.compute(
        predictions=decoded_preds, references=decoded_labels, use_stemmer=True
    )
    # Extract the median scores
    result = {key: value.mid.fmeasure * 100 for key, value in result.items()}
    return {k: round(v, 4) for k, v in result.items()}`,highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np


<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">eval_pred</span>):
    predictions, labels = eval_pred
    <span class="hljs-comment"># Decode generated summaries into text</span>
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=<span class="hljs-literal">True</span>)
    <span class="hljs-comment"># Replace -100 in the labels as we can&#x27;t decode them</span>
    labels = np.where(labels != -<span class="hljs-number">100</span>, labels, tokenizer.pad_token_id)
    <span class="hljs-comment"># Decode reference summaries into text</span>
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=<span class="hljs-literal">True</span>)
    <span class="hljs-comment"># ROUGE expects a newline after each sentence</span>
    decoded_preds = [<span class="hljs-string">&quot;\\n&quot;</span>.join(sent_tokenize(pred.strip())) <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> decoded_preds]
    decoded_labels = [<span class="hljs-string">&quot;\\n&quot;</span>.join(sent_tokenize(label.strip())) <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> decoded_labels]
    <span class="hljs-comment"># Compute ROUGE scores</span>
    result = rouge_score.compute(
        predictions=decoded_preds, references=decoded_labels, use_stemmer=<span class="hljs-literal">True</span>
    )
    <span class="hljs-comment"># Extract the median scores</span>
    result = {key: value.mid.fmeasure * <span class="hljs-number">100</span> <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> result.items()}
    <span class="hljs-keyword">return</span> {k: <span class="hljs-built_in">round</span>(v, <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> result.items()}`}}),{c(){u=o("p"),j=a("We\u2019ll need to generate summaries in order to compute ROUGE scores during training. Fortunately, \u{1F917} Transformers provides dedicated "),d=o("code"),E=a("Seq2SeqTrainingArguments"),C=a(" and "),x=o("code"),A=a("Seq2SeqTrainer"),P=a(" classes that can do this for us automatically! To see how this works, let\u2019s first define the hyperparameters and other arguments for our experiments:"),T=h(),b(S.$$.fragment),I=h(),D=o("p"),O=a("Here, the "),G=o("code"),J=a("predict_with_generate"),X=a(" argument has been set to indicate that we should generate summaries during evaluation so that we can compute ROUGE scores for each epoch. As discussed in "),Q=o("a"),W=a("Chapter 1"),Z=a(", the decoder performs inference by predicting tokens one by one, and this is implemented by the model\u2019s "),L=o("code"),U=a("generate()"),te=a(" method. Setting "),F=o("code"),B=a("predict_with_generate=True"),ne=a(" tells the "),M=o("code"),le=a("Seq2SeqTrainer"),Y=a(" to use that method for evaluation. We\u2019ve also adjusted some of the default hyperparameters, like the learning rate, number of epochs, and weight decay, and we\u2019ve set the "),oe=o("code"),fe=a("save_total_limit"),we=a(" option to only save up to 3 checkpoints during training \u2014 this is because even the \u201Csmall\u201D version of mT5 uses around a GB of hard drive space, and we can save a bit of room by limiting the number of copies we save."),Ee=h(),H=o("p"),ye=a("The "),ue=o("code"),ee=a("push_to_hub=True"),ke=a(" argument will allow us to push the model to the Hub after training; you\u2019ll find the repository under your user profile in the location defined by "),$e=o("code"),re=a("output_dir"),De=a(". Note that you can specify the name of the repository you want to push to with the "),ge=o("code"),me=a("hub_model_id"),w=a(" argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),R=o("a"),he=o("code"),$=a("huggingface-course"),K=a(" organization"),Te=a(", we added "),_e=o("code"),de=a('hub_model_id="huggingface-course/mt5-finetuned-amazon-en-es"'),Ae=a(" to "),ae=o("code"),Ne=a("Seq2SeqTrainingArguments"),ns=a("."),He=h(),se=o("p"),Be=a("The next thing we need to do is provide the trainer with a "),je=o("code"),ks=a("compute_metrics()"),ce=a(" function so that we can evaluate our model during training. For summarization this is a bit more involved than simply calling "),gs=o("code"),_s=a("rouge_score.compute()"),$s=a(" on the model\u2019s predictions, since we need to "),Ue=o("em"),os=a("decode"),es=a(" the outputs and labels into text before we can compute the ROUGE scores. The following function does exactly that, and also makes use of the "),rs=o("code"),Ke=a("sent_tokenize()"),Vs=a(" function from "),ls=o("code"),Se=a("nltk"),ws=a(" to separate the summary sentences with newlines:"),js=h(),b(Me.$$.fragment),this.h()},l(N){u=r(N,"P",{});var ie=l(u);j=n(ie,"We\u2019ll need to generate summaries in order to compute ROUGE scores during training. Fortunately, \u{1F917} Transformers provides dedicated "),d=r(ie,"CODE",{});var xs=l(d);E=n(xs,"Seq2SeqTrainingArguments"),xs.forEach(t),C=n(ie," and "),x=r(ie,"CODE",{});var wt=l(x);A=n(wt,"Seq2SeqTrainer"),wt.forEach(t),P=n(ie," classes that can do this for us automatically! To see how this works, let\u2019s first define the hyperparameters and other arguments for our experiments:"),ie.forEach(t),T=c(N),v(S.$$.fragment,N),I=c(N),D=r(N,"P",{});var be=l(D);O=n(be,"Here, the "),G=r(be,"CODE",{});var We=l(G);J=n(We,"predict_with_generate"),We.forEach(t),X=n(be," argument has been set to indicate that we should generate summaries during evaluation so that we can compute ROUGE scores for each epoch. As discussed in "),Q=r(be,"A",{href:!0});var Ys=l(Q);W=n(Ys,"Chapter 1"),Ys.forEach(t),Z=n(be,", the decoder performs inference by predicting tokens one by one, and this is implemented by the model\u2019s "),L=r(be,"CODE",{});var ss=l(L);U=n(ss,"generate()"),ss.forEach(t),te=n(be," method. Setting "),F=r(be,"CODE",{});var ts=l(F);B=n(ts,"predict_with_generate=True"),ts.forEach(t),ne=n(be," tells the "),M=r(be,"CODE",{});var Ve=l(M);le=n(Ve,"Seq2SeqTrainer"),Ve.forEach(t),Y=n(be," to use that method for evaluation. We\u2019ve also adjusted some of the default hyperparameters, like the learning rate, number of epochs, and weight decay, and we\u2019ve set the "),oe=r(be,"CODE",{});var ps=l(oe);fe=n(ps,"save_total_limit"),ps.forEach(t),we=n(be," option to only save up to 3 checkpoints during training \u2014 this is because even the \u201Csmall\u201D version of mT5 uses around a GB of hard drive space, and we can save a bit of room by limiting the number of copies we save."),be.forEach(t),Ee=c(N),H=r(N,"P",{});var pe=l(H);ye=n(pe,"The "),ue=r(pe,"CODE",{});var Js=l(ue);ee=n(Js,"push_to_hub=True"),Js.forEach(t),ke=n(pe," argument will allow us to push the model to the Hub after training; you\u2019ll find the repository under your user profile in the location defined by "),$e=r(pe,"CODE",{});var Ye=l($e);re=n(Ye,"output_dir"),Ye.forEach(t),De=n(pe,". Note that you can specify the name of the repository you want to push to with the "),ge=r(pe,"CODE",{});var Xs=l(ge);me=n(Xs,"hub_model_id"),Xs.forEach(t),w=n(pe," argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),R=r(pe,"A",{href:!0,rel:!0});var Le=l(R);he=r(Le,"CODE",{});var Es=l(he);$=n(Es,"huggingface-course"),Es.forEach(t),K=n(Le," organization"),Le.forEach(t),Te=n(pe,", we added "),_e=r(pe,"CODE",{});var Ts=l(_e);de=n(Ts,'hub_model_id="huggingface-course/mt5-finetuned-amazon-en-es"'),Ts.forEach(t),Ae=n(pe," to "),ae=r(pe,"CODE",{});var bt=l(ae);Ne=n(bt,"Seq2SeqTrainingArguments"),bt.forEach(t),ns=n(pe,"."),pe.forEach(t),He=c(N),se=r(N,"P",{});var qe=l(se);Be=n(qe,"The next thing we need to do is provide the trainer with a "),je=r(qe,"CODE",{});var Je=l(je);ks=n(Je,"compute_metrics()"),Je.forEach(t),ce=n(qe," function so that we can evaluate our model during training. For summarization this is a bit more involved than simply calling "),gs=r(qe,"CODE",{});var Qs=l(gs);_s=n(Qs,"rouge_score.compute()"),Qs.forEach(t),$s=n(qe," on the model\u2019s predictions, since we need to "),Ue=r(qe,"EM",{});var ms=l(Ue);os=n(ms,"decode"),ms.forEach(t),es=n(qe," the outputs and labels into text before we can compute the ROUGE scores. The following function does exactly that, and also makes use of the "),rs=r(qe,"CODE",{});var qs=l(rs);Ke=n(qs,"sent_tokenize()"),qs.forEach(t),Vs=n(qe," function from "),ls=r(qe,"CODE",{});var ve=l(ls);Se=n(ve,"nltk"),ve.forEach(t),ws=n(qe," to separate the summary sentences with newlines:"),qe.forEach(t),js=c(N),v(Me.$$.fragment,N),this.h()},h(){f(Q,"href","/course/chapter1"),f(R,"href","https://huggingface.co/huggingface-course"),f(R,"rel","nofollow")},m(N,ie){i(N,u,ie),s(u,j),s(u,d),s(d,E),s(u,C),s(u,x),s(x,A),s(u,P),i(N,T,ie),y(S,N,ie),i(N,I,ie),i(N,D,ie),s(D,O),s(D,G),s(G,J),s(D,X),s(D,Q),s(Q,W),s(D,Z),s(D,L),s(L,U),s(D,te),s(D,F),s(F,B),s(D,ne),s(D,M),s(M,le),s(D,Y),s(D,oe),s(oe,fe),s(D,we),i(N,Ee,ie),i(N,H,ie),s(H,ye),s(H,ue),s(ue,ee),s(H,ke),s(H,$e),s($e,re),s(H,De),s(H,ge),s(ge,me),s(H,w),s(H,R),s(R,he),s(he,$),s(R,K),s(H,Te),s(H,_e),s(_e,de),s(H,Ae),s(H,ae),s(ae,Ne),s(H,ns),i(N,He,ie),i(N,se,ie),s(se,Be),s(se,je),s(je,ks),s(se,ce),s(se,gs),s(gs,_s),s(se,$s),s(se,Ue),s(Ue,os),s(se,es),s(se,rs),s(rs,Ke),s(se,Vs),s(se,ls),s(ls,Se),s(se,ws),i(N,js,ie),y(Me,N,ie),is=!0},i(N){is||(g(S.$$.fragment,N),g(Me.$$.fragment,N),is=!0)},o(N){_(S.$$.fragment,N),_(Me.$$.fragment,N),is=!1},d(N){N&&t(u),N&&t(T),k(S,N),N&&t(I),N&&t(D),N&&t(Ee),N&&t(H),N&&t(He),N&&t(se),N&&t(js),k(Me,N)}}}function Rg(V){let u,j;return u=new z({props:{code:`from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model, return_tensors="tf")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}),{c(){b(u.$$.fragment)},l(d){v(u.$$.fragment,d)},m(d,E){y(u,d,E),j=!0},i(d){j||(g(u.$$.fragment,d),j=!0)},o(d){_(u.$$.fragment,d),j=!1},d(d){k(u,d)}}}function Fg(V){let u,j;return u=new z({props:{code:`from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)`}}),{c(){b(u.$$.fragment)},l(d){v(u.$$.fragment,d)},m(d,E){y(u,d,E),j=!0},i(d){j||(g(u.$$.fragment,d),j=!0)},o(d){_(u.$$.fragment,d),j=!1},d(d){k(u,d)}}}function Gg(V){let u,j,d,E,C,x,A,P,T,S,I,D,O,G,J,X,Q,W,Z,L,U,te,F,B,ne,M,le,Y,oe,fe,we,Ee,H,ye,ue,ee,ke,$e,re,De,ge,me;return O=new z({props:{code:`tf_train_dataset = tokenized_datasets["train"].to_tf_dataset(
    columns=["input_ids", "attention_mask", "labels"],
    collate_fn=data_collator,
    shuffle=True,
    batch_size=8,
)
tf_eval_dataset = tokenized_datasets["validation"].to_tf_dataset(
    columns=["input_ids", "attention_mask", "labels"],
    collate_fn=data_collator,
    shuffle=False,
    batch_size=8,
)`,highlighted:`tf_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">True</span>,
    batch_size=<span class="hljs-number">8</span>,
)
tf_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">False</span>,
    batch_size=<span class="hljs-number">8</span>,
)`}}),W=new z({props:{code:`from transformers import create_optimizer
import tensorflow as tf

# The number of training steps is the number of samples in the dataset, divided by the batch size then multiplied
# by the total number of epochs. Note that the tf_train_dataset here is a batched tf.data.Dataset,
# not the original Hugging Face Dataset, so its len() is already num_samples // batch_size.
num_train_epochs = 8
num_train_steps = len(tf_train_dataset) * num_train_epochs
model_name = model_checkpoint.split("/")[-1]

optimizer, schedule = create_optimizer(
    init_lr=5.6e-5,
    num_warmup_steps=0,
    num_train_steps=num_train_steps,
    weight_decay_rate=0.01,
)

model.compile(optimizer=optimizer)

# Train in mixed-precision float16
tf.keras.mixed_precision.set_global_policy("mixed_float16")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-comment"># The number of training steps is the number of samples in the dataset, divided by the batch size then multiplied</span>
<span class="hljs-comment"># by the total number of epochs. Note that the tf_train_dataset here is a batched tf.data.Dataset,</span>
<span class="hljs-comment"># not the original Hugging Face Dataset, so its len() is already num_samples // batch_size.</span>
num_train_epochs = <span class="hljs-number">8</span>
num_train_steps = <span class="hljs-built_in">len</span>(tf_train_dataset) * num_train_epochs
model_name = model_checkpoint.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]

optimizer, schedule = create_optimizer(
    init_lr=<span class="hljs-number">5.6e-5</span>,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_train_steps=num_train_steps,
    weight_decay_rate=<span class="hljs-number">0.01</span>,
)

model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)

<span class="hljs-comment"># Train in mixed-precision float16</span>
tf.keras.mixed_precision.set_global_policy(<span class="hljs-string">&quot;mixed_float16&quot;</span>)`}}),M=new z({props:{code:`from transformers.keras_callbacks import PushToHubCallback

callback = PushToHubCallback(
    output_dir=f"{model_name}-finetuned-amazon-en-es", tokenizer=tokenizer
)

model.fit(
    tf_train_dataset, validation_data=tf_eval_dataset, callbacks=[callback], epochs=8
)`,highlighted:`<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback

callback = PushToHubCallback(
    output_dir=<span class="hljs-string">f&quot;<span class="hljs-subst">{model_name}</span>-finetuned-amazon-en-es&quot;</span>, tokenizer=tokenizer
)

model.fit(
    tf_train_dataset, validation_data=tf_eval_dataset, callbacks=[callback], epochs=<span class="hljs-number">8</span>
)`}}),ye=new z({props:{code:`from tqdm import tqdm
import numpy as np

all_preds = []
all_labels = []
for batch in tqdm(tf_eval_dataset):
    predictions = model.generate(**batch)
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
    labels = batch["labels"].numpy()
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)
    decoded_preds = ["\\n".join(sent_tokenize(pred.strip())) for pred in decoded_preds]
    decoded_labels = ["\\n".join(sent_tokenize(label.strip())) for label in decoded_labels]
    all_preds.extend(decoded_preds)
    all_labels.extend(decoded_labels)`,highlighted:`<span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

all_preds = []
all_labels = []
<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> tqdm(tf_eval_dataset):
    predictions = model.generate(**batch)
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=<span class="hljs-literal">True</span>)
    labels = batch[<span class="hljs-string">&quot;labels&quot;</span>].numpy()
    labels = np.where(labels != -<span class="hljs-number">100</span>, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=<span class="hljs-literal">True</span>)
    decoded_preds = [<span class="hljs-string">&quot;\\n&quot;</span>.join(sent_tokenize(pred.strip())) <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> decoded_preds]
    decoded_labels = [<span class="hljs-string">&quot;\\n&quot;</span>.join(sent_tokenize(label.strip())) <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> decoded_labels]
    all_preds.extend(decoded_preds)
    all_labels.extend(decoded_labels)`}}),re=new z({props:{code:`result = rouge_score.compute(
    predictions=decoded_preds, references=decoded_labels, use_stemmer=True
)
result = {key: value.mid.fmeasure * 100 for key, value in result.items()}
{k: round(v, 4) for k, v in result.items()}`,highlighted:`result = rouge_score.compute(
    predictions=decoded_preds, references=decoded_labels, use_stemmer=<span class="hljs-literal">True</span>
)
result = {key: value.mid.fmeasure * <span class="hljs-number">100</span> <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> result.items()}
{k: <span class="hljs-built_in">round</span>(v, <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> result.items()}`}}),ge=new z({props:{code:"{'rouge1': 31.4815, 'rouge2': 25.4386, 'rougeL': 31.4815, 'rougeLsum': 31.4815}",highlighted:'{&#x27;rouge1&#x27;: <span class="hljs-number">31.4815</span>, &#x27;rouge2&#x27;: <span class="hljs-number">25.4386</span>, &#x27;rougeL&#x27;: <span class="hljs-number">31.4815</span>, &#x27;rougeLsum&#x27;: <span class="hljs-number">31.4815</span>}'}}),{c(){u=o("p"),j=a("We\u2019re almost ready to train! We just need to convert our datasets to "),d=o("code"),E=a("tf.data.Dataset"),C=a("s using the data collator we defined above, and then "),x=o("code"),A=a("compile()"),P=a(" and "),T=o("code"),S=a("fit()"),I=a(" the model. First, the datasets:"),D=h(),b(O.$$.fragment),G=h(),J=o("p"),X=a("Now, we define our training hyperparameters and compile:"),Q=h(),b(W.$$.fragment),Z=h(),L=o("p"),U=a("And finally, we fit the model. We use a "),te=o("code"),F=a("PushToHubCallback"),B=a(" to save the model to the Hub after each epoch, which will allow us to use it for inference later:"),ne=h(),b(M.$$.fragment),le=h(),Y=o("p"),oe=a("We got some loss values during training, but really we\u2019d like to see the ROUGE metrics we computed earlier. To get those metrics, we\u2019ll need to generate outputs from the model and convert them to strings. Let\u2019s build some lists of labels and predictions for the ROUGE metric to compare (note that if you get import errors for this section, you may need to"),fe=o("code"),we=a("!pip install tqdm"),Ee=a("):"),H=h(),b(ye.$$.fragment),ue=h(),ee=o("p"),ke=a("Once we have our lists of label and prediction strings, computing the ROUGE score is easy:"),$e=h(),b(re.$$.fragment),De=h(),b(ge.$$.fragment)},l(w){u=r(w,"P",{});var R=l(u);j=n(R,"We\u2019re almost ready to train! We just need to convert our datasets to "),d=r(R,"CODE",{});var he=l(d);E=n(he,"tf.data.Dataset"),he.forEach(t),C=n(R,"s using the data collator we defined above, and then "),x=r(R,"CODE",{});var $=l(x);A=n($,"compile()"),$.forEach(t),P=n(R," and "),T=r(R,"CODE",{});var K=l(T);S=n(K,"fit()"),K.forEach(t),I=n(R," the model. First, the datasets:"),R.forEach(t),D=c(w),v(O.$$.fragment,w),G=c(w),J=r(w,"P",{});var Te=l(J);X=n(Te,"Now, we define our training hyperparameters and compile:"),Te.forEach(t),Q=c(w),v(W.$$.fragment,w),Z=c(w),L=r(w,"P",{});var _e=l(L);U=n(_e,"And finally, we fit the model. We use a "),te=r(_e,"CODE",{});var de=l(te);F=n(de,"PushToHubCallback"),de.forEach(t),B=n(_e," to save the model to the Hub after each epoch, which will allow us to use it for inference later:"),_e.forEach(t),ne=c(w),v(M.$$.fragment,w),le=c(w),Y=r(w,"P",{});var Ae=l(Y);oe=n(Ae,"We got some loss values during training, but really we\u2019d like to see the ROUGE metrics we computed earlier. To get those metrics, we\u2019ll need to generate outputs from the model and convert them to strings. Let\u2019s build some lists of labels and predictions for the ROUGE metric to compare (note that if you get import errors for this section, you may need to"),fe=r(Ae,"CODE",{});var ae=l(fe);we=n(ae,"!pip install tqdm"),ae.forEach(t),Ee=n(Ae,"):"),Ae.forEach(t),H=c(w),v(ye.$$.fragment,w),ue=c(w),ee=r(w,"P",{});var Ne=l(ee);ke=n(Ne,"Once we have our lists of label and prediction strings, computing the ROUGE score is easy:"),Ne.forEach(t),$e=c(w),v(re.$$.fragment,w),De=c(w),v(ge.$$.fragment,w)},m(w,R){i(w,u,R),s(u,j),s(u,d),s(d,E),s(u,C),s(u,x),s(x,A),s(u,P),s(u,T),s(T,S),s(u,I),i(w,D,R),y(O,w,R),i(w,G,R),i(w,J,R),s(J,X),i(w,Q,R),y(W,w,R),i(w,Z,R),i(w,L,R),s(L,U),s(L,te),s(te,F),s(L,B),i(w,ne,R),y(M,w,R),i(w,le,R),i(w,Y,R),s(Y,oe),s(Y,fe),s(fe,we),s(Y,Ee),i(w,H,R),y(ye,w,R),i(w,ue,R),i(w,ee,R),s(ee,ke),i(w,$e,R),y(re,w,R),i(w,De,R),y(ge,w,R),me=!0},i(w){me||(g(O.$$.fragment,w),g(W.$$.fragment,w),g(M.$$.fragment,w),g(ye.$$.fragment,w),g(re.$$.fragment,w),g(ge.$$.fragment,w),me=!0)},o(w){_(O.$$.fragment,w),_(W.$$.fragment,w),_(M.$$.fragment,w),_(ye.$$.fragment,w),_(re.$$.fragment,w),_(ge.$$.fragment,w),me=!1},d(w){w&&t(u),w&&t(D),k(O,w),w&&t(G),w&&t(J),w&&t(Q),k(W,w),w&&t(Z),w&&t(L),w&&t(ne),k(M,w),w&&t(le),w&&t(Y),w&&t(H),k(ye,w),w&&t(ue),w&&t(ee),w&&t($e),k(re,w),w&&t(De),k(ge,w)}}}function Ng(V){let u,j,d,E,C,x,A,P,T,S,I,D,O,G,J,X,Q,W,Z,L,U,te,F,B,ne,M,le,Y,oe,fe,we,Ee,H,ye,ue,ee,ke,$e,re,De,ge,me,w,R,he;return E=new z({props:{code:`from transformers import Seq2SeqTrainer

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Seq2SeqTrainer

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>],
    eval_dataset=tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)`}}),T=new z({props:{code:"trainer.train()",highlighted:"trainer.train()"}}),Q=new z({props:{code:"trainer.evaluate()",highlighted:"trainer.evaluate()"}}),Z=new z({props:{code:`{'eval_loss': 3.028524398803711,
 'eval_rouge1': 16.9728,
 'eval_rouge2': 8.2969,
 'eval_rougeL': 16.8366,
 'eval_rougeLsum': 16.851,
 'eval_gen_len': 10.1597,
 'eval_runtime': 6.1054,
 'eval_samples_per_second': 38.982,
 'eval_steps_per_second': 4.914}`,highlighted:`{<span class="hljs-string">&#x27;eval_loss&#x27;</span>: <span class="hljs-number">3.028524398803711</span>,
 <span class="hljs-string">&#x27;eval_rouge1&#x27;</span>: <span class="hljs-number">16.9728</span>,
 <span class="hljs-string">&#x27;eval_rouge2&#x27;</span>: <span class="hljs-number">8.2969</span>,
 <span class="hljs-string">&#x27;eval_rougeL&#x27;</span>: <span class="hljs-number">16.8366</span>,
 <span class="hljs-string">&#x27;eval_rougeLsum&#x27;</span>: <span class="hljs-number">16.851</span>,
 <span class="hljs-string">&#x27;eval_gen_len&#x27;</span>: <span class="hljs-number">10.1597</span>,
 <span class="hljs-string">&#x27;eval_runtime&#x27;</span>: <span class="hljs-number">6.1054</span>,
 <span class="hljs-string">&#x27;eval_samples_per_second&#x27;</span>: <span class="hljs-number">38.982</span>,
 <span class="hljs-string">&#x27;eval_steps_per_second&#x27;</span>: <span class="hljs-number">4.914</span>}`}}),B=new z({props:{code:'trainer.push_to_hub(commit_message="Training complete", tags="summarization")',highlighted:'trainer.push_to_hub(<span class="hljs-attribute">commit_message</span>=<span class="hljs-string">&quot;Training complete&quot;</span>, <span class="hljs-attribute">tags</span>=<span class="hljs-string">&quot;summarization&quot;</span>)'}}),M=new z({props:{code:"'https://huggingface.co/huggingface-course/mt5-finetuned-amazon-en-es/commit/aa0536b829b28e73e1e4b94b8a5aacec420d40e0'",highlighted:'<span class="hljs-string">&#x27;https://huggingface.co/huggingface-course/mt5-finetuned-amazon-en-es/commit/aa0536b829b28e73e1e4b94b8a5aacec420d40e0&#x27;</span>'}}),{c(){u=o("p"),j=a("We finally have all the ingredients we need to train with! We now simply need to instantiate the trainer with the standard arguments:"),d=h(),b(E.$$.fragment),C=h(),x=o("p"),A=a("and launch our training run:"),P=h(),b(T.$$.fragment),S=h(),I=o("p"),D=a("During training, you should see the training loss decrease and the ROUGE scores increase with each epoch. Once the training is complete, you can see the final ROUGE scores by running "),O=o("code"),G=a("Trainer.evaluate()"),J=a(":"),X=h(),b(Q.$$.fragment),W=h(),b(Z.$$.fragment),L=h(),U=o("p"),te=a("From the scores we can see that our model has handily outperformed our lead-3 baseline \u2014 nice! The final thing to do is push the model weights to the Hub, as follows:"),F=h(),b(B.$$.fragment),ne=h(),b(M.$$.fragment),le=h(),Y=o("p"),oe=a("This will save the checkpoint and configuration files to "),fe=o("code"),we=a("output_dir"),Ee=a(", before uploading all the files to the Hub. By specifying the "),H=o("code"),ye=a("tags"),ue=a(" argument, we also ensure that the widget on the Hub will be one for a summarization pipeline instead of the default text generation one associated with the mT5 architecture (for more information about model tags, see the "),ee=o("a"),ke=a("\u{1F917} Hub documentation"),$e=a("). The output from "),re=o("code"),De=a("trainer.push_to_hub()"),ge=a(" is a URL to the Git commit hash, so you can easily see the changes that were made to the model repository!"),me=h(),w=o("p"),R=a("To wrap up this section, let\u2019s take a look at how we can also fine-tune mT5 using the low-level features provided by \u{1F917} Accelerate."),this.h()},l($){u=r($,"P",{});var K=l(u);j=n(K,"We finally have all the ingredients we need to train with! We now simply need to instantiate the trainer with the standard arguments:"),K.forEach(t),d=c($),v(E.$$.fragment,$),C=c($),x=r($,"P",{});var Te=l(x);A=n(Te,"and launch our training run:"),Te.forEach(t),P=c($),v(T.$$.fragment,$),S=c($),I=r($,"P",{});var _e=l(I);D=n(_e,"During training, you should see the training loss decrease and the ROUGE scores increase with each epoch. Once the training is complete, you can see the final ROUGE scores by running "),O=r(_e,"CODE",{});var de=l(O);G=n(de,"Trainer.evaluate()"),de.forEach(t),J=n(_e,":"),_e.forEach(t),X=c($),v(Q.$$.fragment,$),W=c($),v(Z.$$.fragment,$),L=c($),U=r($,"P",{});var Ae=l(U);te=n(Ae,"From the scores we can see that our model has handily outperformed our lead-3 baseline \u2014 nice! The final thing to do is push the model weights to the Hub, as follows:"),Ae.forEach(t),F=c($),v(B.$$.fragment,$),ne=c($),v(M.$$.fragment,$),le=c($),Y=r($,"P",{});var ae=l(Y);oe=n(ae,"This will save the checkpoint and configuration files to "),fe=r(ae,"CODE",{});var Ne=l(fe);we=n(Ne,"output_dir"),Ne.forEach(t),Ee=n(ae,", before uploading all the files to the Hub. By specifying the "),H=r(ae,"CODE",{});var ns=l(H);ye=n(ns,"tags"),ns.forEach(t),ue=n(ae," argument, we also ensure that the widget on the Hub will be one for a summarization pipeline instead of the default text generation one associated with the mT5 architecture (for more information about model tags, see the "),ee=r(ae,"A",{href:!0,rel:!0});var He=l(ee);ke=n(He,"\u{1F917} Hub documentation"),He.forEach(t),$e=n(ae,"). The output from "),re=r(ae,"CODE",{});var se=l(re);De=n(se,"trainer.push_to_hub()"),se.forEach(t),ge=n(ae," is a URL to the Git commit hash, so you can easily see the changes that were made to the model repository!"),ae.forEach(t),me=c($),w=r($,"P",{});var Be=l(w);R=n(Be,"To wrap up this section, let\u2019s take a look at how we can also fine-tune mT5 using the low-level features provided by \u{1F917} Accelerate."),Be.forEach(t),this.h()},h(){f(ee,"href","https://huggingface.co/docs/hub/main#how-is-a-models-type-of-inference-api-and-widget-determined"),f(ee,"rel","nofollow")},m($,K){i($,u,K),s(u,j),i($,d,K),y(E,$,K),i($,C,K),i($,x,K),s(x,A),i($,P,K),y(T,$,K),i($,S,K),i($,I,K),s(I,D),s(I,O),s(O,G),s(I,J),i($,X,K),y(Q,$,K),i($,W,K),y(Z,$,K),i($,L,K),i($,U,K),s(U,te),i($,F,K),y(B,$,K),i($,ne,K),y(M,$,K),i($,le,K),i($,Y,K),s(Y,oe),s(Y,fe),s(fe,we),s(Y,Ee),s(Y,H),s(H,ye),s(Y,ue),s(Y,ee),s(ee,ke),s(Y,$e),s(Y,re),s(re,De),s(Y,ge),i($,me,K),i($,w,K),s(w,R),he=!0},i($){he||(g(E.$$.fragment,$),g(T.$$.fragment,$),g(Q.$$.fragment,$),g(Z.$$.fragment,$),g(B.$$.fragment,$),g(M.$$.fragment,$),he=!0)},o($){_(E.$$.fragment,$),_(T.$$.fragment,$),_(Q.$$.fragment,$),_(Z.$$.fragment,$),_(B.$$.fragment,$),_(M.$$.fragment,$),he=!1},d($){$&&t(u),$&&t(d),k(E,$),$&&t(C),$&&t(x),$&&t(P),k(T,$),$&&t(S),$&&t(I),$&&t(X),k(Q,$),$&&t(W),k(Z,$),$&&t(L),$&&t(U),$&&t(F),k(B,$),$&&t(ne),k(M,$),$&&t(le),$&&t(Y),$&&t(me),$&&t(w)}}}function _g(V){let u,j,d,E,C,x,A,P,T,S,I,D,O,G,J,X,Q,W,Z,L,U,te,F,B,ne,M,le,Y,oe,fe,we,Ee,H,ye,ue,ee,ke,$e,re,De,ge,me,w,R,he,$,K,Te,_e,de,Ae,ae,Ne,ns,He,se,Be,je,ks,ce,gs,_s,$s,Ue,os,es,rs,Ke,Vs,ls,Se,ws,js,Me,is,N,ie,xs,wt,be,We,Ys,ss,ts,Ve,ps,pe,Js,Ye,Xs,Le,Es,Ts,bt,qe,Je,Qs,ms,qs,ve,rn,vt,Zs,ga,bs,_a,yt,kt,wa,et,$t,zs,ln,jt,st,ba,ze,vs,hs,Mt,tt,Wt,Bt,pn,xt,Et,mn,Tt,Xe,at,Kt,Vt,hn,va,nt,qt,zt,cn,Dt,ot,ya,Oe,ka,Ie,un,Yt,Jt,dn,Xt,Qt,fn,Zt,$a,St,ja,Ds,Ss,As,Os,rt,Cs,xa,as,lt,$o,Ea;return E=new Ks({}),U=new Ks({}),ue=new z({props:{code:'tokenized_datasets.set_format("torch")',highlighted:'tokenized_datasets.set_format(<span class="hljs-string">&quot;torch&quot;</span>)'}}),w=new z({props:{code:"model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)",highlighted:"model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)"}}),Te=new z({props:{code:`from torch.utils.data import DataLoader

batch_size = 8
train_dataloader = DataLoader(
    tokenized_datasets["train"],
    shuffle=True,
    collate_fn=data_collator,
    batch_size=batch_size,
)
eval_dataloader = DataLoader(
    tokenized_datasets["validation"], collate_fn=data_collator, batch_size=batch_size
)`,highlighted:`<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader

batch_size = <span class="hljs-number">8</span>
train_dataloader = DataLoader(
    tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>],
    shuffle=<span class="hljs-literal">True</span>,
    collate_fn=data_collator,
    batch_size=batch_size,
)
eval_dataloader = DataLoader(
    tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>], collate_fn=data_collator, batch_size=batch_size
)`}}),se=new z({props:{code:`from torch.optim import AdamW

optimizer = AdamW(model.parameters(), lr=2e-5)`,highlighted:`<span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> AdamW

optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">2e-5</span>)`}}),Ue=new z({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator()
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`}}),es=new on({props:{$$slots:{default:[Hg]},$$scope:{ctx:V}}}),ts=new z({props:{code:`from transformers import get_scheduler

num_train_epochs = 10
num_update_steps_per_epoch = len(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler

num_train_epochs = <span class="hljs-number">10</span>
num_update_steps_per_epoch = <span class="hljs-built_in">len</span>(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    <span class="hljs-string">&quot;linear&quot;</span>,
    optimizer=optimizer,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_training_steps=num_training_steps,
)`}}),Ye=new z({props:{code:`def postprocess_text(preds, labels):
    preds = [pred.strip() for pred in preds]
    labels = [label.strip() for label in labels]

    # ROUGE expects a newline after each sentence
    preds = ["\\n".join(nltk.sent_tokenize(pred)) for pred in preds]
    labels = ["\\n".join(nltk.sent_tokenize(label)) for label in labels]

    return preds, labels`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">postprocess_text</span>(<span class="hljs-params">preds, labels</span>):
    preds = [pred.strip() <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds]
    labels = [label.strip() <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> labels]

    <span class="hljs-comment"># ROUGE expects a newline after each sentence</span>
    preds = [<span class="hljs-string">&quot;\\n&quot;</span>.join(nltk.sent_tokenize(pred)) <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds]
    labels = [<span class="hljs-string">&quot;\\n&quot;</span>.join(nltk.sent_tokenize(label)) <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> labels]

    <span class="hljs-keyword">return</span> preds, labels`}}),Zs=new z({props:{code:`from huggingface_hub import get_full_repo_name

model_name = "test-bert-finetuned-squad-accelerate"
repo_name = get_full_repo_name(model_name)
repo_name`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> get_full_repo_name

model_name = <span class="hljs-string">&quot;test-bert-finetuned-squad-accelerate&quot;</span>
repo_name = get_full_repo_name(model_name)
repo_name`}}),bs=new z({props:{code:"'lewtun/mt5-finetuned-amazon-en-es-accelerate'",highlighted:'<span class="hljs-string">&#x27;lewtun/mt5-finetuned-amazon-en-es-accelerate&#x27;</span>'}}),et=new z({props:{code:`from huggingface_hub import Repository

output_dir = "results-mt5-finetuned-squad-accelerate"
repo = Repository(output_dir, clone_from=repo_name)`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository

output_dir = <span class="hljs-string">&quot;results-mt5-finetuned-squad-accelerate&quot;</span>
repo = Repository(output_dir, clone_from=repo_name)`}}),tt=new Ks({}),Ss=new z({props:{code:`from tqdm.auto import tqdm
import torch
import numpy as np

progress_bar = tqdm(range(num_training_steps))

for epoch in range(num_train_epochs):
    # Training
    model.train()
    for step, batch in enumerate(train_dataloader):
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)

    # Evaluation
    model.eval()
    for step, batch in enumerate(eval_dataloader):
        with torch.no_grad():
            generated_tokens = accelerator.unwrap_model(model).generate(
                batch["input_ids"],
                attention_mask=batch["attention_mask"],
            )

            generated_tokens = accelerator.pad_across_processes(
                generated_tokens, dim=1, pad_index=tokenizer.pad_token_id
            )
            labels = batch["labels"]

            # If we did not pad to max length, we need to pad the labels too
            labels = accelerator.pad_across_processes(
                batch["labels"], dim=1, pad_index=tokenizer.pad_token_id
            )

            generated_tokens = accelerator.gather(generated_tokens).cpu().numpy()
            labels = accelerator.gather(labels).cpu().numpy()

            # Replace -100 in the labels as we can't decode them
            labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
            if isinstance(generated_tokens, tuple):
                generated_tokens = generated_tokens[0]
            decoded_preds = tokenizer.batch_decode(
                generated_tokens, skip_special_tokens=True
            )
            decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

            decoded_preds, decoded_labels = postprocess_text(
                decoded_preds, decoded_labels
            )

            rouge_score.add_batch(predictions=decoded_preds, references=decoded_labels)

    # Compute metrics
    result = rouge_score.compute()
    # Extract the median ROUGE scores
    result = {key: value.mid.fmeasure * 100 for key, value in result.items()}
    result = {k: round(v, 4) for k, v in result.items()}
    print(f"Epoch {epoch}:", result)

    # Save and upload
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    if accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=f"Training in progress epoch {epoch}", blocking=False
        )`,highlighted:`<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

progress_bar = tqdm(<span class="hljs-built_in">range</span>(num_training_steps))

<span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_train_epochs):
    <span class="hljs-comment"># Training</span>
    model.train()
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(<span class="hljs-number">1</span>)

    <span class="hljs-comment"># Evaluation</span>
    model.<span class="hljs-built_in">eval</span>()
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(eval_dataloader):
        <span class="hljs-keyword">with</span> torch.no_grad():
            generated_tokens = accelerator.unwrap_model(model).generate(
                batch[<span class="hljs-string">&quot;input_ids&quot;</span>],
                attention_mask=batch[<span class="hljs-string">&quot;attention_mask&quot;</span>],
            )

            generated_tokens = accelerator.pad_across_processes(
                generated_tokens, dim=<span class="hljs-number">1</span>, pad_index=tokenizer.pad_token_id
            )
            labels = batch[<span class="hljs-string">&quot;labels&quot;</span>]

            <span class="hljs-comment"># If we did not pad to max length, we need to pad the labels too</span>
            labels = accelerator.pad_across_processes(
                batch[<span class="hljs-string">&quot;labels&quot;</span>], dim=<span class="hljs-number">1</span>, pad_index=tokenizer.pad_token_id
            )

            generated_tokens = accelerator.gather(generated_tokens).cpu().numpy()
            labels = accelerator.gather(labels).cpu().numpy()

            <span class="hljs-comment"># Replace -100 in the labels as we can&#x27;t decode them</span>
            labels = np.where(labels != -<span class="hljs-number">100</span>, labels, tokenizer.pad_token_id)
            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(generated_tokens, <span class="hljs-built_in">tuple</span>):
                generated_tokens = generated_tokens[<span class="hljs-number">0</span>]
            decoded_preds = tokenizer.batch_decode(
                generated_tokens, skip_special_tokens=<span class="hljs-literal">True</span>
            )
            decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=<span class="hljs-literal">True</span>)

            decoded_preds, decoded_labels = postprocess_text(
                decoded_preds, decoded_labels
            )

            rouge_score.add_batch(predictions=decoded_preds, references=decoded_labels)

    <span class="hljs-comment"># Compute metrics</span>
    result = rouge_score.compute()
    <span class="hljs-comment"># Extract the median ROUGE scores</span>
    result = {key: value.mid.fmeasure * <span class="hljs-number">100</span> <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> result.items()}
    result = {k: <span class="hljs-built_in">round</span>(v, <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> result.items()}
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">{epoch}</span>:&quot;</span>, result)

    <span class="hljs-comment"># Save and upload</span>
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    <span class="hljs-keyword">if</span> accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=<span class="hljs-string">f&quot;Training in progress epoch <span class="hljs-subst">{epoch}</span>&quot;</span>, blocking=<span class="hljs-literal">False</span>
        )`}}),Os=new z({props:{code:`Epoch 0: {'rouge1': 5.6351, 'rouge2': 1.1625, 'rougeL': 5.4866, 'rougeLsum': 5.5005}
Epoch 1: {'rouge1': 9.8646, 'rouge2': 3.4106, 'rougeL': 9.9439, 'rougeLsum': 9.9306}
Epoch 2: {'rouge1': 11.0872, 'rouge2': 3.3273, 'rougeL': 11.0508, 'rougeLsum': 10.9468}
Epoch 3: {'rouge1': 11.8587, 'rouge2': 4.8167, 'rougeL': 11.7986, 'rougeLsum': 11.7518}
Epoch 4: {'rouge1': 12.9842, 'rouge2': 5.5887, 'rougeL': 12.7546, 'rougeLsum': 12.7029}
Epoch 5: {'rouge1': 13.4628, 'rouge2': 6.4598, 'rougeL': 13.312, 'rougeLsum': 13.2913}
Epoch 6: {'rouge1': 12.9131, 'rouge2': 5.8914, 'rougeL': 12.6896, 'rougeLsum': 12.5701}
Epoch 7: {'rouge1': 13.3079, 'rouge2': 6.2994, 'rougeL': 13.1536, 'rougeLsum': 13.1194}
Epoch 8: {'rouge1': 13.96, 'rouge2': 6.5998, 'rougeL': 13.9123, 'rougeLsum': 13.7744}
Epoch 9: {'rouge1': 14.1192, 'rouge2': 7.0059, 'rougeL': 14.1172, 'rougeLsum': 13.9509}`,highlighted:`Epoch <span class="hljs-number">0</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">5.6351</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">1.1625</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">5.4866</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">5.5005</span>}
Epoch <span class="hljs-number">1</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">9.8646</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">3.4106</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">9.9439</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">9.9306</span>}
Epoch <span class="hljs-number">2</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">11.0872</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">3.3273</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">11.0508</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">10.9468</span>}
Epoch <span class="hljs-number">3</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">11.8587</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">4.8167</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">11.7986</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">11.7518</span>}
Epoch <span class="hljs-number">4</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">12.9842</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">5.5887</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">12.7546</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">12.7029</span>}
Epoch <span class="hljs-number">5</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">13.4628</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">6.4598</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">13.312</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">13.2913</span>}
Epoch <span class="hljs-number">6</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">12.9131</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">5.8914</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">12.6896</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">12.5701</span>}
Epoch <span class="hljs-number">7</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">13.3079</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">6.2994</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">13.1536</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">13.1194</span>}
Epoch <span class="hljs-number">8</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">13.96</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">6.5998</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">13.9123</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">13.7744</span>}
Epoch <span class="hljs-number">9</span>: {<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">14.1192</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">7.0059</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">14.1172</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">13.9509</span>}`}}),{c(){u=o("h2"),j=o("a"),d=o("span"),b(E.$$.fragment),C=h(),x=o("span"),A=a("Fine-tuning mT5 with \u{1F917} Accelerate"),P=h(),T=o("p"),S=a("Fine-tuning our model with \u{1F917} Accelerate is very similar to the text classification example we encountered in "),I=o("a"),D=a("Chapter 3"),O=a(". The main differences will be the need to explicitly generate our summaries during training and define how we compute the ROUGE scores (recall that the "),G=o("code"),J=a("Seq2SeqTrainer"),X=a(" took care of the generation for us). Let\u2019s take a look how we can implement these two requirements within \u{1F917} Accelerate!"),Q=h(),W=o("h3"),Z=o("a"),L=o("span"),b(U.$$.fragment),te=h(),F=o("span"),B=a("Preparing everything for training"),ne=h(),M=o("p"),le=a("The first thing we need to do is create a "),Y=o("code"),oe=a("DataLoader"),fe=a(" for each of our splits. Since the PyTorch dataloaders expect batches of tensors, we need to set the format to "),we=o("code"),Ee=a('"torch"'),H=a(" in our datasets:"),ye=h(),b(ue.$$.fragment),ee=h(),ke=o("p"),$e=a("Now that we\u2019ve got datasets consisting of just tensors, the next thing to do is instantiate the "),re=o("code"),De=a("DataCollatorForSeq2Seq"),ge=a(" again. For this we need to provide a fresh version of the model, so let\u2019s load it again from our cache:"),me=h(),b(w.$$.fragment),R=h(),he=o("p"),$=a("We can then instantiate the data collator and use this to define our dataloaders:"),K=h(),b(Te.$$.fragment),_e=h(),de=o("p"),Ae=a("The next thing to do is define the optimizer we want to use. As in our other examples, we\u2019ll use "),ae=o("code"),Ne=a("AdamW"),ns=a(", which works well for most problems:"),He=h(),b(se.$$.fragment),Be=h(),je=o("p"),ks=a("Finally, we feed our model, optimizer, and dataloaders to the "),ce=o("code"),gs=a("accelerator.prepare()"),_s=a(" method:"),$s=h(),b(Ue.$$.fragment),os=h(),b(es.$$.fragment),rs=h(),Ke=o("p"),Vs=a("Now that we\u2019ve prepared our objects, there are three remaining things to do:"),ls=h(),Se=o("ul"),ws=o("li"),js=a("Define the learning rate schedule."),Me=h(),is=o("li"),N=a("Implement a function to post-process the summaries for evaluation."),ie=h(),xs=o("li"),wt=a("Create a repository on the Hub that we can push our model to."),be=h(),We=o("p"),Ys=a("For the learning rate schedule, we\u2019ll use the standard linear one from previous sections:"),ss=h(),b(ts.$$.fragment),Ve=h(),ps=o("p"),pe=a("For post-processing, we need a function that splits the generated summaries into sentences that are separated by newlines. This is the format the ROUGE metric expects, and we can achieve this with the following snippet of code:"),Js=h(),b(Ye.$$.fragment),Xs=h(),Le=o("p"),Es=a("This should look familiar to you if you recall how we defined the "),Ts=o("code"),bt=a("compute_metrics()"),qe=a(" function of the "),Je=o("code"),Qs=a("Seq2SeqTrainer"),ms=a("."),qs=h(),ve=o("p"),rn=a("Finally, we need to create a model repository on the Hugging Face Hub. For this, we can use the appropriately titled \u{1F917} Hub library. We just need to define a name for our repository, and the library has a utility function to combine the repository ID with the user profile:"),vt=h(),b(Zs.$$.fragment),ga=h(),b(bs.$$.fragment),_a=h(),yt=o("p"),kt=a("Now we can use this repository name to clone a local version to our results directory that will store the training artifacts:"),wa=h(),b(et.$$.fragment),$t=h(),zs=o("p"),ln=a("This will allow us to push the artifacts back to the Hub by calling the "),jt=o("code"),st=a("repo.push_to_hub()"),ba=a(" method during training! Let\u2019s now wrap up our analysis by writing out the training loop."),ze=h(),vs=o("h3"),hs=o("a"),Mt=o("span"),b(tt.$$.fragment),Wt=h(),Bt=o("span"),pn=a("Training loop"),xt=h(),Et=o("p"),mn=a("The training loop for summarization is quite similar to the other \u{1F917} Accelerate examples that we\u2019ve encountered and is roughly split into four main steps:"),Tt=h(),Xe=o("ol"),at=o("li"),Kt=a("Train the model by iterating over all the examples in "),Vt=o("code"),hn=a("train_dataloader"),va=a(" for each epoch."),nt=h(),qt=o("li"),zt=a("Generate model summaries at the end of each epoch, by first generating the tokens and then decoding them (and the reference summaries) into text."),cn=h(),Dt=o("li"),ot=a("Compute the ROUGE scores using the same techniques we saw earlier."),ya=h(),Oe=o("li"),ka=a("Save the checkpoints and push everything to the Hub. Here we rely on the nifty "),Ie=o("code"),un=a("blocking=False"),Yt=a(" argument of the "),Jt=o("code"),dn=a("Repository"),Xt=a(" object so that we can push the checkpoints per epoch "),Qt=o("em"),fn=a("asynchronously"),Zt=a(". This allows us to continue training without having to wait for the somewhat slow upload associated with a GB-sized model!"),$a=h(),St=o("p"),ja=a("These steps can be seen in the following block of code:"),Ds=h(),b(Ss.$$.fragment),As=h(),b(Os.$$.fragment),rt=h(),Cs=o("p"),xa=a("And that\u2019s it! Once you run this, you\u2019ll have a model and results that are pretty similar to the ones we obtained with the "),as=o("code"),lt=a("Trainer"),$o=a("."),this.h()},l(m){u=r(m,"H2",{class:!0});var q=l(u);j=r(q,"A",{id:!0,class:!0,href:!0});var gn=l(j);d=r(gn,"SPAN",{});var it=l(d);v(E.$$.fragment,it),it.forEach(t),gn.forEach(t),C=c(q),x=r(q,"SPAN",{});var jo=l(x);A=n(jo,"Fine-tuning mT5 with \u{1F917} Accelerate"),jo.forEach(t),q.forEach(t),P=c(m),T=r(m,"P",{});var Ps=l(T);S=n(Ps,"Fine-tuning our model with \u{1F917} Accelerate is very similar to the text classification example we encountered in "),I=r(Ps,"A",{href:!0});var xo=l(I);D=n(xo,"Chapter 3"),xo.forEach(t),O=n(Ps,". The main differences will be the need to explicitly generate our summaries during training and define how we compute the ROUGE scores (recall that the "),G=r(Ps,"CODE",{});var Eo=l(G);J=n(Eo,"Seq2SeqTrainer"),Eo.forEach(t),X=n(Ps," took care of the generation for us). Let\u2019s take a look how we can implement these two requirements within \u{1F917} Accelerate!"),Ps.forEach(t),Q=c(m),W=r(m,"H3",{class:!0});var ea=l(W);Z=r(ea,"A",{id:!0,class:!0,href:!0});var At=l(Z);L=r(At,"SPAN",{});var _n=l(L);v(U.$$.fragment,_n),_n.forEach(t),At.forEach(t),te=c(ea),F=r(ea,"SPAN",{});var sa=l(F);B=n(sa,"Preparing everything for training"),sa.forEach(t),ea.forEach(t),ne=c(m),M=r(m,"P",{});var Ot=l(M);le=n(Ot,"The first thing we need to do is create a "),Y=r(Ot,"CODE",{});var wn=l(Y);oe=n(wn,"DataLoader"),wn.forEach(t),fe=n(Ot," for each of our splits. Since the PyTorch dataloaders expect batches of tensors, we need to set the format to "),we=r(Ot,"CODE",{});var Ls=l(we);Ee=n(Ls,'"torch"'),Ls.forEach(t),H=n(Ot," in our datasets:"),Ot.forEach(t),ye=c(m),v(ue.$$.fragment,m),ee=c(m),ke=r(m,"P",{});var ys=l(ke);$e=n(ys,"Now that we\u2019ve got datasets consisting of just tensors, the next thing to do is instantiate the "),re=r(ys,"CODE",{});var Ta=l(re);De=n(Ta,"DataCollatorForSeq2Seq"),Ta.forEach(t),ge=n(ys," again. For this we need to provide a fresh version of the model, so let\u2019s load it again from our cache:"),ys.forEach(t),me=c(m),v(w.$$.fragment,m),R=c(m),he=r(m,"P",{});var Ct=l(he);$=n(Ct,"We can then instantiate the data collator and use this to define our dataloaders:"),Ct.forEach(t),K=c(m),v(Te.$$.fragment,m),_e=c(m),de=r(m,"P",{});var qa=l(de);Ae=n(qa,"The next thing to do is define the optimizer we want to use. As in our other examples, we\u2019ll use "),ae=r(qa,"CODE",{});var za=l(ae);Ne=n(za,"AdamW"),za.forEach(t),ns=n(qa,", which works well for most problems:"),qa.forEach(t),He=c(m),v(se.$$.fragment,m),Be=c(m),je=r(m,"P",{});var Da=l(je);ks=n(Da,"Finally, we feed our model, optimizer, and dataloaders to the "),ce=r(Da,"CODE",{});var bn=l(ce);gs=n(bn,"accelerator.prepare()"),bn.forEach(t),_s=n(Da," method:"),Da.forEach(t),$s=c(m),v(Ue.$$.fragment,m),os=c(m),v(es.$$.fragment,m),rs=c(m),Ke=r(m,"P",{});var pt=l(Ke);Vs=n(pt,"Now that we\u2019ve prepared our objects, there are three remaining things to do:"),pt.forEach(t),ls=c(m),Se=r(m,"UL",{});var Pt=l(Se);ws=r(Pt,"LI",{});var ta=l(ws);js=n(ta,"Define the learning rate schedule."),ta.forEach(t),Me=c(Pt),is=r(Pt,"LI",{});var To=l(is);N=n(To,"Implement a function to post-process the summaries for evaluation."),To.forEach(t),ie=c(Pt),xs=r(Pt,"LI",{});var qo=l(xs);wt=n(qo,"Create a repository on the Hub that we can push our model to."),qo.forEach(t),Pt.forEach(t),be=c(m),We=r(m,"P",{});var vn=l(We);Ys=n(vn,"For the learning rate schedule, we\u2019ll use the standard linear one from previous sections:"),vn.forEach(t),ss=c(m),v(ts.$$.fragment,m),Ve=c(m),ps=r(m,"P",{});var mt=l(ps);pe=n(mt,"For post-processing, we need a function that splits the generated summaries into sentences that are separated by newlines. This is the format the ROUGE metric expects, and we can achieve this with the following snippet of code:"),mt.forEach(t),Js=c(m),v(Ye.$$.fragment,m),Xs=c(m),Le=r(m,"P",{});var Is=l(Le);Es=n(Is,"This should look familiar to you if you recall how we defined the "),Ts=r(Is,"CODE",{});var Rs=l(Ts);bt=n(Rs,"compute_metrics()"),Rs.forEach(t),qe=n(Is," function of the "),Je=r(Is,"CODE",{});var aa=l(Je);Qs=n(aa,"Seq2SeqTrainer"),aa.forEach(t),ms=n(Is,"."),Is.forEach(t),qs=c(m),ve=r(m,"P",{});var zo=l(ve);rn=n(zo,"Finally, we need to create a model repository on the Hugging Face Hub. For this, we can use the appropriately titled \u{1F917} Hub library. We just need to define a name for our repository, and the library has a utility function to combine the repository ID with the user profile:"),zo.forEach(t),vt=c(m),v(Zs.$$.fragment,m),ga=c(m),v(bs.$$.fragment,m),_a=c(m),yt=r(m,"P",{});var Do=l(yt);kt=n(Do,"Now we can use this repository name to clone a local version to our results directory that will store the training artifacts:"),Do.forEach(t),wa=c(m),v(et.$$.fragment,m),$t=c(m),zs=r(m,"P",{});var Lt=l(zs);ln=n(Lt,"This will allow us to push the artifacts back to the Hub by calling the "),jt=r(Lt,"CODE",{});var So=l(jt);st=n(So,"repo.push_to_hub()"),So.forEach(t),ba=n(Lt," method during training! Let\u2019s now wrap up our analysis by writing out the training loop."),Lt.forEach(t),ze=c(m),vs=r(m,"H3",{class:!0});var Sa=l(vs);hs=r(Sa,"A",{id:!0,class:!0,href:!0});var na=l(hs);Mt=r(na,"SPAN",{});var Ao=l(Mt);v(tt.$$.fragment,Ao),Ao.forEach(t),na.forEach(t),Wt=c(Sa),Bt=r(Sa,"SPAN",{});var Oo=l(Bt);pn=n(Oo,"Training loop"),Oo.forEach(t),Sa.forEach(t),xt=c(m),Et=r(m,"P",{});var Re=l(Et);mn=n(Re,"The training loop for summarization is quite similar to the other \u{1F917} Accelerate examples that we\u2019ve encountered and is roughly split into four main steps:"),Re.forEach(t),Tt=c(m),Xe=r(m,"OL",{});var Fe=l(Xe);at=r(Fe,"LI",{});var ht=l(at);Kt=n(ht,"Train the model by iterating over all the examples in "),Vt=r(ht,"CODE",{});var It=l(Vt);hn=n(It,"train_dataloader"),It.forEach(t),va=n(ht," for each epoch."),ht.forEach(t),nt=c(Fe),qt=r(Fe,"LI",{});var Co=l(qt);zt=n(Co,"Generate model summaries at the end of each epoch, by first generating the tokens and then decoding them (and the reference summaries) into text."),Co.forEach(t),cn=c(Fe),Dt=r(Fe,"LI",{});var Po=l(Dt);ot=n(Po,"Compute the ROUGE scores using the same techniques we saw earlier."),Po.forEach(t),ya=c(Fe),Oe=r(Fe,"LI",{});var cs=l(Oe);ka=n(cs,"Save the checkpoints and push everything to the Hub. Here we rely on the nifty "),Ie=r(cs,"CODE",{});var Lo=l(Ie);un=n(Lo,"blocking=False"),Lo.forEach(t),Yt=n(cs," argument of the "),Jt=r(cs,"CODE",{});var Io=l(Jt);dn=n(Io,"Repository"),Io.forEach(t),Xt=n(cs," object so that we can push the checkpoints per epoch "),Qt=r(cs,"EM",{});var oa=l(Qt);fn=n(oa,"asynchronously"),oa.forEach(t),Zt=n(cs,". This allows us to continue training without having to wait for the somewhat slow upload associated with a GB-sized model!"),cs.forEach(t),Fe.forEach(t),$a=c(m),St=r(m,"P",{});var Ro=l(St);ja=n(Ro,"These steps can be seen in the following block of code:"),Ro.forEach(t),Ds=c(m),v(Ss.$$.fragment,m),As=c(m),v(Os.$$.fragment,m),rt=c(m),Cs=r(m,"P",{});var Aa=l(Cs);xa=n(Aa,"And that\u2019s it! Once you run this, you\u2019ll have a model and results that are pretty similar to the ones we obtained with the "),as=r(Aa,"CODE",{});var Fs=l(as);lt=n(Fs,"Trainer"),Fs.forEach(t),$o=n(Aa,"."),Aa.forEach(t),this.h()},h(){f(j,"id","finetuning-mt5-with-accelerate"),f(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(j,"href","#finetuning-mt5-with-accelerate"),f(u,"class","relative group"),f(I,"href","/course/chapter3"),f(Z,"id","preparing-everything-for-training"),f(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Z,"href","#preparing-everything-for-training"),f(W,"class","relative group"),f(hs,"id","training-loop"),f(hs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(hs,"href","#training-loop"),f(vs,"class","relative group")},m(m,q){i(m,u,q),s(u,j),s(j,d),y(E,d,null),s(u,C),s(u,x),s(x,A),i(m,P,q),i(m,T,q),s(T,S),s(T,I),s(I,D),s(T,O),s(T,G),s(G,J),s(T,X),i(m,Q,q),i(m,W,q),s(W,Z),s(Z,L),y(U,L,null),s(W,te),s(W,F),s(F,B),i(m,ne,q),i(m,M,q),s(M,le),s(M,Y),s(Y,oe),s(M,fe),s(M,we),s(we,Ee),s(M,H),i(m,ye,q),y(ue,m,q),i(m,ee,q),i(m,ke,q),s(ke,$e),s(ke,re),s(re,De),s(ke,ge),i(m,me,q),y(w,m,q),i(m,R,q),i(m,he,q),s(he,$),i(m,K,q),y(Te,m,q),i(m,_e,q),i(m,de,q),s(de,Ae),s(de,ae),s(ae,Ne),s(de,ns),i(m,He,q),y(se,m,q),i(m,Be,q),i(m,je,q),s(je,ks),s(je,ce),s(ce,gs),s(je,_s),i(m,$s,q),y(Ue,m,q),i(m,os,q),y(es,m,q),i(m,rs,q),i(m,Ke,q),s(Ke,Vs),i(m,ls,q),i(m,Se,q),s(Se,ws),s(ws,js),s(Se,Me),s(Se,is),s(is,N),s(Se,ie),s(Se,xs),s(xs,wt),i(m,be,q),i(m,We,q),s(We,Ys),i(m,ss,q),y(ts,m,q),i(m,Ve,q),i(m,ps,q),s(ps,pe),i(m,Js,q),y(Ye,m,q),i(m,Xs,q),i(m,Le,q),s(Le,Es),s(Le,Ts),s(Ts,bt),s(Le,qe),s(Le,Je),s(Je,Qs),s(Le,ms),i(m,qs,q),i(m,ve,q),s(ve,rn),i(m,vt,q),y(Zs,m,q),i(m,ga,q),y(bs,m,q),i(m,_a,q),i(m,yt,q),s(yt,kt),i(m,wa,q),y(et,m,q),i(m,$t,q),i(m,zs,q),s(zs,ln),s(zs,jt),s(jt,st),s(zs,ba),i(m,ze,q),i(m,vs,q),s(vs,hs),s(hs,Mt),y(tt,Mt,null),s(vs,Wt),s(vs,Bt),s(Bt,pn),i(m,xt,q),i(m,Et,q),s(Et,mn),i(m,Tt,q),i(m,Xe,q),s(Xe,at),s(at,Kt),s(at,Vt),s(Vt,hn),s(at,va),s(Xe,nt),s(Xe,qt),s(qt,zt),s(Xe,cn),s(Xe,Dt),s(Dt,ot),s(Xe,ya),s(Xe,Oe),s(Oe,ka),s(Oe,Ie),s(Ie,un),s(Oe,Yt),s(Oe,Jt),s(Jt,dn),s(Oe,Xt),s(Oe,Qt),s(Qt,fn),s(Oe,Zt),i(m,$a,q),i(m,St,q),s(St,ja),i(m,Ds,q),y(Ss,m,q),i(m,As,q),y(Os,m,q),i(m,rt,q),i(m,Cs,q),s(Cs,xa),s(Cs,as),s(as,lt),s(Cs,$o),Ea=!0},i(m){Ea||(g(E.$$.fragment,m),g(U.$$.fragment,m),g(ue.$$.fragment,m),g(w.$$.fragment,m),g(Te.$$.fragment,m),g(se.$$.fragment,m),g(Ue.$$.fragment,m),g(es.$$.fragment,m),g(ts.$$.fragment,m),g(Ye.$$.fragment,m),g(Zs.$$.fragment,m),g(bs.$$.fragment,m),g(et.$$.fragment,m),g(tt.$$.fragment,m),g(Ss.$$.fragment,m),g(Os.$$.fragment,m),Ea=!0)},o(m){_(E.$$.fragment,m),_(U.$$.fragment,m),_(ue.$$.fragment,m),_(w.$$.fragment,m),_(Te.$$.fragment,m),_(se.$$.fragment,m),_(Ue.$$.fragment,m),_(es.$$.fragment,m),_(ts.$$.fragment,m),_(Ye.$$.fragment,m),_(Zs.$$.fragment,m),_(bs.$$.fragment,m),_(et.$$.fragment,m),_(tt.$$.fragment,m),_(Ss.$$.fragment,m),_(Os.$$.fragment,m),Ea=!1},d(m){m&&t(u),k(E),m&&t(P),m&&t(T),m&&t(Q),m&&t(W),k(U),m&&t(ne),m&&t(M),m&&t(ye),k(ue,m),m&&t(ee),m&&t(ke),m&&t(me),k(w,m),m&&t(R),m&&t(he),m&&t(K),k(Te,m),m&&t(_e),m&&t(de),m&&t(He),k(se,m),m&&t(Be),m&&t(je),m&&t($s),k(Ue,m),m&&t(os),k(es,m),m&&t(rs),m&&t(Ke),m&&t(ls),m&&t(Se),m&&t(be),m&&t(We),m&&t(ss),k(ts,m),m&&t(Ve),m&&t(ps),m&&t(Js),k(Ye,m),m&&t(Xs),m&&t(Le),m&&t(qs),m&&t(ve),m&&t(vt),k(Zs,m),m&&t(ga),k(bs,m),m&&t(_a),m&&t(yt),m&&t(wa),k(et,m),m&&t($t),m&&t(zs),m&&t(ze),m&&t(vs),k(tt),m&&t(xt),m&&t(Et),m&&t(Tt),m&&t(Xe),m&&t($a),m&&t(St),m&&t(Ds),k(Ss,m),m&&t(As),k(Os,m),m&&t(rt),m&&t(Cs)}}}function Hg(V){let u,j,d,E,C;return{c(){u=o("p"),j=a("\u{1F6A8} If you\u2019re training on a TPU, you\u2019ll need to move all the code above into a dedicated training function. See "),d=o("a"),E=a("Chapter 3"),C=a(" for more details."),this.h()},l(x){u=r(x,"P",{});var A=l(u);j=n(A,"\u{1F6A8} If you\u2019re training on a TPU, you\u2019ll need to move all the code above into a dedicated training function. See "),d=r(A,"A",{href:!0});var P=l(d);E=n(P,"Chapter 3"),P.forEach(t),C=n(A," for more details."),A.forEach(t),this.h()},h(){f(d,"href","/course/chapter3")},m(x,A){i(x,u,A),s(u,j),s(u,d),s(d,E),s(u,C)},d(x){x&&t(u)}}}function Ug(V){let u,j,d,E,C,x,A,P,T,S,I,D,O,G,J,X,Q,W,Z,L,U,te,F,B,ne,M,le,Y,oe,fe,we,Ee,H,ye,ue,ee,ke,$e,re,De,ge,me,w,R,he,$,K,Te,_e,de,Ae,ae,Ne,ns,He,se,Be,je,ks,ce,gs,_s,$s,Ue,os,es,rs,Ke,Vs,ls,Se,ws,js,Me,is,N,ie,xs,wt,be,We,Ys,ss,ts,Ve,ps,pe,Js,Ye,Xs,Le,Es,Ts,bt,qe,Je,Qs,ms,qs,ve,rn,vt,Zs,ga,bs,_a,yt,kt,wa,et,$t,zs,ln,jt,st,ba,ze,vs,hs,Mt,tt,Wt,Bt,pn,xt,Et,mn,Tt,Xe,at,Kt,Vt,hn,va,nt,qt,zt,cn,Dt,ot,ya,Oe,ka,Ie,un,Yt,Jt,dn,Xt,Qt,fn,Zt,$a,St,ja,Ds,Ss,As,Os,rt,Cs,xa,as,lt,$o,Ea,m,q,gn,it,jo,Ps,xo,Eo,ea,At,_n,sa,Ot,wn,Ls,ys,Ta,Ct,qa,za,Da,bn,pt,Pt,ta,To,qo,vn,mt,Is,Rs,aa,zo,Do,Lt,So,Sa,na,Ao,Oo,Re,Fe,ht,It,Co,Po,cs,Lo,Io,oa,Ro,Aa,Fs,Fo,yn,Zp,em,Ir,sm,tm,Go,am,nm,ra,No,kn,om,rm,$n,lm,Rr,im,pm,mm,Ho,hm,cm,la,Uo,jn,um,dm,Fr,fm,gm,Mo,_m,wm,ia,Wo,xn,bm,vm,Gr,ym,km,Bo,$m,jm,pa,Ko,En,xm,Em,Nr,Tm,qm,Vo,zm,Yl,Yo,Dm,Jl,Oa,Sm,Hr,Am,Om,Xl,ma,Tn,xu,Cm,qn,Eu,Ql,Jo,Pm,Zl,Ca,ei,ha,Pa,Ur,zn,Lm,Mr,Im,si,Dn,ti,La,Rm,Wr,Fm,Gm,ai,Sn,ni,Ia,oi,Xo,Nm,ri,An,li,On,ii,us,Hm,Br,Um,Mm,Kr,Wm,Bm,Qo,Km,Vm,Vr,Ym,Jm,pi,Cn,mi,Pn,hi,Gs,Xm,Yr,Qm,Zm,Jr,eh,sh,Zo,th,ah,ci,Ra,nh,Xr,oh,rh,ui,Ln,di,ds,lh,Qr,ih,ph,Zr,mh,hh,el,ch,uh,sl,dh,fh,fi,Rt,gh,tl,_h,wh,al,bh,vh,gi,In,_i,er,yh,wi,Fa,bi,ca,Ga,nl,Rn,kh,ol,$h,vi,Fn,yi,sr,jh,ki,Na,xh,Gn,Eh,Th,$i,Nn,ji,Ft,qh,rl,zh,Dh,ll,Sh,Ah,xi,Ha,Ei,Hn,Oh,Ti,bg='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">l</mi></mrow><mo>=</mo><mfrac><mrow><mi mathvariant="normal">N</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mtext>\u2009</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mtext>\u2009</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">v</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">p</mi><mi mathvariant="normal">p</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">g</mi><mtext>\u2009</mtext><mi mathvariant="normal">w</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">d</mi><mi mathvariant="normal">s</mi></mrow><mrow><mi mathvariant="normal">T</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi><mtext>\u2009</mtext><mi mathvariant="normal">n</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mtext>\u2009</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mtext>\u2009</mtext><mi mathvariant="normal">w</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">d</mi><mi mathvariant="normal">s</mi><mtext>\u2009</mtext><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mtext>\u2009</mtext><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">e</mi><mtext>\u2009</mtext><mi mathvariant="normal">s</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex"> \\mathrm{Recall} = \\frac{\\mathrm{Number\\,of\\,overlapping\\, words}}{\\mathrm{Total\\, number\\, of\\, words\\, in\\, reference\\, summary}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">Recall</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2519em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">Total</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">number</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.07778em;">of</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">words</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">in</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">reference</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.01389em;">summary</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">Number</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.07778em;">of</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.01389em;">overlapping</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">words</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>',qi,Un,Ch,zi,vg='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">P</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">n</mi></mrow><mo>=</mo><mfrac><mrow><mi mathvariant="normal">N</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mtext>\u2009</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mtext>\u2009</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">v</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">l</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">p</mi><mi mathvariant="normal">p</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">g</mi><mtext>\u2009</mtext><mi mathvariant="normal">w</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">d</mi><mi mathvariant="normal">s</mi></mrow><mrow><mi mathvariant="normal">T</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi><mtext>\u2009</mtext><mi mathvariant="normal">n</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mtext>\u2009</mtext><mi mathvariant="normal">o</mi><mi mathvariant="normal">f</mi><mtext>\u2009</mtext><mi mathvariant="normal">w</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">d</mi><mi mathvariant="normal">s</mi><mtext>\u2009</mtext><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mtext>\u2009</mtext><mi mathvariant="normal">g</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">d</mi><mtext>\u2009</mtext><mi mathvariant="normal">s</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex"> \\mathrm{Precision} = \\frac{\\mathrm{Number\\,of\\,overlapping\\, words}}{\\mathrm{Total\\, number\\, of\\, words\\, in\\, generated\\, summary}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathrm">Precision</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2519em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">Total</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">number</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.07778em;">of</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">words</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">in</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">generated</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.01389em;">summary</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">Number</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.07778em;">of</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm" style="margin-right:0.01389em;">overlapping</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">words</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>',Di,Ua,Ph,il,Lh,Ih,Si,Mn,Ai,tr,Rh,Oi,Wn,Ci,Ma,Fh,pl,Gh,Nh,Pi,Bn,Li,Kn,Ii,Qe,Hh,ml,Uh,Mh,hl,Wh,Bh,cl,Kh,Vh,ul,Yh,Jh,dl,Xh,Qh,Ri,Vn,Fi,Yn,Gi,Ze,Zh,fl,ec,sc,gl,tc,ac,_l,nc,oc,wl,rc,lc,bl,ic,pc,Ni,Wa,Hi,ar,mc,Ui,ua,Ba,vl,Jn,hc,yl,cc,Mi,Ns,uc,kl,dc,fc,$l,gc,_c,jl,wc,bc,Wi,Xn,Bi,nr,vc,Ki,Qn,Vi,Ka,yc,xl,kc,$c,Yi,Zn,Ji,eo,Xi,or,jc,Qi,so,Zi,rr,xc,ep,to,sp,ao,tp,Va,Ec,El,Tc,qc,ap,ct,ut,lr,Ya,np,ir,zc,op,no,rp,pr,Dc,lp,oo,ip,mr,Ja,Sc,hr,Ac,Oc,pp,Hs,Cc,Tl,Pc,Lc,ql,Ic,Rc,zl,Fc,Gc,mp,dt,ft,cr,ur,Nc,hp,ro,cp,Gt,Hc,Dl,Uc,Mc,Sl,Wc,Bc,up,lo,dp,io,fp,xe,Kc,Al,Vc,Yc,Ol,Jc,Xc,Cl,Qc,Zc,Pl,eu,su,Ll,tu,au,Il,nu,ou,Rl,ru,lu,Fl,iu,pu,gp,gt,_t,dr,fr,da,Xa,Gl,po,mu,Nl,hu,_p,Qa,cu,Hl,uu,du,wp,mo,bp,gr,fu,vp,ho,yp,_r,gu,kp,co,$p,uo,jp,Za,_u,Ul,wu,bu,xp,fo,Ep,go,Tp,wr,vu,qp,br,yu,zp;d=new Eg({props:{fw:V[0]}}),P=new Ks({});const Tu=[qg,Tg],_o=[];function qu(e,p){return e[0]==="pt"?0:1}O=qu(V),G=_o[O]=Tu[O](V),te=new ju({props:{id:"yHnr5Dk2zCI"}}),he=new Ks({}),se=new z({props:{code:`from datasets import load_dataset

spanish_dataset = load_dataset("amazon_reviews_multi", "es")
english_dataset = load_dataset("amazon_reviews_multi", "en")
english_dataset`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

spanish_dataset = load_dataset(<span class="hljs-string">&quot;amazon_reviews_multi&quot;</span>, <span class="hljs-string">&quot;es&quot;</span>)
english_dataset = load_dataset(<span class="hljs-string">&quot;amazon_reviews_multi&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>)
english_dataset`}}),je=new z({props:{code:`DatasetDict({
    train: Dataset({
        features: ['review_id', 'product_id', 'reviewer_id', 'stars', 'review_body', 'review_title', 'language', 'product_category'],
        num_rows: 200000
    })
    validation: Dataset({
        features: ['review_id', 'product_id', 'reviewer_id', 'stars', 'review_body', 'review_title', 'language', 'product_category'],
        num_rows: 5000
    })
    test: Dataset({
        features: ['review_id', 'product_id', 'reviewer_id', 'stars', 'review_body', 'review_title', 'language', 'product_category'],
        num_rows: 5000
    })
})`,highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;review_id&#x27;</span>, <span class="hljs-string">&#x27;product_id&#x27;</span>, <span class="hljs-string">&#x27;reviewer_id&#x27;</span>, <span class="hljs-string">&#x27;stars&#x27;</span>, <span class="hljs-string">&#x27;review_body&#x27;</span>, <span class="hljs-string">&#x27;review_title&#x27;</span>, <span class="hljs-string">&#x27;language&#x27;</span>, <span class="hljs-string">&#x27;product_category&#x27;</span>],
        num_rows: <span class="hljs-number">200000</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;review_id&#x27;</span>, <span class="hljs-string">&#x27;product_id&#x27;</span>, <span class="hljs-string">&#x27;reviewer_id&#x27;</span>, <span class="hljs-string">&#x27;stars&#x27;</span>, <span class="hljs-string">&#x27;review_body&#x27;</span>, <span class="hljs-string">&#x27;review_title&#x27;</span>, <span class="hljs-string">&#x27;language&#x27;</span>, <span class="hljs-string">&#x27;product_category&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;review_id&#x27;</span>, <span class="hljs-string">&#x27;product_id&#x27;</span>, <span class="hljs-string">&#x27;reviewer_id&#x27;</span>, <span class="hljs-string">&#x27;stars&#x27;</span>, <span class="hljs-string">&#x27;review_body&#x27;</span>, <span class="hljs-string">&#x27;review_title&#x27;</span>, <span class="hljs-string">&#x27;language&#x27;</span>, <span class="hljs-string">&#x27;product_category&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
})`}}),We=new z({props:{code:`def show_samples(dataset, num_samples=3, seed=42):
    sample = dataset["train"].shuffle(seed=seed).select(range(num_samples))
    for example in sample:
        print(f"\\n'>> Title: {example['review_title']}'")
        print(f"'>> Review: {example['review_body']}'")


show_samples(english_dataset)`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">show_samples</span>(<span class="hljs-params">dataset, num_samples=<span class="hljs-number">3</span>, seed=<span class="hljs-number">42</span></span>):
    sample = dataset[<span class="hljs-string">&quot;train&quot;</span>].shuffle(seed=seed).select(<span class="hljs-built_in">range</span>(num_samples))
    <span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> sample:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\\n&#x27;&gt;&gt; Title: <span class="hljs-subst">{example[<span class="hljs-string">&#x27;review_title&#x27;</span>]}</span>&#x27;&quot;</span>)
        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;&#x27;&gt;&gt; Review: <span class="hljs-subst">{example[<span class="hljs-string">&#x27;review_body&#x27;</span>]}</span>&#x27;&quot;</span>)


show_samples(english_dataset)`}}),ss=new z({props:{code:`'>> Title: Worked in front position, not rear'
'>> Review: 3 stars because these are not rear brakes as stated in the item description. At least the mount adapter only worked on the front fork of the bike that I got it for.'

'>> Title: meh'
'>> Review: Does it\u2019s job and it\u2019s gorgeous but mine is falling apart, I had to basically put it together again with hot glue'

'>> Title: Can\\'t beat these for the money'
'>> Review: Bought this for handling miscellaneous aircraft parts and hanger "stuff" that I needed to organize; it really fit the bill. The unit arrived quickly, was well packaged and arrived intact (always a good sign). There are five wall mounts-- three on the top and two on the bottom. I wanted to mount it on the wall, so all I had to do was to remove the top two layers of plastic drawers, as well as the bottom corner drawers, place it when I wanted and mark it; I then used some of the new plastic screw in wall anchors (the 50 pound variety) and it easily mounted to the wall. Some have remarked that they wanted dividers for the drawers, and that they made those. Good idea. My application was that I needed something that I can see the contents at about eye level, so I wanted the fuller-sized drawers. I also like that these are the new plastic that doesn\\'t get brittle and split like my older plastic drawers did. I like the all-plastic construction. It\\'s heavy duty enough to hold metal parts, but being made of plastic it\\'s not as heavy as a metal frame, so you can easily mount it to the wall and still load it up with heavy stuff, or light stuff. No problem there. For the money, you can\\'t beat it. Best one of these I\\'ve bought to date-- and I\\'ve been using some version of these for over forty years.'`,highlighted:`<span class="hljs-string">&#x27;&gt;&gt; Title: Worked in front position, not rear&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: 3 stars because these are not rear brakes as stated in the item description. At least the mount adapter only worked on the front fork of the bike that I got it for.&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt; Title: meh&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: Does it\u2019s job and it\u2019s gorgeous but mine is falling apart, I had to basically put it together again with hot glue&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt; Title: Can\\&#x27;t beat these for the money&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: Bought this for handling miscellaneous aircraft parts and hanger &quot;stuff&quot; that I needed to organize; it really fit the bill. The unit arrived quickly, was well packaged and arrived intact (always a good sign). There are five wall mounts-- three on the top and two on the bottom. I wanted to mount it on the wall, so all I had to do was to remove the top two layers of plastic drawers, as well as the bottom corner drawers, place it when I wanted and mark it; I then used some of the new plastic screw in wall anchors (the 50 pound variety) and it easily mounted to the wall. Some have remarked that they wanted dividers for the drawers, and that they made those. Good idea. My application was that I needed something that I can see the contents at about eye level, so I wanted the fuller-sized drawers. I also like that these are the new plastic that doesn\\&#x27;t get brittle and split like my older plastic drawers did. I like the all-plastic construction. It\\&#x27;s heavy duty enough to hold metal parts, but being made of plastic it\\&#x27;s not as heavy as a metal frame, so you can easily mount it to the wall and still load it up with heavy stuff, or light stuff. No problem there. For the money, you can\\&#x27;t beat it. Best one of these I\\&#x27;ve bought to date-- and I\\&#x27;ve been using some version of these for over forty years.&#x27;</span>`}}),Ve=new on({props:{$$slots:{default:[zg]},$$scope:{ctx:V}}}),Je=new z({props:{code:`english_dataset.set_format("pandas")
english_df = english_dataset["train"][:]
# Show counts for top 20 products
english_df["product_category"].value_counts()[:20]`,highlighted:`english_dataset.set_format(<span class="hljs-string">&quot;pandas&quot;</span>)
english_df = english_dataset[<span class="hljs-string">&quot;train&quot;</span>][:]
<span class="hljs-comment"># Show counts for top 20 products</span>
english_df[<span class="hljs-string">&quot;product_category&quot;</span>].value_counts()[:<span class="hljs-number">20</span>]`}}),ms=new z({props:{code:`home                      17679
apparel                   15951
wireless                  15717
other                     13418
beauty                    12091
drugstore                 11730
kitchen                   10382
toy                        8745
sports                     8277
automotive                 7506
lawn_and_garden            7327
home_improvement           7136
pet_products               7082
digital_ebook_purchase     6749
pc                         6401
electronics                6186
office_product             5521
shoes                      5197
grocery                    4730
book                       3756
Name: product_category, dtype: int64`,highlighted:`home                      <span class="hljs-number">17679</span>
apparel                   <span class="hljs-number">15951</span>
wireless                  <span class="hljs-number">15717</span>
other                     <span class="hljs-number">13418</span>
beauty                    <span class="hljs-number">12091</span>
drugstore                 <span class="hljs-number">11730</span>
kitchen                   <span class="hljs-number">10382</span>
toy                        <span class="hljs-number">8745</span>
sports                     <span class="hljs-number">8277</span>
automotive                 <span class="hljs-number">7506</span>
lawn_and_garden            <span class="hljs-number">7327</span>
home_improvement           <span class="hljs-number">7136</span>
pet_products               <span class="hljs-number">7082</span>
digital_ebook_purchase     <span class="hljs-number">6749</span>
pc                         <span class="hljs-number">6401</span>
electronics                <span class="hljs-number">6186</span>
office_product             <span class="hljs-number">5521</span>
shoes                      <span class="hljs-number">5197</span>
grocery                    <span class="hljs-number">4730</span>
book                       <span class="hljs-number">3756</span>
Name: product_category, dtype: int64`}}),st=new z({props:{code:`def filter_books(example):
    return (
        example["product_category"] == "book"
        or example["product_category"] == "digital_ebook_purchase"
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">filter_books</span>(<span class="hljs-params">example</span>):
    <span class="hljs-keyword">return</span> (
        example[<span class="hljs-string">&quot;product_category&quot;</span>] == <span class="hljs-string">&quot;book&quot;</span>
        <span class="hljs-keyword">or</span> example[<span class="hljs-string">&quot;product_category&quot;</span>] == <span class="hljs-string">&quot;digital_ebook_purchase&quot;</span>
    )`}}),nt=new z({props:{code:"english_dataset.reset_format()",highlighted:"english_dataset.reset_format()"}}),ot=new z({props:{code:`spanish_books = spanish_dataset.filter(filter_books)
english_books = english_dataset.filter(filter_books)
show_samples(english_books)`,highlighted:`spanish_books = spanish_dataset.<span class="hljs-built_in">filter</span>(filter_books)
english_books = english_dataset.<span class="hljs-built_in">filter</span>(filter_books)
show_samples(english_books)`}}),Oe=new z({props:{code:`'>> Title: I\\'m dissapointed.'
'>> Review: I guess I had higher expectations for this book from the reviews. I really thought I\\'d at least like it. The plot idea was great. I loved Ash but, it just didnt go anywhere. Most of the book was about their radio show and talking to callers. I wanted the author to dig deeper so we could really get to know the characters. All we know about Grace is that she is attractive looking, Latino and is kind of a brat. I\\'m dissapointed.'

'>> Title: Good art, good price, poor design'
'>> Review: I had gotten the DC Vintage calendar the past two years, but it was on backorder forever this year and I saw they had shrunk the dimensions for no good reason. This one has good art choices but the design has the fold going through the picture, so it\\'s less aesthetically pleasing, especially if you want to keep a picture to hang. For the price, a good calendar'

'>> Title: Helpful'
'>> Review: Nearly all the tips useful and. I consider myself an intermediate to advanced user of OneNote. I would highly recommend.'`,highlighted:`<span class="hljs-string">&#x27;&gt;&gt; Title: I\\&#x27;m dissapointed.&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: I guess I had higher expectations for this book from the reviews. I really thought I\\&#x27;d at least like it. The plot idea was great. I loved Ash but, it just didnt go anywhere. Most of the book was about their radio show and talking to callers. I wanted the author to dig deeper so we could really get to know the characters. All we know about Grace is that she is attractive looking, Latino and is kind of a brat. I\\&#x27;m dissapointed.&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt; Title: Good art, good price, poor design&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: I had gotten the DC Vintage calendar the past two years, but it was on backorder forever this year and I saw they had shrunk the dimensions for no good reason. This one has good art choices but the design has the fold going through the picture, so it\\&#x27;s less aesthetically pleasing, especially if you want to keep a picture to hang. For the price, a good calendar&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt; Title: Helpful&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: Nearly all the tips useful and. I consider myself an intermediate to advanced user of OneNote. I would highly recommend.&#x27;</span>`}}),Ds=new z({props:{code:`from datasets import concatenate_datasets, DatasetDict

books_dataset = DatasetDict()

for split in english_books.keys():
    books_dataset[split] = concatenate_datasets(
        [english_books[split], spanish_books[split]]
    )
    books_dataset[split] = books_dataset[split].shuffle(seed=42)

# Peek at a few examples
show_samples(books_dataset)`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> concatenate_datasets, DatasetDict

books_dataset = DatasetDict()

<span class="hljs-keyword">for</span> split <span class="hljs-keyword">in</span> english_books.keys():
    books_dataset[split] = concatenate_datasets(
        [english_books[split], spanish_books[split]]
    )
    books_dataset[split] = books_dataset[split].shuffle(seed=<span class="hljs-number">42</span>)

<span class="hljs-comment"># Peek at a few examples</span>
show_samples(books_dataset)`}}),As=new z({props:{code:`'>> Title: Easy to follow!!!!'
'>> Review: I loved The dash diet weight loss Solution. Never hungry. I would recommend this diet. Also the menus are well rounded. Try it. Has lots of the information need thanks.'

'>> Title: PARCIALMENTE DA\xD1ADO'
'>> Review: Me lleg\xF3 el d\xEDa que tocaba, junto a otros libros que ped\xED, pero la caja lleg\xF3 en mal estado lo cual da\xF1\xF3 las esquinas de los libros porque ven\xEDan sin protecci\xF3n (forro).'

'>> Title: no lo he podido descargar'
'>> Review: igual que el anterior'`,highlighted:`<span class="hljs-string">&#x27;&gt;&gt; Title: Easy to follow!!!!&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: I loved The dash diet weight loss Solution. Never hungry. I would recommend this diet. Also the menus are well rounded. Try it. Has lots of the information need thanks.&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt; Title: PARCIALMENTE DA\xD1ADO&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: Me lleg\xF3 el d\xEDa que tocaba, junto a otros libros que ped\xED, pero la caja lleg\xF3 en mal estado lo cual da\xF1\xF3 las esquinas de los libros porque ven\xEDan sin protecci\xF3n (forro).&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt; Title: no lo he podido descargar&#x27;</span>
<span class="hljs-string">&#x27;&gt;&gt; Review: igual que el anterior&#x27;</span>`}}),At=new z({props:{code:'books_dataset = books_dataset.filter(lambda x: len(x["review_title"].split()) > 2)',highlighted:'books_dataset = books_dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(x[<span class="hljs-string">&quot;review_title&quot;</span>].split()) &gt; <span class="hljs-number">2</span>)'}}),Ct=new Ks({}),Ca=new on({props:{$$slots:{default:[Dg]},$$scope:{ctx:V}}}),zn=new Ks({}),Dn=new ju({props:{id:"1m7BerpSq8A"}}),Sn=new z({props:{code:`from transformers import AutoTokenizer

model_checkpoint = "google/mt5-small"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

model_checkpoint = <span class="hljs-string">&quot;google/mt5-small&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)`}}),Ia=new on({props:{$$slots:{default:[Sg]},$$scope:{ctx:V}}}),An=new z({props:{code:`inputs = tokenizer("I loved reading the Hunger Games!")
inputs`,highlighted:`inputs = tokenizer(<span class="hljs-string">&quot;I loved reading the Hunger Games!&quot;</span>)
inputs`}}),On=new z({props:{code:"{'input_ids': [336, 259, 28387, 11807, 287, 62893, 295, 12507, 1], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1]}",highlighted:'{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">336</span>, <span class="hljs-number">259</span>, <span class="hljs-number">28387</span>, <span class="hljs-number">11807</span>, <span class="hljs-number">287</span>, <span class="hljs-number">62893</span>, <span class="hljs-number">295</span>, <span class="hljs-number">12507</span>, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}'}}),Cn=new z({props:{code:"tokenizer.convert_ids_to_tokens(inputs.input_ids)",highlighted:"tokenizer.convert_ids_to_tokens(inputs.input_ids)"}}),Pn=new z({props:{code:"['\u2581I', '\u2581', 'loved', '\u2581reading', '\u2581the', '\u2581Hung', 'er', '\u2581Games', '</s>']",highlighted:'[<span class="hljs-string">&#x27;\u2581I&#x27;</span>, <span class="hljs-string">&#x27;\u2581&#x27;</span>, <span class="hljs-string">&#x27;loved&#x27;</span>, <span class="hljs-string">&#x27;\u2581reading&#x27;</span>, <span class="hljs-string">&#x27;\u2581the&#x27;</span>, <span class="hljs-string">&#x27;\u2581Hung&#x27;</span>, <span class="hljs-string">&#x27;er&#x27;</span>, <span class="hljs-string">&#x27;\u2581Games&#x27;</span>, <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>]'}}),Ln=new z({props:{code:`max_input_length = 512
max_target_length = 30


def preprocess_function(examples):
    model_inputs = tokenizer(
        examples["review_body"], max_length=max_input_length, truncation=True
    )
    # Set up the tokenizer for targets
    with tokenizer.as_target_tokenizer():
        labels = tokenizer(
            examples["review_title"], max_length=max_target_length, truncation=True
        )

    model_inputs["labels"] = labels["input_ids"]
    return model_inputs`,highlighted:`max_input_length = <span class="hljs-number">512</span>
max_target_length = <span class="hljs-number">30</span>


<span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_function</span>(<span class="hljs-params">examples</span>):
    model_inputs = tokenizer(
        examples[<span class="hljs-string">&quot;review_body&quot;</span>], max_length=max_input_length, truncation=<span class="hljs-literal">True</span>
    )
    <span class="hljs-comment"># Set up the tokenizer for targets</span>
    <span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
        labels = tokenizer(
            examples[<span class="hljs-string">&quot;review_title&quot;</span>], max_length=max_target_length, truncation=<span class="hljs-literal">True</span>
        )

    model_inputs[<span class="hljs-string">&quot;labels&quot;</span>] = labels[<span class="hljs-string">&quot;input_ids&quot;</span>]
    <span class="hljs-keyword">return</span> model_inputs`}}),In=new z({props:{code:"tokenized_datasets = books_dataset.map(preprocess_function, batched=True)",highlighted:'tokenized_datasets = books_dataset.<span class="hljs-built_in">map</span>(preprocess_function, batched=<span class="hljs-literal">True</span>)'}}),Fa=new on({props:{$$slots:{default:[Ag]},$$scope:{ctx:V}}}),Rn=new Ks({}),Fn=new ju({props:{id:"TMshhnrEXlg"}}),Nn=new z({props:{code:`generated_summary = "I absolutely loved reading the Hunger Games"
reference_summary = "I loved reading the Hunger Games"`,highlighted:`generated_summary = <span class="hljs-string">&quot;I absolutely loved reading the Hunger Games&quot;</span>
reference_summary = <span class="hljs-string">&quot;I loved reading the Hunger Games&quot;</span>`}}),Ha=new on({props:{$$slots:{default:[Og]},$$scope:{ctx:V}}}),Mn=new z({props:{code:"!pip install rouge_score",highlighted:"!pip install rouge_score"}}),Wn=new z({props:{code:`from datasets import load_metric

rouge_score = load_metric("rouge")`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric

rouge_score = load_metric(<span class="hljs-string">&quot;rouge&quot;</span>)`}}),Bn=new z({props:{code:`scores = rouge_score.compute(
    predictions=[generated_summary], references=[reference_summary]
)
scores`,highlighted:`scores = rouge_score.compute(
    predictions=[generated_summary], references=[reference_summary]
)
scores`}}),Kn=new z({props:{code:`{'rouge1': AggregateScore(low=Score(precision=0.86, recall=1.0, fmeasure=0.92), mid=Score(precision=0.86, recall=1.0, fmeasure=0.92), high=Score(precision=0.86, recall=1.0, fmeasure=0.92)),
 'rouge2': AggregateScore(low=Score(precision=0.67, recall=0.8, fmeasure=0.73), mid=Score(precision=0.67, recall=0.8, fmeasure=0.73), high=Score(precision=0.67, recall=0.8, fmeasure=0.73)),
 'rougeL': AggregateScore(low=Score(precision=0.86, recall=1.0, fmeasure=0.92), mid=Score(precision=0.86, recall=1.0, fmeasure=0.92), high=Score(precision=0.86, recall=1.0, fmeasure=0.92)),
 'rougeLsum': AggregateScore(low=Score(precision=0.86, recall=1.0, fmeasure=0.92), mid=Score(precision=0.86, recall=1.0, fmeasure=0.92), high=Score(precision=0.86, recall=1.0, fmeasure=0.92))}`,highlighted:`{<span class="hljs-string">&#x27;rouge1&#x27;</span>: AggregateScore(low=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>), mid=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>), high=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>)),
 <span class="hljs-string">&#x27;rouge2&#x27;</span>: AggregateScore(low=Score(precision=<span class="hljs-number">0.67</span>, recall=<span class="hljs-number">0.8</span>, fmeasure=<span class="hljs-number">0.73</span>), mid=Score(precision=<span class="hljs-number">0.67</span>, recall=<span class="hljs-number">0.8</span>, fmeasure=<span class="hljs-number">0.73</span>), high=Score(precision=<span class="hljs-number">0.67</span>, recall=<span class="hljs-number">0.8</span>, fmeasure=<span class="hljs-number">0.73</span>)),
 <span class="hljs-string">&#x27;rougeL&#x27;</span>: AggregateScore(low=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>), mid=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>), high=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>)),
 <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: AggregateScore(low=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>), mid=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>), high=Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>))}`}}),Vn=new z({props:{code:'scores["rouge1"].mid',highlighted:'scores[<span class="hljs-string">&quot;rouge1&quot;</span>].mid'}}),Yn=new z({props:{code:"Score(precision=0.86, recall=1.0, fmeasure=0.92)",highlighted:'Score(precision=<span class="hljs-number">0.86</span>, recall=<span class="hljs-number">1.0</span>, fmeasure=<span class="hljs-number">0.92</span>)'}}),Wa=new on({props:{$$slots:{default:[Cg]},$$scope:{ctx:V}}}),Jn=new Ks({}),Xn=new z({props:{code:"!pip install nltk",highlighted:"!pip install nltk"}}),Qn=new z({props:{code:`import nltk

nltk.download("punkt")`,highlighted:`<span class="hljs-keyword">import</span> nltk

nltk.download(<span class="hljs-string">&quot;punkt&quot;</span>)`}}),Zn=new z({props:{code:`from nltk.tokenize import sent_tokenize


def three_sentence_summary(text):
    return "\\n".join(sent_tokenize(text)[:3])


print(three_sentence_summary(books_dataset["train"][1]["review_body"]))`,highlighted:`<span class="hljs-keyword">from</span> nltk.tokenize <span class="hljs-keyword">import</span> sent_tokenize


<span class="hljs-keyword">def</span> <span class="hljs-title function_">three_sentence_summary</span>(<span class="hljs-params">text</span>):
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\\n&quot;</span>.join(sent_tokenize(text)[:<span class="hljs-number">3</span>])


<span class="hljs-built_in">print</span>(three_sentence_summary(books_dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&quot;review_body&quot;</span>]))`}}),eo=new z({props:{code:`'I grew up reading Koontz, and years ago, I stopped,convinced i had "outgrown" him.'
'Still,when a friend was looking for something suspenseful too read, I suggested Koontz.'
'She found Strangers.'`,highlighted:`<span class="hljs-string">&#x27;I grew up reading Koontz, and years ago, I stopped,convinced i had &quot;outgrown&quot; him.&#x27;</span>
<span class="hljs-string">&#x27;Still,when a friend was looking for something suspenseful too read, I suggested Koontz.&#x27;</span>
<span class="hljs-string">&#x27;She found Strangers.&#x27;</span>`}}),so=new z({props:{code:`def evaluate_baseline(dataset, metric):
    summaries = [three_sentence_summary(text) for text in dataset["review_body"]]
    return metric.compute(predictions=summaries, references=dataset["review_title"])`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_baseline</span>(<span class="hljs-params">dataset, metric</span>):
    summaries = [three_sentence_summary(text) <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> dataset[<span class="hljs-string">&quot;review_body&quot;</span>]]
    <span class="hljs-keyword">return</span> metric.compute(predictions=summaries, references=dataset[<span class="hljs-string">&quot;review_title&quot;</span>])`}}),to=new z({props:{code:`import pandas as pd

score = evaluate_baseline(books_dataset["validation"], rouge_score)
rouge_names = ["rouge1", "rouge2", "rougeL", "rougeLsum"]
rouge_dict = dict((rn, round(score[rn].mid.fmeasure * 100, 2)) for rn in rouge_names)
rouge_dict`,highlighted:`<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd

score = evaluate_baseline(books_dataset[<span class="hljs-string">&quot;validation&quot;</span>], rouge_score)
rouge_names = [<span class="hljs-string">&quot;rouge1&quot;</span>, <span class="hljs-string">&quot;rouge2&quot;</span>, <span class="hljs-string">&quot;rougeL&quot;</span>, <span class="hljs-string">&quot;rougeLsum&quot;</span>]
rouge_dict = <span class="hljs-built_in">dict</span>((rn, <span class="hljs-built_in">round</span>(score[rn].mid.fmeasure * <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> rn <span class="hljs-keyword">in</span> rouge_names)
rouge_dict`}}),ao=new z({props:{code:"{'rouge1': 16.74, 'rouge2': 8.83, 'rougeL': 15.6, 'rougeLsum': 15.96}",highlighted:'{<span class="hljs-string">&#x27;rouge1&#x27;</span>: <span class="hljs-number">16.74</span>, <span class="hljs-string">&#x27;rouge2&#x27;</span>: <span class="hljs-number">8.83</span>, <span class="hljs-string">&#x27;rougeL&#x27;</span>: <span class="hljs-number">15.6</span>, <span class="hljs-string">&#x27;rougeLsum&#x27;</span>: <span class="hljs-number">15.96</span>}'}});const zu=[Lg,Pg],wo=[];function Du(e,p){return e[0]==="pt"?0:1}ct=Du(V),ut=wo[ct]=zu[ct](V),Ya=new on({props:{$$slots:{default:[Ig]},$$scope:{ctx:V}}}),no=new z({props:{code:`from huggingface_hub import notebook_login

notebook_login()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

notebook_login()`}}),oo=new z({props:{code:"huggingface-cli login",highlighted:'huggingface-<span class="hljs-keyword">cli</span> login'}});let Ce=V[0]==="pt"&&gg();const Su=[Fg,Rg],bo=[];function Au(e,p){return e[0]==="pt"?0:1}dt=Au(V),ft=bo[dt]=Su[dt](V),ro=new z({props:{code:`tokenized_datasets = tokenized_datasets.remove_columns(
    books_dataset["train"].column_names
)`,highlighted:`tokenized_datasets = tokenized_datasets.remove_columns(
    books_dataset[<span class="hljs-string">&quot;train&quot;</span>].column_names
)`}}),lo=new z({props:{code:`features = [tokenized_datasets["train"][i] for i in range(2)]
data_collator(features)`,highlighted:`features = [tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>][i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]
data_collator(features)`}}),io=new z({props:{code:`{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'input_ids': tensor([[  1494,    259,   8622,    390,    259,    262,   2316,   3435,    955,
            772,    281,    772,   1617,    263,    305,  14701,    260,   1385,
           3031,    259,  24146,    332,   1037,    259,  43906,    305,    336,
            260,      1,      0,      0,      0,      0,      0,      0],
        [   259,  27531,  13483,    259,   7505,    260, 112240,  15192,    305,
          53198,    276,    259,  74060,    263,    260,    459,  25640,    776,
           2119,    336,    259,   2220,    259,  18896,    288,   4906,    288,
           1037,   3931,    260,   7083, 101476,   1143,    260,      1]]), 'labels': tensor([[ 7483,   259,  2364, 15695,     1,  -100],
        [  259, 27531, 13483,   259,  7505,     1]]), 'decoder_input_ids': tensor([[    0,  7483,   259,  2364, 15695,     1],
        [    0,   259, 27531, 13483,   259,  7505]])}`,highlighted:`{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
         <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
         <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]), <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([[  <span class="hljs-number">1494</span>,    <span class="hljs-number">259</span>,   <span class="hljs-number">8622</span>,    <span class="hljs-number">390</span>,    <span class="hljs-number">259</span>,    <span class="hljs-number">262</span>,   <span class="hljs-number">2316</span>,   <span class="hljs-number">3435</span>,    <span class="hljs-number">955</span>,
            <span class="hljs-number">772</span>,    <span class="hljs-number">281</span>,    <span class="hljs-number">772</span>,   <span class="hljs-number">1617</span>,    <span class="hljs-number">263</span>,    <span class="hljs-number">305</span>,  <span class="hljs-number">14701</span>,    <span class="hljs-number">260</span>,   <span class="hljs-number">1385</span>,
           <span class="hljs-number">3031</span>,    <span class="hljs-number">259</span>,  <span class="hljs-number">24146</span>,    <span class="hljs-number">332</span>,   <span class="hljs-number">1037</span>,    <span class="hljs-number">259</span>,  <span class="hljs-number">43906</span>,    <span class="hljs-number">305</span>,    <span class="hljs-number">336</span>,
            <span class="hljs-number">260</span>,      <span class="hljs-number">1</span>,      <span class="hljs-number">0</span>,      <span class="hljs-number">0</span>,      <span class="hljs-number">0</span>,      <span class="hljs-number">0</span>,      <span class="hljs-number">0</span>,      <span class="hljs-number">0</span>],
        [   <span class="hljs-number">259</span>,  <span class="hljs-number">27531</span>,  <span class="hljs-number">13483</span>,    <span class="hljs-number">259</span>,   <span class="hljs-number">7505</span>,    <span class="hljs-number">260</span>, <span class="hljs-number">112240</span>,  <span class="hljs-number">15192</span>,    <span class="hljs-number">305</span>,
          <span class="hljs-number">53198</span>,    <span class="hljs-number">276</span>,    <span class="hljs-number">259</span>,  <span class="hljs-number">74060</span>,    <span class="hljs-number">263</span>,    <span class="hljs-number">260</span>,    <span class="hljs-number">459</span>,  <span class="hljs-number">25640</span>,    <span class="hljs-number">776</span>,
           <span class="hljs-number">2119</span>,    <span class="hljs-number">336</span>,    <span class="hljs-number">259</span>,   <span class="hljs-number">2220</span>,    <span class="hljs-number">259</span>,  <span class="hljs-number">18896</span>,    <span class="hljs-number">288</span>,   <span class="hljs-number">4906</span>,    <span class="hljs-number">288</span>,
           <span class="hljs-number">1037</span>,   <span class="hljs-number">3931</span>,    <span class="hljs-number">260</span>,   <span class="hljs-number">7083</span>, <span class="hljs-number">101476</span>,   <span class="hljs-number">1143</span>,    <span class="hljs-number">260</span>,      <span class="hljs-number">1</span>]]), <span class="hljs-string">&#x27;labels&#x27;</span>: tensor([[ <span class="hljs-number">7483</span>,   <span class="hljs-number">259</span>,  <span class="hljs-number">2364</span>, <span class="hljs-number">15695</span>,     <span class="hljs-number">1</span>,  -<span class="hljs-number">100</span>],
        [  <span class="hljs-number">259</span>, <span class="hljs-number">27531</span>, <span class="hljs-number">13483</span>,   <span class="hljs-number">259</span>,  <span class="hljs-number">7505</span>,     <span class="hljs-number">1</span>]]), <span class="hljs-string">&#x27;decoder_input_ids&#x27;</span>: tensor([[    <span class="hljs-number">0</span>,  <span class="hljs-number">7483</span>,   <span class="hljs-number">259</span>,  <span class="hljs-number">2364</span>, <span class="hljs-number">15695</span>,     <span class="hljs-number">1</span>],
        [    <span class="hljs-number">0</span>,   <span class="hljs-number">259</span>, <span class="hljs-number">27531</span>, <span class="hljs-number">13483</span>,   <span class="hljs-number">259</span>,  <span class="hljs-number">7505</span>]])}`}});const Ou=[Ng,Gg],vo=[];function Cu(e,p){return e[0]==="pt"?0:1}gt=Cu(V),_t=vo[gt]=Ou[gt](V);let Pe=V[0]==="pt"&&_g(V);return po=new Ks({}),mo=new z({props:{code:`from transformers import pipeline

hub_model_id = "huggingface-course/mt5-small-finetuned-amazon-en-es"
summarizer = pipeline("summarization", model=hub_model_id)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

hub_model_id = <span class="hljs-string">&quot;huggingface-course/mt5-small-finetuned-amazon-en-es&quot;</span>
summarizer = pipeline(<span class="hljs-string">&quot;summarization&quot;</span>, model=hub_model_id)`}}),ho=new z({props:{code:`def print_summary(idx):
    review = books_dataset["test"][idx]["review_body"]
    title = books_dataset["test"][idx]["review_title"]
    summary = summarizer(books_dataset["test"][idx]["review_body"])[0]["summary_text"]
    print(f"'>>> Review: {review}'")
    print(f"\\n'>>> Title: {title}'")
    print(f"\\n'>>> Summary: {summary}'")`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_summary</span>(<span class="hljs-params">idx</span>):
    review = books_dataset[<span class="hljs-string">&quot;test&quot;</span>][idx][<span class="hljs-string">&quot;review_body&quot;</span>]
    title = books_dataset[<span class="hljs-string">&quot;test&quot;</span>][idx][<span class="hljs-string">&quot;review_title&quot;</span>]
    summary = summarizer(books_dataset[<span class="hljs-string">&quot;test&quot;</span>][idx][<span class="hljs-string">&quot;review_body&quot;</span>])[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;summary_text&quot;</span>]
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;&#x27;&gt;&gt;&gt; Review: <span class="hljs-subst">{review}</span>&#x27;&quot;</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\\n&#x27;&gt;&gt;&gt; Title: <span class="hljs-subst">{title}</span>&#x27;&quot;</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\\n&#x27;&gt;&gt;&gt; Summary: <span class="hljs-subst">{summary}</span>&#x27;&quot;</span>)`}}),co=new z({props:{code:"print_summary(100)",highlighted:'print_summary(<span class="hljs-number">100</span>)'}}),uo=new z({props:{code:`'>>> Review: Nothing special at all about this product... the book is too small and stiff and hard to write in. The huge sticker on the back doesn\u2019t come off and looks super tacky. I would not purchase this again. I could have just bought a journal from the dollar store and it would be basically the same thing. It\u2019s also really expensive for what it is.'

'>>> Title: Not impressed at all... buy something else'

'>>> Summary: Nothing special at all about this product'`,highlighted:`<span class="hljs-string">&#x27;&gt;&gt;&gt; Review: Nothing special at all about this product... the book is too small and stiff and hard to write in. The huge sticker on the back doesn\u2019t come off and looks super tacky. I would not purchase this again. I could have just bought a journal from the dollar store and it would be basically the same thing. It\u2019s also really expensive for what it is.&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt;&gt; Title: Not impressed at all... buy something else&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt;&gt; Summary: Nothing special at all about this product&#x27;</span>`}}),fo=new z({props:{code:"print_summary(0)",highlighted:'print_summary(<span class="hljs-number">0</span>)'}}),go=new z({props:{code:`'>>> Review: Es una trilogia que se hace muy facil de leer. Me ha gustado, no me esperaba el final para nada'

'>>> Title: Buena literatura para adolescentes'

'>>> Summary: Muy facil de leer'`,highlighted:`<span class="hljs-string">&#x27;&gt;&gt;&gt; Review: Es una trilogia que se hace muy facil de leer. Me ha gustado, no me esperaba el final para nada&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt;&gt; Title: Buena literatura para adolescentes&#x27;</span>

<span class="hljs-string">&#x27;&gt;&gt;&gt; Summary: Muy facil de leer&#x27;</span>`}}),{c(){u=o("meta"),j=h(),b(d.$$.fragment),E=h(),C=o("h1"),x=o("a"),A=o("span"),b(P.$$.fragment),T=h(),S=o("span"),I=a("Summarization"),D=h(),G.c(),J=h(),X=o("p"),Q=a("In this section we\u2019ll take a look at how Transformer models can be used to condense long documents into summaries, a task known as "),W=o("em"),Z=a("text summarization"),L=a(". This is one of the most challenging NLP tasks as it requires a range of abilities, such as understanding long passages and generating coherent text that captures the main topics in a document. However, when done well, text summarization is a powerful tool that can speed up various business processes by relieving the burden of domain experts to read long documents in detail."),U=h(),b(te.$$.fragment),F=h(),B=o("p"),ne=a("Although there already exist various fine-tuned models for summarization on the "),M=o("a"),le=a("Hugging Face Hub"),Y=a(", almost all of these are only suitable for English documents. So, to add a twist in this section, we\u2019ll train a bilingual model for English and Spanish. By the end of this section, you\u2019ll have a "),oe=o("a"),fe=a("model"),we=a(" that can summarize customer reviews like the one shown here:"),Ee=h(),H=o("iframe"),ue=h(),ee=o("iframe"),$e=h(),re=o("p"),De=a("As we\u2019ll see, these summaries are concise because they\u2019re learned from the titles that customers provide in their product reviews. Let\u2019s start by putting together a suitable bilingual corpus for this task."),ge=h(),me=o("h2"),w=o("a"),R=o("span"),b(he.$$.fragment),$=h(),K=o("span"),Te=a("Preparing a multilingual corpus"),_e=h(),de=o("p"),Ae=a("We\u2019ll use the "),ae=o("a"),Ne=a("Multilingual Amazon Reviews Corpus"),ns=a(" to create our bilingual summarizer. This corpus consists of Amazon product reviews in six languages and is typically used to benchmark multilingual classifiers. However, since each review is accompanied by a short title, we can use the titles as the target summaries for our model to learn from! To get started, let\u2019s download the English and Spanish subsets from the Hugging Face Hub:"),He=h(),b(se.$$.fragment),Be=h(),b(je.$$.fragment),ks=h(),ce=o("p"),gs=a("As you can see, for each language there are 200,000 reviews for the "),_s=o("code"),$s=a("train"),Ue=a(" split, and 5,000 reviews for each of the "),os=o("code"),es=a("validation"),rs=a(" and "),Ke=o("code"),Vs=a("test"),ls=a(" splits. The review information we are interested in is contained in the "),Se=o("code"),ws=a("review_body"),js=a(" and "),Me=o("code"),is=a("review_title"),N=a(" columns. Let\u2019s take a look at a few examples by creating a simple function that takes a random sample from the training set with the techniques we learned in "),ie=o("a"),xs=a("Chapter 5"),wt=a(":"),be=h(),b(We.$$.fragment),Ys=h(),b(ss.$$.fragment),ts=h(),b(Ve.$$.fragment),ps=h(),pe=o("p"),Js=a("This sample shows the diversity of reviews one typically finds online, ranging from positive to negative (and everything in between!). Although the example with the \u201Cmeh\u201D title is not very informative, the other titles look like decent summaries of the reviews themselves. Training a summarization model on all 400,000 reviews would take far too long on a single GPU, so instead we\u2019ll focus on generating summaries for a single domain of products. To get a feel for what domains we can choose from, let\u2019s convert "),Ye=o("code"),Xs=a("english_dataset"),Le=a(" to a "),Es=o("code"),Ts=a("pandas.DataFrame"),bt=a(" and compute the number of reviews per product category:"),qe=h(),b(Je.$$.fragment),Qs=h(),b(ms.$$.fragment),qs=h(),ve=o("p"),rn=a("The most popular products in the English dataset are about household items, clothing, and wireless electronics. To stick with the Amazon theme, though, let\u2019s focus on summarizing book reviews \u2014 after all, this is what the company was founded on! We can see two product categories that fit the bill ("),vt=o("code"),Zs=a("book"),ga=a(" and "),bs=o("code"),_a=a("digital_ebook_purchase"),yt=a("), so let\u2019s filter the datasets in both languages for just these products. As we saw in "),kt=o("a"),wa=a("Chapter 5"),et=a(", the "),$t=o("code"),zs=a("Dataset.filter()"),ln=a(" function allows us to slice a dataset very efficiently, so we can define a simple function to do this:"),jt=h(),b(st.$$.fragment),ba=h(),ze=o("p"),vs=a("Now when we apply this function to "),hs=o("code"),Mt=a("english_dataset"),tt=a(" and "),Wt=o("code"),Bt=a("spanish_dataset"),pn=a(", the result will contain just those rows involving the book categories. Before applying the filter, let\u2019s switch the format of "),xt=o("code"),Et=a("english_dataset"),mn=a(" from "),Tt=o("code"),Xe=a('"pandas"'),at=a(" back to "),Kt=o("code"),Vt=a('"arrow"'),hn=a(":"),va=h(),b(nt.$$.fragment),qt=h(),zt=o("p"),cn=a("We can then apply the filter function, and as a sanity check let\u2019s inspect a sample of reviews to see if they are indeed about books:"),Dt=h(),b(ot.$$.fragment),ya=h(),b(Oe.$$.fragment),ka=h(),Ie=o("p"),un=a("Okay, we can see that the reviews are not strictly about books and might refer to things like calendars and electronic applications such as OneNote. Nevertheless, the domain seems about right to train a summarization model on. Before we look at various models that are suitable for this task, we have one last bit of data preparation to do: combining the English and Spanish reviews as a single "),Yt=o("code"),Jt=a("DatasetDict"),dn=a(" object. \u{1F917} Datasets provides a handy "),Xt=o("code"),Qt=a("concatenate_datasets()"),fn=a(" function that (as the name suggests) will stack two "),Zt=o("code"),$a=a("Dataset"),St=a(" objects on top of each other. So, to create our bilingual dataset, we\u2019ll loop over each split, concatenate the datasets for that split, and shuffle the result to ensure our model doesn\u2019t overfit to a single language:"),ja=h(),b(Ds.$$.fragment),Ss=h(),b(As.$$.fragment),Os=h(),rt=o("p"),Cs=a("This certainly looks like a mix of English and Spanish reviews! Now that we have a training corpus, one final thing to check is the distribution of words in the reviews and their titles. This is especially important for summarization tasks, where short reference summaries in the data can bias the model to only output one or two words in the generated summaries. The plots below show the word distributions, and we can see that the titles are heavily skewed toward just 1-2 words:"),xa=h(),as=o("div"),lt=o("img"),Ea=h(),m=o("img"),gn=h(),it=o("p"),jo=a("To deal with this, we\u2019ll filter out the examples with very short titles so that our model can produce more interesting summaries. Since we\u2019re dealing with English and Spanish texts, we can use a rough heuristic to split the titles on whitespace and then use our trusty "),Ps=o("code"),xo=a("Dataset.filter()"),Eo=a(" method as follows:"),ea=h(),b(At.$$.fragment),_n=h(),sa=o("p"),Ot=a("Now that we\u2019ve prepared our corpus, let\u2019s take a look at a few possible Transformer models that one might fine-tune on it!"),wn=h(),Ls=o("h2"),ys=o("a"),Ta=o("span"),b(Ct.$$.fragment),qa=h(),za=o("span"),Da=a("Models for text summarization"),bn=h(),pt=o("p"),Pt=a("If you think about it, text summarization is a similar sort of task to machine translation: we have a body of text like a review that we\u2019d like to \u201Ctranslate\u201D into a shorter version that captures the salient features of the input. Accordingly, most Transformer models for summarization adopt the encoder-decoder architecture that we first encountered in "),ta=o("a"),To=a("Chapter 1"),qo=a(", although there are some exceptions like the GPT family of models which can also be used for summarization in few-shot settings. The following table lists some popular pretrained models that can be fine-tuned for summarization."),vn=h(),mt=o("table"),Is=o("thead"),Rs=o("tr"),aa=o("th"),zo=a("Transformer model"),Do=h(),Lt=o("th"),So=a("Description"),Sa=h(),na=o("th"),Ao=a("Multilingual?"),Oo=h(),Re=o("tbody"),Fe=o("tr"),ht=o("td"),It=o("a"),Co=a("GPT-2"),Po=h(),cs=o("td"),Lo=a("Although trained as an auto-regressive language model, you can make GPT-2 generate summaries by appending \u201CTL;DR\u201D at the end of the input text."),Io=h(),oa=o("td"),Ro=a("\u274C"),Aa=h(),Fs=o("tr"),Fo=o("td"),yn=o("a"),Zp=a("PEGASUS"),em=h(),Ir=o("td"),sm=a("Uses a pretraining objective to predict masked sentences in multi-sentence texts. This pretraining objective is closer to summarization than vanilla language modeling and scores highly on popular benchmarks."),tm=h(),Go=o("td"),am=a("\u274C"),nm=h(),ra=o("tr"),No=o("td"),kn=o("a"),om=a("T5"),rm=h(),$n=o("td"),lm=a("A universal Transformer architecture that formulates all tasks in a text-to-text framework; e.g., the input format for the model to summarize a document is "),Rr=o("code"),im=a("summarize: ARTICLE"),pm=a("."),mm=h(),Ho=o("td"),hm=a("\u274C"),cm=h(),la=o("tr"),Uo=o("td"),jn=o("a"),um=a("mT5"),dm=h(),Fr=o("td"),fm=a("A multilingual version of T5, pretrained on the multilingual Common Crawl corpus (mC4), covering 101 languages."),gm=h(),Mo=o("td"),_m=a("\u2705"),wm=h(),ia=o("tr"),Wo=o("td"),xn=o("a"),bm=a("BART"),vm=h(),Gr=o("td"),ym=a("A novel Transformer architecture with both an encoder and a decoder stack trained to reconstruct corrupted input that combines the pretraining schemes of BERT and GPT-2."),km=h(),Bo=o("td"),$m=a("\u274C"),jm=h(),pa=o("tr"),Ko=o("td"),En=o("a"),xm=a("mBART-50"),Em=h(),Nr=o("td"),Tm=a("A multilingual version of BART, pretrained on 50 languages."),qm=h(),Vo=o("td"),zm=a("\u2705"),Yl=h(),Yo=o("p"),Dm=a("As you can see from this table, the majority of Transformer models for summarization (and indeed most NLP tasks) are monolingual. This is great if your task is in a \u201Chigh-resource\u201D language like English or German, but less so for the thousands of other languages in use across the world. Fortunately, there is a class of multilingual Transformer models, like mT5 and mBART, that come to the rescue. These models are pretrained using language modeling, but with a twist: instead of training on a corpus of one language, they are trained jointly on texts in over 50 languages at once!"),Jl=h(),Oa=o("p"),Sm=a("We\u2019ll focus on mT5, an interesting architecture based on T5 that was pretrained in a text-to-text framework. In T5, every NLP task is formulated in terms of a prompt prefix like "),Hr=o("code"),Am=a("summarize:"),Om=a(" which conditions the model to adapt the generated text to the prompt. As shown in the figure below, this makes T5 extremely versatile, as you can solve many tasks with a single model!"),Xl=h(),ma=o("div"),Tn=o("img"),Cm=h(),qn=o("img"),Ql=h(),Jo=o("p"),Pm=a("mT5 doesn\u2019t use prefixes, but shares much of the versatility of T5 and has the advantage of being multilingual. Now that we\u2019ve picked a model, let\u2019s take a look at preparing our data for training."),Zl=h(),b(Ca.$$.fragment),ei=h(),ha=o("h2"),Pa=o("a"),Ur=o("span"),b(zn.$$.fragment),Lm=h(),Mr=o("span"),Im=a("Preprocessing the data"),si=h(),b(Dn.$$.fragment),ti=h(),La=o("p"),Rm=a("Our next task is to tokenize and encode our reviews and their titles. As usual, we begin by loading the tokenizer associated with the pretrained model checkpoint. We\u2019ll use "),Wr=o("code"),Fm=a("mt5-small"),Gm=a(" as our checkpoint so we can fine-tune the model in a reasonable amount of time:"),ai=h(),b(Sn.$$.fragment),ni=h(),b(Ia.$$.fragment),oi=h(),Xo=o("p"),Nm=a("Let\u2019s test out the mT5 tokenizer on a small example:"),ri=h(),b(An.$$.fragment),li=h(),b(On.$$.fragment),ii=h(),us=o("p"),Hm=a("Here we can see the familiar "),Br=o("code"),Um=a("input_ids"),Mm=a(" and "),Kr=o("code"),Wm=a("attention_mask"),Bm=a(" that we encountered in our first fine-tuning experiments back in "),Qo=o("a"),Km=a("Chapter 3"),Vm=a(". Let\u2019s decode these input IDs with the tokenizer\u2019s "),Vr=o("code"),Ym=a("convert_ids_to_tokens()"),Jm=a(" function to see what kind of tokenizer we\u2019re dealing with:"),pi=h(),b(Cn.$$.fragment),mi=h(),b(Pn.$$.fragment),hi=h(),Gs=o("p"),Xm=a("The special Unicode character "),Yr=o("code"),Qm=a("\u2581"),Zm=a(" and end-of-sequence token "),Jr=o("code"),eh=a("</s>"),sh=a(" indicate that we\u2019re dealing with the SentencePiece tokenizer, which is based on the Unigram segmentation algorithm discussed in "),Zo=o("a"),th=a("Chapter 6"),ah=a(". Unigram is especially useful for multilingual corpora since it allows SentencePiece to be agnostic about accents, punctuation, and the fact that many languages, like Japanese, do not have whitespace characters."),ci=h(),Ra=o("p"),nh=a("To tokenize our corpus, we have to deal with a subtlety associated with summarization: because our labels are also text, it is possible that they exceed the model\u2019s maximum context size. This means we need to apply truncation to both the reviews and their titles to ensure we don\u2019t pass excessively long inputs to our model. The tokenizers in \u{1F917} Transformers provide a nifty "),Xr=o("code"),oh=a("as_target_tokenizer()"),rh=a(" function that allows you to tokenize the labels in parallel to the inputs. This is typically done using a context manager inside a preprocessing function that first encodes the inputs, and then encodes the labels as a separate column. Here is an example of such a function for mT5:"),ui=h(),b(Ln.$$.fragment),di=h(),ds=o("p"),lh=a("Let\u2019s walk through this code to understand what\u2019s happening. The first thing we\u2019ve done is define values for "),Qr=o("code"),ih=a("max_input_length"),ph=a(" and "),Zr=o("code"),mh=a("max_target_length"),hh=a(", which set the upper limits for how long our reviews and titles can be. Since the review body is typically much larger than the title, we\u2019ve scaled these values accordingly. Then, in the  "),el=o("code"),ch=a("preprocess_function()"),uh=a(" itself we can see the reviews are first tokenized, followed by the titles with "),sl=o("code"),dh=a("as_target_tokenizer()"),fh=a("."),fi=h(),Rt=o("p"),gh=a("With "),tl=o("code"),_h=a("preprocess_function()"),wh=a(", it is then a simple matter to tokenize the whole corpus using the handy "),al=o("code"),bh=a("Dataset.map()"),vh=a(" function we\u2019ve used extensively throughout this course:"),gi=h(),b(In.$$.fragment),_i=h(),er=o("p"),yh=a("Now that the corpus has been preprocessed, let\u2019s take a look at some metrics that are commonly used for summarization. As we\u2019ll see, there is no silver bullet when it comes to measuring the quality of machine-generated text."),wi=h(),b(Fa.$$.fragment),bi=h(),ca=o("h2"),Ga=o("a"),nl=o("span"),b(Rn.$$.fragment),kh=h(),ol=o("span"),$h=a("Metrics for text summarization"),vi=h(),b(Fn.$$.fragment),yi=h(),sr=o("p"),jh=a("In comparison to most of the other tasks we\u2019ve covered in this course, measuring the performance of text generation tasks like summarization or translation is not as straightforward. For example, given a review like \u201CI loved reading the Hunger Games\u201D, there are multiple valid summaries, like \u201CI loved the Hunger Games\u201D or \u201CHunger Games is a great read\u201D. Clearly, applying some sort of exact match between the generated summary and the label is not a good solution \u2014 even humans would fare poorly under such a metric, because we all have our own writing style."),ki=h(),Na=o("p"),xh=a("For summarization, one of the most commonly used metrics is the "),Gn=o("a"),Eh=a("ROUGE score"),Th=a(" (short for Recall-Oriented Understudy for Gisting Evaluation). The basic idea behind this metric is to compare a generated summary against a set of reference summaries that are typically created by humans. To make this more precise, suppose we want to compare the following two summaries:"),$i=h(),b(Nn.$$.fragment),ji=h(),Ft=o("p"),qh=a("One way to compare them could be to count the number of overlapping words, which in this case would be 6. However, this is a bit crude, so instead ROUGE is based on computing the "),rl=o("em"),zh=a("precision"),Dh=a(" and "),ll=o("em"),Sh=a("recall"),Ah=a(" scores for the overlap."),xi=h(),b(Ha.$$.fragment),Ei=h(),Hn=o("p"),Oh=a(`For ROUGE, recall measures how much of the reference summary is captured by the generated one. If we are just comparing words, recall can be calculated according to the following formula:
`),Ti=new dg,qi=h(),Un=o("p"),Ch=a(`For our simple example above, this formula gives a perfect recall of 6/6 = 1; i.e., all the words in the reference summary have been produced by the model. This may sound great, but imagine if our generated summary had been \u201CI really really loved reading the Hunger Games all night\u201D. This would also have perfect recall, but is arguably a worse summary since it is verbose. To deal with these scenarios we also compute the precision, which in the ROUGE context measures how much of the generated summary was relevant:
`),zi=new dg,Di=h(),Ua=o("p"),Ph=a("Applying this to our verbose summary gives a precision of 6/10  = 0.6, which is considerably worse than the precision of 6/7 = 0.86 obtained by our shorter one. In practice, both precision and recall are usually computed, and then the F1-score (the harmonic mean of precision and recall) is reported. We can do this easily in \u{1F917} Datasets by first installing the "),il=o("code"),Lh=a("rouge_score"),Ih=a(" package:"),Si=h(),b(Mn.$$.fragment),Ai=h(),tr=o("p"),Rh=a("and then loading the ROUGE metric as follows:"),Oi=h(),b(Wn.$$.fragment),Ci=h(),Ma=o("p"),Fh=a("Then we can use the "),pl=o("code"),Gh=a("rouge_score.compute()"),Nh=a(" function to calculate all the metrics at once:"),Pi=h(),b(Bn.$$.fragment),Li=h(),b(Kn.$$.fragment),Ii=h(),Qe=o("p"),Hh=a("Whoa, there\u2019s a lot of information in that output \u2014 what does it all mean? First, \u{1F917} Datasets actually computes confidence intervals for precision, recall, and F1-score; these are the "),ml=o("code"),Uh=a("low"),Mh=a(", "),hl=o("code"),Wh=a("mid"),Bh=a(", and "),cl=o("code"),Kh=a("high"),Vh=a(" attributes you can see here. Moreover, \u{1F917} Datasets computes a variety of ROUGE scores which are based on different types of text granularity when comparing the generated and reference summaries. The "),ul=o("code"),Yh=a("rouge1"),Jh=a(" variant is the overlap of unigrams \u2014 this is just a fancy way of saying the overlap of words and is exactly the metric we\u2019ve discussed above. To verify this, let\u2019s pull out the "),dl=o("code"),Xh=a("mid"),Qh=a(" value of our scores:"),Ri=h(),b(Vn.$$.fragment),Fi=h(),b(Yn.$$.fragment),Gi=h(),Ze=o("p"),Zh=a("Great, the precision and recall numbers match up! Now what about those other ROUGE scores? "),fl=o("code"),ec=a("rouge2"),sc=a(" measures the overlap between bigrams (think the overlap of pairs of words), while "),gl=o("code"),tc=a("rougeL"),ac=a(" and "),_l=o("code"),nc=a("rougeLsum"),oc=a(" measure the longest matching sequences of words by looking for the longest common substrings in the generated and reference summaries. The \u201Csum\u201D in "),wl=o("code"),rc=a("rougeLsum"),lc=a(" refers to the fact that this metric is computed over a whole summary, while "),bl=o("code"),ic=a("rougeL"),pc=a(" is computed as the average over individual sentences."),Ni=h(),b(Wa.$$.fragment),Hi=h(),ar=o("p"),mc=a("We\u2019ll use these ROUGE scores to track the performance of our model, but before doing that let\u2019s do something every good NLP practitioner should do: create a strong, yet simple baseline!"),Ui=h(),ua=o("h3"),Ba=o("a"),vl=o("span"),b(Jn.$$.fragment),hc=h(),yl=o("span"),cc=a("Creating a strong baseline"),Mi=h(),Ns=o("p"),uc=a("A common baseline for text summarization is to simply take the first three sentences of an article, often called the "),kl=o("em"),dc=a("lead-3"),fc=a(" baseline. We could use full stops to track the sentence boundaries, but this will fail on acronyms like \u201CU.S.\u201D or \u201CU.N.\u201D \u2014 so instead we\u2019ll use the "),$l=o("code"),gc=a("nltk"),_c=a(" library, which includes a better algorithm to handle these cases. You can install the package using "),jl=o("code"),wc=a("pip"),bc=a(" as follows:"),Wi=h(),b(Xn.$$.fragment),Bi=h(),nr=o("p"),vc=a("and then download the punctuation rules:"),Ki=h(),b(Qn.$$.fragment),Vi=h(),Ka=o("p"),yc=a("Next, we import the sentence tokenizer from "),xl=o("code"),kc=a("nltk"),$c=a(" and create a simple function to extract the first three sentences in a review. The convention in text summarization is to separate each summary with a newline, so let\u2019s also include this and test it on a training example:"),Yi=h(),b(Zn.$$.fragment),Ji=h(),b(eo.$$.fragment),Xi=h(),or=o("p"),jc=a("This seems to work, so let\u2019s now implement a function that extracts these \u201Csummaries\u201D from a dataset and computes the ROUGE scores for the baseline:"),Qi=h(),b(so.$$.fragment),Zi=h(),rr=o("p"),xc=a("We can then use this function to compute the ROUGE scores over the validation set and prettify them a bit using Pandas:"),ep=h(),b(to.$$.fragment),sp=h(),b(ao.$$.fragment),tp=h(),Va=o("p"),Ec=a("We can see that the "),El=o("code"),Tc=a("rouge2"),qc=a(" score is significantly lower than the rest; this likely reflects the fact that review titles are typically concise and so the lead-3 baseline is too verbose. Now that we have a good baseline to work from, let\u2019s turn our attention toward fine-tuning mT5!"),ap=h(),ut.c(),lr=h(),b(Ya.$$.fragment),np=h(),ir=o("p"),zc=a("The next thing we need to do is log in to the Hugging Face Hub. If you\u2019re running this code in a notebook, you can do so with the following utility function:"),op=h(),b(no.$$.fragment),rp=h(),pr=o("p"),Dc=a("which will display a widget where you can enter your credentials. Alternatively, you can run this command in your terminal and log in there:"),lp=h(),b(oo.$$.fragment),ip=h(),Ce&&Ce.c(),mr=h(),Ja=o("p"),Sc=a("Next, we need to define a data collator for our sequence-to-sequence task. Since mT5 is an encoder-decoder Transformer model, one subtlety with preparing our batches is that during decoding we need to shift the labels to the right by one. This is required to ensure that the decoder only sees the previous ground truth labels and not the current or future ones, which would be easy for the model to memorize. This is similar to how masked self-attention is applied to the inputs in a task like "),hr=o("a"),Ac=a("causal language modeling"),Oc=a("."),pp=h(),Hs=o("p"),Cc=a("Luckily, \u{1F917} Transformers provides a "),Tl=o("code"),Pc=a("DataCollatorForSeq2Seq"),Lc=a(" collator that will dynamically pad the inputs and the labels for us. To instantiate this collator, we simply need to provide the "),ql=o("code"),Ic=a("tokenizer"),Rc=a(" and "),zl=o("code"),Fc=a("model"),Gc=a(":"),mp=h(),ft.c(),cr=h(),ur=o("p"),Nc=a("Let\u2019s see what this collator produces when fed a small batch of examples. First, we need to remove the columns with strings because the collator won\u2019t know how to pad these elements:"),hp=h(),b(ro.$$.fragment),cp=h(),Gt=o("p"),Hc=a("Since the collator expects a list of "),Dl=o("code"),Uc=a("dict"),Mc=a("s, where each "),Sl=o("code"),Wc=a("dict"),Bc=a(" represents a single example in the dataset, we also need to wrangle the data into the expected format before passing it to the data collator:"),up=h(),b(lo.$$.fragment),dp=h(),b(io.$$.fragment),fp=h(),xe=o("p"),Kc=a("The main thing to notice here is that the first example is longer than the second one, so the "),Al=o("code"),Vc=a("input_ids"),Yc=a(" and "),Ol=o("code"),Jc=a("attention_mask"),Xc=a(" of the second example have been padded on the right with a "),Cl=o("code"),Qc=a("[PAD]"),Zc=a(" token (whose ID is "),Pl=o("code"),eu=a("0"),su=a("). Similarly, we can see that the "),Ll=o("code"),tu=a("labels"),au=a(" have been padded with "),Il=o("code"),nu=a("-100"),ou=a("s, to make sure the padding tokens are ignored by the loss function. And finally, we can see a new "),Rl=o("code"),ru=a("decoder_input_ids"),lu=a(" which has shifted the labels to the right by inserting a "),Fl=o("code"),iu=a("[PAD]"),pu=a(" token in the first entry."),gp=h(),_t.c(),dr=h(),Pe&&Pe.c(),fr=h(),da=o("h2"),Xa=o("a"),Gl=o("span"),b(po.$$.fragment),mu=h(),Nl=o("span"),hu=a("Using your fine-tuned model"),_p=h(),Qa=o("p"),cu=a("Once you\u2019ve pushed the model to the Hub, you can play with it either via the inference widget or with a "),Hl=o("code"),uu=a("pipeline"),du=a(" object, as follows:"),wp=h(),b(mo.$$.fragment),bp=h(),gr=o("p"),fu=a("We can feed some examples from the test set (which the model has not seen) to our pipeline to get a feel for the quality of the summaries. First let\u2019s implement a simple function to show the review, title, and generated summary together:"),vp=h(),b(ho.$$.fragment),yp=h(),_r=o("p"),gu=a("Let\u2019s take a look at one of the English examples we get:"),kp=h(),b(co.$$.fragment),$p=h(),b(uo.$$.fragment),jp=h(),Za=o("p"),_u=a("This is not too bad! We can see that our model has actually been able to perform "),Ul=o("em"),wu=a("abstractive"),bu=a(" summarization by augmenting parts of the review with new words. And perhaps the coolest aspect of our model is that it is bilingual, so we can also generate summaries of Spanish reviews:"),xp=h(),b(fo.$$.fragment),Ep=h(),b(go.$$.fragment),Tp=h(),wr=o("p"),vu=a("The summary translates into \u201CVery easy to read\u201D in English, which we can see in this case was extracted directly from the review. Nevertheless, this shows the versatility of the mT5 model and has given you a taste of what it\u2019s like to deal with a multilingual corpus!"),qp=h(),br=o("p"),yu=a("Next, we\u2019ll turn our attention to a slightly more complex task: training a language model from scratch."),this.h()},l(e){const p=jg('[data-svelte="svelte-1phssyn"]',document.head);u=r(p,"META",{name:!0,content:!0}),p.forEach(t),j=c(e),v(d.$$.fragment,e),E=c(e),C=r(e,"H1",{class:!0});var yo=l(C);x=r(yo,"A",{id:!0,class:!0,href:!0});var vr=l(x);A=r(vr,"SPAN",{});var Ml=l(A);v(P.$$.fragment,Ml),Ml.forEach(t),vr.forEach(t),T=c(yo),S=r(yo,"SPAN",{});var Wl=l(S);I=n(Wl,"Summarization"),Wl.forEach(t),yo.forEach(t),D=c(e),G.l(e),J=c(e),X=r(e,"P",{});var ko=l(X);Q=n(ko,"In this section we\u2019ll take a look at how Transformer models can be used to condense long documents into summaries, a task known as "),W=r(ko,"EM",{});var Bl=l(W);Z=n(Bl,"text summarization"),Bl.forEach(t),L=n(ko,". This is one of the most challenging NLP tasks as it requires a range of abilities, such as understanding long passages and generating coherent text that captures the main topics in a document. However, when done well, text summarization is a powerful tool that can speed up various business processes by relieving the burden of domain experts to read long documents in detail."),ko.forEach(t),U=c(e),v(te.$$.fragment,e),F=c(e),B=r(e,"P",{});var fa=l(B);ne=n(fa,"Although there already exist various fine-tuned models for summarization on the "),M=r(fa,"A",{href:!0,rel:!0});var Kl=l(M);le=n(Kl,"Hugging Face Hub"),Kl.forEach(t),Y=n(fa,", almost all of these are only suitable for English documents. So, to add a twist in this section, we\u2019ll train a bilingual model for English and Spanish. By the end of this section, you\u2019ll have a "),oe=r(fa,"A",{href:!0,rel:!0});var yr=l(oe);fe=n(yr,"model"),yr.forEach(t),we=n(fa," that can summarize customer reviews like the one shown here:"),fa.forEach(t),Ee=c(e),H=r(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),l(H).forEach(t),ue=c(e),ee=r(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),l(ee).forEach(t),$e=c(e),re=r(e,"P",{});var Vl=l(re);De=n(Vl,"As we\u2019ll see, these summaries are concise because they\u2019re learned from the titles that customers provide in their product reviews. Let\u2019s start by putting together a suitable bilingual corpus for this task."),Vl.forEach(t),ge=c(e),me=r(e,"H2",{class:!0});var en=l(me);w=r(en,"A",{id:!0,class:!0,href:!0});var kr=l(w);R=r(kr,"SPAN",{});var Pu=l(R);v(he.$$.fragment,Pu),Pu.forEach(t),kr.forEach(t),$=c(en),K=r(en,"SPAN",{});var Lu=l(K);Te=n(Lu,"Preparing a multilingual corpus"),Lu.forEach(t),en.forEach(t),_e=c(e),de=r(e,"P",{});var Dp=l(de);Ae=n(Dp,"We\u2019ll use the "),ae=r(Dp,"A",{href:!0,rel:!0});var Iu=l(ae);Ne=n(Iu,"Multilingual Amazon Reviews Corpus"),Iu.forEach(t),ns=n(Dp," to create our bilingual summarizer. This corpus consists of Amazon product reviews in six languages and is typically used to benchmark multilingual classifiers. However, since each review is accompanied by a short title, we can use the titles as the target summaries for our model to learn from! To get started, let\u2019s download the English and Spanish subsets from the Hugging Face Hub:"),Dp.forEach(t),He=c(e),v(se.$$.fragment,e),Be=c(e),v(je.$$.fragment,e),ks=c(e),ce=r(e,"P",{});var fs=l(ce);gs=n(fs,"As you can see, for each language there are 200,000 reviews for the "),_s=r(fs,"CODE",{});var Ru=l(_s);$s=n(Ru,"train"),Ru.forEach(t),Ue=n(fs," split, and 5,000 reviews for each of the "),os=r(fs,"CODE",{});var Fu=l(os);es=n(Fu,"validation"),Fu.forEach(t),rs=n(fs," and "),Ke=r(fs,"CODE",{});var Gu=l(Ke);Vs=n(Gu,"test"),Gu.forEach(t),ls=n(fs," splits. The review information we are interested in is contained in the "),Se=r(fs,"CODE",{});var Nu=l(Se);ws=n(Nu,"review_body"),Nu.forEach(t),js=n(fs," and "),Me=r(fs,"CODE",{});var Hu=l(Me);is=n(Hu,"review_title"),Hu.forEach(t),N=n(fs," columns. Let\u2019s take a look at a few examples by creating a simple function that takes a random sample from the training set with the techniques we learned in "),ie=r(fs,"A",{href:!0});var Uu=l(ie);xs=n(Uu,"Chapter 5"),Uu.forEach(t),wt=n(fs,":"),fs.forEach(t),be=c(e),v(We.$$.fragment,e),Ys=c(e),v(ss.$$.fragment,e),ts=c(e),v(Ve.$$.fragment,e),ps=c(e),pe=r(e,"P",{});var $r=l(pe);Js=n($r,"This sample shows the diversity of reviews one typically finds online, ranging from positive to negative (and everything in between!). Although the example with the \u201Cmeh\u201D title is not very informative, the other titles look like decent summaries of the reviews themselves. Training a summarization model on all 400,000 reviews would take far too long on a single GPU, so instead we\u2019ll focus on generating summaries for a single domain of products. To get a feel for what domains we can choose from, let\u2019s convert "),Ye=r($r,"CODE",{});var Mu=l(Ye);Xs=n(Mu,"english_dataset"),Mu.forEach(t),Le=n($r," to a "),Es=r($r,"CODE",{});var Wu=l(Es);Ts=n(Wu,"pandas.DataFrame"),Wu.forEach(t),bt=n($r," and compute the number of reviews per product category:"),$r.forEach(t),qe=c(e),v(Je.$$.fragment,e),Qs=c(e),v(ms.$$.fragment,e),qs=c(e),ve=r(e,"P",{});var Nt=l(ve);rn=n(Nt,"The most popular products in the English dataset are about household items, clothing, and wireless electronics. To stick with the Amazon theme, though, let\u2019s focus on summarizing book reviews \u2014 after all, this is what the company was founded on! We can see two product categories that fit the bill ("),vt=r(Nt,"CODE",{});var Bu=l(vt);Zs=n(Bu,"book"),Bu.forEach(t),ga=n(Nt," and "),bs=r(Nt,"CODE",{});var Ku=l(bs);_a=n(Ku,"digital_ebook_purchase"),Ku.forEach(t),yt=n(Nt,"), so let\u2019s filter the datasets in both languages for just these products. As we saw in "),kt=r(Nt,"A",{href:!0});var Vu=l(kt);wa=n(Vu,"Chapter 5"),Vu.forEach(t),et=n(Nt,", the "),$t=r(Nt,"CODE",{});var Yu=l($t);zs=n(Yu,"Dataset.filter()"),Yu.forEach(t),ln=n(Nt," function allows us to slice a dataset very efficiently, so we can define a simple function to do this:"),Nt.forEach(t),jt=c(e),v(st.$$.fragment,e),ba=c(e),ze=r(e,"P",{});var Us=l(ze);vs=n(Us,"Now when we apply this function to "),hs=r(Us,"CODE",{});var Ju=l(hs);Mt=n(Ju,"english_dataset"),Ju.forEach(t),tt=n(Us," and "),Wt=r(Us,"CODE",{});var Xu=l(Wt);Bt=n(Xu,"spanish_dataset"),Xu.forEach(t),pn=n(Us,", the result will contain just those rows involving the book categories. Before applying the filter, let\u2019s switch the format of "),xt=r(Us,"CODE",{});var Qu=l(xt);Et=n(Qu,"english_dataset"),Qu.forEach(t),mn=n(Us," from "),Tt=r(Us,"CODE",{});var Zu=l(Tt);Xe=n(Zu,'"pandas"'),Zu.forEach(t),at=n(Us," back to "),Kt=r(Us,"CODE",{});var ed=l(Kt);Vt=n(ed,'"arrow"'),ed.forEach(t),hn=n(Us,":"),Us.forEach(t),va=c(e),v(nt.$$.fragment,e),qt=c(e),zt=r(e,"P",{});var sd=l(zt);cn=n(sd,"We can then apply the filter function, and as a sanity check let\u2019s inspect a sample of reviews to see if they are indeed about books:"),sd.forEach(t),Dt=c(e),v(ot.$$.fragment,e),ya=c(e),v(Oe.$$.fragment,e),ka=c(e),Ie=r(e,"P",{});var sn=l(Ie);un=n(sn,"Okay, we can see that the reviews are not strictly about books and might refer to things like calendars and electronic applications such as OneNote. Nevertheless, the domain seems about right to train a summarization model on. Before we look at various models that are suitable for this task, we have one last bit of data preparation to do: combining the English and Spanish reviews as a single "),Yt=r(sn,"CODE",{});var td=l(Yt);Jt=n(td,"DatasetDict"),td.forEach(t),dn=n(sn," object. \u{1F917} Datasets provides a handy "),Xt=r(sn,"CODE",{});var ad=l(Xt);Qt=n(ad,"concatenate_datasets()"),ad.forEach(t),fn=n(sn," function that (as the name suggests) will stack two "),Zt=r(sn,"CODE",{});var nd=l(Zt);$a=n(nd,"Dataset"),nd.forEach(t),St=n(sn," objects on top of each other. So, to create our bilingual dataset, we\u2019ll loop over each split, concatenate the datasets for that split, and shuffle the result to ensure our model doesn\u2019t overfit to a single language:"),sn.forEach(t),ja=c(e),v(Ds.$$.fragment,e),Ss=c(e),v(As.$$.fragment,e),Os=c(e),rt=r(e,"P",{});var od=l(rt);Cs=n(od,"This certainly looks like a mix of English and Spanish reviews! Now that we have a training corpus, one final thing to check is the distribution of words in the reviews and their titles. This is especially important for summarization tasks, where short reference summaries in the data can bias the model to only output one or two words in the generated summaries. The plots below show the word distributions, and we can see that the titles are heavily skewed toward just 1-2 words:"),od.forEach(t),xa=c(e),as=r(e,"DIV",{class:!0});var Sp=l(as);lt=r(Sp,"IMG",{class:!0,src:!0,alt:!0}),Ea=c(Sp),m=r(Sp,"IMG",{class:!0,src:!0,alt:!0}),Sp.forEach(t),gn=c(e),it=r(e,"P",{});var Ap=l(it);jo=n(Ap,"To deal with this, we\u2019ll filter out the examples with very short titles so that our model can produce more interesting summaries. Since we\u2019re dealing with English and Spanish texts, we can use a rough heuristic to split the titles on whitespace and then use our trusty "),Ps=r(Ap,"CODE",{});var rd=l(Ps);xo=n(rd,"Dataset.filter()"),rd.forEach(t),Eo=n(Ap," method as follows:"),Ap.forEach(t),ea=c(e),v(At.$$.fragment,e),_n=c(e),sa=r(e,"P",{});var ld=l(sa);Ot=n(ld,"Now that we\u2019ve prepared our corpus, let\u2019s take a look at a few possible Transformer models that one might fine-tune on it!"),ld.forEach(t),wn=c(e),Ls=r(e,"H2",{class:!0});var Op=l(Ls);ys=r(Op,"A",{id:!0,class:!0,href:!0});var id=l(ys);Ta=r(id,"SPAN",{});var pd=l(Ta);v(Ct.$$.fragment,pd),pd.forEach(t),id.forEach(t),qa=c(Op),za=r(Op,"SPAN",{});var md=l(za);Da=n(md,"Models for text summarization"),md.forEach(t),Op.forEach(t),bn=c(e),pt=r(e,"P",{});var Cp=l(pt);Pt=n(Cp,"If you think about it, text summarization is a similar sort of task to machine translation: we have a body of text like a review that we\u2019d like to \u201Ctranslate\u201D into a shorter version that captures the salient features of the input. Accordingly, most Transformer models for summarization adopt the encoder-decoder architecture that we first encountered in "),ta=r(Cp,"A",{href:!0});var hd=l(ta);To=n(hd,"Chapter 1"),hd.forEach(t),qo=n(Cp,", although there are some exceptions like the GPT family of models which can also be used for summarization in few-shot settings. The following table lists some popular pretrained models that can be fine-tuned for summarization."),Cp.forEach(t),vn=c(e),mt=r(e,"TABLE",{});var Pp=l(mt);Is=r(Pp,"THEAD",{});var cd=l(Is);Rs=r(cd,"TR",{});var jr=l(Rs);aa=r(jr,"TH",{align:!0});var ud=l(aa);zo=n(ud,"Transformer model"),ud.forEach(t),Do=c(jr),Lt=r(jr,"TH",{});var dd=l(Lt);So=n(dd,"Description"),dd.forEach(t),Sa=c(jr),na=r(jr,"TH",{align:!0});var fd=l(na);Ao=n(fd,"Multilingual?"),fd.forEach(t),jr.forEach(t),cd.forEach(t),Oo=c(Pp),Re=r(Pp,"TBODY",{});var Ms=l(Re);Fe=r(Ms,"TR",{});var xr=l(Fe);ht=r(xr,"TD",{align:!0});var gd=l(ht);It=r(gd,"A",{href:!0,rel:!0});var _d=l(It);Co=n(_d,"GPT-2"),_d.forEach(t),gd.forEach(t),Po=c(xr),cs=r(xr,"TD",{});var wd=l(cs);Lo=n(wd,"Although trained as an auto-regressive language model, you can make GPT-2 generate summaries by appending \u201CTL;DR\u201D at the end of the input text."),wd.forEach(t),Io=c(xr),oa=r(xr,"TD",{align:!0});var bd=l(oa);Ro=n(bd,"\u274C"),bd.forEach(t),xr.forEach(t),Aa=c(Ms),Fs=r(Ms,"TR",{});var Er=l(Fs);Fo=r(Er,"TD",{align:!0});var vd=l(Fo);yn=r(vd,"A",{href:!0,rel:!0});var yd=l(yn);Zp=n(yd,"PEGASUS"),yd.forEach(t),vd.forEach(t),em=c(Er),Ir=r(Er,"TD",{});var kd=l(Ir);sm=n(kd,"Uses a pretraining objective to predict masked sentences in multi-sentence texts. This pretraining objective is closer to summarization than vanilla language modeling and scores highly on popular benchmarks."),kd.forEach(t),tm=c(Er),Go=r(Er,"TD",{align:!0});var $d=l(Go);am=n($d,"\u274C"),$d.forEach(t),Er.forEach(t),nm=c(Ms),ra=r(Ms,"TR",{});var Tr=l(ra);No=r(Tr,"TD",{align:!0});var jd=l(No);kn=r(jd,"A",{href:!0,rel:!0});var xd=l(kn);om=n(xd,"T5"),xd.forEach(t),jd.forEach(t),rm=c(Tr),$n=r(Tr,"TD",{});var Lp=l($n);lm=n(Lp,"A universal Transformer architecture that formulates all tasks in a text-to-text framework; e.g., the input format for the model to summarize a document is "),Rr=r(Lp,"CODE",{});var Ed=l(Rr);im=n(Ed,"summarize: ARTICLE"),Ed.forEach(t),pm=n(Lp,"."),Lp.forEach(t),mm=c(Tr),Ho=r(Tr,"TD",{align:!0});var Td=l(Ho);hm=n(Td,"\u274C"),Td.forEach(t),Tr.forEach(t),cm=c(Ms),la=r(Ms,"TR",{});var qr=l(la);Uo=r(qr,"TD",{align:!0});var qd=l(Uo);jn=r(qd,"A",{href:!0,rel:!0});var zd=l(jn);um=n(zd,"mT5"),zd.forEach(t),qd.forEach(t),dm=c(qr),Fr=r(qr,"TD",{});var Dd=l(Fr);fm=n(Dd,"A multilingual version of T5, pretrained on the multilingual Common Crawl corpus (mC4), covering 101 languages."),Dd.forEach(t),gm=c(qr),Mo=r(qr,"TD",{align:!0});var Sd=l(Mo);_m=n(Sd,"\u2705"),Sd.forEach(t),qr.forEach(t),wm=c(Ms),ia=r(Ms,"TR",{});var zr=l(ia);Wo=r(zr,"TD",{align:!0});var Ad=l(Wo);xn=r(Ad,"A",{href:!0,rel:!0});var Od=l(xn);bm=n(Od,"BART"),Od.forEach(t),Ad.forEach(t),vm=c(zr),Gr=r(zr,"TD",{});var Cd=l(Gr);ym=n(Cd,"A novel Transformer architecture with both an encoder and a decoder stack trained to reconstruct corrupted input that combines the pretraining schemes of BERT and GPT-2."),Cd.forEach(t),km=c(zr),Bo=r(zr,"TD",{align:!0});var Pd=l(Bo);$m=n(Pd,"\u274C"),Pd.forEach(t),zr.forEach(t),jm=c(Ms),pa=r(Ms,"TR",{});var Dr=l(pa);Ko=r(Dr,"TD",{align:!0});var Ld=l(Ko);En=r(Ld,"A",{href:!0,rel:!0});var Id=l(En);xm=n(Id,"mBART-50"),Id.forEach(t),Ld.forEach(t),Em=c(Dr),Nr=r(Dr,"TD",{});var Rd=l(Nr);Tm=n(Rd,"A multilingual version of BART, pretrained on 50 languages."),Rd.forEach(t),qm=c(Dr),Vo=r(Dr,"TD",{align:!0});var Fd=l(Vo);zm=n(Fd,"\u2705"),Fd.forEach(t),Dr.forEach(t),Ms.forEach(t),Pp.forEach(t),Yl=c(e),Yo=r(e,"P",{});var Gd=l(Yo);Dm=n(Gd,"As you can see from this table, the majority of Transformer models for summarization (and indeed most NLP tasks) are monolingual. This is great if your task is in a \u201Chigh-resource\u201D language like English or German, but less so for the thousands of other languages in use across the world. Fortunately, there is a class of multilingual Transformer models, like mT5 and mBART, that come to the rescue. These models are pretrained using language modeling, but with a twist: instead of training on a corpus of one language, they are trained jointly on texts in over 50 languages at once!"),Gd.forEach(t),Jl=c(e),Oa=r(e,"P",{});var Ip=l(Oa);Sm=n(Ip,"We\u2019ll focus on mT5, an interesting architecture based on T5 that was pretrained in a text-to-text framework. In T5, every NLP task is formulated in terms of a prompt prefix like "),Hr=r(Ip,"CODE",{});var Nd=l(Hr);Am=n(Nd,"summarize:"),Nd.forEach(t),Om=n(Ip," which conditions the model to adapt the generated text to the prompt. As shown in the figure below, this makes T5 extremely versatile, as you can solve many tasks with a single model!"),Ip.forEach(t),Xl=c(e),ma=r(e,"DIV",{class:!0});var Rp=l(ma);Tn=r(Rp,"IMG",{class:!0,src:!0,alt:!0}),Cm=c(Rp),qn=r(Rp,"IMG",{class:!0,src:!0,alt:!0}),Rp.forEach(t),Ql=c(e),Jo=r(e,"P",{});var Hd=l(Jo);Pm=n(Hd,"mT5 doesn\u2019t use prefixes, but shares much of the versatility of T5 and has the advantage of being multilingual. Now that we\u2019ve picked a model, let\u2019s take a look at preparing our data for training."),Hd.forEach(t),Zl=c(e),v(Ca.$$.fragment,e),ei=c(e),ha=r(e,"H2",{class:!0});var Fp=l(ha);Pa=r(Fp,"A",{id:!0,class:!0,href:!0});var Ud=l(Pa);Ur=r(Ud,"SPAN",{});var Md=l(Ur);v(zn.$$.fragment,Md),Md.forEach(t),Ud.forEach(t),Lm=c(Fp),Mr=r(Fp,"SPAN",{});var Wd=l(Mr);Im=n(Wd,"Preprocessing the data"),Wd.forEach(t),Fp.forEach(t),si=c(e),v(Dn.$$.fragment,e),ti=c(e),La=r(e,"P",{});var Gp=l(La);Rm=n(Gp,"Our next task is to tokenize and encode our reviews and their titles. As usual, we begin by loading the tokenizer associated with the pretrained model checkpoint. We\u2019ll use "),Wr=r(Gp,"CODE",{});var Bd=l(Wr);Fm=n(Bd,"mt5-small"),Bd.forEach(t),Gm=n(Gp," as our checkpoint so we can fine-tune the model in a reasonable amount of time:"),Gp.forEach(t),ai=c(e),v(Sn.$$.fragment,e),ni=c(e),v(Ia.$$.fragment,e),oi=c(e),Xo=r(e,"P",{});var Kd=l(Xo);Nm=n(Kd,"Let\u2019s test out the mT5 tokenizer on a small example:"),Kd.forEach(t),ri=c(e),v(An.$$.fragment,e),li=c(e),v(On.$$.fragment,e),ii=c(e),us=r(e,"P",{});var Ht=l(us);Hm=n(Ht,"Here we can see the familiar "),Br=r(Ht,"CODE",{});var Vd=l(Br);Um=n(Vd,"input_ids"),Vd.forEach(t),Mm=n(Ht," and "),Kr=r(Ht,"CODE",{});var Yd=l(Kr);Wm=n(Yd,"attention_mask"),Yd.forEach(t),Bm=n(Ht," that we encountered in our first fine-tuning experiments back in "),Qo=r(Ht,"A",{href:!0});var Jd=l(Qo);Km=n(Jd,"Chapter 3"),Jd.forEach(t),Vm=n(Ht,". Let\u2019s decode these input IDs with the tokenizer\u2019s "),Vr=r(Ht,"CODE",{});var Xd=l(Vr);Ym=n(Xd,"convert_ids_to_tokens()"),Xd.forEach(t),Jm=n(Ht," function to see what kind of tokenizer we\u2019re dealing with:"),Ht.forEach(t),pi=c(e),v(Cn.$$.fragment,e),mi=c(e),v(Pn.$$.fragment,e),hi=c(e),Gs=r(e,"P",{});var tn=l(Gs);Xm=n(tn,"The special Unicode character "),Yr=r(tn,"CODE",{});var Qd=l(Yr);Qm=n(Qd,"\u2581"),Qd.forEach(t),Zm=n(tn," and end-of-sequence token "),Jr=r(tn,"CODE",{});var Zd=l(Jr);eh=n(Zd,"</s>"),Zd.forEach(t),sh=n(tn," indicate that we\u2019re dealing with the SentencePiece tokenizer, which is based on the Unigram segmentation algorithm discussed in "),Zo=r(tn,"A",{href:!0});var ef=l(Zo);th=n(ef,"Chapter 6"),ef.forEach(t),ah=n(tn,". Unigram is especially useful for multilingual corpora since it allows SentencePiece to be agnostic about accents, punctuation, and the fact that many languages, like Japanese, do not have whitespace characters."),tn.forEach(t),ci=c(e),Ra=r(e,"P",{});var Np=l(Ra);nh=n(Np,"To tokenize our corpus, we have to deal with a subtlety associated with summarization: because our labels are also text, it is possible that they exceed the model\u2019s maximum context size. This means we need to apply truncation to both the reviews and their titles to ensure we don\u2019t pass excessively long inputs to our model. The tokenizers in \u{1F917} Transformers provide a nifty "),Xr=r(Np,"CODE",{});var sf=l(Xr);oh=n(sf,"as_target_tokenizer()"),sf.forEach(t),rh=n(Np," function that allows you to tokenize the labels in parallel to the inputs. This is typically done using a context manager inside a preprocessing function that first encodes the inputs, and then encodes the labels as a separate column. Here is an example of such a function for mT5:"),Np.forEach(t),ui=c(e),v(Ln.$$.fragment,e),di=c(e),ds=r(e,"P",{});var Ut=l(ds);lh=n(Ut,"Let\u2019s walk through this code to understand what\u2019s happening. The first thing we\u2019ve done is define values for "),Qr=r(Ut,"CODE",{});var tf=l(Qr);ih=n(tf,"max_input_length"),tf.forEach(t),ph=n(Ut," and "),Zr=r(Ut,"CODE",{});var af=l(Zr);mh=n(af,"max_target_length"),af.forEach(t),hh=n(Ut,", which set the upper limits for how long our reviews and titles can be. Since the review body is typically much larger than the title, we\u2019ve scaled these values accordingly. Then, in the  "),el=r(Ut,"CODE",{});var nf=l(el);ch=n(nf,"preprocess_function()"),nf.forEach(t),uh=n(Ut," itself we can see the reviews are first tokenized, followed by the titles with "),sl=r(Ut,"CODE",{});var of=l(sl);dh=n(of,"as_target_tokenizer()"),of.forEach(t),fh=n(Ut,"."),Ut.forEach(t),fi=c(e),Rt=r(e,"P",{});var Sr=l(Rt);gh=n(Sr,"With "),tl=r(Sr,"CODE",{});var rf=l(tl);_h=n(rf,"preprocess_function()"),rf.forEach(t),wh=n(Sr,", it is then a simple matter to tokenize the whole corpus using the handy "),al=r(Sr,"CODE",{});var lf=l(al);bh=n(lf,"Dataset.map()"),lf.forEach(t),vh=n(Sr," function we\u2019ve used extensively throughout this course:"),Sr.forEach(t),gi=c(e),v(In.$$.fragment,e),_i=c(e),er=r(e,"P",{});var pf=l(er);yh=n(pf,"Now that the corpus has been preprocessed, let\u2019s take a look at some metrics that are commonly used for summarization. As we\u2019ll see, there is no silver bullet when it comes to measuring the quality of machine-generated text."),pf.forEach(t),wi=c(e),v(Fa.$$.fragment,e),bi=c(e),ca=r(e,"H2",{class:!0});var Hp=l(ca);Ga=r(Hp,"A",{id:!0,class:!0,href:!0});var mf=l(Ga);nl=r(mf,"SPAN",{});var hf=l(nl);v(Rn.$$.fragment,hf),hf.forEach(t),mf.forEach(t),kh=c(Hp),ol=r(Hp,"SPAN",{});var cf=l(ol);$h=n(cf,"Metrics for text summarization"),cf.forEach(t),Hp.forEach(t),vi=c(e),v(Fn.$$.fragment,e),yi=c(e),sr=r(e,"P",{});var uf=l(sr);jh=n(uf,"In comparison to most of the other tasks we\u2019ve covered in this course, measuring the performance of text generation tasks like summarization or translation is not as straightforward. For example, given a review like \u201CI loved reading the Hunger Games\u201D, there are multiple valid summaries, like \u201CI loved the Hunger Games\u201D or \u201CHunger Games is a great read\u201D. Clearly, applying some sort of exact match between the generated summary and the label is not a good solution \u2014 even humans would fare poorly under such a metric, because we all have our own writing style."),uf.forEach(t),ki=c(e),Na=r(e,"P",{});var Up=l(Na);xh=n(Up,"For summarization, one of the most commonly used metrics is the "),Gn=r(Up,"A",{href:!0,rel:!0});var df=l(Gn);Eh=n(df,"ROUGE score"),df.forEach(t),Th=n(Up," (short for Recall-Oriented Understudy for Gisting Evaluation). The basic idea behind this metric is to compare a generated summary against a set of reference summaries that are typically created by humans. To make this more precise, suppose we want to compare the following two summaries:"),Up.forEach(t),$i=c(e),v(Nn.$$.fragment,e),ji=c(e),Ft=r(e,"P",{});var Ar=l(Ft);qh=n(Ar,"One way to compare them could be to count the number of overlapping words, which in this case would be 6. However, this is a bit crude, so instead ROUGE is based on computing the "),rl=r(Ar,"EM",{});var ff=l(rl);zh=n(ff,"precision"),ff.forEach(t),Dh=n(Ar," and "),ll=r(Ar,"EM",{});var gf=l(ll);Sh=n(gf,"recall"),gf.forEach(t),Ah=n(Ar," scores for the overlap."),Ar.forEach(t),xi=c(e),v(Ha.$$.fragment,e),Ei=c(e),Hn=r(e,"P",{});var ku=l(Hn);Oh=n(ku,`For ROUGE, recall measures how much of the reference summary is captured by the generated one. If we are just comparing words, recall can be calculated according to the following formula:
`),Ti=fg(ku),ku.forEach(t),qi=c(e),Un=r(e,"P",{});var $u=l(Un);Ch=n($u,`For our simple example above, this formula gives a perfect recall of 6/6 = 1; i.e., all the words in the reference summary have been produced by the model. This may sound great, but imagine if our generated summary had been \u201CI really really loved reading the Hunger Games all night\u201D. This would also have perfect recall, but is arguably a worse summary since it is verbose. To deal with these scenarios we also compute the precision, which in the ROUGE context measures how much of the generated summary was relevant:
`),zi=fg($u),$u.forEach(t),Di=c(e),Ua=r(e,"P",{});var Mp=l(Ua);Ph=n(Mp,"Applying this to our verbose summary gives a precision of 6/10  = 0.6, which is considerably worse than the precision of 6/7 = 0.86 obtained by our shorter one. In practice, both precision and recall are usually computed, and then the F1-score (the harmonic mean of precision and recall) is reported. We can do this easily in \u{1F917} Datasets by first installing the "),il=r(Mp,"CODE",{});var _f=l(il);Lh=n(_f,"rouge_score"),_f.forEach(t),Ih=n(Mp," package:"),Mp.forEach(t),Si=c(e),v(Mn.$$.fragment,e),Ai=c(e),tr=r(e,"P",{});var wf=l(tr);Rh=n(wf,"and then loading the ROUGE metric as follows:"),wf.forEach(t),Oi=c(e),v(Wn.$$.fragment,e),Ci=c(e),Ma=r(e,"P",{});var Wp=l(Ma);Fh=n(Wp,"Then we can use the "),pl=r(Wp,"CODE",{});var bf=l(pl);Gh=n(bf,"rouge_score.compute()"),bf.forEach(t),Nh=n(Wp," function to calculate all the metrics at once:"),Wp.forEach(t),Pi=c(e),v(Bn.$$.fragment,e),Li=c(e),v(Kn.$$.fragment,e),Ii=c(e),Qe=r(e,"P",{});var Ws=l(Qe);Hh=n(Ws,"Whoa, there\u2019s a lot of information in that output \u2014 what does it all mean? First, \u{1F917} Datasets actually computes confidence intervals for precision, recall, and F1-score; these are the "),ml=r(Ws,"CODE",{});var vf=l(ml);Uh=n(vf,"low"),vf.forEach(t),Mh=n(Ws,", "),hl=r(Ws,"CODE",{});var yf=l(hl);Wh=n(yf,"mid"),yf.forEach(t),Bh=n(Ws,", and "),cl=r(Ws,"CODE",{});var kf=l(cl);Kh=n(kf,"high"),kf.forEach(t),Vh=n(Ws," attributes you can see here. Moreover, \u{1F917} Datasets computes a variety of ROUGE scores which are based on different types of text granularity when comparing the generated and reference summaries. The "),ul=r(Ws,"CODE",{});var $f=l(ul);Yh=n($f,"rouge1"),$f.forEach(t),Jh=n(Ws," variant is the overlap of unigrams \u2014 this is just a fancy way of saying the overlap of words and is exactly the metric we\u2019ve discussed above. To verify this, let\u2019s pull out the "),dl=r(Ws,"CODE",{});var jf=l(dl);Xh=n(jf,"mid"),jf.forEach(t),Qh=n(Ws," value of our scores:"),Ws.forEach(t),Ri=c(e),v(Vn.$$.fragment,e),Fi=c(e),v(Yn.$$.fragment,e),Gi=c(e),Ze=r(e,"P",{});var Bs=l(Ze);Zh=n(Bs,"Great, the precision and recall numbers match up! Now what about those other ROUGE scores? "),fl=r(Bs,"CODE",{});var xf=l(fl);ec=n(xf,"rouge2"),xf.forEach(t),sc=n(Bs," measures the overlap between bigrams (think the overlap of pairs of words), while "),gl=r(Bs,"CODE",{});var Ef=l(gl);tc=n(Ef,"rougeL"),Ef.forEach(t),ac=n(Bs," and "),_l=r(Bs,"CODE",{});var Tf=l(_l);nc=n(Tf,"rougeLsum"),Tf.forEach(t),oc=n(Bs," measure the longest matching sequences of words by looking for the longest common substrings in the generated and reference summaries. The \u201Csum\u201D in "),wl=r(Bs,"CODE",{});var qf=l(wl);rc=n(qf,"rougeLsum"),qf.forEach(t),lc=n(Bs," refers to the fact that this metric is computed over a whole summary, while "),bl=r(Bs,"CODE",{});var zf=l(bl);ic=n(zf,"rougeL"),zf.forEach(t),pc=n(Bs," is computed as the average over individual sentences."),Bs.forEach(t),Ni=c(e),v(Wa.$$.fragment,e),Hi=c(e),ar=r(e,"P",{});var Df=l(ar);mc=n(Df,"We\u2019ll use these ROUGE scores to track the performance of our model, but before doing that let\u2019s do something every good NLP practitioner should do: create a strong, yet simple baseline!"),Df.forEach(t),Ui=c(e),ua=r(e,"H3",{class:!0});var Bp=l(ua);Ba=r(Bp,"A",{id:!0,class:!0,href:!0});var Sf=l(Ba);vl=r(Sf,"SPAN",{});var Af=l(vl);v(Jn.$$.fragment,Af),Af.forEach(t),Sf.forEach(t),hc=c(Bp),yl=r(Bp,"SPAN",{});var Of=l(yl);cc=n(Of,"Creating a strong baseline"),Of.forEach(t),Bp.forEach(t),Mi=c(e),Ns=r(e,"P",{});var an=l(Ns);uc=n(an,"A common baseline for text summarization is to simply take the first three sentences of an article, often called the "),kl=r(an,"EM",{});var Cf=l(kl);dc=n(Cf,"lead-3"),Cf.forEach(t),fc=n(an," baseline. We could use full stops to track the sentence boundaries, but this will fail on acronyms like \u201CU.S.\u201D or \u201CU.N.\u201D \u2014 so instead we\u2019ll use the "),$l=r(an,"CODE",{});var Pf=l($l);gc=n(Pf,"nltk"),Pf.forEach(t),_c=n(an," library, which includes a better algorithm to handle these cases. You can install the package using "),jl=r(an,"CODE",{});var Lf=l(jl);wc=n(Lf,"pip"),Lf.forEach(t),bc=n(an," as follows:"),an.forEach(t),Wi=c(e),v(Xn.$$.fragment,e),Bi=c(e),nr=r(e,"P",{});var If=l(nr);vc=n(If,"and then download the punctuation rules:"),If.forEach(t),Ki=c(e),v(Qn.$$.fragment,e),Vi=c(e),Ka=r(e,"P",{});var Kp=l(Ka);yc=n(Kp,"Next, we import the sentence tokenizer from "),xl=r(Kp,"CODE",{});var Rf=l(xl);kc=n(Rf,"nltk"),Rf.forEach(t),$c=n(Kp," and create a simple function to extract the first three sentences in a review. The convention in text summarization is to separate each summary with a newline, so let\u2019s also include this and test it on a training example:"),Kp.forEach(t),Yi=c(e),v(Zn.$$.fragment,e),Ji=c(e),v(eo.$$.fragment,e),Xi=c(e),or=r(e,"P",{});var Ff=l(or);jc=n(Ff,"This seems to work, so let\u2019s now implement a function that extracts these \u201Csummaries\u201D from a dataset and computes the ROUGE scores for the baseline:"),Ff.forEach(t),Qi=c(e),v(so.$$.fragment,e),Zi=c(e),rr=r(e,"P",{});var Gf=l(rr);xc=n(Gf,"We can then use this function to compute the ROUGE scores over the validation set and prettify them a bit using Pandas:"),Gf.forEach(t),ep=c(e),v(to.$$.fragment,e),sp=c(e),v(ao.$$.fragment,e),tp=c(e),Va=r(e,"P",{});var Vp=l(Va);Ec=n(Vp,"We can see that the "),El=r(Vp,"CODE",{});var Nf=l(El);Tc=n(Nf,"rouge2"),Nf.forEach(t),qc=n(Vp," score is significantly lower than the rest; this likely reflects the fact that review titles are typically concise and so the lead-3 baseline is too verbose. Now that we have a good baseline to work from, let\u2019s turn our attention toward fine-tuning mT5!"),Vp.forEach(t),ap=c(e),ut.l(e),lr=c(e),v(Ya.$$.fragment,e),np=c(e),ir=r(e,"P",{});var Hf=l(ir);zc=n(Hf,"The next thing we need to do is log in to the Hugging Face Hub. If you\u2019re running this code in a notebook, you can do so with the following utility function:"),Hf.forEach(t),op=c(e),v(no.$$.fragment,e),rp=c(e),pr=r(e,"P",{});var Uf=l(pr);Dc=n(Uf,"which will display a widget where you can enter your credentials. Alternatively, you can run this command in your terminal and log in there:"),Uf.forEach(t),lp=c(e),v(oo.$$.fragment,e),ip=c(e),Ce&&Ce.l(e),mr=c(e),Ja=r(e,"P",{});var Yp=l(Ja);Sc=n(Yp,"Next, we need to define a data collator for our sequence-to-sequence task. Since mT5 is an encoder-decoder Transformer model, one subtlety with preparing our batches is that during decoding we need to shift the labels to the right by one. This is required to ensure that the decoder only sees the previous ground truth labels and not the current or future ones, which would be easy for the model to memorize. This is similar to how masked self-attention is applied to the inputs in a task like "),hr=r(Yp,"A",{href:!0});var Mf=l(hr);Ac=n(Mf,"causal language modeling"),Mf.forEach(t),Oc=n(Yp,"."),Yp.forEach(t),pp=c(e),Hs=r(e,"P",{});var nn=l(Hs);Cc=n(nn,"Luckily, \u{1F917} Transformers provides a "),Tl=r(nn,"CODE",{});var Wf=l(Tl);Pc=n(Wf,"DataCollatorForSeq2Seq"),Wf.forEach(t),Lc=n(nn," collator that will dynamically pad the inputs and the labels for us. To instantiate this collator, we simply need to provide the "),ql=r(nn,"CODE",{});var Bf=l(ql);Ic=n(Bf,"tokenizer"),Bf.forEach(t),Rc=n(nn," and "),zl=r(nn,"CODE",{});var Kf=l(zl);Fc=n(Kf,"model"),Kf.forEach(t),Gc=n(nn,":"),nn.forEach(t),mp=c(e),ft.l(e),cr=c(e),ur=r(e,"P",{});var Vf=l(ur);Nc=n(Vf,"Let\u2019s see what this collator produces when fed a small batch of examples. First, we need to remove the columns with strings because the collator won\u2019t know how to pad these elements:"),Vf.forEach(t),hp=c(e),v(ro.$$.fragment,e),cp=c(e),Gt=r(e,"P",{});var Or=l(Gt);Hc=n(Or,"Since the collator expects a list of "),Dl=r(Or,"CODE",{});var Yf=l(Dl);Uc=n(Yf,"dict"),Yf.forEach(t),Mc=n(Or,"s, where each "),Sl=r(Or,"CODE",{});var Jf=l(Sl);Wc=n(Jf,"dict"),Jf.forEach(t),Bc=n(Or," represents a single example in the dataset, we also need to wrangle the data into the expected format before passing it to the data collator:"),Or.forEach(t),up=c(e),v(lo.$$.fragment,e),dp=c(e),v(io.$$.fragment,e),fp=c(e),xe=r(e,"P",{});var Ge=l(xe);Kc=n(Ge,"The main thing to notice here is that the first example is longer than the second one, so the "),Al=r(Ge,"CODE",{});var Xf=l(Al);Vc=n(Xf,"input_ids"),Xf.forEach(t),Yc=n(Ge," and "),Ol=r(Ge,"CODE",{});var Qf=l(Ol);Jc=n(Qf,"attention_mask"),Qf.forEach(t),Xc=n(Ge," of the second example have been padded on the right with a "),Cl=r(Ge,"CODE",{});var Zf=l(Cl);Qc=n(Zf,"[PAD]"),Zf.forEach(t),Zc=n(Ge," token (whose ID is "),Pl=r(Ge,"CODE",{});var eg=l(Pl);eu=n(eg,"0"),eg.forEach(t),su=n(Ge,"). Similarly, we can see that the "),Ll=r(Ge,"CODE",{});var sg=l(Ll);tu=n(sg,"labels"),sg.forEach(t),au=n(Ge," have been padded with "),Il=r(Ge,"CODE",{});var tg=l(Il);nu=n(tg,"-100"),tg.forEach(t),ou=n(Ge,"s, to make sure the padding tokens are ignored by the loss function. And finally, we can see a new "),Rl=r(Ge,"CODE",{});var ag=l(Rl);ru=n(ag,"decoder_input_ids"),ag.forEach(t),lu=n(Ge," which has shifted the labels to the right by inserting a "),Fl=r(Ge,"CODE",{});var ng=l(Fl);iu=n(ng,"[PAD]"),ng.forEach(t),pu=n(Ge," token in the first entry."),Ge.forEach(t),gp=c(e),_t.l(e),dr=c(e),Pe&&Pe.l(e),fr=c(e),da=r(e,"H2",{class:!0});var Jp=l(da);Xa=r(Jp,"A",{id:!0,class:!0,href:!0});var og=l(Xa);Gl=r(og,"SPAN",{});var rg=l(Gl);v(po.$$.fragment,rg),rg.forEach(t),og.forEach(t),mu=c(Jp),Nl=r(Jp,"SPAN",{});var lg=l(Nl);hu=n(lg,"Using your fine-tuned model"),lg.forEach(t),Jp.forEach(t),_p=c(e),Qa=r(e,"P",{});var Xp=l(Qa);cu=n(Xp,"Once you\u2019ve pushed the model to the Hub, you can play with it either via the inference widget or with a "),Hl=r(Xp,"CODE",{});var ig=l(Hl);uu=n(ig,"pipeline"),ig.forEach(t),du=n(Xp," object, as follows:"),Xp.forEach(t),wp=c(e),v(mo.$$.fragment,e),bp=c(e),gr=r(e,"P",{});var pg=l(gr);fu=n(pg,"We can feed some examples from the test set (which the model has not seen) to our pipeline to get a feel for the quality of the summaries. First let\u2019s implement a simple function to show the review, title, and generated summary together:"),pg.forEach(t),vp=c(e),v(ho.$$.fragment,e),yp=c(e),_r=r(e,"P",{});var mg=l(_r);gu=n(mg,"Let\u2019s take a look at one of the English examples we get:"),mg.forEach(t),kp=c(e),v(co.$$.fragment,e),$p=c(e),v(uo.$$.fragment,e),jp=c(e),Za=r(e,"P",{});var Qp=l(Za);_u=n(Qp,"This is not too bad! We can see that our model has actually been able to perform "),Ul=r(Qp,"EM",{});var hg=l(Ul);wu=n(hg,"abstractive"),hg.forEach(t),bu=n(Qp," summarization by augmenting parts of the review with new words. And perhaps the coolest aspect of our model is that it is bilingual, so we can also generate summaries of Spanish reviews:"),Qp.forEach(t),xp=c(e),v(fo.$$.fragment,e),Ep=c(e),v(go.$$.fragment,e),Tp=c(e),wr=r(e,"P",{});var cg=l(wr);vu=n(cg,"The summary translates into \u201CVery easy to read\u201D in English, which we can see in this case was extracted directly from the review. Nevertheless, this shows the versatility of the mT5 model and has given you a taste of what it\u2019s like to deal with a multilingual corpus!"),cg.forEach(t),qp=c(e),br=r(e,"P",{});var ug=l(br);yu=n(ug,"Next, we\u2019ll turn our attention to a slightly more complex task: training a language model from scratch."),ug.forEach(t),this.h()},h(){f(u,"name","hf:doc:metadata"),f(u,"content",JSON.stringify(Mg)),f(x,"id","summarization"),f(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(x,"href","#summarization"),f(C,"class","relative group"),f(M,"href","https://huggingface.co/models?pipeline_tag=summarization&sort=downloads"),f(M,"rel","nofollow"),f(oe,"href","https://huggingface.co/huggingface-course/mt5-small-finetuned-amazon-en-es"),f(oe,"rel","nofollow"),Cr(H.src,ye="https://hf.space/gradioiframe/course-demos/mt5-small-finetuned-amazon-en-es/+")||f(H,"src",ye),f(H,"frameborder","0"),f(H,"height","400"),f(H,"title","Gradio app"),f(H,"class","block dark:hidden container p-0 flex-grow space-iframe"),f(H,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),f(H,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),Cr(ee.src,ke="https://hf.space/gradioiframe/course-demos/mt5-small-finetuned-amazon-en-es-darkmode/+")||f(ee,"src",ke),f(ee,"frameborder","0"),f(ee,"height","400"),f(ee,"title","Gradio app"),f(ee,"class","hidden dark:block container p-0 flex-grow space-iframe"),f(ee,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),f(ee,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),f(w,"id","preparing-a-multilingual-corpus"),f(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(w,"href","#preparing-a-multilingual-corpus"),f(me,"class","relative group"),f(ae,"href","https://huggingface.co/datasets/amazon_reviews_multi"),f(ae,"rel","nofollow"),f(ie,"href","/course/chapter5"),f(kt,"href","/course/chapter5"),f(lt,"class","block dark:hidden"),Cr(lt.src,$o="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/review-lengths.svg")||f(lt,"src",$o),f(lt,"alt","Word count distributions for the review titles and texts."),f(m,"class","hidden dark:block"),Cr(m.src,q="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/review-lengths-dark.svg")||f(m,"src",q),f(m,"alt","Word count distributions for the review titles and texts."),f(as,"class","flex justify-center"),f(ys,"id","models-for-text-summarization"),f(ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ys,"href","#models-for-text-summarization"),f(Ls,"class","relative group"),f(ta,"href","/course/chapter1"),f(aa,"align","center"),f(na,"align","center"),f(It,"href","https://huggingface.co/gpt2-xl"),f(It,"rel","nofollow"),f(ht,"align","center"),f(oa,"align","center"),f(yn,"href","https://huggingface.co/google/pegasus-large"),f(yn,"rel","nofollow"),f(Fo,"align","center"),f(Go,"align","center"),f(kn,"href","https://huggingface.co/t5-base"),f(kn,"rel","nofollow"),f(No,"align","center"),f(Ho,"align","center"),f(jn,"href","https://huggingface.co/google/mt5-base"),f(jn,"rel","nofollow"),f(Uo,"align","center"),f(Mo,"align","center"),f(xn,"href","https://huggingface.co/facebook/bart-base"),f(xn,"rel","nofollow"),f(Wo,"align","center"),f(Bo,"align","center"),f(En,"href","https://huggingface.co/facebook/mbart-large-50"),f(En,"rel","nofollow"),f(Ko,"align","center"),f(Vo,"align","center"),f(Tn,"class","block dark:hidden"),Cr(Tn.src,xu="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/t5.svg")||f(Tn,"src",xu),f(Tn,"alt","Different tasks performed by the T5 architecture."),f(qn,"class","hidden dark:block"),Cr(qn.src,Eu="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/t5-dark.svg")||f(qn,"src",Eu),f(qn,"alt","Different tasks performed by the T5 architecture."),f(ma,"class","flex justify-center"),f(Pa,"id","preprocessing-the-data"),f(Pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Pa,"href","#preprocessing-the-data"),f(ha,"class","relative group"),f(Qo,"href","/course/chapter3"),f(Zo,"href","/course/chapter6"),f(Ga,"id","metrics-for-text-summarization"),f(Ga,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ga,"href","#metrics-for-text-summarization"),f(ca,"class","relative group"),f(Gn,"href","https://en.wikipedia.org/wiki/ROUGE_(metric)"),f(Gn,"rel","nofollow"),Ti.a=null,zi.a=null,f(Ba,"id","creating-a-strong-baseline"),f(Ba,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ba,"href","#creating-a-strong-baseline"),f(ua,"class","relative group"),f(hr,"href","/course/chapter7/6"),f(Xa,"id","using-your-finetuned-model"),f(Xa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Xa,"href","#using-your-finetuned-model"),f(da,"class","relative group")},m(e,p){s(document.head,u),i(e,j,p),y(d,e,p),i(e,E,p),i(e,C,p),s(C,x),s(x,A),y(P,A,null),s(C,T),s(C,S),s(S,I),i(e,D,p),_o[O].m(e,p),i(e,J,p),i(e,X,p),s(X,Q),s(X,W),s(W,Z),s(X,L),i(e,U,p),y(te,e,p),i(e,F,p),i(e,B,p),s(B,ne),s(B,M),s(M,le),s(B,Y),s(B,oe),s(oe,fe),s(B,we),i(e,Ee,p),i(e,H,p),i(e,ue,p),i(e,ee,p),i(e,$e,p),i(e,re,p),s(re,De),i(e,ge,p),i(e,me,p),s(me,w),s(w,R),y(he,R,null),s(me,$),s(me,K),s(K,Te),i(e,_e,p),i(e,de,p),s(de,Ae),s(de,ae),s(ae,Ne),s(de,ns),i(e,He,p),y(se,e,p),i(e,Be,p),y(je,e,p),i(e,ks,p),i(e,ce,p),s(ce,gs),s(ce,_s),s(_s,$s),s(ce,Ue),s(ce,os),s(os,es),s(ce,rs),s(ce,Ke),s(Ke,Vs),s(ce,ls),s(ce,Se),s(Se,ws),s(ce,js),s(ce,Me),s(Me,is),s(ce,N),s(ce,ie),s(ie,xs),s(ce,wt),i(e,be,p),y(We,e,p),i(e,Ys,p),y(ss,e,p),i(e,ts,p),y(Ve,e,p),i(e,ps,p),i(e,pe,p),s(pe,Js),s(pe,Ye),s(Ye,Xs),s(pe,Le),s(pe,Es),s(Es,Ts),s(pe,bt),i(e,qe,p),y(Je,e,p),i(e,Qs,p),y(ms,e,p),i(e,qs,p),i(e,ve,p),s(ve,rn),s(ve,vt),s(vt,Zs),s(ve,ga),s(ve,bs),s(bs,_a),s(ve,yt),s(ve,kt),s(kt,wa),s(ve,et),s(ve,$t),s($t,zs),s(ve,ln),i(e,jt,p),y(st,e,p),i(e,ba,p),i(e,ze,p),s(ze,vs),s(ze,hs),s(hs,Mt),s(ze,tt),s(ze,Wt),s(Wt,Bt),s(ze,pn),s(ze,xt),s(xt,Et),s(ze,mn),s(ze,Tt),s(Tt,Xe),s(ze,at),s(ze,Kt),s(Kt,Vt),s(ze,hn),i(e,va,p),y(nt,e,p),i(e,qt,p),i(e,zt,p),s(zt,cn),i(e,Dt,p),y(ot,e,p),i(e,ya,p),y(Oe,e,p),i(e,ka,p),i(e,Ie,p),s(Ie,un),s(Ie,Yt),s(Yt,Jt),s(Ie,dn),s(Ie,Xt),s(Xt,Qt),s(Ie,fn),s(Ie,Zt),s(Zt,$a),s(Ie,St),i(e,ja,p),y(Ds,e,p),i(e,Ss,p),y(As,e,p),i(e,Os,p),i(e,rt,p),s(rt,Cs),i(e,xa,p),i(e,as,p),s(as,lt),s(as,Ea),s(as,m),i(e,gn,p),i(e,it,p),s(it,jo),s(it,Ps),s(Ps,xo),s(it,Eo),i(e,ea,p),y(At,e,p),i(e,_n,p),i(e,sa,p),s(sa,Ot),i(e,wn,p),i(e,Ls,p),s(Ls,ys),s(ys,Ta),y(Ct,Ta,null),s(Ls,qa),s(Ls,za),s(za,Da),i(e,bn,p),i(e,pt,p),s(pt,Pt),s(pt,ta),s(ta,To),s(pt,qo),i(e,vn,p),i(e,mt,p),s(mt,Is),s(Is,Rs),s(Rs,aa),s(aa,zo),s(Rs,Do),s(Rs,Lt),s(Lt,So),s(Rs,Sa),s(Rs,na),s(na,Ao),s(mt,Oo),s(mt,Re),s(Re,Fe),s(Fe,ht),s(ht,It),s(It,Co),s(Fe,Po),s(Fe,cs),s(cs,Lo),s(Fe,Io),s(Fe,oa),s(oa,Ro),s(Re,Aa),s(Re,Fs),s(Fs,Fo),s(Fo,yn),s(yn,Zp),s(Fs,em),s(Fs,Ir),s(Ir,sm),s(Fs,tm),s(Fs,Go),s(Go,am),s(Re,nm),s(Re,ra),s(ra,No),s(No,kn),s(kn,om),s(ra,rm),s(ra,$n),s($n,lm),s($n,Rr),s(Rr,im),s($n,pm),s(ra,mm),s(ra,Ho),s(Ho,hm),s(Re,cm),s(Re,la),s(la,Uo),s(Uo,jn),s(jn,um),s(la,dm),s(la,Fr),s(Fr,fm),s(la,gm),s(la,Mo),s(Mo,_m),s(Re,wm),s(Re,ia),s(ia,Wo),s(Wo,xn),s(xn,bm),s(ia,vm),s(ia,Gr),s(Gr,ym),s(ia,km),s(ia,Bo),s(Bo,$m),s(Re,jm),s(Re,pa),s(pa,Ko),s(Ko,En),s(En,xm),s(pa,Em),s(pa,Nr),s(Nr,Tm),s(pa,qm),s(pa,Vo),s(Vo,zm),i(e,Yl,p),i(e,Yo,p),s(Yo,Dm),i(e,Jl,p),i(e,Oa,p),s(Oa,Sm),s(Oa,Hr),s(Hr,Am),s(Oa,Om),i(e,Xl,p),i(e,ma,p),s(ma,Tn),s(ma,Cm),s(ma,qn),i(e,Ql,p),i(e,Jo,p),s(Jo,Pm),i(e,Zl,p),y(Ca,e,p),i(e,ei,p),i(e,ha,p),s(ha,Pa),s(Pa,Ur),y(zn,Ur,null),s(ha,Lm),s(ha,Mr),s(Mr,Im),i(e,si,p),y(Dn,e,p),i(e,ti,p),i(e,La,p),s(La,Rm),s(La,Wr),s(Wr,Fm),s(La,Gm),i(e,ai,p),y(Sn,e,p),i(e,ni,p),y(Ia,e,p),i(e,oi,p),i(e,Xo,p),s(Xo,Nm),i(e,ri,p),y(An,e,p),i(e,li,p),y(On,e,p),i(e,ii,p),i(e,us,p),s(us,Hm),s(us,Br),s(Br,Um),s(us,Mm),s(us,Kr),s(Kr,Wm),s(us,Bm),s(us,Qo),s(Qo,Km),s(us,Vm),s(us,Vr),s(Vr,Ym),s(us,Jm),i(e,pi,p),y(Cn,e,p),i(e,mi,p),y(Pn,e,p),i(e,hi,p),i(e,Gs,p),s(Gs,Xm),s(Gs,Yr),s(Yr,Qm),s(Gs,Zm),s(Gs,Jr),s(Jr,eh),s(Gs,sh),s(Gs,Zo),s(Zo,th),s(Gs,ah),i(e,ci,p),i(e,Ra,p),s(Ra,nh),s(Ra,Xr),s(Xr,oh),s(Ra,rh),i(e,ui,p),y(Ln,e,p),i(e,di,p),i(e,ds,p),s(ds,lh),s(ds,Qr),s(Qr,ih),s(ds,ph),s(ds,Zr),s(Zr,mh),s(ds,hh),s(ds,el),s(el,ch),s(ds,uh),s(ds,sl),s(sl,dh),s(ds,fh),i(e,fi,p),i(e,Rt,p),s(Rt,gh),s(Rt,tl),s(tl,_h),s(Rt,wh),s(Rt,al),s(al,bh),s(Rt,vh),i(e,gi,p),y(In,e,p),i(e,_i,p),i(e,er,p),s(er,yh),i(e,wi,p),y(Fa,e,p),i(e,bi,p),i(e,ca,p),s(ca,Ga),s(Ga,nl),y(Rn,nl,null),s(ca,kh),s(ca,ol),s(ol,$h),i(e,vi,p),y(Fn,e,p),i(e,yi,p),i(e,sr,p),s(sr,jh),i(e,ki,p),i(e,Na,p),s(Na,xh),s(Na,Gn),s(Gn,Eh),s(Na,Th),i(e,$i,p),y(Nn,e,p),i(e,ji,p),i(e,Ft,p),s(Ft,qh),s(Ft,rl),s(rl,zh),s(Ft,Dh),s(Ft,ll),s(ll,Sh),s(Ft,Ah),i(e,xi,p),y(Ha,e,p),i(e,Ei,p),i(e,Hn,p),s(Hn,Oh),Ti.m(bg,Hn),i(e,qi,p),i(e,Un,p),s(Un,Ch),zi.m(vg,Un),i(e,Di,p),i(e,Ua,p),s(Ua,Ph),s(Ua,il),s(il,Lh),s(Ua,Ih),i(e,Si,p),y(Mn,e,p),i(e,Ai,p),i(e,tr,p),s(tr,Rh),i(e,Oi,p),y(Wn,e,p),i(e,Ci,p),i(e,Ma,p),s(Ma,Fh),s(Ma,pl),s(pl,Gh),s(Ma,Nh),i(e,Pi,p),y(Bn,e,p),i(e,Li,p),y(Kn,e,p),i(e,Ii,p),i(e,Qe,p),s(Qe,Hh),s(Qe,ml),s(ml,Uh),s(Qe,Mh),s(Qe,hl),s(hl,Wh),s(Qe,Bh),s(Qe,cl),s(cl,Kh),s(Qe,Vh),s(Qe,ul),s(ul,Yh),s(Qe,Jh),s(Qe,dl),s(dl,Xh),s(Qe,Qh),i(e,Ri,p),y(Vn,e,p),i(e,Fi,p),y(Yn,e,p),i(e,Gi,p),i(e,Ze,p),s(Ze,Zh),s(Ze,fl),s(fl,ec),s(Ze,sc),s(Ze,gl),s(gl,tc),s(Ze,ac),s(Ze,_l),s(_l,nc),s(Ze,oc),s(Ze,wl),s(wl,rc),s(Ze,lc),s(Ze,bl),s(bl,ic),s(Ze,pc),i(e,Ni,p),y(Wa,e,p),i(e,Hi,p),i(e,ar,p),s(ar,mc),i(e,Ui,p),i(e,ua,p),s(ua,Ba),s(Ba,vl),y(Jn,vl,null),s(ua,hc),s(ua,yl),s(yl,cc),i(e,Mi,p),i(e,Ns,p),s(Ns,uc),s(Ns,kl),s(kl,dc),s(Ns,fc),s(Ns,$l),s($l,gc),s(Ns,_c),s(Ns,jl),s(jl,wc),s(Ns,bc),i(e,Wi,p),y(Xn,e,p),i(e,Bi,p),i(e,nr,p),s(nr,vc),i(e,Ki,p),y(Qn,e,p),i(e,Vi,p),i(e,Ka,p),s(Ka,yc),s(Ka,xl),s(xl,kc),s(Ka,$c),i(e,Yi,p),y(Zn,e,p),i(e,Ji,p),y(eo,e,p),i(e,Xi,p),i(e,or,p),s(or,jc),i(e,Qi,p),y(so,e,p),i(e,Zi,p),i(e,rr,p),s(rr,xc),i(e,ep,p),y(to,e,p),i(e,sp,p),y(ao,e,p),i(e,tp,p),i(e,Va,p),s(Va,Ec),s(Va,El),s(El,Tc),s(Va,qc),i(e,ap,p),wo[ct].m(e,p),i(e,lr,p),y(Ya,e,p),i(e,np,p),i(e,ir,p),s(ir,zc),i(e,op,p),y(no,e,p),i(e,rp,p),i(e,pr,p),s(pr,Dc),i(e,lp,p),y(oo,e,p),i(e,ip,p),Ce&&Ce.m(e,p),i(e,mr,p),i(e,Ja,p),s(Ja,Sc),s(Ja,hr),s(hr,Ac),s(Ja,Oc),i(e,pp,p),i(e,Hs,p),s(Hs,Cc),s(Hs,Tl),s(Tl,Pc),s(Hs,Lc),s(Hs,ql),s(ql,Ic),s(Hs,Rc),s(Hs,zl),s(zl,Fc),s(Hs,Gc),i(e,mp,p),bo[dt].m(e,p),i(e,cr,p),i(e,ur,p),s(ur,Nc),i(e,hp,p),y(ro,e,p),i(e,cp,p),i(e,Gt,p),s(Gt,Hc),s(Gt,Dl),s(Dl,Uc),s(Gt,Mc),s(Gt,Sl),s(Sl,Wc),s(Gt,Bc),i(e,up,p),y(lo,e,p),i(e,dp,p),y(io,e,p),i(e,fp,p),i(e,xe,p),s(xe,Kc),s(xe,Al),s(Al,Vc),s(xe,Yc),s(xe,Ol),s(Ol,Jc),s(xe,Xc),s(xe,Cl),s(Cl,Qc),s(xe,Zc),s(xe,Pl),s(Pl,eu),s(xe,su),s(xe,Ll),s(Ll,tu),s(xe,au),s(xe,Il),s(Il,nu),s(xe,ou),s(xe,Rl),s(Rl,ru),s(xe,lu),s(xe,Fl),s(Fl,iu),s(xe,pu),i(e,gp,p),vo[gt].m(e,p),i(e,dr,p),Pe&&Pe.m(e,p),i(e,fr,p),i(e,da,p),s(da,Xa),s(Xa,Gl),y(po,Gl,null),s(da,mu),s(da,Nl),s(Nl,hu),i(e,_p,p),i(e,Qa,p),s(Qa,cu),s(Qa,Hl),s(Hl,uu),s(Qa,du),i(e,wp,p),y(mo,e,p),i(e,bp,p),i(e,gr,p),s(gr,fu),i(e,vp,p),y(ho,e,p),i(e,yp,p),i(e,_r,p),s(_r,gu),i(e,kp,p),y(co,e,p),i(e,$p,p),y(uo,e,p),i(e,jp,p),i(e,Za,p),s(Za,_u),s(Za,Ul),s(Ul,wu),s(Za,bu),i(e,xp,p),y(fo,e,p),i(e,Ep,p),y(go,e,p),i(e,Tp,p),i(e,wr,p),s(wr,vu),i(e,qp,p),i(e,br,p),s(br,yu),zp=!0},p(e,[p]){const yo={};p&1&&(yo.fw=e[0]),d.$set(yo);let vr=O;O=qu(e),O!==vr&&(Lr(),_(_o[vr],1,1,()=>{_o[vr]=null}),Pr(),G=_o[O],G||(G=_o[O]=Tu[O](e),G.c()),g(G,1),G.m(J.parentNode,J));const Ml={};p&2&&(Ml.$$scope={dirty:p,ctx:e}),Ve.$set(Ml);const Wl={};p&2&&(Wl.$$scope={dirty:p,ctx:e}),Ca.$set(Wl);const ko={};p&2&&(ko.$$scope={dirty:p,ctx:e}),Ia.$set(ko);const Bl={};p&2&&(Bl.$$scope={dirty:p,ctx:e}),Fa.$set(Bl);const fa={};p&2&&(fa.$$scope={dirty:p,ctx:e}),Ha.$set(fa);const Kl={};p&2&&(Kl.$$scope={dirty:p,ctx:e}),Wa.$set(Kl);let yr=ct;ct=Du(e),ct!==yr&&(Lr(),_(wo[yr],1,1,()=>{wo[yr]=null}),Pr(),ut=wo[ct],ut||(ut=wo[ct]=zu[ct](e),ut.c()),g(ut,1),ut.m(lr.parentNode,lr));const Vl={};p&2&&(Vl.$$scope={dirty:p,ctx:e}),Ya.$set(Vl),e[0]==="pt"?Ce?p&1&&g(Ce,1):(Ce=gg(),Ce.c(),g(Ce,1),Ce.m(mr.parentNode,mr)):Ce&&(Lr(),_(Ce,1,1,()=>{Ce=null}),Pr());let en=dt;dt=Au(e),dt!==en&&(Lr(),_(bo[en],1,1,()=>{bo[en]=null}),Pr(),ft=bo[dt],ft||(ft=bo[dt]=Su[dt](e),ft.c()),g(ft,1),ft.m(cr.parentNode,cr));let kr=gt;gt=Cu(e),gt!==kr&&(Lr(),_(vo[kr],1,1,()=>{vo[kr]=null}),Pr(),_t=vo[gt],_t||(_t=vo[gt]=Ou[gt](e),_t.c()),g(_t,1),_t.m(dr.parentNode,dr)),e[0]==="pt"?Pe?p&1&&g(Pe,1):(Pe=_g(e),Pe.c(),g(Pe,1),Pe.m(fr.parentNode,fr)):Pe&&(Lr(),_(Pe,1,1,()=>{Pe=null}),Pr())},i(e){zp||(g(d.$$.fragment,e),g(P.$$.fragment,e),g(G),g(te.$$.fragment,e),g(he.$$.fragment,e),g(se.$$.fragment,e),g(je.$$.fragment,e),g(We.$$.fragment,e),g(ss.$$.fragment,e),g(Ve.$$.fragment,e),g(Je.$$.fragment,e),g(ms.$$.fragment,e),g(st.$$.fragment,e),g(nt.$$.fragment,e),g(ot.$$.fragment,e),g(Oe.$$.fragment,e),g(Ds.$$.fragment,e),g(As.$$.fragment,e),g(At.$$.fragment,e),g(Ct.$$.fragment,e),g(Ca.$$.fragment,e),g(zn.$$.fragment,e),g(Dn.$$.fragment,e),g(Sn.$$.fragment,e),g(Ia.$$.fragment,e),g(An.$$.fragment,e),g(On.$$.fragment,e),g(Cn.$$.fragment,e),g(Pn.$$.fragment,e),g(Ln.$$.fragment,e),g(In.$$.fragment,e),g(Fa.$$.fragment,e),g(Rn.$$.fragment,e),g(Fn.$$.fragment,e),g(Nn.$$.fragment,e),g(Ha.$$.fragment,e),g(Mn.$$.fragment,e),g(Wn.$$.fragment,e),g(Bn.$$.fragment,e),g(Kn.$$.fragment,e),g(Vn.$$.fragment,e),g(Yn.$$.fragment,e),g(Wa.$$.fragment,e),g(Jn.$$.fragment,e),g(Xn.$$.fragment,e),g(Qn.$$.fragment,e),g(Zn.$$.fragment,e),g(eo.$$.fragment,e),g(so.$$.fragment,e),g(to.$$.fragment,e),g(ao.$$.fragment,e),g(ut),g(Ya.$$.fragment,e),g(no.$$.fragment,e),g(oo.$$.fragment,e),g(Ce),g(ft),g(ro.$$.fragment,e),g(lo.$$.fragment,e),g(io.$$.fragment,e),g(_t),g(Pe),g(po.$$.fragment,e),g(mo.$$.fragment,e),g(ho.$$.fragment,e),g(co.$$.fragment,e),g(uo.$$.fragment,e),g(fo.$$.fragment,e),g(go.$$.fragment,e),zp=!0)},o(e){_(d.$$.fragment,e),_(P.$$.fragment,e),_(G),_(te.$$.fragment,e),_(he.$$.fragment,e),_(se.$$.fragment,e),_(je.$$.fragment,e),_(We.$$.fragment,e),_(ss.$$.fragment,e),_(Ve.$$.fragment,e),_(Je.$$.fragment,e),_(ms.$$.fragment,e),_(st.$$.fragment,e),_(nt.$$.fragment,e),_(ot.$$.fragment,e),_(Oe.$$.fragment,e),_(Ds.$$.fragment,e),_(As.$$.fragment,e),_(At.$$.fragment,e),_(Ct.$$.fragment,e),_(Ca.$$.fragment,e),_(zn.$$.fragment,e),_(Dn.$$.fragment,e),_(Sn.$$.fragment,e),_(Ia.$$.fragment,e),_(An.$$.fragment,e),_(On.$$.fragment,e),_(Cn.$$.fragment,e),_(Pn.$$.fragment,e),_(Ln.$$.fragment,e),_(In.$$.fragment,e),_(Fa.$$.fragment,e),_(Rn.$$.fragment,e),_(Fn.$$.fragment,e),_(Nn.$$.fragment,e),_(Ha.$$.fragment,e),_(Mn.$$.fragment,e),_(Wn.$$.fragment,e),_(Bn.$$.fragment,e),_(Kn.$$.fragment,e),_(Vn.$$.fragment,e),_(Yn.$$.fragment,e),_(Wa.$$.fragment,e),_(Jn.$$.fragment,e),_(Xn.$$.fragment,e),_(Qn.$$.fragment,e),_(Zn.$$.fragment,e),_(eo.$$.fragment,e),_(so.$$.fragment,e),_(to.$$.fragment,e),_(ao.$$.fragment,e),_(ut),_(Ya.$$.fragment,e),_(no.$$.fragment,e),_(oo.$$.fragment,e),_(Ce),_(ft),_(ro.$$.fragment,e),_(lo.$$.fragment,e),_(io.$$.fragment,e),_(_t),_(Pe),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(ho.$$.fragment,e),_(co.$$.fragment,e),_(uo.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),zp=!1},d(e){t(u),e&&t(j),k(d,e),e&&t(E),e&&t(C),k(P),e&&t(D),_o[O].d(e),e&&t(J),e&&t(X),e&&t(U),k(te,e),e&&t(F),e&&t(B),e&&t(Ee),e&&t(H),e&&t(ue),e&&t(ee),e&&t($e),e&&t(re),e&&t(ge),e&&t(me),k(he),e&&t(_e),e&&t(de),e&&t(He),k(se,e),e&&t(Be),k(je,e),e&&t(ks),e&&t(ce),e&&t(be),k(We,e),e&&t(Ys),k(ss,e),e&&t(ts),k(Ve,e),e&&t(ps),e&&t(pe),e&&t(qe),k(Je,e),e&&t(Qs),k(ms,e),e&&t(qs),e&&t(ve),e&&t(jt),k(st,e),e&&t(ba),e&&t(ze),e&&t(va),k(nt,e),e&&t(qt),e&&t(zt),e&&t(Dt),k(ot,e),e&&t(ya),k(Oe,e),e&&t(ka),e&&t(Ie),e&&t(ja),k(Ds,e),e&&t(Ss),k(As,e),e&&t(Os),e&&t(rt),e&&t(xa),e&&t(as),e&&t(gn),e&&t(it),e&&t(ea),k(At,e),e&&t(_n),e&&t(sa),e&&t(wn),e&&t(Ls),k(Ct),e&&t(bn),e&&t(pt),e&&t(vn),e&&t(mt),e&&t(Yl),e&&t(Yo),e&&t(Jl),e&&t(Oa),e&&t(Xl),e&&t(ma),e&&t(Ql),e&&t(Jo),e&&t(Zl),k(Ca,e),e&&t(ei),e&&t(ha),k(zn),e&&t(si),k(Dn,e),e&&t(ti),e&&t(La),e&&t(ai),k(Sn,e),e&&t(ni),k(Ia,e),e&&t(oi),e&&t(Xo),e&&t(ri),k(An,e),e&&t(li),k(On,e),e&&t(ii),e&&t(us),e&&t(pi),k(Cn,e),e&&t(mi),k(Pn,e),e&&t(hi),e&&t(Gs),e&&t(ci),e&&t(Ra),e&&t(ui),k(Ln,e),e&&t(di),e&&t(ds),e&&t(fi),e&&t(Rt),e&&t(gi),k(In,e),e&&t(_i),e&&t(er),e&&t(wi),k(Fa,e),e&&t(bi),e&&t(ca),k(Rn),e&&t(vi),k(Fn,e),e&&t(yi),e&&t(sr),e&&t(ki),e&&t(Na),e&&t($i),k(Nn,e),e&&t(ji),e&&t(Ft),e&&t(xi),k(Ha,e),e&&t(Ei),e&&t(Hn),e&&t(qi),e&&t(Un),e&&t(Di),e&&t(Ua),e&&t(Si),k(Mn,e),e&&t(Ai),e&&t(tr),e&&t(Oi),k(Wn,e),e&&t(Ci),e&&t(Ma),e&&t(Pi),k(Bn,e),e&&t(Li),k(Kn,e),e&&t(Ii),e&&t(Qe),e&&t(Ri),k(Vn,e),e&&t(Fi),k(Yn,e),e&&t(Gi),e&&t(Ze),e&&t(Ni),k(Wa,e),e&&t(Hi),e&&t(ar),e&&t(Ui),e&&t(ua),k(Jn),e&&t(Mi),e&&t(Ns),e&&t(Wi),k(Xn,e),e&&t(Bi),e&&t(nr),e&&t(Ki),k(Qn,e),e&&t(Vi),e&&t(Ka),e&&t(Yi),k(Zn,e),e&&t(Ji),k(eo,e),e&&t(Xi),e&&t(or),e&&t(Qi),k(so,e),e&&t(Zi),e&&t(rr),e&&t(ep),k(to,e),e&&t(sp),k(ao,e),e&&t(tp),e&&t(Va),e&&t(ap),wo[ct].d(e),e&&t(lr),k(Ya,e),e&&t(np),e&&t(ir),e&&t(op),k(no,e),e&&t(rp),e&&t(pr),e&&t(lp),k(oo,e),e&&t(ip),Ce&&Ce.d(e),e&&t(mr),e&&t(Ja),e&&t(pp),e&&t(Hs),e&&t(mp),bo[dt].d(e),e&&t(cr),e&&t(ur),e&&t(hp),k(ro,e),e&&t(cp),e&&t(Gt),e&&t(up),k(lo,e),e&&t(dp),k(io,e),e&&t(fp),e&&t(xe),e&&t(gp),vo[gt].d(e),e&&t(dr),Pe&&Pe.d(e),e&&t(fr),e&&t(da),k(po),e&&t(_p),e&&t(Qa),e&&t(wp),k(mo,e),e&&t(bp),e&&t(gr),e&&t(vp),k(ho,e),e&&t(yp),e&&t(_r),e&&t(kp),k(co,e),e&&t($p),k(uo,e),e&&t(jp),e&&t(Za),e&&t(xp),k(fo,e),e&&t(Ep),k(go,e),e&&t(Tp),e&&t(wr),e&&t(qp),e&&t(br)}}}const Mg={local:"summarization",sections:[{local:"preparing-a-multilingual-corpus",title:"Preparing a multilingual corpus"},{local:"models-for-text-summarization",title:"Models for text summarization"},{local:"preprocessing-the-data",title:"Preprocessing the data"},{local:"metrics-for-text-summarization",sections:[{local:"creating-a-strong-baseline",title:"Creating a strong baseline"}],title:"Metrics for text summarization"},{local:"finetuning-mt5-with-the-trainer-api",title:"Fine-tuning mT5 with the `Trainer` API"},{local:"finetuning-mt5-with-keras",title:"Fine-tuning mT5 with Keras"},{local:"finetuning-mt5-with-accelerate",sections:[{local:"preparing-everything-for-training",title:"Preparing everything for training"},{local:"training-loop",title:"Training loop"}],title:"Fine-tuning mT5 with \u{1F917} Accelerate"},{local:"using-your-finetuned-model",title:"Using your fine-tuned model"}],title:"Summarization"};function Wg(V,u,j){let d="pt";return xg(()=>{const E=new URLSearchParams(window.location.search);j(0,d=E.get("fw")||"pt")}),[d]}class Zg extends yg{constructor(u){super();kg(this,u,Wg,Ug,$g,{})}}export{Zg as default,Mg as metadata};
