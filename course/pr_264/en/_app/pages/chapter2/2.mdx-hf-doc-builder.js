import{S as fp,i as mp,s as dp,e as i,k as f,w as E,t as o,M as bp,c as p,d as s,m,x as T,a as c,h as r,b as y,N as Sa,G as t,g as u,y as x,o as $,p as ce,q as k,B as P,v as _p,n as ue}from"../../chunks/vendor-hf-doc-builder.js";import{T as cp}from"../../chunks/Tip-hf-doc-builder.js";import{Y as up}from"../../chunks/Youtube-hf-doc-builder.js";import{I as _t}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as hp}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";import{F as wp}from"../../chunks/FrameworkSwitchCourse-hf-doc-builder.js";function $p(g){let n,h;return n=new hp({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter2/section2_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter2/section2_tf.ipynb"}]}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function kp(g){let n,h;return n=new hp({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter2/section2_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter2/section2_pt.ipynb"}]}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function vp(g){let n;return{c(){n=o("This is the first section where the content is slightly different depending on whether you use PyTorch or TensorFlow. Toggle the switch on top of the title to select the platform you prefer!")},l(h){n=r(h,"This is the first section where the content is slightly different depending on whether you use PyTorch or TensorFlow. Toggle the switch on top of the title to select the platform you prefer!")},m(h,a){u(h,n,a)},d(h){h&&s(n)}}}function gp(g){let n,h;return n=new up({props:{id:"wVN12smEvqg"}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function yp(g){let n,h;return n=new up({props:{id:"1pedAIvTWXk"}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function jp(g){let n,h;return n=new C({props:{code:`raw_inputs = [
    "I've been waiting for a HuggingFace course my whole life.",
    "I hate this so much!",
]
inputs = tokenizer(raw_inputs, padding=True, truncation=True, return_tensors="tf")
print(inputs)`,highlighted:`raw_inputs = [
    <span class="hljs-string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,
    <span class="hljs-string">&quot;I hate this so much!&quot;</span>,
]
inputs = tokenizer(raw_inputs, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-built_in">print</span>(inputs)`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Ep(g){let n,h;return n=new C({props:{code:`raw_inputs = [
    "I've been waiting for a HuggingFace course my whole life.",
    "I hate this so much!",
]
inputs = tokenizer(raw_inputs, padding=True, truncation=True, return_tensors="pt")
print(inputs)`,highlighted:`raw_inputs = [
    <span class="hljs-string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,
    <span class="hljs-string">&quot;I hate this so much!&quot;</span>,
]
inputs = tokenizer(raw_inputs, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-built_in">print</span>(inputs)`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Tp(g){let n,h,a,d,_;return d=new C({props:{code:`{
    'input_ids': <tf.Tensor: shape=(2, 16), dtype=int32, numpy=
        array([
            [  101,  1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172,  2607,  2026,  2878,  2166,  1012,   102],
            [  101,  1045,  5223,  2023,  2061,  2172,   999,   102,     0,     0,     0,     0,     0,     0,     0,     0]
        ], dtype=int32)>, 
    'attention_mask': <tf.Tensor: shape=(2, 16), dtype=int32, numpy=
        array([
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ], dtype=int32)>
}`,highlighted:`{
    <span class="hljs-string">&#x27;input_ids&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">16</span>), dtype=int32, numpy=
        array([
            [  <span class="hljs-number">101</span>,  <span class="hljs-number">1045</span>,  <span class="hljs-number">1005</span>,  <span class="hljs-number">2310</span>,  <span class="hljs-number">2042</span>,  <span class="hljs-number">3403</span>,  <span class="hljs-number">2005</span>,  <span class="hljs-number">1037</span>, <span class="hljs-number">17662</span>, <span class="hljs-number">12172</span>,  <span class="hljs-number">2607</span>,  <span class="hljs-number">2026</span>,  <span class="hljs-number">2878</span>,  <span class="hljs-number">2166</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>],
            [  <span class="hljs-number">101</span>,  <span class="hljs-number">1045</span>,  <span class="hljs-number">5223</span>,  <span class="hljs-number">2023</span>,  <span class="hljs-number">2061</span>,  <span class="hljs-number">2172</span>,   <span class="hljs-number">999</span>,   <span class="hljs-number">102</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>]
        ], dtype=int32)&gt;, 
    <span class="hljs-string">&#x27;attention_mask&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">16</span>), dtype=int32, numpy=
        array([
            [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
            [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
        ], dtype=int32)&gt;
}`}}),{c(){n=i("p"),h=o("Here\u2019s what the results look like as TensorFlow tensors:"),a=f(),E(d.$$.fragment)},l(b){n=p(b,"P",{});var I=c(n);h=r(I,"Here\u2019s what the results look like as TensorFlow tensors:"),I.forEach(s),a=m(b),T(d.$$.fragment,b)},m(b,I){u(b,n,I),t(n,h),u(b,a,I),x(d,b,I),_=!0},i(b){_||(k(d.$$.fragment,b),_=!0)},o(b){$(d.$$.fragment,b),_=!1},d(b){b&&s(n),b&&s(a),P(d,b)}}}function xp(g){let n,h,a,d,_;return d=new C({props:{code:`{
    'input_ids': tensor([
        [  101,  1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172, 2607,  2026,  2878,  2166,  1012,   102],
        [  101,  1045,  5223,  2023,  2061,  2172,   999,   102,     0,     0,     0,     0,     0,     0,     0,     0]
    ]), 
    'attention_mask': tensor([
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ])
}`,highlighted:`{
    <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([
        [  <span class="hljs-number">101</span>,  <span class="hljs-number">1045</span>,  <span class="hljs-number">1005</span>,  <span class="hljs-number">2310</span>,  <span class="hljs-number">2042</span>,  <span class="hljs-number">3403</span>,  <span class="hljs-number">2005</span>,  <span class="hljs-number">1037</span>, <span class="hljs-number">17662</span>, <span class="hljs-number">12172</span>, <span class="hljs-number">2607</span>,  <span class="hljs-number">2026</span>,  <span class="hljs-number">2878</span>,  <span class="hljs-number">2166</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>],
        [  <span class="hljs-number">101</span>,  <span class="hljs-number">1045</span>,  <span class="hljs-number">5223</span>,  <span class="hljs-number">2023</span>,  <span class="hljs-number">2061</span>,  <span class="hljs-number">2172</span>,   <span class="hljs-number">999</span>,   <span class="hljs-number">102</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>]
    ]), 
    <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([
        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
    ])
}`}}),{c(){n=i("p"),h=o("Here\u2019s what the results look like as PyTorch tensors:"),a=f(),E(d.$$.fragment)},l(b){n=p(b,"P",{});var I=c(n);h=r(I,"Here\u2019s what the results look like as PyTorch tensors:"),I.forEach(s),a=m(b),T(d.$$.fragment,b)},m(b,I){u(b,n,I),t(n,h),u(b,a,I),x(d,b,I),_=!0},i(b){_||(k(d.$$.fragment,b),_=!0)},o(b){$(d.$$.fragment,b),_=!1},d(b){b&&s(n),b&&s(a),P(d,b)}}}function Pp(g){let n,h,a,d,_,b,I,S,A,j,M;return j=new C({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

checkpoint = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
model = TFAutoModel.from_pretrained(checkpoint)`}}),{c(){n=i("p"),h=o("We can download our pretrained model the same way we did with our tokenizer. \u{1F917} Transformers provides an "),a=i("code"),d=o("TFAutoModel"),_=o(" class which also has a "),b=i("code"),I=o("from_pretrained"),S=o(" method:"),A=f(),E(j.$$.fragment)},l(w){n=p(w,"P",{});var v=c(n);h=r(v,"We can download our pretrained model the same way we did with our tokenizer. \u{1F917} Transformers provides an "),a=p(v,"CODE",{});var N=c(a);d=r(N,"TFAutoModel"),N.forEach(s),_=r(v," class which also has a "),b=p(v,"CODE",{});var F=c(b);I=r(F,"from_pretrained"),F.forEach(s),S=r(v," method:"),v.forEach(s),A=m(w),T(j.$$.fragment,w)},m(w,v){u(w,n,v),t(n,h),t(n,a),t(a,d),t(n,_),t(n,b),t(b,I),t(n,S),u(w,A,v),x(j,w,v),M=!0},i(w){M||(k(j.$$.fragment,w),M=!0)},o(w){$(j.$$.fragment,w),M=!1},d(w){w&&s(n),w&&s(A),P(j,w)}}}function Ip(g){let n,h,a,d,_,b,I,S,A,j,M;return j=new C({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

checkpoint = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
model = AutoModel.from_pretrained(checkpoint)`}}),{c(){n=i("p"),h=o("We can download our pretrained model the same way we did with our tokenizer. \u{1F917} Transformers provides an "),a=i("code"),d=o("AutoModel"),_=o(" class which also has a "),b=i("code"),I=o("from_pretrained()"),S=o(" method:"),A=f(),E(j.$$.fragment)},l(w){n=p(w,"P",{});var v=c(n);h=r(v,"We can download our pretrained model the same way we did with our tokenizer. \u{1F917} Transformers provides an "),a=p(v,"CODE",{});var N=c(a);d=r(N,"AutoModel"),N.forEach(s),_=r(v," class which also has a "),b=p(v,"CODE",{});var F=c(b);I=r(F,"from_pretrained()"),F.forEach(s),S=r(v," method:"),v.forEach(s),A=m(w),T(j.$$.fragment,w)},m(w,v){u(w,n,v),t(n,h),t(n,a),t(a,d),t(n,_),t(n,b),t(b,I),t(n,S),u(w,A,v),x(j,w,v),M=!0},i(w){M||(k(j.$$.fragment,w),M=!0)},o(w){$(j.$$.fragment,w),M=!1},d(w){w&&s(n),w&&s(A),P(j,w)}}}function Ap(g){let n,h,a,d;return n=new C({props:{code:`outputs = model(inputs)
print(outputs.last_hidden_state.shape)`,highlighted:`outputs = model(inputs)
<span class="hljs-built_in">print</span>(outputs.last_hidden_state.shape)`}}),a=new C({props:{code:"(2, 16, 768)",highlighted:'(<span class="hljs-number">2</span>, <span class="hljs-number">16</span>, <span class="hljs-number">768</span>)'}}),{c(){E(n.$$.fragment),h=f(),E(a.$$.fragment)},l(_){T(n.$$.fragment,_),h=m(_),T(a.$$.fragment,_)},m(_,b){x(n,_,b),u(_,h,b),x(a,_,b),d=!0},i(_){d||(k(n.$$.fragment,_),k(a.$$.fragment,_),d=!0)},o(_){$(n.$$.fragment,_),$(a.$$.fragment,_),d=!1},d(_){P(n,_),_&&s(h),P(a,_)}}}function Sp(g){let n,h,a,d;return n=new C({props:{code:`outputs = model(**inputs)
print(outputs.last_hidden_state.shape)`,highlighted:`outputs = model(**inputs)
<span class="hljs-built_in">print</span>(outputs.last_hidden_state.shape)`}}),a=new C({props:{code:"torch.Size([2, 16, 768])",highlighted:'torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">16</span>, <span class="hljs-number">768</span>])'}}),{c(){E(n.$$.fragment),h=f(),E(a.$$.fragment)},l(_){T(n.$$.fragment,_),h=m(_),T(a.$$.fragment,_)},m(_,b){x(n,_,b),u(_,h,b),x(a,_,b),d=!0},i(_){d||(k(n.$$.fragment,_),k(a.$$.fragment,_),d=!0)},o(_){$(n.$$.fragment,_),$(a.$$.fragment,_),d=!1},d(_){P(n,_),_&&s(h),P(a,_)}}}function Cp(g){let n,h,a,d,_,b,I,S,A,j,M;return j=new C({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

checkpoint = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
model = TFAutoModelForSequenceClassification.from_pretrained(checkpoint)
outputs = model(inputs)`}}),{c(){n=i("p"),h=o("For our example, we will need a model with a sequence classification head (to be able to classify the sentences as positive or negative). So, we won\u2019t actually use the "),a=i("code"),d=o("TFAutoModel"),_=o(" class, but "),b=i("code"),I=o("TFAutoModelForSequenceClassification"),S=o(":"),A=f(),E(j.$$.fragment)},l(w){n=p(w,"P",{});var v=c(n);h=r(v,"For our example, we will need a model with a sequence classification head (to be able to classify the sentences as positive or negative). So, we won\u2019t actually use the "),a=p(v,"CODE",{});var N=c(a);d=r(N,"TFAutoModel"),N.forEach(s),_=r(v," class, but "),b=p(v,"CODE",{});var F=c(b);I=r(F,"TFAutoModelForSequenceClassification"),F.forEach(s),S=r(v,":"),v.forEach(s),A=m(w),T(j.$$.fragment,w)},m(w,v){u(w,n,v),t(n,h),t(n,a),t(a,d),t(n,_),t(n,b),t(b,I),t(n,S),u(w,A,v),x(j,w,v),M=!0},i(w){M||(k(j.$$.fragment,w),M=!0)},o(w){$(j.$$.fragment,w),M=!1},d(w){w&&s(n),w&&s(A),P(j,w)}}}function Mp(g){let n,h,a,d,_,b,I,S,A,j,M;return j=new C({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

checkpoint = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
model = AutoModelForSequenceClassification.from_pretrained(checkpoint)
outputs = model(**inputs)`}}),{c(){n=i("p"),h=o("For our example, we will need a model with a sequence classification head (to be able to classify the sentences as positive or negative). So, we won\u2019t actually use the "),a=i("code"),d=o("AutoModel"),_=o(" class, but "),b=i("code"),I=o("AutoModelForSequenceClassification"),S=o(":"),A=f(),E(j.$$.fragment)},l(w){n=p(w,"P",{});var v=c(n);h=r(v,"For our example, we will need a model with a sequence classification head (to be able to classify the sentences as positive or negative). So, we won\u2019t actually use the "),a=p(v,"CODE",{});var N=c(a);d=r(N,"AutoModel"),N.forEach(s),_=r(v," class, but "),b=p(v,"CODE",{});var F=c(b);I=r(F,"AutoModelForSequenceClassification"),F.forEach(s),S=r(v,":"),v.forEach(s),A=m(w),T(j.$$.fragment,w)},m(w,v){u(w,n,v),t(n,h),t(n,a),t(a,d),t(n,_),t(n,b),t(b,I),t(n,S),u(w,A,v),x(j,w,v),M=!0},i(w){M||(k(j.$$.fragment,w),M=!0)},o(w){$(j.$$.fragment,w),M=!1},d(w){w&&s(n),w&&s(A),P(j,w)}}}function Np(g){let n,h;return n=new C({props:{code:"(2, 2)",highlighted:'(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)'}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function qp(g){let n,h;return n=new C({props:{code:"torch.Size([2, 2])",highlighted:'torch.Size([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>])'}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Fp(g){let n,h;return n=new C({props:{code:`<tf.Tensor: shape=(2, 2), dtype=float32, numpy=
    array([[-1.5606991,  1.6122842],
           [ 4.169231 , -3.3464472]], dtype=float32)>`,highlighted:`&lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), dtype=float32, numpy=
    array([[-<span class="hljs-number">1.5606991</span>,  <span class="hljs-number">1.6122842</span>],
           [ <span class="hljs-number">4.169231</span> , -<span class="hljs-number">3.3464472</span>]], dtype=float32)&gt;`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Dp(g){let n,h;return n=new C({props:{code:`tensor([[-1.5607,  1.6123],
        [ 4.1692, -3.3464]], grad_fn=<AddmmBackward>)`,highlighted:`tensor([[-<span class="hljs-number">1.5607</span>,  <span class="hljs-number">1.6123</span>],
        [ <span class="hljs-number">4.1692</span>, -<span class="hljs-number">3.3464</span>]], grad_fn=&lt;AddmmBackward&gt;)`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Op(g){let n,h;return n=new C({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

predictions = tf.math.softmax(outputs.logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-built_in">print</span>(predictions)`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function zp(g){let n,h;return n=new C({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> torch

predictions = torch.nn.functional.softmax(outputs.logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-built_in">print</span>(predictions)`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Lp(g){let n,h;return n=new C({props:{code:`tf.Tensor(
[[4.01951671e-02 9.59804833e-01]
 [9.9945587e-01 5.4418424e-04]], shape=(2, 2), dtype=float32)`,highlighted:`tf.Tensor(
[[<span class="hljs-number">4.01951671e-02</span> <span class="hljs-number">9.59804833e-01</span>]
 [<span class="hljs-number">9.9945587e-01</span> <span class="hljs-number">5.4418424e-04</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), dtype=float32)`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Gp(g){let n,h;return n=new C({props:{code:`tensor([[4.0195e-02, 9.5980e-01],
        [9.9946e-01, 5.4418e-04]], grad_fn=<SoftmaxBackward>)`,highlighted:`tensor([[<span class="hljs-number">4.0195e-02</span>, <span class="hljs-number">9.5980e-01</span>],
        [<span class="hljs-number">9.9946e-01</span>, <span class="hljs-number">5.4418e-04</span>]], grad_fn=&lt;SoftmaxBackward&gt;)`}}),{c(){E(n.$$.fragment)},l(a){T(n.$$.fragment,a)},m(a,d){x(n,a,d),h=!0},i(a){h||(k(n.$$.fragment,a),h=!0)},o(a){$(n.$$.fragment,a),h=!1},d(a){P(n,a)}}}function Hp(g){let n,h,a,d,_,b,I,S;return{c(){n=i("p"),h=o("\u270F\uFE0F "),a=i("strong"),d=o("Try it out!"),_=o(" Choose two (or more) texts of your own and run them through the "),b=i("code"),I=o("sentiment-analysis"),S=o(" pipeline. Then replicate the steps you saw here yourself and check that you obtain the same results!")},l(A){n=p(A,"P",{});var j=c(n);h=r(j,"\u270F\uFE0F "),a=p(j,"STRONG",{});var M=c(a);d=r(M,"Try it out!"),M.forEach(s),_=r(j," Choose two (or more) texts of your own and run them through the "),b=p(j,"CODE",{});var w=c(b);I=r(w,"sentiment-analysis"),w.forEach(s),S=r(j," pipeline. Then replicate the steps you saw here yourself and check that you obtain the same results!"),j.forEach(s)},m(A,j){u(A,n,j),t(n,h),t(n,a),t(a,d),t(n,_),t(n,b),t(b,I),t(n,S)},d(A){A&&s(n)}}}function Vp(g){let n,h,a,d,_,b,I,S,A,j,M,w,v,N,F,Ee,yn,W,B,js,Te,Ca,Es,Ma,Na,jn,Re,En,Ts,qa,Tn,Ye,xn,xe,Fa,xs,Da,Oa,Pn,we,Qe,fr,za,Je,mr,In,Ps,La,An,$e,Pe,wt,Xe,Ga,$t,Ha,Sn,Ie,Va,kt,Wa,Ba,Cn,he,Is,Ua,vt,Ra,Ya,gt,Qa,Ja,yt,Xa,Mn,L,Ka,Ke,Za,el,jt,sl,tl,Et,nl,al,Nn,G,ll,Tt,ol,rl,xt,il,pl,Ze,cl,ul,qn,es,Fn,As,hl,Dn,Ae,fl,Pt,ml,dl,On,Se,bl,It,_l,wl,zn,U,R,Ss,Cs,$l,Ln,Y,Q,Ms,O,kl,At,vl,gl,St,yl,jl,Ct,El,Tl,Mt,xl,Pl,Gn,ke,Ce,Nt,ss,Il,qt,Al,Hn,J,X,Ns,qs,Sl,Vn,H,Cl,Ft,Ml,Nl,Dt,ql,Fl,Ot,Dl,Ol,Wn,Fs,zl,Bn,fe,Ll,zt,Gl,Hl,Ds,Vl,Wl,Un,ve,Me,Lt,ts,Bl,Gt,Ul,Rn,Os,Rl,Yn,me,zs,Ht,Yl,Ql,Jl,Ls,Vt,Xl,Kl,Zl,Gs,Wt,eo,so,Qn,Hs,to,Jn,Vs,no,Xn,K,Z,Ws,V,ao,Bt,lo,oo,Ut,ro,io,Rt,po,co,Kn,ge,Ne,Yt,ns,uo,Qt,ho,Zn,Bs,fo,ea,ye,as,dr,mo,ls,br,sa,Us,bo,ta,Rs,_o,na,Ys,wo,aa,q,Qs,Jt,$o,ko,vo,Xt,Kt,go,yo,Zt,en,jo,Eo,sn,tn,To,xo,nn,an,Po,Io,ln,on,Ao,So,rn,pn,Co,Mo,cn,No,la,ee,se,Js,Xs,qo,oa,os,ra,te,ne,Ks,Zs,Fo,ia,je,qe,un,rs,Do,hn,Oo,pa,et,zo,ca,is,ua,ae,le,st,z,Lo,fn,Go,Ho,mn,Vo,Wo,dn,Bo,Uo,ps,Ro,Yo,ha,oe,re,tt,ie,pe,nt,de,Qo,bn,Jo,Xo,_n,Ko,Zo,fa,Fe,er,wn,sr,tr,ma,cs,da,us,ba,at,nr,_a,De,$n,ar,lr,kn,or,wa,lt,rr,$a,Oe,ka;a=new wp({props:{fw:g[0]}}),S=new _t({});const _r=[kp,$p],hs=[];function wr(e,l){return e[0]==="pt"?0:1}v=wr(g),N=hs[v]=_r[v](g),Ee=new cp({props:{$$slots:{default:[vp]},$$scope:{ctx:g}}});const $r=[yp,gp],fs=[];function kr(e,l){return e[0]==="pt"?0:1}W=kr(g),B=fs[W]=$r[W](g),Re=new C({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)
classifier(
    [
        <span class="hljs-string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,
        <span class="hljs-string">&quot;I hate this so much!&quot;</span>,
    ]
)`}}),Ye=new C({props:{code:`[{'label': 'POSITIVE', 'score': 0.9598047137260437},
 {'label': 'NEGATIVE', 'score': 0.9994558095932007}]`,highlighted:`[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9598047137260437</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9994558095932007</span>}]`}}),Xe=new _t({}),es=new C({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

checkpoint = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(checkpoint)`}});const vr=[Ep,jp],ms=[];function gr(e,l){return e[0]==="pt"?0:1}U=gr(g),R=ms[U]=vr[U](g);const yr=[xp,Tp],ds=[];function jr(e,l){return e[0]==="pt"?0:1}Y=jr(g),Q=ds[Y]=yr[Y](g),ss=new _t({});const Er=[Ip,Pp],bs=[];function Tr(e,l){return e[0]==="pt"?0:1}J=Tr(g),X=bs[J]=Er[J](g),ts=new _t({});const xr=[Sp,Ap],_s=[];function Pr(e,l){return e[0]==="pt"?0:1}K=Pr(g),Z=_s[K]=xr[K](g),ns=new _t({});const Ir=[Mp,Cp],ws=[];function Ar(e,l){return e[0]==="pt"?0:1}ee=Ar(g),se=ws[ee]=Ir[ee](g),os=new C({props:{code:"print(outputs.logits.shape)",highlighted:'<span class="hljs-built_in">print</span>(outputs.logits.shape)'}});const Sr=[qp,Np],$s=[];function Cr(e,l){return e[0]==="pt"?0:1}te=Cr(g),ne=$s[te]=Sr[te](g),rs=new _t({}),is=new C({props:{code:"print(outputs.logits)",highlighted:'<span class="hljs-built_in">print</span>(outputs.logits)'}});const Mr=[Dp,Fp],ks=[];function Nr(e,l){return e[0]==="pt"?0:1}ae=Nr(g),le=ks[ae]=Mr[ae](g);const qr=[zp,Op],vs=[];function Fr(e,l){return e[0]==="pt"?0:1}oe=Fr(g),re=vs[oe]=qr[oe](g);const Dr=[Gp,Lp],gs=[];function Or(e,l){return e[0]==="pt"?0:1}return ie=Or(g),pe=gs[ie]=Dr[ie](g),cs=new C({props:{code:"model.config.id2label",highlighted:"model.config.id2label"}}),us=new C({props:{code:"{0: 'NEGATIVE', 1: 'POSITIVE'}",highlighted:'{<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>}'}}),Oe=new cp({props:{$$slots:{default:[Hp]},$$scope:{ctx:g}}}),{c(){n=i("meta"),h=f(),E(a.$$.fragment),d=f(),_=i("h1"),b=i("a"),I=i("span"),E(S.$$.fragment),A=f(),j=i("span"),M=o("Behind the pipeline"),w=f(),N.c(),F=f(),E(Ee.$$.fragment),yn=f(),B.c(),js=f(),Te=i("p"),Ca=o("Let\u2019s start with a complete example, taking a look at what happened behind the scenes when we executed the following code in "),Es=i("a"),Ma=o("Chapter 1"),Na=o(":"),jn=f(),E(Re.$$.fragment),En=f(),Ts=i("p"),qa=o("and obtained:"),Tn=f(),E(Ye.$$.fragment),xn=f(),xe=i("p"),Fa=o("As we saw in "),xs=i("a"),Da=o("Chapter 1"),Oa=o(", this pipeline groups together three steps: preprocessing, passing the inputs through the model, and postprocessing:"),Pn=f(),we=i("div"),Qe=i("img"),za=f(),Je=i("img"),In=f(),Ps=i("p"),La=o("Let\u2019s quickly go over each of these."),An=f(),$e=i("h2"),Pe=i("a"),wt=i("span"),E(Xe.$$.fragment),Ga=f(),$t=i("span"),Ha=o("Preprocessing with a tokenizer"),Sn=f(),Ie=i("p"),Va=o("Like other neural networks, Transformer models can\u2019t process raw text directly, so the first step of our pipeline is to convert the text inputs into numbers that the model can make sense of. To do this we use a "),kt=i("em"),Wa=o("tokenizer"),Ba=o(", which will be responsible for:"),Cn=f(),he=i("ul"),Is=i("li"),Ua=o("Splitting the input into words, subwords, or symbols (like punctuation) that are called "),vt=i("em"),Ra=o("tokens"),Ya=f(),gt=i("li"),Qa=o("Mapping each token to an integer"),Ja=f(),yt=i("li"),Xa=o("Adding additional inputs that may be useful to the model"),Mn=f(),L=i("p"),Ka=o("All this preprocessing needs to be done in exactly the same way as when the model was pretrained, so we first need to download that information from the "),Ke=i("a"),Za=o("Model Hub"),el=o(". To do this, we use the "),jt=i("code"),sl=o("AutoTokenizer"),tl=o(" class and its "),Et=i("code"),nl=o("from_pretrained()"),al=o(" method. Using the checkpoint name of our model, it will automatically fetch the data associated with the model\u2019s tokenizer and cache it (so it\u2019s only downloaded the first time you run the code below)."),Nn=f(),G=i("p"),ll=o("Since the default checkpoint of the "),Tt=i("code"),ol=o("sentiment-analysis"),rl=o(" pipeline is "),xt=i("code"),il=o("distilbert-base-uncased-finetuned-sst-2-english"),pl=o(" (you can see its model card "),Ze=i("a"),cl=o("here"),ul=o("), we run the following:"),qn=f(),E(es.$$.fragment),Fn=f(),As=i("p"),hl=o("Once we have the tokenizer, we can directly pass our sentences to it and we\u2019ll get back a dictionary that\u2019s ready to feed to our model! The only thing left to do is to convert the list of input IDs to tensors."),Dn=f(),Ae=i("p"),fl=o("You can use \u{1F917} Transformers without having to worry about which ML framework is used as a backend; it might be PyTorch or TensorFlow, or Flax for some models. However, Transformer models only accept "),Pt=i("em"),ml=o("tensors"),dl=o(" as input. If this is your first time hearing about tensors, you can think of them as NumPy arrays instead. A NumPy array can be a scalar (0D), a vector (1D), a matrix (2D), or have more dimensions. It\u2019s effectively a tensor; other ML frameworks\u2019 tensors behave similarly, and are usually as simple to instantiate as NumPy arrays."),On=f(),Se=i("p"),bl=o("To specify the type of tensors we want to get back (PyTorch, TensorFlow, or plain NumPy), we use the "),It=i("code"),_l=o("return_tensors"),wl=o(" argument:"),zn=f(),R.c(),Ss=f(),Cs=i("p"),$l=o("Don\u2019t worry about padding and truncation just yet; we\u2019ll explain those later. The main things to remember here are that you can pass one sentence or a list of sentences, as well as specifying the type of tensors you want to get back (if no type is passed, you will get a list of lists as a result)."),Ln=f(),Q.c(),Ms=f(),O=i("p"),kl=o("The output itself is a dictionary containing two keys, "),At=i("code"),vl=o("input_ids"),gl=o(" and "),St=i("code"),yl=o("attention_mask"),jl=o(". "),Ct=i("code"),El=o("input_ids"),Tl=o(" contains two rows of integers (one for each sentence) that are the unique identifiers of the tokens in each sentence. We\u2019ll explain what the "),Mt=i("code"),xl=o("attention_mask"),Pl=o(" is later in this chapter."),Gn=f(),ke=i("h2"),Ce=i("a"),Nt=i("span"),E(ss.$$.fragment),Il=f(),qt=i("span"),Al=o("Going through the model"),Hn=f(),X.c(),Ns=f(),qs=i("p"),Sl=o("In this code snippet, we have downloaded the same checkpoint we used in our pipeline before (it should actually have been cached already) and instantiated a model with it."),Vn=f(),H=i("p"),Cl=o("This architecture contains only the base Transformer module: given some inputs, it outputs what we\u2019ll call "),Ft=i("em"),Ml=o("hidden states"),Nl=o(", also known as "),Dt=i("em"),ql=o("features"),Fl=o(". For each model input, we\u2019ll retrieve a high-dimensional vector representing the "),Ot=i("strong"),Dl=o("contextual understanding of that input by the Transformer model"),Ol=o("."),Wn=f(),Fs=i("p"),zl=o("If this doesn\u2019t make sense, don\u2019t worry about it. We\u2019ll explain it all later."),Bn=f(),fe=i("p"),Ll=o("While these hidden states can be useful on their own, they\u2019re usually inputs to another part of the model, known as the "),zt=i("em"),Gl=o("head"),Hl=o(". In "),Ds=i("a"),Vl=o("Chapter 1"),Wl=o(", the different tasks could have been performed with the same architecture, but each of these tasks will have a different head associated with it."),Un=f(),ve=i("h3"),Me=i("a"),Lt=i("span"),E(ts.$$.fragment),Bl=f(),Gt=i("span"),Ul=o("A high-dimensional vector?"),Rn=f(),Os=i("p"),Rl=o("The vector output by the Transformer module is usually large. It generally has three dimensions:"),Yn=f(),me=i("ul"),zs=i("li"),Ht=i("strong"),Yl=o("Batch size"),Ql=o(": The number of sequences processed at a time (2 in our example)."),Jl=f(),Ls=i("li"),Vt=i("strong"),Xl=o("Sequence length"),Kl=o(": The length of the numerical representation of the sequence (16 in our example)."),Zl=f(),Gs=i("li"),Wt=i("strong"),eo=o("Hidden size"),so=o(": The vector dimension of each model input."),Qn=f(),Hs=i("p"),to=o("It is said to be \u201Chigh dimensional\u201D because of the last value. The hidden size can be very large (768 is common for smaller models, and in larger models this can reach 3072 or more)."),Jn=f(),Vs=i("p"),no=o("We can see this if we feed the inputs we preprocessed to our model:"),Xn=f(),Z.c(),Ws=f(),V=i("p"),ao=o("Note that the outputs of \u{1F917} Transformers models behave like "),Bt=i("code"),lo=o("namedtuple"),oo=o("s or dictionaries. You can access the elements by attributes (like we did) or by key ("),Ut=i("code"),ro=o('outputs["last_hidden_state"]'),io=o("), or even by index if you know exactly where the thing you are looking for is ("),Rt=i("code"),po=o("outputs[0]"),co=o(")."),Kn=f(),ge=i("h3"),Ne=i("a"),Yt=i("span"),E(ns.$$.fragment),uo=f(),Qt=i("span"),ho=o("Model heads: Making sense out of numbers"),Zn=f(),Bs=i("p"),fo=o("The model heads take the high-dimensional vector of hidden states as input and project them onto a different dimension. They are usually composed of one or a few linear layers:"),ea=f(),ye=i("div"),as=i("img"),mo=f(),ls=i("img"),sa=f(),Us=i("p"),bo=o("The output of the Transformer model is sent directly to the model head to be processed."),ta=f(),Rs=i("p"),_o=o("In this diagram, the model is represented by its embeddings layer and the subsequent layers. The embeddings layer converts each input ID in the tokenized input into a vector that represents the associated token. The subsequent layers manipulate those vectors using the attention mechanism to produce the final representation of the sentences."),na=f(),Ys=i("p"),wo=o("There are many different architectures available in \u{1F917} Transformers, with each one designed around tackling a specific task. Here is a non-exhaustive list:"),aa=f(),q=i("ul"),Qs=i("li"),Jt=i("code"),$o=o("*Model"),ko=o(" (retrieve the hidden states)"),vo=f(),Xt=i("li"),Kt=i("code"),go=o("*ForCausalLM"),yo=f(),Zt=i("li"),en=i("code"),jo=o("*ForMaskedLM"),Eo=f(),sn=i("li"),tn=i("code"),To=o("*ForMultipleChoice"),xo=f(),nn=i("li"),an=i("code"),Po=o("*ForQuestionAnswering"),Io=f(),ln=i("li"),on=i("code"),Ao=o("*ForSequenceClassification"),So=f(),rn=i("li"),pn=i("code"),Co=o("*ForTokenClassification"),Mo=f(),cn=i("li"),No=o("and others \u{1F917}"),la=f(),se.c(),Js=f(),Xs=i("p"),qo=o("Now if we look at the shape of our inputs, the dimensionality will be much lower: the model head takes as input the high-dimensional vectors we saw before, and outputs vectors containing two values (one per label):"),oa=f(),E(os.$$.fragment),ra=f(),ne.c(),Ks=f(),Zs=i("p"),Fo=o("Since we have just two sentences and two labels, the result we get from our model is of shape 2 x 2."),ia=f(),je=i("h2"),qe=i("a"),un=i("span"),E(rs.$$.fragment),Do=f(),hn=i("span"),Oo=o("Postprocessing the output"),pa=f(),et=i("p"),zo=o("The values we get as output from our model don\u2019t necessarily make sense by themselves. Let\u2019s take a look:"),ca=f(),E(is.$$.fragment),ua=f(),le.c(),st=f(),z=i("p"),Lo=o("Our model predicted "),fn=i("code"),Go=o("[-1.5607, 1.6123]"),Ho=o(" for the first sentence and "),mn=i("code"),Vo=o("[ 4.1692, -3.3464]"),Wo=o(" for the second one. Those are not probabilities but "),dn=i("em"),Bo=o("logits"),Uo=o(", the raw, unnormalized scores outputted by the last layer of the model. To be converted to probabilities, they need to go through a "),ps=i("a"),Ro=o("SoftMax"),Yo=o(" layer (all \u{1F917} Transformers models output the logits, as the loss function for training will generally fuse the last activation function, such as SoftMax, with the actual loss function, such as cross entropy):"),ha=f(),re.c(),tt=f(),pe.c(),nt=f(),de=i("p"),Qo=o("Now we can see that the model predicted "),bn=i("code"),Jo=o("[0.0402, 0.9598]"),Xo=o(" for the first sentence and "),_n=i("code"),Ko=o("[0.9995, 0.0005]"),Zo=o(" for the second one. These are recognizable probability scores."),fa=f(),Fe=i("p"),er=o("To get the labels corresponding to each position, we can inspect the "),wn=i("code"),sr=o("id2label"),tr=o(" attribute of the model config (more on this in the next section):"),ma=f(),E(cs.$$.fragment),da=f(),E(us.$$.fragment),ba=f(),at=i("p"),nr=o("Now we can conclude that the model predicted the following:"),_a=f(),De=i("ul"),$n=i("li"),ar=o("First sentence: NEGATIVE: 0.0402, POSITIVE: 0.9598"),lr=f(),kn=i("li"),or=o("Second sentence: NEGATIVE: 0.9995, POSITIVE: 0.0005"),wa=f(),lt=i("p"),rr=o("We have successfully reproduced the three steps of the pipeline: preprocessing with tokenizers, passing the inputs through the model, and postprocessing! Now let\u2019s take some time to dive deeper into each of those steps."),$a=f(),E(Oe.$$.fragment),this.h()},l(e){const l=bp('[data-svelte="svelte-1phssyn"]',document.head);n=p(l,"META",{name:!0,content:!0}),l.forEach(s),h=m(e),T(a.$$.fragment,e),d=m(e),_=p(e,"H1",{class:!0});var ys=c(_);b=p(ys,"A",{id:!0,class:!0,href:!0});var ot=c(b);I=p(ot,"SPAN",{});var vn=c(I);T(S.$$.fragment,vn),vn.forEach(s),ot.forEach(s),A=m(ys),j=p(ys,"SPAN",{});var rt=c(j);M=r(rt,"Behind the pipeline"),rt.forEach(s),ys.forEach(s),w=m(e),N.l(e),F=m(e),T(Ee.$$.fragment,e),yn=m(e),B.l(e),js=m(e),Te=p(e,"P",{});var ze=c(Te);Ca=r(ze,"Let\u2019s start with a complete example, taking a look at what happened behind the scenes when we executed the following code in "),Es=p(ze,"A",{href:!0});var it=c(Es);Ma=r(it,"Chapter 1"),it.forEach(s),Na=r(ze,":"),ze.forEach(s),jn=m(e),T(Re.$$.fragment,e),En=m(e),Ts=p(e,"P",{});var pt=c(Ts);qa=r(pt,"and obtained:"),pt.forEach(s),Tn=m(e),T(Ye.$$.fragment,e),xn=m(e),xe=p(e,"P",{});var Le=c(xe);Fa=r(Le,"As we saw in "),xs=p(Le,"A",{href:!0});var ct=c(xs);Da=r(ct,"Chapter 1"),ct.forEach(s),Oa=r(Le,", this pipeline groups together three steps: preprocessing, passing the inputs through the model, and postprocessing:"),Le.forEach(s),Pn=m(e),we=p(e,"DIV",{class:!0});var Ge=c(we);Qe=p(Ge,"IMG",{class:!0,src:!0,alt:!0}),za=m(Ge),Je=p(Ge,"IMG",{class:!0,src:!0,alt:!0}),Ge.forEach(s),In=m(e),Ps=p(e,"P",{});var ut=c(Ps);La=r(ut,"Let\u2019s quickly go over each of these."),ut.forEach(s),An=m(e),$e=p(e,"H2",{class:!0});var He=c($e);Pe=p(He,"A",{id:!0,class:!0,href:!0});var ht=c(Pe);wt=p(ht,"SPAN",{});var gn=c(wt);T(Xe.$$.fragment,gn),gn.forEach(s),ht.forEach(s),Ga=m(He),$t=p(He,"SPAN",{});var zr=c($t);Ha=r(zr,"Preprocessing with a tokenizer"),zr.forEach(s),He.forEach(s),Sn=m(e),Ie=p(e,"P",{});var va=c(Ie);Va=r(va,"Like other neural networks, Transformer models can\u2019t process raw text directly, so the first step of our pipeline is to convert the text inputs into numbers that the model can make sense of. To do this we use a "),kt=p(va,"EM",{});var Lr=c(kt);Wa=r(Lr,"tokenizer"),Lr.forEach(s),Ba=r(va,", which will be responsible for:"),va.forEach(s),Cn=m(e),he=p(e,"UL",{});var ft=c(he);Is=p(ft,"LI",{});var ir=c(Is);Ua=r(ir,"Splitting the input into words, subwords, or symbols (like punctuation) that are called "),vt=p(ir,"EM",{});var Gr=c(vt);Ra=r(Gr,"tokens"),Gr.forEach(s),ir.forEach(s),Ya=m(ft),gt=p(ft,"LI",{});var Hr=c(gt);Qa=r(Hr,"Mapping each token to an integer"),Hr.forEach(s),Ja=m(ft),yt=p(ft,"LI",{});var Vr=c(yt);Xa=r(Vr,"Adding additional inputs that may be useful to the model"),Vr.forEach(s),ft.forEach(s),Mn=m(e),L=p(e,"P",{});var Ve=c(L);Ka=r(Ve,"All this preprocessing needs to be done in exactly the same way as when the model was pretrained, so we first need to download that information from the "),Ke=p(Ve,"A",{href:!0,rel:!0});var Wr=c(Ke);Za=r(Wr,"Model Hub"),Wr.forEach(s),el=r(Ve,". To do this, we use the "),jt=p(Ve,"CODE",{});var Br=c(jt);sl=r(Br,"AutoTokenizer"),Br.forEach(s),tl=r(Ve," class and its "),Et=p(Ve,"CODE",{});var Ur=c(Et);nl=r(Ur,"from_pretrained()"),Ur.forEach(s),al=r(Ve," method. Using the checkpoint name of our model, it will automatically fetch the data associated with the model\u2019s tokenizer and cache it (so it\u2019s only downloaded the first time you run the code below)."),Ve.forEach(s),Nn=m(e),G=p(e,"P",{});var We=c(G);ll=r(We,"Since the default checkpoint of the "),Tt=p(We,"CODE",{});var Rr=c(Tt);ol=r(Rr,"sentiment-analysis"),Rr.forEach(s),rl=r(We," pipeline is "),xt=p(We,"CODE",{});var Yr=c(xt);il=r(Yr,"distilbert-base-uncased-finetuned-sst-2-english"),Yr.forEach(s),pl=r(We," (you can see its model card "),Ze=p(We,"A",{href:!0,rel:!0});var Qr=c(Ze);cl=r(Qr,"here"),Qr.forEach(s),ul=r(We,"), we run the following:"),We.forEach(s),qn=m(e),T(es.$$.fragment,e),Fn=m(e),As=p(e,"P",{});var Jr=c(As);hl=r(Jr,"Once we have the tokenizer, we can directly pass our sentences to it and we\u2019ll get back a dictionary that\u2019s ready to feed to our model! The only thing left to do is to convert the list of input IDs to tensors."),Jr.forEach(s),Dn=m(e),Ae=p(e,"P",{});var ga=c(Ae);fl=r(ga,"You can use \u{1F917} Transformers without having to worry about which ML framework is used as a backend; it might be PyTorch or TensorFlow, or Flax for some models. However, Transformer models only accept "),Pt=p(ga,"EM",{});var Xr=c(Pt);ml=r(Xr,"tensors"),Xr.forEach(s),dl=r(ga," as input. If this is your first time hearing about tensors, you can think of them as NumPy arrays instead. A NumPy array can be a scalar (0D), a vector (1D), a matrix (2D), or have more dimensions. It\u2019s effectively a tensor; other ML frameworks\u2019 tensors behave similarly, and are usually as simple to instantiate as NumPy arrays."),ga.forEach(s),On=m(e),Se=p(e,"P",{});var ya=c(Se);bl=r(ya,"To specify the type of tensors we want to get back (PyTorch, TensorFlow, or plain NumPy), we use the "),It=p(ya,"CODE",{});var Kr=c(It);_l=r(Kr,"return_tensors"),Kr.forEach(s),wl=r(ya," argument:"),ya.forEach(s),zn=m(e),R.l(e),Ss=m(e),Cs=p(e,"P",{});var Zr=c(Cs);$l=r(Zr,"Don\u2019t worry about padding and truncation just yet; we\u2019ll explain those later. The main things to remember here are that you can pass one sentence or a list of sentences, as well as specifying the type of tensors you want to get back (if no type is passed, you will get a list of lists as a result)."),Zr.forEach(s),Ln=m(e),Q.l(e),Ms=m(e),O=p(e,"P",{});var be=c(O);kl=r(be,"The output itself is a dictionary containing two keys, "),At=p(be,"CODE",{});var ei=c(At);vl=r(ei,"input_ids"),ei.forEach(s),gl=r(be," and "),St=p(be,"CODE",{});var si=c(St);yl=r(si,"attention_mask"),si.forEach(s),jl=r(be,". "),Ct=p(be,"CODE",{});var ti=c(Ct);El=r(ti,"input_ids"),ti.forEach(s),Tl=r(be," contains two rows of integers (one for each sentence) that are the unique identifiers of the tokens in each sentence. We\u2019ll explain what the "),Mt=p(be,"CODE",{});var ni=c(Mt);xl=r(ni,"attention_mask"),ni.forEach(s),Pl=r(be," is later in this chapter."),be.forEach(s),Gn=m(e),ke=p(e,"H2",{class:!0});var ja=c(ke);Ce=p(ja,"A",{id:!0,class:!0,href:!0});var ai=c(Ce);Nt=p(ai,"SPAN",{});var li=c(Nt);T(ss.$$.fragment,li),li.forEach(s),ai.forEach(s),Il=m(ja),qt=p(ja,"SPAN",{});var oi=c(qt);Al=r(oi,"Going through the model"),oi.forEach(s),ja.forEach(s),Hn=m(e),X.l(e),Ns=m(e),qs=p(e,"P",{});var ri=c(qs);Sl=r(ri,"In this code snippet, we have downloaded the same checkpoint we used in our pipeline before (it should actually have been cached already) and instantiated a model with it."),ri.forEach(s),Vn=m(e),H=p(e,"P",{});var Be=c(H);Cl=r(Be,"This architecture contains only the base Transformer module: given some inputs, it outputs what we\u2019ll call "),Ft=p(Be,"EM",{});var ii=c(Ft);Ml=r(ii,"hidden states"),ii.forEach(s),Nl=r(Be,", also known as "),Dt=p(Be,"EM",{});var pi=c(Dt);ql=r(pi,"features"),pi.forEach(s),Fl=r(Be,". For each model input, we\u2019ll retrieve a high-dimensional vector representing the "),Ot=p(Be,"STRONG",{});var ci=c(Ot);Dl=r(ci,"contextual understanding of that input by the Transformer model"),ci.forEach(s),Ol=r(Be,"."),Be.forEach(s),Wn=m(e),Fs=p(e,"P",{});var ui=c(Fs);zl=r(ui,"If this doesn\u2019t make sense, don\u2019t worry about it. We\u2019ll explain it all later."),ui.forEach(s),Bn=m(e),fe=p(e,"P",{});var mt=c(fe);Ll=r(mt,"While these hidden states can be useful on their own, they\u2019re usually inputs to another part of the model, known as the "),zt=p(mt,"EM",{});var hi=c(zt);Gl=r(hi,"head"),hi.forEach(s),Hl=r(mt,". In "),Ds=p(mt,"A",{href:!0});var fi=c(Ds);Vl=r(fi,"Chapter 1"),fi.forEach(s),Wl=r(mt,", the different tasks could have been performed with the same architecture, but each of these tasks will have a different head associated with it."),mt.forEach(s),Un=m(e),ve=p(e,"H3",{class:!0});var Ea=c(ve);Me=p(Ea,"A",{id:!0,class:!0,href:!0});var mi=c(Me);Lt=p(mi,"SPAN",{});var di=c(Lt);T(ts.$$.fragment,di),di.forEach(s),mi.forEach(s),Bl=m(Ea),Gt=p(Ea,"SPAN",{});var bi=c(Gt);Ul=r(bi,"A high-dimensional vector?"),bi.forEach(s),Ea.forEach(s),Rn=m(e),Os=p(e,"P",{});var _i=c(Os);Rl=r(_i,"The vector output by the Transformer module is usually large. It generally has three dimensions:"),_i.forEach(s),Yn=m(e),me=p(e,"UL",{});var dt=c(me);zs=p(dt,"LI",{});var pr=c(zs);Ht=p(pr,"STRONG",{});var wi=c(Ht);Yl=r(wi,"Batch size"),wi.forEach(s),Ql=r(pr,": The number of sequences processed at a time (2 in our example)."),pr.forEach(s),Jl=m(dt),Ls=p(dt,"LI",{});var cr=c(Ls);Vt=p(cr,"STRONG",{});var $i=c(Vt);Xl=r($i,"Sequence length"),$i.forEach(s),Kl=r(cr,": The length of the numerical representation of the sequence (16 in our example)."),cr.forEach(s),Zl=m(dt),Gs=p(dt,"LI",{});var ur=c(Gs);Wt=p(ur,"STRONG",{});var ki=c(Wt);eo=r(ki,"Hidden size"),ki.forEach(s),so=r(ur,": The vector dimension of each model input."),ur.forEach(s),dt.forEach(s),Qn=m(e),Hs=p(e,"P",{});var vi=c(Hs);to=r(vi,"It is said to be \u201Chigh dimensional\u201D because of the last value. The hidden size can be very large (768 is common for smaller models, and in larger models this can reach 3072 or more)."),vi.forEach(s),Jn=m(e),Vs=p(e,"P",{});var gi=c(Vs);no=r(gi,"We can see this if we feed the inputs we preprocessed to our model:"),gi.forEach(s),Xn=m(e),Z.l(e),Ws=m(e),V=p(e,"P",{});var Ue=c(V);ao=r(Ue,"Note that the outputs of \u{1F917} Transformers models behave like "),Bt=p(Ue,"CODE",{});var yi=c(Bt);lo=r(yi,"namedtuple"),yi.forEach(s),oo=r(Ue,"s or dictionaries. You can access the elements by attributes (like we did) or by key ("),Ut=p(Ue,"CODE",{});var ji=c(Ut);ro=r(ji,'outputs["last_hidden_state"]'),ji.forEach(s),io=r(Ue,"), or even by index if you know exactly where the thing you are looking for is ("),Rt=p(Ue,"CODE",{});var Ei=c(Rt);po=r(Ei,"outputs[0]"),Ei.forEach(s),co=r(Ue,")."),Ue.forEach(s),Kn=m(e),ge=p(e,"H3",{class:!0});var Ta=c(ge);Ne=p(Ta,"A",{id:!0,class:!0,href:!0});var Ti=c(Ne);Yt=p(Ti,"SPAN",{});var xi=c(Yt);T(ns.$$.fragment,xi),xi.forEach(s),Ti.forEach(s),uo=m(Ta),Qt=p(Ta,"SPAN",{});var Pi=c(Qt);ho=r(Pi,"Model heads: Making sense out of numbers"),Pi.forEach(s),Ta.forEach(s),Zn=m(e),Bs=p(e,"P",{});var Ii=c(Bs);fo=r(Ii,"The model heads take the high-dimensional vector of hidden states as input and project them onto a different dimension. They are usually composed of one or a few linear layers:"),Ii.forEach(s),ea=m(e),ye=p(e,"DIV",{class:!0});var xa=c(ye);as=p(xa,"IMG",{class:!0,src:!0,alt:!0}),mo=m(xa),ls=p(xa,"IMG",{class:!0,src:!0,alt:!0}),xa.forEach(s),sa=m(e),Us=p(e,"P",{});var Ai=c(Us);bo=r(Ai,"The output of the Transformer model is sent directly to the model head to be processed."),Ai.forEach(s),ta=m(e),Rs=p(e,"P",{});var Si=c(Rs);_o=r(Si,"In this diagram, the model is represented by its embeddings layer and the subsequent layers. The embeddings layer converts each input ID in the tokenized input into a vector that represents the associated token. The subsequent layers manipulate those vectors using the attention mechanism to produce the final representation of the sentences."),Si.forEach(s),na=m(e),Ys=p(e,"P",{});var Ci=c(Ys);wo=r(Ci,"There are many different architectures available in \u{1F917} Transformers, with each one designed around tackling a specific task. Here is a non-exhaustive list:"),Ci.forEach(s),aa=m(e),q=p(e,"UL",{});var D=c(q);Qs=p(D,"LI",{});var hr=c(Qs);Jt=p(hr,"CODE",{});var Mi=c(Jt);$o=r(Mi,"*Model"),Mi.forEach(s),ko=r(hr," (retrieve the hidden states)"),hr.forEach(s),vo=m(D),Xt=p(D,"LI",{});var Ni=c(Xt);Kt=p(Ni,"CODE",{});var qi=c(Kt);go=r(qi,"*ForCausalLM"),qi.forEach(s),Ni.forEach(s),yo=m(D),Zt=p(D,"LI",{});var Fi=c(Zt);en=p(Fi,"CODE",{});var Di=c(en);jo=r(Di,"*ForMaskedLM"),Di.forEach(s),Fi.forEach(s),Eo=m(D),sn=p(D,"LI",{});var Oi=c(sn);tn=p(Oi,"CODE",{});var zi=c(tn);To=r(zi,"*ForMultipleChoice"),zi.forEach(s),Oi.forEach(s),xo=m(D),nn=p(D,"LI",{});var Li=c(nn);an=p(Li,"CODE",{});var Gi=c(an);Po=r(Gi,"*ForQuestionAnswering"),Gi.forEach(s),Li.forEach(s),Io=m(D),ln=p(D,"LI",{});var Hi=c(ln);on=p(Hi,"CODE",{});var Vi=c(on);Ao=r(Vi,"*ForSequenceClassification"),Vi.forEach(s),Hi.forEach(s),So=m(D),rn=p(D,"LI",{});var Wi=c(rn);pn=p(Wi,"CODE",{});var Bi=c(pn);Co=r(Bi,"*ForTokenClassification"),Bi.forEach(s),Wi.forEach(s),Mo=m(D),cn=p(D,"LI",{});var Ui=c(cn);No=r(Ui,"and others \u{1F917}"),Ui.forEach(s),D.forEach(s),la=m(e),se.l(e),Js=m(e),Xs=p(e,"P",{});var Ri=c(Xs);qo=r(Ri,"Now if we look at the shape of our inputs, the dimensionality will be much lower: the model head takes as input the high-dimensional vectors we saw before, and outputs vectors containing two values (one per label):"),Ri.forEach(s),oa=m(e),T(os.$$.fragment,e),ra=m(e),ne.l(e),Ks=m(e),Zs=p(e,"P",{});var Yi=c(Zs);Fo=r(Yi,"Since we have just two sentences and two labels, the result we get from our model is of shape 2 x 2."),Yi.forEach(s),ia=m(e),je=p(e,"H2",{class:!0});var Pa=c(je);qe=p(Pa,"A",{id:!0,class:!0,href:!0});var Qi=c(qe);un=p(Qi,"SPAN",{});var Ji=c(un);T(rs.$$.fragment,Ji),Ji.forEach(s),Qi.forEach(s),Do=m(Pa),hn=p(Pa,"SPAN",{});var Xi=c(hn);Oo=r(Xi,"Postprocessing the output"),Xi.forEach(s),Pa.forEach(s),pa=m(e),et=p(e,"P",{});var Ki=c(et);zo=r(Ki,"The values we get as output from our model don\u2019t necessarily make sense by themselves. Let\u2019s take a look:"),Ki.forEach(s),ca=m(e),T(is.$$.fragment,e),ua=m(e),le.l(e),st=m(e),z=p(e,"P",{});var _e=c(z);Lo=r(_e,"Our model predicted "),fn=p(_e,"CODE",{});var Zi=c(fn);Go=r(Zi,"[-1.5607, 1.6123]"),Zi.forEach(s),Ho=r(_e," for the first sentence and "),mn=p(_e,"CODE",{});var ep=c(mn);Vo=r(ep,"[ 4.1692, -3.3464]"),ep.forEach(s),Wo=r(_e," for the second one. Those are not probabilities but "),dn=p(_e,"EM",{});var sp=c(dn);Bo=r(sp,"logits"),sp.forEach(s),Uo=r(_e,", the raw, unnormalized scores outputted by the last layer of the model. To be converted to probabilities, they need to go through a "),ps=p(_e,"A",{href:!0,rel:!0});var tp=c(ps);Ro=r(tp,"SoftMax"),tp.forEach(s),Yo=r(_e," layer (all \u{1F917} Transformers models output the logits, as the loss function for training will generally fuse the last activation function, such as SoftMax, with the actual loss function, such as cross entropy):"),_e.forEach(s),ha=m(e),re.l(e),tt=m(e),pe.l(e),nt=m(e),de=p(e,"P",{});var bt=c(de);Qo=r(bt,"Now we can see that the model predicted "),bn=p(bt,"CODE",{});var np=c(bn);Jo=r(np,"[0.0402, 0.9598]"),np.forEach(s),Xo=r(bt," for the first sentence and "),_n=p(bt,"CODE",{});var ap=c(_n);Ko=r(ap,"[0.9995, 0.0005]"),ap.forEach(s),Zo=r(bt," for the second one. These are recognizable probability scores."),bt.forEach(s),fa=m(e),Fe=p(e,"P",{});var Ia=c(Fe);er=r(Ia,"To get the labels corresponding to each position, we can inspect the "),wn=p(Ia,"CODE",{});var lp=c(wn);sr=r(lp,"id2label"),lp.forEach(s),tr=r(Ia," attribute of the model config (more on this in the next section):"),Ia.forEach(s),ma=m(e),T(cs.$$.fragment,e),da=m(e),T(us.$$.fragment,e),ba=m(e),at=p(e,"P",{});var op=c(at);nr=r(op,"Now we can conclude that the model predicted the following:"),op.forEach(s),_a=m(e),De=p(e,"UL",{});var Aa=c(De);$n=p(Aa,"LI",{});var rp=c($n);ar=r(rp,"First sentence: NEGATIVE: 0.0402, POSITIVE: 0.9598"),rp.forEach(s),lr=m(Aa),kn=p(Aa,"LI",{});var ip=c(kn);or=r(ip,"Second sentence: NEGATIVE: 0.9995, POSITIVE: 0.0005"),ip.forEach(s),Aa.forEach(s),wa=m(e),lt=p(e,"P",{});var pp=c(lt);rr=r(pp,"We have successfully reproduced the three steps of the pipeline: preprocessing with tokenizers, passing the inputs through the model, and postprocessing! Now let\u2019s take some time to dive deeper into each of those steps."),pp.forEach(s),$a=m(e),T(Oe.$$.fragment,e),this.h()},h(){y(n,"name","hf:doc:metadata"),y(n,"content",JSON.stringify(Wp)),y(b,"id","behind-the-pipeline"),y(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(b,"href","#behind-the-pipeline"),y(_,"class","relative group"),y(Es,"href","/course/chapter1"),y(xs,"href","/course/chapter1"),y(Qe,"class","block dark:hidden"),Sa(Qe.src,fr="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter2/full_nlp_pipeline.svg")||y(Qe,"src",fr),y(Qe,"alt","The full NLP pipeline: tokenization of text, conversion to IDs, and inference through the Transformer model and the model head."),y(Je,"class","hidden dark:block"),Sa(Je.src,mr="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter2/full_nlp_pipeline-dark.svg")||y(Je,"src",mr),y(Je,"alt","The full NLP pipeline: tokenization of text, conversion to IDs, and inference through the Transformer model and the model head."),y(we,"class","flex justify-center"),y(Pe,"id","preprocessing-with-a-tokenizer"),y(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Pe,"href","#preprocessing-with-a-tokenizer"),y($e,"class","relative group"),y(Ke,"href","https://huggingface.co/models"),y(Ke,"rel","nofollow"),y(Ze,"href","https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english"),y(Ze,"rel","nofollow"),y(Ce,"id","going-through-the-model"),y(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Ce,"href","#going-through-the-model"),y(ke,"class","relative group"),y(Ds,"href","/course/chapter1"),y(Me,"id","a-highdimensional-vector"),y(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Me,"href","#a-highdimensional-vector"),y(ve,"class","relative group"),y(Ne,"id","model-heads-making-sense-out-of-numbers"),y(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Ne,"href","#model-heads-making-sense-out-of-numbers"),y(ge,"class","relative group"),y(as,"class","block dark:hidden"),Sa(as.src,dr="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter2/transformer_and_head.svg")||y(as,"src",dr),y(as,"alt","A Transformer network alongside its head."),y(ls,"class","hidden dark:block"),Sa(ls.src,br="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter2/transformer_and_head-dark.svg")||y(ls,"src",br),y(ls,"alt","A Transformer network alongside its head."),y(ye,"class","flex justify-center"),y(qe,"id","postprocessing-the-output"),y(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(qe,"href","#postprocessing-the-output"),y(je,"class","relative group"),y(ps,"href","https://en.wikipedia.org/wiki/Softmax_function"),y(ps,"rel","nofollow")},m(e,l){t(document.head,n),u(e,h,l),x(a,e,l),u(e,d,l),u(e,_,l),t(_,b),t(b,I),x(S,I,null),t(_,A),t(_,j),t(j,M),u(e,w,l),hs[v].m(e,l),u(e,F,l),x(Ee,e,l),u(e,yn,l),fs[W].m(e,l),u(e,js,l),u(e,Te,l),t(Te,Ca),t(Te,Es),t(Es,Ma),t(Te,Na),u(e,jn,l),x(Re,e,l),u(e,En,l),u(e,Ts,l),t(Ts,qa),u(e,Tn,l),x(Ye,e,l),u(e,xn,l),u(e,xe,l),t(xe,Fa),t(xe,xs),t(xs,Da),t(xe,Oa),u(e,Pn,l),u(e,we,l),t(we,Qe),t(we,za),t(we,Je),u(e,In,l),u(e,Ps,l),t(Ps,La),u(e,An,l),u(e,$e,l),t($e,Pe),t(Pe,wt),x(Xe,wt,null),t($e,Ga),t($e,$t),t($t,Ha),u(e,Sn,l),u(e,Ie,l),t(Ie,Va),t(Ie,kt),t(kt,Wa),t(Ie,Ba),u(e,Cn,l),u(e,he,l),t(he,Is),t(Is,Ua),t(Is,vt),t(vt,Ra),t(he,Ya),t(he,gt),t(gt,Qa),t(he,Ja),t(he,yt),t(yt,Xa),u(e,Mn,l),u(e,L,l),t(L,Ka),t(L,Ke),t(Ke,Za),t(L,el),t(L,jt),t(jt,sl),t(L,tl),t(L,Et),t(Et,nl),t(L,al),u(e,Nn,l),u(e,G,l),t(G,ll),t(G,Tt),t(Tt,ol),t(G,rl),t(G,xt),t(xt,il),t(G,pl),t(G,Ze),t(Ze,cl),t(G,ul),u(e,qn,l),x(es,e,l),u(e,Fn,l),u(e,As,l),t(As,hl),u(e,Dn,l),u(e,Ae,l),t(Ae,fl),t(Ae,Pt),t(Pt,ml),t(Ae,dl),u(e,On,l),u(e,Se,l),t(Se,bl),t(Se,It),t(It,_l),t(Se,wl),u(e,zn,l),ms[U].m(e,l),u(e,Ss,l),u(e,Cs,l),t(Cs,$l),u(e,Ln,l),ds[Y].m(e,l),u(e,Ms,l),u(e,O,l),t(O,kl),t(O,At),t(At,vl),t(O,gl),t(O,St),t(St,yl),t(O,jl),t(O,Ct),t(Ct,El),t(O,Tl),t(O,Mt),t(Mt,xl),t(O,Pl),u(e,Gn,l),u(e,ke,l),t(ke,Ce),t(Ce,Nt),x(ss,Nt,null),t(ke,Il),t(ke,qt),t(qt,Al),u(e,Hn,l),bs[J].m(e,l),u(e,Ns,l),u(e,qs,l),t(qs,Sl),u(e,Vn,l),u(e,H,l),t(H,Cl),t(H,Ft),t(Ft,Ml),t(H,Nl),t(H,Dt),t(Dt,ql),t(H,Fl),t(H,Ot),t(Ot,Dl),t(H,Ol),u(e,Wn,l),u(e,Fs,l),t(Fs,zl),u(e,Bn,l),u(e,fe,l),t(fe,Ll),t(fe,zt),t(zt,Gl),t(fe,Hl),t(fe,Ds),t(Ds,Vl),t(fe,Wl),u(e,Un,l),u(e,ve,l),t(ve,Me),t(Me,Lt),x(ts,Lt,null),t(ve,Bl),t(ve,Gt),t(Gt,Ul),u(e,Rn,l),u(e,Os,l),t(Os,Rl),u(e,Yn,l),u(e,me,l),t(me,zs),t(zs,Ht),t(Ht,Yl),t(zs,Ql),t(me,Jl),t(me,Ls),t(Ls,Vt),t(Vt,Xl),t(Ls,Kl),t(me,Zl),t(me,Gs),t(Gs,Wt),t(Wt,eo),t(Gs,so),u(e,Qn,l),u(e,Hs,l),t(Hs,to),u(e,Jn,l),u(e,Vs,l),t(Vs,no),u(e,Xn,l),_s[K].m(e,l),u(e,Ws,l),u(e,V,l),t(V,ao),t(V,Bt),t(Bt,lo),t(V,oo),t(V,Ut),t(Ut,ro),t(V,io),t(V,Rt),t(Rt,po),t(V,co),u(e,Kn,l),u(e,ge,l),t(ge,Ne),t(Ne,Yt),x(ns,Yt,null),t(ge,uo),t(ge,Qt),t(Qt,ho),u(e,Zn,l),u(e,Bs,l),t(Bs,fo),u(e,ea,l),u(e,ye,l),t(ye,as),t(ye,mo),t(ye,ls),u(e,sa,l),u(e,Us,l),t(Us,bo),u(e,ta,l),u(e,Rs,l),t(Rs,_o),u(e,na,l),u(e,Ys,l),t(Ys,wo),u(e,aa,l),u(e,q,l),t(q,Qs),t(Qs,Jt),t(Jt,$o),t(Qs,ko),t(q,vo),t(q,Xt),t(Xt,Kt),t(Kt,go),t(q,yo),t(q,Zt),t(Zt,en),t(en,jo),t(q,Eo),t(q,sn),t(sn,tn),t(tn,To),t(q,xo),t(q,nn),t(nn,an),t(an,Po),t(q,Io),t(q,ln),t(ln,on),t(on,Ao),t(q,So),t(q,rn),t(rn,pn),t(pn,Co),t(q,Mo),t(q,cn),t(cn,No),u(e,la,l),ws[ee].m(e,l),u(e,Js,l),u(e,Xs,l),t(Xs,qo),u(e,oa,l),x(os,e,l),u(e,ra,l),$s[te].m(e,l),u(e,Ks,l),u(e,Zs,l),t(Zs,Fo),u(e,ia,l),u(e,je,l),t(je,qe),t(qe,un),x(rs,un,null),t(je,Do),t(je,hn),t(hn,Oo),u(e,pa,l),u(e,et,l),t(et,zo),u(e,ca,l),x(is,e,l),u(e,ua,l),ks[ae].m(e,l),u(e,st,l),u(e,z,l),t(z,Lo),t(z,fn),t(fn,Go),t(z,Ho),t(z,mn),t(mn,Vo),t(z,Wo),t(z,dn),t(dn,Bo),t(z,Uo),t(z,ps),t(ps,Ro),t(z,Yo),u(e,ha,l),vs[oe].m(e,l),u(e,tt,l),gs[ie].m(e,l),u(e,nt,l),u(e,de,l),t(de,Qo),t(de,bn),t(bn,Jo),t(de,Xo),t(de,_n),t(_n,Ko),t(de,Zo),u(e,fa,l),u(e,Fe,l),t(Fe,er),t(Fe,wn),t(wn,sr),t(Fe,tr),u(e,ma,l),x(cs,e,l),u(e,da,l),x(us,e,l),u(e,ba,l),u(e,at,l),t(at,nr),u(e,_a,l),u(e,De,l),t(De,$n),t($n,ar),t(De,lr),t(De,kn),t(kn,or),u(e,wa,l),u(e,lt,l),t(lt,rr),u(e,$a,l),x(Oe,e,l),ka=!0},p(e,[l]){const ys={};l&1&&(ys.fw=e[0]),a.$set(ys);let ot=v;v=wr(e),v!==ot&&(ue(),$(hs[ot],1,1,()=>{hs[ot]=null}),ce(),N=hs[v],N||(N=hs[v]=_r[v](e),N.c()),k(N,1),N.m(F.parentNode,F));const vn={};l&2&&(vn.$$scope={dirty:l,ctx:e}),Ee.$set(vn);let rt=W;W=kr(e),W!==rt&&(ue(),$(fs[rt],1,1,()=>{fs[rt]=null}),ce(),B=fs[W],B||(B=fs[W]=$r[W](e),B.c()),k(B,1),B.m(js.parentNode,js));let ze=U;U=gr(e),U!==ze&&(ue(),$(ms[ze],1,1,()=>{ms[ze]=null}),ce(),R=ms[U],R||(R=ms[U]=vr[U](e),R.c()),k(R,1),R.m(Ss.parentNode,Ss));let it=Y;Y=jr(e),Y!==it&&(ue(),$(ds[it],1,1,()=>{ds[it]=null}),ce(),Q=ds[Y],Q||(Q=ds[Y]=yr[Y](e),Q.c()),k(Q,1),Q.m(Ms.parentNode,Ms));let pt=J;J=Tr(e),J!==pt&&(ue(),$(bs[pt],1,1,()=>{bs[pt]=null}),ce(),X=bs[J],X||(X=bs[J]=Er[J](e),X.c()),k(X,1),X.m(Ns.parentNode,Ns));let Le=K;K=Pr(e),K!==Le&&(ue(),$(_s[Le],1,1,()=>{_s[Le]=null}),ce(),Z=_s[K],Z||(Z=_s[K]=xr[K](e),Z.c()),k(Z,1),Z.m(Ws.parentNode,Ws));let ct=ee;ee=Ar(e),ee!==ct&&(ue(),$(ws[ct],1,1,()=>{ws[ct]=null}),ce(),se=ws[ee],se||(se=ws[ee]=Ir[ee](e),se.c()),k(se,1),se.m(Js.parentNode,Js));let Ge=te;te=Cr(e),te!==Ge&&(ue(),$($s[Ge],1,1,()=>{$s[Ge]=null}),ce(),ne=$s[te],ne||(ne=$s[te]=Sr[te](e),ne.c()),k(ne,1),ne.m(Ks.parentNode,Ks));let ut=ae;ae=Nr(e),ae!==ut&&(ue(),$(ks[ut],1,1,()=>{ks[ut]=null}),ce(),le=ks[ae],le||(le=ks[ae]=Mr[ae](e),le.c()),k(le,1),le.m(st.parentNode,st));let He=oe;oe=Fr(e),oe!==He&&(ue(),$(vs[He],1,1,()=>{vs[He]=null}),ce(),re=vs[oe],re||(re=vs[oe]=qr[oe](e),re.c()),k(re,1),re.m(tt.parentNode,tt));let ht=ie;ie=Or(e),ie!==ht&&(ue(),$(gs[ht],1,1,()=>{gs[ht]=null}),ce(),pe=gs[ie],pe||(pe=gs[ie]=Dr[ie](e),pe.c()),k(pe,1),pe.m(nt.parentNode,nt));const gn={};l&2&&(gn.$$scope={dirty:l,ctx:e}),Oe.$set(gn)},i(e){ka||(k(a.$$.fragment,e),k(S.$$.fragment,e),k(N),k(Ee.$$.fragment,e),k(B),k(Re.$$.fragment,e),k(Ye.$$.fragment,e),k(Xe.$$.fragment,e),k(es.$$.fragment,e),k(R),k(Q),k(ss.$$.fragment,e),k(X),k(ts.$$.fragment,e),k(Z),k(ns.$$.fragment,e),k(se),k(os.$$.fragment,e),k(ne),k(rs.$$.fragment,e),k(is.$$.fragment,e),k(le),k(re),k(pe),k(cs.$$.fragment,e),k(us.$$.fragment,e),k(Oe.$$.fragment,e),ka=!0)},o(e){$(a.$$.fragment,e),$(S.$$.fragment,e),$(N),$(Ee.$$.fragment,e),$(B),$(Re.$$.fragment,e),$(Ye.$$.fragment,e),$(Xe.$$.fragment,e),$(es.$$.fragment,e),$(R),$(Q),$(ss.$$.fragment,e),$(X),$(ts.$$.fragment,e),$(Z),$(ns.$$.fragment,e),$(se),$(os.$$.fragment,e),$(ne),$(rs.$$.fragment,e),$(is.$$.fragment,e),$(le),$(re),$(pe),$(cs.$$.fragment,e),$(us.$$.fragment,e),$(Oe.$$.fragment,e),ka=!1},d(e){s(n),e&&s(h),P(a,e),e&&s(d),e&&s(_),P(S),e&&s(w),hs[v].d(e),e&&s(F),P(Ee,e),e&&s(yn),fs[W].d(e),e&&s(js),e&&s(Te),e&&s(jn),P(Re,e),e&&s(En),e&&s(Ts),e&&s(Tn),P(Ye,e),e&&s(xn),e&&s(xe),e&&s(Pn),e&&s(we),e&&s(In),e&&s(Ps),e&&s(An),e&&s($e),P(Xe),e&&s(Sn),e&&s(Ie),e&&s(Cn),e&&s(he),e&&s(Mn),e&&s(L),e&&s(Nn),e&&s(G),e&&s(qn),P(es,e),e&&s(Fn),e&&s(As),e&&s(Dn),e&&s(Ae),e&&s(On),e&&s(Se),e&&s(zn),ms[U].d(e),e&&s(Ss),e&&s(Cs),e&&s(Ln),ds[Y].d(e),e&&s(Ms),e&&s(O),e&&s(Gn),e&&s(ke),P(ss),e&&s(Hn),bs[J].d(e),e&&s(Ns),e&&s(qs),e&&s(Vn),e&&s(H),e&&s(Wn),e&&s(Fs),e&&s(Bn),e&&s(fe),e&&s(Un),e&&s(ve),P(ts),e&&s(Rn),e&&s(Os),e&&s(Yn),e&&s(me),e&&s(Qn),e&&s(Hs),e&&s(Jn),e&&s(Vs),e&&s(Xn),_s[K].d(e),e&&s(Ws),e&&s(V),e&&s(Kn),e&&s(ge),P(ns),e&&s(Zn),e&&s(Bs),e&&s(ea),e&&s(ye),e&&s(sa),e&&s(Us),e&&s(ta),e&&s(Rs),e&&s(na),e&&s(Ys),e&&s(aa),e&&s(q),e&&s(la),ws[ee].d(e),e&&s(Js),e&&s(Xs),e&&s(oa),P(os,e),e&&s(ra),$s[te].d(e),e&&s(Ks),e&&s(Zs),e&&s(ia),e&&s(je),P(rs),e&&s(pa),e&&s(et),e&&s(ca),P(is,e),e&&s(ua),ks[ae].d(e),e&&s(st),e&&s(z),e&&s(ha),vs[oe].d(e),e&&s(tt),gs[ie].d(e),e&&s(nt),e&&s(de),e&&s(fa),e&&s(Fe),e&&s(ma),P(cs,e),e&&s(da),P(us,e),e&&s(ba),e&&s(at),e&&s(_a),e&&s(De),e&&s(wa),e&&s(lt),e&&s($a),P(Oe,e)}}}const Wp={local:"behind-the-pipeline",sections:[{local:"preprocessing-with-a-tokenizer",title:"Preprocessing with a tokenizer"},{local:"going-through-the-model",sections:[{local:"a-highdimensional-vector",title:"A high-dimensional vector?"},{local:"model-heads-making-sense-out-of-numbers",title:"Model heads: Making sense out of numbers"}],title:"Going through the model"},{local:"postprocessing-the-output",title:"Postprocessing the output"}],title:"Behind the pipeline"};function Bp(g,n,h){let a="pt";return _p(()=>{const d=new URLSearchParams(window.location.search);h(0,a=d.get("fw")||"pt")}),[a]}class Zp extends fp{constructor(n){super();mp(this,n,Bp,Vp,dp,{})}}export{Zp as default,Wp as metadata};
