import{S as Fm,i as Wm,s as Gm,e as o,k as u,w as d,t as n,U as Ii,M as Ym,c as r,d as a,m,a as p,x as h,h as t,V as Li,b as P,G as e,g as i,y as f,q as g,o as v,B as b,v as Zm}from"../../chunks/vendor-hf-doc-builder.js";import{T as Nn}from"../../chunks/Tip-hf-doc-builder.js";import{Y as Jm}from"../../chunks/Youtube-hf-doc-builder.js";import{I as Tn}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as $}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as Km}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";function Qm(R){let c,y,q,k,w;return{c(){c=o("p"),y=n("\u{1F4A1} Cette section couvre "),q=o("em"),k=n("Unigram"),w=n(" en profondeur, allant jusqu\u2019\xE0 montrer une impl\xE9mentation compl\xE8te. Vous pouvez passer directement \xE0 la fin si vous souhaitez simplement avoir un aper\xE7u g\xE9n\xE9ral de l\u2019algorithme de tok\xE9nisation.")},l(j){c=r(j,"P",{});var _=p(c);y=t(_,"\u{1F4A1} Cette section couvre "),q=r(_,"EM",{});var x=p(q);k=t(x,"Unigram"),x.forEach(a),w=t(_," en profondeur, allant jusqu\u2019\xE0 montrer une impl\xE9mentation compl\xE8te. Vous pouvez passer directement \xE0 la fin si vous souhaitez simplement avoir un aper\xE7u g\xE9n\xE9ral de l\u2019algorithme de tok\xE9nisation."),_.forEach(a)},m(j,_){i(j,c,_),e(c,y),e(c,q),e(q,k),e(c,w)},d(j){j&&a(c)}}}function sc(R){let c,y,q,k,w;return{c(){c=o("p"),y=n("\u270F\uFE0F "),q=o("strong"),k=n("A votre tour !"),w=n(" Ecrivez le code permettant de calculer les fr\xE9quences ci-dessus et v\xE9rifiez que les r\xE9sultats affich\xE9s sont corrects, de m\xEAme que la somme totale.")},l(j){c=r(j,"P",{});var _=p(c);y=t(_,"\u270F\uFE0F "),q=r(_,"STRONG",{});var x=p(q);k=t(x,"A votre tour !"),x.forEach(a),w=t(_," Ecrivez le code permettant de calculer les fr\xE9quences ci-dessus et v\xE9rifiez que les r\xE9sultats affich\xE9s sont corrects, de m\xEAme que la somme totale."),_.forEach(a)},m(j,_){i(j,c,_),e(c,y),e(c,q),e(q,k),e(c,w)},d(j){j&&a(c)}}}function ec(R){let c,y,q,k,w,j,_,x;return{c(){c=o("p"),y=n("\u270F\uFE0F "),q=o("strong"),k=n("A votre tour !"),w=n(" D\xE9terminer la tokenization du mot "),j=o("code"),_=n('"huggun"'),x=n(" et son score.")},l(C){c=r(C,"P",{});var E=p(c);y=t(E,"\u270F\uFE0F "),q=r(E,"STRONG",{});var B=p(q);k=t(B,"A votre tour !"),B.forEach(a),w=t(E," D\xE9terminer la tokenization du mot "),j=r(E,"CODE",{});var N=p(j);_=t(N,'"huggun"'),N.forEach(a),x=t(E," et son score."),E.forEach(a)},m(C,E){i(C,c,E),e(c,y),e(c,q),e(q,k),e(c,w),e(c,j),e(j,_),e(c,x)},d(C){C&&a(c)}}}function ac(R){let c,y,q,k,w,j,_,x;return{c(){c=o("p"),y=n("\u{1F4A1} "),q=o("em"),k=n("SentencePiece"),w=n(" utilise un algorithme plus efficace appel\xE9 "),j=o("em"),_=n("Enhanced Suffix Array"),x=n(" (ESA) pour cr\xE9er le vocabulaire initial.")},l(C){c=r(C,"P",{});var E=p(c);y=t(E,"\u{1F4A1} "),q=r(E,"EM",{});var B=p(q);k=t(B,"SentencePiece"),B.forEach(a),w=t(E," utilise un algorithme plus efficace appel\xE9 "),j=r(E,"EM",{});var N=p(j);_=t(N,"Enhanced Suffix Array"),N.forEach(a),x=t(E," (ESA) pour cr\xE9er le vocabulaire initial."),E.forEach(a)},m(C,E){i(C,c,E),e(c,y),e(c,q),e(q,k),e(c,w),e(c,j),e(j,_),e(c,x)},d(C){C&&a(c)}}}function nc(R){let c,y,q,k,w,j,_,x,C,E,B;return{c(){c=o("p"),y=n("\u{1F4A1} Cette approche est tr\xE8s inefficace, c\u2019est pourquoi "),q=o("em"),k=n("SentencePiece"),w=n(" utilise une approximation de la perte du mod\xE8le sans le "),j=o("em"),_=n("token"),x=n(" X. Au lieu de partir de z\xE9ro, il remplace simplement le "),C=o("em"),E=n("token"),B=n(" X par sa segmentation dans le vocabulaire restant. De cette fa\xE7on, tous les scores peuvent \xEAtre calcul\xE9s en une seule fois, en m\xEAme temps que la perte du mod\xE8le.")},l(N){c=r(N,"P",{});var A=p(c);y=t(A,"\u{1F4A1} Cette approche est tr\xE8s inefficace, c\u2019est pourquoi "),q=r(A,"EM",{});var Ss=p(q);k=t(Ss,"SentencePiece"),Ss.forEach(a),w=t(A," utilise une approximation de la perte du mod\xE8le sans le "),j=r(A,"EM",{});var V=p(j);_=t(V,"token"),V.forEach(a),x=t(A," X. Au lieu de partir de z\xE9ro, il remplace simplement le "),C=r(A,"EM",{});var je=p(C);E=t(je,"token"),je.forEach(a),B=t(A," X par sa segmentation dans le vocabulaire restant. De cette fa\xE7on, tous les scores peuvent \xEAtre calcul\xE9s en une seule fois, en m\xEAme temps que la perte du mod\xE8le."),A.forEach(a)},m(N,A){i(N,c,A),e(c,y),e(c,q),e(q,k),e(c,w),e(c,j),e(j,_),e(c,x),e(c,C),e(C,E),e(c,B)},d(N){N&&a(c)}}}function tc(R){let c,y,q,k,w,j,_,x,C,E,B,N,A,Ss,V,je,Ge,Tl,Ul,Ye,Ol,Sl,Un,Hs,On,ds,Sn,ps,hs,Ze,Is,Hl,Je,Il,Hn,X,Ll,Ke,Bl,Vl,Qe,Rl,Xl,sa,Fl,Wl,In,fs,Gl,ea,Yl,Zl,Ln,gs,Jl,Bn,Vm='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>',Vn,Rn,_e,Kl,Xn,K,Ql,aa,so,eo,na,ao,no,Fn,$e,to,Wn,Ls,Gn,ke,lo,Yn,Bs,Zn,is,vs,ta,Vs,oo,la,ro,Jn,M,po,oa,io,uo,ra,mo,co,pa,ho,fo,ia,go,vo,ua,bo,qo,ma,jo,_o,ca,$o,ko,Kn,D,Eo,da,wo,yo,ha,xo,Po,fa,Co,Mo,ga,zo,Ao,va,Do,No,ba,To,Uo,Qn,Ee,Oo,st,Rs,et,bs,So,qa,Ho,Io,at,qs,nt,z,Lo,ja,Bo,Vo,_a,Ro,Xo,$a,Fo,Wo,ka,Go,Yo,Ea,Zo,Jo,wa,Ko,Qo,tt,Rm='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>p</mi><mi mathvariant="normal">&quot;</mi><mo separator="true">,</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>u</mi><mi mathvariant="normal">&quot;</mi><mo separator="true">,</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>g</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>p</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">)</mo><mo>\xD7</mo><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>u</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">)</mo><mo>\xD7</mo><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>g</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>5</mn><mn>210</mn></mfrac><mo>\xD7</mo><mfrac><mn>36</mn><mn>210</mn></mfrac><mo>\xD7</mo><mfrac><mn>20</mn><mn>210</mn></mfrac><mo>=</mo><mn>0.000389</mn></mrow><annotation encoding="application/x-tex">P([``p&quot;, ``u&quot;, ``g&quot;]) = P(``p&quot;) \\times P(``u&quot;) \\times P(``g&quot;) = \\frac{5}{210} \\times \\frac{36}{210} \\times \\frac{20}{210} = 0.000389</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">([</span><span class="mord">\u2018\u2018</span><span class="mord mathnormal">p</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">\u2018\u2018</span><span class="mord mathnormal">u</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">\u2018\u2018</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">&quot;</span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord">\u2018\u2018</span><span class="mord mathnormal">p</span><span class="mord">&quot;</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord">\u2018\u2018</span><span class="mord mathnormal">u</span><span class="mord">&quot;</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord">\u2018\u2018</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">&quot;</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">210</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">210</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">36</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">210</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">20</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.000389</span></span></span></span></span>',lt,us,sr,ya,er,ar,ot,Xm='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>p</mi><mi>u</mi><mi mathvariant="normal">&quot;</mi><mo separator="true">,</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>g</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>p</mi><mi>u</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">)</mo><mo>\xD7</mo><mi>P</mi><mo stretchy="false">(</mo><mi mathvariant="normal">\u2018</mi><mi mathvariant="normal">\u2018</mi><mi>g</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>5</mn><mn>210</mn></mfrac><mo>\xD7</mo><mfrac><mn>20</mn><mn>210</mn></mfrac><mo>=</mo><mn>0.0022676</mn></mrow><annotation encoding="application/x-tex">P([``pu&quot;, ``g&quot;]) = P(``pu&quot;) \\times P(``g&quot;) = \\frac{5}{210} \\times \\frac{20}{210} = 0.0022676</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">([</span><span class="mord">\u2018\u2018</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">\u2018\u2018</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">&quot;</span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord">\u2018\u2018</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord">&quot;</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord">\u2018\u2018</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">&quot;</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">210</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">210</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">20</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.0022676</span></span></span></span></span>',rt,F,nr,xa,tr,lr,Pa,or,rr,Ca,pr,ir,pt,Q,ur,Ma,mr,cr,za,dr,hr,it,Xs,ut,W,fr,Aa,gr,vr,Da,br,qr,Na,jr,_r,mt,T,$r,Ta,kr,Er,Ua,wr,yr,Oa,xr,Pr,Sa,Cr,Mr,Ha,zr,Ar,ct,we,Dr,dt,js,Nr,Ia,Tr,Ur,ht,Fs,ft,ss,Or,La,Sr,Hr,Ba,Ir,Lr,gt,_s,vt,ms,$s,Va,Ws,Br,Ra,Vr,bt,es,Rr,Xa,Xr,Fr,Fa,Wr,Gr,qt,ks,Yr,Wa,Zr,Jr,jt,ye,Kr,_t,Gs,$t,xe,Qr,kt,Ys,Et,Pe,sp,wt,Zs,yt,H,ep,Ga,ap,np,Ya,tp,lp,Za,op,rp,Ja,pp,ip,xt,G,up,Ka,mp,cp,Qa,dp,hp,sn,fp,gp,Pt,Js,Ct,Ce,vp,Mt,Ks,zt,as,bp,en,qp,jp,an,_p,$p,At,cs,Es,nn,Qs,kp,Me,Ep,tn,wp,Dt,ns,yp,ln,xp,Pp,on,Cp,Mp,Nt,ze,zp,Tt,se,Ut,ws,Ap,rn,Dp,Np,Ot,ee,St,ys,Tp,pn,Up,Op,Ht,ae,It,Ae,Sp,Lt,ne,Bt,te,Vt,De,Hp,Rt,le,Xt,xs,Ft,Ne,Ip,Wt,oe,Gt,Y,Lp,un,Bp,Vp,mn,Rp,Xp,cn,Fp,Wp,Yt,Ps,Gp,dn,Yp,Zp,Zt,Cs,Jp,hn,Kp,Qp,Jt,re,Kt,Te,si,Qt,pe,sl,ie,el,Ue,ei,al,ue,nl,Oe,ai,tl,me,ll,ce,ol,ts,ni,fn,ti,li,gn,oi,ri,rl,de,pl,Ms,pi,vn,ii,ui,il,he,ul,U,mi,bn,ci,di,qn,hi,fi,jn,gi,vi,_n,bi,qi,$n,ji,_i,ml,fe,cl,zs,dl,ls,$i,kn,ki,Ei,En,wi,yi,hl,ge,fl,As,xi,wn,Pi,Ci,gl,ve,vl,be,bl,I,Mi,yn,zi,Ai,xn,Di,Ni,Pn,Ti,Ui,Cn,Oi,Si,ql;return j=new Tn({}),A=new Km({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter6/section7.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter6/section7.ipynb"}]}}),Hs=new Jm({props:{id:"TGZfZVuF9Yc"}}),ds=new Nn({props:{$$slots:{default:[Qm]},$$scope:{ctx:R}}}),Is=new Tn({}),Ls=new $({props:{code:'("hug", 10), ("pug", 5), ("pun", 12), ("bun", 4), ("hugs", 5) # "c\xE2lin", "carlin", "jeu de mots", "brioche", "c\xE2lins"...',highlighted:'(<span class="hljs-string">&quot;hug&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;pug&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;pun&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;bun&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;hugs&quot;</span>, <span class="hljs-number">5</span>) <span class="hljs-meta"># <span class="hljs-string">&quot;c\xE2lin&quot;</span>, <span class="hljs-string">&quot;carlin&quot;</span>, <span class="hljs-string">&quot;jeu de mots&quot;</span>, <span class="hljs-string">&quot;brioche&quot;</span>, <span class="hljs-string">&quot;c\xE2lins&quot;</span>...</span>'}}),Bs=new $({props:{code:'["h", "u", "g", "hu", "ug", "p", "pu", "n", "un", "b", "bu", "s", "hug", "gs", "ugs"]',highlighted:'<span class="hljs-selector-attr">[<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;hu&quot;</span>, <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;pu&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;un&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;bu&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;hug&quot;</span>, <span class="hljs-string">&quot;gs&quot;</span>, <span class="hljs-string">&quot;ugs&quot;</span>]</span>'}}),Vs=new Tn({}),Rs=new $({props:{code:`("h", 15) ("u", 36) ("g", 20) ("hu", 15) ("ug", 20) ("p", 17) ("pu", 17) ("n", 16)
("un", 16) ("b", 4) ("bu", 4) ("s", 5) ("hug", 15) ("gs", 5) ("ugs", 5)`,highlighted:`(<span class="hljs-string">&quot;h&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span>) (<span class="hljs-string">&quot;u&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">36</span>) (<span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20</span>) (<span class="hljs-string">&quot;hu&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span>) (<span class="hljs-string">&quot;ug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20</span>) (<span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">17</span>) (<span class="hljs-string">&quot;pu&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">17</span>) (<span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>)
(<span class="hljs-string">&quot;un&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>) (<span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>) (<span class="hljs-string">&quot;bu&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>) (<span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>) (<span class="hljs-string">&quot;hug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span>) (<span class="hljs-string">&quot;gs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>) (<span class="hljs-string">&quot;ugs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)`}}),qs=new Nn({props:{$$slots:{default:[sc]},$$scope:{ctx:R}}}),Xs=new $({props:{code:`["p", "u", "g"] : 0.000389
["p", "ug"] : 0.0022676
["pu", "g"] : 0.0022676`,highlighted:`[<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>] : 0.000389
[<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;ug&quot;</span>] : 0.0022676
[<span class="hljs-string">&quot;pu&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>] : 0.0022676`}}),Fs=new $({props:{code:`Character 0 (u): "u" (score 0.171429)
Character 1 (n): "un" (score 0.076191)
Character 2 (h): "un" "h" (score 0.005442)
Character 3 (u): "un" "hu" (score 0.005442)
Character 4 (g): "un" "hug" (score 0.005442)`,highlighted:`<span class="hljs-attribute">Character</span> <span class="hljs-number">0</span> (u): <span class="hljs-string">&quot;u&quot;</span> (score <span class="hljs-number">0</span>.<span class="hljs-number">171429</span>)
<span class="hljs-attribute">Character</span> <span class="hljs-number">1</span> (n): <span class="hljs-string">&quot;un&quot;</span> (score <span class="hljs-number">0</span>.<span class="hljs-number">076191</span>)
<span class="hljs-attribute">Character</span> <span class="hljs-number">2</span> (h): <span class="hljs-string">&quot;un&quot;</span> <span class="hljs-string">&quot;h&quot;</span> (score <span class="hljs-number">0</span>.<span class="hljs-number">005442</span>)
<span class="hljs-attribute">Character</span> <span class="hljs-number">3</span> (u): <span class="hljs-string">&quot;un&quot;</span> <span class="hljs-string">&quot;hu&quot;</span> (score <span class="hljs-number">0</span>.<span class="hljs-number">005442</span>)
<span class="hljs-attribute">Character</span> <span class="hljs-number">4</span> (g): <span class="hljs-string">&quot;un&quot;</span> <span class="hljs-string">&quot;hug&quot;</span> (score <span class="hljs-number">0</span>.<span class="hljs-number">005442</span>)`}}),_s=new Nn({props:{$$slots:{default:[ec]},$$scope:{ctx:R}}}),Ws=new Tn({}),Gs=new $({props:{code:'("hug", 10), ("pug", 5), ("pun", 12), ("bun", 4), ("hugs", 5)',highlighted:'(<span class="hljs-string">&quot;hug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;bun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;hugs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)'}}),Ys=new $({props:{code:`"hug": ["hug"] (score 0.071428)
"pug": ["pu", "g"] (score 0.007710)
"pun": ["pu", "n"] (score 0.006168)
"bun": ["bu", "n"] (score 0.001451)
"hugs": ["hug", "s"] (score 0.001701)`,highlighted:`<span class="hljs-string">&quot;hug&quot;</span>: [<span class="hljs-string">&quot;hug&quot;</span>] <span class="hljs-comment">(score 0.071428)</span>
<span class="hljs-string">&quot;pug&quot;</span>: [<span class="hljs-string">&quot;pu&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>] <span class="hljs-comment">(score 0.007710)</span>
<span class="hljs-string">&quot;pun&quot;</span>: [<span class="hljs-string">&quot;pu&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>] <span class="hljs-comment">(score 0.006168)</span>
<span class="hljs-string">&quot;bun&quot;</span>: [<span class="hljs-string">&quot;bu&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>] <span class="hljs-comment">(score 0.001451)</span>
<span class="hljs-string">&quot;hugs&quot;</span>: [<span class="hljs-string">&quot;hug&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>] <span class="hljs-comment">(score 0.001701)</span>`}}),Zs=new $({props:{code:"10 * (-log(0.071428)) + 5 * (-log(0.007710)) + 12 * (-log(0.006168)) + 4 * (-log(0.001451)) + 5 * (-log(0.001701)) = 169.8",highlighted:'<span class="hljs-attribute">10</span> * (-log(<span class="hljs-number">0</span>.<span class="hljs-number">071428</span>)) + <span class="hljs-number">5</span> * (-log(<span class="hljs-number">0</span>.<span class="hljs-number">007710</span>)) + <span class="hljs-number">12</span> * (-log(<span class="hljs-number">0</span>.<span class="hljs-number">006168</span>)) + <span class="hljs-number">4</span> * (-log(<span class="hljs-number">0</span>.<span class="hljs-number">001451</span>)) + <span class="hljs-number">5</span> * (-log(<span class="hljs-number">0</span>.<span class="hljs-number">001701</span>)) = <span class="hljs-number">169</span>.<span class="hljs-number">8</span>'}}),Js=new $({props:{code:`"hug": ["hu", "g"] (score 0.006802)
"hugs": ["hu", "gs"] (score 0.001701)`,highlighted:`<span class="hljs-string">&quot;hug&quot;</span>: [<span class="hljs-string">&quot;hu&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>] <span class="hljs-comment">(score 0.006802)</span>
<span class="hljs-string">&quot;hugs&quot;</span>: [<span class="hljs-string">&quot;hu&quot;</span>, <span class="hljs-string">&quot;gs&quot;</span>] <span class="hljs-comment">(score 0.001701)</span>`}}),Ks=new $({props:{code:"- 10 * (-log(0.071428)) + 10 * (-log(0.006802)) = 23.5",highlighted:'- <span class="hljs-number">10</span> * (<span class="hljs-name">-log</span>(<span class="hljs-number">0.071428</span>)) + <span class="hljs-number">10</span> * (<span class="hljs-name">-log</span>(<span class="hljs-number">0.006802</span>)) = <span class="hljs-number">23.5</span>'}}),Qs=new Tn({}),se=new $({props:{code:`corpus = [
    "This is the Hugging Face Course.",
    # C'est le cours d'Hugging Face.
    "This chapter is about tokenization.",
    # Ce chapitre traite de la tokenisation.
    "This section shows several tokenizer algorithms.",
    # Cette section pr\xE9sente plusieurs algorithmes de *tokenizer*.
    "Hopefully, you will be able to understand how they are trained and generate tokens.",
    # Avec un peu de chance, vous serez en mesure de comprendre comment ils sont entra\xEEn\xE9s et g\xE9n\xE8rent des *tokens*.
]`,highlighted:`corpus = [
    <span class="hljs-string">&quot;This is the Hugging Face Course.&quot;</span>,
    <span class="hljs-comment"># C&#x27;est le cours d&#x27;Hugging Face.</span>
    <span class="hljs-string">&quot;This chapter is about tokenization.&quot;</span>,
    <span class="hljs-comment"># Ce chapitre traite de la tokenisation.</span>
    <span class="hljs-string">&quot;This section shows several tokenizer algorithms.&quot;</span>,
    <span class="hljs-comment"># Cette section pr\xE9sente plusieurs algorithmes de *tokenizer*.</span>
    <span class="hljs-string">&quot;Hopefully, you will be able to understand how they are trained and generate tokens.&quot;</span>,
    <span class="hljs-comment"># Avec un peu de chance, vous serez en mesure de comprendre comment ils sont entra\xEEn\xE9s et g\xE9n\xE8rent des *tokens*.</span>
]`}}),ee=new $({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;xlnet-base-cased&quot;</span>)`}}),ae=new $({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict

word_freqs = defaultdict(<span class="hljs-built_in">int</span>)
<span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> corpus:
    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)
    new_words = [word <span class="hljs-keyword">for</span> word, offset <span class="hljs-keyword">in</span> words_with_offsets]
    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> new_words:
        word_freqs[word] += <span class="hljs-number">1</span>

word_freqs`}}),ne=new $({props:{code:"",highlighted:`char_freqs = defaultdict(<span class="hljs-built_in">int</span>)
subwords_freqs = defaultdict(<span class="hljs-built_in">int</span>)
<span class="hljs-keyword">for</span> word, freq <span class="hljs-keyword">in</span> word_freqs.items():
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(word)):
        char_freqs[word[i]] += freq
        <span class="hljs-comment"># Boucle \xE0 travers les sous-mots de longueur au moins \xE9gale \xE0 2</span>
        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(word) + <span class="hljs-number">1</span>):
            subwords_freqs[word[i:j]] += freq

<span class="hljs-comment"># Trier les sous-mots par fr\xE9quence</span>
sorted_subwords = <span class="hljs-built_in">sorted</span>(subwords_freqs.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)
sorted_subwords[:<span class="hljs-number">10</span>]`}}),te=new $({props:{code:"[('\u2581t', 7), ('is', 5), ('er', 5), ('\u2581a', 5), ('\u2581to', 4), ('to', 4), ('en', 4), ('\u2581T', 3), ('\u2581Th', 3), ('\u2581Thi', 3)]",highlighted:'[(<span class="hljs-string">&#x27;\u2581t&#x27;</span>, <span class="hljs-number">7</span>), (<span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;er&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;\u2581a&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;\u2581to&#x27;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;\u2581T&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;\u2581Th&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;\u2581Thi&#x27;</span>, <span class="hljs-number">3</span>)]'}}),le=new $({props:{code:`token_freqs = list(char_freqs.items()) + sorted_subwords[: 300 - len(char_freqs)]
token_freqs = {token: freq for token, freq in token_freqs}`,highlighted:`token_freqs = <span class="hljs-built_in">list</span>(char_freqs.items()) + sorted_subwords[: <span class="hljs-number">300</span> - <span class="hljs-built_in">len</span>(char_freqs)]
token_freqs = {token: freq <span class="hljs-keyword">for</span> token, freq <span class="hljs-keyword">in</span> token_freqs}`}}),xs=new Nn({props:{$$slots:{default:[ac]},$$scope:{ctx:R}}}),oe=new $({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log

total_sum = <span class="hljs-built_in">sum</span>([freq <span class="hljs-keyword">for</span> token, freq <span class="hljs-keyword">in</span> token_freqs.items()])
model = {token: -log(freq / total_sum) <span class="hljs-keyword">for</span> token, freq <span class="hljs-keyword">in</span> token_freqs.items()}`}}),re=new $({props:{code:`
`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_word</span>(<span class="hljs-params">word, model</span>):
    best_segmentations = [{<span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">1</span>}] + [
        {<span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-literal">None</span>} <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(word))
    ]
    <span class="hljs-keyword">for</span> start_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(word)):
        <span class="hljs-comment"># Doit \xEAtre correctement rempli par les \xE9tapes pr\xE9c\xE9dentes de la boucle</span>
        best_score_at_start = best_segmentations[start_idx][<span class="hljs-string">&quot;score&quot;</span>]
        <span class="hljs-keyword">for</span> end_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_idx + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(word) + <span class="hljs-number">1</span>):
            token = word[start_idx:end_idx]
            <span class="hljs-keyword">if</span> token <span class="hljs-keyword">in</span> model <span class="hljs-keyword">and</span> best_score_at_start <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
                score = model[token] + best_score_at_start
                <span class="hljs-comment"># Si nous avons trouv\xE9 une meilleure segmentation se terminant \xE0 end_idx, nous mettons \xE0 jour</span>
                <span class="hljs-keyword">if</span> (
                    best_segmentations[end_idx][<span class="hljs-string">&quot;score&quot;</span>] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>
                    <span class="hljs-keyword">or</span> best_segmentations[end_idx][<span class="hljs-string">&quot;score&quot;</span>] &gt; score
                ):
                    best_segmentations[end_idx] = {<span class="hljs-string">&quot;start&quot;</span>: start_idx, <span class="hljs-string">&quot;score&quot;</span>: score}

    segmentation = best_segmentations[-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">if</span> segmentation[<span class="hljs-string">&quot;score&quot;</span>] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:
        <span class="hljs-comment"># Nous n&#x27;avons pas trouv\xE9 de tokenization du mot -&gt; inconnu (&lt;unk&gt;)</span>
        <span class="hljs-keyword">return</span> [<span class="hljs-string">&quot;&lt;unk&gt;&quot;</span>], <span class="hljs-literal">None</span>

    score = segmentation[<span class="hljs-string">&quot;score&quot;</span>]
    start = segmentation[<span class="hljs-string">&quot;start&quot;</span>]
    end = <span class="hljs-built_in">len</span>(word)
    tokens = []
    <span class="hljs-keyword">while</span> start != <span class="hljs-number">0</span>:
        tokens.insert(<span class="hljs-number">0</span>, word[start:end])
        next_start = best_segmentations[start][<span class="hljs-string">&quot;start&quot;</span>]
        end = start
        start = next_start
    tokens.insert(<span class="hljs-number">0</span>, word[start:end])
    <span class="hljs-keyword">return</span> tokens, score`}}),pe=new $({props:{code:`print(encode_word("Hopefully", model))
print(encode_word("This", model))`,highlighted:`<span class="hljs-built_in">print</span>(encode_word(<span class="hljs-string">&quot;Hopefully&quot;</span>, model))
<span class="hljs-built_in">print</span>(encode_word(<span class="hljs-string">&quot;This&quot;</span>, model))`}}),ie=new $({props:{code:`(['H', 'o', 'p', 'e', 'f', 'u', 'll', 'y'], 41.5157494601402)
(['This'], 6.288267030694535)`,highlighted:`([<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;ll&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>], <span class="hljs-number">41.5157494601402</span>)
([<span class="hljs-string">&#x27;This&#x27;</span>], <span class="hljs-number">6.288267030694535</span>)`}}),ue=new $({props:{code:`def compute_loss(model):
    loss = 0
    for word, freq in word_freqs.items():
        _, word_loss = encode_word(word, model)
        loss += freq * word_loss
    return loss`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">model</span>):
    loss = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> word, freq <span class="hljs-keyword">in</span> word_freqs.items():
        _, word_loss = encode_word(word, model)
        loss += freq * word_loss
    <span class="hljs-keyword">return</span> loss`}}),me=new $({props:{code:"compute_loss(model)",highlighted:"compute_loss(model)"}}),ce=new $({props:{code:"413.10377642940875",highlighted:'<span class="hljs-number">413.10377642940875</span>'}}),de=new $({props:{code:`
`,highlighted:`<span class="hljs-keyword">import</span> copy


<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_scores</span>(<span class="hljs-params">model</span>):
    scores = {}
    model_loss = compute_loss(model)
    <span class="hljs-keyword">for</span> token, score <span class="hljs-keyword">in</span> model.items():
        <span class="hljs-comment"># Nous gardons toujours les tokens de longueur 1.</span>
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(token) == <span class="hljs-number">1</span>:
            <span class="hljs-keyword">continue</span>
        model_without_token = copy.deepcopy(model)
        _ = model_without_token.pop(token)
        scores[token] = compute_loss(model_without_token) - model_loss
    <span class="hljs-keyword">return</span> scores`}}),he=new $({props:{code:`scores = compute_scores(model)
print(scores["ll"])
print(scores["his"])`,highlighted:`scores = compute_scores(model)
<span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&quot;ll&quot;</span>])
<span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&quot;his&quot;</span>])`}}),fe=new $({props:{code:`6.376412403623874
0.0`,highlighted:`<span class="hljs-number">6.376412403623874</span>
<span class="hljs-number">0.0</span>`}}),zs=new Nn({props:{$$slots:{default:[nc]},$$scope:{ctx:R}}}),ge=new $({props:{code:"",highlighted:`percent_to_remove = <span class="hljs-number">0.1</span>
<span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(model) &gt; <span class="hljs-number">100</span>:
    scores = compute_scores(model)
    sorted_scores = <span class="hljs-built_in">sorted</span>(scores.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])
    <span class="hljs-comment"># Supprime les tokens percent_to_remove ayant les scores les plus bas</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(model) * percent_to_remove)):
        _ = token_freqs.pop(sorted_scores[i][<span class="hljs-number">0</span>])

    total_sum = <span class="hljs-built_in">sum</span>([freq <span class="hljs-keyword">for</span> token, freq <span class="hljs-keyword">in</span> token_freqs.items()])
    model = {token: -log(freq / total_sum) <span class="hljs-keyword">for</span> token, freq <span class="hljs-keyword">in</span> token_freqs.items()}`}}),ve=new $({props:{code:`
`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">text, model</span>):
    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)
    pre_tokenized_text = [word <span class="hljs-keyword">for</span> word, offset <span class="hljs-keyword">in</span> words_with_offsets]
    encoded_words = [encode_word(word, model)[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> pre_tokenized_text]
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(encoded_words, [])


tokenize(<span class="hljs-string">&quot;This is the Hugging Face course.&quot;</span>, model)`}}),be=new $({props:{code:"['\u2581This', '\u2581is', '\u2581the', '\u2581Hugging', '\u2581Face', '\u2581', 'c', 'ou', 'r', 's', 'e', '.']",highlighted:'[<span class="hljs-string">&#x27;\u2581This&#x27;</span>, <span class="hljs-string">&#x27;\u2581is&#x27;</span>, <span class="hljs-string">&#x27;\u2581the&#x27;</span>, <span class="hljs-string">&#x27;\u2581Hugging&#x27;</span>, <span class="hljs-string">&#x27;\u2581Face&#x27;</span>, <span class="hljs-string">&#x27;\u2581&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;ou&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>]'}}),{c(){c=o("meta"),y=u(),q=o("h1"),k=o("a"),w=o("span"),d(j.$$.fragment),_=u(),x=o("span"),C=n("Tokenisation "),E=o("i"),B=n("Unigram"),N=u(),d(A.$$.fragment),Ss=u(),V=o("p"),je=n("L\u2019algorithme "),Ge=o("em"),Tl=n("Unigram"),Ul=n(" est souvent utilis\xE9 dans "),Ye=o("em"),Ol=n("SentencePiece"),Sl=n(", qui est l\u2019algorithme de tokenization utilis\xE9 par des mod\xE8les comme ALBERT, T5, mBART, Big Bird et XLNet."),Un=u(),d(Hs.$$.fragment),On=u(),d(ds.$$.fragment),Sn=u(),ps=o("h2"),hs=o("a"),Ze=o("span"),d(Is.$$.fragment),Hl=u(),Je=o("span"),Il=n("Algorithme d'entra\xEEnement"),Hn=u(),X=o("p"),Ll=n("Compar\xE9 au BPE et "),Ke=o("em"),Bl=n("WordPiece"),Vl=n(", "),Qe=o("em"),Rl=n("Unigram"),Xl=n(" fonctionne dans l\u2019autre sens : il part d\u2019un grand vocabulaire et enl\xE8ve des "),sa=o("em"),Fl=n("tokens"),Wl=n(" jusqu\u2019\xE0 atteindre la taille de vocabulaire d\xE9sir\xE9e. Il existe plusieurs options pour construire ce vocabulaire de base. Nous pouvons par exemple prendre les sous-cha\xEEnes les plus courantes dans les mots pr\xE9tok\xE9nis\xE9s ou appliquer le BPE sur le corpus initial avec une grande taille de vocabulaire."),In=u(),fs=o("p"),Gl=n("\xC0 chaque \xE9tape de l\u2019entra\xEEnement, l\u2019algorithme "),ea=o("em"),Yl=n("Unigram"),Zl=n(" calcule une perte sur le corpus compte tenu du vocabulaire actuel. Ensuite, pour chaque symbole du vocabulaire, l\u2019algorithme calcule de combien la perte globale augmenterait si le symbole \xE9tait supprim\xE9 et recherche les symboles qui l\u2019augmenteraient le moins. Ces symboles ont un effet moindre sur la perte globale du corpus, ils sont donc en quelque sorte \xAB moins n\xE9cessaires \xBB et sont les meilleurs candidats \xE0 la suppression."),Ln=u(),gs=o("p"),Jl=n("Comme il s\u2019agit d\u2019une op\xE9ration tr\xE8s co\xFBteuse, nous ne nous contentons pas de supprimer le symbole unique associ\xE9 \xE0 la plus faible augmentation de la perte mais le "),Bn=new Ii,Vn=n(" pourcent des symboles associ\xE9s \xE0 la plus faible augmentation de la perte. (p\\) est un hyperparam\xE8tre que vous pouvez contr\xF4ler, valant g\xE9n\xE9ralement 10 ou 20. Ce processus est ensuite r\xE9p\xE9t\xE9 jusqu\u2019\xE0 ce que le vocabulaire ait atteint la taille souhait\xE9e."),Rn=u(),_e=o("p"),Kl=n("Notez que nous ne supprimons jamais les caract\xE8res de base, afin de nous assurer que tout mot peut \xEAtre tokenis\xE9."),Xn=u(),K=o("p"),Ql=n("Tout ceci peut para\xEEtre encore un peu vague. En effet, la partie principale de l\u2019algorithme est de calculer une perte sur le corpus et de voir comment elle change lorsque nous supprimons certains "),aa=o("em"),so=n("tokens"),eo=n(" du vocabulaire mais nous n\u2019avons pas encore expliqu\xE9 comment le faire. Cette \xE9tape repose sur l\u2019algorithme de tok\xE9nisation "),na=o("em"),ao=n("Unigram"),no=n(", nous allons donc l\u2019aborder \xE0 pr\xE9sent."),Fn=u(),$e=o("p"),to=n("Nous allons r\xE9utiliser le corpus des exemples pr\xE9c\xE9dents :"),Wn=u(),d(Ls.$$.fragment),Gn=u(),ke=o("p"),lo=n("et pour cet exemple, nous prendrons toutes les sous-cha\xEEnes strictes pour le vocabulaire initial :"),Yn=u(),d(Bs.$$.fragment),Zn=u(),is=o("h2"),vs=o("a"),ta=o("span"),d(Vs.$$.fragment),oo=u(),la=o("span"),ro=n("Algorithme de tokenisation"),Jn=u(),M=o("p"),po=n("Un mod\xE8le "),oa=o("em"),io=n("Unigram"),uo=n(" est un type de mod\xE8le de langage qui consid\xE8re que chaque "),ra=o("em"),mo=n("token"),co=n(" est ind\xE9pendant des "),pa=o("em"),ho=n("tokens"),fo=n(" qui le pr\xE9c\xE8dent. Il s\u2019agit du mod\xE8le de langage le plus simple, dans le sens o\xF9 la probabilit\xE9 du "),ia=o("em"),go=n("token"),vo=n(" X compte tenu du contexte pr\xE9c\xE9dent est simplement la probabilit\xE9 du "),ua=o("em"),bo=n("token"),qo=n(" X. Ainsi, si nous utilisions un mod\xE8le de langage "),ma=o("em"),jo=n("Unigram"),_o=n(" pour g\xE9n\xE9rer du texte, nous pr\xE9dirions toujours le "),ca=o("em"),$o=n("token"),ko=n(" le plus courant."),Kn=u(),D=o("p"),Eo=n("La probabilit\xE9 d\u2019un "),da=o("em"),wo=n("token"),yo=n(" donn\xE9 est sa fr\xE9quence (le nombre de fois que nous le trouvons) dans le corpus original, divis\xE9e par la somme de toutes les fr\xE9quences de tous les "),ha=o("em"),xo=n("tokens"),Po=n(" dans le vocabulaire (pour s\u2019assurer que la somme des probabilit\xE9s est \xE9gale \xE0 1). Par exemple, "),fa=o("code"),Co=n('"ug"'),Mo=n(" est pr\xE9sent dans "),ga=o("code"),zo=n('"hug"'),Ao=n(", "),va=o("code"),Do=n('"pug"'),No=n(", et "),ba=o("code"),To=n('"hugs"'),Uo=n(". Il a donc une fr\xE9quence de 20 dans notre corpus."),Qn=u(),Ee=o("p"),Oo=n("Voici les fr\xE9quences de tous les sous-mots possibles dans le vocabulaire :"),st=u(),d(Rs.$$.fragment),et=u(),bs=o("p"),So=n("Ainsi, la somme de toutes les fr\xE9quences est de 210 et la probabilit\xE9 du sous-mot "),qa=o("code"),Ho=n('"ug"'),Io=n(" est donc de 20/210."),at=u(),d(qs.$$.fragment),nt=u(),z=o("p"),Lo=n("Maintenant, pour tokeniser un mot donn\xE9, nous examinons toutes les segmentations possibles en "),ja=o("em"),Bo=n("tokens"),Vo=n(" et calculons la probabilit\xE9 de chacune d\u2019entre elles selon le mod\xE8le "),_a=o("em"),Ro=n("Unigram"),Xo=n(". Puisque tous les "),$a=o("em"),Fo=n("tokens"),Wo=n(" sont consid\xE9r\xE9s comme ind\xE9pendants, cette probabilit\xE9 est juste le produit de la probabilit\xE9 de chaque "),ka=o("em"),Go=n("token"),Yo=n(". Par exemple, la tokenisation "),Ea=o("code"),Zo=n('["p", "u", "g"]'),Jo=n(" de "),wa=o("code"),Ko=n('"pug"'),Qo=n(` a la probabilit\xE9 :
`),tt=new Ii,lt=u(),us=o("p"),sr=n("Comparativement, la tokenization "),ya=o("code"),er=n('["pu", "g"]'),ar=n(` a la probabilit\xE9 :
`),ot=new Ii,rt=u(),F=o("p"),nr=n("donc celle-l\xE0 est beaucoup plus probable. En g\xE9n\xE9ral, les tok\xE9nisations comportant le moins de "),xa=o("em"),tr=n("tokens"),lr=n(" possible auront la probabilit\xE9 la plus \xE9lev\xE9e (en raison de la division par 210 r\xE9p\xE9t\xE9e pour chaque "),Pa=o("em"),or=n("token"),rr=n("), ce qui correspond \xE0 ce que nous voulons intuitivement : diviser un mot en un nombre de "),Ca=o("em"),pr=n("tokens"),ir=n(" le plus faible possible."),pt=u(),Q=o("p"),ur=n("La tokenisation d\u2019un mot avec le mod\xE8le "),Ma=o("em"),mr=n("Unigram"),cr=n(" est donc la tokenisation avec la plus haute probabilit\xE9. Dans l\u2019exemple de "),za=o("code"),dr=n('"pug"'),hr=n(", voici les probabilit\xE9s que nous obtiendrions pour chaque segmentation possible :"),it=u(),d(Xs.$$.fragment),ut=u(),W=o("p"),fr=n("Ainsi, "),Aa=o("code"),gr=n('"pug"'),vr=n(" sera tokenis\xE9 comme "),Da=o("code"),br=n('["p", "ug"]'),qr=n(" ou "),Na=o("code"),jr=n('["pu", "g"]'),_r=n(", selon la segmentation rencontr\xE9e en premier (notez que dans un corpus plus large, les cas d\u2019\xE9galit\xE9 comme celui-ci seront rares)."),mt=u(),T=o("p"),$r=n("Dans ce cas-ci, cela a \xE9t\xE9 facile de trouver toutes les segmentations possibles et de calculer leurs probabilit\xE9s, mais en g\xE9n\xE9ral ce sera un peu plus difficile. Il existe un algorithme classique utilis\xE9 pour cela, appel\xE9 "),Ta=o("em"),kr=n("algorithme de Viterbi"),Er=n(". Essentiellement, on peut construire un graphe pour d\xE9tecter les segmentations possibles d\u2019un mot donn\xE9 en disant qu\u2019il existe une branche du caract\xE8re "),Ua=o("em"),wr=n("a"),yr=n(" au caract\xE8re "),Oa=o("em"),xr=n("b"),Pr=n(" si le sous-mot de "),Sa=o("em"),Cr=n("a"),Mr=n(" \xE0 "),Ha=o("em"),zr=n("b"),Ar=n(" est dans le vocabulaire, et attribuer \xE0 cette branche la probabilit\xE9 du sous-mot."),ct=u(),we=o("p"),Dr=n("Pour trouver le chemin qui va avoir le meilleur score dans ce graphe, l\u2019algorithme de Viterbi d\xE9termine, pour chaque position dans le mot, la segmentation avec le meilleur score qui se termine \xE0 cette position. Puisque nous allons du d\xE9but \xE0 la fin, ce meilleur score peut \xEAtre trouv\xE9 en parcourant en boucle tous les sous-mots se terminant \xE0 la position actuelle, puis en utilisant le meilleur score de tokenization de la position \xE0 laquelle ce sous-mot commence. Ensuite, il suffit de d\xE9rouler le chemin emprunt\xE9 pour arriver \xE0 la fin."),dt=u(),js=o("p"),Nr=n("Prenons un exemple en utilisant notre vocabulaire et le mot "),Ia=o("code"),Tr=n('"unhug"'),Ur=n(". Pour chaque position, les sous-mots avec les meilleurs scores se terminant l\xE0 sont les suivants :"),ht=u(),d(Fs.$$.fragment),ft=u(),ss=o("p"),Or=n("Ainsi, "),La=o("code"),Sr=n('"unhug"'),Hr=n(" serait tokenis\xE9 comme "),Ba=o("code"),Ir=n('["un", "hug"]'),Lr=n("."),gt=u(),d(_s.$$.fragment),vt=u(),ms=o("h2"),$s=o("a"),Va=o("span"),d(Ws.$$.fragment),Br=u(),Ra=o("span"),Vr=n("Retour \xE0 l'entra\xEEnement"),bt=u(),es=o("p"),Rr=n("Maintenant que nous avons vu comment fonctionne la tokenisation, nous pouvons nous plonger un peu plus profond\xE9ment dans la perte utilis\xE9e pendant l\u2019entra\xEEnement. \xC0 n\u2019importe quelle \xE9tape, cette perte est calcul\xE9e en tokenisant chaque mot du corpus, en utilisant le vocabulaire courant et le mod\xE8le "),Xa=o("em"),Xr=n("Unigram"),Fr=n(" d\xE9termin\xE9 par les fr\xE9quences de chaque "),Fa=o("em"),Wr=n("token"),Gr=n(" dans le corpus (comme vu pr\xE9c\xE9demment)."),qt=u(),ks=o("p"),Yr=n("Chaque mot du corpus a un score, et la perte est le n\xE9gatif du logarithme de ces scores, c\u2019est-\xE0-dire la somme pour tous les mots du corpus de tous les "),Wa=o("code"),Zr=n("-log(P(word))"),Jr=n("."),jt=u(),ye=o("p"),Kr=n("Revenons \xE0 notre exemple avec le corpus suivant :"),_t=u(),d(Gs.$$.fragment),$t=u(),xe=o("p"),Qr=n("La tokenisation de chaque mot avec leurs scores respectifs est :"),kt=u(),d(Ys.$$.fragment),Et=u(),Pe=o("p"),sp=n("Donc la perte est :"),wt=u(),d(Zs.$$.fragment),yt=u(),H=o("p"),ep=n("Maintenant, nous devons calculer comment la suppression de chaque token affecte la perte. C\u2019est plut\xF4t fastidieux, donc nous allons le faire pour deux "),Ga=o("em"),ap=n("tokens"),np=n(" ici et garder tout le processus pour quand nous aurons du code pour nous aider. Dans ce cas (tr\xE8s) particulier, nous avions deux tokenizations \xE9quivalentes de tous les mots. Par exmeple, comme nous l\u2019avons vu pr\xE9c\xE9demment, "),Ya=o("code"),tp=n('"pug"'),lp=n(" pourrait \xEAtre tokenis\xE9 en "),Za=o("code"),op=n('["p", "ug"]'),rp=n(" avec le m\xEAme score. Ainsi, enlever le token "),Ja=o("code"),pp=n('"pu"'),ip=n(" du vocabulaire donnera exactement la m\xEAme perte."),xt=u(),G=o("p"),up=n("D\u2019un autre c\xF4t\xE9, supprimer le mot "),Ka=o("code"),mp=n('"hug"'),cp=n(" aggravera la perte, car la tokenisation de "),Qa=o("code"),dp=n('"hug"'),hp=n(" et "),sn=o("code"),fp=n('"hugs"'),gp=n(" deviendra :"),Pt=u(),d(Js.$$.fragment),Ct=u(),Ce=o("p"),vp=n("Ces changements entra\xEEneront une augmentation de la perte de :"),Mt=u(),d(Ks.$$.fragment),zt=u(),as=o("p"),bp=n("Par cons\xE9quent, le token "),en=o("code"),qp=n('"pu"'),jp=n(" sera probablement retir\xE9 du vocabulaire, mais pas "),an=o("code"),_p=n('"hug"'),$p=n("."),At=u(),cs=o("h2"),Es=o("a"),nn=o("span"),d(Qs.$$.fragment),kp=u(),Me=o("span"),Ep=n("Impl\xE9mentation d'"),tn=o("i"),wp=n("Unigram"),Dt=u(),ns=o("p"),yp=n("Maintenant, impl\xE9mentons tout ce que nous avons vu jusqu\u2019\xE0 pr\xE9sent dans le code. Comme pour le BPE et "),ln=o("em"),xp=n("WordPiece"),Pp=n(", ce n\u2019est pas une impl\xE9mentation efficace de l\u2019algorithme "),on=o("em"),Cp=n("Unigram"),Mp=n(" (bien au contraire), mais elle devrait vous aider \xE0 le comprendre un peu mieux."),Nt=u(),ze=o("p"),zp=n("Nous allons utiliser le m\xEAme corpus que pr\xE9c\xE9demment comme exemple :"),Tt=u(),d(se.$$.fragment),Ut=u(),ws=o("p"),Ap=n("Cette fois, nous allons utiliser "),rn=o("code"),Dp=n("xlnet-base-cased"),Np=n(" comme mod\xE8le :"),Ot=u(),d(ee.$$.fragment),St=u(),ys=o("p"),Tp=n("Comme pour le BPE et "),pn=o("em"),Up=n("WordPiece"),Op=n(", nous commen\xE7ons par compter le nombre d\u2019occurrences de chaque mot dans le corpus :"),Ht=u(),d(ae.$$.fragment),It=u(),Ae=o("p"),Sp=n("Ensuite, nous devons initialiser notre vocabulaire \xE0 une taille plus grande que celle du vocabulaire que nous voudrons \xE0 la fin. Nous devons inclure tous les caract\xE8res de base (sinon nous ne serons pas en mesure de tokeniser chaque mot), mais pour les sous-cha\xEEnes plus grandes, nous ne garderons que les plus communs. AInsi nous les trions par fr\xE9quence :"),Lt=u(),d(ne.$$.fragment),Bt=u(),d(te.$$.fragment),Vt=u(),De=o("p"),Hp=n("Nous regroupons les caract\xE8res avec les meilleurs sous-mots pour arriver \xE0 un vocabulaire initial de taille 300 :"),Rt=u(),d(le.$$.fragment),Xt=u(),d(xs.$$.fragment),Ft=u(),Ne=o("p"),Ip=n("Ensuite, nous calculons la somme de toutes les fr\xE9quences, pour convertir les fr\xE9quences en probabilit\xE9s. Pour notre mod\xE8le, nous allons stocker les logarithmes des probabilit\xE9s, car c\u2019est plus stable num\xE9riquement d\u2019additionner des logarithmes que de multiplier des petits nombres. Cela simplifiera aussi le calcul de la perte du mod\xE8le :"),Wt=u(),d(oe.$$.fragment),Gt=u(),Y=o("p"),Lp=n("Maintenant la fonction principale est celle qui tokenise les mots en utilisant l\u2019algorithme de Viterbi. Comme nous l\u2019avons vu pr\xE9c\xE9demment, cet algorithme calcule la meilleure segmentation de chaque sous-cha\xEEne du mot que nous allons stocker dans une variable nomm\xE9e "),un=o("code"),Bp=n("best_segmentations"),Vp=n(". Nous allons stocker un dictionnaire par position dans le mot (de 0 \xE0 sa longueur totale), avec deux cl\xE9s : l\u2019index du d\xE9but du dernier "),mn=o("em"),Rp=n("token"),Xp=n(" dans la meilleure segmentation et le score de la meilleure segmentation. Avec l\u2019index du d\xE9but du dernier "),cn=o("em"),Fp=n("token"),Wp=n(", nous serons en mesure de r\xE9cup\xE9rer la segmentation compl\xE8te une fois que la liste est compl\xE8tement remplie."),Yt=u(),Ps=o("p"),Gp=n("Le remplissage de la liste se fait \xE0 l\u2019aide de deux boucles seulement : la boucle principale passe en revue chaque position de d\xE9part et la seconde boucle essaie toutes les sous-cha\xEEnes commen\xE7ant \xE0 cette position de d\xE9part. Si la sous-cha\xEEne est dans le vocabulaire, nous avons une nouvelle segmentation du mot jusqu\u2019\xE0 cette position finale que nous comparons \xE0 ce qui est dans "),dn=o("code"),Yp=n("best_segmentations"),Zp=n("."),Zt=u(),Cs=o("p"),Jp=n("Une fois que la boucle principale est termin\xE9e, nous commen\xE7ons juste \xE0 la fin et sautons d\u2019une position de d\xE9part \xE0 une autre, en enregistrant les "),hn=o("em"),Kp=n("tokens"),Qp=n(" au fur et \xE0 mesure, jusqu\u2019\xE0 ce que nous atteignions le d\xE9but du mot :"),Jt=u(),d(re.$$.fragment),Kt=u(),Te=o("p"),si=n("Nous pouvons d\xE9j\xE0 essayer notre mod\xE8le initial sur quelques mots :"),Qt=u(),d(pe.$$.fragment),sl=u(),d(ie.$$.fragment),el=u(),Ue=o("p"),ei=n("Il est maintenant facile de calculer la perte du mod\xE8le sur le corpus !"),al=u(),d(ue.$$.fragment),nl=u(),Oe=o("p"),ai=n("Nous pouvons v\xE9rifier que cela fonctionne sur le mod\xE8le que nous avons :"),tl=u(),d(me.$$.fragment),ll=u(),d(ce.$$.fragment),ol=u(),ts=o("p"),ni=n("Le calcul des scores pour chaque "),fn=o("em"),ti=n("token"),li=n(" n\u2019est pas tr\xE8s difficile non plus. Il suffit de calculer la perte pour les mod\xE8les obtenus en supprimant chaque "),gn=o("em"),oi=n("token"),ri=n(" :"),rl=u(),d(de.$$.fragment),pl=u(),Ms=o("p"),pi=n("Nous pouvons l\u2019essayer sur un "),vn=o("em"),ii=n("token"),ui=n(" donn\xE9 :"),il=u(),d(he.$$.fragment),ul=u(),U=o("p"),mi=n("Puisque "),bn=o("code"),ci=n('"ll"'),di=n(" est utilis\xE9 dans la tokenisation de "),qn=o("code"),hi=n('"Hopefully"'),fi=n(", et que le supprimer nous fera probablement utiliser le token "),jn=o("code"),gi=n('"l"'),vi=n(" deux fois \xE0 la place, nous nous attendons \xE0 ce qu\u2019il ait une perte positive. "),_n=o("code"),bi=n('"his"'),qi=n(" n\u2019est utilis\xE9 qu\u2019\xE0 l\u2019int\xE9rieur du mot "),$n=o("code"),ji=n('"This"'),_i=n(", qui est tokenis\xE9 comme lui-m\xEAme, donc nous nous attendons \xE0 ce qu\u2019il ait une perte nulle. Voici les r\xE9sultats :"),ml=u(),d(fe.$$.fragment),cl=u(),d(zs.$$.fragment),dl=u(),ls=o("p"),$i=n("Une fois tout cela en place, la derni\xE8re chose \xE0 faire est d\u2019ajouter les "),kn=o("em"),ki=n("tokens"),Ei=n(" sp\xE9ciaux utilis\xE9s par le mod\xE8le au vocabulaire, puis de boucler jusqu\u2019\xE0 ce que nous ayons \xE9lagu\xE9 suffisamment de "),En=o("em"),wi=n("tokens"),yi=n(" du vocabulaire pour atteindre la taille souhait\xE9e :"),hl=u(),d(ge.$$.fragment),fl=u(),As=o("p"),xi=n("Ensuite, pour tokeniser un texte, il suffit d\u2019appliquer la pr\xE9tok\xE9nisation et d\u2019utiliser la fonction "),wn=o("code"),Pi=n("encode_word()"),Ci=n(" :"),gl=u(),d(ve.$$.fragment),vl=u(),d(be.$$.fragment),bl=u(),I=o("p"),Mi=n("C\u2019est tout pour "),yn=o("em"),zi=n("Unigram"),Ai=n(" ! Avec un peu de chance, vous vous sentez \xE0 pr\xE9sent \xEAtre un expert des "),xn=o("em"),Di=n("tokenizers"),Ni=n(". Dans la prochaine section, nous allons nous plonger dans les blocs de construction de la biblioth\xE8que \u{1F917} "),Pn=o("em"),Ti=n("Tokenizers"),Ui=n(" et allons vous montrer comment vous pouvez les utiliser pour construire votre propre "),Cn=o("em"),Oi=n("tokenizer"),Si=n("."),this.h()},l(s){const l=Ym('[data-svelte="svelte-1phssyn"]',document.head);c=r(l,"META",{name:!0,content:!0}),l.forEach(a),y=m(s),q=r(s,"H1",{class:!0});var qe=p(q);k=r(qe,"A",{id:!0,class:!0,href:!0});var Mn=p(k);w=r(Mn,"SPAN",{});var zn=p(w);h(j.$$.fragment,zn),zn.forEach(a),Mn.forEach(a),_=m(qe),x=r(qe,"SPAN",{});var Se=p(x);C=t(Se,"Tokenisation "),E=r(Se,"I",{});var An=p(E);B=t(An,"Unigram"),An.forEach(a),Se.forEach(a),qe.forEach(a),N=m(s),h(A.$$.fragment,s),Ss=m(s),V=r(s,"P",{});var He=p(V);je=t(He,"L\u2019algorithme "),Ge=r(He,"EM",{});var Bi=p(Ge);Tl=t(Bi,"Unigram"),Bi.forEach(a),Ul=t(He," est souvent utilis\xE9 dans "),Ye=r(He,"EM",{});var Vi=p(Ye);Ol=t(Vi,"SentencePiece"),Vi.forEach(a),Sl=t(He,", qui est l\u2019algorithme de tokenization utilis\xE9 par des mod\xE8les comme ALBERT, T5, mBART, Big Bird et XLNet."),He.forEach(a),Un=m(s),h(Hs.$$.fragment,s),On=m(s),h(ds.$$.fragment,s),Sn=m(s),ps=r(s,"H2",{class:!0});var jl=p(ps);hs=r(jl,"A",{id:!0,class:!0,href:!0});var Ri=p(hs);Ze=r(Ri,"SPAN",{});var Xi=p(Ze);h(Is.$$.fragment,Xi),Xi.forEach(a),Ri.forEach(a),Hl=m(jl),Je=r(jl,"SPAN",{});var Fi=p(Je);Il=t(Fi,"Algorithme d'entra\xEEnement"),Fi.forEach(a),jl.forEach(a),Hn=m(s),X=r(s,"P",{});var Ds=p(X);Ll=t(Ds,"Compar\xE9 au BPE et "),Ke=r(Ds,"EM",{});var Wi=p(Ke);Bl=t(Wi,"WordPiece"),Wi.forEach(a),Vl=t(Ds,", "),Qe=r(Ds,"EM",{});var Gi=p(Qe);Rl=t(Gi,"Unigram"),Gi.forEach(a),Xl=t(Ds," fonctionne dans l\u2019autre sens : il part d\u2019un grand vocabulaire et enl\xE8ve des "),sa=r(Ds,"EM",{});var Yi=p(sa);Fl=t(Yi,"tokens"),Yi.forEach(a),Wl=t(Ds," jusqu\u2019\xE0 atteindre la taille de vocabulaire d\xE9sir\xE9e. Il existe plusieurs options pour construire ce vocabulaire de base. Nous pouvons par exemple prendre les sous-cha\xEEnes les plus courantes dans les mots pr\xE9tok\xE9nis\xE9s ou appliquer le BPE sur le corpus initial avec une grande taille de vocabulaire."),Ds.forEach(a),In=m(s),fs=r(s,"P",{});var _l=p(fs);Gl=t(_l,"\xC0 chaque \xE9tape de l\u2019entra\xEEnement, l\u2019algorithme "),ea=r(_l,"EM",{});var Zi=p(ea);Yl=t(Zi,"Unigram"),Zi.forEach(a),Zl=t(_l," calcule une perte sur le corpus compte tenu du vocabulaire actuel. Ensuite, pour chaque symbole du vocabulaire, l\u2019algorithme calcule de combien la perte globale augmenterait si le symbole \xE9tait supprim\xE9 et recherche les symboles qui l\u2019augmenteraient le moins. Ces symboles ont un effet moindre sur la perte globale du corpus, ils sont donc en quelque sorte \xAB moins n\xE9cessaires \xBB et sont les meilleurs candidats \xE0 la suppression."),_l.forEach(a),Ln=m(s),gs=r(s,"P",{});var $l=p(gs);Jl=t($l,"Comme il s\u2019agit d\u2019une op\xE9ration tr\xE8s co\xFBteuse, nous ne nous contentons pas de supprimer le symbole unique associ\xE9 \xE0 la plus faible augmentation de la perte mais le "),Bn=Li($l),Vn=t($l," pourcent des symboles associ\xE9s \xE0 la plus faible augmentation de la perte. (p\\) est un hyperparam\xE8tre que vous pouvez contr\xF4ler, valant g\xE9n\xE9ralement 10 ou 20. Ce processus est ensuite r\xE9p\xE9t\xE9 jusqu\u2019\xE0 ce que le vocabulaire ait atteint la taille souhait\xE9e."),$l.forEach(a),Rn=m(s),_e=r(s,"P",{});var Ji=p(_e);Kl=t(Ji,"Notez que nous ne supprimons jamais les caract\xE8res de base, afin de nous assurer que tout mot peut \xEAtre tokenis\xE9."),Ji.forEach(a),Xn=m(s),K=r(s,"P",{});var Ie=p(K);Ql=t(Ie,"Tout ceci peut para\xEEtre encore un peu vague. En effet, la partie principale de l\u2019algorithme est de calculer une perte sur le corpus et de voir comment elle change lorsque nous supprimons certains "),aa=r(Ie,"EM",{});var Ki=p(aa);so=t(Ki,"tokens"),Ki.forEach(a),eo=t(Ie," du vocabulaire mais nous n\u2019avons pas encore expliqu\xE9 comment le faire. Cette \xE9tape repose sur l\u2019algorithme de tok\xE9nisation "),na=r(Ie,"EM",{});var Qi=p(na);ao=t(Qi,"Unigram"),Qi.forEach(a),no=t(Ie,", nous allons donc l\u2019aborder \xE0 pr\xE9sent."),Ie.forEach(a),Fn=m(s),$e=r(s,"P",{});var su=p($e);to=t(su,"Nous allons r\xE9utiliser le corpus des exemples pr\xE9c\xE9dents :"),su.forEach(a),Wn=m(s),h(Ls.$$.fragment,s),Gn=m(s),ke=r(s,"P",{});var eu=p(ke);lo=t(eu,"et pour cet exemple, nous prendrons toutes les sous-cha\xEEnes strictes pour le vocabulaire initial :"),eu.forEach(a),Yn=m(s),h(Bs.$$.fragment,s),Zn=m(s),is=r(s,"H2",{class:!0});var kl=p(is);vs=r(kl,"A",{id:!0,class:!0,href:!0});var au=p(vs);ta=r(au,"SPAN",{});var nu=p(ta);h(Vs.$$.fragment,nu),nu.forEach(a),au.forEach(a),oo=m(kl),la=r(kl,"SPAN",{});var tu=p(la);ro=t(tu,"Algorithme de tokenisation"),tu.forEach(a),kl.forEach(a),Jn=m(s),M=r(s,"P",{});var O=p(M);po=t(O,"Un mod\xE8le "),oa=r(O,"EM",{});var lu=p(oa);io=t(lu,"Unigram"),lu.forEach(a),uo=t(O," est un type de mod\xE8le de langage qui consid\xE8re que chaque "),ra=r(O,"EM",{});var ou=p(ra);mo=t(ou,"token"),ou.forEach(a),co=t(O," est ind\xE9pendant des "),pa=r(O,"EM",{});var ru=p(pa);ho=t(ru,"tokens"),ru.forEach(a),fo=t(O," qui le pr\xE9c\xE8dent. Il s\u2019agit du mod\xE8le de langage le plus simple, dans le sens o\xF9 la probabilit\xE9 du "),ia=r(O,"EM",{});var pu=p(ia);go=t(pu,"token"),pu.forEach(a),vo=t(O," X compte tenu du contexte pr\xE9c\xE9dent est simplement la probabilit\xE9 du "),ua=r(O,"EM",{});var iu=p(ua);bo=t(iu,"token"),iu.forEach(a),qo=t(O," X. Ainsi, si nous utilisions un mod\xE8le de langage "),ma=r(O,"EM",{});var uu=p(ma);jo=t(uu,"Unigram"),uu.forEach(a),_o=t(O," pour g\xE9n\xE9rer du texte, nous pr\xE9dirions toujours le "),ca=r(O,"EM",{});var mu=p(ca);$o=t(mu,"token"),mu.forEach(a),ko=t(O," le plus courant."),O.forEach(a),Kn=m(s),D=r(s,"P",{});var L=p(D);Eo=t(L,"La probabilit\xE9 d\u2019un "),da=r(L,"EM",{});var cu=p(da);wo=t(cu,"token"),cu.forEach(a),yo=t(L," donn\xE9 est sa fr\xE9quence (le nombre de fois que nous le trouvons) dans le corpus original, divis\xE9e par la somme de toutes les fr\xE9quences de tous les "),ha=r(L,"EM",{});var du=p(ha);xo=t(du,"tokens"),du.forEach(a),Po=t(L," dans le vocabulaire (pour s\u2019assurer que la somme des probabilit\xE9s est \xE9gale \xE0 1). Par exemple, "),fa=r(L,"CODE",{});var hu=p(fa);Co=t(hu,'"ug"'),hu.forEach(a),Mo=t(L," est pr\xE9sent dans "),ga=r(L,"CODE",{});var fu=p(ga);zo=t(fu,'"hug"'),fu.forEach(a),Ao=t(L,", "),va=r(L,"CODE",{});var gu=p(va);Do=t(gu,'"pug"'),gu.forEach(a),No=t(L,", et "),ba=r(L,"CODE",{});var vu=p(ba);To=t(vu,'"hugs"'),vu.forEach(a),Uo=t(L,". Il a donc une fr\xE9quence de 20 dans notre corpus."),L.forEach(a),Qn=m(s),Ee=r(s,"P",{});var bu=p(Ee);Oo=t(bu,"Voici les fr\xE9quences de tous les sous-mots possibles dans le vocabulaire :"),bu.forEach(a),st=m(s),h(Rs.$$.fragment,s),et=m(s),bs=r(s,"P",{});var El=p(bs);So=t(El,"Ainsi, la somme de toutes les fr\xE9quences est de 210 et la probabilit\xE9 du sous-mot "),qa=r(El,"CODE",{});var qu=p(qa);Ho=t(qu,'"ug"'),qu.forEach(a),Io=t(El," est donc de 20/210."),El.forEach(a),at=m(s),h(qs.$$.fragment,s),nt=m(s),z=r(s,"P",{});var S=p(z);Lo=t(S,"Maintenant, pour tokeniser un mot donn\xE9, nous examinons toutes les segmentations possibles en "),ja=r(S,"EM",{});var ju=p(ja);Bo=t(ju,"tokens"),ju.forEach(a),Vo=t(S," et calculons la probabilit\xE9 de chacune d\u2019entre elles selon le mod\xE8le "),_a=r(S,"EM",{});var _u=p(_a);Ro=t(_u,"Unigram"),_u.forEach(a),Xo=t(S,". Puisque tous les "),$a=r(S,"EM",{});var $u=p($a);Fo=t($u,"tokens"),$u.forEach(a),Wo=t(S," sont consid\xE9r\xE9s comme ind\xE9pendants, cette probabilit\xE9 est juste le produit de la probabilit\xE9 de chaque "),ka=r(S,"EM",{});var ku=p(ka);Go=t(ku,"token"),ku.forEach(a),Yo=t(S,". Par exemple, la tokenisation "),Ea=r(S,"CODE",{});var Eu=p(Ea);Zo=t(Eu,'["p", "u", "g"]'),Eu.forEach(a),Jo=t(S," de "),wa=r(S,"CODE",{});var wu=p(wa);Ko=t(wu,'"pug"'),wu.forEach(a),Qo=t(S,` a la probabilit\xE9 :
`),tt=Li(S),S.forEach(a),lt=m(s),us=r(s,"P",{});var Dn=p(us);sr=t(Dn,"Comparativement, la tokenization "),ya=r(Dn,"CODE",{});var yu=p(ya);er=t(yu,'["pu", "g"]'),yu.forEach(a),ar=t(Dn,` a la probabilit\xE9 :
`),ot=Li(Dn),Dn.forEach(a),rt=m(s),F=r(s,"P",{});var Ns=p(F);nr=t(Ns,"donc celle-l\xE0 est beaucoup plus probable. En g\xE9n\xE9ral, les tok\xE9nisations comportant le moins de "),xa=r(Ns,"EM",{});var xu=p(xa);tr=t(xu,"tokens"),xu.forEach(a),lr=t(Ns," possible auront la probabilit\xE9 la plus \xE9lev\xE9e (en raison de la division par 210 r\xE9p\xE9t\xE9e pour chaque "),Pa=r(Ns,"EM",{});var Pu=p(Pa);or=t(Pu,"token"),Pu.forEach(a),rr=t(Ns,"), ce qui correspond \xE0 ce que nous voulons intuitivement : diviser un mot en un nombre de "),Ca=r(Ns,"EM",{});var Cu=p(Ca);pr=t(Cu,"tokens"),Cu.forEach(a),ir=t(Ns," le plus faible possible."),Ns.forEach(a),pt=m(s),Q=r(s,"P",{});var Le=p(Q);ur=t(Le,"La tokenisation d\u2019un mot avec le mod\xE8le "),Ma=r(Le,"EM",{});var Mu=p(Ma);mr=t(Mu,"Unigram"),Mu.forEach(a),cr=t(Le," est donc la tokenisation avec la plus haute probabilit\xE9. Dans l\u2019exemple de "),za=r(Le,"CODE",{});var zu=p(za);dr=t(zu,'"pug"'),zu.forEach(a),hr=t(Le,", voici les probabilit\xE9s que nous obtiendrions pour chaque segmentation possible :"),Le.forEach(a),it=m(s),h(Xs.$$.fragment,s),ut=m(s),W=r(s,"P",{});var Ts=p(W);fr=t(Ts,"Ainsi, "),Aa=r(Ts,"CODE",{});var Au=p(Aa);gr=t(Au,'"pug"'),Au.forEach(a),vr=t(Ts," sera tokenis\xE9 comme "),Da=r(Ts,"CODE",{});var Du=p(Da);br=t(Du,'["p", "ug"]'),Du.forEach(a),qr=t(Ts," ou "),Na=r(Ts,"CODE",{});var Nu=p(Na);jr=t(Nu,'["pu", "g"]'),Nu.forEach(a),_r=t(Ts,", selon la segmentation rencontr\xE9e en premier (notez que dans un corpus plus large, les cas d\u2019\xE9galit\xE9 comme celui-ci seront rares)."),Ts.forEach(a),mt=m(s),T=r(s,"P",{});var Z=p(T);$r=t(Z,"Dans ce cas-ci, cela a \xE9t\xE9 facile de trouver toutes les segmentations possibles et de calculer leurs probabilit\xE9s, mais en g\xE9n\xE9ral ce sera un peu plus difficile. Il existe un algorithme classique utilis\xE9 pour cela, appel\xE9 "),Ta=r(Z,"EM",{});var Tu=p(Ta);kr=t(Tu,"algorithme de Viterbi"),Tu.forEach(a),Er=t(Z,". Essentiellement, on peut construire un graphe pour d\xE9tecter les segmentations possibles d\u2019un mot donn\xE9 en disant qu\u2019il existe une branche du caract\xE8re "),Ua=r(Z,"EM",{});var Uu=p(Ua);wr=t(Uu,"a"),Uu.forEach(a),yr=t(Z," au caract\xE8re "),Oa=r(Z,"EM",{});var Ou=p(Oa);xr=t(Ou,"b"),Ou.forEach(a),Pr=t(Z," si le sous-mot de "),Sa=r(Z,"EM",{});var Su=p(Sa);Cr=t(Su,"a"),Su.forEach(a),Mr=t(Z," \xE0 "),Ha=r(Z,"EM",{});var Hu=p(Ha);zr=t(Hu,"b"),Hu.forEach(a),Ar=t(Z," est dans le vocabulaire, et attribuer \xE0 cette branche la probabilit\xE9 du sous-mot."),Z.forEach(a),ct=m(s),we=r(s,"P",{});var Iu=p(we);Dr=t(Iu,"Pour trouver le chemin qui va avoir le meilleur score dans ce graphe, l\u2019algorithme de Viterbi d\xE9termine, pour chaque position dans le mot, la segmentation avec le meilleur score qui se termine \xE0 cette position. Puisque nous allons du d\xE9but \xE0 la fin, ce meilleur score peut \xEAtre trouv\xE9 en parcourant en boucle tous les sous-mots se terminant \xE0 la position actuelle, puis en utilisant le meilleur score de tokenization de la position \xE0 laquelle ce sous-mot commence. Ensuite, il suffit de d\xE9rouler le chemin emprunt\xE9 pour arriver \xE0 la fin."),Iu.forEach(a),dt=m(s),js=r(s,"P",{});var wl=p(js);Nr=t(wl,"Prenons un exemple en utilisant notre vocabulaire et le mot "),Ia=r(wl,"CODE",{});var Lu=p(Ia);Tr=t(Lu,'"unhug"'),Lu.forEach(a),Ur=t(wl,". Pour chaque position, les sous-mots avec les meilleurs scores se terminant l\xE0 sont les suivants :"),wl.forEach(a),ht=m(s),h(Fs.$$.fragment,s),ft=m(s),ss=r(s,"P",{});var Be=p(ss);Or=t(Be,"Ainsi, "),La=r(Be,"CODE",{});var Bu=p(La);Sr=t(Bu,'"unhug"'),Bu.forEach(a),Hr=t(Be," serait tokenis\xE9 comme "),Ba=r(Be,"CODE",{});var Vu=p(Ba);Ir=t(Vu,'["un", "hug"]'),Vu.forEach(a),Lr=t(Be,"."),Be.forEach(a),gt=m(s),h(_s.$$.fragment,s),vt=m(s),ms=r(s,"H2",{class:!0});var yl=p(ms);$s=r(yl,"A",{id:!0,class:!0,href:!0});var Ru=p($s);Va=r(Ru,"SPAN",{});var Xu=p(Va);h(Ws.$$.fragment,Xu),Xu.forEach(a),Ru.forEach(a),Br=m(yl),Ra=r(yl,"SPAN",{});var Fu=p(Ra);Vr=t(Fu,"Retour \xE0 l'entra\xEEnement"),Fu.forEach(a),yl.forEach(a),bt=m(s),es=r(s,"P",{});var Ve=p(es);Rr=t(Ve,"Maintenant que nous avons vu comment fonctionne la tokenisation, nous pouvons nous plonger un peu plus profond\xE9ment dans la perte utilis\xE9e pendant l\u2019entra\xEEnement. \xC0 n\u2019importe quelle \xE9tape, cette perte est calcul\xE9e en tokenisant chaque mot du corpus, en utilisant le vocabulaire courant et le mod\xE8le "),Xa=r(Ve,"EM",{});var Wu=p(Xa);Xr=t(Wu,"Unigram"),Wu.forEach(a),Fr=t(Ve," d\xE9termin\xE9 par les fr\xE9quences de chaque "),Fa=r(Ve,"EM",{});var Gu=p(Fa);Wr=t(Gu,"token"),Gu.forEach(a),Gr=t(Ve," dans le corpus (comme vu pr\xE9c\xE9demment)."),Ve.forEach(a),qt=m(s),ks=r(s,"P",{});var xl=p(ks);Yr=t(xl,"Chaque mot du corpus a un score, et la perte est le n\xE9gatif du logarithme de ces scores, c\u2019est-\xE0-dire la somme pour tous les mots du corpus de tous les "),Wa=r(xl,"CODE",{});var Yu=p(Wa);Zr=t(Yu,"-log(P(word))"),Yu.forEach(a),Jr=t(xl,"."),xl.forEach(a),jt=m(s),ye=r(s,"P",{});var Zu=p(ye);Kr=t(Zu,"Revenons \xE0 notre exemple avec le corpus suivant :"),Zu.forEach(a),_t=m(s),h(Gs.$$.fragment,s),$t=m(s),xe=r(s,"P",{});var Ju=p(xe);Qr=t(Ju,"La tokenisation de chaque mot avec leurs scores respectifs est :"),Ju.forEach(a),kt=m(s),h(Ys.$$.fragment,s),Et=m(s),Pe=r(s,"P",{});var Ku=p(Pe);sp=t(Ku,"Donc la perte est :"),Ku.forEach(a),wt=m(s),h(Zs.$$.fragment,s),yt=m(s),H=r(s,"P",{});var os=p(H);ep=t(os,"Maintenant, nous devons calculer comment la suppression de chaque token affecte la perte. C\u2019est plut\xF4t fastidieux, donc nous allons le faire pour deux "),Ga=r(os,"EM",{});var Qu=p(Ga);ap=t(Qu,"tokens"),Qu.forEach(a),np=t(os," ici et garder tout le processus pour quand nous aurons du code pour nous aider. Dans ce cas (tr\xE8s) particulier, nous avions deux tokenizations \xE9quivalentes de tous les mots. Par exmeple, comme nous l\u2019avons vu pr\xE9c\xE9demment, "),Ya=r(os,"CODE",{});var sm=p(Ya);tp=t(sm,'"pug"'),sm.forEach(a),lp=t(os," pourrait \xEAtre tokenis\xE9 en "),Za=r(os,"CODE",{});var em=p(Za);op=t(em,'["p", "ug"]'),em.forEach(a),rp=t(os," avec le m\xEAme score. Ainsi, enlever le token "),Ja=r(os,"CODE",{});var am=p(Ja);pp=t(am,'"pu"'),am.forEach(a),ip=t(os," du vocabulaire donnera exactement la m\xEAme perte."),os.forEach(a),xt=m(s),G=r(s,"P",{});var Us=p(G);up=t(Us,"D\u2019un autre c\xF4t\xE9, supprimer le mot "),Ka=r(Us,"CODE",{});var nm=p(Ka);mp=t(nm,'"hug"'),nm.forEach(a),cp=t(Us," aggravera la perte, car la tokenisation de "),Qa=r(Us,"CODE",{});var tm=p(Qa);dp=t(tm,'"hug"'),tm.forEach(a),hp=t(Us," et "),sn=r(Us,"CODE",{});var lm=p(sn);fp=t(lm,'"hugs"'),lm.forEach(a),gp=t(Us," deviendra :"),Us.forEach(a),Pt=m(s),h(Js.$$.fragment,s),Ct=m(s),Ce=r(s,"P",{});var om=p(Ce);vp=t(om,"Ces changements entra\xEEneront une augmentation de la perte de :"),om.forEach(a),Mt=m(s),h(Ks.$$.fragment,s),zt=m(s),as=r(s,"P",{});var Re=p(as);bp=t(Re,"Par cons\xE9quent, le token "),en=r(Re,"CODE",{});var rm=p(en);qp=t(rm,'"pu"'),rm.forEach(a),jp=t(Re," sera probablement retir\xE9 du vocabulaire, mais pas "),an=r(Re,"CODE",{});var pm=p(an);_p=t(pm,'"hug"'),pm.forEach(a),$p=t(Re,"."),Re.forEach(a),At=m(s),cs=r(s,"H2",{class:!0});var Pl=p(cs);Es=r(Pl,"A",{id:!0,class:!0,href:!0});var im=p(Es);nn=r(im,"SPAN",{});var um=p(nn);h(Qs.$$.fragment,um),um.forEach(a),im.forEach(a),kp=m(Pl),Me=r(Pl,"SPAN",{});var Hi=p(Me);Ep=t(Hi,"Impl\xE9mentation d'"),tn=r(Hi,"I",{});var mm=p(tn);wp=t(mm,"Unigram"),mm.forEach(a),Hi.forEach(a),Pl.forEach(a),Dt=m(s),ns=r(s,"P",{});var Xe=p(ns);yp=t(Xe,"Maintenant, impl\xE9mentons tout ce que nous avons vu jusqu\u2019\xE0 pr\xE9sent dans le code. Comme pour le BPE et "),ln=r(Xe,"EM",{});var cm=p(ln);xp=t(cm,"WordPiece"),cm.forEach(a),Pp=t(Xe,", ce n\u2019est pas une impl\xE9mentation efficace de l\u2019algorithme "),on=r(Xe,"EM",{});var dm=p(on);Cp=t(dm,"Unigram"),dm.forEach(a),Mp=t(Xe," (bien au contraire), mais elle devrait vous aider \xE0 le comprendre un peu mieux."),Xe.forEach(a),Nt=m(s),ze=r(s,"P",{});var hm=p(ze);zp=t(hm,"Nous allons utiliser le m\xEAme corpus que pr\xE9c\xE9demment comme exemple :"),hm.forEach(a),Tt=m(s),h(se.$$.fragment,s),Ut=m(s),ws=r(s,"P",{});var Cl=p(ws);Ap=t(Cl,"Cette fois, nous allons utiliser "),rn=r(Cl,"CODE",{});var fm=p(rn);Dp=t(fm,"xlnet-base-cased"),fm.forEach(a),Np=t(Cl," comme mod\xE8le :"),Cl.forEach(a),Ot=m(s),h(ee.$$.fragment,s),St=m(s),ys=r(s,"P",{});var Ml=p(ys);Tp=t(Ml,"Comme pour le BPE et "),pn=r(Ml,"EM",{});var gm=p(pn);Up=t(gm,"WordPiece"),gm.forEach(a),Op=t(Ml,", nous commen\xE7ons par compter le nombre d\u2019occurrences de chaque mot dans le corpus :"),Ml.forEach(a),Ht=m(s),h(ae.$$.fragment,s),It=m(s),Ae=r(s,"P",{});var vm=p(Ae);Sp=t(vm,"Ensuite, nous devons initialiser notre vocabulaire \xE0 une taille plus grande que celle du vocabulaire que nous voudrons \xE0 la fin. Nous devons inclure tous les caract\xE8res de base (sinon nous ne serons pas en mesure de tokeniser chaque mot), mais pour les sous-cha\xEEnes plus grandes, nous ne garderons que les plus communs. AInsi nous les trions par fr\xE9quence :"),vm.forEach(a),Lt=m(s),h(ne.$$.fragment,s),Bt=m(s),h(te.$$.fragment,s),Vt=m(s),De=r(s,"P",{});var bm=p(De);Hp=t(bm,"Nous regroupons les caract\xE8res avec les meilleurs sous-mots pour arriver \xE0 un vocabulaire initial de taille 300 :"),bm.forEach(a),Rt=m(s),h(le.$$.fragment,s),Xt=m(s),h(xs.$$.fragment,s),Ft=m(s),Ne=r(s,"P",{});var qm=p(Ne);Ip=t(qm,"Ensuite, nous calculons la somme de toutes les fr\xE9quences, pour convertir les fr\xE9quences en probabilit\xE9s. Pour notre mod\xE8le, nous allons stocker les logarithmes des probabilit\xE9s, car c\u2019est plus stable num\xE9riquement d\u2019additionner des logarithmes que de multiplier des petits nombres. Cela simplifiera aussi le calcul de la perte du mod\xE8le :"),qm.forEach(a),Wt=m(s),h(oe.$$.fragment,s),Gt=m(s),Y=r(s,"P",{});var Os=p(Y);Lp=t(Os,"Maintenant la fonction principale est celle qui tokenise les mots en utilisant l\u2019algorithme de Viterbi. Comme nous l\u2019avons vu pr\xE9c\xE9demment, cet algorithme calcule la meilleure segmentation de chaque sous-cha\xEEne du mot que nous allons stocker dans une variable nomm\xE9e "),un=r(Os,"CODE",{});var jm=p(un);Bp=t(jm,"best_segmentations"),jm.forEach(a),Vp=t(Os,". Nous allons stocker un dictionnaire par position dans le mot (de 0 \xE0 sa longueur totale), avec deux cl\xE9s : l\u2019index du d\xE9but du dernier "),mn=r(Os,"EM",{});var _m=p(mn);Rp=t(_m,"token"),_m.forEach(a),Xp=t(Os," dans la meilleure segmentation et le score de la meilleure segmentation. Avec l\u2019index du d\xE9but du dernier "),cn=r(Os,"EM",{});var $m=p(cn);Fp=t($m,"token"),$m.forEach(a),Wp=t(Os,", nous serons en mesure de r\xE9cup\xE9rer la segmentation compl\xE8te une fois que la liste est compl\xE8tement remplie."),Os.forEach(a),Yt=m(s),Ps=r(s,"P",{});var zl=p(Ps);Gp=t(zl,"Le remplissage de la liste se fait \xE0 l\u2019aide de deux boucles seulement : la boucle principale passe en revue chaque position de d\xE9part et la seconde boucle essaie toutes les sous-cha\xEEnes commen\xE7ant \xE0 cette position de d\xE9part. Si la sous-cha\xEEne est dans le vocabulaire, nous avons une nouvelle segmentation du mot jusqu\u2019\xE0 cette position finale que nous comparons \xE0 ce qui est dans "),dn=r(zl,"CODE",{});var km=p(dn);Yp=t(km,"best_segmentations"),km.forEach(a),Zp=t(zl,"."),zl.forEach(a),Zt=m(s),Cs=r(s,"P",{});var Al=p(Cs);Jp=t(Al,"Une fois que la boucle principale est termin\xE9e, nous commen\xE7ons juste \xE0 la fin et sautons d\u2019une position de d\xE9part \xE0 une autre, en enregistrant les "),hn=r(Al,"EM",{});var Em=p(hn);Kp=t(Em,"tokens"),Em.forEach(a),Qp=t(Al," au fur et \xE0 mesure, jusqu\u2019\xE0 ce que nous atteignions le d\xE9but du mot :"),Al.forEach(a),Jt=m(s),h(re.$$.fragment,s),Kt=m(s),Te=r(s,"P",{});var wm=p(Te);si=t(wm,"Nous pouvons d\xE9j\xE0 essayer notre mod\xE8le initial sur quelques mots :"),wm.forEach(a),Qt=m(s),h(pe.$$.fragment,s),sl=m(s),h(ie.$$.fragment,s),el=m(s),Ue=r(s,"P",{});var ym=p(Ue);ei=t(ym,"Il est maintenant facile de calculer la perte du mod\xE8le sur le corpus !"),ym.forEach(a),al=m(s),h(ue.$$.fragment,s),nl=m(s),Oe=r(s,"P",{});var xm=p(Oe);ai=t(xm,"Nous pouvons v\xE9rifier que cela fonctionne sur le mod\xE8le que nous avons :"),xm.forEach(a),tl=m(s),h(me.$$.fragment,s),ll=m(s),h(ce.$$.fragment,s),ol=m(s),ts=r(s,"P",{});var Fe=p(ts);ni=t(Fe,"Le calcul des scores pour chaque "),fn=r(Fe,"EM",{});var Pm=p(fn);ti=t(Pm,"token"),Pm.forEach(a),li=t(Fe," n\u2019est pas tr\xE8s difficile non plus. Il suffit de calculer la perte pour les mod\xE8les obtenus en supprimant chaque "),gn=r(Fe,"EM",{});var Cm=p(gn);oi=t(Cm,"token"),Cm.forEach(a),ri=t(Fe," :"),Fe.forEach(a),rl=m(s),h(de.$$.fragment,s),pl=m(s),Ms=r(s,"P",{});var Dl=p(Ms);pi=t(Dl,"Nous pouvons l\u2019essayer sur un "),vn=r(Dl,"EM",{});var Mm=p(vn);ii=t(Mm,"token"),Mm.forEach(a),ui=t(Dl," donn\xE9 :"),Dl.forEach(a),il=m(s),h(he.$$.fragment,s),ul=m(s),U=r(s,"P",{});var J=p(U);mi=t(J,"Puisque "),bn=r(J,"CODE",{});var zm=p(bn);ci=t(zm,'"ll"'),zm.forEach(a),di=t(J," est utilis\xE9 dans la tokenisation de "),qn=r(J,"CODE",{});var Am=p(qn);hi=t(Am,'"Hopefully"'),Am.forEach(a),fi=t(J,", et que le supprimer nous fera probablement utiliser le token "),jn=r(J,"CODE",{});var Dm=p(jn);gi=t(Dm,'"l"'),Dm.forEach(a),vi=t(J," deux fois \xE0 la place, nous nous attendons \xE0 ce qu\u2019il ait une perte positive. "),_n=r(J,"CODE",{});var Nm=p(_n);bi=t(Nm,'"his"'),Nm.forEach(a),qi=t(J," n\u2019est utilis\xE9 qu\u2019\xE0 l\u2019int\xE9rieur du mot "),$n=r(J,"CODE",{});var Tm=p($n);ji=t(Tm,'"This"'),Tm.forEach(a),_i=t(J,", qui est tokenis\xE9 comme lui-m\xEAme, donc nous nous attendons \xE0 ce qu\u2019il ait une perte nulle. Voici les r\xE9sultats :"),J.forEach(a),ml=m(s),h(fe.$$.fragment,s),cl=m(s),h(zs.$$.fragment,s),dl=m(s),ls=r(s,"P",{});var We=p(ls);$i=t(We,"Une fois tout cela en place, la derni\xE8re chose \xE0 faire est d\u2019ajouter les "),kn=r(We,"EM",{});var Um=p(kn);ki=t(Um,"tokens"),Um.forEach(a),Ei=t(We," sp\xE9ciaux utilis\xE9s par le mod\xE8le au vocabulaire, puis de boucler jusqu\u2019\xE0 ce que nous ayons \xE9lagu\xE9 suffisamment de "),En=r(We,"EM",{});var Om=p(En);wi=t(Om,"tokens"),Om.forEach(a),yi=t(We," du vocabulaire pour atteindre la taille souhait\xE9e :"),We.forEach(a),hl=m(s),h(ge.$$.fragment,s),fl=m(s),As=r(s,"P",{});var Nl=p(As);xi=t(Nl,"Ensuite, pour tokeniser un texte, il suffit d\u2019appliquer la pr\xE9tok\xE9nisation et d\u2019utiliser la fonction "),wn=r(Nl,"CODE",{});var Sm=p(wn);Pi=t(Sm,"encode_word()"),Sm.forEach(a),Ci=t(Nl," :"),Nl.forEach(a),gl=m(s),h(ve.$$.fragment,s),vl=m(s),h(be.$$.fragment,s),bl=m(s),I=r(s,"P",{});var rs=p(I);Mi=t(rs,"C\u2019est tout pour "),yn=r(rs,"EM",{});var Hm=p(yn);zi=t(Hm,"Unigram"),Hm.forEach(a),Ai=t(rs," ! Avec un peu de chance, vous vous sentez \xE0 pr\xE9sent \xEAtre un expert des "),xn=r(rs,"EM",{});var Im=p(xn);Di=t(Im,"tokenizers"),Im.forEach(a),Ni=t(rs,". Dans la prochaine section, nous allons nous plonger dans les blocs de construction de la biblioth\xE8que \u{1F917} "),Pn=r(rs,"EM",{});var Lm=p(Pn);Ti=t(Lm,"Tokenizers"),Lm.forEach(a),Ui=t(rs," et allons vous montrer comment vous pouvez les utiliser pour construire votre propre "),Cn=r(rs,"EM",{});var Bm=p(Cn);Oi=t(Bm,"tokenizer"),Bm.forEach(a),Si=t(rs,"."),rs.forEach(a),this.h()},h(){P(c,"name","hf:doc:metadata"),P(c,"content",JSON.stringify(lc)),P(k,"id","tokenisation-iunigrami"),P(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),P(k,"href","#tokenisation-iunigrami"),P(q,"class","relative group"),P(hs,"id","algorithme-dentranement"),P(hs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),P(hs,"href","#algorithme-dentranement"),P(ps,"class","relative group"),Bn.a=Vn,P(vs,"id","algorithme-de-tokenisation"),P(vs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),P(vs,"href","#algorithme-de-tokenisation"),P(is,"class","relative group"),tt.a=null,ot.a=null,P($s,"id","retour-lentranement"),P($s,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),P($s,"href","#retour-lentranement"),P(ms,"class","relative group"),P(Es,"id","implmentation-diunigrami"),P(Es,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),P(Es,"href","#implmentation-diunigrami"),P(cs,"class","relative group")},m(s,l){e(document.head,c),i(s,y,l),i(s,q,l),e(q,k),e(k,w),f(j,w,null),e(q,_),e(q,x),e(x,C),e(x,E),e(E,B),i(s,N,l),f(A,s,l),i(s,Ss,l),i(s,V,l),e(V,je),e(V,Ge),e(Ge,Tl),e(V,Ul),e(V,Ye),e(Ye,Ol),e(V,Sl),i(s,Un,l),f(Hs,s,l),i(s,On,l),f(ds,s,l),i(s,Sn,l),i(s,ps,l),e(ps,hs),e(hs,Ze),f(Is,Ze,null),e(ps,Hl),e(ps,Je),e(Je,Il),i(s,Hn,l),i(s,X,l),e(X,Ll),e(X,Ke),e(Ke,Bl),e(X,Vl),e(X,Qe),e(Qe,Rl),e(X,Xl),e(X,sa),e(sa,Fl),e(X,Wl),i(s,In,l),i(s,fs,l),e(fs,Gl),e(fs,ea),e(ea,Yl),e(fs,Zl),i(s,Ln,l),i(s,gs,l),e(gs,Jl),Bn.m(Vm,gs),e(gs,Vn),i(s,Rn,l),i(s,_e,l),e(_e,Kl),i(s,Xn,l),i(s,K,l),e(K,Ql),e(K,aa),e(aa,so),e(K,eo),e(K,na),e(na,ao),e(K,no),i(s,Fn,l),i(s,$e,l),e($e,to),i(s,Wn,l),f(Ls,s,l),i(s,Gn,l),i(s,ke,l),e(ke,lo),i(s,Yn,l),f(Bs,s,l),i(s,Zn,l),i(s,is,l),e(is,vs),e(vs,ta),f(Vs,ta,null),e(is,oo),e(is,la),e(la,ro),i(s,Jn,l),i(s,M,l),e(M,po),e(M,oa),e(oa,io),e(M,uo),e(M,ra),e(ra,mo),e(M,co),e(M,pa),e(pa,ho),e(M,fo),e(M,ia),e(ia,go),e(M,vo),e(M,ua),e(ua,bo),e(M,qo),e(M,ma),e(ma,jo),e(M,_o),e(M,ca),e(ca,$o),e(M,ko),i(s,Kn,l),i(s,D,l),e(D,Eo),e(D,da),e(da,wo),e(D,yo),e(D,ha),e(ha,xo),e(D,Po),e(D,fa),e(fa,Co),e(D,Mo),e(D,ga),e(ga,zo),e(D,Ao),e(D,va),e(va,Do),e(D,No),e(D,ba),e(ba,To),e(D,Uo),i(s,Qn,l),i(s,Ee,l),e(Ee,Oo),i(s,st,l),f(Rs,s,l),i(s,et,l),i(s,bs,l),e(bs,So),e(bs,qa),e(qa,Ho),e(bs,Io),i(s,at,l),f(qs,s,l),i(s,nt,l),i(s,z,l),e(z,Lo),e(z,ja),e(ja,Bo),e(z,Vo),e(z,_a),e(_a,Ro),e(z,Xo),e(z,$a),e($a,Fo),e(z,Wo),e(z,ka),e(ka,Go),e(z,Yo),e(z,Ea),e(Ea,Zo),e(z,Jo),e(z,wa),e(wa,Ko),e(z,Qo),tt.m(Rm,z),i(s,lt,l),i(s,us,l),e(us,sr),e(us,ya),e(ya,er),e(us,ar),ot.m(Xm,us),i(s,rt,l),i(s,F,l),e(F,nr),e(F,xa),e(xa,tr),e(F,lr),e(F,Pa),e(Pa,or),e(F,rr),e(F,Ca),e(Ca,pr),e(F,ir),i(s,pt,l),i(s,Q,l),e(Q,ur),e(Q,Ma),e(Ma,mr),e(Q,cr),e(Q,za),e(za,dr),e(Q,hr),i(s,it,l),f(Xs,s,l),i(s,ut,l),i(s,W,l),e(W,fr),e(W,Aa),e(Aa,gr),e(W,vr),e(W,Da),e(Da,br),e(W,qr),e(W,Na),e(Na,jr),e(W,_r),i(s,mt,l),i(s,T,l),e(T,$r),e(T,Ta),e(Ta,kr),e(T,Er),e(T,Ua),e(Ua,wr),e(T,yr),e(T,Oa),e(Oa,xr),e(T,Pr),e(T,Sa),e(Sa,Cr),e(T,Mr),e(T,Ha),e(Ha,zr),e(T,Ar),i(s,ct,l),i(s,we,l),e(we,Dr),i(s,dt,l),i(s,js,l),e(js,Nr),e(js,Ia),e(Ia,Tr),e(js,Ur),i(s,ht,l),f(Fs,s,l),i(s,ft,l),i(s,ss,l),e(ss,Or),e(ss,La),e(La,Sr),e(ss,Hr),e(ss,Ba),e(Ba,Ir),e(ss,Lr),i(s,gt,l),f(_s,s,l),i(s,vt,l),i(s,ms,l),e(ms,$s),e($s,Va),f(Ws,Va,null),e(ms,Br),e(ms,Ra),e(Ra,Vr),i(s,bt,l),i(s,es,l),e(es,Rr),e(es,Xa),e(Xa,Xr),e(es,Fr),e(es,Fa),e(Fa,Wr),e(es,Gr),i(s,qt,l),i(s,ks,l),e(ks,Yr),e(ks,Wa),e(Wa,Zr),e(ks,Jr),i(s,jt,l),i(s,ye,l),e(ye,Kr),i(s,_t,l),f(Gs,s,l),i(s,$t,l),i(s,xe,l),e(xe,Qr),i(s,kt,l),f(Ys,s,l),i(s,Et,l),i(s,Pe,l),e(Pe,sp),i(s,wt,l),f(Zs,s,l),i(s,yt,l),i(s,H,l),e(H,ep),e(H,Ga),e(Ga,ap),e(H,np),e(H,Ya),e(Ya,tp),e(H,lp),e(H,Za),e(Za,op),e(H,rp),e(H,Ja),e(Ja,pp),e(H,ip),i(s,xt,l),i(s,G,l),e(G,up),e(G,Ka),e(Ka,mp),e(G,cp),e(G,Qa),e(Qa,dp),e(G,hp),e(G,sn),e(sn,fp),e(G,gp),i(s,Pt,l),f(Js,s,l),i(s,Ct,l),i(s,Ce,l),e(Ce,vp),i(s,Mt,l),f(Ks,s,l),i(s,zt,l),i(s,as,l),e(as,bp),e(as,en),e(en,qp),e(as,jp),e(as,an),e(an,_p),e(as,$p),i(s,At,l),i(s,cs,l),e(cs,Es),e(Es,nn),f(Qs,nn,null),e(cs,kp),e(cs,Me),e(Me,Ep),e(Me,tn),e(tn,wp),i(s,Dt,l),i(s,ns,l),e(ns,yp),e(ns,ln),e(ln,xp),e(ns,Pp),e(ns,on),e(on,Cp),e(ns,Mp),i(s,Nt,l),i(s,ze,l),e(ze,zp),i(s,Tt,l),f(se,s,l),i(s,Ut,l),i(s,ws,l),e(ws,Ap),e(ws,rn),e(rn,Dp),e(ws,Np),i(s,Ot,l),f(ee,s,l),i(s,St,l),i(s,ys,l),e(ys,Tp),e(ys,pn),e(pn,Up),e(ys,Op),i(s,Ht,l),f(ae,s,l),i(s,It,l),i(s,Ae,l),e(Ae,Sp),i(s,Lt,l),f(ne,s,l),i(s,Bt,l),f(te,s,l),i(s,Vt,l),i(s,De,l),e(De,Hp),i(s,Rt,l),f(le,s,l),i(s,Xt,l),f(xs,s,l),i(s,Ft,l),i(s,Ne,l),e(Ne,Ip),i(s,Wt,l),f(oe,s,l),i(s,Gt,l),i(s,Y,l),e(Y,Lp),e(Y,un),e(un,Bp),e(Y,Vp),e(Y,mn),e(mn,Rp),e(Y,Xp),e(Y,cn),e(cn,Fp),e(Y,Wp),i(s,Yt,l),i(s,Ps,l),e(Ps,Gp),e(Ps,dn),e(dn,Yp),e(Ps,Zp),i(s,Zt,l),i(s,Cs,l),e(Cs,Jp),e(Cs,hn),e(hn,Kp),e(Cs,Qp),i(s,Jt,l),f(re,s,l),i(s,Kt,l),i(s,Te,l),e(Te,si),i(s,Qt,l),f(pe,s,l),i(s,sl,l),f(ie,s,l),i(s,el,l),i(s,Ue,l),e(Ue,ei),i(s,al,l),f(ue,s,l),i(s,nl,l),i(s,Oe,l),e(Oe,ai),i(s,tl,l),f(me,s,l),i(s,ll,l),f(ce,s,l),i(s,ol,l),i(s,ts,l),e(ts,ni),e(ts,fn),e(fn,ti),e(ts,li),e(ts,gn),e(gn,oi),e(ts,ri),i(s,rl,l),f(de,s,l),i(s,pl,l),i(s,Ms,l),e(Ms,pi),e(Ms,vn),e(vn,ii),e(Ms,ui),i(s,il,l),f(he,s,l),i(s,ul,l),i(s,U,l),e(U,mi),e(U,bn),e(bn,ci),e(U,di),e(U,qn),e(qn,hi),e(U,fi),e(U,jn),e(jn,gi),e(U,vi),e(U,_n),e(_n,bi),e(U,qi),e(U,$n),e($n,ji),e(U,_i),i(s,ml,l),f(fe,s,l),i(s,cl,l),f(zs,s,l),i(s,dl,l),i(s,ls,l),e(ls,$i),e(ls,kn),e(kn,ki),e(ls,Ei),e(ls,En),e(En,wi),e(ls,yi),i(s,hl,l),f(ge,s,l),i(s,fl,l),i(s,As,l),e(As,xi),e(As,wn),e(wn,Pi),e(As,Ci),i(s,gl,l),f(ve,s,l),i(s,vl,l),f(be,s,l),i(s,bl,l),i(s,I,l),e(I,Mi),e(I,yn),e(yn,zi),e(I,Ai),e(I,xn),e(xn,Di),e(I,Ni),e(I,Pn),e(Pn,Ti),e(I,Ui),e(I,Cn),e(Cn,Oi),e(I,Si),ql=!0},p(s,[l]){const qe={};l&2&&(qe.$$scope={dirty:l,ctx:s}),ds.$set(qe);const Mn={};l&2&&(Mn.$$scope={dirty:l,ctx:s}),qs.$set(Mn);const zn={};l&2&&(zn.$$scope={dirty:l,ctx:s}),_s.$set(zn);const Se={};l&2&&(Se.$$scope={dirty:l,ctx:s}),xs.$set(Se);const An={};l&2&&(An.$$scope={dirty:l,ctx:s}),zs.$set(An)},i(s){ql||(g(j.$$.fragment,s),g(A.$$.fragment,s),g(Hs.$$.fragment,s),g(ds.$$.fragment,s),g(Is.$$.fragment,s),g(Ls.$$.fragment,s),g(Bs.$$.fragment,s),g(Vs.$$.fragment,s),g(Rs.$$.fragment,s),g(qs.$$.fragment,s),g(Xs.$$.fragment,s),g(Fs.$$.fragment,s),g(_s.$$.fragment,s),g(Ws.$$.fragment,s),g(Gs.$$.fragment,s),g(Ys.$$.fragment,s),g(Zs.$$.fragment,s),g(Js.$$.fragment,s),g(Ks.$$.fragment,s),g(Qs.$$.fragment,s),g(se.$$.fragment,s),g(ee.$$.fragment,s),g(ae.$$.fragment,s),g(ne.$$.fragment,s),g(te.$$.fragment,s),g(le.$$.fragment,s),g(xs.$$.fragment,s),g(oe.$$.fragment,s),g(re.$$.fragment,s),g(pe.$$.fragment,s),g(ie.$$.fragment,s),g(ue.$$.fragment,s),g(me.$$.fragment,s),g(ce.$$.fragment,s),g(de.$$.fragment,s),g(he.$$.fragment,s),g(fe.$$.fragment,s),g(zs.$$.fragment,s),g(ge.$$.fragment,s),g(ve.$$.fragment,s),g(be.$$.fragment,s),ql=!0)},o(s){v(j.$$.fragment,s),v(A.$$.fragment,s),v(Hs.$$.fragment,s),v(ds.$$.fragment,s),v(Is.$$.fragment,s),v(Ls.$$.fragment,s),v(Bs.$$.fragment,s),v(Vs.$$.fragment,s),v(Rs.$$.fragment,s),v(qs.$$.fragment,s),v(Xs.$$.fragment,s),v(Fs.$$.fragment,s),v(_s.$$.fragment,s),v(Ws.$$.fragment,s),v(Gs.$$.fragment,s),v(Ys.$$.fragment,s),v(Zs.$$.fragment,s),v(Js.$$.fragment,s),v(Ks.$$.fragment,s),v(Qs.$$.fragment,s),v(se.$$.fragment,s),v(ee.$$.fragment,s),v(ae.$$.fragment,s),v(ne.$$.fragment,s),v(te.$$.fragment,s),v(le.$$.fragment,s),v(xs.$$.fragment,s),v(oe.$$.fragment,s),v(re.$$.fragment,s),v(pe.$$.fragment,s),v(ie.$$.fragment,s),v(ue.$$.fragment,s),v(me.$$.fragment,s),v(ce.$$.fragment,s),v(de.$$.fragment,s),v(he.$$.fragment,s),v(fe.$$.fragment,s),v(zs.$$.fragment,s),v(ge.$$.fragment,s),v(ve.$$.fragment,s),v(be.$$.fragment,s),ql=!1},d(s){a(c),s&&a(y),s&&a(q),b(j),s&&a(N),b(A,s),s&&a(Ss),s&&a(V),s&&a(Un),b(Hs,s),s&&a(On),b(ds,s),s&&a(Sn),s&&a(ps),b(Is),s&&a(Hn),s&&a(X),s&&a(In),s&&a(fs),s&&a(Ln),s&&a(gs),s&&a(Rn),s&&a(_e),s&&a(Xn),s&&a(K),s&&a(Fn),s&&a($e),s&&a(Wn),b(Ls,s),s&&a(Gn),s&&a(ke),s&&a(Yn),b(Bs,s),s&&a(Zn),s&&a(is),b(Vs),s&&a(Jn),s&&a(M),s&&a(Kn),s&&a(D),s&&a(Qn),s&&a(Ee),s&&a(st),b(Rs,s),s&&a(et),s&&a(bs),s&&a(at),b(qs,s),s&&a(nt),s&&a(z),s&&a(lt),s&&a(us),s&&a(rt),s&&a(F),s&&a(pt),s&&a(Q),s&&a(it),b(Xs,s),s&&a(ut),s&&a(W),s&&a(mt),s&&a(T),s&&a(ct),s&&a(we),s&&a(dt),s&&a(js),s&&a(ht),b(Fs,s),s&&a(ft),s&&a(ss),s&&a(gt),b(_s,s),s&&a(vt),s&&a(ms),b(Ws),s&&a(bt),s&&a(es),s&&a(qt),s&&a(ks),s&&a(jt),s&&a(ye),s&&a(_t),b(Gs,s),s&&a($t),s&&a(xe),s&&a(kt),b(Ys,s),s&&a(Et),s&&a(Pe),s&&a(wt),b(Zs,s),s&&a(yt),s&&a(H),s&&a(xt),s&&a(G),s&&a(Pt),b(Js,s),s&&a(Ct),s&&a(Ce),s&&a(Mt),b(Ks,s),s&&a(zt),s&&a(as),s&&a(At),s&&a(cs),b(Qs),s&&a(Dt),s&&a(ns),s&&a(Nt),s&&a(ze),s&&a(Tt),b(se,s),s&&a(Ut),s&&a(ws),s&&a(Ot),b(ee,s),s&&a(St),s&&a(ys),s&&a(Ht),b(ae,s),s&&a(It),s&&a(Ae),s&&a(Lt),b(ne,s),s&&a(Bt),b(te,s),s&&a(Vt),s&&a(De),s&&a(Rt),b(le,s),s&&a(Xt),b(xs,s),s&&a(Ft),s&&a(Ne),s&&a(Wt),b(oe,s),s&&a(Gt),s&&a(Y),s&&a(Yt),s&&a(Ps),s&&a(Zt),s&&a(Cs),s&&a(Jt),b(re,s),s&&a(Kt),s&&a(Te),s&&a(Qt),b(pe,s),s&&a(sl),b(ie,s),s&&a(el),s&&a(Ue),s&&a(al),b(ue,s),s&&a(nl),s&&a(Oe),s&&a(tl),b(me,s),s&&a(ll),b(ce,s),s&&a(ol),s&&a(ts),s&&a(rl),b(de,s),s&&a(pl),s&&a(Ms),s&&a(il),b(he,s),s&&a(ul),s&&a(U),s&&a(ml),b(fe,s),s&&a(cl),b(zs,s),s&&a(dl),s&&a(ls),s&&a(hl),b(ge,s),s&&a(fl),s&&a(As),s&&a(gl),b(ve,s),s&&a(vl),b(be,s),s&&a(bl),s&&a(I)}}}const lc={local:"tokenisation-iunigrami",sections:[{local:"algorithme-dentranement",title:"Algorithme d'entra\xEEnement"},{local:"algorithme-de-tokenisation",title:"Algorithme de tokenisation"},{local:"retour-lentranement",title:"Retour \xE0 l'entra\xEEnement"},{local:"implmentation-diunigrami",title:"Impl\xE9mentation d'<i>Unigram</i>"}],title:"Tokenisation <i>Unigram</i>"};function oc(R){return Zm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dc extends Fm{constructor(c){super();Wm(this,c,oc,tc,Gm,{})}}export{dc as default,lc as metadata};
