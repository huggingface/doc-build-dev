import{S as hg,i as vg,s as bg,e as o,t as n,k as d,w,c as r,a as l,h as a,d as t,m as c,x as j,g as i,G as s,y as E,q as h,o as v,B as k,b as C,M as qg,N as jc,p as $n,v as gg,n as wn}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ec}from"../../chunks/Tip-hf-doc-builder.js";import{Y as kc}from"../../chunks/Youtube-hf-doc-builder.js";import{I as qs}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as z}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as _g}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";import{F as xg}from"../../chunks/FrameworkSwitchCourse-hf-doc-builder.js";function $g(U){let p,b;return p=new _g({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section7_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section7_tf.ipynb"}]}}),{c(){w(p.$$.fragment)},l(f){j(p.$$.fragment,f)},m(f,y){E(p,f,y),b=!0},i(f){b||(h(p.$$.fragment,f),b=!0)},o(f){v(p.$$.fragment,f),b=!1},d(f){k(p,f)}}}function wg(U){let p,b;return p=new _g({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section7_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section7_pt.ipynb"}]}}),{c(){w(p.$$.fragment)},l(f){j(p.$$.fragment,f)},m(f,y){E(p,f,y),b=!0},i(f){b||(h(p.$$.fragment,f),b=!0)},o(f){v(p.$$.fragment,f),b=!1},d(f){k(p,f)}}}function jg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I;return{c(){p=o("p"),b=n("\u{1F4A1} Les mod\xE8les bas\xE9 que sur l\u2019encodeur comme BERT ont tendance \xE0 \xEAtre excellents pour extraire les r\xE9ponses \xE0 des questions factuelles comme \xAB Qui a invent\xE9 l\u2019architecture Transformer ? \xBB mais ne sont pas tr\xE8s performants lorsqu\u2019on leur pose des questions ouvertes comme \xAB Pourquoi le ciel est-il bleu ? \xBB. Dans ces cas plus difficiles, les mod\xE8les encodeurs-d\xE9codeurs comme le T5 et BART sont g\xE9n\xE9ralement utilis\xE9s pour synth\xE9tiser les informations d\u2019une mani\xE8re assez similaire au "),f=o("a"),y=n("r\xE9sum\xE9 de texte"),S=n(". Si vous \xEAtes int\xE9ress\xE9 par ce type de r\xE9ponse aux questions "),q=o("em"),g=n("g\xE9n\xE9ratives"),x=n(", nous vous recommandons de consulter notre "),_=o("a"),M=n("d\xE9mo"),$=n(" bas\xE9e sur le "),A=o("a"),T=n("jeu de donn\xE9es ELI5"),I=n("."),this.h()},l(D){p=r(D,"P",{});var P=l(p);b=a(P,"\u{1F4A1} Les mod\xE8les bas\xE9 que sur l\u2019encodeur comme BERT ont tendance \xE0 \xEAtre excellents pour extraire les r\xE9ponses \xE0 des questions factuelles comme \xAB Qui a invent\xE9 l\u2019architecture Transformer ? \xBB mais ne sont pas tr\xE8s performants lorsqu\u2019on leur pose des questions ouvertes comme \xAB Pourquoi le ciel est-il bleu ? \xBB. Dans ces cas plus difficiles, les mod\xE8les encodeurs-d\xE9codeurs comme le T5 et BART sont g\xE9n\xE9ralement utilis\xE9s pour synth\xE9tiser les informations d\u2019une mani\xE8re assez similaire au "),f=r(P,"A",{href:!0});var V=l(f);y=a(V,"r\xE9sum\xE9 de texte"),V.forEach(t),S=a(P,". Si vous \xEAtes int\xE9ress\xE9 par ce type de r\xE9ponse aux questions "),q=r(P,"EM",{});var L=l(q);g=a(L,"g\xE9n\xE9ratives"),L.forEach(t),x=a(P,", nous vous recommandons de consulter notre "),_=r(P,"A",{href:!0,rel:!0});var O=l(_);M=a(O,"d\xE9mo"),O.forEach(t),$=a(P," bas\xE9e sur le "),A=r(P,"A",{href:!0,rel:!0});var N=l(A);T=a(N,"jeu de donn\xE9es ELI5"),N.forEach(t),I=a(P,"."),P.forEach(t),this.h()},h(){C(f,"href","/course/fr/chapter7/5"),C(_,"href","https://yjernite.github.io/lfqa.html"),C(_,"rel","nofollow"),C(A,"href","https://huggingface.co/datasets/eli5"),C(A,"rel","nofollow")},m(D,P){i(D,p,P),s(p,b),s(p,f),s(f,y),s(p,S),s(p,q),s(q,g),s(p,x),s(p,_),s(_,M),s(p,$),s(p,A),s(A,T),s(p,I)},d(D){D&&t(p)}}}function Eg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V;return{c(){p=o("p"),b=n("\u270F\uFE0F "),f=o("strong"),y=n("A votre tour !"),S=n(" En utilisant l\u2019architecture XLNet, le "),q=o("em"),g=n("padding"),x=n(" est appliqu\xE9 \xE0 gauche et la question et le contexte sont intervertis. Adaptez tout le code que nous venons de voir \xE0 l\u2019architecture XLNet (et ajoutez "),_=o("code"),M=n("padding=True"),$=n("). Soyez conscient que le token "),A=o("code"),T=n("[CLS]"),I=n(" peut ne pas \xEAtre \xE0 la position 0 avec le "),D=o("em"),P=n("padding"),V=n(" appliqu\xE9.")},l(L){p=r(L,"P",{});var O=l(p);b=a(O,"\u270F\uFE0F "),f=r(O,"STRONG",{});var N=l(f);y=a(N,"A votre tour !"),N.forEach(t),S=a(O," En utilisant l\u2019architecture XLNet, le "),q=r(O,"EM",{});var R=l(q);g=a(R,"padding"),R.forEach(t),x=a(O," est appliqu\xE9 \xE0 gauche et la question et le contexte sont intervertis. Adaptez tout le code que nous venons de voir \xE0 l\u2019architecture XLNet (et ajoutez "),_=r(O,"CODE",{});var Q=l(_);M=a(Q,"padding=True"),Q.forEach(t),$=a(O,"). Soyez conscient que le token "),A=r(O,"CODE",{});var J=l(A);T=a(J,"[CLS]"),J.forEach(t),I=a(O," peut ne pas \xEAtre \xE0 la position 0 avec le "),D=r(O,"EM",{});var H=l(D);P=a(H,"padding"),H.forEach(t),V=a(O," appliqu\xE9."),O.forEach(t)},m(L,O){i(L,p,O),s(p,b),s(p,f),s(f,y),s(p,S),s(p,q),s(q,g),s(p,x),s(p,_),s(_,M),s(p,$),s(p,A),s(A,T),s(p,I),s(p,D),s(D,P),s(p,V)},d(L){L&&t(p)}}}function kg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P;return y=new qs({}),{c(){p=o("h2"),b=o("a"),f=o("span"),w(y.$$.fragment),S=d(),q=o("span"),g=o("i"),x=n("Finetuner"),_=n(" fin du mod\xE8le avec Keras"),M=d(),$=o("p"),A=n("Le code d\u2019entra\xEEnement de cet exemple ressemblera beaucoup au code des sections pr\xE9c\xE9dentes, mais le calcul de la m\xE9trique sera un d\xE9fi unique. Puisque nous avons rembourr\xE9 tous les \xE9chantillons \xE0 la longueur maximale que nous avons d\xE9finie, il n\u2019y a pas de collateur de donn\xE9es \xE0 d\xE9finir. Ainsi le calcul de la m\xE9trique est vraiment la seule chose dont nous devons nous soucier. La partie la plus difficile sera de post-traiter les pr\xE9dictions du mod\xE8le en \xE9tendues de texte dans les exemples originaux. Une fois que nous aurons fait cela, la m\xE9trique de la biblioth\xE8que \u{1F917} "),T=o("em"),I=n("Datasets"),D=n(" fera le gros du travail pour nous."),this.h()},l(V){p=r(V,"H2",{class:!0});var L=l(p);b=r(L,"A",{id:!0,class:!0,href:!0});var O=l(b);f=r(O,"SPAN",{});var N=l(f);j(y.$$.fragment,N),N.forEach(t),O.forEach(t),S=c(L),q=r(L,"SPAN",{});var R=l(q);g=r(R,"I",{});var Q=l(g);x=a(Q,"Finetuner"),Q.forEach(t),_=a(R," fin du mod\xE8le avec Keras"),R.forEach(t),L.forEach(t),M=c(V),$=r(V,"P",{});var J=l($);A=a(J,"Le code d\u2019entra\xEEnement de cet exemple ressemblera beaucoup au code des sections pr\xE9c\xE9dentes, mais le calcul de la m\xE9trique sera un d\xE9fi unique. Puisque nous avons rembourr\xE9 tous les \xE9chantillons \xE0 la longueur maximale que nous avons d\xE9finie, il n\u2019y a pas de collateur de donn\xE9es \xE0 d\xE9finir. Ainsi le calcul de la m\xE9trique est vraiment la seule chose dont nous devons nous soucier. La partie la plus difficile sera de post-traiter les pr\xE9dictions du mod\xE8le en \xE9tendues de texte dans les exemples originaux. Une fois que nous aurons fait cela, la m\xE9trique de la biblioth\xE8que \u{1F917} "),T=r(J,"EM",{});var H=l(T);I=a(H,"Datasets"),H.forEach(t),D=a(J," fera le gros du travail pour nous."),J.forEach(t),this.h()},h(){C(b,"id","ifinetuneri-fin-du-modle-avec-keras"),C(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(b,"href","#ifinetuneri-fin-du-modle-avec-keras"),C(p,"class","relative group")},m(V,L){i(V,p,L),s(p,b),s(b,f),E(y,f,null),s(p,S),s(p,q),s(q,g),s(g,x),s(q,_),i(V,M,L),i(V,$,L),s($,A),s($,T),s(T,I),s($,D),P=!0},i(V){P||(h(y.$$.fragment,V),P=!0)},o(V){v(y.$$.fragment,V),P=!1},d(V){V&&t(p),k(y),V&&t(M),V&&t($)}}}function yg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V,L,O,N,R;return y=new qs({}),{c(){p=o("h2"),b=o("a"),f=o("span"),w(y.$$.fragment),S=d(),q=o("span"),g=o("i"),x=n("Finetuner"),_=n(" le mod\xE8le avec l'API "),M=o("code"),$=n("Trainer"),A=d(),T=o("p"),I=n("Le code d\u2019entra\xEEnement pour cet exemple ressemblera beaucoup au code des sections pr\xE9c\xE9dentes mais le calcul de la m\xE9trique avec la fonction "),D=o("code"),P=n("compute_metrics()"),V=n(" sera un d\xE9fi unique. Puisque nous avons rembourr\xE9 tous les \xE9chantillons \xE0 la longueur maximale que nous avons d\xE9finie, il n\u2019y a pas de collateur de donn\xE9es \xE0 d\xE9finir. Ainsi le calcul de la m\xE9trique est vraiment la seule chose dont nous devons nous soucier. La partie la plus difficile sera de post-traiter les pr\xE9dictions du mod\xE8le en \xE9tendues de texte dans les exemples originaux. Une fois que nous aurons fait cela, la m\xE9trique de la biblioth\xE8que \u{1F917} "),L=o("em"),O=n("Datasets"),N=n(" fera le gros du travail pour nous."),this.h()},l(Q){p=r(Q,"H2",{class:!0});var J=l(p);b=r(J,"A",{id:!0,class:!0,href:!0});var H=l(b);f=r(H,"SPAN",{});var G=l(f);j(y.$$.fragment,G),G.forEach(t),H.forEach(t),S=c(J),q=r(J,"SPAN",{});var ee=l(q);g=r(ee,"I",{});var Z=l(g);x=a(Z,"Finetuner"),Z.forEach(t),_=a(ee," le mod\xE8le avec l'API "),M=r(ee,"CODE",{});var F=l(M);$=a(F,"Trainer"),F.forEach(t),ee.forEach(t),J.forEach(t),A=c(Q),T=r(Q,"P",{});var X=l(T);I=a(X,"Le code d\u2019entra\xEEnement pour cet exemple ressemblera beaucoup au code des sections pr\xE9c\xE9dentes mais le calcul de la m\xE9trique avec la fonction "),D=r(X,"CODE",{});var re=l(D);P=a(re,"compute_metrics()"),re.forEach(t),V=a(X," sera un d\xE9fi unique. Puisque nous avons rembourr\xE9 tous les \xE9chantillons \xE0 la longueur maximale que nous avons d\xE9finie, il n\u2019y a pas de collateur de donn\xE9es \xE0 d\xE9finir. Ainsi le calcul de la m\xE9trique est vraiment la seule chose dont nous devons nous soucier. La partie la plus difficile sera de post-traiter les pr\xE9dictions du mod\xE8le en \xE9tendues de texte dans les exemples originaux. Une fois que nous aurons fait cela, la m\xE9trique de la biblioth\xE8que \u{1F917} "),L=r(X,"EM",{});var se=l(L);O=a(se,"Datasets"),se.forEach(t),N=a(X," fera le gros du travail pour nous."),X.forEach(t),this.h()},h(){C(b,"id","ifinetuneri-le-modle-avec-lapi-trainer"),C(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(b,"href","#ifinetuneri-le-modle-avec-lapi-trainer"),C(p,"class","relative group")},m(Q,J){i(Q,p,J),s(p,b),s(b,f),E(y,f,null),s(p,S),s(p,q),s(q,g),s(g,x),s(q,_),s(q,M),s(M,$),i(Q,A,J),i(Q,T,J),s(T,I),s(T,D),s(D,P),s(T,V),s(T,L),s(L,O),s(T,N),R=!0},i(Q){R||(h(y.$$.fragment,Q),R=!0)},o(Q){v(y.$$.fragment,Q),R=!1},d(Q){Q&&t(p),k(y),Q&&t(A),Q&&t(T)}}}function Cg(U){let p,b;return p=new kc({props:{id:"VN67ZpN33Ss"}}),{c(){w(p.$$.fragment)},l(f){j(p.$$.fragment,f)},m(f,y){E(p,f,y),b=!0},i(f){b||(h(p.$$.fragment,f),b=!0)},o(f){v(p.$$.fragment,f),b=!1},d(f){k(p,f)}}}function Pg(U){let p,b;return p=new kc({props:{id:"BNy08iIWVJM"}}),{c(){w(p.$$.fragment)},l(f){j(p.$$.fragment,f)},m(f,y){E(p,f,y),b=!0},i(f){b||(h(p.$$.fragment,f),b=!0)},o(f){v(p.$$.fragment,f),b=!1},d(f){k(p,f)}}}function Ag(U){let p,b,f,y,S,q,g;return p=new z({props:{code:`import tensorflow as tf
from transformers import TFAutoModelForQuestionAnswering

eval_set_for_model = eval_set.remove_columns(["example_id", "offset_mapping"])
eval_set_for_model.set_format("numpy")

batch = {k: eval_set_for_model[k] for k in eval_set_for_model.column_names}
trained_model = TFAutoModelForQuestionAnswering.from_pretrained(trained_checkpoint)

outputs = trained_model(**batch)`,highlighted:`<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForQuestionAnswering

eval_set_for_model = eval_set.remove_columns([<span class="hljs-string">&quot;example_id&quot;</span>, <span class="hljs-string">&quot;offset_mapping&quot;</span>])
eval_set_for_model.set_format(<span class="hljs-string">&quot;numpy&quot;</span>)

batch = {k: eval_set_for_model[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> eval_set_for_model.column_names}
trained_model = TFAutoModelForQuestionAnswering.from_pretrained(trained_checkpoint)

outputs = trained_model(**batch)`}}),q=new z({props:{code:`start_logits = outputs.start_logits.numpy()
end_logits = outputs.end_logits.numpy()`,highlighted:`start_logits = outputs.start_logits.numpy()
end_logits = outputs.end_logits.numpy()`}}),{c(){w(p.$$.fragment),b=d(),f=o("p"),y=n("Pour faciliter l\u2019exp\xE9rimentation, nous allons convertir ces sorties en tableaux NumPy :"),S=d(),w(q.$$.fragment)},l(x){j(p.$$.fragment,x),b=c(x),f=r(x,"P",{});var _=l(f);y=a(_,"Pour faciliter l\u2019exp\xE9rimentation, nous allons convertir ces sorties en tableaux NumPy :"),_.forEach(t),S=c(x),j(q.$$.fragment,x)},m(x,_){E(p,x,_),i(x,b,_),i(x,f,_),s(f,y),i(x,S,_),E(q,x,_),g=!0},i(x){g||(h(p.$$.fragment,x),h(q.$$.fragment,x),g=!0)},o(x){v(p.$$.fragment,x),v(q.$$.fragment,x),g=!1},d(x){k(p,x),x&&t(b),x&&t(f),x&&t(S),k(q,x)}}}function Sg(U){let p,b,f,y,S,q,g,x,_,M;return p=new z({props:{code:`import torch
from transformers import AutoModelForQuestionAnswering

eval_set_for_model = eval_set.remove_columns(["example_id", "offset_mapping"])
eval_set_for_model.set_format("torch")

device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
batch = {k: eval_set_for_model[k].to(device) for k in eval_set_for_model.column_names}
trained_model = AutoModelForQuestionAnswering.from_pretrained(trained_checkpoint).to(
    device
)

with torch.no_grad():
    outputs = trained_model(**batch)`,highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForQuestionAnswering

eval_set_for_model = eval_set.remove_columns([<span class="hljs-string">&quot;example_id&quot;</span>, <span class="hljs-string">&quot;offset_mapping&quot;</span>])
eval_set_for_model.set_format(<span class="hljs-string">&quot;torch&quot;</span>)

device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)
batch = {k: eval_set_for_model[k].to(device) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> eval_set_for_model.column_names}
trained_model = AutoModelForQuestionAnswering.from_pretrained(trained_checkpoint).to(
    device
)

<span class="hljs-keyword">with</span> torch.no_grad():
    outputs = trained_model(**batch)`}}),_=new z({props:{code:`start_logits = outputs.start_logits.cpu().numpy()
end_logits = outputs.end_logits.cpu().numpy()`,highlighted:`start_logits = outputs.start_logits.cpu().numpy()
end_logits = outputs.end_logits.cpu().numpy()`}}),{c(){w(p.$$.fragment),b=d(),f=o("p"),y=n("Puisque "),S=o("code"),q=n("Trainer"),g=n(" nous donne les pr\xE9dictions sous forme de tableaux NumPy, nous r\xE9cup\xE9rons les logits de d\xE9but et de fin et les convertissons dans ce format :"),x=d(),w(_.$$.fragment)},l($){j(p.$$.fragment,$),b=c($),f=r($,"P",{});var A=l(f);y=a(A,"Puisque "),S=r(A,"CODE",{});var T=l(S);q=a(T,"Trainer"),T.forEach(t),g=a(A," nous donne les pr\xE9dictions sous forme de tableaux NumPy, nous r\xE9cup\xE9rons les logits de d\xE9but et de fin et les convertissons dans ce format :"),A.forEach(t),x=c($),j(_.$$.fragment,$)},m($,A){E(p,$,A),i($,b,A),i($,f,A),s(f,y),s(f,S),s(S,q),s(f,g),i($,x,A),E(_,$,A),M=!0},i($){M||(h(p.$$.fragment,$),h(_.$$.fragment,$),M=!0)},o($){v(p.$$.fragment,$),v(_.$$.fragment,$),M=!1},d($){k(p,$),$&&t(b),$&&t(f),$&&t(x),k(_,$)}}}function Mg(U){let p,b,f,y,S;return{c(){p=o("p"),b=n("Maintenant, mettons tout ce que nous venons de faire dans une fonction "),f=o("code"),y=n("compute_metrics()"),S=n(" que nous utiliserons apr\xE8s avoir entra\xEEn\xE9 notre mod\xE8le. Nous aurons besoin de passer un peu plus que juste les logits de sortie, car nous devons chercher dans le jeu de donn\xE9es des caract\xE9ristiques pour le d\xE9calage et dans le jeu de donn\xE9es des exemples pour les contextes originaux :")},l(q){p=r(q,"P",{});var g=l(p);b=a(g,"Maintenant, mettons tout ce que nous venons de faire dans une fonction "),f=r(g,"CODE",{});var x=l(f);y=a(x,"compute_metrics()"),x.forEach(t),S=a(g," que nous utiliserons apr\xE8s avoir entra\xEEn\xE9 notre mod\xE8le. Nous aurons besoin de passer un peu plus que juste les logits de sortie, car nous devons chercher dans le jeu de donn\xE9es des caract\xE9ristiques pour le d\xE9calage et dans le jeu de donn\xE9es des exemples pour les contextes originaux :"),g.forEach(t)},m(q,g){i(q,p,g),s(p,b),s(p,f),s(f,y),s(p,S)},d(q){q&&t(p)}}}function zg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V,L,O,N,R,Q,J;return{c(){p=o("p"),b=n("Maintenant, mettons tout ce que nous venons de faire dans une fonction "),f=o("code"),y=n("compute_metrics()"),S=n(" que nous utiliserons dans le "),q=o("code"),g=n("Trainer"),x=n(". Normalement, cette fonction "),_=o("code"),M=n("compute_metrics()"),$=n(" re\xE7oit seulement un "),A=o("em"),T=n("tuple"),I=d(),D=o("code"),P=n("eval_preds"),V=n(" avec les logits et les \xE9tiquettes. Ici, nous aurons besoin d\u2019un peu plus, car nous devons chercher dans le jeu de donn\xE9es des caract\xE9ristiques pour le d\xE9calage et dans le jeu de donn\xE9es des exemples pour les contextes originaux. Ainsi nous ne serons pas en mesure d\u2019utiliser cette fonction pour obtenir des r\xE9sultats d\u2019\xE9valuation standards pendant l\u2019entra\xEEnement. Nous ne l\u2019utiliserons qu\u2019\xE0 la fin de l\u2019entra\xEEnement pour v\xE9rifier les r\xE9sultats."),L=d(),O=o("p"),N=n("La fonction "),R=o("code"),Q=n("compute_metrics()"),J=n(" regroupe les m\xEAmes \xE9tapes que pr\xE9c\xE9demment. Nous ajoutons juste une petite v\xE9rification au cas o\xF9 nous ne trouverions aucune r\xE9ponse valide (dans ce cas nous pr\xE9disons une cha\xEEne vide).")},l(H){p=r(H,"P",{});var G=l(p);b=a(G,"Maintenant, mettons tout ce que nous venons de faire dans une fonction "),f=r(G,"CODE",{});var ee=l(f);y=a(ee,"compute_metrics()"),ee.forEach(t),S=a(G," que nous utiliserons dans le "),q=r(G,"CODE",{});var Z=l(q);g=a(Z,"Trainer"),Z.forEach(t),x=a(G,". Normalement, cette fonction "),_=r(G,"CODE",{});var F=l(_);M=a(F,"compute_metrics()"),F.forEach(t),$=a(G," re\xE7oit seulement un "),A=r(G,"EM",{});var X=l(A);T=a(X,"tuple"),X.forEach(t),I=c(G),D=r(G,"CODE",{});var re=l(D);P=a(re,"eval_preds"),re.forEach(t),V=a(G," avec les logits et les \xE9tiquettes. Ici, nous aurons besoin d\u2019un peu plus, car nous devons chercher dans le jeu de donn\xE9es des caract\xE9ristiques pour le d\xE9calage et dans le jeu de donn\xE9es des exemples pour les contextes originaux. Ainsi nous ne serons pas en mesure d\u2019utiliser cette fonction pour obtenir des r\xE9sultats d\u2019\xE9valuation standards pendant l\u2019entra\xEEnement. Nous ne l\u2019utiliserons qu\u2019\xE0 la fin de l\u2019entra\xEEnement pour v\xE9rifier les r\xE9sultats."),G.forEach(t),L=c(H),O=r(H,"P",{});var se=l(O);N=a(se,"La fonction "),R=r(se,"CODE",{});var K=l(R);Q=a(K,"compute_metrics()"),K.forEach(t),J=a(se," regroupe les m\xEAmes \xE9tapes que pr\xE9c\xE9demment. Nous ajoutons juste une petite v\xE9rification au cas o\xF9 nous ne trouverions aucune r\xE9ponse valide (dans ce cas nous pr\xE9disons une cha\xEEne vide)."),se.forEach(t)},m(H,G){i(H,p,G),s(p,b),s(p,f),s(f,y),s(p,S),s(p,q),s(q,g),s(p,x),s(p,_),s(_,M),s(p,$),s(p,A),s(A,T),s(p,I),s(p,D),s(D,P),s(p,V),i(H,L,G),i(H,O,G),s(O,N),s(O,R),s(R,Q),s(O,J)},d(H){H&&t(p),H&&t(L),H&&t(O)}}}function Dg(U){let p,b,f,y,S,q,g,x;return g=new z({props:{code:"model = TFAutoModelForQuestionAnswering.from_pretrained(model_checkpoint)",highlighted:"model = TFAutoModelForQuestionAnswering.from_pretrained(model_checkpoint)"}}),{c(){p=o("p"),b=n("Nous sommes maintenant pr\xEAts \xE0 entra\xEEner notre mod\xE8le. Cr\xE9ons-le en utilisant la classe "),f=o("code"),y=n("TFAutoModelForQuestionAnswering"),S=n(" comme pr\xE9c\xE9demment :"),q=d(),w(g.$$.fragment)},l(_){p=r(_,"P",{});var M=l(p);b=a(M,"Nous sommes maintenant pr\xEAts \xE0 entra\xEEner notre mod\xE8le. Cr\xE9ons-le en utilisant la classe "),f=r(M,"CODE",{});var $=l(f);y=a($,"TFAutoModelForQuestionAnswering"),$.forEach(t),S=a(M," comme pr\xE9c\xE9demment :"),M.forEach(t),q=c(_),j(g.$$.fragment,_)},m(_,M){i(_,p,M),s(p,b),s(p,f),s(f,y),s(p,S),i(_,q,M),E(g,_,M),x=!0},i(_){x||(h(g.$$.fragment,_),x=!0)},o(_){v(g.$$.fragment,_),x=!1},d(_){_&&t(p),_&&t(q),k(g,_)}}}function Tg(U){let p,b,f,y,S,q,g,x;return g=new z({props:{code:"model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)",highlighted:"model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)"}}),{c(){p=o("p"),b=n("Nous sommes maintenant pr\xEAts \xE0 entra\xEEner notre mod\xE8le. Cr\xE9ons-le en utilisant la classe "),f=o("code"),y=n("AutoModelForQuestionAnswering"),S=n(" comme pr\xE9c\xE9demment :"),q=d(),w(g.$$.fragment)},l(_){p=r(_,"P",{});var M=l(p);b=a(M,"Nous sommes maintenant pr\xEAts \xE0 entra\xEEner notre mod\xE8le. Cr\xE9ons-le en utilisant la classe "),f=r(M,"CODE",{});var $=l(f);y=a($,"AutoModelForQuestionAnswering"),$.forEach(t),S=a(M," comme pr\xE9c\xE9demment :"),M.forEach(t),q=c(_),j(g.$$.fragment,_)},m(_,M){i(_,p,M),s(p,b),s(p,f),s(f,y),s(p,S),i(_,q,M),E(g,_,M),x=!0},i(_){x||(h(g.$$.fragment,_),x=!0)},o(_){v(g.$$.fragment,_),x=!1},d(_){_&&t(p),_&&t(q),k(g,_)}}}function Lg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V,L,O,N,R,Q,J,H,G,ee,Z;return y=new z({props:{code:`from transformers import DefaultDataCollator

data_collator = DefaultDataCollator(return_tensors="tf")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DefaultDataCollator

data_collator = DefaultDataCollator(return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}),_=new z({props:{code:`tf_train_dataset = train_dataset.to_tf_dataset(
    columns=[
        "input_ids",
        "start_positions",
        "end_positions",
        "attention_mask",
        "token_type_ids",
    ],
    collate_fn=data_collator,
    shuffle=True,
    batch_size=16,
)
tf_eval_dataset = validation_dataset.to_tf_dataset(
    columns=["input_ids", "attention_mask", "token_type_ids"],
    collate_fn=data_collator,
    shuffle=False,
    batch_size=16,
)`,highlighted:`tf_train_dataset = train_dataset.to_tf_dataset(
    columns=[
        <span class="hljs-string">&quot;input_ids&quot;</span>,
        <span class="hljs-string">&quot;start_positions&quot;</span>,
        <span class="hljs-string">&quot;end_positions&quot;</span>,
        <span class="hljs-string">&quot;attention_mask&quot;</span>,
        <span class="hljs-string">&quot;token_type_ids&quot;</span>,
    ],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">True</span>,
    batch_size=<span class="hljs-number">16</span>,
)
tf_eval_dataset = validation_dataset.to_tf_dataset(
    columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">False</span>,
    batch_size=<span class="hljs-number">16</span>,
)`}}),I=new z({props:{code:`from transformers import create_optimizer
from transformers.keras_callbacks import PushToHubCallback
import tensorflow as tf

# Le nombre d'\xE9tapes d'entra\xEEnement est le nombre d'\xE9chantillons dans le jeu de donn\xE9es, divis\xE9 par la taille du batch,
# puis multipli\xE9 par le nombre total d'\xE9poques. Notez que le jeu de donn\xE9es tf_train_dataset est ici un tf.data.Dataset,
# et non le jeu de donn\xE9es original donc son len() est d\xE9j\xE0 num_samples // batch_size.
num_train_epochs = 3
num_train_steps = len(tf_train_dataset) * num_train_epochs
optimizer, schedule = create_optimizer(
    init_lr=2e-5,
    num_warmup_steps=0,
    num_train_steps=num_train_steps,
    weight_decay_rate=0.01,
)
model.compile(optimizer=optimizer)

# Entra\xEEner en mixed-precision float16
tf.keras.mixed_precision.set_global_policy("mixed_float16")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer
<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-comment"># Le nombre d&#x27;\xE9tapes d&#x27;entra\xEEnement est le nombre d&#x27;\xE9chantillons dans le jeu de donn\xE9es, divis\xE9 par la taille du batch,</span>
<span class="hljs-comment"># puis multipli\xE9 par le nombre total d&#x27;\xE9poques. Notez que le jeu de donn\xE9es tf_train_dataset est ici un tf.data.Dataset,</span>
<span class="hljs-comment"># et non le jeu de donn\xE9es original donc son len() est d\xE9j\xE0 num_samples // batch_size.</span>
num_train_epochs = <span class="hljs-number">3</span>
num_train_steps = <span class="hljs-built_in">len</span>(tf_train_dataset) * num_train_epochs
optimizer, schedule = create_optimizer(
    init_lr=<span class="hljs-number">2e-5</span>,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_train_steps=num_train_steps,
    weight_decay_rate=<span class="hljs-number">0.01</span>,
)
model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)

<span class="hljs-comment"># Entra\xEEner en mixed-precision float16</span>
tf.keras.mixed_precision.set_global_policy(<span class="hljs-string">&quot;mixed_float16&quot;</span>)`}}),{c(){p=o("p"),b=n("Maintenant que c\u2019est fait, nous pouvons cr\xE9er nos jeux de donn\xE9es TensorFlow. Nous pouvons utiliser le simple collateur de donn\xE9es par d\xE9faut cette fois-ci :"),f=d(),w(y.$$.fragment),S=d(),q=o("p"),g=n("Et maintenant nous cr\xE9ons les jeux de donn\xE9es comme d\u2019habitude."),x=d(),w(_.$$.fragment),M=d(),$=o("p"),A=n("Ensuite, nous configurons nos hyperparam\xE8tres d\u2019entra\xEEnement et compilons notre mod\xE8le :"),T=d(),w(I.$$.fragment),D=d(),P=o("p"),V=n("Enfin, nous sommes pr\xEAts \xE0 entra\xEEner avec "),L=o("code"),O=n("model.fit()"),N=n(". Nous utilisons un "),R=o("code"),Q=n("PushToHubCallback"),J=n(" pour t\xE9l\xE9charger le mod\xE8le sur le "),H=o("em"),G=n("Hub"),ee=n(" apr\xE8s chaque \xE9poque.")},l(F){p=r(F,"P",{});var X=l(p);b=a(X,"Maintenant que c\u2019est fait, nous pouvons cr\xE9er nos jeux de donn\xE9es TensorFlow. Nous pouvons utiliser le simple collateur de donn\xE9es par d\xE9faut cette fois-ci :"),X.forEach(t),f=c(F),j(y.$$.fragment,F),S=c(F),q=r(F,"P",{});var re=l(q);g=a(re,"Et maintenant nous cr\xE9ons les jeux de donn\xE9es comme d\u2019habitude."),re.forEach(t),x=c(F),j(_.$$.fragment,F),M=c(F),$=r(F,"P",{});var se=l($);A=a(se,"Ensuite, nous configurons nos hyperparam\xE8tres d\u2019entra\xEEnement et compilons notre mod\xE8le :"),se.forEach(t),T=c(F),j(I.$$.fragment,F),D=c(F),P=r(F,"P",{});var K=l(P);V=a(K,"Enfin, nous sommes pr\xEAts \xE0 entra\xEEner avec "),L=r(K,"CODE",{});var le=l(L);O=a(le,"model.fit()"),le.forEach(t),N=a(K,". Nous utilisons un "),R=r(K,"CODE",{});var Ce=l(R);Q=a(Ce,"PushToHubCallback"),Ce.forEach(t),J=a(K," pour t\xE9l\xE9charger le mod\xE8le sur le "),H=r(K,"EM",{});var ye=l(H);G=a(ye,"Hub"),ye.forEach(t),ee=a(K," apr\xE8s chaque \xE9poque."),K.forEach(t)},m(F,X){i(F,p,X),s(p,b),i(F,f,X),E(y,F,X),i(F,S,X),i(F,q,X),s(q,g),i(F,x,X),E(_,F,X),i(F,M,X),i(F,$,X),s($,A),i(F,T,X),E(I,F,X),i(F,D,X),i(F,P,X),s(P,V),s(P,L),s(L,O),s(P,N),s(P,R),s(R,Q),s(P,J),s(P,H),s(H,G),s(P,ee),Z=!0},i(F){Z||(h(y.$$.fragment,F),h(_.$$.fragment,F),h(I.$$.fragment,F),Z=!0)},o(F){v(y.$$.fragment,F),v(_.$$.fragment,F),v(I.$$.fragment,F),Z=!1},d(F){F&&t(p),F&&t(f),k(y,F),F&&t(S),F&&t(q),F&&t(x),k(_,F),F&&t(M),F&&t($),F&&t(T),k(I,F),F&&t(D),F&&t(P)}}}function Ng(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V,L,O,N,R,Q,J,H,G,ee,Z,F,X,re,se,K,le,Ce,ye,ie,gs,Fe,ue,xs,rs;return se=new z({props:{code:`from transformers import TrainingArguments

args = TrainingArguments(
    "bert-finetuned-squad",
    evaluation_strategy="no",
    save_strategy="epoch",
    learning_rate=2e-5,
    num_train_epochs=3,
    weight_decay=0.01,
    fp16=True,
    push_to_hub=True,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

args = TrainingArguments(
    <span class="hljs-string">&quot;bert-finetuned-squad&quot;</span>,
    evaluation_strategy=<span class="hljs-string">&quot;no&quot;</span>,
    save_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
    learning_rate=<span class="hljs-number">2e-5</span>,
    num_train_epochs=<span class="hljs-number">3</span>,
    weight_decay=<span class="hljs-number">0.01</span>,
    fp16=<span class="hljs-literal">True</span>,
    push_to_hub=<span class="hljs-literal">True</span>,
)`}}),{c(){p=o("p"),b=n("Une fois ceci fait, nous pouvons d\xE9finir nos "),f=o("code"),y=n("TrainingArguments"),S=n(". Comme nous l\u2019avons dit lorsque nous avons d\xE9fini notre fonction pour calculer la m\xE9trique, nous ne serons pas en mesure d\u2019avoir une boucle d\u2019\xE9valuation standard \xE0 cause de la signature de la fonction "),q=o("code"),g=n("compute_metrics()"),x=n(". Nous pourrions \xE9crire notre propre sous-classe de "),_=o("code"),M=n("Trainer"),$=n(" pour faire cela (une approche que vous pouvez trouver dans le "),A=o("a"),T=n("script d\u2019exemple de r\xE9ponse aux questions"),I=n("), mais c\u2019est un peu trop long pour cette section. A la place, nous n\u2019\xE9valuerons le mod\xE8le qu\u2019\xE0 la fin de l\u2019entra\xEEnement et nous vous montrerons comment faire une \xE9valuation cela dans le paragraphe \xAB Une boucle d\u2019entra\xEEnement personnalis\xE9e \xBB ci-dessous."),D=d(),P=o("p"),V=n("C\u2019est l\xE0 que l\u2019API "),L=o("code"),O=n("Trainer"),N=n(" montre ses limites et que la biblioth\xE8que \u{1F917} "),R=o("em"),Q=n("Accelerate"),J=n(" brille : personnaliser la classe pour un cas d\u2019utilisation sp\xE9cifique peut \xEAtre p\xE9nible, mais modifier une boucle d\u2019entra\xEEnement est facile."),H=d(),G=o("p"),ee=n("Jetons un coup d\u2019\u0153il \xE0 notre "),Z=o("code"),F=n("TrainingArguments"),X=n(" :"),re=d(),w(se.$$.fragment),K=d(),le=o("p"),Ce=n("Nous avons d\xE9j\xE0 vu la plupart d\u2019entre eux. Nous d\xE9finissons quelques hyperparam\xE8tres (comme le taux d\u2019apprentissage, le nombre d\u2019\xE9poques d\u2019entra\xEEnement, un taux de d\xE9croissance des poids) et nous indiquons que nous voulons sauvegarder le mod\xE8le \xE0 la fin de chaque \xE9poque, sauter l\u2019\xE9valuation, et t\xE9l\xE9charger nos r\xE9sultats vers le "),ye=o("em"),ie=n("Hub"),gs=n(". Nous activons \xE9galement l\u2019entra\xEEnement en pr\xE9cision mixte avec "),Fe=o("code"),ue=n("fp16=True"),xs=n(", car cela peut acc\xE9l\xE9rer l\u2019entra\xEEnement sur un GPU r\xE9cent."),this.h()},l(W){p=r(W,"P",{});var Y=l(p);b=a(Y,"Une fois ceci fait, nous pouvons d\xE9finir nos "),f=r(Y,"CODE",{});var $s=l(f);y=a($s,"TrainingArguments"),$s.forEach(t),S=a(Y,". Comme nous l\u2019avons dit lorsque nous avons d\xE9fini notre fonction pour calculer la m\xE9trique, nous ne serons pas en mesure d\u2019avoir une boucle d\u2019\xE9valuation standard \xE0 cause de la signature de la fonction "),q=r(Y,"CODE",{});var Bt=l(q);g=a(Bt,"compute_metrics()"),Bt.forEach(t),x=a(Y,". Nous pourrions \xE9crire notre propre sous-classe de "),_=r(Y,"CODE",{});var ws=l(_);M=a(ws,"Trainer"),ws.forEach(t),$=a(Y," pour faire cela (une approche que vous pouvez trouver dans le "),A=r(Y,"A",{href:!0,rel:!0});var Ie=l(A);T=a(Ie,"script d\u2019exemple de r\xE9ponse aux questions"),Ie.forEach(t),I=a(Y,"), mais c\u2019est un peu trop long pour cette section. A la place, nous n\u2019\xE9valuerons le mod\xE8le qu\u2019\xE0 la fin de l\u2019entra\xEEnement et nous vous montrerons comment faire une \xE9valuation cela dans le paragraphe \xAB Une boucle d\u2019entra\xEEnement personnalis\xE9e \xBB ci-dessous."),Y.forEach(t),D=c(W),P=r(W,"P",{});var Ve=l(P);V=a(Ve,"C\u2019est l\xE0 que l\u2019API "),L=r(Ve,"CODE",{});var js=l(L);O=a(js,"Trainer"),js.forEach(t),N=a(Ve," montre ses limites et que la biblioth\xE8que \u{1F917} "),R=r(Ve,"EM",{});var he=l(R);Q=a(he,"Accelerate"),he.forEach(t),J=a(Ve," brille : personnaliser la classe pour un cas d\u2019utilisation sp\xE9cifique peut \xEAtre p\xE9nible, mais modifier une boucle d\u2019entra\xEEnement est facile."),Ve.forEach(t),H=c(W),G=r(W,"P",{});var He=l(G);ee=a(He,"Jetons un coup d\u2019\u0153il \xE0 notre "),Z=r(He,"CODE",{});var pe=l(Z);F=a(pe,"TrainingArguments"),pe.forEach(t),X=a(He," :"),He.forEach(t),re=c(W),j(se.$$.fragment,W),K=c(W),le=r(W,"P",{});var ve=l(le);Ce=a(ve,"Nous avons d\xE9j\xE0 vu la plupart d\u2019entre eux. Nous d\xE9finissons quelques hyperparam\xE8tres (comme le taux d\u2019apprentissage, le nombre d\u2019\xE9poques d\u2019entra\xEEnement, un taux de d\xE9croissance des poids) et nous indiquons que nous voulons sauvegarder le mod\xE8le \xE0 la fin de chaque \xE9poque, sauter l\u2019\xE9valuation, et t\xE9l\xE9charger nos r\xE9sultats vers le "),ye=r(ve,"EM",{});var Re=l(ye);ie=a(Re,"Hub"),Re.forEach(t),gs=a(ve,". Nous activons \xE9galement l\u2019entra\xEEnement en pr\xE9cision mixte avec "),Fe=r(ve,"CODE",{});var Ue=l(Fe);ue=a(Ue,"fp16=True"),Ue.forEach(t),xs=a(ve,", car cela peut acc\xE9l\xE9rer l\u2019entra\xEEnement sur un GPU r\xE9cent."),ve.forEach(t),this.h()},h(){C(A,"href","https://github.com/huggingface/transformers/blob/master/examples/pytorch/question-answering/trainer_qa.py"),C(A,"rel","nofollow")},m(W,Y){i(W,p,Y),s(p,b),s(p,f),s(f,y),s(p,S),s(p,q),s(q,g),s(p,x),s(p,_),s(_,M),s(p,$),s(p,A),s(A,T),s(p,I),i(W,D,Y),i(W,P,Y),s(P,V),s(P,L),s(L,O),s(P,N),s(P,R),s(R,Q),s(P,J),i(W,H,Y),i(W,G,Y),s(G,ee),s(G,Z),s(Z,F),s(G,X),i(W,re,Y),E(se,W,Y),i(W,K,Y),i(W,le,Y),s(le,Ce),s(le,ye),s(ye,ie),s(le,gs),s(le,Fe),s(Fe,ue),s(le,xs),rs=!0},i(W){rs||(h(se.$$.fragment,W),rs=!0)},o(W){v(se.$$.fragment,W),rs=!1},d(W){W&&t(p),W&&t(D),W&&t(P),W&&t(H),W&&t(G),W&&t(re),k(se,W),W&&t(K),W&&t(le)}}}function Og(U){let p,b;return p=new z({props:{code:`from transformers.keras_callbacks import PushToHubCallback

callback = PushToHubCallback(output_dir="bert-finetuned-squad", tokenizer=tokenizer)

# Nous allons faire la validation apr\xE8s, donc pas de validation au milieu de l'entra\xEEnement.
model.fit(tf_train_dataset, callbacks=[callback], epochs=num_train_epochs)`,highlighted:`<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback

callback = PushToHubCallback(output_dir=<span class="hljs-string">&quot;bert-finetuned-squad&quot;</span>, tokenizer=tokenizer)

<span class="hljs-comment"># Nous allons faire la validation apr\xE8s, donc pas de validation au milieu de l&#x27;entra\xEEnement.</span>
model.fit(tf_train_dataset, callbacks=[callback], epochs=num_train_epochs)`}}),{c(){w(p.$$.fragment)},l(f){j(p.$$.fragment,f)},m(f,y){E(p,f,y),b=!0},i(f){b||(h(p.$$.fragment,f),b=!0)},o(f){v(p.$$.fragment,f),b=!1},d(f){k(p,f)}}}function Bg(U){let p,b,f,y,S,q,g,x,_,M;return p=new Ec({props:{$$slots:{default:[Fg]},$$scope:{ctx:U}}}),_=new z({props:{code:`from transformers import Trainer

trainer = Trainer(
    model=model,
    args=args,
    train_dataset=train_dataset,
    eval_dataset=validation_dataset,
    tokenizer=tokenizer,
)
trainer.train()`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer

trainer = Trainer(
    model=model,
    args=args,
    train_dataset=train_dataset,
    eval_dataset=validation_dataset,
    tokenizer=tokenizer,
)
trainer.train()`}}),{c(){w(p.$$.fragment),b=d(),f=o("p"),y=n("Enfin, nous passons tout \xE0 la classe "),S=o("code"),q=n("Trainer"),g=n(" et lan\xE7ons l\u2019entra\xEEnement :"),x=d(),w(_.$$.fragment)},l($){j(p.$$.fragment,$),b=c($),f=r($,"P",{});var A=l(f);y=a(A,"Enfin, nous passons tout \xE0 la classe "),S=r(A,"CODE",{});var T=l(S);q=a(T,"Trainer"),T.forEach(t),g=a(A," et lan\xE7ons l\u2019entra\xEEnement :"),A.forEach(t),x=c($),j(_.$$.fragment,$)},m($,A){E(p,$,A),i($,b,A),i($,f,A),s(f,y),s(f,S),s(S,q),s(f,g),i($,x,A),E(_,$,A),M=!0},i($){M||(h(p.$$.fragment,$),h(_.$$.fragment,$),M=!0)},o($){v(p.$$.fragment,$),v(_.$$.fragment,$),M=!1},d($){k(p,$),$&&t(b),$&&t(f),$&&t(x),k(_,$)}}}function Fg(U){let p,b,f,y,S;return{c(){p=o("p"),b=n("\u{1F4A1} Si le r\xE9pertoire de sortie que vous utilisez existe, il doit \xEAtre un clone local du d\xE9p\xF4t vers lequel vous voulez pousser (donc d\xE9finissez un nouveau nom si vous obtenez une erreur lors de la d\xE9finition de votre "),f=o("code"),y=n("Trainer"),S=n(").")},l(q){p=r(q,"P",{});var g=l(p);b=a(g,"\u{1F4A1} Si le r\xE9pertoire de sortie que vous utilisez existe, il doit \xEAtre un clone local du d\xE9p\xF4t vers lequel vous voulez pousser (donc d\xE9finissez un nouveau nom si vous obtenez une erreur lors de la d\xE9finition de votre "),f=r(g,"CODE",{});var x=l(f);y=a(x,"Trainer"),x.forEach(t),S=a(g,")."),g.forEach(t)},m(q,g){i(q,p,g),s(p,b),s(p,f),s(f,y),s(p,S)},d(q){q&&t(p)}}}function Ig(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I;return T=new z({props:{code:`predictions = model.predict(tf_eval_dataset)
compute_metrics(
    predictions["start_logits"],
    predictions["end_logits"],
    validation_dataset,
    raw_datasets["validation"],
)`,highlighted:`predictions = model.predict(tf_eval_dataset)
compute_metrics(
    predictions[<span class="hljs-string">&quot;start_logits&quot;</span>],
    predictions[<span class="hljs-string">&quot;end_logits&quot;</span>],
    validation_dataset,
    raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>],
)`}}),{c(){p=o("p"),b=n("Une fois l\u2019entra\xEEnement termin\xE9, nous pouvons enfin \xE9valuer notre mod\xE8le (et prier pour ne pas avoir d\xE9pens\xE9 tout ce temps de calcul pour rien). La m\xE9thode "),f=o("code"),y=n("predict()"),S=n(" de notre "),q=o("code"),g=n("model"),x=n(" se chargera d\u2019obtenir les pr\xE9dictions, et puisque nous avons fait tout le travail difficile de d\xE9finir une fonction "),_=o("code"),M=n("compute_metrics()"),$=n(" plus t\xF4t, nous pouvons obtenir nos r\xE9sultats en une seule ligne :"),A=d(),w(T.$$.fragment)},l(D){p=r(D,"P",{});var P=l(p);b=a(P,"Une fois l\u2019entra\xEEnement termin\xE9, nous pouvons enfin \xE9valuer notre mod\xE8le (et prier pour ne pas avoir d\xE9pens\xE9 tout ce temps de calcul pour rien). La m\xE9thode "),f=r(P,"CODE",{});var V=l(f);y=a(V,"predict()"),V.forEach(t),S=a(P," de notre "),q=r(P,"CODE",{});var L=l(q);g=a(L,"model"),L.forEach(t),x=a(P," se chargera d\u2019obtenir les pr\xE9dictions, et puisque nous avons fait tout le travail difficile de d\xE9finir une fonction "),_=r(P,"CODE",{});var O=l(_);M=a(O,"compute_metrics()"),O.forEach(t),$=a(P," plus t\xF4t, nous pouvons obtenir nos r\xE9sultats en une seule ligne :"),P.forEach(t),A=c(D),j(T.$$.fragment,D)},m(D,P){i(D,p,P),s(p,b),s(p,f),s(f,y),s(p,S),s(p,q),s(q,g),s(p,x),s(p,_),s(_,M),s(p,$),i(D,A,P),E(T,D,P),I=!0},i(D){I||(h(T.$$.fragment,D),I=!0)},o(D){v(T.$$.fragment,D),I=!1},d(D){D&&t(p),D&&t(A),k(T,D)}}}function Vg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V;return P=new z({props:{code:`predictions, _ = trainer.predict(validation_dataset)
start_logits, end_logits = predictions
compute_metrics(start_logits, end_logits, validation_dataset, raw_datasets["validation"])`,highlighted:`predictions, _ = trainer.predict(validation_dataset)
start_logits, end_logits = predictions
compute_metrics(start_logits, end_logits, validation_dataset, raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>])`}}),{c(){p=o("p"),b=n("Une fois l\u2019entra\xEEnement termin\xE9, nous pouvons enfin \xE9valuer notre mod\xE8le (et prier pour ne pas avoir d\xE9pens\xE9 tout ce temps de calcul pour rien). La m\xE9thode "),f=o("code"),y=n("predict()"),S=n(" du "),q=o("code"),g=n("Trainer"),x=n(" retournera un "),_=o("em"),M=n("tuple"),$=n(" o\xF9 les premiers \xE9l\xE9ments seront les pr\xE9dictions du mod\xE8le (ici une paire avec les logits de d\xE9but et de fin). Nous envoyons ceci \xE0 notre fonction "),A=o("code"),T=n("compute_metrics()"),I=n(" :"),D=d(),w(P.$$.fragment)},l(L){p=r(L,"P",{});var O=l(p);b=a(O,"Une fois l\u2019entra\xEEnement termin\xE9, nous pouvons enfin \xE9valuer notre mod\xE8le (et prier pour ne pas avoir d\xE9pens\xE9 tout ce temps de calcul pour rien). La m\xE9thode "),f=r(O,"CODE",{});var N=l(f);y=a(N,"predict()"),N.forEach(t),S=a(O," du "),q=r(O,"CODE",{});var R=l(q);g=a(R,"Trainer"),R.forEach(t),x=a(O," retournera un "),_=r(O,"EM",{});var Q=l(_);M=a(Q,"tuple"),Q.forEach(t),$=a(O," o\xF9 les premiers \xE9l\xE9ments seront les pr\xE9dictions du mod\xE8le (ici une paire avec les logits de d\xE9but et de fin). Nous envoyons ceci \xE0 notre fonction "),A=r(O,"CODE",{});var J=l(A);T=a(J,"compute_metrics()"),J.forEach(t),I=a(O," :"),O.forEach(t),D=c(L),j(P.$$.fragment,L)},m(L,O){i(L,p,O),s(p,b),s(p,f),s(f,y),s(p,S),s(p,q),s(q,g),s(p,x),s(p,_),s(_,M),s(p,$),s(p,A),s(A,T),s(p,I),i(L,D,O),E(P,L,O),V=!0},i(L){V||(h(P.$$.fragment,L),V=!0)},o(L){v(P.$$.fragment,L),V=!1},d(L){L&&t(p),L&&t(D),k(P,L)}}}function mg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V,L,O;return g=new z({props:{code:'trainer.push_to_hub(commit_message="Training complete")',highlighted:'trainer.push_to_hub(commit_message=<span class="hljs-string">&quot;Training complete&quot;</span>)'}}),A=new z({props:{code:"'https://huggingface.co/sgugger/bert-finetuned-squad/commit/9dcee1fbc25946a6ed4bb32efb1bd71d5fa90b68'",highlighted:'<span class="hljs-string">&#x27;https://huggingface.co/sgugger/bert-finetuned-squad/commit/9dcee1fbc25946a6ed4bb32efb1bd71d5fa90b68&#x27;</span>'}}),{c(){p=o("p"),b=n("Enfin, nous utilisons la m\xE9thode "),f=o("code"),y=n("push_to_hub()"),S=n(" pour nous assurer que nous t\xE9l\xE9chargeons la derni\xE8re version du mod\xE8le :"),q=d(),w(g.$$.fragment),x=d(),_=o("p"),M=n("Cela renvoie l\u2019URL du commit qu\u2019il vient de faire, si vous voulez l\u2019inspecter :"),$=d(),w(A.$$.fragment),T=d(),I=o("p"),D=n("Le "),P=o("code"),V=n("Trainer"),L=n(" r\xE9dige \xE9galement une carte de mod\xE8le avec tous les r\xE9sultats de l\u2019\xE9valuation et la t\xE9l\xE9charge.")},l(N){p=r(N,"P",{});var R=l(p);b=a(R,"Enfin, nous utilisons la m\xE9thode "),f=r(R,"CODE",{});var Q=l(f);y=a(Q,"push_to_hub()"),Q.forEach(t),S=a(R," pour nous assurer que nous t\xE9l\xE9chargeons la derni\xE8re version du mod\xE8le :"),R.forEach(t),q=c(N),j(g.$$.fragment,N),x=c(N),_=r(N,"P",{});var J=l(_);M=a(J,"Cela renvoie l\u2019URL du commit qu\u2019il vient de faire, si vous voulez l\u2019inspecter :"),J.forEach(t),$=c(N),j(A.$$.fragment,N),T=c(N),I=r(N,"P",{});var H=l(I);D=a(H,"Le "),P=r(H,"CODE",{});var G=l(P);V=a(G,"Trainer"),G.forEach(t),L=a(H," r\xE9dige \xE9galement une carte de mod\xE8le avec tous les r\xE9sultats de l\u2019\xE9valuation et la t\xE9l\xE9charge."),H.forEach(t)},m(N,R){i(N,p,R),s(p,b),s(p,f),s(f,y),s(p,S),i(N,q,R),E(g,N,R),i(N,x,R),i(N,_,R),s(_,M),i(N,$,R),E(A,N,R),i(N,T,R),i(N,I,R),s(I,D),s(I,P),s(P,V),s(I,L),O=!0},i(N){O||(h(g.$$.fragment,N),h(A.$$.fragment,N),O=!0)},o(N){v(g.$$.fragment,N),v(A.$$.fragment,N),O=!1},d(N){N&&t(p),N&&t(q),k(g,N),N&&t(x),N&&t(_),N&&t($),k(A,N),N&&t(T),N&&t(I)}}}function Hg(U){let p,b,f,y,S;return{c(){p=o("p"),b=n("\u270F\uFE0F "),f=o("strong"),y=n("A votre tour"),S=n(" Essayez un autre mod\xE8le pour voir s\u2019il est plus performant pour cette t\xE2che !")},l(q){p=r(q,"P",{});var g=l(p);b=a(g,"\u270F\uFE0F "),f=r(g,"STRONG",{});var x=l(f);y=a(x,"A votre tour"),x.forEach(t),S=a(g," Essayez un autre mod\xE8le pour voir s\u2019il est plus performant pour cette t\xE2che !"),g.forEach(t)},m(q,g){i(q,p,g),s(p,b),s(p,f),s(f,y),s(p,S)},d(q){q&&t(p)}}}function fg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V,L,O,N,R,Q,J,H,G,ee,Z,F,X,re,se,K,le,Ce,ye,ie,gs,Fe,ue,xs,rs,W,Y,$s,Bt,ws,Ie,Ve,js,he,He,pe,ve,Re,Ue,mo,Ft,Js,jn,be,fo,ls,_o,ho,Es,Xs,sa,te,is,Qe,En,Ks,kn,yn,vo,It,ks,bo,Ys,qo,go,Vt,Zs,ta,ys,xo,na,us,aa,et,Cn,me,oa,Pe,$o,Pn,An,wo,Sn,Mn,jo,ra,Cs,Ps,de,st,Ht,oe,Eo,tt,ko,yo,nt,Co,Po,at,Ao,So,ot,Mo,zo,Rt,rt,la,ps,ia,Ut,ua,ds,lt,Qt,Ge,Do,Gt,it,pa,cs,da,Wt,ca,We,Ae,Jt,Oe,ma,Je,To,Xt,Kt,Lo,zn,je,As,ut,Yt,Zt,No,fa,ce,Ss,pt,dt,Oo,ct,Bo,_a,ms,ha,Ms,Fo,qe,Io,Dn,va,zs,Tn,Ln,Vo,Nn,ba,mt,en,ne,Ho,sn,tn,Ro,nn,ft,qa,Xe,Uo,On,_t,Qo,ga,fs,xa,ae,Bn,Fn,Go,In,Vn,Wo,$a,_s,wa,ht,an,Ke,Jo,vt,Xo,Ko,bt,Yo,Zo,on,qt,ja,gt,Ye,Ea,hs,ka,xt,Ds,Se,er,Hn,ya;return M=new qs({}),Z=new qs({}),he=new z({props:{code:`from torch.utils.data import DataLoader
from transformers import default_data_collator

train_dataset.set_format("torch")
validation_set = validation_dataset.remove_columns(["example_id", "offset_mapping"])
validation_set.set_format("torch")

train_dataloader = DataLoader(
    train_dataset,
    shuffle=True,
    collate_fn=default_data_collator,
    batch_size=8,
)
eval_dataloader = DataLoader(
    validation_set, collate_fn=default_data_collator, batch_size=8
)`,highlighted:`<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> default_data_collator

train_dataset.set_format(<span class="hljs-string">&quot;torch&quot;</span>)
validation_set = validation_dataset.remove_columns([<span class="hljs-string">&quot;example_id&quot;</span>, <span class="hljs-string">&quot;offset_mapping&quot;</span>])
validation_set.set_format(<span class="hljs-string">&quot;torch&quot;</span>)

train_dataloader = DataLoader(
    train_dataset,
    shuffle=<span class="hljs-literal">True</span>,
    collate_fn=default_data_collator,
    batch_size=<span class="hljs-number">8</span>,
)
eval_dataloader = DataLoader(
    validation_set, collate_fn=default_data_collator, batch_size=<span class="hljs-number">8</span>
)`}}),Js=new z({props:{code:"model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)",highlighted:"model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)"}}),Xs=new z({props:{code:`from torch.optim import AdamW

optimizer = AdamW(model.parameters(), lr=2e-5)`,highlighted:`<span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> AdamW

optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">2e-5</span>)`}}),me=new z({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(fp16=True)
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator(fp16=<span class="hljs-literal">True</span>)
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`}}),Cs=new z({props:{code:`from transformers import get_scheduler

num_train_epochs = 3
num_update_steps_per_epoch = len(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler

num_train_epochs = <span class="hljs-number">3</span>
num_update_steps_per_epoch = <span class="hljs-built_in">len</span>(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    <span class="hljs-string">&quot;linear&quot;</span>,
    optimizer=optimizer,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_training_steps=num_training_steps,
)`}}),rt=new z({props:{code:`from huggingface_hub import Repository, get_full_repo_name

model_name = "bert-finetuned-squad-accelerate"
repo_name = get_full_repo_name(model_name)
repo_name`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository, get_full_repo_name

model_name = <span class="hljs-string">&quot;bert-finetuned-squad-accelerate&quot;</span>
repo_name = get_full_repo_name(model_name)
repo_name`}}),ps=new z({props:{code:"'sgugger/bert-finetuned-squad-accelerate'",highlighted:'<span class="hljs-string">&#x27;sgugger/bert-finetuned-squad-accelerate&#x27;</span>'}}),lt=new z({props:{code:`output_dir = "bert-finetuned-squad-accelerate"
repo = Repository(output_dir, clone_from=repo_name)`,highlighted:`output_dir = <span class="hljs-string">&quot;bert-finetuned-squad-accelerate&quot;</span>
repo = Repository(output_dir, clone_from=repo_name)`}}),Oe=new qs({}),ft=new z({props:{code:`from tqdm.auto import tqdm
import torch

progress_bar = tqdm(range(num_training_steps))

for epoch in range(num_train_epochs):
    # Entra\xEEnement
    model.train()
    for step, batch in enumerate(train_dataloader):
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)

    # Evaluation
    model.eval()
    start_logits = []
    end_logits = []
    accelerator.print("Evaluation!")
    for batch in tqdm(eval_dataloader):
        with torch.no_grad():
            outputs = model(**batch)

        start_logits.append(accelerator.gather(outputs.start_logits).cpu().numpy())
        end_logits.append(accelerator.gather(outputs.end_logits).cpu().numpy())

    start_logits = np.concatenate(start_logits)
    end_logits = np.concatenate(end_logits)
    start_logits = start_logits[: len(validation_dataset)]
    end_logits = end_logits[: len(validation_dataset)]

    metrics = compute_metrics(
        start_logits, end_logits, validation_dataset, raw_datasets["validation"]
    )
    print(f"epoch {epoch}:", metrics)

    # Sauvegarder et t\xE9l\xE9charger
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    if accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=f"Training in progress epoch {epoch}", blocking=False
        )`,highlighted:`<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm
<span class="hljs-keyword">import</span> torch

progress_bar = tqdm(<span class="hljs-built_in">range</span>(num_training_steps))

<span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_train_epochs):
    <span class="hljs-comment"># Entra\xEEnement</span>
    model.train()
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(<span class="hljs-number">1</span>)

    <span class="hljs-comment"># Evaluation</span>
    model.<span class="hljs-built_in">eval</span>()
    start_logits = []
    end_logits = []
    accelerator.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Evaluation!&quot;</span>)
    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> tqdm(eval_dataloader):
        <span class="hljs-keyword">with</span> torch.no_grad():
            outputs = model(**batch)

        start_logits.append(accelerator.gather(outputs.start_logits).cpu().numpy())
        end_logits.append(accelerator.gather(outputs.end_logits).cpu().numpy())

    start_logits = np.concatenate(start_logits)
    end_logits = np.concatenate(end_logits)
    start_logits = start_logits[: <span class="hljs-built_in">len</span>(validation_dataset)]
    end_logits = end_logits[: <span class="hljs-built_in">len</span>(validation_dataset)]

    metrics = compute_metrics(
        start_logits, end_logits, validation_dataset, raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>]
    )
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;epoch <span class="hljs-subst">{epoch}</span>:&quot;</span>, metrics)

    <span class="hljs-comment"># Sauvegarder et t\xE9l\xE9charger</span>
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    <span class="hljs-keyword">if</span> accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=<span class="hljs-string">f&quot;Training in progress epoch <span class="hljs-subst">{epoch}</span>&quot;</span>, blocking=<span class="hljs-literal">False</span>
        )`}}),fs=new z({props:{code:`accelerator.wait_for_everyone()
unwrapped_model = accelerator.unwrap_model(model)
unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)`,highlighted:`accelerator.wait_for_everyone()
unwrapped_model = accelerator.unwrap_model(model)
unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)`}}),{c(){p=o("p"),b=n("Si vous voulez plonger un peu plus profond\xE9ment dans la boucle d\u2019entra\xEEnement, nous allons maintenant vous montrer comment faire la m\xEAme chose en utilisant \u{1F917} "),f=o("em"),y=n("Accelerate"),S=n("."),q=d(),g=o("h2"),x=o("a"),_=o("span"),w(M.$$.fragment),$=d(),A=o("span"),T=n("Une boucle d'entra\xEEnement personnalis\xE9e"),I=d(),D=o("p"),P=n("Jetons maintenant un coup d\u2019\u0153il \xE0 la boucle d\u2019entra\xEEnement compl\xE8te, afin que vous puissiez facilement personnaliser les parties dont vous avez besoin. Elle ressemblera beaucoup \xE0 la boucle d\u2019entra\xEEnement du "),V=o("a"),L=n("chapitre 3"),O=n(", \xE0 l\u2019exception de la boucle d\u2019\xE9valuation. Nous serons en mesure d\u2019\xE9valuer le mod\xE8le r\xE9guli\xE8rement puisque nous ne sommes plus contraints par la classe "),N=o("code"),R=n("Trainer"),Q=n("."),J=d(),H=o("h3"),G=o("a"),ee=o("span"),w(Z.$$.fragment),F=d(),X=o("span"),re=n("Pr\xE9parer tout pour l'entra\xEEnement"),se=d(),K=o("p"),le=n("Tout d\u2019abord, nous devons construire le "),Ce=o("code"),ye=n("DataLoader"),ie=n("s \xE0 partir de nos jeux de donn\xE9es. Nous d\xE9finissons le format de ces jeux de donn\xE9es \xE0 "),gs=o("code"),Fe=n('"torch"'),ue=n(" et supprimons les colonnes dans le jeu de validation qui ne sont pas utilis\xE9es par le mod\xE8le. Ensuite, nous pouvons utiliser le "),xs=o("code"),rs=n("default_data_collator"),W=n(" fourni par \u{1F917} "),Y=o("em"),$s=n("Transformers"),Bt=n(" comme "),ws=o("code"),Ie=n("collate_fn"),Ve=n(" et m\xE9langer l\u2019ensemble d\u2019entra\xEEnement mais pas celui de validation :"),js=d(),w(he.$$.fragment),He=d(),pe=o("p"),ve=n("Ensuite, nous r\xE9instantifions notre mod\xE8le afin de nous assurer que nous ne poursuivons pas le "),Re=o("em"),Ue=n("finetuning"),mo=n(" pr\xE9c\xE9dent et que nous repartons du mod\xE8le BERT pr\xE9-entra\xEEn\xE9 :"),Ft=d(),w(Js.$$.fragment),jn=d(),be=o("p"),fo=n("Ensuite, nous aurons besoin d\u2019un optimiseur. Comme d\u2019habitude, nous utilisons le classique "),ls=o("code"),_o=n("AdamW"),ho=n(", qui est comme Adam mais avec une correction dans la fa\xE7on dont le taux de d\xE9croissance des poids est appliqu\xE9 :"),Es=d(),w(Xs.$$.fragment),sa=d(),te=o("p"),is=n("Une fois que nous avons tous ces objets, nous pouvons les envoyer \xE0 la m\xE9thode "),Qe=o("code"),En=n("accelerator.prepare()"),Ks=n(". Rappelez-vous que si vous voulez entra\xEEner sur des TPUs dans un "),kn=o("em"),yn=n("notebook"),vo=n(" Colab, vous devrez d\xE9placer tout ce code dans une fonction d\u2019entra\xEEnement, et qui ne devrait pas ex\xE9cuter une cellule qui instancie un "),It=o("code"),ks=n("Accelerator"),bo=n(". Nous pouvons forcer l\u2019entra\xEEnement en pr\xE9cision mixte en passant l\u2019argument "),Ys=o("code"),qo=n("fp16=True"),go=n(" \xE0 "),Vt=o("code"),Zs=n("Accelerator"),ta=n(" (ou, si vous ex\xE9cutez le code comme un script, assurez-vous de remplir la \u{1F917} "),ys=o("em"),xo=n("Accelerate"),na=d(),us=o("code"),aa=n("config"),et=n(" de mani\xE8re appropri\xE9e)."),Cn=d(),w(me.$$.fragment),oa=d(),Pe=o("p"),$o=n("Comme vous devez le savoir depuis les sections pr\xE9c\xE9dentes, nous ne pouvons utiliser la longueur de "),Pn=o("code"),An=n("train_dataloader"),wo=n(" pour calculer le nombre d\u2019\xE9tapes d\u2019entra\xEEnement qu\u2019apr\xE8s qu\u2019il soit pass\xE9 par la m\xE9thode "),Sn=o("code"),Mn=n("accelerator.prepare()"),jo=n(". Nous utilisons le m\xEAme programme lin\xE9aire que dans les sections pr\xE9c\xE9dentes :"),ra=d(),w(Cs.$$.fragment),Ps=d(),de=o("p"),st=n("Pour pousser notre mod\xE8le vers le "),Ht=o("em"),oe=n("Hub"),Eo=n(", nous aurons besoin de cr\xE9er un objet "),tt=o("code"),ko=n("Repository"),yo=n(" dans un dossier de travail. Tout d\u2019abord, connectez-vous au "),nt=o("em"),Co=n("Hub"),Po=n(", si vous n\u2019\xEAtes pas d\xE9j\xE0 connect\xE9. Nous d\xE9terminerons le nom du d\xE9p\xF4t \xE0 partir de l\u2019identifiant du mod\xE8le que nous voulons donner \xE0 notre mod\xE8le (n\u2019h\xE9sitez pas \xE0 remplacer le "),at=o("code"),Ao=n("repo_name"),So=n(" par votre propre choix. Il doit juste contenir votre nom d\u2019utilisateur, ce que fait la fonction "),ot=o("code"),Mo=n("get_full_repo_name()"),zo=n(") :"),Rt=d(),w(rt.$$.fragment),la=d(),w(ps.$$.fragment),ia=d(),Ut=o("p"),ua=n("Ensuite, nous pouvons cloner ce d\xE9p\xF4t dans un dossier local. S\u2019il existe d\xE9j\xE0, ce dossier local doit \xEAtre un clone du d\xE9p\xF4t avec lequel nous travaillons :"),ds=d(),w(lt.$$.fragment),Qt=d(),Ge=o("p"),Do=n("Nous pouvons maintenant t\xE9l\xE9charger tout ce que nous sauvegardons dans "),Gt=o("code"),it=n("output_dir"),pa=n(" en appelant la m\xE9thode "),cs=o("code"),da=n("repo.push_to_hub()"),Wt=n(". Cela nous aidera \xE0 t\xE9l\xE9charger les mod\xE8les interm\xE9diaires \xE0 la fin de chaque \xE9poque."),ca=d(),We=o("h2"),Ae=o("a"),Jt=o("span"),w(Oe.$$.fragment),ma=d(),Je=o("span"),To=n("Boucle d'entra\xEEnement"),Xt=d(),Kt=o("p"),Lo=n("Nous sommes maintenant pr\xEAts \xE0 \xE9crire la boucle d\u2019entra\xEEnement compl\xE8te. Apr\xE8s avoir d\xE9fini une barre de progression pour suivre l\u2019\xE9volution de l\u2019entra\xEEnement, la boucle comporte trois parties :"),zn=d(),je=o("ul"),As=o("li"),ut=n("l\u2019entra\xEEnement \xE0 proprement dit, qui est l\u2019it\xE9ration classique sur le "),Yt=o("code"),Zt=n("train_dataloader"),No=n(", passage en avant du mod\xE8le, puis passage en arri\xE8re et \xE9tape d\u2019optimisation."),fa=d(),ce=o("li"),Ss=n("l\u2019\xE9valuation, dans laquelle nous rassemblons toutes les valeurs pour "),pt=o("code"),dt=n("start_logits"),Oo=n(" et "),ct=o("code"),Bo=n("end_logits"),_a=n(" avant de les convertir en tableaux NumPy. Une fois la boucle d\u2019\xE9valuation termin\xE9e, nous concat\xE9nons tous les r\xE9sultats. Notez que nous devons tronquer car "),ms=o("code"),ha=n("Accelerator"),Ms=n(" peut avoir ajout\xE9 quelques \xE9chantillons \xE0 la fin pour s\u2019assurer que nous avons le m\xEAme nombre d\u2019exemples dans chaque processus."),Fo=d(),qe=o("li"),Io=n("sauvegarde et t\xE9l\xE9chargement, o\xF9 nous sauvegardons d\u2019abord le mod\xE8le et le "),Dn=o("em"),va=n("tokenizer"),zs=n(", puis appelons "),Tn=o("code"),Ln=n("repo.push_to_hub()"),Vo=n(". Comme nous l\u2019avons fait auparavant, nous utilisons l\u2019argument "),Nn=o("code"),ba=n("blocking=False"),mt=n(" pour dire \xE0 la biblioth\xE8que \u{1F917} "),en=o("em"),ne=n("Hub"),Ho=n(" de pousser dans un processus asynchrone. De cette fa\xE7on, l\u2019entra\xEEnement continue normalement et cette (longue) instruction est ex\xE9cut\xE9e en arri\xE8re-plan."),sn=d(),tn=o("p"),Ro=n("Voici le code complet de la boucle d\u2019entra\xEEnement :"),nn=d(),w(ft.$$.fragment),qa=d(),Xe=o("p"),Uo=n("Au cas o\xF9 ce serait la premi\xE8re fois que vous verriez un mod\xE8le enregistr\xE9 avec \u{1F917} "),On=o("em"),_t=n("Accelerate"),Qo=n(", prenons un moment pour inspecter les trois lignes de code qui l\u2019accompagnent :"),ga=d(),w(fs.$$.fragment),xa=d(),ae=o("p"),Bn=n("La premi\xE8re ligne est explicite : elle indique \xE0 tous les processus d\u2019attendre que tout le monde soit \xE0 ce stade avant de continuer. C\u2019est pour s\u2019assurer que nous avons le m\xEAme mod\xE8le dans chaque processus avant de sauvegarder. Ensuite, nous prenons le "),Fn=o("code"),Go=n("unwrapped_model"),In=n(", qui est le mod\xE8le de base que nous avons d\xE9fini. La m\xE9thode "),Vn=o("code"),Wo=n("accelerator.prepare()"),$a=n(" modifie le mod\xE8le pour qu\u2019il fonctionne dans l\u2019entra\xEEnement distribu\xE9. Donc il n\u2019aura plus la m\xE9thode "),_s=o("code"),wa=n("save_pretrained()"),ht=n(" car la m\xE9thode "),an=o("code"),Ke=n("accelerator.unwrap_model()"),Jo=n(" annule cette \xE9tape. Enfin, nous appelons "),vt=o("code"),Xo=n("save_pretrained()"),Ko=n(" mais nous disons \xE0 cette m\xE9thode d\u2019utiliser "),bt=o("code"),Yo=n("accelerator.save()"),Zo=n(" au lieu de "),on=o("code"),qt=n("torch.save()"),ja=n("."),gt=d(),Ye=o("p"),Ea=n("Une fois ceci fait, vous devriez avoir un mod\xE8le qui produit des r\xE9sultats assez similaires \xE0 celui entra\xEEn\xE9 avec "),hs=o("code"),ka=n("Trainer"),xt=n(". Vous pouvez v\xE9rifier le mod\xE8le que nous avons entra\xEEn\xE9 en utilisant ce code \xE0 "),Ds=o("a"),Se=o("em"),er=n("huggingface-course/bert-finetuned-squad-accelerate"),Hn=n(". Et si vous voulez tester des modifications de la boucle d\u2019entra\xEEnement, vous pouvez les impl\xE9menter directement en modifiant le code ci-dessus !"),this.h()},l(m){p=r(m,"P",{});var B=l(p);b=a(B,"Si vous voulez plonger un peu plus profond\xE9ment dans la boucle d\u2019entra\xEEnement, nous allons maintenant vous montrer comment faire la m\xEAme chose en utilisant \u{1F917} "),f=r(B,"EM",{});var il=l(f);y=a(il,"Accelerate"),il.forEach(t),S=a(B,"."),B.forEach(t),q=c(m),g=r(m,"H2",{class:!0});var Ca=l(g);x=r(Ca,"A",{id:!0,class:!0,href:!0});var sr=l(x);_=r(sr,"SPAN",{});var Ts=l(_);j(M.$$.fragment,Ts),Ts.forEach(t),sr.forEach(t),$=c(Ca),A=r(Ca,"SPAN",{});var rn=l(A);T=a(rn,"Une boucle d'entra\xEEnement personnalis\xE9e"),rn.forEach(t),Ca.forEach(t),I=c(m),D=r(m,"P",{});var Rn=l(D);P=a(Rn,"Jetons maintenant un coup d\u2019\u0153il \xE0 la boucle d\u2019entra\xEEnement compl\xE8te, afin que vous puissiez facilement personnaliser les parties dont vous avez besoin. Elle ressemblera beaucoup \xE0 la boucle d\u2019entra\xEEnement du "),V=r(Rn,"A",{href:!0});var ul=l(V);L=a(ul,"chapitre 3"),ul.forEach(t),O=a(Rn,", \xE0 l\u2019exception de la boucle d\u2019\xE9valuation. Nous serons en mesure d\u2019\xE9valuer le mod\xE8le r\xE9guli\xE8rement puisque nous ne sommes plus contraints par la classe "),N=r(Rn,"CODE",{});var ln=l(N);R=a(ln,"Trainer"),ln.forEach(t),Q=a(Rn,"."),Rn.forEach(t),J=c(m),H=r(m,"H3",{class:!0});var tr=l(H);G=r(tr,"A",{id:!0,class:!0,href:!0});var nr=l(G);ee=r(nr,"SPAN",{});var vs=l(ee);j(Z.$$.fragment,vs),vs.forEach(t),nr.forEach(t),F=c(tr),X=r(tr,"SPAN",{});var pl=l(X);re=a(pl,"Pr\xE9parer tout pour l'entra\xEEnement"),pl.forEach(t),tr.forEach(t),se=c(m),K=r(m,"P",{});var ge=l(K);le=a(ge,"Tout d\u2019abord, nous devons construire le "),Ce=r(ge,"CODE",{});var dl=l(Ce);ye=a(dl,"DataLoader"),dl.forEach(t),ie=a(ge,"s \xE0 partir de nos jeux de donn\xE9es. Nous d\xE9finissons le format de ces jeux de donn\xE9es \xE0 "),gs=r(ge,"CODE",{});var cl=l(gs);Fe=a(cl,'"torch"'),cl.forEach(t),ue=a(ge," et supprimons les colonnes dans le jeu de validation qui ne sont pas utilis\xE9es par le mod\xE8le. Ensuite, nous pouvons utiliser le "),xs=r(ge,"CODE",{});var Pa=l(xs);rs=a(Pa,"default_data_collator"),Pa.forEach(t),W=a(ge," fourni par \u{1F917} "),Y=r(ge,"EM",{});var ml=l(Y);$s=a(ml,"Transformers"),ml.forEach(t),Bt=a(ge," comme "),ws=r(ge,"CODE",{});var fl=l(ws);Ie=a(fl,"collate_fn"),fl.forEach(t),Ve=a(ge," et m\xE9langer l\u2019ensemble d\u2019entra\xEEnement mais pas celui de validation :"),ge.forEach(t),js=c(m),j(he.$$.fragment,m),He=c(m),pe=r(m,"P",{});var Un=l(pe);ve=a(Un,"Ensuite, nous r\xE9instantifions notre mod\xE8le afin de nous assurer que nous ne poursuivons pas le "),Re=r(Un,"EM",{});var $t=l(Re);Ue=a($t,"finetuning"),$t.forEach(t),mo=a(Un," pr\xE9c\xE9dent et que nous repartons du mod\xE8le BERT pr\xE9-entra\xEEn\xE9 :"),Un.forEach(t),Ft=c(m),j(Js.$$.fragment,m),jn=c(m),be=r(m,"P",{});var Aa=l(be);fo=a(Aa,"Ensuite, nous aurons besoin d\u2019un optimiseur. Comme d\u2019habitude, nous utilisons le classique "),ls=r(Aa,"CODE",{});var Sa=l(ls);_o=a(Sa,"AdamW"),Sa.forEach(t),ho=a(Aa,", qui est comme Adam mais avec une correction dans la fa\xE7on dont le taux de d\xE9croissance des poids est appliqu\xE9 :"),Aa.forEach(t),Es=c(m),j(Xs.$$.fragment,m),sa=c(m),te=r(m,"P",{});var fe=l(te);is=a(fe,"Une fois que nous avons tous ces objets, nous pouvons les envoyer \xE0 la m\xE9thode "),Qe=r(fe,"CODE",{});var _l=l(Qe);En=a(_l,"accelerator.prepare()"),_l.forEach(t),Ks=a(fe,". Rappelez-vous que si vous voulez entra\xEEner sur des TPUs dans un "),kn=r(fe,"EM",{});var ar=l(kn);yn=a(ar,"notebook"),ar.forEach(t),vo=a(fe," Colab, vous devrez d\xE9placer tout ce code dans une fonction d\u2019entra\xEEnement, et qui ne devrait pas ex\xE9cuter une cellule qui instancie un "),It=r(fe,"CODE",{});var Be=l(It);ks=a(Be,"Accelerator"),Be.forEach(t),bo=a(fe,". Nous pouvons forcer l\u2019entra\xEEnement en pr\xE9cision mixte en passant l\u2019argument "),Ys=r(fe,"CODE",{});var Qn=l(Ys);qo=a(Qn,"fp16=True"),Qn.forEach(t),go=a(fe," \xE0 "),Vt=r(fe,"CODE",{});var Ma=l(Vt);Zs=a(Ma,"Accelerator"),Ma.forEach(t),ta=a(fe," (ou, si vous ex\xE9cutez le code comme un script, assurez-vous de remplir la \u{1F917} "),ys=r(fe,"EM",{});var hl=l(ys);xo=a(hl,"Accelerate"),hl.forEach(t),na=c(fe),us=r(fe,"CODE",{});var vl=l(us);aa=a(vl,"config"),vl.forEach(t),et=a(fe," de mani\xE8re appropri\xE9e)."),fe.forEach(t),Cn=c(m),j(me.$$.fragment,m),oa=c(m),Pe=r(m,"P",{});var un=l(Pe);$o=a(un,"Comme vous devez le savoir depuis les sections pr\xE9c\xE9dentes, nous ne pouvons utiliser la longueur de "),Pn=r(un,"CODE",{});var Gn=l(Pn);An=a(Gn,"train_dataloader"),Gn.forEach(t),wo=a(un," pour calculer le nombre d\u2019\xE9tapes d\u2019entra\xEEnement qu\u2019apr\xE8s qu\u2019il soit pass\xE9 par la m\xE9thode "),Sn=r(un,"CODE",{});var za=l(Sn);Mn=a(za,"accelerator.prepare()"),za.forEach(t),jo=a(un,". Nous utilisons le m\xEAme programme lin\xE9aire que dans les sections pr\xE9c\xE9dentes :"),un.forEach(t),ra=c(m),j(Cs.$$.fragment,m),Ps=c(m),de=r(m,"P",{});var Me=l(de);st=a(Me,"Pour pousser notre mod\xE8le vers le "),Ht=r(Me,"EM",{});var bl=l(Ht);oe=a(bl,"Hub"),bl.forEach(t),Eo=a(Me,", nous aurons besoin de cr\xE9er un objet "),tt=r(Me,"CODE",{});var ql=l(tt);ko=a(ql,"Repository"),ql.forEach(t),yo=a(Me," dans un dossier de travail. Tout d\u2019abord, connectez-vous au "),nt=r(Me,"EM",{});var wt=l(nt);Co=a(wt,"Hub"),wt.forEach(t),Po=a(Me,", si vous n\u2019\xEAtes pas d\xE9j\xE0 connect\xE9. Nous d\xE9terminerons le nom du d\xE9p\xF4t \xE0 partir de l\u2019identifiant du mod\xE8le que nous voulons donner \xE0 notre mod\xE8le (n\u2019h\xE9sitez pas \xE0 remplacer le "),at=r(Me,"CODE",{});var Da=l(at);Ao=a(Da,"repo_name"),Da.forEach(t),So=a(Me," par votre propre choix. Il doit juste contenir votre nom d\u2019utilisateur, ce que fait la fonction "),ot=r(Me,"CODE",{});var gl=l(ot);Mo=a(gl,"get_full_repo_name()"),gl.forEach(t),zo=a(Me,") :"),Me.forEach(t),Rt=c(m),j(rt.$$.fragment,m),la=c(m),j(ps.$$.fragment,m),ia=c(m),Ut=r(m,"P",{});var xl=l(Ut);ua=a(xl,"Ensuite, nous pouvons cloner ce d\xE9p\xF4t dans un dossier local. S\u2019il existe d\xE9j\xE0, ce dossier local doit \xEAtre un clone du d\xE9p\xF4t avec lequel nous travaillons :"),xl.forEach(t),ds=c(m),j(lt.$$.fragment,m),Qt=c(m),Ge=r(m,"P",{});var Ls=l(Ge);Do=a(Ls,"Nous pouvons maintenant t\xE9l\xE9charger tout ce que nous sauvegardons dans "),Gt=r(Ls,"CODE",{});var $l=l(Gt);it=a($l,"output_dir"),$l.forEach(t),pa=a(Ls," en appelant la m\xE9thode "),cs=r(Ls,"CODE",{});var wl=l(cs);da=a(wl,"repo.push_to_hub()"),wl.forEach(t),Wt=a(Ls,". Cela nous aidera \xE0 t\xE9l\xE9charger les mod\xE8les interm\xE9diaires \xE0 la fin de chaque \xE9poque."),Ls.forEach(t),ca=c(m),We=r(m,"H2",{class:!0});var Ta=l(We);Ae=r(Ta,"A",{id:!0,class:!0,href:!0});var bs=l(Ae);Jt=r(bs,"SPAN",{});var La=l(Jt);j(Oe.$$.fragment,La),La.forEach(t),bs.forEach(t),ma=c(Ta),Je=r(Ta,"SPAN",{});var jl=l(Je);To=a(jl,"Boucle d'entra\xEEnement"),jl.forEach(t),Ta.forEach(t),Xt=c(m),Kt=r(m,"P",{});var El=l(Kt);Lo=a(El,"Nous sommes maintenant pr\xEAts \xE0 \xE9crire la boucle d\u2019entra\xEEnement compl\xE8te. Apr\xE8s avoir d\xE9fini une barre de progression pour suivre l\u2019\xE9volution de l\u2019entra\xEEnement, la boucle comporte trois parties :"),El.forEach(t),zn=c(m),je=r(m,"UL",{});var Ns=l(je);As=r(Ns,"LI",{});var Na=l(As);ut=a(Na,"l\u2019entra\xEEnement \xE0 proprement dit, qui est l\u2019it\xE9ration classique sur le "),Yt=r(Na,"CODE",{});var kl=l(Yt);Zt=a(kl,"train_dataloader"),kl.forEach(t),No=a(Na,", passage en avant du mod\xE8le, puis passage en arri\xE8re et \xE9tape d\u2019optimisation."),Na.forEach(t),fa=c(Ns),ce=r(Ns,"LI",{});var Ze=l(ce);Ss=a(Ze,"l\u2019\xE9valuation, dans laquelle nous rassemblons toutes les valeurs pour "),pt=r(Ze,"CODE",{});var yl=l(pt);dt=a(yl,"start_logits"),yl.forEach(t),Oo=a(Ze," et "),ct=r(Ze,"CODE",{});var Cl=l(ct);Bo=a(Cl,"end_logits"),Cl.forEach(t),_a=a(Ze," avant de les convertir en tableaux NumPy. Une fois la boucle d\u2019\xE9valuation termin\xE9e, nous concat\xE9nons tous les r\xE9sultats. Notez que nous devons tronquer car "),ms=r(Ze,"CODE",{});var or=l(ms);ha=a(or,"Accelerator"),or.forEach(t),Ms=a(Ze," peut avoir ajout\xE9 quelques \xE9chantillons \xE0 la fin pour s\u2019assurer que nous avons le m\xEAme nombre d\u2019exemples dans chaque processus."),Ze.forEach(t),Fo=c(Ns),qe=r(Ns,"LI",{});var Ee=l(qe);Io=a(Ee,"sauvegarde et t\xE9l\xE9chargement, o\xF9 nous sauvegardons d\u2019abord le mod\xE8le et le "),Dn=r(Ee,"EM",{});var rr=l(Dn);va=a(rr,"tokenizer"),rr.forEach(t),zs=a(Ee,", puis appelons "),Tn=r(Ee,"CODE",{});var pn=l(Tn);Ln=a(pn,"repo.push_to_hub()"),pn.forEach(t),Vo=a(Ee,". Comme nous l\u2019avons fait auparavant, nous utilisons l\u2019argument "),Nn=r(Ee,"CODE",{});var lr=l(Nn);ba=a(lr,"blocking=False"),lr.forEach(t),mt=a(Ee," pour dire \xE0 la biblioth\xE8que \u{1F917} "),en=r(Ee,"EM",{});var xe=l(en);ne=a(xe,"Hub"),xe.forEach(t),Ho=a(Ee," de pousser dans un processus asynchrone. De cette fa\xE7on, l\u2019entra\xEEnement continue normalement et cette (longue) instruction est ex\xE9cut\xE9e en arri\xE8re-plan."),Ee.forEach(t),Ns.forEach(t),sn=c(m),tn=r(m,"P",{});var Pl=l(tn);Ro=a(Pl,"Voici le code complet de la boucle d\u2019entra\xEEnement :"),Pl.forEach(t),nn=c(m),j(ft.$$.fragment,m),qa=c(m),Xe=r(m,"P",{});var dn=l(Xe);Uo=a(dn,"Au cas o\xF9 ce serait la premi\xE8re fois que vous verriez un mod\xE8le enregistr\xE9 avec \u{1F917} "),On=r(dn,"EM",{});var Al=l(On);_t=a(Al,"Accelerate"),Al.forEach(t),Qo=a(dn,", prenons un moment pour inspecter les trois lignes de code qui l\u2019accompagnent :"),dn.forEach(t),ga=c(m),j(fs.$$.fragment,m),xa=c(m),ae=r(m,"P",{});var _e=l(ae);Bn=a(_e,"La premi\xE8re ligne est explicite : elle indique \xE0 tous les processus d\u2019attendre que tout le monde soit \xE0 ce stade avant de continuer. C\u2019est pour s\u2019assurer que nous avons le m\xEAme mod\xE8le dans chaque processus avant de sauvegarder. Ensuite, nous prenons le "),Fn=r(_e,"CODE",{});var Oa=l(Fn);Go=a(Oa,"unwrapped_model"),Oa.forEach(t),In=a(_e,", qui est le mod\xE8le de base que nous avons d\xE9fini. La m\xE9thode "),Vn=r(_e,"CODE",{});var Sl=l(Vn);Wo=a(Sl,"accelerator.prepare()"),Sl.forEach(t),$a=a(_e," modifie le mod\xE8le pour qu\u2019il fonctionne dans l\u2019entra\xEEnement distribu\xE9. Donc il n\u2019aura plus la m\xE9thode "),_s=r(_e,"CODE",{});var Ml=l(_s);wa=a(Ml,"save_pretrained()"),Ml.forEach(t),ht=a(_e," car la m\xE9thode "),an=r(_e,"CODE",{});var Ba=l(an);Ke=a(Ba,"accelerator.unwrap_model()"),Ba.forEach(t),Jo=a(_e," annule cette \xE9tape. Enfin, nous appelons "),vt=r(_e,"CODE",{});var zl=l(vt);Xo=a(zl,"save_pretrained()"),zl.forEach(t),Ko=a(_e," mais nous disons \xE0 cette m\xE9thode d\u2019utiliser "),bt=r(_e,"CODE",{});var Dl=l(bt);Yo=a(Dl,"accelerator.save()"),Dl.forEach(t),Zo=a(_e," au lieu de "),on=r(_e,"CODE",{});var Fa=l(on);qt=a(Fa,"torch.save()"),Fa.forEach(t),ja=a(_e,"."),_e.forEach(t),gt=c(m),Ye=r(m,"P",{});var cn=l(Ye);Ea=a(cn,"Une fois ceci fait, vous devriez avoir un mod\xE8le qui produit des r\xE9sultats assez similaires \xE0 celui entra\xEEn\xE9 avec "),hs=r(cn,"CODE",{});var Tl=l(hs);ka=a(Tl,"Trainer"),Tl.forEach(t),xt=a(cn,". Vous pouvez v\xE9rifier le mod\xE8le que nous avons entra\xEEn\xE9 en utilisant ce code \xE0 "),Ds=r(cn,"A",{href:!0,rel:!0});var Ia=l(Ds);Se=r(Ia,"EM",{});var Ll=l(Se);er=a(Ll,"huggingface-course/bert-finetuned-squad-accelerate"),Ll.forEach(t),Ia.forEach(t),Hn=a(cn,". Et si vous voulez tester des modifications de la boucle d\u2019entra\xEEnement, vous pouvez les impl\xE9menter directement en modifiant le code ci-dessus !"),cn.forEach(t),this.h()},h(){C(x,"id","une-boucle-dentranement-personnalise"),C(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(x,"href","#une-boucle-dentranement-personnalise"),C(g,"class","relative group"),C(V,"href","/course/fr/chapter3/4"),C(G,"id","prparer-tout-pour-lentranement"),C(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(G,"href","#prparer-tout-pour-lentranement"),C(H,"class","relative group"),C(Ae,"id","boucle-dentranement"),C(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(Ae,"href","#boucle-dentranement"),C(We,"class","relative group"),C(Ds,"href","https://huggingface.co/huggingface-course/bert-finetuned-squad-accelerate"),C(Ds,"rel","nofollow")},m(m,B){i(m,p,B),s(p,b),s(p,f),s(f,y),s(p,S),i(m,q,B),i(m,g,B),s(g,x),s(x,_),E(M,_,null),s(g,$),s(g,A),s(A,T),i(m,I,B),i(m,D,B),s(D,P),s(D,V),s(V,L),s(D,O),s(D,N),s(N,R),s(D,Q),i(m,J,B),i(m,H,B),s(H,G),s(G,ee),E(Z,ee,null),s(H,F),s(H,X),s(X,re),i(m,se,B),i(m,K,B),s(K,le),s(K,Ce),s(Ce,ye),s(K,ie),s(K,gs),s(gs,Fe),s(K,ue),s(K,xs),s(xs,rs),s(K,W),s(K,Y),s(Y,$s),s(K,Bt),s(K,ws),s(ws,Ie),s(K,Ve),i(m,js,B),E(he,m,B),i(m,He,B),i(m,pe,B),s(pe,ve),s(pe,Re),s(Re,Ue),s(pe,mo),i(m,Ft,B),E(Js,m,B),i(m,jn,B),i(m,be,B),s(be,fo),s(be,ls),s(ls,_o),s(be,ho),i(m,Es,B),E(Xs,m,B),i(m,sa,B),i(m,te,B),s(te,is),s(te,Qe),s(Qe,En),s(te,Ks),s(te,kn),s(kn,yn),s(te,vo),s(te,It),s(It,ks),s(te,bo),s(te,Ys),s(Ys,qo),s(te,go),s(te,Vt),s(Vt,Zs),s(te,ta),s(te,ys),s(ys,xo),s(te,na),s(te,us),s(us,aa),s(te,et),i(m,Cn,B),E(me,m,B),i(m,oa,B),i(m,Pe,B),s(Pe,$o),s(Pe,Pn),s(Pn,An),s(Pe,wo),s(Pe,Sn),s(Sn,Mn),s(Pe,jo),i(m,ra,B),E(Cs,m,B),i(m,Ps,B),i(m,de,B),s(de,st),s(de,Ht),s(Ht,oe),s(de,Eo),s(de,tt),s(tt,ko),s(de,yo),s(de,nt),s(nt,Co),s(de,Po),s(de,at),s(at,Ao),s(de,So),s(de,ot),s(ot,Mo),s(de,zo),i(m,Rt,B),E(rt,m,B),i(m,la,B),E(ps,m,B),i(m,ia,B),i(m,Ut,B),s(Ut,ua),i(m,ds,B),E(lt,m,B),i(m,Qt,B),i(m,Ge,B),s(Ge,Do),s(Ge,Gt),s(Gt,it),s(Ge,pa),s(Ge,cs),s(cs,da),s(Ge,Wt),i(m,ca,B),i(m,We,B),s(We,Ae),s(Ae,Jt),E(Oe,Jt,null),s(We,ma),s(We,Je),s(Je,To),i(m,Xt,B),i(m,Kt,B),s(Kt,Lo),i(m,zn,B),i(m,je,B),s(je,As),s(As,ut),s(As,Yt),s(Yt,Zt),s(As,No),s(je,fa),s(je,ce),s(ce,Ss),s(ce,pt),s(pt,dt),s(ce,Oo),s(ce,ct),s(ct,Bo),s(ce,_a),s(ce,ms),s(ms,ha),s(ce,Ms),s(je,Fo),s(je,qe),s(qe,Io),s(qe,Dn),s(Dn,va),s(qe,zs),s(qe,Tn),s(Tn,Ln),s(qe,Vo),s(qe,Nn),s(Nn,ba),s(qe,mt),s(qe,en),s(en,ne),s(qe,Ho),i(m,sn,B),i(m,tn,B),s(tn,Ro),i(m,nn,B),E(ft,m,B),i(m,qa,B),i(m,Xe,B),s(Xe,Uo),s(Xe,On),s(On,_t),s(Xe,Qo),i(m,ga,B),E(fs,m,B),i(m,xa,B),i(m,ae,B),s(ae,Bn),s(ae,Fn),s(Fn,Go),s(ae,In),s(ae,Vn),s(Vn,Wo),s(ae,$a),s(ae,_s),s(_s,wa),s(ae,ht),s(ae,an),s(an,Ke),s(ae,Jo),s(ae,vt),s(vt,Xo),s(ae,Ko),s(ae,bt),s(bt,Yo),s(ae,Zo),s(ae,on),s(on,qt),s(ae,ja),i(m,gt,B),i(m,Ye,B),s(Ye,Ea),s(Ye,hs),s(hs,ka),s(Ye,xt),s(Ye,Ds),s(Ds,Se),s(Se,er),s(Ye,Hn),ya=!0},i(m){ya||(h(M.$$.fragment,m),h(Z.$$.fragment,m),h(he.$$.fragment,m),h(Js.$$.fragment,m),h(Xs.$$.fragment,m),h(me.$$.fragment,m),h(Cs.$$.fragment,m),h(rt.$$.fragment,m),h(ps.$$.fragment,m),h(lt.$$.fragment,m),h(Oe.$$.fragment,m),h(ft.$$.fragment,m),h(fs.$$.fragment,m),ya=!0)},o(m){v(M.$$.fragment,m),v(Z.$$.fragment,m),v(he.$$.fragment,m),v(Js.$$.fragment,m),v(Xs.$$.fragment,m),v(me.$$.fragment,m),v(Cs.$$.fragment,m),v(rt.$$.fragment,m),v(ps.$$.fragment,m),v(lt.$$.fragment,m),v(Oe.$$.fragment,m),v(ft.$$.fragment,m),v(fs.$$.fragment,m),ya=!1},d(m){m&&t(p),m&&t(q),m&&t(g),k(M),m&&t(I),m&&t(D),m&&t(J),m&&t(H),k(Z),m&&t(se),m&&t(K),m&&t(js),k(he,m),m&&t(He),m&&t(pe),m&&t(Ft),k(Js,m),m&&t(jn),m&&t(be),m&&t(Es),k(Xs,m),m&&t(sa),m&&t(te),m&&t(Cn),k(me,m),m&&t(oa),m&&t(Pe),m&&t(ra),k(Cs,m),m&&t(Ps),m&&t(de),m&&t(Rt),k(rt,m),m&&t(la),k(ps,m),m&&t(ia),m&&t(Ut),m&&t(ds),k(lt,m),m&&t(Qt),m&&t(Ge),m&&t(ca),m&&t(We),k(Oe),m&&t(Xt),m&&t(Kt),m&&t(zn),m&&t(je),m&&t(sn),m&&t(tn),m&&t(nn),k(ft,m),m&&t(qa),m&&t(Xe),m&&t(ga),k(fs,m),m&&t(xa),m&&t(ae),m&&t(gt),m&&t(Ye)}}}function Rg(U){let p,b,f,y,S,q,g,x,_,M,$,A,T,I,D,P,V,L,O,N,R,Q,J,H,G,ee,Z,F,X,re,se,K,le,Ce,ye,ie,gs,Fe,ue,xs,rs,W,Y,$s,Bt,ws,Ie,Ve,js,he,He,pe,ve,Re,Ue,mo,Ft,Js,jn,be,fo,ls,_o,ho,Es,Xs,sa,te,is,Qe,En,Ks,kn,yn,vo,It,ks,bo,Ys,qo,go,Vt,Zs,ta,ys,xo,na,us,aa,et,Cn,me,oa,Pe,$o,Pn,An,wo,Sn,Mn,jo,ra,Cs,Ps,de,st,Ht,oe,Eo,tt,ko,yo,nt,Co,Po,at,Ao,So,ot,Mo,zo,Rt,rt,la,ps,ia,Ut,ua,ds,lt,Qt,Ge,Do,Gt,it,pa,cs,da,Wt,ca,We,Ae,Jt,Oe,ma,Je,To,Xt,Kt,Lo,zn,je,As,ut,Yt,Zt,No,fa,ce,Ss,pt,dt,Oo,ct,Bo,_a,ms,ha,Ms,Fo,qe,Io,Dn,va,zs,Tn,Ln,Vo,Nn,ba,mt,en,ne,Ho,sn,tn,Ro,nn,ft,qa,Xe,Uo,On,_t,Qo,ga,fs,xa,ae,Bn,Fn,Go,In,Vn,Wo,$a,_s,wa,ht,an,Ke,Jo,vt,Xo,Ko,bt,Yo,Zo,on,qt,ja,gt,Ye,Ea,hs,ka,xt,Ds,Se,er,Hn,ya,m,B,il,Ca,sr,Ts,rn,Rn,ul,ln,tr,nr,vs,pl,ge,dl,cl,Pa,ml,fl,Un,$t,Aa,Sa,fe,_l,ar,Be,Qn,Ma,hl,vl,un,Gn,za,Me,bl,ql,wt,Da,gl,xl,Ls,$l,wl,Ta,bs,La,jl,El,Ns,Na,kl,Ze,yl,Cl,or,Ee,rr,pn,lr,xe,Pl,dn,Al,_e,Oa,Sl,Ml,Ba,zl,Dl,Fa,cn,Tl,Ia,Ll,yc,_p,ze,Cc,Si,Pc,Ac,Mi,Sc,Mc,Nl,zc,Dc,zi,Tc,Lc,Di,Nc,Oc,hp,ir,vp,ur,bp,De,Bc,Ti,Fc,Ic,Li,Vc,Hc,Ni,Rc,Uc,Oi,Qc,Gc,Bi,Wc,Jc,qp,pr,gp,dr,xp,Ol,Xc,$p,cr,wp,mr,jp,Bl,Kc,Ep,Fl,Yc,kp,Va,Il,Fi,Zc,em,sm,es,Ii,tm,nm,Vi,am,om,Hi,rm,lm,Ri,im,um,Ui,pm,dm,yp,Te,cm,Qi,mm,fm,Gi,_m,hm,Wi,vm,bm,Ji,qm,gm,Xi,xm,$m,Cp,Le,wm,Ki,jm,Em,Yi,km,ym,Zi,Cm,Pm,eu,Am,Sm,su,Mm,zm,Pp,fr,Ap,_r,Sp,mn,Dm,tu,Tm,Lm,nu,Nm,Om,Mp,hr,zp,vr,Dp,Ha,Bm,au,Fm,Im,Tp,br,Lp,qr,Np,Vl,Vm,Op,Ra,Bp,Hl,Hm,Fp,gr,Ip,Rl,Rm,Vp,fn,Um,ou,Qm,Gm,ru,Wm,Jm,Hp,xr,Rp,$r,Up,Ul,Xm,Qp,Wn,Ua,lu,wr,Km,iu,Ym,Gp,Qa,Zm,uu,ef,sf,Wp,ke,tf,pu,nf,af,du,of,rf,cu,lf,uf,mu,pf,df,fu,cf,mf,_u,ff,_f,Jp,jr,Xp,Ql,hf,Kp,Er,Yp,kr,Zp,Gl,vf,ed,Wl,bf,sd,jt,Et,Jl,Jn,Ga,hu,yr,qf,vu,gf,td,kt,yt,Xl,_n,xf,bu,$f,wf,Kl,jf,Ef,nd,Os,Cr,kf,qu,yf,Cf,Pf,gu,Af,Sf,Pr,Mf,xu,zf,Df,Tf,Xn,Lf,$u,Nf,Of,wu,Bf,Ff,ad,Bs,If,ju,Vf,Hf,Eu,Rf,Uf,ku,Qf,Gf,od,Fs,Wf,yu,Jf,Xf,Cu,Kf,Yf,Pu,Zf,e_,rd,Ar,ld,Wa,s_,Au,t_,n_,id,Sr,ud,Ja,a_,Su,o_,r_,pd,Ct,Pt,Yl,ss,l_,Mu,i_,u_,zu,p_,d_,Du,c_,m_,Tu,f_,__,dd,Mr,cd,Xa,h_,Lu,v_,b_,md,hn,Nu,q_,g_,Ou,x_,$_,zr,w_,Bu,j_,E_,fd,Zl,k_,_d,Dr,hd,Ka,y_,Fu,C_,P_,vd,Tr,bd,ei,A_,qd,Lr,gd,si,S_,xd,Nr,$d,Or,wd,ti,M_,jd,Br,Ed,Fr,kd,vn,z_,Ir,D_,T_,Iu,L_,N_,yd,ni,Vr,Cd,ai,O_,Pd,Hr,Ad,Rr,Sd,Ya,B_,Vu,F_,I_,Md,Kn,Za,Hu,Ur,V_,oi,Ru,H_,R_,zd,At,St,ri,eo,U_,Uu,Q_,G_,Dd,Is,W_,Qu,J_,X_,Gu,K_,Y_,Wu,Z_,eh,Td,Qr,Ld,so,sh,Ju,th,nh,Nd,Gr,Od,Mt,zt,li,ts,ah,Xu,oh,rh,Ku,lh,ih,Yu,uh,ph,Zu,dh,ch,Bd,Dt,Tt,ii,bn,mh,ep,fh,_h,sp,hh,vh,Fd,Lt,Nt,ui,Wr,Id,pi,bh,Vd,di,Vs,qh,tp,gh,xh,np,$h,wh,ap,jh,Eh,Hd,to,Rd,ci,Yn,no,op,Jr,kh,mi,yh,rp,Ch,Ud,ns,Ph,lp,Ah,Sh,ip,Mh,zh,up,Dh,Th,pp,Lh,Nh,Qd,Xr,Gd,Kr,Wd,fi,Oh,Jd;f=new xg({props:{fw:U[0]}}),x=new qs({});const Rh=[wg,$g],Yr=[];function Uh(e,u){return e[0]==="pt"?0:1}T=Uh(U),I=Yr[T]=Rh[T](U),Q=new kc({props:{id:"ajPx5LwJD-I"}}),he=new Ec({props:{$$slots:{default:[jg]},$$scope:{ctx:U}}}),Ue=new qs({}),Ks=new qs({}),Zs=new z({props:{code:`from datasets import load_dataset

raw_datasets = load_dataset("squad")`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

raw_datasets = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)`}}),us=new z({props:{code:"raw_datasets",highlighted:"raw_datasets"}}),et=new z({props:{code:`DatasetDict({
    train: Dataset({
        features: ['id', 'title', 'context', 'question', 'answers'],
        num_rows: 87599
    })
    validation: Dataset({
        features: ['id', 'title', 'context', 'question', 'answers'],
        num_rows: 10570
    })
})`,highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),Ps=new z({props:{code:`print("Context: ", raw_datasets["train"][0]["context"])
print("Question: ", raw_datasets["train"][0]["question"])
print("Answer: ", raw_datasets["train"][0]["answers"])`,highlighted:`<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Context: &quot;</span>, raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;context&quot;</span>])
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Question: &quot;</span>, raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;question&quot;</span>])
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Answer: &quot;</span>, raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;answers&quot;</span>])`}}),st=new z({props:{code:`Context: 'Architecturally, the school has a Catholic character. Atop the Main Building\\'s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend "Venite Ad Me Omnes". Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive (and in a direct line that connects through 3 statues and the Gold Dome), is a simple, modern stone statue of Mary.'
# Sur le plan architectural, l'\xE9cole a un caract\xE8re catholique. Au sommet du d\xF4me dor\xE9 du b\xE2timent principal se trouve une statue dor\xE9e de la Vierge Marie. Imm\xE9diatement devant le b\xE2timent principal et face \xE0 lui, se trouve une statue en cuivre du Christ, les bras lev\xE9s, avec la l\xE9gende "Venite Ad Me Omnes". \xC0 c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s'agit d'une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette Soubirous en 1858. Au bout de l'all\xE9e principale (et dans une ligne directe qui passe par 3 statues et le D\xF4me d'or), se trouve une statue de pierre simple et moderne de Marie'.
Question: 'To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France?' 
# A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes, en France ?
Answer: {'text': ['Saint Bernadette Soubirous'], 'answer_start': [515]}`,highlighted:`Context: <span class="hljs-string">&#x27;Architecturally, the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend &quot;Venite Ad Me Omnes&quot;. Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive (and in a direct line that connects through 3 statues and the Gold Dome), is a simple, modern stone statue of Mary.&#x27;</span>
<span class="hljs-comment"># Sur le plan architectural, l&#x27;\xE9cole a un caract\xE8re catholique. Au sommet du d\xF4me dor\xE9 du b\xE2timent principal se trouve une statue dor\xE9e de la Vierge Marie. Imm\xE9diatement devant le b\xE2timent principal et face \xE0 lui, se trouve une statue en cuivre du Christ, les bras lev\xE9s, avec la l\xE9gende &quot;Venite Ad Me Omnes&quot;. \xC0 c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s&#x27;agit d&#x27;une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette Soubirous en 1858. Au bout de l&#x27;all\xE9e principale (et dans une ligne directe qui passe par 3 statues et le D\xF4me d&#x27;or), se trouve une statue de pierre simple et moderne de Marie&#x27;.</span>
Question: <span class="hljs-string">&#x27;To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France?&#x27;</span> 
<span class="hljs-comment"># A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes, en France ?</span>
Answer: {<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Saint Bernadette Soubirous&#x27;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">515</span>]}`}}),it=new z({props:{code:'raw_datasets["train"].filter(lambda x: len(x["answers"]["text"]) != 1)',highlighted:'raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(x[<span class="hljs-string">&quot;answers&quot;</span>][<span class="hljs-string">&quot;text&quot;</span>]) != <span class="hljs-number">1</span>)'}}),cs=new z({props:{code:`Dataset({
    features: ['id', 'title', 'context', 'question', 'answers'],
    num_rows: 0
})`,highlighted:`Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>],
    num_rows: <span class="hljs-number">0</span>
})`}}),Ae=new z({props:{code:`print(raw_datasets["validation"][0]["answers"])
print(raw_datasets["validation"][2]["answers"])`,highlighted:`<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;answers&quot;</span>])
<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&quot;answers&quot;</span>])`}}),Oe=new z({props:{code:`{'text': ['Denver Broncos', 'Denver Broncos', 'Denver Broncos'], 'answer_start': [177, 177, 177]}
{'text': ['Santa Clara, California', "Levi's Stadium", "Levi's Stadium in the San Francisco Bay Area at Santa Clara, California."], 'answer_start': [403, 355, 355]}`,highlighted:`{<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">177</span>, <span class="hljs-number">177</span>, <span class="hljs-number">177</span>]}
{<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Santa Clara, California&#x27;</span>, <span class="hljs-string">&quot;Levi&#x27;s Stadium&quot;</span>, <span class="hljs-string">&quot;Levi&#x27;s Stadium in the San Francisco Bay Area at Santa Clara, California.&quot;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">403</span>, <span class="hljs-number">355</span>, <span class="hljs-number">355</span>]}`}}),je=new z({props:{code:`print(raw_datasets["validation"][2]["context"])
print(raw_datasets["validation"][2]["question"])`,highlighted:`<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&quot;context&quot;</span>])
<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&quot;question&quot;</span>])`}}),ut=new z({props:{code:`'Super Bowl 50 was an American football game to determine the champion of the National Football League (NFL) for the 2015 season. The American Football Conference (AFC) champion Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24\u201310 to earn their third Super Bowl title. The game was played on February 7, 2016, at Levi\\'s Stadium in the San Francisco Bay Area at Santa Clara, California. As this was the 50th Super Bowl, the league emphasized the "golden anniversary" with various gold-themed initiatives, as well as temporarily suspending the tradition of naming each Super Bowl game with Roman numerals (under which the game would have been known as "Super Bowl L"), so that the logo could prominently feature the Arabic numerals 50.'
# Le Super Bowl 50 \xE9tait un match de football am\xE9ricain visant \xE0 d\xE9terminer le champion de la National Football League (NFL) pour la saison 2015. Les Denver Broncos, champions de la Conf\xE9rence de football am\xE9ricain (AFC), ont battu les Carolina Panthers, champions de la Conf\xE9rence nationale de football (NFC), 24 \xE0 10, pour remporter leur troisi\xE8me titre de Super Bowl. Le match s'est d\xE9roul\xE9 le 7 f\xE9vrier 2016 au Levi\\'s Stadium, dans la baie de San Francisco, \xE0 Santa Clara, en Californie. Comme il s'agissait du 50e Super Bowl, la ligue a mis l'accent sur l'" anniversaire dor\xE9 " avec diverses initiatives sur le th\xE8me de l'or, ainsi qu'en suspendant temporairement la tradition de nommer chaque match du Super Bowl avec des chiffres romains (en vertu de laquelle le match aurait \xE9t\xE9 appel\xE9 " Super Bowl L "), afin que le logo puisse mettre en \xE9vidence les chiffres arabes 50.''
'Where did Super Bowl 50 take place?' 
# O\xF9 a eu lieu le Super Bowl 50 ?`,highlighted:`<span class="hljs-string">&#x27;Super Bowl 50 was an American football game to determine the champion of the National Football League (NFL) for the 2015 season. The American Football Conference (AFC) champion Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24\u201310 to earn their third Super Bowl title. The game was played on February 7, 2016, at Levi\\&#x27;s Stadium in the San Francisco Bay Area at Santa Clara, California. As this was the 50th Super Bowl, the league emphasized the &quot;golden anniversary&quot; with various gold-themed initiatives, as well as temporarily suspending the tradition of naming each Super Bowl game with Roman numerals (under which the game would have been known as &quot;Super Bowl L&quot;), so that the logo could prominently feature the Arabic numerals 50.&#x27;</span>
<span class="hljs-comment"># Le Super Bowl 50 \xE9tait un match de football am\xE9ricain visant \xE0 d\xE9terminer le champion de la National Football League (NFL) pour la saison 2015. Les Denver Broncos, champions de la Conf\xE9rence de football am\xE9ricain (AFC), ont battu les Carolina Panthers, champions de la Conf\xE9rence nationale de football (NFC), 24 \xE0 10, pour remporter leur troisi\xE8me titre de Super Bowl. Le match s&#x27;est d\xE9roul\xE9 le 7 f\xE9vrier 2016 au Levi\\&#x27;s Stadium, dans la baie de San Francisco, \xE0 Santa Clara, en Californie. Comme il s&#x27;agissait du 50e Super Bowl, la ligue a mis l&#x27;accent sur l&#x27;&quot; anniversaire dor\xE9 &quot; avec diverses initiatives sur le th\xE8me de l&#x27;or, ainsi qu&#x27;en suspendant temporairement la tradition de nommer chaque match du Super Bowl avec des chiffres romains (en vertu de laquelle le match aurait \xE9t\xE9 appel\xE9 &quot; Super Bowl L &quot;), afin que le logo puisse mettre en \xE9vidence les chiffres arabes 50.&#x27;&#x27;</span>
<span class="hljs-string">&#x27;Where did Super Bowl 50 take place?&#x27;</span> 
<span class="hljs-comment"># O\xF9 a eu lieu le Super Bowl 50 ?</span>`}}),dt=new qs({}),ms=new kc({props:{id:"qgaM0weJHpA"}}),mt=new z({props:{code:`from transformers import AutoTokenizer

model_checkpoint = "bert-base-cased"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

model_checkpoint = <span class="hljs-string">&quot;bert-base-cased&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)`}}),_s=new z({props:{code:"tokenizer.is_fast",highlighted:"tokenizer.is_fast"}}),ht=new z({props:{code:"True",highlighted:'<span class="hljs-literal">True</span>'}}),qt=new z({props:{code:"[CLS] question [SEP] context [SEP]",highlighted:'<span class="hljs-selector-attr">[CLS]</span> question <span class="hljs-selector-attr">[SEP]</span> context <span class="hljs-selector-attr">[SEP]</span>'}}),hs=new z({props:{code:`context = raw_datasets["train"][0]["context"]
question = raw_datasets["train"][0]["question"]

inputs = tokenizer(question, context)
tokenizer.decode(inputs["input_ids"])`,highlighted:`context = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;context&quot;</span>]
question = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;question&quot;</span>]

inputs = tokenizer(question, context)
tokenizer.decode(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])`}}),xt=new z({props:{code:`'[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Architecturally, '
'the school has a Catholic character. Atop the Main Building\\'s gold dome is a golden statue of the Virgin '
'Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms '
'upraised with the legend " Venite Ad Me Omnes ". Next to the Main Building is the Basilica of the Sacred '
'Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a '
'replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette '
'Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 statues '
'and the Gold Dome ), is a simple, modern stone statue of Mary. [SEP]'

'[CLS] A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes en France ? [SEP] Architecturalement, '
l'\xE9cole a un caract\xE8re catholique. Au sommet du d\xF4me dor\xE9 du b\xE2timent principal se trouve une statue dor\xE9e de la Vierge '
Marie. Imm\xE9diatement devant le b\xE2timent principal et face \xE0 lui, se trouve une statue en cuivre du Christ, les bras '
'lev\xE9s avec la l\xE9gende " Venite Ad Me Omnes ". A c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9 '
'C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s'agit d'une '
'r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette '
Soubirous en 1858. Au bout de l'all\xE9e principale ( et en ligne directe qui passe par 3 statues '
'et le D\xF4me d'or), se trouve une statue de Marie en pierre, simple et moderne. [SEP]'`,highlighted:`<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Architecturally, &#x27;</span>
<span class="hljs-string">&#x27;the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin &#x27;</span>
<span class="hljs-string">&#x27;Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms &#x27;</span>
<span class="hljs-string">&#x27;upraised with the legend &quot; Venite Ad Me Omnes &quot;. Next to the Main Building is the Basilica of the Sacred &#x27;</span>
<span class="hljs-string">&#x27;Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a &#x27;</span>
<span class="hljs-string">&#x27;replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette &#x27;</span>
<span class="hljs-string">&#x27;Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 statues &#x27;</span>
<span class="hljs-string">&#x27;and the Gold Dome ), is a simple, modern stone statue of Mary. [SEP]&#x27;</span>

<span class="hljs-string">&#x27;[CLS] A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes en France ? [SEP] Architecturalement, &#x27;</span>
l<span class="hljs-string">&#x27;\xE9cole a un caract\xE8re catholique. Au sommet du d\xF4me dor\xE9 du b\xE2timent principal se trouve une statue dor\xE9e de la Vierge &#x27;</span>
Marie. Imm\xE9diatement devant le b\xE2timent principal et face \xE0 lui, se trouve une statue en cuivre du Christ, les bras <span class="hljs-string">&#x27;
&#x27;</span>lev\xE9s avec la l\xE9gende <span class="hljs-string">&quot; Venite Ad Me Omnes &quot;</span>. A c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9 <span class="hljs-string">&#x27;
&#x27;</span>C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s<span class="hljs-string">&#x27;agit d&#x27;</span>une <span class="hljs-string">&#x27;
&#x27;</span>r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette <span class="hljs-string">&#x27;
Soubirous en 1858. Au bout de l&#x27;</span><span class="hljs-built_in">all</span>\xE9e principale ( et en ligne directe qui passe par <span class="hljs-number">3</span> statues <span class="hljs-string">&#x27;
&#x27;</span>et le D\xF4me d<span class="hljs-string">&#x27;or), se trouve une statue de Marie en pierre, simple et moderne. [SEP]&#x27;</span>`}}),Ee=new z({props:{code:`inputs = tokenizer(
    question,
    context,
    max_length=100,
    truncation="only_second",
    stride=50,
    return_overflowing_tokens=True,
)

for ids in inputs["input_ids"]:
    print(tokenizer.decode(ids))`,highlighted:`inputs = tokenizer(
    question,
    context,
    max_length=<span class="hljs-number">100</span>,
    truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
    stride=<span class="hljs-number">50</span>,
    return_overflowing_tokens=<span class="hljs-literal">True</span>,
)

<span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> inputs[<span class="hljs-string">&quot;input_ids&quot;</span>]:
    <span class="hljs-built_in">print</span>(tokenizer.decode(ids))`}}),pn=new z({props:{code:`'[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Architecturally, the school has a Catholic character. Atop the Main Building\\'s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend " Venite Ad Me Omnes ". Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basi [SEP]'
'[CLS] A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes en France ? [SEP] Sur le plan architectural, l'\xE9cole a un caract\xE8re catholique. Au sommet du d\xF4me dor\xE9 du b\xE2timent principal se trouve une statue dor\xE9e de la Vierge Marie. Imm\xE9diatement devant le b\xE2timent principal et face \xE0 lui, se trouve une statue en cuivre du Christ, les bras lev\xE9s, avec la l\xE9gende " Venite Ad Me Omnes ". \xC0 c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basi [SEP]'

'[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend " Venite Ad Me Omnes ". Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin [SEP]'
'[CLS] A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes en France ? [SEP] le b\xE2timent principal et face \xE0 lui, une statue en cuivre du Christ aux bras lev\xE9s avec la l\xE9gende " Venite Ad Me Omnes ". \xC0 c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s'agit d'une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge [SEP]'

'[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 [SEP]'
'[CLS] A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes en France ? [SEP] A c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s'agit d'une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette Soubirous en 1858. Au bout de l'all\xE9e principale ( et dans une ligne directe qui relie par 3 [SEP]'

'[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP]. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 statues and the Gold Dome ), is a simple, modern stone statue of Mary. [SEP]'
'[CLS] A qui la Vierge Marie est-elle pr\xE9tendument apparue en 1858 \xE0 Lourdes France ? [SEP]. Il s'agit d'une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette Soubirous en 1858. Au bout de l'all\xE9e principale (et dans une ligne directe qui passe par 3 statues et le D\xF4me d'or), se trouve une simple statue de pierre moderne de Marie. [SEP]'`,highlighted:`<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Architecturally, the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend &quot; Venite Ad Me Omnes &quot;. Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basi [SEP]&#x27;</span>
<span class="hljs-string">&#x27;[CLS] A qui la Vierge Marie serait-elle apparue en 1858 \xE0 Lourdes en France ? [SEP] Sur le plan architectural, l&#x27;</span>\xE9cole a un caract\xE8re catholique. Au sommet du d\xF4me dor\xE9 du b\xE2timent principal se trouve une statue dor\xE9e de la Vierge Marie. Imm\xE9diatement devant le b\xE2timent principal et face \xE0 lui, se trouve une statue en cuivre du Christ, les bras lev\xE9s, avec la l\xE9gende <span class="hljs-string">&quot; Venite Ad Me Omnes &quot;</span>. \xC0 c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basi [SEP]<span class="hljs-string">&#x27;

&#x27;</span>[CLS] To whom did the Virgin Mary allegedly appear <span class="hljs-keyword">in</span> <span class="hljs-number">1858</span> <span class="hljs-keyword">in</span> Lourdes France? [SEP] the Main Building <span class="hljs-keyword">and</span> facing it, <span class="hljs-keyword">is</span> a copper statue of Christ <span class="hljs-keyword">with</span> arms upraised <span class="hljs-keyword">with</span> the legend <span class="hljs-string">&quot; Venite Ad Me Omnes &quot;</span>. Next to the Main Building <span class="hljs-keyword">is</span> the Basilica of the Sacred Heart. Immediately behind the basilica <span class="hljs-keyword">is</span> the Grotto, a Marian place of prayer <span class="hljs-keyword">and</span> reflection. It <span class="hljs-keyword">is</span> a replica of the grotto at Lourdes, France where the Virgin [SEP]<span class="hljs-string">&#x27;
&#x27;</span>[CLS] A qui la Vierge Marie serait-elle apparue en <span class="hljs-number">1858</span> \xE0 Lourdes en France ? [SEP] le b\xE2timent principal et face \xE0 lui, une statue en cuivre du Christ aux bras lev\xE9s avec la l\xE9gende <span class="hljs-string">&quot; Venite Ad Me Omnes &quot;</span>. \xC0 c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s<span class="hljs-string">&#x27;agit d&#x27;</span>une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge [SEP]<span class="hljs-string">&#x27;

&#x27;</span>[CLS] To whom did the Virgin Mary allegedly appear <span class="hljs-keyword">in</span> <span class="hljs-number">1858</span> <span class="hljs-keyword">in</span> Lourdes France? [SEP] Next to the Main Building <span class="hljs-keyword">is</span> the Basilica of the Sacred Heart. Immediately behind the basilica <span class="hljs-keyword">is</span> the Grotto, a Marian place of prayer <span class="hljs-keyword">and</span> reflection. It <span class="hljs-keyword">is</span> a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous <span class="hljs-keyword">in</span> <span class="hljs-number">1858.</span> At the end of the main drive ( <span class="hljs-keyword">and</span> <span class="hljs-keyword">in</span> a direct line that connects through <span class="hljs-number">3</span> [SEP]<span class="hljs-string">&#x27;
&#x27;</span>[CLS] A qui la Vierge Marie serait-elle apparue en <span class="hljs-number">1858</span> \xE0 Lourdes en France ? [SEP] A c\xF4t\xE9 du b\xE2timent principal se trouve la basilique du Sacr\xE9-C\u0153ur. Imm\xE9diatement derri\xE8re la basilique se trouve la Grotte, un lieu marial de pri\xE8re et de r\xE9flexion. Il s<span class="hljs-string">&#x27;agit d&#x27;</span>une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette Soubirous en <span class="hljs-number">1858.</span> Au bout de l<span class="hljs-string">&#x27;all\xE9e principale ( et dans une ligne directe qui relie par 3 [SEP]&#x27;</span>

<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP]. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 statues and the Gold Dome ), is a simple, modern stone statue of Mary. [SEP]&#x27;</span>
<span class="hljs-string">&#x27;[CLS] A qui la Vierge Marie est-elle pr\xE9tendument apparue en 1858 \xE0 Lourdes France ? [SEP]. Il s&#x27;</span>agit d<span class="hljs-string">&#x27;une r\xE9plique de la grotte de Lourdes, en France, o\xF9 la Vierge Marie serait apparue \xE0 Sainte Bernadette Soubirous en 1858. Au bout de l&#x27;</span><span class="hljs-built_in">all</span>\xE9e principale (et dans une ligne directe qui passe par <span class="hljs-number">3</span> statues et le D\xF4me d<span class="hljs-string">&#x27;or), se trouve une simple statue de pierre moderne de Marie. [SEP]&#x27;</span>`}}),ir=new z({props:{code:`inputs = tokenizer(
    question,
    context,
    max_length=100,
    truncation="only_second",
    stride=50,
    return_overflowing_tokens=True,
    return_offsets_mapping=True,
)
inputs.keys()`,highlighted:`inputs = tokenizer(
    question,
    context,
    max_length=<span class="hljs-number">100</span>,
    truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
    stride=<span class="hljs-number">50</span>,
    return_overflowing_tokens=<span class="hljs-literal">True</span>,
    return_offsets_mapping=<span class="hljs-literal">True</span>,
)
inputs.keys()`}}),ur=new z({props:{code:"dict_keys(['input_ids', 'token_type_ids', 'attention_mask', 'offset_mapping', 'overflow_to_sample_mapping'])",highlighted:'dict_keys([<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;offset_mapping&#x27;</span>, <span class="hljs-string">&#x27;overflow_to_sample_mapping&#x27;</span>])'}}),pr=new z({props:{code:'inputs["overflow_to_sample_mapping"]',highlighted:'inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>]'}}),dr=new z({props:{code:"[0, 0, 0, 0]",highlighted:'[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]'}}),cr=new z({props:{code:`inputs = tokenizer(
    raw_datasets["train"][2:6]["question"],
    raw_datasets["train"][2:6]["context"],
    max_length=100,
    truncation="only_second",
    stride=50,
    return_overflowing_tokens=True,
    return_offsets_mapping=True,
)

print(f"The 4 examples gave {len(inputs['input_ids'])} features.")
print(f"Here is where each comes from: {inputs['overflow_to_sample_mapping']}.")`,highlighted:`inputs = tokenizer(
    raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">2</span>:<span class="hljs-number">6</span>][<span class="hljs-string">&quot;question&quot;</span>],
    raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">2</span>:<span class="hljs-number">6</span>][<span class="hljs-string">&quot;context&quot;</span>],
    max_length=<span class="hljs-number">100</span>,
    truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
    stride=<span class="hljs-number">50</span>,
    return_overflowing_tokens=<span class="hljs-literal">True</span>,
    return_offsets_mapping=<span class="hljs-literal">True</span>,
)

<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The 4 examples gave <span class="hljs-subst">{<span class="hljs-built_in">len</span>(inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>])}</span> features.&quot;</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Here is where each comes from: <span class="hljs-subst">{inputs[<span class="hljs-string">&#x27;overflow_to_sample_mapping&#x27;</span>]}</span>.&quot;</span>)`}}),mr=new z({props:{code:`'The 4 examples gave 19 features.'
'Here is where each comes from: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3].'`,highlighted:`<span class="hljs-string">&#x27;The 4 examples gave 19 features.&#x27;</span>
<span class="hljs-string">&#x27;Here is where each comes from: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3].&#x27;</span>`}}),fr=new z({props:{code:`answers = raw_datasets["train"][2:6]["answers"]
start_positions = []
end_positions = []

for i, offset in enumerate(inputs["offset_mapping"]):
    sample_idx = inputs["overflow_to_sample_mapping"][i]
    answer = answers[sample_idx]
    start_char = answer["answer_start"][0]
    end_char = answer["answer_start"][0] + len(answer["text"][0])
    sequence_ids = inputs.sequence_ids(i)

    # Trouver le d\xE9but et la fin du contexte
    idx = 0
    while sequence_ids[idx] != 1:
        idx += 1
    context_start = idx
    while sequence_ids[idx] == 1:
        idx += 1
    context_end = idx - 1

    # Si la r\xE9ponse n'est pas enti\xE8rement dans le contexte, l'\xE9tiquette est (0, 0)
    if offset[context_start][0] > start_char or offset[context_end][1] < end_char:
        start_positions.append(0)
        end_positions.append(0)
    else:
        # Sinon, ce sont les positions de d\xE9but et de fin du token
        idx = context_start
        while idx <= context_end and offset[idx][0] <= start_char:
            idx += 1
        start_positions.append(idx - 1)

        idx = context_end
        while idx >= context_start and offset[idx][1] >= end_char:
            idx -= 1
        end_positions.append(idx + 1)

start_positions, end_positions`,highlighted:`answers = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">2</span>:<span class="hljs-number">6</span>][<span class="hljs-string">&quot;answers&quot;</span>]
start_positions = []
end_positions = []

<span class="hljs-keyword">for</span> i, offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(inputs[<span class="hljs-string">&quot;offset_mapping&quot;</span>]):
    sample_idx = inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>][i]
    answer = answers[sample_idx]
    start_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>]
    end_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>] + <span class="hljs-built_in">len</span>(answer[<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>])
    sequence_ids = inputs.sequence_ids(i)

    <span class="hljs-comment"># Trouver le d\xE9but et la fin du contexte</span>
    idx = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> sequence_ids[idx] != <span class="hljs-number">1</span>:
        idx += <span class="hljs-number">1</span>
    context_start = idx
    <span class="hljs-keyword">while</span> sequence_ids[idx] == <span class="hljs-number">1</span>:
        idx += <span class="hljs-number">1</span>
    context_end = idx - <span class="hljs-number">1</span>

    <span class="hljs-comment"># Si la r\xE9ponse n&#x27;est pas enti\xE8rement dans le contexte, l&#x27;\xE9tiquette est (0, 0)</span>
    <span class="hljs-keyword">if</span> offset[context_start][<span class="hljs-number">0</span>] &gt; start_char <span class="hljs-keyword">or</span> offset[context_end][<span class="hljs-number">1</span>] &lt; end_char:
        start_positions.append(<span class="hljs-number">0</span>)
        end_positions.append(<span class="hljs-number">0</span>)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-comment"># Sinon, ce sont les positions de d\xE9but et de fin du token</span>
        idx = context_start
        <span class="hljs-keyword">while</span> idx &lt;= context_end <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">0</span>] &lt;= start_char:
            idx += <span class="hljs-number">1</span>
        start_positions.append(idx - <span class="hljs-number">1</span>)

        idx = context_end
        <span class="hljs-keyword">while</span> idx &gt;= context_start <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">1</span>] &gt;= end_char:
            idx -= <span class="hljs-number">1</span>
        end_positions.append(idx + <span class="hljs-number">1</span>)

start_positions, end_positions`}}),_r=new z({props:{code:`([83, 51, 19, 0, 0, 64, 27, 0, 34, 0, 0, 0, 67, 34, 0, 0, 0, 0, 0],
 [85, 53, 21, 0, 0, 70, 33, 0, 40, 0, 0, 0, 68, 35, 0, 0, 0, 0, 0])`,highlighted:`([<span class="hljs-number">83</span>, <span class="hljs-number">51</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0</span>, <span class="hljs-number">34</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">67</span>, <span class="hljs-number">34</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 [<span class="hljs-number">85</span>, <span class="hljs-number">53</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">70</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">68</span>, <span class="hljs-number">35</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])`}}),hr=new z({props:{code:`idx = 0
sample_idx = inputs["overflow_to_sample_mapping"][idx]
answer = answers[sample_idx]["text"][0]

start = start_positions[idx]
end = end_positions[idx]
labeled_answer = tokenizer.decode(inputs["input_ids"][idx][start : end + 1])

print(f"Theoretical answer: {answer}, labels give: {labeled_answer}")`,highlighted:`idx = <span class="hljs-number">0</span>
sample_idx = inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>][idx]
answer = answers[sample_idx][<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>]

start = start_positions[idx]
end = end_positions[idx]
labeled_answer = tokenizer.decode(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>][idx][start : end + <span class="hljs-number">1</span>])

<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Theoretical answer: <span class="hljs-subst">{answer}</span>, labels give: <span class="hljs-subst">{labeled_answer}</span>&quot;</span>)`}}),vr=new z({props:{code:"'Theoretical answer: the Main Building, labels give: the Main Building'",highlighted:'<span class="hljs-string">&#x27;Theoretical answer: the Main Building, labels give: the Main Building&#x27;</span>'}}),br=new z({props:{code:`idx = 4
sample_idx = inputs["overflow_to_sample_mapping"][idx]
answer = answers[sample_idx]["text"][0]

decoded_example = tokenizer.decode(inputs["input_ids"][idx])
print(f"Theoretical answer: {answer}, decoded example: {decoded_example}")`,highlighted:`idx = <span class="hljs-number">4</span>
sample_idx = inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>][idx]
answer = answers[sample_idx][<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>]

decoded_example = tokenizer.decode(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>][idx])
<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Theoretical answer: <span class="hljs-subst">{answer}</span>, decoded example: <span class="hljs-subst">{decoded_example}</span>&quot;</span>)`}}),qr=new z({props:{code:`'Theoretical answer: a Marian place of prayer and reflection, decoded example: [CLS] What is the Grotto at Notre Dame? [SEP] Architecturally, the school has a Catholic character. Atop the Main Building\\'s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend " Venite Ad Me Omnes ". Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grot [SEP]'`,highlighted:'<span class="hljs-string">&#x27;Theoretical answer: a Marian place of prayer and reflection, decoded example: [CLS] What is the Grotto at Notre Dame? [SEP] Architecturally, the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend &quot; Venite Ad Me Omnes &quot;. Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grot [SEP]&#x27;</span>'}}),Ra=new Ec({props:{$$slots:{default:[Eg]},$$scope:{ctx:U}}}),gr=new z({props:{code:`max_length = 384
stride = 128


def preprocess_training_examples(examples):
    questions = [q.strip() for q in examples["question"]]
    inputs = tokenizer(
        questions,
        examples["context"],
        max_length=max_length,
        truncation="only_second",
        stride=stride,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    offset_mapping = inputs.pop("offset_mapping")
    sample_map = inputs.pop("overflow_to_sample_mapping")
    answers = examples["answers"]
    start_positions = []
    end_positions = []

    for i, offset in enumerate(offset_mapping):
        sample_idx = sample_map[i]
        answer = answers[sample_idx]
        start_char = answer["answer_start"][0]
        end_char = answer["answer_start"][0] + len(answer["text"][0])
        sequence_ids = inputs.sequence_ids(i)

        # Trouver le d\xE9but et la fin du contexte
        idx = 0
        while sequence_ids[idx] != 1:
            idx += 1
        context_start = idx
        while sequence_ids[idx] == 1:
            idx += 1
        context_end = idx - 1

        # Si la r\xE9ponse n'est pas enti\xE8rement dans le contexte, l'\xE9tiquette est (0, 0)
        if offset[context_start][0] > start_char or offset[context_end][1] < end_char:
            start_positions.append(0)
            end_positions.append(0)
        else:
            # Sinon, ce sont les positions de d\xE9but et de fin du token
            idx = context_start
            while idx <= context_end and offset[idx][0] <= start_char:
                idx += 1
            start_positions.append(idx - 1)

            idx = context_end
            while idx >= context_start and offset[idx][1] >= end_char:
                idx -= 1
            end_positions.append(idx + 1)

    inputs["start_positions"] = start_positions
    inputs["end_positions"] = end_positions
    return inputs`,highlighted:`max_length = <span class="hljs-number">384</span>
stride = <span class="hljs-number">128</span>


<span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_training_examples</span>(<span class="hljs-params">examples</span>):
    questions = [q.strip() <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;question&quot;</span>]]
    inputs = tokenizer(
        questions,
        examples[<span class="hljs-string">&quot;context&quot;</span>],
        max_length=max_length,
        truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
        stride=stride,
        return_overflowing_tokens=<span class="hljs-literal">True</span>,
        return_offsets_mapping=<span class="hljs-literal">True</span>,
        padding=<span class="hljs-string">&quot;max_length&quot;</span>,
    )

    offset_mapping = inputs.pop(<span class="hljs-string">&quot;offset_mapping&quot;</span>)
    sample_map = inputs.pop(<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>)
    answers = examples[<span class="hljs-string">&quot;answers&quot;</span>]
    start_positions = []
    end_positions = []

    <span class="hljs-keyword">for</span> i, offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(offset_mapping):
        sample_idx = sample_map[i]
        answer = answers[sample_idx]
        start_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>]
        end_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>] + <span class="hljs-built_in">len</span>(answer[<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>])
        sequence_ids = inputs.sequence_ids(i)

        <span class="hljs-comment"># Trouver le d\xE9but et la fin du contexte</span>
        idx = <span class="hljs-number">0</span>
        <span class="hljs-keyword">while</span> sequence_ids[idx] != <span class="hljs-number">1</span>:
            idx += <span class="hljs-number">1</span>
        context_start = idx
        <span class="hljs-keyword">while</span> sequence_ids[idx] == <span class="hljs-number">1</span>:
            idx += <span class="hljs-number">1</span>
        context_end = idx - <span class="hljs-number">1</span>

        <span class="hljs-comment"># Si la r\xE9ponse n&#x27;est pas enti\xE8rement dans le contexte, l&#x27;\xE9tiquette est (0, 0)</span>
        <span class="hljs-keyword">if</span> offset[context_start][<span class="hljs-number">0</span>] &gt; start_char <span class="hljs-keyword">or</span> offset[context_end][<span class="hljs-number">1</span>] &lt; end_char:
            start_positions.append(<span class="hljs-number">0</span>)
            end_positions.append(<span class="hljs-number">0</span>)
        <span class="hljs-keyword">else</span>:
            <span class="hljs-comment"># Sinon, ce sont les positions de d\xE9but et de fin du token</span>
            idx = context_start
            <span class="hljs-keyword">while</span> idx &lt;= context_end <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">0</span>] &lt;= start_char:
                idx += <span class="hljs-number">1</span>
            start_positions.append(idx - <span class="hljs-number">1</span>)

            idx = context_end
            <span class="hljs-keyword">while</span> idx &gt;= context_start <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">1</span>] &gt;= end_char:
                idx -= <span class="hljs-number">1</span>
            end_positions.append(idx + <span class="hljs-number">1</span>)

    inputs[<span class="hljs-string">&quot;start_positions&quot;</span>] = start_positions
    inputs[<span class="hljs-string">&quot;end_positions&quot;</span>] = end_positions
    <span class="hljs-keyword">return</span> inputs`}}),xr=new z({props:{code:`train_dataset = raw_datasets["train"].map(
    preprocess_training_examples,
    batched=True,
    remove_columns=raw_datasets["train"].column_names,
)
len(raw_datasets["train"]), len(train_dataset)`,highlighted:`train_dataset = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">map</span>(
    preprocess_training_examples,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].column_names,
)
<span class="hljs-built_in">len</span>(raw_datasets[<span class="hljs-string">&quot;train&quot;</span>]), <span class="hljs-built_in">len</span>(train_dataset)`}}),$r=new z({props:{code:"(87599, 88729)",highlighted:'(<span class="hljs-number">87599</span>, <span class="hljs-number">88729</span>)'}}),wr=new qs({}),jr=new z({props:{code:`def preprocess_validation_examples(examples):
    questions = [q.strip() for q in examples["question"]]
    inputs = tokenizer(
        questions,
        examples["context"],
        max_length=max_length,
        truncation="only_second",
        stride=stride,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    sample_map = inputs.pop("overflow_to_sample_mapping")
    example_ids = []

    for i in range(len(inputs["input_ids"])):
        sample_idx = sample_map[i]
        example_ids.append(examples["id"][sample_idx])

        sequence_ids = inputs.sequence_ids(i)
        offset = inputs["offset_mapping"][i]
        inputs["offset_mapping"][i] = [
            o if sequence_ids[k] == 1 else None for k, o in enumerate(offset)
        ]

    inputs["example_id"] = example_ids
    return inputs`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_validation_examples</span>(<span class="hljs-params">examples</span>):
    questions = [q.strip() <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;question&quot;</span>]]
    inputs = tokenizer(
        questions,
        examples[<span class="hljs-string">&quot;context&quot;</span>],
        max_length=max_length,
        truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
        stride=stride,
        return_overflowing_tokens=<span class="hljs-literal">True</span>,
        return_offsets_mapping=<span class="hljs-literal">True</span>,
        padding=<span class="hljs-string">&quot;max_length&quot;</span>,
    )

    sample_map = inputs.pop(<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>)
    example_ids = []

    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])):
        sample_idx = sample_map[i]
        example_ids.append(examples[<span class="hljs-string">&quot;id&quot;</span>][sample_idx])

        sequence_ids = inputs.sequence_ids(i)
        offset = inputs[<span class="hljs-string">&quot;offset_mapping&quot;</span>][i]
        inputs[<span class="hljs-string">&quot;offset_mapping&quot;</span>][i] = [
            o <span class="hljs-keyword">if</span> sequence_ids[k] == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> k, o <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(offset)
        ]

    inputs[<span class="hljs-string">&quot;example_id&quot;</span>] = example_ids
    <span class="hljs-keyword">return</span> inputs`}}),Er=new z({props:{code:`validation_dataset = raw_datasets["validation"].map(
    preprocess_validation_examples,
    batched=True,
    remove_columns=raw_datasets["validation"].column_names,
)
len(raw_datasets["validation"]), len(validation_dataset)`,highlighted:`validation_dataset = raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].<span class="hljs-built_in">map</span>(
    preprocess_validation_examples,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].column_names,
)
<span class="hljs-built_in">len</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>]), <span class="hljs-built_in">len</span>(validation_dataset)`}}),kr=new z({props:{code:"(10570, 10822)",highlighted:'(<span class="hljs-number">10570</span>, <span class="hljs-number">10822</span>)'}});const Qh=[yg,kg],Zr=[];function Gh(e,u){return e[0]==="pt"?0:1}jt=Gh(U),Et=Zr[jt]=Qh[jt](U),yr=new qs({});const Wh=[Pg,Cg],el=[];function Jh(e,u){return e[0]==="pt"?0:1}kt=Jh(U),yt=el[kt]=Wh[kt](U),Ar=new z({props:{code:`small_eval_set = raw_datasets["validation"].select(range(100))
trained_checkpoint = "distilbert-base-cased-distilled-squad"

tokenizer = AutoTokenizer.from_pretrained(trained_checkpoint)
eval_set = small_eval_set.map(
    preprocess_validation_examples,
    batched=True,
    remove_columns=raw_datasets["validation"].column_names,
)`,highlighted:`small_eval_set = raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].select(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>))
trained_checkpoint = <span class="hljs-string">&quot;distilbert-base-cased-distilled-squad&quot;</span>

tokenizer = AutoTokenizer.from_pretrained(trained_checkpoint)
eval_set = small_eval_set.<span class="hljs-built_in">map</span>(
    preprocess_validation_examples,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].column_names,
)`}}),Sr=new z({props:{code:"tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)",highlighted:"tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)"}});const Xh=[Sg,Ag],sl=[];function Kh(e,u){return e[0]==="pt"?0:1}Ct=Kh(U),Pt=sl[Ct]=Xh[Ct](U),Mr=new z({props:{code:`import collections

example_to_features = collections.defaultdict(list)
for idx, feature in enumerate(eval_set):
    example_to_features[feature["example_id"]].append(idx)`,highlighted:`<span class="hljs-keyword">import</span> collections

example_to_features = collections.defaultdict(<span class="hljs-built_in">list</span>)
<span class="hljs-keyword">for</span> idx, feature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(eval_set):
    example_to_features[feature[<span class="hljs-string">&quot;example_id&quot;</span>]].append(idx)`}}),Dr=new z({props:{code:`import numpy as np

n_best = 20
max_answer_length = 30
predicted_answers = []

for example in small_eval_set:
    example_id = example["id"]
    context = example["context"]
    answers = []

    for feature_index in example_to_features[example_id]:
        start_logit = start_logits[feature_index]
        end_logit = end_logits[feature_index]
        offsets = eval_set["offset_mapping"][feature_index]

        start_indexes = np.argsort(start_logit)[-1 : -n_best - 1 : -1].tolist()
        end_indexes = np.argsort(end_logit)[-1 : -n_best - 1 : -1].tolist()
        for start_index in start_indexes:
            for end_index in end_indexes:
                # Ignore les r\xE9ponses qui ne sont pas enti\xE8rement dans le contexte
                if offsets[start_index] is None or offsets[end_index] is None:
                    continue
                # Ignore les r\xE9ponses dont la longueur est soit < 0 soit > max_answer_length
                if (
                    end_index < start_index
                    or end_index - start_index + 1 > max_answer_length
                ):
                    continue

                answers.append(
                    {
                        "text": context[offsets[start_index][0] : offsets[end_index][1]],
                        "logit_score": start_logit[start_index] + end_logit[end_index],
                    }
                )

    best_answer = max(answers, key=lambda x: x["logit_score"])
    predicted_answers.append({"id": example_id, "prediction_text": best_answer["text"]})`,highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

n_best = <span class="hljs-number">20</span>
max_answer_length = <span class="hljs-number">30</span>
predicted_answers = []

<span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> small_eval_set:
    example_id = example[<span class="hljs-string">&quot;id&quot;</span>]
    context = example[<span class="hljs-string">&quot;context&quot;</span>]
    answers = []

    <span class="hljs-keyword">for</span> feature_index <span class="hljs-keyword">in</span> example_to_features[example_id]:
        start_logit = start_logits[feature_index]
        end_logit = end_logits[feature_index]
        offsets = eval_set[<span class="hljs-string">&quot;offset_mapping&quot;</span>][feature_index]

        start_indexes = np.argsort(start_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
        end_indexes = np.argsort(end_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
        <span class="hljs-keyword">for</span> start_index <span class="hljs-keyword">in</span> start_indexes:
            <span class="hljs-keyword">for</span> end_index <span class="hljs-keyword">in</span> end_indexes:
                <span class="hljs-comment"># Ignore les r\xE9ponses qui ne sont pas enti\xE8rement dans le contexte</span>
                <span class="hljs-keyword">if</span> offsets[start_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> offsets[end_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:
                    <span class="hljs-keyword">continue</span>
                <span class="hljs-comment"># Ignore les r\xE9ponses dont la longueur est soit &lt; 0 soit &gt; max_answer_length</span>
                <span class="hljs-keyword">if</span> (
                    end_index &lt; start_index
                    <span class="hljs-keyword">or</span> end_index - start_index + <span class="hljs-number">1</span> &gt; max_answer_length
                ):
                    <span class="hljs-keyword">continue</span>

                answers.append(
                    {
                        <span class="hljs-string">&quot;text&quot;</span>: context[offsets[start_index][<span class="hljs-number">0</span>] : offsets[end_index][<span class="hljs-number">1</span>]],
                        <span class="hljs-string">&quot;logit_score&quot;</span>: start_logit[start_index] + end_logit[end_index],
                    }
                )

    best_answer = <span class="hljs-built_in">max</span>(answers, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;logit_score&quot;</span>])
    predicted_answers.append({<span class="hljs-string">&quot;id&quot;</span>: example_id, <span class="hljs-string">&quot;prediction_text&quot;</span>: best_answer[<span class="hljs-string">&quot;text&quot;</span>]})`}}),Tr=new z({props:{code:`from datasets import load_metric

metric = load_metric("squad")`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric

metric = load_metric(<span class="hljs-string">&quot;squad&quot;</span>)`}}),Lr=new z({props:{code:`theoretical_answers = [
    {"id": ex["id"], "answers": ex["answers"]} for ex in small_eval_set
]`,highlighted:`theoretical_answers = [
    {<span class="hljs-string">&quot;id&quot;</span>: ex[<span class="hljs-string">&quot;id&quot;</span>], <span class="hljs-string">&quot;answers&quot;</span>: ex[<span class="hljs-string">&quot;answers&quot;</span>]} <span class="hljs-keyword">for</span> ex <span class="hljs-keyword">in</span> small_eval_set
]`}}),Nr=new z({props:{code:`print(predicted_answers[0])
print(theoretical_answers[0])`,highlighted:`<span class="hljs-built_in">print</span>(predicted_answers[<span class="hljs-number">0</span>])
<span class="hljs-built_in">print</span>(theoretical_answers[<span class="hljs-number">0</span>])`}}),Or=new z({props:{code:`{'id': '56be4db0acb8001400a502ec', 'prediction_text': 'Denver Broncos'}
{'id': '56be4db0acb8001400a502ec', 'answers': {'text': ['Denver Broncos', 'Denver Broncos', 'Denver Broncos'], 'answer_start': [177, 177, 177]}}`,highlighted:`{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;56be4db0acb8001400a502ec&#x27;</span>, <span class="hljs-string">&#x27;prediction_text&#x27;</span>: <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>}
{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;56be4db0acb8001400a502ec&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>: {<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">177</span>, <span class="hljs-number">177</span>, <span class="hljs-number">177</span>]}}`}}),Br=new z({props:{code:"metric.compute(predictions=predicted_answers, references=theoretical_answers)",highlighted:"metric.compute(predictions=predicted_answers, references=theoretical_answers)"}}),Fr=new z({props:{code:"{'exact_match': 83.0, 'f1': 88.25}",highlighted:'{<span class="hljs-string">&#x27;exact_match&#x27;</span>: <span class="hljs-number">83.0</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">88.25</span>}'}});function Yh(e,u){return e[0]==="pt"?zg:Mg}let Xd=Yh(U),Zn=Xd(U);Vr=new z({props:{code:`from tqdm.auto import tqdm


def compute_metrics(start_logits, end_logits, features, examples):
    example_to_features = collections.defaultdict(list)
    for idx, feature in enumerate(features):
        example_to_features[feature["example_id"]].append(idx)

    predicted_answers = []
    for example in tqdm(examples):
        example_id = example["id"]
        context = example["context"]
        answers = []

        # Parcourir en boucle toutes les fonctionnalit\xE9s associ\xE9es \xE0 cet exemple
        for feature_index in example_to_features[example_id]:
            start_logit = start_logits[feature_index]
            end_logit = end_logits[feature_index]
            offsets = features[feature_index]["offset_mapping"]

            start_indexes = np.argsort(start_logit)[-1 : -n_best - 1 : -1].tolist()
            end_indexes = np.argsort(end_logit)[-1 : -n_best - 1 : -1].tolist()
            for start_index in start_indexes:
                for end_index in end_indexes:
                    # Ignore les r\xE9ponses qui ne sont pas enti\xE8rement dans le contexte
                    if offsets[start_index] is None or offsets[end_index] is None:
                        continue
                    # Ignore les r\xE9ponses dont la longueur est soit < 0, soit > max_answer_length
                    if (
                        end_index < start_index
                        or end_index - start_index + 1 > max_answer_length
                    ):
                        continue

                    answer = {
                        "text": context[offsets[start_index][0] : offsets[end_index][1]],
                        "logit_score": start_logit[start_index] + end_logit[end_index],
                    }
                    answers.append(answer)

        # S\xE9lectionne la r\xE9ponse avec le meilleur score
        if len(answers) > 0:
            best_answer = max(answers, key=lambda x: x["logit_score"])
            predicted_answers.append(
                {"id": example_id, "prediction_text": best_answer["text"]}
            )
        else:
            predicted_answers.append({"id": example_id, "prediction_text": ""})

    theoretical_answers = [{"id": ex["id"], "answers": ex["answers"]} for ex in examples]
    return metric.compute(predictions=predicted_answers, references=theoretical_answers)`,highlighted:`<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm


<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">start_logits, end_logits, features, examples</span>):
    example_to_features = collections.defaultdict(<span class="hljs-built_in">list</span>)
    <span class="hljs-keyword">for</span> idx, feature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(features):
        example_to_features[feature[<span class="hljs-string">&quot;example_id&quot;</span>]].append(idx)

    predicted_answers = []
    <span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> tqdm(examples):
        example_id = example[<span class="hljs-string">&quot;id&quot;</span>]
        context = example[<span class="hljs-string">&quot;context&quot;</span>]
        answers = []

        <span class="hljs-comment"># Parcourir en boucle toutes les fonctionnalit\xE9s associ\xE9es \xE0 cet exemple</span>
        <span class="hljs-keyword">for</span> feature_index <span class="hljs-keyword">in</span> example_to_features[example_id]:
            start_logit = start_logits[feature_index]
            end_logit = end_logits[feature_index]
            offsets = features[feature_index][<span class="hljs-string">&quot;offset_mapping&quot;</span>]

            start_indexes = np.argsort(start_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
            end_indexes = np.argsort(end_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
            <span class="hljs-keyword">for</span> start_index <span class="hljs-keyword">in</span> start_indexes:
                <span class="hljs-keyword">for</span> end_index <span class="hljs-keyword">in</span> end_indexes:
                    <span class="hljs-comment"># Ignore les r\xE9ponses qui ne sont pas enti\xE8rement dans le contexte</span>
                    <span class="hljs-keyword">if</span> offsets[start_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> offsets[end_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:
                        <span class="hljs-keyword">continue</span>
                    <span class="hljs-comment"># Ignore les r\xE9ponses dont la longueur est soit &lt; 0, soit &gt; max_answer_length</span>
                    <span class="hljs-keyword">if</span> (
                        end_index &lt; start_index
                        <span class="hljs-keyword">or</span> end_index - start_index + <span class="hljs-number">1</span> &gt; max_answer_length
                    ):
                        <span class="hljs-keyword">continue</span>

                    answer = {
                        <span class="hljs-string">&quot;text&quot;</span>: context[offsets[start_index][<span class="hljs-number">0</span>] : offsets[end_index][<span class="hljs-number">1</span>]],
                        <span class="hljs-string">&quot;logit_score&quot;</span>: start_logit[start_index] + end_logit[end_index],
                    }
                    answers.append(answer)

        <span class="hljs-comment"># S\xE9lectionne la r\xE9ponse avec le meilleur score</span>
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(answers) &gt; <span class="hljs-number">0</span>:
            best_answer = <span class="hljs-built_in">max</span>(answers, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;logit_score&quot;</span>])
            predicted_answers.append(
                {<span class="hljs-string">&quot;id&quot;</span>: example_id, <span class="hljs-string">&quot;prediction_text&quot;</span>: best_answer[<span class="hljs-string">&quot;text&quot;</span>]}
            )
        <span class="hljs-keyword">else</span>:
            predicted_answers.append({<span class="hljs-string">&quot;id&quot;</span>: example_id, <span class="hljs-string">&quot;prediction_text&quot;</span>: <span class="hljs-string">&quot;&quot;</span>})

    theoretical_answers = [{<span class="hljs-string">&quot;id&quot;</span>: ex[<span class="hljs-string">&quot;id&quot;</span>], <span class="hljs-string">&quot;answers&quot;</span>: ex[<span class="hljs-string">&quot;answers&quot;</span>]} <span class="hljs-keyword">for</span> ex <span class="hljs-keyword">in</span> examples]
    <span class="hljs-keyword">return</span> metric.compute(predictions=predicted_answers, references=theoretical_answers)`}}),Hr=new z({props:{code:"compute_metrics(start_logits, end_logits, eval_set, small_eval_set)",highlighted:"compute_metrics(start_logits, end_logits, eval_set, small_eval_set)"}}),Rr=new z({props:{code:"{'exact_match': 83.0, 'f1': 88.25}",highlighted:'{<span class="hljs-string">&#x27;exact_match&#x27;</span>: <span class="hljs-number">83.0</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">88.25</span>}'}}),Ur=new qs({});const Zh=[Tg,Dg],tl=[];function ev(e,u){return e[0]==="pt"?0:1}At=ev(U),St=tl[At]=Zh[At](U),Qr=new z({props:{code:`from huggingface_hub import notebook_login

notebook_login()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

notebook_login()`}}),Gr=new z({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}});const sv=[Ng,Lg],nl=[];function tv(e,u){return e[0]==="pt"?0:1}Mt=tv(U),zt=nl[Mt]=sv[Mt](U);const nv=[Bg,Og],al=[];function av(e,u){return e[0]==="pt"?0:1}Dt=av(U),Tt=al[Dt]=nv[Dt](U);const ov=[Vg,Ig],ol=[];function rv(e,u){return e[0]==="pt"?0:1}Lt=rv(U),Nt=ol[Lt]=ov[Lt](U),Wr=new z({props:{code:"{'exact_match': 81.18259224219489, 'f1': 88.67381321905516}",highlighted:'{<span class="hljs-string">&#x27;exact_match&#x27;</span>: <span class="hljs-number">81.18259224219489</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">88.67381321905516</span>}'}});let $e=U[0]==="pt"&&mg();to=new Ec({props:{$$slots:{default:[Hg]},$$scope:{ctx:U}}});let we=U[0]==="pt"&&fg();return Jr=new qs({}),Xr=new z({props:{code:`from transformers import pipeline

# Remplacez par votre propre checkpoint
model_checkpoint = "huggingface-course/bert-finetuned-squad"
question_answerer = pipeline("question-answering", model=model_checkpoint)

context = """
\u{1F917} Transformers is backed by the three most popular deep learning libraries \u2014 Jax, PyTorch and TensorFlow \u2014 with a seamless integration
between them. It's straightforward to train your models with one before loading them for inference with the other.
"""
question = "Which deep learning libraries back \u{1F917} Transformers?"
question_answerer(question=question, context=context)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-comment"># Remplacez par votre propre checkpoint</span>
model_checkpoint = <span class="hljs-string">&quot;huggingface-course/bert-finetuned-squad&quot;</span>
question_answerer = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model_checkpoint)

context = <span class="hljs-string">&quot;&quot;&quot;
\u{1F917} Transformers is backed by the three most popular deep learning libraries \u2014 Jax, PyTorch and TensorFlow \u2014 with a seamless integration
between them. It&#x27;s straightforward to train your models with one before loading them for inference with the other.
&quot;&quot;&quot;</span>
question = <span class="hljs-string">&quot;Which deep learning libraries back \u{1F917} Transformers?&quot;</span>
question_answerer(question=question, context=context)`}}),Kr=new z({props:{code:`{'score': 0.9979003071784973,
 'start': 78,
 'end': 105,
 'answer': 'Jax, PyTorch and TensorFlow'}`,highlighted:`{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9979003071784973</span>,
 <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">78</span>,
 <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">105</span>,
 <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;Jax, PyTorch and TensorFlow&#x27;</span>}`}}),{c(){p=o("meta"),b=d(),w(f.$$.fragment),y=d(),S=o("h1"),q=o("a"),g=o("span"),w(x.$$.fragment),_=d(),M=o("span"),$=n("R\xE9ponse aux questions"),A=d(),I.c(),D=d(),P=o("p"),V=n("Il est temps de s\u2019int\xE9resser \xE0 la r\xE9ponse aux questions ! Cette t\xE2che peut prendre plusieurs formes mais celle sur laquelle nous allons nous concentrer dans cette section est appel\xE9e r\xE9ponse aux questions "),L=o("em"),O=n("extractives"),N=n(". Il s\u2019agit de poser des questions sur un document et d\u2019identifier les r\xE9ponses sous forme de \xAB d\u2019\xE9tendue de texte \xBB dans le document lui-m\xEAme."),R=d(),w(Q.$$.fragment),J=d(),H=o("p"),G=n("Nous allons "),ee=o("em"),Z=n("finetuner"),F=n(" un mod\xE8le BERT sur le "),X=o("a"),re=n("jeu de donn\xE9es SQuAD"),se=n(", qui consiste en des questions pos\xE9es par des "),K=o("em"),le=n("crowdworkers"),Ce=n(" sur un ensemble d\u2019articles de Wikipedia. Cela nous donnera un mod\xE8le capable de calculer des pr\xE9dictions comme celui-ci :"),ye=d(),ie=o("iframe"),Fe=d(),ue=o("iframe"),rs=d(),W=o("p"),Y=n("Il s\u2019agit d\u2019une pr\xE9sentation du mod\xE8le qui a \xE9t\xE9 entra\xEEn\xE9 \xE0 l\u2019aide du code pr\xE9sent\xE9 dans cette section et qui a ensuit\xE9 \xE9t\xE9 t\xE9l\xE9charg\xE9 sur le "),$s=o("em"),Bt=n("Hub"),ws=n(". Vous pouvez le trouver "),Ie=o("a"),Ve=n("ici"),js=d(),w(he.$$.fragment),He=d(),pe=o("h2"),ve=o("a"),Re=o("span"),w(Ue.$$.fragment),mo=d(),Ft=o("span"),Js=n("Pr\xE9paration des donn\xE9es"),jn=d(),be=o("p"),fo=n("Le jeu de donn\xE9es le plus utilis\xE9 comme r\xE9f\xE9rence acad\xE9mique pour la r\xE9ponse extractive aux questions est "),ls=o("a"),_o=n("SQuAD"),ho=n(". C\u2019est donc celui que nous utiliserons ici. Il existe \xE9galement une version plus difficile "),Es=o("a"),Xs=n("SQuAD v2"),sa=n(", qui comprend des questions sans r\xE9ponse. Tant que votre propre jeu de donn\xE9es contient une colonne pour les contextes, une colonne pour les questions et une colonne pour les r\xE9ponses, vous devriez \xEAtre en mesure d\u2019adapter les \xE9tapes ci-dessous."),te=d(),is=o("h3"),Qe=o("a"),En=o("span"),w(Ks.$$.fragment),kn=d(),yn=o("span"),vo=n("Le jeu de donn\xE9es SQuAD"),It=d(),ks=o("p"),bo=n("Comme d\u2019habitude, nous pouvons t\xE9l\xE9charger et mettre en cache le jeu de donn\xE9es en une seule \xE9tape gr\xE2ce \xE0 "),Ys=o("code"),qo=n("load_dataset()"),go=n(" :"),Vt=d(),w(Zs.$$.fragment),ta=d(),ys=o("p"),xo=n("Nous pouvons jeter un coup d\u2019\u0153il \xE0 cet objet pour en savoir plus sur le jeu de donn\xE9es SQuAD :"),na=d(),w(us.$$.fragment),aa=d(),w(et.$$.fragment),Cn=d(),me=o("p"),oa=n("On dirait que nous avons tout ce dont nous avons besoin avec les champs "),Pe=o("code"),$o=n("context"),Pn=n(", "),An=o("code"),wo=n("question"),Sn=n(" et "),Mn=o("code"),jo=n("answers"),ra=n(". Affichons-les pour le premier \xE9l\xE9ment de notre ensemble d\u2019entra\xEEnement :"),Cs=d(),w(Ps.$$.fragment),de=d(),w(st.$$.fragment),Ht=d(),oe=o("p"),Eo=n("Les champs "),tt=o("code"),ko=n("context"),yo=n(" et "),nt=o("code"),Co=n("question"),Po=n(" sont tr\xE8s simples \xE0 utiliser. Le champ "),at=o("code"),Ao=n("answers"),So=n(" est un peu plus d\xE9licat car il compile un dictionnaire avec deux champs qui sont tous deux des listes. C\u2019est le format qui sera attendu par la m\xE9trique "),ot=o("code"),Mo=n("squad"),zo=n(" lors de l\u2019\xE9valuation. Si vous utilisez vos propres donn\xE9es, vous n\u2019avez pas n\xE9cessairement besoin de vous soucier de mettre les r\xE9ponses dans le m\xEAme format. Le champ "),Rt=o("code"),rt=n("text"),la=n(" est assez \xE9vident et le champ "),ps=o("code"),ia=n("answer_start"),Ut=n(" contient l\u2019indice du caract\xE8re de d\xE9part de chaque r\xE9ponse dans le contexte."),ua=d(),ds=o("p"),lt=n("Pendant l\u2019entra\xEEnement, il n\u2019y a qu\u2019une seule r\xE9ponse possible. Nous pouvons v\xE9rifier cela en utilisant la m\xE9thode "),Qt=o("code"),Ge=n("Dataset.filter()"),Do=n(" :"),Gt=d(),w(it.$$.fragment),pa=d(),w(cs.$$.fragment),da=d(),Wt=o("p"),ca=n("Pour l\u2019\xE9valuation, cependant, il existe plusieurs r\xE9ponses possibles pour chaque \xE9chantillon, qui peuvent \xEAtre identiques ou diff\xE9rentes :"),We=d(),w(Ae.$$.fragment),Jt=d(),w(Oe.$$.fragment),ma=d(),Je=o("p"),To=n("Nous ne nous plongerons pas dans le script d\u2019\xE9valuation car tout sera envelopp\xE9 pour nous par une m\xE9trique de \u{1F917} "),Xt=o("em"),Kt=n("Datasets"),Lo=n(". La version courte est que certaines des questions ont plusieurs r\xE9ponses possibles, et ce script va comparer une r\xE9ponse pr\xE9dite \xE0 toutes les r\xE9ponses acceptables et prendre le meilleur score. Par exemple, si nous regardons l\u2019\xE9chantillon de l\u2019indice 2 :"),zn=d(),w(je.$$.fragment),As=d(),w(ut.$$.fragment),Yt=d(),Zt=o("p"),No=n("nous pouvons voir que la r\xE9ponse peut effectivement \xEAtre l\u2019une des trois possibilit\xE9s que nous avons vues pr\xE9c\xE9demment."),fa=d(),ce=o("h3"),Ss=o("a"),pt=o("span"),w(dt.$$.fragment),Oo=d(),ct=o("span"),Bo=n("Traitement des donn\xE9es d'entra\xEEnement"),_a=d(),w(ms.$$.fragment),ha=d(),Ms=o("p"),Fo=n("Commen\xE7ons par le pr\xE9traitement des donn\xE9es d\u2019entra\xEEnement. La partie la plus difficile est de g\xE9n\xE9rer des \xE9tiquettes pour la r\xE9ponse \xE0 la question, c\u2019est-\xE0-dire les positions de d\xE9but et de fin des "),qe=o("em"),Io=n("tokens"),Dn=n(" correspondant \xE0 la r\xE9ponse dans le contexte."),va=d(),zs=o("p"),Tn=n("Mais ne nous emballons pas. Tout d\u2019abord, \xE0 l\u2019aide d\u2019un "),Ln=o("em"),Vo=n("tokenizer"),Nn=n(", nous devons convertir le texte d\u2019entr\xE9e en identifiants que le mod\xE8le peut comprendre :"),ba=d(),w(mt.$$.fragment),en=d(),ne=o("p"),Ho=n("Comme mentionn\xE9 pr\xE9c\xE9demment, nous allons "),sn=o("em"),tn=n("finetuner"),Ro=n(" un mod\xE8le BERT, mais vous pouvez utiliser n\u2019importe quel autre type de mod\xE8le tant qu\u2019il a un "),nn=o("em"),ft=n("tokenizer"),qa=n(" rapide impl\xE9ment\xE9. Vous pouvez voir toutes les architectures qui sont livr\xE9es avec un "),Xe=o("em"),Uo=n("tokenizer"),On=n(" rapide dans "),_t=o("a"),Qo=n("ce tableau"),ga=n(", et pour v\xE9rifier que l\u2019objet "),fs=o("code"),xa=n("tokenizer"),ae=n(" que vous utilisez est bien soutenu par \u{1F917} "),Bn=o("em"),Fn=n("Tokenizers"),Go=n(" vous pouvez regarder son attribut "),In=o("code"),Vn=n("is_fast"),Wo=n(" :"),$a=d(),w(_s.$$.fragment),wa=d(),w(ht.$$.fragment),an=d(),Ke=o("p"),Jo=n("Nous pouvons transmettre \xE0 notre "),vt=o("em"),Xo=n("tokenizer"),Ko=n(" la question et le contexte ensemble. Il ins\xE9rera correctement les "),bt=o("em"),Yo=n("tokens"),Zo=n(" sp\xE9ciaux pour former une phrase comme celle-ci :"),on=d(),w(qt.$$.fragment),ja=d(),gt=o("p"),Ye=n("V\xE9rifions \xE0 nouveau :"),Ea=d(),w(hs.$$.fragment),ka=d(),w(xt.$$.fragment),Ds=d(),Se=o("p"),er=n("Les \xE9tiquettes sont l\u2019index des "),Hn=o("em"),ya=n("tokens"),m=n(" de d\xE9but et de fin de la r\xE9ponse. Le mod\xE8le sera charg\xE9 de pr\xE9dire dans l\u2019entr\xE9e un logit de d\xE9but et de fin par "),B=o("em"),il=n("token"),Ca=n(", les \xE9tiquettes th\xE9oriques \xE9tant les suivantes :"),sr=d(),Ts=o("div"),rn=o("img"),ul=d(),ln=o("img"),nr=d(),vs=o("p"),pl=n("Dans ce cas, le contexte n\u2019est pas trop long, mais certains des exemples du jeu de donn\xE9es ont des contextes tr\xE8s longs qui d\xE9passeront la longueur maximale que nous avons fix\xE9e (qui est de 384 dans ce cas). Comme nous l\u2019avons vu dans le "),ge=o("a"),dl=n("chapitre 6"),cl=n(" lorsque nous avons explor\xE9 le pipeline de "),Pa=o("code"),ml=n("question-answering"),fl=n(", nous allons traiter les contextes longs en cr\xE9ant plusieurs caract\xE9ristiques d\u2019entra\xEEnement \xE0 partir d\u2019un \xE9chantillon de notre jeu de donn\xE9es et avec une fen\xEAtre glissante entre eux."),Un=d(),$t=o("p"),Aa=n("Pour voir comment cela fonctionne sur notre exemple, nous pouvons limiter la longueur \xE0 100 et utiliser une fen\xEAtre glissante de 50 "),Sa=o("em"),fe=n("tokens"),_l=n(". Pour rappel, nous utilisons :"),ar=d(),Be=o("ul"),Qn=o("li"),Ma=o("code"),hl=n("max_length"),vl=n(" pour d\xE9finir la longueur maximale (ici 100)"),un=d(),Gn=o("li"),za=o("code"),Me=n('truncation="only_second"'),bl=n(" pour tronquer le contexte (qui est en deuxi\xE8me position) quand la question avec son contexte est trop longue"),ql=d(),wt=o("li"),Da=o("code"),gl=n("stride"),xl=n(" pour fixer le nombre de "),Ls=o("em"),$l=n("tokens"),wl=n(" se chevauchant entre deux morceaux successifs (ici 50)"),Ta=d(),bs=o("li"),La=o("code"),jl=n("return_overflowing_tokens=True"),El=n(" pour indiquer au "),Ns=o("em"),Na=n("tokenizer"),kl=n(" que l\u2019on veut les "),Ze=o("em"),yl=n("tokens"),Cl=n(" qui d\xE9bordent"),or=d(),w(Ee.$$.fragment),rr=d(),w(pn.$$.fragment),lr=d(),xe=o("p"),Pl=n("Comme nous pouvons le voir, notre exemple a \xE9t\xE9 divis\xE9 en quatre entr\xE9es, chacune d\u2019entre elles contenant la question et une partie du contexte. Notez que la r\xE9ponse \xE0 la question (\xAB Bernadette Soubirous \xBB) n\u2019appara\xEEt que dans la troisi\xE8me et la derni\xE8re entr\xE9e. Donc en traitant les longs contextes de cette fa\xE7on, nous allons cr\xE9er quelques exemples d\u2019entra\xEEnement o\xF9 la r\xE9ponse n\u2019est pas incluse dans le contexte. Pour ces exemples, les \xE9tiquettes seront "),dn=o("code"),Al=n("start_position = end_position = 0"),_e=n(" (donc nous pr\xE9disons le "),Oa=o("em"),Sl=n("token"),Ml=d(),Ba=o("code"),zl=n("[CLS]"),Dl=n("). Nous d\xE9finirons \xE9galement ces \xE9tiquettes dans le cas malheureux o\xF9 la r\xE9ponse a \xE9t\xE9 tronqu\xE9e de sorte que nous n\u2019avons que le d\xE9but (ou la fin) de celle-ci. Pour les exemples o\xF9 la r\xE9ponse est enti\xE8rement dans le contexte, les \xE9tiquettes seront l\u2019index du "),Fa=o("em"),cn=n("token"),Tl=n(" o\xF9 la r\xE9ponse commence et l\u2019index du "),Ia=o("em"),Ll=n("token"),yc=n(" o\xF9 la r\xE9ponse se termine."),_p=d(),ze=o("p"),Cc=n("Le jeu de donn\xE9es nous fournit le caract\xE8re de d\xE9but de la r\xE9ponse dans le contexte, et en ajoutant la longueur de la r\xE9ponse, nous pouvons trouver le caract\xE8re de fin dans le contexte. Pour faire correspondre ces indices aux "),Si=o("em"),Pc=n("tokens"),Ac=n(", nous devrons utiliser les correspondances "),Mi=o("em"),Sc=n("offset"),Mc=n(" que nous avons \xE9tudi\xE9s au "),Nl=o("a"),zc=n("chapitre 6"),Dc=n(". Nous pouvons faire en sorte que notre "),zi=o("em"),Tc=n("tokenizer"),Lc=n(" renvoie ces index en passant "),Di=o("code"),Nc=n("return_offsets_mapping=True"),Oc=n(" :"),hp=d(),w(ir.$$.fragment),vp=d(),w(ur.$$.fragment),bp=d(),De=o("p"),Bc=n("Comme nous pouvons le voir, nous r\xE9cup\xE9rons les identifiants d\u2019entr\xE9e, les "),Ti=o("em"),Fc=n("tokens"),Ic=n(" de type identifiant, le masque d\u2019attention, ainsi que la correspondance "),Li=o("em"),Vc=n("offset"),Hc=n(" dont nous avions besoin et une cl\xE9 suppl\xE9mentaire, "),Ni=o("code"),Rc=n("overflow_to_sample_mapping"),Uc=n(". La valeur correspondante nous sera utile lorsque nous tokeniserons plusieurs textes en m\xEAme temps (ce que nous devrions faire pour b\xE9n\xE9ficier du fait que notre "),Oi=o("em"),Qc=n("tokenizer"),Gc=n(" est en Rust). Puisqu\u2019un \xE9chantillon peut donner plusieurs caract\xE9ristiques, il fait correspondre chaque caract\xE9ristique \xE0 l\u2019exemple d\u2019o\xF9 elle provient. Parce qu\u2019ici nous avons seulement tokenis\xE9 un exemple, nous obtenons une liste de "),Bi=o("code"),Wc=n("0"),Jc=n(" :"),qp=d(),w(pr.$$.fragment),gp=d(),w(dr.$$.fragment),xp=d(),Ol=o("p"),Xc=n("Mais si nous tokenisons davantage d\u2019exemples, cela deviendra plus utile :"),$p=d(),w(cr.$$.fragment),wp=d(),w(mr.$$.fragment),jp=d(),Bl=o("p"),Kc=n("Comme nous pouvons le voir, les trois premiers exemples (aux indices 2, 3 et 4 de l\u2019ensemble d\u2019entra\xEEnement) ont chacun donn\xE9 quatre caract\xE9ristiques et le dernier exemple (\xE0 l\u2019indice 5 de l\u2019ensemble d\u2019entra\xEEnement) a donn\xE9 7 caract\xE9ristiques."),Ep=d(),Fl=o("p"),Yc=n("Ces informations seront utiles pour associer chaque caract\xE9ristique obtenue \xE0 son \xE9tiquette correspondante. Comme mentionn\xE9 pr\xE9c\xE9demment, ces \xE9tiquettes sont :"),kp=d(),Va=o("ul"),Il=o("li"),Fi=o("code"),Zc=n("(0, 0)"),em=n(" si la r\xE9ponse n\u2019est pas dans l\u2019espace correspondant du contexte."),sm=d(),es=o("li"),Ii=o("code"),tm=n("(start_position, end_position)"),nm=n(" si la r\xE9ponse est dans l\u2019espace correspondant du contexte, avec "),Vi=o("code"),am=n("start_position"),om=n(" \xE9tant l\u2019index du "),Hi=o("em"),rm=n("token"),lm=n(" (dans les identifiants d\u2019entr\xE9e) au d\xE9but de la r\xE9ponse et "),Ri=o("code"),im=n("end_position"),um=n(" \xE9tant l\u2019index du "),Ui=o("em"),pm=n("token"),dm=n(" (dans les identifiants d\u2019entr\xE9e) o\xF9 la r\xE9ponse se termine."),yp=d(),Te=o("p"),cm=n("Pour d\xE9terminer ce qui est le cas et, le cas \xE9ch\xE9ant, les positions des "),Qi=o("em"),mm=n("tokens"),fm=n(", nous trouvons d\u2019abord les indices qui commencent et finissent le contexte dans les identifiants d\u2019entr\xE9e. Nous pourrions utiliser les "),Gi=o("em"),_m=n("tokens"),hm=n(" de type identifiants pour le faire, mais puisque ceux-ci n\u2019existent pas n\xE9cessairement pour tous les mod\xE8les (DistilBERT ne les requiert pas par exemple), nous allons plut\xF4t utiliser la m\xE9thode "),Wi=o("code"),vm=n("sequence_ids()"),bm=n(" du "),Ji=o("code"),qm=n("BatchEncoding"),gm=n(" que notre "),Xi=o("em"),xm=n("tokenizer"),$m=n(" retourne."),Cp=d(),Le=o("p"),wm=n("Une fois que nous avons ces indices de "),Ki=o("em"),jm=n("tokens"),Em=n(", nous regardons les "),Yi=o("em"),km=n("offsets"),ym=n(" correspondants, qui sont des "),Zi=o("em"),Cm=n("tuples"),Pm=n(" de deux entiers repr\xE9sentant l\u2019\xE9tendue des caract\xE8res dans le contexte original. Nous pouvons ainsi d\xE9tecter si le morceau de contexte dans cette fonctionnalit\xE9 commence apr\xE8s la r\xE9ponse ou se termine avant que la r\xE9ponse ne commence (dans ce cas, l\u2019\xE9tiquette est "),eu=o("code"),Am=n("(0, 0)"),Sm=n("). Si ce n\u2019est pas le cas, nous bouclons pour trouver le premier et le dernier "),su=o("em"),Mm=n("token"),zm=n(" de la r\xE9ponse :"),Pp=d(),w(fr.$$.fragment),Ap=d(),w(_r.$$.fragment),Sp=d(),mn=o("p"),Dm=n("Jetons un coup d\u2019\u0153il  \xE0 quelques r\xE9sultats pour v\xE9rifier que notre approche est correcte. Pour la premi\xE8re caract\xE9ristique, nous trouvons "),tu=o("code"),Tm=n("(83, 85)"),Lm=n(" comme \xE9tiquettes. Comparons alors la r\xE9ponse th\xE9orique avec l\u2019\xE9tendue d\xE9cod\xE9e des "),nu=o("em"),Nm=n("tokens"),Om=n(" de 83 \xE0 85 (inclus) :"),Mp=d(),w(hr.$$.fragment),zp=d(),w(vr.$$.fragment),Dp=d(),Ha=o("p"),Bm=n("Cela correspond ! Maintenant v\xE9rifions l\u2019index 4, o\xF9 nous avons mis les \xE9tiquettes \xE0 "),au=o("code"),Fm=n("(0, 0)"),Im=n(", signifiant que la r\xE9ponse n\u2019est pas dans le morceau de contexte de cette caract\xE9ristique :"),Tp=d(),w(br.$$.fragment),Lp=d(),w(qr.$$.fragment),Np=d(),Vl=o("p"),Vm=n("En effet, nous ne voyons pas la r\xE9ponse dans le contexte."),Op=d(),w(Ra.$$.fragment),Bp=d(),Hl=o("p"),Hm=n("Maintenant que nous avons vu \xE9tape par \xE9tape comment pr\xE9traiter nos donn\xE9es d\u2019entra\xEEnement, nous pouvons les regrouper dans une fonction que nous appliquerons \xE0 l\u2019ensemble des donn\xE9es d\u2019entra\xEEnement. Nous allons rembourrer chaque caract\xE9ristique \xE0 la longueur maximale que nous avons d\xE9finie, car la plupart des contextes seront longs (et les \xE9chantillons correspondants seront divis\xE9s en plusieurs caract\xE9ristiques). Il n\u2019y a donc pas de r\xE9el avantage \xE0 appliquer un rembourrage dynamique ici :"),Fp=d(),w(gr.$$.fragment),Ip=d(),Rl=o("p"),Rm=n("Notez que nous avons d\xE9fini deux constantes pour d\xE9terminer la longueur maximale utilis\xE9e ainsi que la longueur de la fen\xEAtre glissante, et que nous avons ajout\xE9 un petit nettoyage avant la tok\xE9nisation : certaines des questions dans SQuAD ont des espaces suppl\xE9mentaires au d\xE9but et \xE0 la fin qui n\u2019ajoutent rien (et prennent de la place lors de la tok\xE9nisation si vous utilisez un mod\xE8le comme RoBERTa), donc nous avons supprim\xE9 ces espaces suppl\xE9mentaires."),Vp=d(),fn=o("p"),Um=n("Pour appliquer cette fonction \xE0 l\u2019ensemble de l\u2019entra\xEEnement, nous utilisons la m\xE9thode "),ou=o("code"),Qm=n("Dataset.map()"),Gm=n(" avec le flag "),ru=o("code"),Wm=n("batched=True"),Jm=n(". C\u2019est n\xE9cessaire ici car nous changeons la longueur du jeu de donn\xE9es (puisqu\u2019un exemple peut donner plusieurs caract\xE9ristiques d\u2019entra\xEEnement) :"),Hp=d(),w(xr.$$.fragment),Rp=d(),w($r.$$.fragment),Up=d(),Ul=o("p"),Xm=n("Comme nous pouvons le voir, le pr\xE9traitement a ajout\xE9 environ 1 000 caract\xE9ristiques. Notre ensemble d\u2019entra\xEEnement est maintenant pr\xEAt \xE0 \xEAtre utilis\xE9. Passons au pr\xE9traitement de l\u2019ensemble de validation !"),Qp=d(),Wn=o("h3"),Ua=o("a"),lu=o("span"),w(wr.$$.fragment),Km=d(),iu=o("span"),Ym=n("Traitement des donn\xE9es de validation"),Gp=d(),Qa=o("p"),Zm=n("Le pr\xE9traitement des donn\xE9es de validation sera l\xE9g\xE8rement plus facile car nous n\u2019avons pas besoin de g\xE9n\xE9rer des \xE9tiquettes (sauf si nous voulons calculer une perte de validation, mais elle ne nous aidera pas vraiment \xE0 comprendre la qualit\xE9 du mod\xE8le). Le r\xE9el plaisir sera d\u2019interpr\xE9ter les pr\xE9dictions du mod\xE8le dans des \xE9tendues du contexte original. Pour cela, il nous suffit de stocker les correspondances d\u2019"),uu=o("em"),ef=n("offset"),sf=n(" et un moyen de faire correspondre chaque caract\xE9ristique cr\xE9\xE9e \xE0 l\u2019exemple original dont elle provient. Puisqu\u2019il y a une colonne identifiant dans le jeu de donn\xE9es original, nous l\u2019utiliserons."),Wp=d(),ke=o("p"),tf=n("La seule chose que nous allons ajouter ici est un petit nettoyage des correspondances d\u2019"),pu=o("em"),nf=n("offset"),af=n(". Elles contiendront les "),du=o("em"),of=n("offsets"),rf=n(" pour la question et le contexte, mais une fois que nous serons \xE0 la phase de post-traitement, nous n\u2019aurons aucun moyen de savoir quelle partie des identifiants d\u2019entr\xE9e correspondait au contexte et quelle partie \xE9tait la question (la m\xE9thode "),cu=o("code"),lf=n("sequence_ids()"),uf=n(" que nous avons utilis\xE9e n\u2019est disponible que pour la sortie du "),mu=o("em"),pf=n("tokenizer"),df=n("). Donc, nous allons mettre les "),fu=o("em"),cf=n("offsets"),mf=n(" correspondant \xE0 la question \xE0 "),_u=o("code"),ff=n("None"),_f=n(" :"),Jp=d(),w(jr.$$.fragment),Xp=d(),Ql=o("p"),hf=n("Nous pouvons appliquer cette fonction sur l\u2019ensemble de validation comme pr\xE9c\xE9demment :"),Kp=d(),w(Er.$$.fragment),Yp=d(),w(kr.$$.fragment),Zp=d(),Gl=o("p"),vf=n("Dans ce cas, nous n\u2019avons ajout\xE9 que quelques centaines d\u2019\xE9chantillons, il semble donc que les contextes dans l\u2019ensemble de validation soient un peu plus courts."),ed=d(),Wl=o("p"),bf=n("Maintenant que nous avons pr\xE9trait\xE9 toutes les donn\xE9es, nous pouvons passer \xE0 l\u2019entra\xEEnement."),sd=d(),Et.c(),Jl=d(),Jn=o("h3"),Ga=o("a"),hu=o("span"),w(yr.$$.fragment),qf=d(),vu=o("span"),gf=n("Post-traitement"),td=d(),yt.c(),Xl=d(),_n=o("p"),xf=n("Le mod\xE8le produira des logits pour les positions de d\xE9but et de fin de la r\xE9ponse dans les identifiants d\u2019entr\xE9e, comme nous l\u2019avons vu lors de notre exploration du pipeline de "),bu=o("code"),$f=n("question-answering"),wf=d(),Kl=o("a"),jf=n("au chapitre 6"),Ef=n(". L\u2019\xE9tape de post-traitement sera similaire \xE0 ce que nous avons fait \xE0 ce chapitre l\xE0. Voici un rapide rappel des actions que nous avons prises :"),nd=d(),Os=o("ul"),Cr=o("li"),kf=n("nous avons masqu\xE9 les logits de d\xE9but et de fin correspondant aux "),qu=o("em"),yf=n("tokens"),Cf=n(" en dehors du contexte,"),Pf=d(),gu=o("li"),Af=n("nous avons ensuite converti les logits de d\xE9but et de fin en probabilit\xE9s en utilisant une fonction SoftMax,"),Sf=d(),Pr=o("li"),Mf=n("nous avons attribu\xE9 un score \xE0 chaque paire "),xu=o("code"),zf=n("(start_token, end_token)"),Df=n(" en prenant le produit des deux probabilit\xE9s correspondantes,"),Tf=d(),Xn=o("li"),Lf=n("nous avons cherch\xE9 la paire avec le score maximum qui donnait une r\xE9ponse valide (par exemple, un "),$u=o("code"),Nf=n("start_token"),Of=n(" inf\xE9rieur au "),wu=o("code"),Bf=n("end_token"),Ff=n(")."),ad=d(),Bs=o("p"),If=n("Ici, nous allons modifier l\xE9g\xE8rement ce processus car nous n\u2019avons pas besoin de calculer les scores r\xE9els (juste la r\xE9ponse pr\xE9dite). Cela signifie que nous pouvons sauter l\u2019\xE9tape de la SoftMax. Pour aller plus vite, nous ne donnerons pas non plus un score \xE0 toutes les paires "),ju=o("code"),Vf=n("(start_token, end_token)"),Hf=n(" possibles, mais seulement celles correspondant aux "),Eu=o("code"),Rf=n("n_best"),Uf=n(" logits les plus \xE9lev\xE9s (avec "),ku=o("code"),Qf=n("n_best=20"),Gf=n("). Puisque nous sautons la SoftMax, les scores seront des scores logi, et seront obtenus en prenant la somme des logits de d\xE9but et de fin (au lieu du produit, \xE0 cause de la r\xE8gle \\(\\log(ab) = \\log(a) + \\log(b)))."),od=d(),Fs=o("p"),Wf=n("Pour d\xE9montrer tout cela, nous aurons besoin d\u2019un certain type de pr\xE9dictions. Puisque nous n\u2019avons pas encore entra\xEEn\xE9 notre mod\xE8le, nous allons utiliser le mod\xE8le par d\xE9faut du pipeline de "),yu=o("code"),Jf=n("question-answering"),Xf=n(" pour g\xE9n\xE9rer quelques pr\xE9dictions sur une petite partie de l\u2019ensemble de validation. Nous pouvons utiliser la m\xEAme fonction de traitement que pr\xE9c\xE9demment car elle repose sur la constante globale "),Cu=o("code"),Kf=n("tokenizer"),Yf=n(", nous devons juste changer cet objet par le "),Pu=o("em"),Zf=n("tokenizer"),e_=n(" du mod\xE8le que nous voulons utiliser temporairement :"),rd=d(),w(Ar.$$.fragment),ld=d(),Wa=o("p"),s_=n("Maintenant que le pr\xE9traitement est termin\xE9, nous changeons le "),Au=o("em"),t_=n("tokenizer"),n_=n(" pour celui que nous avons choisi \xE0 l\u2019origine :"),id=d(),w(Sr.$$.fragment),ud=d(),Ja=o("p"),a_=n("Nous supprimons ensuite les colonnes de notre "),Su=o("code"),o_=n("eval_set"),r_=n(" qui ne sont pas attendues par le mod\xE8le. Nous construisons un batch avec tout de ce petit ensemble de validation et le passons au mod\xE8le. Si un GPU est disponible, nous l\u2019utilisons pour aller plus vite :"),pd=d(),Pt.c(),Yl=d(),ss=o("p"),l_=n("Maintenant, nous devons trouver la r\xE9ponse pr\xE9dite pour chaque exemple dans notre "),Mu=o("code"),i_=n("small_eval_set"),u_=n(". Un exemple peut avoir \xE9t\xE9 divis\xE9 en plusieurs caract\xE9ristiques dans "),zu=o("code"),p_=n("eval_set"),d_=n(", donc la premi\xE8re \xE9tape est de faire correspondre chaque exemple dans "),Du=o("code"),c_=n("small_eval_set"),m_=n(" aux caract\xE9ristiques correspondantes dans "),Tu=o("code"),f_=n("eval_set"),__=n(" :"),dd=d(),w(Mr.$$.fragment),cd=d(),Xa=o("p"),h_=n("Avec cela, nous pouvons vraiment nous mettre au travail en bouclant tous les exemples et, pour chaque exemple, toutes les caract\xE9ristiques associ\xE9es. Comme nous l\u2019avons dit pr\xE9c\xE9demment, nous allons regarder les scores logit pour les "),Lu=o("code"),v_=n("n_best"),b_=n(" logits de d\xE9but et logits de fin, en excluant les positions qui donnent :"),md=d(),hn=o("ul"),Nu=o("li"),q_=n("une r\xE9ponse qui ne serait pas dans le contexte"),g_=d(),Ou=o("li"),x_=n("une r\xE9ponse avec une longueur n\xE9gative"),$_=d(),zr=o("li"),w_=n("une r\xE9ponse qui est trop longue (nous limitons les possibilit\xE9s \xE0 "),Bu=o("code"),j_=n("max_answer_length=30"),E_=n(")"),fd=d(),Zl=o("p"),k_=n("Une fois que nous avons toutes les r\xE9ponses possibles not\xE9es pour un exemple, nous choisissons simplement celle qui a le meilleur score logit :"),_d=d(),w(Dr.$$.fragment),hd=d(),Ka=o("p"),y_=n("Le format final des r\xE9ponses pr\xE9dites est celui qui sera attendu par la m\xE9trique que nous allons utiliser. Comme d\u2019habitude, nous pouvons la charger \xE0 l\u2019aide de la biblioth\xE8que \u{1F917} "),Fu=o("em"),C_=n("Datasets"),P_=n(" :"),vd=d(),w(Tr.$$.fragment),bd=d(),ei=o("p"),A_=n("Cette m\xE9trique attend les r\xE9ponses pr\xE9dites dans le format que nous avons vu ci-dessus (une liste de dictionnaires avec une cl\xE9 pour l\u2019identifiant de l\u2019exemple et une cl\xE9 pour le texte pr\xE9dit) et les r\xE9ponses th\xE9oriques dans le format ci-dessous (une liste de dictionnaires avec une cl\xE9 pour l\u2019identifiant de l\u2019exemple et une cl\xE9 pour les r\xE9ponses possibles) :"),qd=d(),w(Lr.$$.fragment),gd=d(),si=o("p"),S_=n("Nous pouvons maintenant v\xE9rifier que nous obtenons des r\xE9sultats raisonnables en examinant le premier \xE9l\xE9ment des deux listes :"),xd=d(),w(Nr.$$.fragment),$d=d(),w(Or.$$.fragment),wd=d(),ti=o("p"),M_=n("Pas trop mal ! Voyons maintenant le score que la m\xE9trique nous donne :"),jd=d(),w(Br.$$.fragment),Ed=d(),w(Fr.$$.fragment),kd=d(),vn=o("p"),z_=n("Encore une fois, c\u2019est plut\xF4t bon si l\u2019on consid\xE8re que, d\u2019apr\xE8s "),Ir=o("a"),D_=n("le papier"),T_=n(" de DistilBERT, "),Iu=o("em"),L_=n("finetun\xE9"),N_=n(" sur SQuAD, ce mod\xE8le obtient 79,1 et 86,9 pour ces scores sur l\u2019ensemble du jeu de donn\xE9es."),yd=d(),Zn.c(),ni=d(),w(Vr.$$.fragment),Cd=d(),ai=o("p"),O_=n("Nous pouvons v\xE9rifier que cela fonctionne sur nos pr\xE9dictions :"),Pd=d(),w(Hr.$$.fragment),Ad=d(),w(Rr.$$.fragment),Sd=d(),Ya=o("p"),B_=n("C\u2019est bien ! Maintenant, utilisons ceci pour "),Vu=o("em"),F_=n("finetuner"),I_=n(" notre mod\xE8le."),Md=d(),Kn=o("h3"),Za=o("a"),Hu=o("span"),w(Ur.$$.fragment),V_=d(),oi=o("span"),Ru=o("i"),H_=n("Finetuning"),R_=n(" du mod\xE8le"),zd=d(),St.c(),ri=d(),eo=o("p"),U_=n("Comme d\u2019habitude, nous recevons un avertissement indiquant que certains poids ne sont pas utilis\xE9s (ceux de la t\xEAte de pr\xE9-entra\xEEnement) et que d\u2019autres sont initialis\xE9s de mani\xE8re al\xE9atoire (ceux de la t\xEAte de r\xE9ponse aux questions). Vous devriez \xEAtre habitu\xE9 \xE0 cela maintenant, mais cela signifie que ce mod\xE8le n\u2019est pas encore pr\xEAt \xE0 \xEAtre utilis\xE9 et qu\u2019il a besoin d\u2019\xEAtre "),Uu=o("em"),Q_=n("finetun\xE9"),G_=n(". Une bonne chose que nous soyons sur le point de le faire !"),Dd=d(),Is=o("p"),W_=n("Pour pouvoir pousser notre mod\xE8le vers le "),Qu=o("em"),J_=n("Hub"),X_=n(", nous devons nous connecter \xE0 Hugging Face. Si vous ex\xE9cutez ce code dans un "),Gu=o("em"),K_=n("notebook"),Y_=n(", vous pouvez le faire avec la fonction utilitaire suivante, qui affiche un "),Wu=o("em"),Z_=n("widget"),eh=n(" o\xF9 vous pouvez entrer vos identifiants de connexion :"),Td=d(),w(Qr.$$.fragment),Ld=d(),so=o("p"),sh=n("Si vous ne travaillez pas dans un "),Ju=o("em"),th=n("notebook"),nh=n(", tapez simplement la ligne suivante dans votre terminal :"),Nd=d(),w(Gr.$$.fragment),Od=d(),zt.c(),li=d(),ts=o("p"),ah=n("Par d\xE9faut, le d\xE9p\xF4t utilis\xE9 sera dans votre espace et nomm\xE9 apr\xE8s le r\xE9pertoire de sortie que vous avez d\xE9fini. Donc dans notre cas il sera dans "),Xu=o("code"),oh=n('"sgugger/bert-finetuned-squad"'),rh=n(". Nous pouvons passer outre en passant un "),Ku=o("code"),lh=n("hub_model_id"),ih=n(", par exemple, pour pousser le mod\xE8le dans l\u2019organisation "),Yu=o("code"),uh=n("huggingface_course"),ph=n(" nous avons utilis\xE9 "),Zu=o("code"),dh=n('hub_model_id= "huggingface_course/bert-finetuned-squad"'),ch=n(" (qui est le mod\xE8le que nous avons li\xE9 au d\xE9but de cette section)."),Bd=d(),Tt.c(),ii=d(),bn=o("p"),mh=n("Notez que pendant l\u2019entra\xEEnement, chaque fois que le mod\xE8le est sauvegard\xE9 (ici, \xE0 chaque \xE9poque), il est t\xE9l\xE9charg\xE9 sur le "),ep=o("em"),fh=n("Hub"),_h=n(" en arri\xE8re-plan. Ainsi, vous pourrez reprendre votre entra\xEEnement sur une autre machine si n\xE9cessaire. L\u2019ensemble de l\u2019entra\xEEnement prend un certain temps (un peu plus d\u2019une heure sur une Titan RTX), vous pouvez donc prendre un caf\xE9 ou relire les parties du cours qui vous ont sembl\xE9 plus difficiles pendant qu\u2019il se d\xE9roule. Notez \xE9galement que d\xE8s que la premi\xE8re \xE9poque est termin\xE9e, vous verrez des poids t\xE9l\xE9charg\xE9s sur le "),sp=o("em"),hh=n("Hub"),vh=n(" et vous pourrez commencer \xE0 jouer avec votre mod\xE8le sur sa page."),Fd=d(),Nt.c(),ui=d(),w(Wr.$$.fragment),Id=d(),pi=o("p"),bh=n("Super ! \xC0 titre de comparaison, les scores indiqu\xE9s dans l\u2019article de BERT pour ce t\xE2che sont de 80,8 et 88,5. Donc nous sommes exactement l\xE0 o\xF9 nous devrions \xEAtre."),Vd=d(),$e&&$e.c(),di=d(),Vs=o("p"),qh=n("\xC0 ce stade, vous pouvez utiliser le "),tp=o("em"),gh=n("widget"),xh=n(" d\u2019inf\xE9rence sur le "),np=o("em"),$h=n("Hub"),wh=n(" du mod\xE8le pour tester le mod\xE8le et le partager avec vos amis, votre famille et vos animaux pr\xE9f\xE9r\xE9s. Vous avez r\xE9ussi \xE0 "),ap=o("em"),jh=n("finetuner"),Eh=n(" un mod\xE8le sur une t\xE2che de r\xE9ponse \xE0 une question. F\xE9licitations !"),Hd=d(),w(to.$$.fragment),Rd=d(),we&&we.c(),ci=d(),Yn=o("h3"),no=o("a"),op=o("span"),w(Jr.$$.fragment),kh=d(),mi=o("span"),yh=n("Utilisation du mod\xE8le "),rp=o("i"),Ch=n("finetun\xE9"),Ud=d(),ns=o("p"),Ph=n("Nous vous avons d\xE9j\xE0 montr\xE9 comment vous pouvez utiliser le mod\xE8le que nous avons "),lp=o("em"),Ah=n("finetun\xE9"),Sh=n(" sur le "),ip=o("em"),Mh=n("Hub"),zh=n(" avec le "),up=o("em"),Dh=n("widget"),Th=n(" d\u2019inf\xE9rence. Pour l\u2019utiliser localement dans un "),pp=o("code"),Lh=n("pipeline"),Nh=n(", il suffit de sp\xE9cifier l\u2019identifiant du mod\xE8le :"),Qd=d(),w(Xr.$$.fragment),Gd=d(),w(Kr.$$.fragment),Wd=d(),fi=o("p"),Oh=n("Super ! Notre mod\xE8le fonctionne aussi bien que le mod\xE8le par d\xE9faut pour ce pipeline !"),this.h()},l(e){const u=qg('[data-svelte="svelte-1phssyn"]',document.head);p=r(u,"META",{name:!0,content:!0}),u.forEach(t),b=c(e),j(f.$$.fragment,e),y=c(e),S=r(e,"H1",{class:!0});var rl=l(S);q=r(rl,"A",{id:!0,class:!0,href:!0});var _i=l(q);g=r(_i,"SPAN",{});var dp=l(g);j(x.$$.fragment,dp),dp.forEach(t),_i.forEach(t),_=c(rl),M=r(rl,"SPAN",{});var cp=l(M);$=a(cp,"R\xE9ponse aux questions"),cp.forEach(t),rl.forEach(t),A=c(e),I.l(e),D=c(e),P=r(e,"P",{});var ao=l(P);V=a(ao,"Il est temps de s\u2019int\xE9resser \xE0 la r\xE9ponse aux questions ! Cette t\xE2che peut prendre plusieurs formes mais celle sur laquelle nous allons nous concentrer dans cette section est appel\xE9e r\xE9ponse aux questions "),L=r(ao,"EM",{});var hi=l(L);O=a(hi,"extractives"),hi.forEach(t),N=a(ao,". Il s\u2019agit de poser des questions sur un document et d\u2019identifier les r\xE9ponses sous forme de \xAB d\u2019\xE9tendue de texte \xBB dans le document lui-m\xEAme."),ao.forEach(t),R=c(e),j(Q.$$.fragment,e),J=c(e),H=r(e,"P",{});var Hs=l(H);G=a(Hs,"Nous allons "),ee=r(Hs,"EM",{});var vi=l(ee);Z=a(vi,"finetuner"),vi.forEach(t),F=a(Hs," un mod\xE8le BERT sur le "),X=r(Hs,"A",{href:!0,rel:!0});var bi=l(X);re=a(bi,"jeu de donn\xE9es SQuAD"),bi.forEach(t),se=a(Hs,", qui consiste en des questions pos\xE9es par des "),K=r(Hs,"EM",{});var qi=l(K);le=a(qi,"crowdworkers"),qi.forEach(t),Ce=a(Hs," sur un ensemble d\u2019articles de Wikipedia. Cela nous donnera un mod\xE8le capable de calculer des pr\xE9dictions comme celui-ci :"),Hs.forEach(t),ye=c(e),ie=r(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),l(ie).forEach(t),Fe=c(e),ue=r(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),l(ue).forEach(t),rs=c(e),W=r(e,"P",{});var ea=l(W);Y=a(ea,"Il s\u2019agit d\u2019une pr\xE9sentation du mod\xE8le qui a \xE9t\xE9 entra\xEEn\xE9 \xE0 l\u2019aide du code pr\xE9sent\xE9 dans cette section et qui a ensuit\xE9 \xE9t\xE9 t\xE9l\xE9charg\xE9 sur le "),$s=r(ea,"EM",{});var mp=l($s);Bt=a(mp,"Hub"),mp.forEach(t),ws=a(ea,". Vous pouvez le trouver "),Ie=r(ea,"A",{href:!0,rel:!0});var lv=l(Ie);Ve=a(lv,"ici"),lv.forEach(t),ea.forEach(t),js=c(e),j(he.$$.fragment,e),He=c(e),pe=r(e,"H2",{class:!0});var Kd=l(pe);ve=r(Kd,"A",{id:!0,class:!0,href:!0});var iv=l(ve);Re=r(iv,"SPAN",{});var uv=l(Re);j(Ue.$$.fragment,uv),uv.forEach(t),iv.forEach(t),mo=c(Kd),Ft=r(Kd,"SPAN",{});var pv=l(Ft);Js=a(pv,"Pr\xE9paration des donn\xE9es"),pv.forEach(t),Kd.forEach(t),jn=c(e),be=r(e,"P",{});var gi=l(be);fo=a(gi,"Le jeu de donn\xE9es le plus utilis\xE9 comme r\xE9f\xE9rence acad\xE9mique pour la r\xE9ponse extractive aux questions est "),ls=r(gi,"A",{href:!0,rel:!0});var dv=l(ls);_o=a(dv,"SQuAD"),dv.forEach(t),ho=a(gi,". C\u2019est donc celui que nous utiliserons ici. Il existe \xE9galement une version plus difficile "),Es=r(gi,"A",{href:!0,rel:!0});var cv=l(Es);Xs=a(cv,"SQuAD v2"),cv.forEach(t),sa=a(gi,", qui comprend des questions sans r\xE9ponse. Tant que votre propre jeu de donn\xE9es contient une colonne pour les contextes, une colonne pour les questions et une colonne pour les r\xE9ponses, vous devriez \xEAtre en mesure d\u2019adapter les \xE9tapes ci-dessous."),gi.forEach(t),te=c(e),is=r(e,"H3",{class:!0});var Yd=l(is);Qe=r(Yd,"A",{id:!0,class:!0,href:!0});var mv=l(Qe);En=r(mv,"SPAN",{});var fv=l(En);j(Ks.$$.fragment,fv),fv.forEach(t),mv.forEach(t),kn=c(Yd),yn=r(Yd,"SPAN",{});var _v=l(yn);vo=a(_v,"Le jeu de donn\xE9es SQuAD"),_v.forEach(t),Yd.forEach(t),It=c(e),ks=r(e,"P",{});var Zd=l(ks);bo=a(Zd,"Comme d\u2019habitude, nous pouvons t\xE9l\xE9charger et mettre en cache le jeu de donn\xE9es en une seule \xE9tape gr\xE2ce \xE0 "),Ys=r(Zd,"CODE",{});var hv=l(Ys);qo=a(hv,"load_dataset()"),hv.forEach(t),go=a(Zd," :"),Zd.forEach(t),Vt=c(e),j(Zs.$$.fragment,e),ta=c(e),ys=r(e,"P",{});var vv=l(ys);xo=a(vv,"Nous pouvons jeter un coup d\u2019\u0153il \xE0 cet objet pour en savoir plus sur le jeu de donn\xE9es SQuAD :"),vv.forEach(t),na=c(e),j(us.$$.fragment,e),aa=c(e),j(et.$$.fragment,e),Cn=c(e),me=r(e,"P",{});var oo=l(me);oa=a(oo,"On dirait que nous avons tout ce dont nous avons besoin avec les champs "),Pe=r(oo,"CODE",{});var bv=l(Pe);$o=a(bv,"context"),bv.forEach(t),Pn=a(oo,", "),An=r(oo,"CODE",{});var qv=l(An);wo=a(qv,"question"),qv.forEach(t),Sn=a(oo," et "),Mn=r(oo,"CODE",{});var gv=l(Mn);jo=a(gv,"answers"),gv.forEach(t),ra=a(oo,". Affichons-les pour le premier \xE9l\xE9ment de notre ensemble d\u2019entra\xEEnement :"),oo.forEach(t),Cs=c(e),j(Ps.$$.fragment,e),de=c(e),j(st.$$.fragment,e),Ht=c(e),oe=r(e,"P",{});var as=l(oe);Eo=a(as,"Les champs "),tt=r(as,"CODE",{});var xv=l(tt);ko=a(xv,"context"),xv.forEach(t),yo=a(as," et "),nt=r(as,"CODE",{});var $v=l(nt);Co=a($v,"question"),$v.forEach(t),Po=a(as," sont tr\xE8s simples \xE0 utiliser. Le champ "),at=r(as,"CODE",{});var wv=l(at);Ao=a(wv,"answers"),wv.forEach(t),So=a(as," est un peu plus d\xE9licat car il compile un dictionnaire avec deux champs qui sont tous deux des listes. C\u2019est le format qui sera attendu par la m\xE9trique "),ot=r(as,"CODE",{});var jv=l(ot);Mo=a(jv,"squad"),jv.forEach(t),zo=a(as," lors de l\u2019\xE9valuation. Si vous utilisez vos propres donn\xE9es, vous n\u2019avez pas n\xE9cessairement besoin de vous soucier de mettre les r\xE9ponses dans le m\xEAme format. Le champ "),Rt=r(as,"CODE",{});var Ev=l(Rt);rt=a(Ev,"text"),Ev.forEach(t),la=a(as," est assez \xE9vident et le champ "),ps=r(as,"CODE",{});var kv=l(ps);ia=a(kv,"answer_start"),kv.forEach(t),Ut=a(as," contient l\u2019indice du caract\xE8re de d\xE9part de chaque r\xE9ponse dans le contexte."),as.forEach(t),ua=c(e),ds=r(e,"P",{});var ec=l(ds);lt=a(ec,"Pendant l\u2019entra\xEEnement, il n\u2019y a qu\u2019une seule r\xE9ponse possible. Nous pouvons v\xE9rifier cela en utilisant la m\xE9thode "),Qt=r(ec,"CODE",{});var yv=l(Qt);Ge=a(yv,"Dataset.filter()"),yv.forEach(t),Do=a(ec," :"),ec.forEach(t),Gt=c(e),j(it.$$.fragment,e),pa=c(e),j(cs.$$.fragment,e),da=c(e),Wt=r(e,"P",{});var Cv=l(Wt);ca=a(Cv,"Pour l\u2019\xE9valuation, cependant, il existe plusieurs r\xE9ponses possibles pour chaque \xE9chantillon, qui peuvent \xEAtre identiques ou diff\xE9rentes :"),Cv.forEach(t),We=c(e),j(Ae.$$.fragment,e),Jt=c(e),j(Oe.$$.fragment,e),ma=c(e),Je=r(e,"P",{});var sc=l(Je);To=a(sc,"Nous ne nous plongerons pas dans le script d\u2019\xE9valuation car tout sera envelopp\xE9 pour nous par une m\xE9trique de \u{1F917} "),Xt=r(sc,"EM",{});var Pv=l(Xt);Kt=a(Pv,"Datasets"),Pv.forEach(t),Lo=a(sc,". La version courte est que certaines des questions ont plusieurs r\xE9ponses possibles, et ce script va comparer une r\xE9ponse pr\xE9dite \xE0 toutes les r\xE9ponses acceptables et prendre le meilleur score. Par exemple, si nous regardons l\u2019\xE9chantillon de l\u2019indice 2 :"),sc.forEach(t),zn=c(e),j(je.$$.fragment,e),As=c(e),j(ut.$$.fragment,e),Yt=c(e),Zt=r(e,"P",{});var Av=l(Zt);No=a(Av,"nous pouvons voir que la r\xE9ponse peut effectivement \xEAtre l\u2019une des trois possibilit\xE9s que nous avons vues pr\xE9c\xE9demment."),Av.forEach(t),fa=c(e),ce=r(e,"H3",{class:!0});var tc=l(ce);Ss=r(tc,"A",{id:!0,class:!0,href:!0});var Sv=l(Ss);pt=r(Sv,"SPAN",{});var Mv=l(pt);j(dt.$$.fragment,Mv),Mv.forEach(t),Sv.forEach(t),Oo=c(tc),ct=r(tc,"SPAN",{});var zv=l(ct);Bo=a(zv,"Traitement des donn\xE9es d'entra\xEEnement"),zv.forEach(t),tc.forEach(t),_a=c(e),j(ms.$$.fragment,e),ha=c(e),Ms=r(e,"P",{});var nc=l(Ms);Fo=a(nc,"Commen\xE7ons par le pr\xE9traitement des donn\xE9es d\u2019entra\xEEnement. La partie la plus difficile est de g\xE9n\xE9rer des \xE9tiquettes pour la r\xE9ponse \xE0 la question, c\u2019est-\xE0-dire les positions de d\xE9but et de fin des "),qe=r(nc,"EM",{});var Dv=l(qe);Io=a(Dv,"tokens"),Dv.forEach(t),Dn=a(nc," correspondant \xE0 la r\xE9ponse dans le contexte."),nc.forEach(t),va=c(e),zs=r(e,"P",{});var ac=l(zs);Tn=a(ac,"Mais ne nous emballons pas. Tout d\u2019abord, \xE0 l\u2019aide d\u2019un "),Ln=r(ac,"EM",{});var Tv=l(Ln);Vo=a(Tv,"tokenizer"),Tv.forEach(t),Nn=a(ac,", nous devons convertir le texte d\u2019entr\xE9e en identifiants que le mod\xE8le peut comprendre :"),ac.forEach(t),ba=c(e),j(mt.$$.fragment,e),en=c(e),ne=r(e,"P",{});var Ne=l(ne);Ho=a(Ne,"Comme mentionn\xE9 pr\xE9c\xE9demment, nous allons "),sn=r(Ne,"EM",{});var Lv=l(sn);tn=a(Lv,"finetuner"),Lv.forEach(t),Ro=a(Ne," un mod\xE8le BERT, mais vous pouvez utiliser n\u2019importe quel autre type de mod\xE8le tant qu\u2019il a un "),nn=r(Ne,"EM",{});var Nv=l(nn);ft=a(Nv,"tokenizer"),Nv.forEach(t),qa=a(Ne," rapide impl\xE9ment\xE9. Vous pouvez voir toutes les architectures qui sont livr\xE9es avec un "),Xe=r(Ne,"EM",{});var Ov=l(Xe);Uo=a(Ov,"tokenizer"),Ov.forEach(t),On=a(Ne," rapide dans "),_t=r(Ne,"A",{href:!0,rel:!0});var Bv=l(_t);Qo=a(Bv,"ce tableau"),Bv.forEach(t),ga=a(Ne,", et pour v\xE9rifier que l\u2019objet "),fs=r(Ne,"CODE",{});var Fv=l(fs);xa=a(Fv,"tokenizer"),Fv.forEach(t),ae=a(Ne," que vous utilisez est bien soutenu par \u{1F917} "),Bn=r(Ne,"EM",{});var Iv=l(Bn);Fn=a(Iv,"Tokenizers"),Iv.forEach(t),Go=a(Ne," vous pouvez regarder son attribut "),In=r(Ne,"CODE",{});var Vv=l(In);Vn=a(Vv,"is_fast"),Vv.forEach(t),Wo=a(Ne," :"),Ne.forEach(t),$a=c(e),j(_s.$$.fragment,e),wa=c(e),j(ht.$$.fragment,e),an=c(e),Ke=r(e,"P",{});var xi=l(Ke);Jo=a(xi,"Nous pouvons transmettre \xE0 notre "),vt=r(xi,"EM",{});var Hv=l(vt);Xo=a(Hv,"tokenizer"),Hv.forEach(t),Ko=a(xi," la question et le contexte ensemble. Il ins\xE9rera correctement les "),bt=r(xi,"EM",{});var Rv=l(bt);Yo=a(Rv,"tokens"),Rv.forEach(t),Zo=a(xi," sp\xE9ciaux pour former une phrase comme celle-ci :"),xi.forEach(t),on=c(e),j(qt.$$.fragment,e),ja=c(e),gt=r(e,"P",{});var Uv=l(gt);Ye=a(Uv,"V\xE9rifions \xE0 nouveau :"),Uv.forEach(t),Ea=c(e),j(hs.$$.fragment,e),ka=c(e),j(xt.$$.fragment,e),Ds=c(e),Se=r(e,"P",{});var $i=l(Se);er=a($i,"Les \xE9tiquettes sont l\u2019index des "),Hn=r($i,"EM",{});var Qv=l(Hn);ya=a(Qv,"tokens"),Qv.forEach(t),m=a($i," de d\xE9but et de fin de la r\xE9ponse. Le mod\xE8le sera charg\xE9 de pr\xE9dire dans l\u2019entr\xE9e un logit de d\xE9but et de fin par "),B=r($i,"EM",{});var Gv=l(B);il=a(Gv,"token"),Gv.forEach(t),Ca=a($i,", les \xE9tiquettes th\xE9oriques \xE9tant les suivantes :"),$i.forEach(t),sr=c(e),Ts=r(e,"DIV",{class:!0});var oc=l(Ts);rn=r(oc,"IMG",{class:!0,src:!0,alt:!0}),ul=c(oc),ln=r(oc,"IMG",{class:!0,src:!0,alt:!0}),oc.forEach(t),nr=c(e),vs=r(e,"P",{});var wi=l(vs);pl=a(wi,"Dans ce cas, le contexte n\u2019est pas trop long, mais certains des exemples du jeu de donn\xE9es ont des contextes tr\xE8s longs qui d\xE9passeront la longueur maximale que nous avons fix\xE9e (qui est de 384 dans ce cas). Comme nous l\u2019avons vu dans le "),ge=r(wi,"A",{href:!0});var Wv=l(ge);dl=a(Wv,"chapitre 6"),Wv.forEach(t),cl=a(wi," lorsque nous avons explor\xE9 le pipeline de "),Pa=r(wi,"CODE",{});var Jv=l(Pa);ml=a(Jv,"question-answering"),Jv.forEach(t),fl=a(wi,", nous allons traiter les contextes longs en cr\xE9ant plusieurs caract\xE9ristiques d\u2019entra\xEEnement \xE0 partir d\u2019un \xE9chantillon de notre jeu de donn\xE9es et avec une fen\xEAtre glissante entre eux."),wi.forEach(t),Un=c(e),$t=r(e,"P",{});var rc=l($t);Aa=a(rc,"Pour voir comment cela fonctionne sur notre exemple, nous pouvons limiter la longueur \xE0 100 et utiliser une fen\xEAtre glissante de 50 "),Sa=r(rc,"EM",{});var Xv=l(Sa);fe=a(Xv,"tokens"),Xv.forEach(t),_l=a(rc,". Pour rappel, nous utilisons :"),rc.forEach(t),ar=c(e),Be=r(e,"UL",{});var ro=l(Be);Qn=r(ro,"LI",{});var Bh=l(Qn);Ma=r(Bh,"CODE",{});var Kv=l(Ma);hl=a(Kv,"max_length"),Kv.forEach(t),vl=a(Bh," pour d\xE9finir la longueur maximale (ici 100)"),Bh.forEach(t),un=c(ro),Gn=r(ro,"LI",{});var Fh=l(Gn);za=r(Fh,"CODE",{});var Yv=l(za);Me=a(Yv,'truncation="only_second"'),Yv.forEach(t),bl=a(Fh," pour tronquer le contexte (qui est en deuxi\xE8me position) quand la question avec son contexte est trop longue"),Fh.forEach(t),ql=c(ro),wt=r(ro,"LI",{});var fp=l(wt);Da=r(fp,"CODE",{});var Zv=l(Da);gl=a(Zv,"stride"),Zv.forEach(t),xl=a(fp," pour fixer le nombre de "),Ls=r(fp,"EM",{});var eb=l(Ls);$l=a(eb,"tokens"),eb.forEach(t),wl=a(fp," se chevauchant entre deux morceaux successifs (ici 50)"),fp.forEach(t),Ta=c(ro),bs=r(ro,"LI",{});var ll=l(bs);La=r(ll,"CODE",{});var sb=l(La);jl=a(sb,"return_overflowing_tokens=True"),sb.forEach(t),El=a(ll," pour indiquer au "),Ns=r(ll,"EM",{});var tb=l(Ns);Na=a(tb,"tokenizer"),tb.forEach(t),kl=a(ll," que l\u2019on veut les "),Ze=r(ll,"EM",{});var nb=l(Ze);yl=a(nb,"tokens"),nb.forEach(t),Cl=a(ll," qui d\xE9bordent"),ll.forEach(t),ro.forEach(t),or=c(e),j(Ee.$$.fragment,e),rr=c(e),j(pn.$$.fragment,e),lr=c(e),xe=r(e,"P",{});var Rs=l(xe);Pl=a(Rs,"Comme nous pouvons le voir, notre exemple a \xE9t\xE9 divis\xE9 en quatre entr\xE9es, chacune d\u2019entre elles contenant la question et une partie du contexte. Notez que la r\xE9ponse \xE0 la question (\xAB Bernadette Soubirous \xBB) n\u2019appara\xEEt que dans la troisi\xE8me et la derni\xE8re entr\xE9e. Donc en traitant les longs contextes de cette fa\xE7on, nous allons cr\xE9er quelques exemples d\u2019entra\xEEnement o\xF9 la r\xE9ponse n\u2019est pas incluse dans le contexte. Pour ces exemples, les \xE9tiquettes seront "),dn=r(Rs,"CODE",{});var ab=l(dn);Al=a(ab,"start_position = end_position = 0"),ab.forEach(t),_e=a(Rs," (donc nous pr\xE9disons le "),Oa=r(Rs,"EM",{});var ob=l(Oa);Sl=a(ob,"token"),ob.forEach(t),Ml=c(Rs),Ba=r(Rs,"CODE",{});var rb=l(Ba);zl=a(rb,"[CLS]"),rb.forEach(t),Dl=a(Rs,"). Nous d\xE9finirons \xE9galement ces \xE9tiquettes dans le cas malheureux o\xF9 la r\xE9ponse a \xE9t\xE9 tronqu\xE9e de sorte que nous n\u2019avons que le d\xE9but (ou la fin) de celle-ci. Pour les exemples o\xF9 la r\xE9ponse est enti\xE8rement dans le contexte, les \xE9tiquettes seront l\u2019index du "),Fa=r(Rs,"EM",{});var lb=l(Fa);cn=a(lb,"token"),lb.forEach(t),Tl=a(Rs," o\xF9 la r\xE9ponse commence et l\u2019index du "),Ia=r(Rs,"EM",{});var ib=l(Ia);Ll=a(ib,"token"),ib.forEach(t),yc=a(Rs," o\xF9 la r\xE9ponse se termine."),Rs.forEach(t),_p=c(e),ze=r(e,"P",{});var Us=l(ze);Cc=a(Us,"Le jeu de donn\xE9es nous fournit le caract\xE8re de d\xE9but de la r\xE9ponse dans le contexte, et en ajoutant la longueur de la r\xE9ponse, nous pouvons trouver le caract\xE8re de fin dans le contexte. Pour faire correspondre ces indices aux "),Si=r(Us,"EM",{});var ub=l(Si);Pc=a(ub,"tokens"),ub.forEach(t),Ac=a(Us,", nous devrons utiliser les correspondances "),Mi=r(Us,"EM",{});var pb=l(Mi);Sc=a(pb,"offset"),pb.forEach(t),Mc=a(Us," que nous avons \xE9tudi\xE9s au "),Nl=r(Us,"A",{href:!0});var db=l(Nl);zc=a(db,"chapitre 6"),db.forEach(t),Dc=a(Us,". Nous pouvons faire en sorte que notre "),zi=r(Us,"EM",{});var cb=l(zi);Tc=a(cb,"tokenizer"),cb.forEach(t),Lc=a(Us," renvoie ces index en passant "),Di=r(Us,"CODE",{});var mb=l(Di);Nc=a(mb,"return_offsets_mapping=True"),mb.forEach(t),Oc=a(Us," :"),Us.forEach(t),hp=c(e),j(ir.$$.fragment,e),vp=c(e),j(ur.$$.fragment,e),bp=c(e),De=r(e,"P",{});var Qs=l(De);Bc=a(Qs,"Comme nous pouvons le voir, nous r\xE9cup\xE9rons les identifiants d\u2019entr\xE9e, les "),Ti=r(Qs,"EM",{});var fb=l(Ti);Fc=a(fb,"tokens"),fb.forEach(t),Ic=a(Qs," de type identifiant, le masque d\u2019attention, ainsi que la correspondance "),Li=r(Qs,"EM",{});var _b=l(Li);Vc=a(_b,"offset"),_b.forEach(t),Hc=a(Qs," dont nous avions besoin et une cl\xE9 suppl\xE9mentaire, "),Ni=r(Qs,"CODE",{});var hb=l(Ni);Rc=a(hb,"overflow_to_sample_mapping"),hb.forEach(t),Uc=a(Qs,". La valeur correspondante nous sera utile lorsque nous tokeniserons plusieurs textes en m\xEAme temps (ce que nous devrions faire pour b\xE9n\xE9ficier du fait que notre "),Oi=r(Qs,"EM",{});var vb=l(Oi);Qc=a(vb,"tokenizer"),vb.forEach(t),Gc=a(Qs," est en Rust). Puisqu\u2019un \xE9chantillon peut donner plusieurs caract\xE9ristiques, il fait correspondre chaque caract\xE9ristique \xE0 l\u2019exemple d\u2019o\xF9 elle provient. Parce qu\u2019ici nous avons seulement tokenis\xE9 un exemple, nous obtenons une liste de "),Bi=r(Qs,"CODE",{});var bb=l(Bi);Wc=a(bb,"0"),bb.forEach(t),Jc=a(Qs," :"),Qs.forEach(t),qp=c(e),j(pr.$$.fragment,e),gp=c(e),j(dr.$$.fragment,e),xp=c(e),Ol=r(e,"P",{});var qb=l(Ol);Xc=a(qb,"Mais si nous tokenisons davantage d\u2019exemples, cela deviendra plus utile :"),qb.forEach(t),$p=c(e),j(cr.$$.fragment,e),wp=c(e),j(mr.$$.fragment,e),jp=c(e),Bl=r(e,"P",{});var gb=l(Bl);Kc=a(gb,"Comme nous pouvons le voir, les trois premiers exemples (aux indices 2, 3 et 4 de l\u2019ensemble d\u2019entra\xEEnement) ont chacun donn\xE9 quatre caract\xE9ristiques et le dernier exemple (\xE0 l\u2019indice 5 de l\u2019ensemble d\u2019entra\xEEnement) a donn\xE9 7 caract\xE9ristiques."),gb.forEach(t),Ep=c(e),Fl=r(e,"P",{});var xb=l(Fl);Yc=a(xb,"Ces informations seront utiles pour associer chaque caract\xE9ristique obtenue \xE0 son \xE9tiquette correspondante. Comme mentionn\xE9 pr\xE9c\xE9demment, ces \xE9tiquettes sont :"),xb.forEach(t),kp=c(e),Va=r(e,"UL",{});var lc=l(Va);Il=r(lc,"LI",{});var Ih=l(Il);Fi=r(Ih,"CODE",{});var $b=l(Fi);Zc=a($b,"(0, 0)"),$b.forEach(t),em=a(Ih," si la r\xE9ponse n\u2019est pas dans l\u2019espace correspondant du contexte."),Ih.forEach(t),sm=c(lc),es=r(lc,"LI",{});var Ot=l(es);Ii=r(Ot,"CODE",{});var wb=l(Ii);tm=a(wb,"(start_position, end_position)"),wb.forEach(t),nm=a(Ot," si la r\xE9ponse est dans l\u2019espace correspondant du contexte, avec "),Vi=r(Ot,"CODE",{});var jb=l(Vi);am=a(jb,"start_position"),jb.forEach(t),om=a(Ot," \xE9tant l\u2019index du "),Hi=r(Ot,"EM",{});var Eb=l(Hi);rm=a(Eb,"token"),Eb.forEach(t),lm=a(Ot," (dans les identifiants d\u2019entr\xE9e) au d\xE9but de la r\xE9ponse et "),Ri=r(Ot,"CODE",{});var kb=l(Ri);im=a(kb,"end_position"),kb.forEach(t),um=a(Ot," \xE9tant l\u2019index du "),Ui=r(Ot,"EM",{});var yb=l(Ui);pm=a(yb,"token"),yb.forEach(t),dm=a(Ot," (dans les identifiants d\u2019entr\xE9e) o\xF9 la r\xE9ponse se termine."),Ot.forEach(t),lc.forEach(t),yp=c(e),Te=r(e,"P",{});var Gs=l(Te);cm=a(Gs,"Pour d\xE9terminer ce qui est le cas et, le cas \xE9ch\xE9ant, les positions des "),Qi=r(Gs,"EM",{});var Cb=l(Qi);mm=a(Cb,"tokens"),Cb.forEach(t),fm=a(Gs,", nous trouvons d\u2019abord les indices qui commencent et finissent le contexte dans les identifiants d\u2019entr\xE9e. Nous pourrions utiliser les "),Gi=r(Gs,"EM",{});var Pb=l(Gi);_m=a(Pb,"tokens"),Pb.forEach(t),hm=a(Gs," de type identifiants pour le faire, mais puisque ceux-ci n\u2019existent pas n\xE9cessairement pour tous les mod\xE8les (DistilBERT ne les requiert pas par exemple), nous allons plut\xF4t utiliser la m\xE9thode "),Wi=r(Gs,"CODE",{});var Ab=l(Wi);vm=a(Ab,"sequence_ids()"),Ab.forEach(t),bm=a(Gs," du "),Ji=r(Gs,"CODE",{});var Sb=l(Ji);qm=a(Sb,"BatchEncoding"),Sb.forEach(t),gm=a(Gs," que notre "),Xi=r(Gs,"EM",{});var Mb=l(Xi);xm=a(Mb,"tokenizer"),Mb.forEach(t),$m=a(Gs," retourne."),Gs.forEach(t),Cp=c(e),Le=r(e,"P",{});var Ws=l(Le);wm=a(Ws,"Une fois que nous avons ces indices de "),Ki=r(Ws,"EM",{});var zb=l(Ki);jm=a(zb,"tokens"),zb.forEach(t),Em=a(Ws,", nous regardons les "),Yi=r(Ws,"EM",{});var Db=l(Yi);km=a(Db,"offsets"),Db.forEach(t),ym=a(Ws," correspondants, qui sont des "),Zi=r(Ws,"EM",{});var Tb=l(Zi);Cm=a(Tb,"tuples"),Tb.forEach(t),Pm=a(Ws," de deux entiers repr\xE9sentant l\u2019\xE9tendue des caract\xE8res dans le contexte original. Nous pouvons ainsi d\xE9tecter si le morceau de contexte dans cette fonctionnalit\xE9 commence apr\xE8s la r\xE9ponse ou se termine avant que la r\xE9ponse ne commence (dans ce cas, l\u2019\xE9tiquette est "),eu=r(Ws,"CODE",{});var Lb=l(eu);Am=a(Lb,"(0, 0)"),Lb.forEach(t),Sm=a(Ws,"). Si ce n\u2019est pas le cas, nous bouclons pour trouver le premier et le dernier "),su=r(Ws,"EM",{});var Nb=l(su);Mm=a(Nb,"token"),Nb.forEach(t),zm=a(Ws," de la r\xE9ponse :"),Ws.forEach(t),Pp=c(e),j(fr.$$.fragment,e),Ap=c(e),j(_r.$$.fragment,e),Sp=c(e),mn=r(e,"P",{});var ji=l(mn);Dm=a(ji,"Jetons un coup d\u2019\u0153il  \xE0 quelques r\xE9sultats pour v\xE9rifier que notre approche est correcte. Pour la premi\xE8re caract\xE9ristique, nous trouvons "),tu=r(ji,"CODE",{});var Ob=l(tu);Tm=a(Ob,"(83, 85)"),Ob.forEach(t),Lm=a(ji," comme \xE9tiquettes. Comparons alors la r\xE9ponse th\xE9orique avec l\u2019\xE9tendue d\xE9cod\xE9e des "),nu=r(ji,"EM",{});var Bb=l(nu);Nm=a(Bb,"tokens"),Bb.forEach(t),Om=a(ji," de 83 \xE0 85 (inclus) :"),ji.forEach(t),Mp=c(e),j(hr.$$.fragment,e),zp=c(e),j(vr.$$.fragment,e),Dp=c(e),Ha=r(e,"P",{});var ic=l(Ha);Bm=a(ic,"Cela correspond ! Maintenant v\xE9rifions l\u2019index 4, o\xF9 nous avons mis les \xE9tiquettes \xE0 "),au=r(ic,"CODE",{});var Fb=l(au);Fm=a(Fb,"(0, 0)"),Fb.forEach(t),Im=a(ic,", signifiant que la r\xE9ponse n\u2019est pas dans le morceau de contexte de cette caract\xE9ristique :"),ic.forEach(t),Tp=c(e),j(br.$$.fragment,e),Lp=c(e),j(qr.$$.fragment,e),Np=c(e),Vl=r(e,"P",{});var Ib=l(Vl);Vm=a(Ib,"En effet, nous ne voyons pas la r\xE9ponse dans le contexte."),Ib.forEach(t),Op=c(e),j(Ra.$$.fragment,e),Bp=c(e),Hl=r(e,"P",{});var Vb=l(Hl);Hm=a(Vb,"Maintenant que nous avons vu \xE9tape par \xE9tape comment pr\xE9traiter nos donn\xE9es d\u2019entra\xEEnement, nous pouvons les regrouper dans une fonction que nous appliquerons \xE0 l\u2019ensemble des donn\xE9es d\u2019entra\xEEnement. Nous allons rembourrer chaque caract\xE9ristique \xE0 la longueur maximale que nous avons d\xE9finie, car la plupart des contextes seront longs (et les \xE9chantillons correspondants seront divis\xE9s en plusieurs caract\xE9ristiques). Il n\u2019y a donc pas de r\xE9el avantage \xE0 appliquer un rembourrage dynamique ici :"),Vb.forEach(t),Fp=c(e),j(gr.$$.fragment,e),Ip=c(e),Rl=r(e,"P",{});var Hb=l(Rl);Rm=a(Hb,"Notez que nous avons d\xE9fini deux constantes pour d\xE9terminer la longueur maximale utilis\xE9e ainsi que la longueur de la fen\xEAtre glissante, et que nous avons ajout\xE9 un petit nettoyage avant la tok\xE9nisation : certaines des questions dans SQuAD ont des espaces suppl\xE9mentaires au d\xE9but et \xE0 la fin qui n\u2019ajoutent rien (et prennent de la place lors de la tok\xE9nisation si vous utilisez un mod\xE8le comme RoBERTa), donc nous avons supprim\xE9 ces espaces suppl\xE9mentaires."),Hb.forEach(t),Vp=c(e),fn=r(e,"P",{});var Ei=l(fn);Um=a(Ei,"Pour appliquer cette fonction \xE0 l\u2019ensemble de l\u2019entra\xEEnement, nous utilisons la m\xE9thode "),ou=r(Ei,"CODE",{});var Rb=l(ou);Qm=a(Rb,"Dataset.map()"),Rb.forEach(t),Gm=a(Ei," avec le flag "),ru=r(Ei,"CODE",{});var Ub=l(ru);Wm=a(Ub,"batched=True"),Ub.forEach(t),Jm=a(Ei,". C\u2019est n\xE9cessaire ici car nous changeons la longueur du jeu de donn\xE9es (puisqu\u2019un exemple peut donner plusieurs caract\xE9ristiques d\u2019entra\xEEnement) :"),Ei.forEach(t),Hp=c(e),j(xr.$$.fragment,e),Rp=c(e),j($r.$$.fragment,e),Up=c(e),Ul=r(e,"P",{});var Qb=l(Ul);Xm=a(Qb,"Comme nous pouvons le voir, le pr\xE9traitement a ajout\xE9 environ 1 000 caract\xE9ristiques. Notre ensemble d\u2019entra\xEEnement est maintenant pr\xEAt \xE0 \xEAtre utilis\xE9. Passons au pr\xE9traitement de l\u2019ensemble de validation !"),Qb.forEach(t),Qp=c(e),Wn=r(e,"H3",{class:!0});var uc=l(Wn);Ua=r(uc,"A",{id:!0,class:!0,href:!0});var Gb=l(Ua);lu=r(Gb,"SPAN",{});var Wb=l(lu);j(wr.$$.fragment,Wb),Wb.forEach(t),Gb.forEach(t),Km=c(uc),iu=r(uc,"SPAN",{});var Jb=l(iu);Ym=a(Jb,"Traitement des donn\xE9es de validation"),Jb.forEach(t),uc.forEach(t),Gp=c(e),Qa=r(e,"P",{});var pc=l(Qa);Zm=a(pc,"Le pr\xE9traitement des donn\xE9es de validation sera l\xE9g\xE8rement plus facile car nous n\u2019avons pas besoin de g\xE9n\xE9rer des \xE9tiquettes (sauf si nous voulons calculer une perte de validation, mais elle ne nous aidera pas vraiment \xE0 comprendre la qualit\xE9 du mod\xE8le). Le r\xE9el plaisir sera d\u2019interpr\xE9ter les pr\xE9dictions du mod\xE8le dans des \xE9tendues du contexte original. Pour cela, il nous suffit de stocker les correspondances d\u2019"),uu=r(pc,"EM",{});var Xb=l(uu);ef=a(Xb,"offset"),Xb.forEach(t),sf=a(pc," et un moyen de faire correspondre chaque caract\xE9ristique cr\xE9\xE9e \xE0 l\u2019exemple original dont elle provient. Puisqu\u2019il y a une colonne identifiant dans le jeu de donn\xE9es original, nous l\u2019utiliserons."),pc.forEach(t),Wp=c(e),ke=r(e,"P",{});var os=l(ke);tf=a(os,"La seule chose que nous allons ajouter ici est un petit nettoyage des correspondances d\u2019"),pu=r(os,"EM",{});var Kb=l(pu);nf=a(Kb,"offset"),Kb.forEach(t),af=a(os,". Elles contiendront les "),du=r(os,"EM",{});var Yb=l(du);of=a(Yb,"offsets"),Yb.forEach(t),rf=a(os," pour la question et le contexte, mais une fois que nous serons \xE0 la phase de post-traitement, nous n\u2019aurons aucun moyen de savoir quelle partie des identifiants d\u2019entr\xE9e correspondait au contexte et quelle partie \xE9tait la question (la m\xE9thode "),cu=r(os,"CODE",{});var Zb=l(cu);lf=a(Zb,"sequence_ids()"),Zb.forEach(t),uf=a(os," que nous avons utilis\xE9e n\u2019est disponible que pour la sortie du "),mu=r(os,"EM",{});var eq=l(mu);pf=a(eq,"tokenizer"),eq.forEach(t),df=a(os,"). Donc, nous allons mettre les "),fu=r(os,"EM",{});var sq=l(fu);cf=a(sq,"offsets"),sq.forEach(t),mf=a(os," correspondant \xE0 la question \xE0 "),_u=r(os,"CODE",{});var tq=l(_u);ff=a(tq,"None"),tq.forEach(t),_f=a(os," :"),os.forEach(t),Jp=c(e),j(jr.$$.fragment,e),Xp=c(e),Ql=r(e,"P",{});var nq=l(Ql);hf=a(nq,"Nous pouvons appliquer cette fonction sur l\u2019ensemble de validation comme pr\xE9c\xE9demment :"),nq.forEach(t),Kp=c(e),j(Er.$$.fragment,e),Yp=c(e),j(kr.$$.fragment,e),Zp=c(e),Gl=r(e,"P",{});var aq=l(Gl);vf=a(aq,"Dans ce cas, nous n\u2019avons ajout\xE9 que quelques centaines d\u2019\xE9chantillons, il semble donc que les contextes dans l\u2019ensemble de validation soient un peu plus courts."),aq.forEach(t),ed=c(e),Wl=r(e,"P",{});var oq=l(Wl);bf=a(oq,"Maintenant que nous avons pr\xE9trait\xE9 toutes les donn\xE9es, nous pouvons passer \xE0 l\u2019entra\xEEnement."),oq.forEach(t),sd=c(e),Et.l(e),Jl=c(e),Jn=r(e,"H3",{class:!0});var dc=l(Jn);Ga=r(dc,"A",{id:!0,class:!0,href:!0});var rq=l(Ga);hu=r(rq,"SPAN",{});var lq=l(hu);j(yr.$$.fragment,lq),lq.forEach(t),rq.forEach(t),qf=c(dc),vu=r(dc,"SPAN",{});var iq=l(vu);gf=a(iq,"Post-traitement"),iq.forEach(t),dc.forEach(t),td=c(e),yt.l(e),Xl=c(e),_n=r(e,"P",{});var ki=l(_n);xf=a(ki,"Le mod\xE8le produira des logits pour les positions de d\xE9but et de fin de la r\xE9ponse dans les identifiants d\u2019entr\xE9e, comme nous l\u2019avons vu lors de notre exploration du pipeline de "),bu=r(ki,"CODE",{});var uq=l(bu);$f=a(uq,"question-answering"),uq.forEach(t),wf=c(ki),Kl=r(ki,"A",{href:!0});var pq=l(Kl);jf=a(pq,"au chapitre 6"),pq.forEach(t),Ef=a(ki,". L\u2019\xE9tape de post-traitement sera similaire \xE0 ce que nous avons fait \xE0 ce chapitre l\xE0. Voici un rapide rappel des actions que nous avons prises :"),ki.forEach(t),nd=c(e),Os=r(e,"UL",{});var lo=l(Os);Cr=r(lo,"LI",{});var cc=l(Cr);kf=a(cc,"nous avons masqu\xE9 les logits de d\xE9but et de fin correspondant aux "),qu=r(cc,"EM",{});var dq=l(qu);yf=a(dq,"tokens"),dq.forEach(t),Cf=a(cc," en dehors du contexte,"),cc.forEach(t),Pf=c(lo),gu=r(lo,"LI",{});var cq=l(gu);Af=a(cq,"nous avons ensuite converti les logits de d\xE9but et de fin en probabilit\xE9s en utilisant une fonction SoftMax,"),cq.forEach(t),Sf=c(lo),Pr=r(lo,"LI",{});var mc=l(Pr);Mf=a(mc,"nous avons attribu\xE9 un score \xE0 chaque paire "),xu=r(mc,"CODE",{});var mq=l(xu);zf=a(mq,"(start_token, end_token)"),mq.forEach(t),Df=a(mc," en prenant le produit des deux probabilit\xE9s correspondantes,"),mc.forEach(t),Tf=c(lo),Xn=r(lo,"LI",{});var yi=l(Xn);Lf=a(yi,"nous avons cherch\xE9 la paire avec le score maximum qui donnait une r\xE9ponse valide (par exemple, un "),$u=r(yi,"CODE",{});var fq=l($u);Nf=a(fq,"start_token"),fq.forEach(t),Of=a(yi," inf\xE9rieur au "),wu=r(yi,"CODE",{});var _q=l(wu);Bf=a(_q,"end_token"),_q.forEach(t),Ff=a(yi,")."),yi.forEach(t),lo.forEach(t),ad=c(e),Bs=r(e,"P",{});var io=l(Bs);If=a(io,"Ici, nous allons modifier l\xE9g\xE8rement ce processus car nous n\u2019avons pas besoin de calculer les scores r\xE9els (juste la r\xE9ponse pr\xE9dite). Cela signifie que nous pouvons sauter l\u2019\xE9tape de la SoftMax. Pour aller plus vite, nous ne donnerons pas non plus un score \xE0 toutes les paires "),ju=r(io,"CODE",{});var hq=l(ju);Vf=a(hq,"(start_token, end_token)"),hq.forEach(t),Hf=a(io," possibles, mais seulement celles correspondant aux "),Eu=r(io,"CODE",{});var vq=l(Eu);Rf=a(vq,"n_best"),vq.forEach(t),Uf=a(io," logits les plus \xE9lev\xE9s (avec "),ku=r(io,"CODE",{});var bq=l(ku);Qf=a(bq,"n_best=20"),bq.forEach(t),Gf=a(io,"). Puisque nous sautons la SoftMax, les scores seront des scores logi, et seront obtenus en prenant la somme des logits de d\xE9but et de fin (au lieu du produit, \xE0 cause de la r\xE8gle \\(\\log(ab) = \\log(a) + \\log(b)))."),io.forEach(t),od=c(e),Fs=r(e,"P",{});var uo=l(Fs);Wf=a(uo,"Pour d\xE9montrer tout cela, nous aurons besoin d\u2019un certain type de pr\xE9dictions. Puisque nous n\u2019avons pas encore entra\xEEn\xE9 notre mod\xE8le, nous allons utiliser le mod\xE8le par d\xE9faut du pipeline de "),yu=r(uo,"CODE",{});var qq=l(yu);Jf=a(qq,"question-answering"),qq.forEach(t),Xf=a(uo," pour g\xE9n\xE9rer quelques pr\xE9dictions sur une petite partie de l\u2019ensemble de validation. Nous pouvons utiliser la m\xEAme fonction de traitement que pr\xE9c\xE9demment car elle repose sur la constante globale "),Cu=r(uo,"CODE",{});var gq=l(Cu);Kf=a(gq,"tokenizer"),gq.forEach(t),Yf=a(uo,", nous devons juste changer cet objet par le "),Pu=r(uo,"EM",{});var xq=l(Pu);Zf=a(xq,"tokenizer"),xq.forEach(t),e_=a(uo," du mod\xE8le que nous voulons utiliser temporairement :"),uo.forEach(t),rd=c(e),j(Ar.$$.fragment,e),ld=c(e),Wa=r(e,"P",{});var fc=l(Wa);s_=a(fc,"Maintenant que le pr\xE9traitement est termin\xE9, nous changeons le "),Au=r(fc,"EM",{});var $q=l(Au);t_=a($q,"tokenizer"),$q.forEach(t),n_=a(fc," pour celui que nous avons choisi \xE0 l\u2019origine :"),fc.forEach(t),id=c(e),j(Sr.$$.fragment,e),ud=c(e),Ja=r(e,"P",{});var _c=l(Ja);a_=a(_c,"Nous supprimons ensuite les colonnes de notre "),Su=r(_c,"CODE",{});var wq=l(Su);o_=a(wq,"eval_set"),wq.forEach(t),r_=a(_c," qui ne sont pas attendues par le mod\xE8le. Nous construisons un batch avec tout de ce petit ensemble de validation et le passons au mod\xE8le. Si un GPU est disponible, nous l\u2019utilisons pour aller plus vite :"),_c.forEach(t),pd=c(e),Pt.l(e),Yl=c(e),ss=r(e,"P",{});var qn=l(ss);l_=a(qn,"Maintenant, nous devons trouver la r\xE9ponse pr\xE9dite pour chaque exemple dans notre "),Mu=r(qn,"CODE",{});var jq=l(Mu);i_=a(jq,"small_eval_set"),jq.forEach(t),u_=a(qn,". Un exemple peut avoir \xE9t\xE9 divis\xE9 en plusieurs caract\xE9ristiques dans "),zu=r(qn,"CODE",{});var Eq=l(zu);p_=a(Eq,"eval_set"),Eq.forEach(t),d_=a(qn,", donc la premi\xE8re \xE9tape est de faire correspondre chaque exemple dans "),Du=r(qn,"CODE",{});var kq=l(Du);c_=a(kq,"small_eval_set"),kq.forEach(t),m_=a(qn," aux caract\xE9ristiques correspondantes dans "),Tu=r(qn,"CODE",{});var yq=l(Tu);f_=a(yq,"eval_set"),yq.forEach(t),__=a(qn," :"),qn.forEach(t),dd=c(e),j(Mr.$$.fragment,e),cd=c(e),Xa=r(e,"P",{});var hc=l(Xa);h_=a(hc,"Avec cela, nous pouvons vraiment nous mettre au travail en bouclant tous les exemples et, pour chaque exemple, toutes les caract\xE9ristiques associ\xE9es. Comme nous l\u2019avons dit pr\xE9c\xE9demment, nous allons regarder les scores logit pour les "),Lu=r(hc,"CODE",{});var Cq=l(Lu);v_=a(Cq,"n_best"),Cq.forEach(t),b_=a(hc," logits de d\xE9but et logits de fin, en excluant les positions qui donnent :"),hc.forEach(t),md=c(e),hn=r(e,"UL",{});var Ci=l(hn);Nu=r(Ci,"LI",{});var Pq=l(Nu);q_=a(Pq,"une r\xE9ponse qui ne serait pas dans le contexte"),Pq.forEach(t),g_=c(Ci),Ou=r(Ci,"LI",{});var Aq=l(Ou);x_=a(Aq,"une r\xE9ponse avec une longueur n\xE9gative"),Aq.forEach(t),$_=c(Ci),zr=r(Ci,"LI",{});var vc=l(zr);w_=a(vc,"une r\xE9ponse qui est trop longue (nous limitons les possibilit\xE9s \xE0 "),Bu=r(vc,"CODE",{});var Sq=l(Bu);j_=a(Sq,"max_answer_length=30"),Sq.forEach(t),E_=a(vc,")"),vc.forEach(t),Ci.forEach(t),fd=c(e),Zl=r(e,"P",{});var Mq=l(Zl);k_=a(Mq,"Une fois que nous avons toutes les r\xE9ponses possibles not\xE9es pour un exemple, nous choisissons simplement celle qui a le meilleur score logit :"),Mq.forEach(t),_d=c(e),j(Dr.$$.fragment,e),hd=c(e),Ka=r(e,"P",{});var bc=l(Ka);y_=a(bc,"Le format final des r\xE9ponses pr\xE9dites est celui qui sera attendu par la m\xE9trique que nous allons utiliser. Comme d\u2019habitude, nous pouvons la charger \xE0 l\u2019aide de la biblioth\xE8que \u{1F917} "),Fu=r(bc,"EM",{});var zq=l(Fu);C_=a(zq,"Datasets"),zq.forEach(t),P_=a(bc," :"),bc.forEach(t),vd=c(e),j(Tr.$$.fragment,e),bd=c(e),ei=r(e,"P",{});var Dq=l(ei);A_=a(Dq,"Cette m\xE9trique attend les r\xE9ponses pr\xE9dites dans le format que nous avons vu ci-dessus (une liste de dictionnaires avec une cl\xE9 pour l\u2019identifiant de l\u2019exemple et une cl\xE9 pour le texte pr\xE9dit) et les r\xE9ponses th\xE9oriques dans le format ci-dessous (une liste de dictionnaires avec une cl\xE9 pour l\u2019identifiant de l\u2019exemple et une cl\xE9 pour les r\xE9ponses possibles) :"),Dq.forEach(t),qd=c(e),j(Lr.$$.fragment,e),gd=c(e),si=r(e,"P",{});var Tq=l(si);S_=a(Tq,"Nous pouvons maintenant v\xE9rifier que nous obtenons des r\xE9sultats raisonnables en examinant le premier \xE9l\xE9ment des deux listes :"),Tq.forEach(t),xd=c(e),j(Nr.$$.fragment,e),$d=c(e),j(Or.$$.fragment,e),wd=c(e),ti=r(e,"P",{});var Lq=l(ti);M_=a(Lq,"Pas trop mal ! Voyons maintenant le score que la m\xE9trique nous donne :"),Lq.forEach(t),jd=c(e),j(Br.$$.fragment,e),Ed=c(e),j(Fr.$$.fragment,e),kd=c(e),vn=r(e,"P",{});var Pi=l(vn);z_=a(Pi,"Encore une fois, c\u2019est plut\xF4t bon si l\u2019on consid\xE8re que, d\u2019apr\xE8s "),Ir=r(Pi,"A",{href:!0,rel:!0});var Nq=l(Ir);D_=a(Nq,"le papier"),Nq.forEach(t),T_=a(Pi," de DistilBERT, "),Iu=r(Pi,"EM",{});var Oq=l(Iu);L_=a(Oq,"finetun\xE9"),Oq.forEach(t),N_=a(Pi," sur SQuAD, ce mod\xE8le obtient 79,1 et 86,9 pour ces scores sur l\u2019ensemble du jeu de donn\xE9es."),Pi.forEach(t),yd=c(e),Zn.l(e),ni=c(e),j(Vr.$$.fragment,e),Cd=c(e),ai=r(e,"P",{});var Bq=l(ai);O_=a(Bq,"Nous pouvons v\xE9rifier que cela fonctionne sur nos pr\xE9dictions :"),Bq.forEach(t),Pd=c(e),j(Hr.$$.fragment,e),Ad=c(e),j(Rr.$$.fragment,e),Sd=c(e),Ya=r(e,"P",{});var qc=l(Ya);B_=a(qc,"C\u2019est bien ! Maintenant, utilisons ceci pour "),Vu=r(qc,"EM",{});var Fq=l(Vu);F_=a(Fq,"finetuner"),Fq.forEach(t),I_=a(qc," notre mod\xE8le."),qc.forEach(t),Md=c(e),Kn=r(e,"H3",{class:!0});var gc=l(Kn);Za=r(gc,"A",{id:!0,class:!0,href:!0});var Iq=l(Za);Hu=r(Iq,"SPAN",{});var Vq=l(Hu);j(Ur.$$.fragment,Vq),Vq.forEach(t),Iq.forEach(t),V_=c(gc),oi=r(gc,"SPAN",{});var Vh=l(oi);Ru=r(Vh,"I",{});var Hq=l(Ru);H_=a(Hq,"Finetuning"),Hq.forEach(t),R_=a(Vh," du mod\xE8le"),Vh.forEach(t),gc.forEach(t),zd=c(e),St.l(e),ri=c(e),eo=r(e,"P",{});var xc=l(eo);U_=a(xc,"Comme d\u2019habitude, nous recevons un avertissement indiquant que certains poids ne sont pas utilis\xE9s (ceux de la t\xEAte de pr\xE9-entra\xEEnement) et que d\u2019autres sont initialis\xE9s de mani\xE8re al\xE9atoire (ceux de la t\xEAte de r\xE9ponse aux questions). Vous devriez \xEAtre habitu\xE9 \xE0 cela maintenant, mais cela signifie que ce mod\xE8le n\u2019est pas encore pr\xEAt \xE0 \xEAtre utilis\xE9 et qu\u2019il a besoin d\u2019\xEAtre "),Uu=r(xc,"EM",{});var Rq=l(Uu);Q_=a(Rq,"finetun\xE9"),Rq.forEach(t),G_=a(xc,". Une bonne chose que nous soyons sur le point de le faire !"),xc.forEach(t),Dd=c(e),Is=r(e,"P",{});var po=l(Is);W_=a(po,"Pour pouvoir pousser notre mod\xE8le vers le "),Qu=r(po,"EM",{});var Uq=l(Qu);J_=a(Uq,"Hub"),Uq.forEach(t),X_=a(po,", nous devons nous connecter \xE0 Hugging Face. Si vous ex\xE9cutez ce code dans un "),Gu=r(po,"EM",{});var Qq=l(Gu);K_=a(Qq,"notebook"),Qq.forEach(t),Y_=a(po,", vous pouvez le faire avec la fonction utilitaire suivante, qui affiche un "),Wu=r(po,"EM",{});var Gq=l(Wu);Z_=a(Gq,"widget"),Gq.forEach(t),eh=a(po," o\xF9 vous pouvez entrer vos identifiants de connexion :"),po.forEach(t),Td=c(e),j(Qr.$$.fragment,e),Ld=c(e),so=r(e,"P",{});var $c=l(so);sh=a($c,"Si vous ne travaillez pas dans un "),Ju=r($c,"EM",{});var Wq=l(Ju);th=a(Wq,"notebook"),Wq.forEach(t),nh=a($c,", tapez simplement la ligne suivante dans votre terminal :"),$c.forEach(t),Nd=c(e),j(Gr.$$.fragment,e),Od=c(e),zt.l(e),li=c(e),ts=r(e,"P",{});var gn=l(ts);ah=a(gn,"Par d\xE9faut, le d\xE9p\xF4t utilis\xE9 sera dans votre espace et nomm\xE9 apr\xE8s le r\xE9pertoire de sortie que vous avez d\xE9fini. Donc dans notre cas il sera dans "),Xu=r(gn,"CODE",{});var Jq=l(Xu);oh=a(Jq,'"sgugger/bert-finetuned-squad"'),Jq.forEach(t),rh=a(gn,". Nous pouvons passer outre en passant un "),Ku=r(gn,"CODE",{});var Xq=l(Ku);lh=a(Xq,"hub_model_id"),Xq.forEach(t),ih=a(gn,", par exemple, pour pousser le mod\xE8le dans l\u2019organisation "),Yu=r(gn,"CODE",{});var Kq=l(Yu);uh=a(Kq,"huggingface_course"),Kq.forEach(t),ph=a(gn," nous avons utilis\xE9 "),Zu=r(gn,"CODE",{});var Yq=l(Zu);dh=a(Yq,'hub_model_id= "huggingface_course/bert-finetuned-squad"'),Yq.forEach(t),ch=a(gn," (qui est le mod\xE8le que nous avons li\xE9 au d\xE9but de cette section)."),gn.forEach(t),Bd=c(e),Tt.l(e),ii=c(e),bn=r(e,"P",{});var Ai=l(bn);mh=a(Ai,"Notez que pendant l\u2019entra\xEEnement, chaque fois que le mod\xE8le est sauvegard\xE9 (ici, \xE0 chaque \xE9poque), il est t\xE9l\xE9charg\xE9 sur le "),ep=r(Ai,"EM",{});var Zq=l(ep);fh=a(Zq,"Hub"),Zq.forEach(t),_h=a(Ai," en arri\xE8re-plan. Ainsi, vous pourrez reprendre votre entra\xEEnement sur une autre machine si n\xE9cessaire. L\u2019ensemble de l\u2019entra\xEEnement prend un certain temps (un peu plus d\u2019une heure sur une Titan RTX), vous pouvez donc prendre un caf\xE9 ou relire les parties du cours qui vous ont sembl\xE9 plus difficiles pendant qu\u2019il se d\xE9roule. Notez \xE9galement que d\xE8s que la premi\xE8re \xE9poque est termin\xE9e, vous verrez des poids t\xE9l\xE9charg\xE9s sur le "),sp=r(Ai,"EM",{});var eg=l(sp);hh=a(eg,"Hub"),eg.forEach(t),vh=a(Ai," et vous pourrez commencer \xE0 jouer avec votre mod\xE8le sur sa page."),Ai.forEach(t),Fd=c(e),Nt.l(e),ui=c(e),j(Wr.$$.fragment,e),Id=c(e),pi=r(e,"P",{});var sg=l(pi);bh=a(sg,"Super ! \xC0 titre de comparaison, les scores indiqu\xE9s dans l\u2019article de BERT pour ce t\xE2che sont de 80,8 et 88,5. Donc nous sommes exactement l\xE0 o\xF9 nous devrions \xEAtre."),sg.forEach(t),Vd=c(e),$e&&$e.l(e),di=c(e),Vs=r(e,"P",{});var co=l(Vs);qh=a(co,"\xC0 ce stade, vous pouvez utiliser le "),tp=r(co,"EM",{});var tg=l(tp);gh=a(tg,"widget"),tg.forEach(t),xh=a(co," d\u2019inf\xE9rence sur le "),np=r(co,"EM",{});var ng=l(np);$h=a(ng,"Hub"),ng.forEach(t),wh=a(co," du mod\xE8le pour tester le mod\xE8le et le partager avec vos amis, votre famille et vos animaux pr\xE9f\xE9r\xE9s. Vous avez r\xE9ussi \xE0 "),ap=r(co,"EM",{});var ag=l(ap);jh=a(ag,"finetuner"),ag.forEach(t),Eh=a(co," un mod\xE8le sur une t\xE2che de r\xE9ponse \xE0 une question. F\xE9licitations !"),co.forEach(t),Hd=c(e),j(to.$$.fragment,e),Rd=c(e),we&&we.l(e),ci=c(e),Yn=r(e,"H3",{class:!0});var wc=l(Yn);no=r(wc,"A",{id:!0,class:!0,href:!0});var og=l(no);op=r(og,"SPAN",{});var rg=l(op);j(Jr.$$.fragment,rg),rg.forEach(t),og.forEach(t),kh=c(wc),mi=r(wc,"SPAN",{});var Hh=l(mi);yh=a(Hh,"Utilisation du mod\xE8le "),rp=r(Hh,"I",{});var lg=l(rp);Ch=a(lg,"finetun\xE9"),lg.forEach(t),Hh.forEach(t),wc.forEach(t),Ud=c(e),ns=r(e,"P",{});var xn=l(ns);Ph=a(xn,"Nous vous avons d\xE9j\xE0 montr\xE9 comment vous pouvez utiliser le mod\xE8le que nous avons "),lp=r(xn,"EM",{});var ig=l(lp);Ah=a(ig,"finetun\xE9"),ig.forEach(t),Sh=a(xn," sur le "),ip=r(xn,"EM",{});var ug=l(ip);Mh=a(ug,"Hub"),ug.forEach(t),zh=a(xn," avec le "),up=r(xn,"EM",{});var pg=l(up);Dh=a(pg,"widget"),pg.forEach(t),Th=a(xn," d\u2019inf\xE9rence. Pour l\u2019utiliser localement dans un "),pp=r(xn,"CODE",{});var dg=l(pp);Lh=a(dg,"pipeline"),dg.forEach(t),Nh=a(xn,", il suffit de sp\xE9cifier l\u2019identifiant du mod\xE8le :"),xn.forEach(t),Qd=c(e),j(Xr.$$.fragment,e),Gd=c(e),j(Kr.$$.fragment,e),Wd=c(e),fi=r(e,"P",{});var cg=l(fi);Oh=a(cg,"Super ! Notre mod\xE8le fonctionne aussi bien que le mod\xE8le par d\xE9faut pour ce pipeline !"),cg.forEach(t),this.h()},h(){C(p,"name","hf:doc:metadata"),C(p,"content",JSON.stringify(Ug)),C(q,"id","rponse-aux-questions"),C(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(q,"href","#rponse-aux-questions"),C(S,"class","relative group"),C(X,"href","https://rajpurkar.github.io/SQuAD-explorer/"),C(X,"rel","nofollow"),jc(ie.src,gs="https://hf.space/gradioiframe/course-demos/bert-finetuned-squad/+")||C(ie,"src",gs),C(ie,"frameborder","0"),C(ie,"height","450"),C(ie,"title","Gradio app"),C(ie,"class","block dark:hidden container p-0 flex-grow space-iframe"),C(ie,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),C(ie,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),jc(ue.src,xs="https://hf.space/gradioiframe/course-demos/bert-finetuned-squad-darkmode/+")||C(ue,"src",xs),C(ue,"frameborder","0"),C(ue,"height","450"),C(ue,"title","Gradio app"),C(ue,"class","hidden dark:block container p-0 flex-grow space-iframe"),C(ue,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),C(ue,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),C(Ie,"href","https://huggingface.co/huggingface-course/bert-finetuned-squad?context=%F0%9F%A4%97+Transformers+is+backed+by+the+three+most+popular+deep+learning+libraries+%E2%80%94+Jax%2C+PyTorch+and+TensorFlow+%E2%80%94+with+a+seamless+integration+between+them.+It%27s+straightforward+to+train+your+models+with+one+before+loading+them+for+inference+with+the+other.&question=Which+deep+learning+libraries+back+%F0%9F%A4%97+Transformers%3F"),C(Ie,"rel","nofollow"),C(ve,"id","prparation-des-donnes"),C(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(ve,"href","#prparation-des-donnes"),C(pe,"class","relative group"),C(ls,"href","https://rajpurkar.github.io/SQuAD-explorer/"),C(ls,"rel","nofollow"),C(Es,"href","https://huggingface.co/datasets/squad_v2"),C(Es,"rel","nofollow"),C(Qe,"id","le-jeu-de-donnes-squad"),C(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(Qe,"href","#le-jeu-de-donnes-squad"),C(is,"class","relative group"),C(Ss,"id","traitement-des-donnes-dentranement"),C(Ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(Ss,"href","#traitement-des-donnes-dentranement"),C(ce,"class","relative group"),C(_t,"href","https://huggingface.co/transformers/#supported-frameworks"),C(_t,"rel","nofollow"),C(rn,"class","block dark:hidden"),jc(rn.src,Rn="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/qa_labels.svg")||C(rn,"src",Rn),C(rn,"alt","One-hot encoded labels for question answering."),C(ln,"class","hidden dark:block"),jc(ln.src,tr="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/qa_labels-dark.svg")||C(ln,"src",tr),C(ln,"alt","One-hot encoded labels for question answering."),C(Ts,"class","flex justify-center"),C(ge,"href","/course/fr/chapter6/4"),C(Nl,"href","/course/fr/chapter6/4"),C(Ua,"id","traitement-des-donnes-de-validation"),C(Ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(Ua,"href","#traitement-des-donnes-de-validation"),C(Wn,"class","relative group"),C(Ga,"id","posttraitement"),C(Ga,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(Ga,"href","#posttraitement"),C(Jn,"class","relative group"),C(Kl,"href","/course/fr/chapter6/3b"),C(Ir,"href","https://arxiv.org/abs/1910.01108v2"),C(Ir,"rel","nofollow"),C(Za,"id","ifinetuningi-du-modle"),C(Za,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(Za,"href","#ifinetuningi-du-modle"),C(Kn,"class","relative group"),C(no,"id","utilisation-du-modle-ifinetuni"),C(no,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),C(no,"href","#utilisation-du-modle-ifinetuni"),C(Yn,"class","relative group")},m(e,u){s(document.head,p),i(e,b,u),E(f,e,u),i(e,y,u),i(e,S,u),s(S,q),s(q,g),E(x,g,null),s(S,_),s(S,M),s(M,$),i(e,A,u),Yr[T].m(e,u),i(e,D,u),i(e,P,u),s(P,V),s(P,L),s(L,O),s(P,N),i(e,R,u),E(Q,e,u),i(e,J,u),i(e,H,u),s(H,G),s(H,ee),s(ee,Z),s(H,F),s(H,X),s(X,re),s(H,se),s(H,K),s(K,le),s(H,Ce),i(e,ye,u),i(e,ie,u),i(e,Fe,u),i(e,ue,u),i(e,rs,u),i(e,W,u),s(W,Y),s(W,$s),s($s,Bt),s(W,ws),s(W,Ie),s(Ie,Ve),i(e,js,u),E(he,e,u),i(e,He,u),i(e,pe,u),s(pe,ve),s(ve,Re),E(Ue,Re,null),s(pe,mo),s(pe,Ft),s(Ft,Js),i(e,jn,u),i(e,be,u),s(be,fo),s(be,ls),s(ls,_o),s(be,ho),s(be,Es),s(Es,Xs),s(be,sa),i(e,te,u),i(e,is,u),s(is,Qe),s(Qe,En),E(Ks,En,null),s(is,kn),s(is,yn),s(yn,vo),i(e,It,u),i(e,ks,u),s(ks,bo),s(ks,Ys),s(Ys,qo),s(ks,go),i(e,Vt,u),E(Zs,e,u),i(e,ta,u),i(e,ys,u),s(ys,xo),i(e,na,u),E(us,e,u),i(e,aa,u),E(et,e,u),i(e,Cn,u),i(e,me,u),s(me,oa),s(me,Pe),s(Pe,$o),s(me,Pn),s(me,An),s(An,wo),s(me,Sn),s(me,Mn),s(Mn,jo),s(me,ra),i(e,Cs,u),E(Ps,e,u),i(e,de,u),E(st,e,u),i(e,Ht,u),i(e,oe,u),s(oe,Eo),s(oe,tt),s(tt,ko),s(oe,yo),s(oe,nt),s(nt,Co),s(oe,Po),s(oe,at),s(at,Ao),s(oe,So),s(oe,ot),s(ot,Mo),s(oe,zo),s(oe,Rt),s(Rt,rt),s(oe,la),s(oe,ps),s(ps,ia),s(oe,Ut),i(e,ua,u),i(e,ds,u),s(ds,lt),s(ds,Qt),s(Qt,Ge),s(ds,Do),i(e,Gt,u),E(it,e,u),i(e,pa,u),E(cs,e,u),i(e,da,u),i(e,Wt,u),s(Wt,ca),i(e,We,u),E(Ae,e,u),i(e,Jt,u),E(Oe,e,u),i(e,ma,u),i(e,Je,u),s(Je,To),s(Je,Xt),s(Xt,Kt),s(Je,Lo),i(e,zn,u),E(je,e,u),i(e,As,u),E(ut,e,u),i(e,Yt,u),i(e,Zt,u),s(Zt,No),i(e,fa,u),i(e,ce,u),s(ce,Ss),s(Ss,pt),E(dt,pt,null),s(ce,Oo),s(ce,ct),s(ct,Bo),i(e,_a,u),E(ms,e,u),i(e,ha,u),i(e,Ms,u),s(Ms,Fo),s(Ms,qe),s(qe,Io),s(Ms,Dn),i(e,va,u),i(e,zs,u),s(zs,Tn),s(zs,Ln),s(Ln,Vo),s(zs,Nn),i(e,ba,u),E(mt,e,u),i(e,en,u),i(e,ne,u),s(ne,Ho),s(ne,sn),s(sn,tn),s(ne,Ro),s(ne,nn),s(nn,ft),s(ne,qa),s(ne,Xe),s(Xe,Uo),s(ne,On),s(ne,_t),s(_t,Qo),s(ne,ga),s(ne,fs),s(fs,xa),s(ne,ae),s(ne,Bn),s(Bn,Fn),s(ne,Go),s(ne,In),s(In,Vn),s(ne,Wo),i(e,$a,u),E(_s,e,u),i(e,wa,u),E(ht,e,u),i(e,an,u),i(e,Ke,u),s(Ke,Jo),s(Ke,vt),s(vt,Xo),s(Ke,Ko),s(Ke,bt),s(bt,Yo),s(Ke,Zo),i(e,on,u),E(qt,e,u),i(e,ja,u),i(e,gt,u),s(gt,Ye),i(e,Ea,u),E(hs,e,u),i(e,ka,u),E(xt,e,u),i(e,Ds,u),i(e,Se,u),s(Se,er),s(Se,Hn),s(Hn,ya),s(Se,m),s(Se,B),s(B,il),s(Se,Ca),i(e,sr,u),i(e,Ts,u),s(Ts,rn),s(Ts,ul),s(Ts,ln),i(e,nr,u),i(e,vs,u),s(vs,pl),s(vs,ge),s(ge,dl),s(vs,cl),s(vs,Pa),s(Pa,ml),s(vs,fl),i(e,Un,u),i(e,$t,u),s($t,Aa),s($t,Sa),s(Sa,fe),s($t,_l),i(e,ar,u),i(e,Be,u),s(Be,Qn),s(Qn,Ma),s(Ma,hl),s(Qn,vl),s(Be,un),s(Be,Gn),s(Gn,za),s(za,Me),s(Gn,bl),s(Be,ql),s(Be,wt),s(wt,Da),s(Da,gl),s(wt,xl),s(wt,Ls),s(Ls,$l),s(wt,wl),s(Be,Ta),s(Be,bs),s(bs,La),s(La,jl),s(bs,El),s(bs,Ns),s(Ns,Na),s(bs,kl),s(bs,Ze),s(Ze,yl),s(bs,Cl),i(e,or,u),E(Ee,e,u),i(e,rr,u),E(pn,e,u),i(e,lr,u),i(e,xe,u),s(xe,Pl),s(xe,dn),s(dn,Al),s(xe,_e),s(xe,Oa),s(Oa,Sl),s(xe,Ml),s(xe,Ba),s(Ba,zl),s(xe,Dl),s(xe,Fa),s(Fa,cn),s(xe,Tl),s(xe,Ia),s(Ia,Ll),s(xe,yc),i(e,_p,u),i(e,ze,u),s(ze,Cc),s(ze,Si),s(Si,Pc),s(ze,Ac),s(ze,Mi),s(Mi,Sc),s(ze,Mc),s(ze,Nl),s(Nl,zc),s(ze,Dc),s(ze,zi),s(zi,Tc),s(ze,Lc),s(ze,Di),s(Di,Nc),s(ze,Oc),i(e,hp,u),E(ir,e,u),i(e,vp,u),E(ur,e,u),i(e,bp,u),i(e,De,u),s(De,Bc),s(De,Ti),s(Ti,Fc),s(De,Ic),s(De,Li),s(Li,Vc),s(De,Hc),s(De,Ni),s(Ni,Rc),s(De,Uc),s(De,Oi),s(Oi,Qc),s(De,Gc),s(De,Bi),s(Bi,Wc),s(De,Jc),i(e,qp,u),E(pr,e,u),i(e,gp,u),E(dr,e,u),i(e,xp,u),i(e,Ol,u),s(Ol,Xc),i(e,$p,u),E(cr,e,u),i(e,wp,u),E(mr,e,u),i(e,jp,u),i(e,Bl,u),s(Bl,Kc),i(e,Ep,u),i(e,Fl,u),s(Fl,Yc),i(e,kp,u),i(e,Va,u),s(Va,Il),s(Il,Fi),s(Fi,Zc),s(Il,em),s(Va,sm),s(Va,es),s(es,Ii),s(Ii,tm),s(es,nm),s(es,Vi),s(Vi,am),s(es,om),s(es,Hi),s(Hi,rm),s(es,lm),s(es,Ri),s(Ri,im),s(es,um),s(es,Ui),s(Ui,pm),s(es,dm),i(e,yp,u),i(e,Te,u),s(Te,cm),s(Te,Qi),s(Qi,mm),s(Te,fm),s(Te,Gi),s(Gi,_m),s(Te,hm),s(Te,Wi),s(Wi,vm),s(Te,bm),s(Te,Ji),s(Ji,qm),s(Te,gm),s(Te,Xi),s(Xi,xm),s(Te,$m),i(e,Cp,u),i(e,Le,u),s(Le,wm),s(Le,Ki),s(Ki,jm),s(Le,Em),s(Le,Yi),s(Yi,km),s(Le,ym),s(Le,Zi),s(Zi,Cm),s(Le,Pm),s(Le,eu),s(eu,Am),s(Le,Sm),s(Le,su),s(su,Mm),s(Le,zm),i(e,Pp,u),E(fr,e,u),i(e,Ap,u),E(_r,e,u),i(e,Sp,u),i(e,mn,u),s(mn,Dm),s(mn,tu),s(tu,Tm),s(mn,Lm),s(mn,nu),s(nu,Nm),s(mn,Om),i(e,Mp,u),E(hr,e,u),i(e,zp,u),E(vr,e,u),i(e,Dp,u),i(e,Ha,u),s(Ha,Bm),s(Ha,au),s(au,Fm),s(Ha,Im),i(e,Tp,u),E(br,e,u),i(e,Lp,u),E(qr,e,u),i(e,Np,u),i(e,Vl,u),s(Vl,Vm),i(e,Op,u),E(Ra,e,u),i(e,Bp,u),i(e,Hl,u),s(Hl,Hm),i(e,Fp,u),E(gr,e,u),i(e,Ip,u),i(e,Rl,u),s(Rl,Rm),i(e,Vp,u),i(e,fn,u),s(fn,Um),s(fn,ou),s(ou,Qm),s(fn,Gm),s(fn,ru),s(ru,Wm),s(fn,Jm),i(e,Hp,u),E(xr,e,u),i(e,Rp,u),E($r,e,u),i(e,Up,u),i(e,Ul,u),s(Ul,Xm),i(e,Qp,u),i(e,Wn,u),s(Wn,Ua),s(Ua,lu),E(wr,lu,null),s(Wn,Km),s(Wn,iu),s(iu,Ym),i(e,Gp,u),i(e,Qa,u),s(Qa,Zm),s(Qa,uu),s(uu,ef),s(Qa,sf),i(e,Wp,u),i(e,ke,u),s(ke,tf),s(ke,pu),s(pu,nf),s(ke,af),s(ke,du),s(du,of),s(ke,rf),s(ke,cu),s(cu,lf),s(ke,uf),s(ke,mu),s(mu,pf),s(ke,df),s(ke,fu),s(fu,cf),s(ke,mf),s(ke,_u),s(_u,ff),s(ke,_f),i(e,Jp,u),E(jr,e,u),i(e,Xp,u),i(e,Ql,u),s(Ql,hf),i(e,Kp,u),E(Er,e,u),i(e,Yp,u),E(kr,e,u),i(e,Zp,u),i(e,Gl,u),s(Gl,vf),i(e,ed,u),i(e,Wl,u),s(Wl,bf),i(e,sd,u),Zr[jt].m(e,u),i(e,Jl,u),i(e,Jn,u),s(Jn,Ga),s(Ga,hu),E(yr,hu,null),s(Jn,qf),s(Jn,vu),s(vu,gf),i(e,td,u),el[kt].m(e,u),i(e,Xl,u),i(e,_n,u),s(_n,xf),s(_n,bu),s(bu,$f),s(_n,wf),s(_n,Kl),s(Kl,jf),s(_n,Ef),i(e,nd,u),i(e,Os,u),s(Os,Cr),s(Cr,kf),s(Cr,qu),s(qu,yf),s(Cr,Cf),s(Os,Pf),s(Os,gu),s(gu,Af),s(Os,Sf),s(Os,Pr),s(Pr,Mf),s(Pr,xu),s(xu,zf),s(Pr,Df),s(Os,Tf),s(Os,Xn),s(Xn,Lf),s(Xn,$u),s($u,Nf),s(Xn,Of),s(Xn,wu),s(wu,Bf),s(Xn,Ff),i(e,ad,u),i(e,Bs,u),s(Bs,If),s(Bs,ju),s(ju,Vf),s(Bs,Hf),s(Bs,Eu),s(Eu,Rf),s(Bs,Uf),s(Bs,ku),s(ku,Qf),s(Bs,Gf),i(e,od,u),i(e,Fs,u),s(Fs,Wf),s(Fs,yu),s(yu,Jf),s(Fs,Xf),s(Fs,Cu),s(Cu,Kf),s(Fs,Yf),s(Fs,Pu),s(Pu,Zf),s(Fs,e_),i(e,rd,u),E(Ar,e,u),i(e,ld,u),i(e,Wa,u),s(Wa,s_),s(Wa,Au),s(Au,t_),s(Wa,n_),i(e,id,u),E(Sr,e,u),i(e,ud,u),i(e,Ja,u),s(Ja,a_),s(Ja,Su),s(Su,o_),s(Ja,r_),i(e,pd,u),sl[Ct].m(e,u),i(e,Yl,u),i(e,ss,u),s(ss,l_),s(ss,Mu),s(Mu,i_),s(ss,u_),s(ss,zu),s(zu,p_),s(ss,d_),s(ss,Du),s(Du,c_),s(ss,m_),s(ss,Tu),s(Tu,f_),s(ss,__),i(e,dd,u),E(Mr,e,u),i(e,cd,u),i(e,Xa,u),s(Xa,h_),s(Xa,Lu),s(Lu,v_),s(Xa,b_),i(e,md,u),i(e,hn,u),s(hn,Nu),s(Nu,q_),s(hn,g_),s(hn,Ou),s(Ou,x_),s(hn,$_),s(hn,zr),s(zr,w_),s(zr,Bu),s(Bu,j_),s(zr,E_),i(e,fd,u),i(e,Zl,u),s(Zl,k_),i(e,_d,u),E(Dr,e,u),i(e,hd,u),i(e,Ka,u),s(Ka,y_),s(Ka,Fu),s(Fu,C_),s(Ka,P_),i(e,vd,u),E(Tr,e,u),i(e,bd,u),i(e,ei,u),s(ei,A_),i(e,qd,u),E(Lr,e,u),i(e,gd,u),i(e,si,u),s(si,S_),i(e,xd,u),E(Nr,e,u),i(e,$d,u),E(Or,e,u),i(e,wd,u),i(e,ti,u),s(ti,M_),i(e,jd,u),E(Br,e,u),i(e,Ed,u),E(Fr,e,u),i(e,kd,u),i(e,vn,u),s(vn,z_),s(vn,Ir),s(Ir,D_),s(vn,T_),s(vn,Iu),s(Iu,L_),s(vn,N_),i(e,yd,u),Zn.m(e,u),i(e,ni,u),E(Vr,e,u),i(e,Cd,u),i(e,ai,u),s(ai,O_),i(e,Pd,u),E(Hr,e,u),i(e,Ad,u),E(Rr,e,u),i(e,Sd,u),i(e,Ya,u),s(Ya,B_),s(Ya,Vu),s(Vu,F_),s(Ya,I_),i(e,Md,u),i(e,Kn,u),s(Kn,Za),s(Za,Hu),E(Ur,Hu,null),s(Kn,V_),s(Kn,oi),s(oi,Ru),s(Ru,H_),s(oi,R_),i(e,zd,u),tl[At].m(e,u),i(e,ri,u),i(e,eo,u),s(eo,U_),s(eo,Uu),s(Uu,Q_),s(eo,G_),i(e,Dd,u),i(e,Is,u),s(Is,W_),s(Is,Qu),s(Qu,J_),s(Is,X_),s(Is,Gu),s(Gu,K_),s(Is,Y_),s(Is,Wu),s(Wu,Z_),s(Is,eh),i(e,Td,u),E(Qr,e,u),i(e,Ld,u),i(e,so,u),s(so,sh),s(so,Ju),s(Ju,th),s(so,nh),i(e,Nd,u),E(Gr,e,u),i(e,Od,u),nl[Mt].m(e,u),i(e,li,u),i(e,ts,u),s(ts,ah),s(ts,Xu),s(Xu,oh),s(ts,rh),s(ts,Ku),s(Ku,lh),s(ts,ih),s(ts,Yu),s(Yu,uh),s(ts,ph),s(ts,Zu),s(Zu,dh),s(ts,ch),i(e,Bd,u),al[Dt].m(e,u),i(e,ii,u),i(e,bn,u),s(bn,mh),s(bn,ep),s(ep,fh),s(bn,_h),s(bn,sp),s(sp,hh),s(bn,vh),i(e,Fd,u),ol[Lt].m(e,u),i(e,ui,u),E(Wr,e,u),i(e,Id,u),i(e,pi,u),s(pi,bh),i(e,Vd,u),$e&&$e.m(e,u),i(e,di,u),i(e,Vs,u),s(Vs,qh),s(Vs,tp),s(tp,gh),s(Vs,xh),s(Vs,np),s(np,$h),s(Vs,wh),s(Vs,ap),s(ap,jh),s(Vs,Eh),i(e,Hd,u),E(to,e,u),i(e,Rd,u),we&&we.m(e,u),i(e,ci,u),i(e,Yn,u),s(Yn,no),s(no,op),E(Jr,op,null),s(Yn,kh),s(Yn,mi),s(mi,yh),s(mi,rp),s(rp,Ch),i(e,Ud,u),i(e,ns,u),s(ns,Ph),s(ns,lp),s(lp,Ah),s(ns,Sh),s(ns,ip),s(ip,Mh),s(ns,zh),s(ns,up),s(up,Dh),s(ns,Th),s(ns,pp),s(pp,Lh),s(ns,Nh),i(e,Qd,u),E(Xr,e,u),i(e,Gd,u),E(Kr,e,u),i(e,Wd,u),i(e,fi,u),s(fi,Oh),Jd=!0},p(e,[u]){const rl={};u&1&&(rl.fw=e[0]),f.$set(rl);let _i=T;T=Uh(e),T!==_i&&(wn(),v(Yr[_i],1,1,()=>{Yr[_i]=null}),$n(),I=Yr[T],I||(I=Yr[T]=Rh[T](e),I.c()),h(I,1),I.m(D.parentNode,D));const dp={};u&2&&(dp.$$scope={dirty:u,ctx:e}),he.$set(dp);const cp={};u&2&&(cp.$$scope={dirty:u,ctx:e}),Ra.$set(cp);let ao=jt;jt=Gh(e),jt!==ao&&(wn(),v(Zr[ao],1,1,()=>{Zr[ao]=null}),$n(),Et=Zr[jt],Et||(Et=Zr[jt]=Qh[jt](e),Et.c()),h(Et,1),Et.m(Jl.parentNode,Jl));let hi=kt;kt=Jh(e),kt!==hi&&(wn(),v(el[hi],1,1,()=>{el[hi]=null}),$n(),yt=el[kt],yt||(yt=el[kt]=Wh[kt](e),yt.c()),h(yt,1),yt.m(Xl.parentNode,Xl));let Hs=Ct;Ct=Kh(e),Ct!==Hs&&(wn(),v(sl[Hs],1,1,()=>{sl[Hs]=null}),$n(),Pt=sl[Ct],Pt||(Pt=sl[Ct]=Xh[Ct](e),Pt.c()),h(Pt,1),Pt.m(Yl.parentNode,Yl)),Xd!==(Xd=Yh(e))&&(Zn.d(1),Zn=Xd(e),Zn&&(Zn.c(),Zn.m(ni.parentNode,ni)));let vi=At;At=ev(e),At!==vi&&(wn(),v(tl[vi],1,1,()=>{tl[vi]=null}),$n(),St=tl[At],St||(St=tl[At]=Zh[At](e),St.c()),h(St,1),St.m(ri.parentNode,ri));let bi=Mt;Mt=tv(e),Mt!==bi&&(wn(),v(nl[bi],1,1,()=>{nl[bi]=null}),$n(),zt=nl[Mt],zt||(zt=nl[Mt]=sv[Mt](e),zt.c()),h(zt,1),zt.m(li.parentNode,li));let qi=Dt;Dt=av(e),Dt!==qi&&(wn(),v(al[qi],1,1,()=>{al[qi]=null}),$n(),Tt=al[Dt],Tt||(Tt=al[Dt]=nv[Dt](e),Tt.c()),h(Tt,1),Tt.m(ii.parentNode,ii));let ea=Lt;Lt=rv(e),Lt!==ea&&(wn(),v(ol[ea],1,1,()=>{ol[ea]=null}),$n(),Nt=ol[Lt],Nt||(Nt=ol[Lt]=ov[Lt](e),Nt.c()),h(Nt,1),Nt.m(ui.parentNode,ui)),e[0]==="pt"?$e?u&1&&h($e,1):($e=mg(),$e.c(),h($e,1),$e.m(di.parentNode,di)):$e&&(wn(),v($e,1,1,()=>{$e=null}),$n());const mp={};u&2&&(mp.$$scope={dirty:u,ctx:e}),to.$set(mp),e[0]==="pt"?we?u&1&&h(we,1):(we=fg(),we.c(),h(we,1),we.m(ci.parentNode,ci)):we&&(wn(),v(we,1,1,()=>{we=null}),$n())},i(e){Jd||(h(f.$$.fragment,e),h(x.$$.fragment,e),h(I),h(Q.$$.fragment,e),h(he.$$.fragment,e),h(Ue.$$.fragment,e),h(Ks.$$.fragment,e),h(Zs.$$.fragment,e),h(us.$$.fragment,e),h(et.$$.fragment,e),h(Ps.$$.fragment,e),h(st.$$.fragment,e),h(it.$$.fragment,e),h(cs.$$.fragment,e),h(Ae.$$.fragment,e),h(Oe.$$.fragment,e),h(je.$$.fragment,e),h(ut.$$.fragment,e),h(dt.$$.fragment,e),h(ms.$$.fragment,e),h(mt.$$.fragment,e),h(_s.$$.fragment,e),h(ht.$$.fragment,e),h(qt.$$.fragment,e),h(hs.$$.fragment,e),h(xt.$$.fragment,e),h(Ee.$$.fragment,e),h(pn.$$.fragment,e),h(ir.$$.fragment,e),h(ur.$$.fragment,e),h(pr.$$.fragment,e),h(dr.$$.fragment,e),h(cr.$$.fragment,e),h(mr.$$.fragment,e),h(fr.$$.fragment,e),h(_r.$$.fragment,e),h(hr.$$.fragment,e),h(vr.$$.fragment,e),h(br.$$.fragment,e),h(qr.$$.fragment,e),h(Ra.$$.fragment,e),h(gr.$$.fragment,e),h(xr.$$.fragment,e),h($r.$$.fragment,e),h(wr.$$.fragment,e),h(jr.$$.fragment,e),h(Er.$$.fragment,e),h(kr.$$.fragment,e),h(Et),h(yr.$$.fragment,e),h(yt),h(Ar.$$.fragment,e),h(Sr.$$.fragment,e),h(Pt),h(Mr.$$.fragment,e),h(Dr.$$.fragment,e),h(Tr.$$.fragment,e),h(Lr.$$.fragment,e),h(Nr.$$.fragment,e),h(Or.$$.fragment,e),h(Br.$$.fragment,e),h(Fr.$$.fragment,e),h(Vr.$$.fragment,e),h(Hr.$$.fragment,e),h(Rr.$$.fragment,e),h(Ur.$$.fragment,e),h(St),h(Qr.$$.fragment,e),h(Gr.$$.fragment,e),h(zt),h(Tt),h(Nt),h(Wr.$$.fragment,e),h($e),h(to.$$.fragment,e),h(we),h(Jr.$$.fragment,e),h(Xr.$$.fragment,e),h(Kr.$$.fragment,e),Jd=!0)},o(e){v(f.$$.fragment,e),v(x.$$.fragment,e),v(I),v(Q.$$.fragment,e),v(he.$$.fragment,e),v(Ue.$$.fragment,e),v(Ks.$$.fragment,e),v(Zs.$$.fragment,e),v(us.$$.fragment,e),v(et.$$.fragment,e),v(Ps.$$.fragment,e),v(st.$$.fragment,e),v(it.$$.fragment,e),v(cs.$$.fragment,e),v(Ae.$$.fragment,e),v(Oe.$$.fragment,e),v(je.$$.fragment,e),v(ut.$$.fragment,e),v(dt.$$.fragment,e),v(ms.$$.fragment,e),v(mt.$$.fragment,e),v(_s.$$.fragment,e),v(ht.$$.fragment,e),v(qt.$$.fragment,e),v(hs.$$.fragment,e),v(xt.$$.fragment,e),v(Ee.$$.fragment,e),v(pn.$$.fragment,e),v(ir.$$.fragment,e),v(ur.$$.fragment,e),v(pr.$$.fragment,e),v(dr.$$.fragment,e),v(cr.$$.fragment,e),v(mr.$$.fragment,e),v(fr.$$.fragment,e),v(_r.$$.fragment,e),v(hr.$$.fragment,e),v(vr.$$.fragment,e),v(br.$$.fragment,e),v(qr.$$.fragment,e),v(Ra.$$.fragment,e),v(gr.$$.fragment,e),v(xr.$$.fragment,e),v($r.$$.fragment,e),v(wr.$$.fragment,e),v(jr.$$.fragment,e),v(Er.$$.fragment,e),v(kr.$$.fragment,e),v(Et),v(yr.$$.fragment,e),v(yt),v(Ar.$$.fragment,e),v(Sr.$$.fragment,e),v(Pt),v(Mr.$$.fragment,e),v(Dr.$$.fragment,e),v(Tr.$$.fragment,e),v(Lr.$$.fragment,e),v(Nr.$$.fragment,e),v(Or.$$.fragment,e),v(Br.$$.fragment,e),v(Fr.$$.fragment,e),v(Vr.$$.fragment,e),v(Hr.$$.fragment,e),v(Rr.$$.fragment,e),v(Ur.$$.fragment,e),v(St),v(Qr.$$.fragment,e),v(Gr.$$.fragment,e),v(zt),v(Tt),v(Nt),v(Wr.$$.fragment,e),v($e),v(to.$$.fragment,e),v(we),v(Jr.$$.fragment,e),v(Xr.$$.fragment,e),v(Kr.$$.fragment,e),Jd=!1},d(e){t(p),e&&t(b),k(f,e),e&&t(y),e&&t(S),k(x),e&&t(A),Yr[T].d(e),e&&t(D),e&&t(P),e&&t(R),k(Q,e),e&&t(J),e&&t(H),e&&t(ye),e&&t(ie),e&&t(Fe),e&&t(ue),e&&t(rs),e&&t(W),e&&t(js),k(he,e),e&&t(He),e&&t(pe),k(Ue),e&&t(jn),e&&t(be),e&&t(te),e&&t(is),k(Ks),e&&t(It),e&&t(ks),e&&t(Vt),k(Zs,e),e&&t(ta),e&&t(ys),e&&t(na),k(us,e),e&&t(aa),k(et,e),e&&t(Cn),e&&t(me),e&&t(Cs),k(Ps,e),e&&t(de),k(st,e),e&&t(Ht),e&&t(oe),e&&t(ua),e&&t(ds),e&&t(Gt),k(it,e),e&&t(pa),k(cs,e),e&&t(da),e&&t(Wt),e&&t(We),k(Ae,e),e&&t(Jt),k(Oe,e),e&&t(ma),e&&t(Je),e&&t(zn),k(je,e),e&&t(As),k(ut,e),e&&t(Yt),e&&t(Zt),e&&t(fa),e&&t(ce),k(dt),e&&t(_a),k(ms,e),e&&t(ha),e&&t(Ms),e&&t(va),e&&t(zs),e&&t(ba),k(mt,e),e&&t(en),e&&t(ne),e&&t($a),k(_s,e),e&&t(wa),k(ht,e),e&&t(an),e&&t(Ke),e&&t(on),k(qt,e),e&&t(ja),e&&t(gt),e&&t(Ea),k(hs,e),e&&t(ka),k(xt,e),e&&t(Ds),e&&t(Se),e&&t(sr),e&&t(Ts),e&&t(nr),e&&t(vs),e&&t(Un),e&&t($t),e&&t(ar),e&&t(Be),e&&t(or),k(Ee,e),e&&t(rr),k(pn,e),e&&t(lr),e&&t(xe),e&&t(_p),e&&t(ze),e&&t(hp),k(ir,e),e&&t(vp),k(ur,e),e&&t(bp),e&&t(De),e&&t(qp),k(pr,e),e&&t(gp),k(dr,e),e&&t(xp),e&&t(Ol),e&&t($p),k(cr,e),e&&t(wp),k(mr,e),e&&t(jp),e&&t(Bl),e&&t(Ep),e&&t(Fl),e&&t(kp),e&&t(Va),e&&t(yp),e&&t(Te),e&&t(Cp),e&&t(Le),e&&t(Pp),k(fr,e),e&&t(Ap),k(_r,e),e&&t(Sp),e&&t(mn),e&&t(Mp),k(hr,e),e&&t(zp),k(vr,e),e&&t(Dp),e&&t(Ha),e&&t(Tp),k(br,e),e&&t(Lp),k(qr,e),e&&t(Np),e&&t(Vl),e&&t(Op),k(Ra,e),e&&t(Bp),e&&t(Hl),e&&t(Fp),k(gr,e),e&&t(Ip),e&&t(Rl),e&&t(Vp),e&&t(fn),e&&t(Hp),k(xr,e),e&&t(Rp),k($r,e),e&&t(Up),e&&t(Ul),e&&t(Qp),e&&t(Wn),k(wr),e&&t(Gp),e&&t(Qa),e&&t(Wp),e&&t(ke),e&&t(Jp),k(jr,e),e&&t(Xp),e&&t(Ql),e&&t(Kp),k(Er,e),e&&t(Yp),k(kr,e),e&&t(Zp),e&&t(Gl),e&&t(ed),e&&t(Wl),e&&t(sd),Zr[jt].d(e),e&&t(Jl),e&&t(Jn),k(yr),e&&t(td),el[kt].d(e),e&&t(Xl),e&&t(_n),e&&t(nd),e&&t(Os),e&&t(ad),e&&t(Bs),e&&t(od),e&&t(Fs),e&&t(rd),k(Ar,e),e&&t(ld),e&&t(Wa),e&&t(id),k(Sr,e),e&&t(ud),e&&t(Ja),e&&t(pd),sl[Ct].d(e),e&&t(Yl),e&&t(ss),e&&t(dd),k(Mr,e),e&&t(cd),e&&t(Xa),e&&t(md),e&&t(hn),e&&t(fd),e&&t(Zl),e&&t(_d),k(Dr,e),e&&t(hd),e&&t(Ka),e&&t(vd),k(Tr,e),e&&t(bd),e&&t(ei),e&&t(qd),k(Lr,e),e&&t(gd),e&&t(si),e&&t(xd),k(Nr,e),e&&t($d),k(Or,e),e&&t(wd),e&&t(ti),e&&t(jd),k(Br,e),e&&t(Ed),k(Fr,e),e&&t(kd),e&&t(vn),e&&t(yd),Zn.d(e),e&&t(ni),k(Vr,e),e&&t(Cd),e&&t(ai),e&&t(Pd),k(Hr,e),e&&t(Ad),k(Rr,e),e&&t(Sd),e&&t(Ya),e&&t(Md),e&&t(Kn),k(Ur),e&&t(zd),tl[At].d(e),e&&t(ri),e&&t(eo),e&&t(Dd),e&&t(Is),e&&t(Td),k(Qr,e),e&&t(Ld),e&&t(so),e&&t(Nd),k(Gr,e),e&&t(Od),nl[Mt].d(e),e&&t(li),e&&t(ts),e&&t(Bd),al[Dt].d(e),e&&t(ii),e&&t(bn),e&&t(Fd),ol[Lt].d(e),e&&t(ui),k(Wr,e),e&&t(Id),e&&t(pi),e&&t(Vd),$e&&$e.d(e),e&&t(di),e&&t(Vs),e&&t(Hd),k(to,e),e&&t(Rd),we&&we.d(e),e&&t(ci),e&&t(Yn),k(Jr),e&&t(Ud),e&&t(ns),e&&t(Qd),k(Xr,e),e&&t(Gd),k(Kr,e),e&&t(Wd),e&&t(fi)}}}const Ug={local:"rponse-aux-questions",sections:[{local:"prparation-des-donnes",sections:[{local:"le-jeu-de-donnes-squad",title:"Le jeu de donn\xE9es SQuAD"},{local:"traitement-des-donnes-dentranement",title:"Traitement des donn\xE9es d'entra\xEEnement"},{local:"traitement-des-donnes-de-validation",title:"Traitement des donn\xE9es de validation"}],title:"Pr\xE9paration des donn\xE9es"},{local:"ifinetuneri-le-modle-avec-lapi-trainer",title:"<i>Finetuner</i> le mod\xE8le avec l'API `Trainer`"},{local:"ifinetuneri-fin-du-modle-avec-keras",sections:[{local:"posttraitement",title:"Post-traitement"},{local:"ifinetuningi-du-modle",title:"<i>Finetuning</i> du mod\xE8le"}],title:"<i>Finetuner</i> fin du mod\xE8le avec Keras"},{local:"une-boucle-dentranement-personnalise",sections:[{local:"prparer-tout-pour-lentranement",title:"Pr\xE9parer tout pour l'entra\xEEnement"}],title:"Une boucle d'entra\xEEnement personnalis\xE9e"},{local:"boucle-dentranement",sections:[{local:"utilisation-du-modle-ifinetuni",title:"Utilisation du mod\xE8le <i>finetun\xE9</i>"}],title:"Boucle d'entra\xEEnement"}],title:"R\xE9ponse aux questions"};function Qg(U,p,b){let f="pt";return gg(()=>{const y=new URLSearchParams(window.location.search);b(0,f=y.get("fw")||"pt")}),[f]}class ex extends hg{constructor(p){super();vg(this,p,Qg,Rg,bg,{})}}export{ex as default,Ug as metadata};
