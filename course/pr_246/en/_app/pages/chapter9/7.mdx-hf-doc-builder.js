import{S as Gi,i as Ri,s as zi,e as l,k as u,w as g,t as a,M as Yi,c as n,d as o,m as h,a as r,x as b,h as s,b as p,N as To,G as t,g as c,y as x,q as _,o as k,B as E,v as Hi}from"../../chunks/vendor-hf-doc-builder.js";import{T as Mi}from"../../chunks/Tip-hf-doc-builder.js";import{I as He}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as Bo}from"../../chunks/CodeBlock-hf-doc-builder.js";import{D as Wi}from"../../chunks/DocNotebookDropdown-hf-doc-builder.js";function Ui(qo){let w;return{c(){w=a("\u{1F64B}If you're not familiar with the `with` statement in Python, we recommend checking out the excellent [tutorial](https://realpython.com/python-with-statement/) from Real Python. Come back here after reading that \u{1F917}")},l(G){w=s(G,"\u{1F64B}If you're not familiar with the `with` statement in Python, we recommend checking out the excellent [tutorial](https://realpython.com/python-with-statement/) from Real Python. Come back here after reading that \u{1F917}")},m(G,F){c(G,w,F)},d(G){G&&o(w)}}}function Ji(qo){let w,G,F,oe,lt,ke,Aa,nt,Sa,Do,Ee,Oo,B,Na,rt,Fa,La,it,Ga,Ra,ct,za,Ya,Ao,R,Ha,pt,Ma,Wa,ut,Ua,Ja,So,ae,ht,$e,Ka,dt,Qa,Va,Xa,ft,J,Za,mt,es,ts,wt,os,as,No,K,se,vt,je,ss,yt,ls,Fo,q,ns,gt,rs,is,bt,cs,ps,xt,us,hs,Lo,D,_t,ds,fs,kt,ms,ws,Et,vs,ys,$t,gs,Go,Me,bs,Ro,Q,le,jt,Ce,xs,Ct,_s,zo,We,ks,Yo,Ie,Ho,$,Vn,Mo,Ue,Es,Wo,O,ne,Pe,$s,It,js,Cs,Is,re,Ps,Ts,Pt,Te,Bs,Tt,qs,Ds,Os,V,j,As,Bt,Ss,Ns,qt,Fs,Ls,Dt,Gs,Rs,Ot,zs,Ys,Hs,d,Ms,At,Ws,Us,St,Js,Ks,Nt,Qs,Vs,Ft,Xs,Zs,Lt,el,tl,Gt,ol,al,Rt,sl,ll,nl,Be,rl,qe,il,cl,pl,zt,L,ul,Yt,hl,dl,Ht,fl,ml,Mt,wl,vl,Uo,X,ie,Wt,De,yl,Ut,gl,Jo,v,bl,Jt,xl,_l,Kt,kl,El,Qt,$l,jl,Vt,Cl,Il,Ko,A,Pl,Xt,Tl,Bl,Zt,ql,Dl,Oe,Ol,Al,Qo,S,Sl,eo,Nl,Fl,to,Ll,Gl,oo,Rl,zl,Vo,ce,Yl,ao,Hl,Ml,Xo,Ae,Zo,C,Xn,ea,pe,Wl,so,Ul,Jl,ta,Z,ue,lo,Se,Kl,no,Ql,oa,he,Vl,ro,Xl,Zl,aa,y,en,io,tn,on,co,an,sn,po,ln,nn,uo,rn,cn,sa,z,pn,ho,un,hn,fo,dn,fn,la,Y,Je,mo,mn,wn,vn,Ke,wo,yn,gn,bn,Qe,vo,xn,_n,na,Ve,kn,ra,Ne,ia,I,Zn,ca,ee,de,yo,Fe,En,go,$n,pa,H,jn,bo,Cn,In,xo,Pn,Tn,ua,Le,ha,P,er,da,te,fe,_o,Ge,Bn,ko,qn,fa,me,Dn,Eo,On,An,ma,Xe,Sn,wa,Re,va,T,tr,ya,f,Nn,$o,Fn,Ln,jo,Gn,Rn,Co,zn,Yn,Io,Hn,Mn,ze,Wn,Un,ga;return ke=new He({}),Ee=new Wi({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter9/section7.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter9/section7.ipynb"}]}}),je=new He({}),Ce=new He({}),Ie=new Bo({props:{code:`





`,highlighted:`<span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr


<span class="hljs-keyword">def</span> <span class="hljs-title function_">flip_text</span>(<span class="hljs-params">x</span>):
    <span class="hljs-keyword">return</span> x[::-<span class="hljs-number">1</span>]


demo = gr.Blocks()

<span class="hljs-keyword">with</span> demo:
    gr.Markdown(
        <span class="hljs-string">&quot;&quot;&quot;
    # Flip Text!
    Start typing below to see the output.
    &quot;&quot;&quot;</span>
    )
    <span class="hljs-built_in">input</span> = gr.Textbox(placeholder=<span class="hljs-string">&quot;Flip this text&quot;</span>)
    output = gr.Textbox()

    <span class="hljs-built_in">input</span>.change(fn=flip_text, inputs=<span class="hljs-built_in">input</span>, outputs=output)

demo.launch()`}}),re=new Mi({props:{$$slots:{default:[Ui]},$$scope:{ctx:qo}}}),De=new He({}),Ae=new Bo({props:{code:`







`,highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr

demo = gr.Blocks()


<span class="hljs-keyword">def</span> <span class="hljs-title function_">flip_text</span>(<span class="hljs-params">x</span>):
    <span class="hljs-keyword">return</span> x[::-<span class="hljs-number">1</span>]


<span class="hljs-keyword">def</span> <span class="hljs-title function_">flip_image</span>(<span class="hljs-params">x</span>):
    <span class="hljs-keyword">return</span> np.fliplr(x)


<span class="hljs-keyword">with</span> demo:
    gr.Markdown(<span class="hljs-string">&quot;Flip text or image files using this demo.&quot;</span>)
    <span class="hljs-keyword">with</span> gr.Tabs():
        <span class="hljs-keyword">with</span> gr.TabItem(<span class="hljs-string">&quot;Flip Text&quot;</span>):
            <span class="hljs-keyword">with</span> gr.Row():
                text_input = gr.Textbox()
                text_output = gr.Textbox()
            text_button = gr.Button(<span class="hljs-string">&quot;Flip&quot;</span>)
        <span class="hljs-keyword">with</span> gr.TabItem(<span class="hljs-string">&quot;Flip Image&quot;</span>):
            <span class="hljs-keyword">with</span> gr.Row():
                image_input = gr.Image()
                image_output = gr.Image()
            image_button = gr.Button(<span class="hljs-string">&quot;Flip&quot;</span>)

    text_button.click(flip_text, inputs=text_input, outputs=text_output)
    image_button.click(flip_image, inputs=image_input, outputs=image_output)

demo.launch()`}}),Se=new He({}),Ne=new Bo({props:{code:`





`,highlighted:`<span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr

api = gr.Interface.load(<span class="hljs-string">&quot;huggingface/EleutherAI/gpt-j-6B&quot;</span>)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">complete_with_gpt</span>(<span class="hljs-params">text</span>):
    <span class="hljs-comment"># Use the last 50 characters of the text as context</span>
    <span class="hljs-keyword">return</span> text[:-<span class="hljs-number">50</span>] + api(text[-<span class="hljs-number">50</span>:])


<span class="hljs-keyword">with</span> gr.Blocks() <span class="hljs-keyword">as</span> demo:
    textbox = gr.Textbox(placeholder=<span class="hljs-string">&quot;Type here and press enter...&quot;</span>, lines=<span class="hljs-number">4</span>)
    btn = gr.Button(<span class="hljs-string">&quot;Generate&quot;</span>)

    btn.click(complete_with_gpt, textbox, textbox)

demo.launch()`}}),Fe=new He({}),Le=new Bo({props:{code:`










`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr

asr = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, <span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)
classifier = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">speech_to_text</span>(<span class="hljs-params">speech</span>):
    text = asr(speech)[<span class="hljs-string">&quot;text&quot;</span>]
    <span class="hljs-keyword">return</span> text


<span class="hljs-keyword">def</span> <span class="hljs-title function_">text_to_sentiment</span>(<span class="hljs-params">text</span>):
    <span class="hljs-keyword">return</span> classifier(text)[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;label&quot;</span>]


demo = gr.Blocks()

<span class="hljs-keyword">with</span> demo:
    audio_file = gr.Audio(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;filepath&quot;</span>)
    text = gr.Textbox()
    label = gr.Label()

    b1 = gr.Button(<span class="hljs-string">&quot;Recognize Speech&quot;</span>)
    b2 = gr.Button(<span class="hljs-string">&quot;Classify Sentiment&quot;</span>)

    b1.click(speech_to_text, inputs=audio_file, outputs=text)
    b2.click(text_to_sentiment, inputs=text, outputs=label)

demo.launch()`}}),Ge=new He({}),Re=new Bo({props:{code:`



`,highlighted:`<span class="hljs-keyword">import</span> gradio <span class="hljs-keyword">as</span> gr


<span class="hljs-keyword">def</span> <span class="hljs-title function_">change_textbox</span>(<span class="hljs-params">choice</span>):
    <span class="hljs-keyword">if</span> choice == <span class="hljs-string">&quot;short&quot;</span>:
        <span class="hljs-keyword">return</span> gr.Textbox.update(lines=<span class="hljs-number">2</span>, visible=<span class="hljs-literal">True</span>)
    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;long&quot;</span>:
        <span class="hljs-keyword">return</span> gr.Textbox.update(lines=<span class="hljs-number">8</span>, visible=<span class="hljs-literal">True</span>)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">return</span> gr.Textbox.update(visible=<span class="hljs-literal">False</span>)


<span class="hljs-keyword">with</span> gr.Blocks() <span class="hljs-keyword">as</span> block:
    radio = gr.Radio(
        [<span class="hljs-string">&quot;short&quot;</span>, <span class="hljs-string">&quot;long&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>], label=<span class="hljs-string">&quot;What kind of essay would you like to write?&quot;</span>
    )
    text = gr.Textbox(lines=<span class="hljs-number">2</span>, interactive=<span class="hljs-literal">True</span>)

    radio.change(fn=change_textbox, inputs=radio, outputs=text)
    block.launch()`}}),{c(){w=l("meta"),G=u(),F=l("h1"),oe=l("a"),lt=l("span"),g(ke.$$.fragment),Aa=u(),nt=l("span"),Sa=a("Introduction to Gradio Blocks"),Do=u(),g(Ee.$$.fragment),Oo=u(),B=l("p"),Na=a("In the previous sections we have explored and created demos using the "),rt=l("code"),Fa=a("Interface"),La=a(" class. In this section we will introduce our "),it=l("strong"),Ga=a("newly developed"),Ra=a(" low-level API called "),ct=l("code"),za=a("gradio.Blocks"),Ya=a("."),Ao=u(),R=l("p"),Ha=a("Now, what\u2019s the difference between "),pt=l("code"),Ma=a("Interface"),Wa=a(" and "),ut=l("code"),Ua=a("Blocks"),Ja=a("?"),So=u(),ae=l("ul"),ht=l("li"),$e=l("p"),Ka=a("\u26A1 "),dt=l("code"),Qa=a("Interface"),Va=a(": a high-level API that allows you to create a full machine learning demo simply by providing a list of inputs and outputs."),Xa=u(),ft=l("li"),J=l("p"),Za=a("\u{1F9F1} "),mt=l("code"),es=a("Blocks"),ts=a(": a low-level API that allows you to have full control over the data flows and layout of your application. You can build very complex, multi-step applications using "),wt=l("code"),os=a("Blocks"),as=a(" (as in \u201Cbuilding blocks\u201D)."),No=u(),K=l("h3"),se=l("a"),vt=l("span"),g(je.$$.fragment),ss=u(),yt=l("span"),ls=a("Why Blocks \u{1F9F1}?"),Fo=u(),q=l("p"),ns=a("As we saw in the previous sections, the "),gt=l("code"),rs=a("Interface"),is=a(" class allows you to easily create full-fledged machine learning demos with just a few lines of code. The "),bt=l("code"),cs=a("Interface"),ps=a(" API is extremely easy to use but lacks the flexibility that the "),xt=l("code"),us=a("Blocks"),hs=a(" API provides. For example, you might want to:"),Lo=u(),D=l("ul"),_t=l("li"),ds=a("Group together related demos as multiple tabs in one web application"),fs=u(),kt=l("li"),ms=a("Change the layout of your demo, e.g. to specify where the inputs and outputs are located"),ws=u(),Et=l("li"),vs=a("Have multi-step interfaces, in which the output of one model becomes the input to the next model, or have more flexible data flows in general"),ys=u(),$t=l("li"),gs=a("Change a component\u2019s properties (for example, the choices in a dropdown) or its visibility based on user input"),Go=u(),Me=l("p"),bs=a("We will explore all of these concepts below."),Ro=u(),Q=l("h3"),le=l("a"),jt=l("span"),g(Ce.$$.fragment),xs=u(),Ct=l("span"),_s=a("Creating a simple demo using Blocks"),zo=u(),We=l("p"),ks=a("After you have installed Gradio, run the code below as a Python script, a Jupyter notebook, or a Colab notebook."),Yo=u(),g(Ie.$$.fragment),Ho=u(),$=l("iframe"),Mo=u(),Ue=l("p"),Es=a("This simple example above introduces 4 concepts that underlie Blocks:"),Wo=u(),O=l("ol"),ne=l("li"),Pe=l("p"),$s=a("Blocks allow you to build web applications that combine markdown, HTML, buttons, and interactive components simply by instantiating objects in Python inside of a "),It=l("code"),js=a("with gradio.Blocks"),Cs=a(" context."),Is=u(),g(re.$$.fragment),Ps=a(`
The order in which you instantiate components matters as each element gets rendered into the web app in the order it was created. (More complex layouts are discussed below)`),Ts=u(),Pt=l("li"),Te=l("p"),Bs=a("You can define regular Python functions anywhere in your code and run them with user input using "),Tt=l("code"),qs=a("Blocks"),Ds=a(". In our example, we have a simple function that \u201Cflips\u201D the input text, but you can write any Python function, from a simple calculation to processing the predictions from a machine learning model."),Os=u(),V=l("li"),j=l("p"),As=a("You can assign events to any "),Bt=l("code"),Ss=a("Blocks"),Ns=a(" component. This will run your function when the component is clicked, changed, etc. When you assign an event, you pass in three parameters: "),qt=l("code"),Fs=a("fn"),Ls=a(": the function that should be called, "),Dt=l("code"),Gs=a("inputs"),Rs=a(": the (list) of input component(s), and "),Ot=l("code"),zs=a("outputs"),Ys=a(": the (list) of output components that should be called."),Hs=u(),d=l("p"),Ms=a("In the example above, we run the "),At=l("code"),Ws=a("flip_text()"),Us=a(" function when the value in the "),St=l("code"),Js=a("Textbox"),Ks=a(" named input "),Nt=l("code"),Qs=a("input"),Vs=a(" changes. The event reads the value in "),Ft=l("code"),Xs=a("input"),Zs=a(", passes it as the name parameter to "),Lt=l("code"),el=a("flip_text()"),tl=a(", which then returns a value that gets assigned to our second "),Gt=l("code"),ol=a("Textbox"),al=a(" named "),Rt=l("code"),sl=a("output"),ll=a("."),nl=u(),Be=l("p"),rl=a("To see a list of events that each component supports, see the Gradio "),qe=l("a"),il=a("documentation"),cl=a("."),pl=u(),zt=l("li"),L=l("p"),ul=a("Blocks automatically figures out whether a component should be interactive (accept user input) or not, based on the event triggers you define. In our example, the first textbox is interactive, since its value is used by the "),Yt=l("code"),hl=a("flip_text()"),dl=a(" function. The second textbox is not interactive, since its value is never used as an input. In some cases, you might want to override this, which you can do by passing a boolean to the "),Ht=l("code"),fl=a("interactive"),ml=a(" parameter of the component (e.g. "),Mt=l("code"),wl=a('gr.Textbox(placeholder="Flip this text", interactive=True)'),vl=a(")."),Uo=u(),X=l("h3"),ie=l("a"),Wt=l("span"),g(De.$$.fragment),yl=u(),Ut=l("span"),gl=a("Customizing the layout of your demo"),Jo=u(),v=l("p"),bl=a("How can we use "),Jt=l("code"),xl=a("Blocks"),_l=a(" to customize the layout of our demo? By default, "),Kt=l("code"),kl=a("Blocks"),El=a(" renders the components that you create vertically in one column. You can change that by creating additional columns "),Qt=l("code"),$l=a("with gradio.Column():"),jl=a(" or rows "),Vt=l("code"),Cl=a("with gradio.Row():"),Il=a(" and creating components within those contexts."),Ko=u(),A=l("p"),Pl=a("Here\u2019s what you should keep in mind: any components created under a "),Xt=l("code"),Tl=a("Column"),Bl=a(" (this is also the default) will be laid out vertically. Any component created under a "),Zt=l("code"),ql=a("Row"),Dl=a(" will be laid out horizontally, similar to the "),Oe=l("a"),Ol=a("flexbox model in web development"),Al=a("."),Qo=u(),S=l("p"),Sl=a("Finally, you can also create tabs for your demo by using the "),eo=l("code"),Nl=a("with gradio.Tabs()"),Fl=a(" context manager. Within this context, you can create multiple tabs by specifying "),to=l("code"),Ll=a("with gradio.TabItem(name_of_tab):"),Gl=a(" children. Any component created inside of a "),oo=l("code"),Rl=a("with gradio.TabItem(name_of_tab):"),zl=a(" context appears in that tab."),Vo=u(),ce=l("p"),Yl=a("Now let\u2019s add a "),ao=l("code"),Hl=a("flip_image()"),Ml=a(" function to our demo and add a new tab that flips images. Below is an example with 2 tabs and also uses a Row:"),Xo=u(),g(Ae.$$.fragment),Zo=u(),C=l("iframe"),ea=u(),pe=l("p"),Wl=a("You\u2019ll notice that in this example, we\u2019ve also created a "),so=l("code"),Ul=a("Button"),Jl=a(" component in each tab, and we\u2019ve assigned a click event to each button, which is what actually runs the function."),ta=u(),Z=l("h3"),ue=l("a"),lo=l("span"),g(Se.$$.fragment),Kl=u(),no=l("span"),Ql=a("Exploring events and state"),oa=u(),he=l("p"),Vl=a("Just as you can control the layout, "),ro=l("code"),Xl=a("Blocks"),Zl=a(" gives you fine-grained control over what events trigger function calls. Each component and many layouts have specific events that they support."),aa=u(),y=l("p"),en=a("For example, the "),io=l("code"),tn=a("Textbox"),on=a(" component has 2 events: "),co=l("code"),an=a("change()"),sn=a(" (when the value inside of the textbox changes), and "),po=l("code"),ln=a("submit()"),nn=a(" (when a user presses the enter key while focused on the textbox). More complex components can have even more events: for example, the "),uo=l("code"),rn=a("Audio"),cn=a(" component also has separate events for when the audio file is played, cleared, paused, etc. See the documentation for the events each component supports."),sa=u(),z=l("p"),pn=a("You can attach event trigger to none, one, or more of these events. You create an event trigger by calling the name of the event on the component instance as a function \u2014 e.g. "),ho=l("code"),un=a("textbox.change(...)"),hn=a(" or "),fo=l("code"),dn=a("btn.click(...)"),fn=a(". The function takes in three parameters, as discussed above:"),la=u(),Y=l("ul"),Je=l("li"),mo=l("code"),mn=a("fn"),wn=a(": the function to run"),vn=u(),Ke=l("li"),wo=l("code"),yn=a("inputs"),gn=a(": a (list of) component(s) whose values should supplied as the input parameters to the function. Each component\u2019s value gets mapped to the corresponding function parameter, in order. This parameter can be None if the function does not take any parameters."),bn=u(),Qe=l("li"),vo=l("code"),xn=a("outputs"),_n=a(": a (list of) component(s) whose values should be updated based on the values returned by the function. Each return value sets the corresponding component\u2019s value, in order. This parameter can be None if the function does not return anything."),na=u(),Ve=l("p"),kn=a("You can even make the input and output component be the same component, as we do in this example that uses a GPT model to do text completion:"),ra=u(),g(Ne.$$.fragment),ia=u(),I=l("iframe"),ca=u(),ee=l("h3"),de=l("a"),yo=l("span"),g(Fe.$$.fragment),En=u(),go=l("span"),$n=a("Creating multi-step demos"),pa=u(),H=l("p"),jn=a("In some cases, you might want a "),bo=l("em"),Cn=a("multi-step demo"),In=a(", in which you reuse the output of one function as the input to the next. This is really easy to do with "),xo=l("code"),Pn=a("Blocks"),Tn=a(", as you can use a component for the input of one event trigger but the output of another. Take a look at the text component in the example below, its value is the result of a speech-to-text model, but also gets passed into a sentiment analysis model:"),ua=u(),g(Le.$$.fragment),ha=u(),P=l("iframe"),da=u(),te=l("h3"),fe=l("a"),_o=l("span"),g(Ge.$$.fragment),Bn=u(),ko=l("span"),qn=a("Updating Component Properties"),fa=u(),me=l("p"),Dn=a("So far, we have seen how to create events to update the value of another component. But what happens if you want to change other properties of a component, like the visibility of a textbox or the choices in a radio button group? You can do this by returning a component class\u2019s "),Eo=l("code"),On=a("update()"),An=a(" method instead of a regular return value from your function."),ma=u(),Xe=l("p"),Sn=a("This is most easily illustrated with an example:"),wa=u(),g(Re.$$.fragment),va=u(),T=l("iframe"),ya=u(),f=l("p"),Nn=a("We just explored all the core concepts of "),$o=l("code"),Fn=a("Blocks"),Ln=a("! Just like with "),jo=l("code"),Gn=a("Interfaces"),Rn=a(", you can create cool demos that can be shared by using "),Co=l("code"),zn=a("share=True"),Yn=a(" in the "),Io=l("code"),Hn=a("launch()"),Mn=a(" method or deployed on "),ze=l("a"),Wn=a("Hugging Face Spaces"),Un=a("."),this.h()},l(e){const i=Yi('[data-svelte="svelte-1phssyn"]',document.head);w=n(i,"META",{name:!0,content:!0}),i.forEach(o),G=h(e),F=n(e,"H1",{class:!0});var Ye=r(F);oe=n(Ye,"A",{id:!0,class:!0,href:!0});var or=r(oe);lt=n(or,"SPAN",{});var ar=r(lt);b(ke.$$.fragment,ar),ar.forEach(o),or.forEach(o),Aa=h(Ye),nt=n(Ye,"SPAN",{});var sr=r(nt);Sa=s(sr,"Introduction to Gradio Blocks"),sr.forEach(o),Ye.forEach(o),Do=h(e),b(Ee.$$.fragment,e),Oo=h(e),B=n(e,"P",{});var we=r(B);Na=s(we,"In the previous sections we have explored and created demos using the "),rt=n(we,"CODE",{});var lr=r(rt);Fa=s(lr,"Interface"),lr.forEach(o),La=s(we," class. In this section we will introduce our "),it=n(we,"STRONG",{});var nr=r(it);Ga=s(nr,"newly developed"),nr.forEach(o),Ra=s(we," low-level API called "),ct=n(we,"CODE",{});var rr=r(ct);za=s(rr,"gradio.Blocks"),rr.forEach(o),Ya=s(we,"."),we.forEach(o),Ao=h(e),R=n(e,"P",{});var Ze=r(R);Ha=s(Ze,"Now, what\u2019s the difference between "),pt=n(Ze,"CODE",{});var ir=r(pt);Ma=s(ir,"Interface"),ir.forEach(o),Wa=s(Ze," and "),ut=n(Ze,"CODE",{});var cr=r(ut);Ua=s(cr,"Blocks"),cr.forEach(o),Ja=s(Ze,"?"),Ze.forEach(o),So=h(e),ae=n(e,"UL",{});var ba=r(ae);ht=n(ba,"LI",{});var pr=r(ht);$e=n(pr,"P",{});var xa=r($e);Ka=s(xa,"\u26A1 "),dt=n(xa,"CODE",{});var ur=r(dt);Qa=s(ur,"Interface"),ur.forEach(o),Va=s(xa,": a high-level API that allows you to create a full machine learning demo simply by providing a list of inputs and outputs."),xa.forEach(o),pr.forEach(o),Xa=h(ba),ft=n(ba,"LI",{});var hr=r(ft);J=n(hr,"P",{});var et=r(J);Za=s(et,"\u{1F9F1} "),mt=n(et,"CODE",{});var dr=r(mt);es=s(dr,"Blocks"),dr.forEach(o),ts=s(et,": a low-level API that allows you to have full control over the data flows and layout of your application. You can build very complex, multi-step applications using "),wt=n(et,"CODE",{});var fr=r(wt);os=s(fr,"Blocks"),fr.forEach(o),as=s(et," (as in \u201Cbuilding blocks\u201D)."),et.forEach(o),hr.forEach(o),ba.forEach(o),No=h(e),K=n(e,"H3",{class:!0});var _a=r(K);se=n(_a,"A",{id:!0,class:!0,href:!0});var mr=r(se);vt=n(mr,"SPAN",{});var wr=r(vt);b(je.$$.fragment,wr),wr.forEach(o),mr.forEach(o),ss=h(_a),yt=n(_a,"SPAN",{});var vr=r(yt);ls=s(vr,"Why Blocks \u{1F9F1}?"),vr.forEach(o),_a.forEach(o),Fo=h(e),q=n(e,"P",{});var ve=r(q);ns=s(ve,"As we saw in the previous sections, the "),gt=n(ve,"CODE",{});var yr=r(gt);rs=s(yr,"Interface"),yr.forEach(o),is=s(ve," class allows you to easily create full-fledged machine learning demos with just a few lines of code. The "),bt=n(ve,"CODE",{});var gr=r(bt);cs=s(gr,"Interface"),gr.forEach(o),ps=s(ve," API is extremely easy to use but lacks the flexibility that the "),xt=n(ve,"CODE",{});var br=r(xt);us=s(br,"Blocks"),br.forEach(o),hs=s(ve," API provides. For example, you might want to:"),ve.forEach(o),Lo=h(e),D=n(e,"UL",{});var ye=r(D);_t=n(ye,"LI",{});var xr=r(_t);ds=s(xr,"Group together related demos as multiple tabs in one web application"),xr.forEach(o),fs=h(ye),kt=n(ye,"LI",{});var _r=r(kt);ms=s(_r,"Change the layout of your demo, e.g. to specify where the inputs and outputs are located"),_r.forEach(o),ws=h(ye),Et=n(ye,"LI",{});var kr=r(Et);vs=s(kr,"Have multi-step interfaces, in which the output of one model becomes the input to the next model, or have more flexible data flows in general"),kr.forEach(o),ys=h(ye),$t=n(ye,"LI",{});var Er=r($t);gs=s(Er,"Change a component\u2019s properties (for example, the choices in a dropdown) or its visibility based on user input"),Er.forEach(o),ye.forEach(o),Go=h(e),Me=n(e,"P",{});var $r=r(Me);bs=s($r,"We will explore all of these concepts below."),$r.forEach(o),Ro=h(e),Q=n(e,"H3",{class:!0});var ka=r(Q);le=n(ka,"A",{id:!0,class:!0,href:!0});var jr=r(le);jt=n(jr,"SPAN",{});var Cr=r(jt);b(Ce.$$.fragment,Cr),Cr.forEach(o),jr.forEach(o),xs=h(ka),Ct=n(ka,"SPAN",{});var Ir=r(Ct);_s=s(Ir,"Creating a simple demo using Blocks"),Ir.forEach(o),ka.forEach(o),zo=h(e),We=n(e,"P",{});var Pr=r(We);ks=s(Pr,"After you have installed Gradio, run the code below as a Python script, a Jupyter notebook, or a Colab notebook."),Pr.forEach(o),Yo=h(e),b(Ie.$$.fragment,e),Ho=h(e),$=n(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),r($).forEach(o),Mo=h(e),Ue=n(e,"P",{});var Tr=r(Ue);Es=s(Tr,"This simple example above introduces 4 concepts that underlie Blocks:"),Tr.forEach(o),Wo=h(e),O=n(e,"OL",{});var ge=r(O);ne=n(ge,"LI",{});var Po=r(ne);Pe=n(Po,"P",{});var Ea=r(Pe);$s=s(Ea,"Blocks allow you to build web applications that combine markdown, HTML, buttons, and interactive components simply by instantiating objects in Python inside of a "),It=n(Ea,"CODE",{});var Br=r(It);js=s(Br,"with gradio.Blocks"),Br.forEach(o),Cs=s(Ea," context."),Ea.forEach(o),Is=h(Po),b(re.$$.fragment,Po),Ps=s(Po,`
The order in which you instantiate components matters as each element gets rendered into the web app in the order it was created. (More complex layouts are discussed below)`),Po.forEach(o),Ts=h(ge),Pt=n(ge,"LI",{});var qr=r(Pt);Te=n(qr,"P",{});var $a=r(Te);Bs=s($a,"You can define regular Python functions anywhere in your code and run them with user input using "),Tt=n($a,"CODE",{});var Dr=r(Tt);qs=s(Dr,"Blocks"),Dr.forEach(o),Ds=s($a,". In our example, we have a simple function that \u201Cflips\u201D the input text, but you can write any Python function, from a simple calculation to processing the predictions from a machine learning model."),$a.forEach(o),qr.forEach(o),Os=h(ge),V=n(ge,"LI",{});var tt=r(V);j=n(tt,"P",{});var M=r(j);As=s(M,"You can assign events to any "),Bt=n(M,"CODE",{});var Or=r(Bt);Ss=s(Or,"Blocks"),Or.forEach(o),Ns=s(M," component. This will run your function when the component is clicked, changed, etc. When you assign an event, you pass in three parameters: "),qt=n(M,"CODE",{});var Ar=r(qt);Fs=s(Ar,"fn"),Ar.forEach(o),Ls=s(M,": the function that should be called, "),Dt=n(M,"CODE",{});var Sr=r(Dt);Gs=s(Sr,"inputs"),Sr.forEach(o),Rs=s(M,": the (list) of input component(s), and "),Ot=n(M,"CODE",{});var Nr=r(Ot);zs=s(Nr,"outputs"),Nr.forEach(o),Ys=s(M,": the (list) of output components that should be called."),M.forEach(o),Hs=h(tt),d=n(tt,"P",{});var m=r(d);Ms=s(m,"In the example above, we run the "),At=n(m,"CODE",{});var Fr=r(At);Ws=s(Fr,"flip_text()"),Fr.forEach(o),Us=s(m," function when the value in the "),St=n(m,"CODE",{});var Lr=r(St);Js=s(Lr,"Textbox"),Lr.forEach(o),Ks=s(m," named input "),Nt=n(m,"CODE",{});var Gr=r(Nt);Qs=s(Gr,"input"),Gr.forEach(o),Vs=s(m," changes. The event reads the value in "),Ft=n(m,"CODE",{});var Rr=r(Ft);Xs=s(Rr,"input"),Rr.forEach(o),Zs=s(m,", passes it as the name parameter to "),Lt=n(m,"CODE",{});var zr=r(Lt);el=s(zr,"flip_text()"),zr.forEach(o),tl=s(m,", which then returns a value that gets assigned to our second "),Gt=n(m,"CODE",{});var Yr=r(Gt);ol=s(Yr,"Textbox"),Yr.forEach(o),al=s(m," named "),Rt=n(m,"CODE",{});var Hr=r(Rt);sl=s(Hr,"output"),Hr.forEach(o),ll=s(m,"."),m.forEach(o),nl=h(tt),Be=n(tt,"P",{});var ja=r(Be);rl=s(ja,"To see a list of events that each component supports, see the Gradio "),qe=n(ja,"A",{href:!0,rel:!0});var Mr=r(qe);il=s(Mr,"documentation"),Mr.forEach(o),cl=s(ja,"."),ja.forEach(o),tt.forEach(o),pl=h(ge),zt=n(ge,"LI",{});var Wr=r(zt);L=n(Wr,"P",{});var be=r(L);ul=s(be,"Blocks automatically figures out whether a component should be interactive (accept user input) or not, based on the event triggers you define. In our example, the first textbox is interactive, since its value is used by the "),Yt=n(be,"CODE",{});var Ur=r(Yt);hl=s(Ur,"flip_text()"),Ur.forEach(o),dl=s(be," function. The second textbox is not interactive, since its value is never used as an input. In some cases, you might want to override this, which you can do by passing a boolean to the "),Ht=n(be,"CODE",{});var Jr=r(Ht);fl=s(Jr,"interactive"),Jr.forEach(o),ml=s(be," parameter of the component (e.g. "),Mt=n(be,"CODE",{});var Kr=r(Mt);wl=s(Kr,'gr.Textbox(placeholder="Flip this text", interactive=True)'),Kr.forEach(o),vl=s(be,")."),be.forEach(o),Wr.forEach(o),ge.forEach(o),Uo=h(e),X=n(e,"H3",{class:!0});var Ca=r(X);ie=n(Ca,"A",{id:!0,class:!0,href:!0});var Qr=r(ie);Wt=n(Qr,"SPAN",{});var Vr=r(Wt);b(De.$$.fragment,Vr),Vr.forEach(o),Qr.forEach(o),yl=h(Ca),Ut=n(Ca,"SPAN",{});var Xr=r(Ut);gl=s(Xr,"Customizing the layout of your demo"),Xr.forEach(o),Ca.forEach(o),Jo=h(e),v=n(e,"P",{});var W=r(v);bl=s(W,"How can we use "),Jt=n(W,"CODE",{});var Zr=r(Jt);xl=s(Zr,"Blocks"),Zr.forEach(o),_l=s(W," to customize the layout of our demo? By default, "),Kt=n(W,"CODE",{});var ei=r(Kt);kl=s(ei,"Blocks"),ei.forEach(o),El=s(W," renders the components that you create vertically in one column. You can change that by creating additional columns "),Qt=n(W,"CODE",{});var ti=r(Qt);$l=s(ti,"with gradio.Column():"),ti.forEach(o),jl=s(W," or rows "),Vt=n(W,"CODE",{});var oi=r(Vt);Cl=s(oi,"with gradio.Row():"),oi.forEach(o),Il=s(W," and creating components within those contexts."),W.forEach(o),Ko=h(e),A=n(e,"P",{});var xe=r(A);Pl=s(xe,"Here\u2019s what you should keep in mind: any components created under a "),Xt=n(xe,"CODE",{});var ai=r(Xt);Tl=s(ai,"Column"),ai.forEach(o),Bl=s(xe," (this is also the default) will be laid out vertically. Any component created under a "),Zt=n(xe,"CODE",{});var si=r(Zt);ql=s(si,"Row"),si.forEach(o),Dl=s(xe," will be laid out horizontally, similar to the "),Oe=n(xe,"A",{href:!0,rel:!0});var li=r(Oe);Ol=s(li,"flexbox model in web development"),li.forEach(o),Al=s(xe,"."),xe.forEach(o),Qo=h(e),S=n(e,"P",{});var _e=r(S);Sl=s(_e,"Finally, you can also create tabs for your demo by using the "),eo=n(_e,"CODE",{});var ni=r(eo);Nl=s(ni,"with gradio.Tabs()"),ni.forEach(o),Fl=s(_e," context manager. Within this context, you can create multiple tabs by specifying "),to=n(_e,"CODE",{});var ri=r(to);Ll=s(ri,"with gradio.TabItem(name_of_tab):"),ri.forEach(o),Gl=s(_e," children. Any component created inside of a "),oo=n(_e,"CODE",{});var ii=r(oo);Rl=s(ii,"with gradio.TabItem(name_of_tab):"),ii.forEach(o),zl=s(_e," context appears in that tab."),_e.forEach(o),Vo=h(e),ce=n(e,"P",{});var Ia=r(ce);Yl=s(Ia,"Now let\u2019s add a "),ao=n(Ia,"CODE",{});var ci=r(ao);Hl=s(ci,"flip_image()"),ci.forEach(o),Ml=s(Ia," function to our demo and add a new tab that flips images. Below is an example with 2 tabs and also uses a Row:"),Ia.forEach(o),Xo=h(e),b(Ae.$$.fragment,e),Zo=h(e),C=n(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),r(C).forEach(o),ea=h(e),pe=n(e,"P",{});var Pa=r(pe);Wl=s(Pa,"You\u2019ll notice that in this example, we\u2019ve also created a "),so=n(Pa,"CODE",{});var pi=r(so);Ul=s(pi,"Button"),pi.forEach(o),Jl=s(Pa," component in each tab, and we\u2019ve assigned a click event to each button, which is what actually runs the function."),Pa.forEach(o),ta=h(e),Z=n(e,"H3",{class:!0});var Ta=r(Z);ue=n(Ta,"A",{id:!0,class:!0,href:!0});var ui=r(ue);lo=n(ui,"SPAN",{});var hi=r(lo);b(Se.$$.fragment,hi),hi.forEach(o),ui.forEach(o),Kl=h(Ta),no=n(Ta,"SPAN",{});var di=r(no);Ql=s(di,"Exploring events and state"),di.forEach(o),Ta.forEach(o),oa=h(e),he=n(e,"P",{});var Ba=r(he);Vl=s(Ba,"Just as you can control the layout, "),ro=n(Ba,"CODE",{});var fi=r(ro);Xl=s(fi,"Blocks"),fi.forEach(o),Zl=s(Ba," gives you fine-grained control over what events trigger function calls. Each component and many layouts have specific events that they support."),Ba.forEach(o),aa=h(e),y=n(e,"P",{});var U=r(y);en=s(U,"For example, the "),io=n(U,"CODE",{});var mi=r(io);tn=s(mi,"Textbox"),mi.forEach(o),on=s(U," component has 2 events: "),co=n(U,"CODE",{});var wi=r(co);an=s(wi,"change()"),wi.forEach(o),sn=s(U," (when the value inside of the textbox changes), and "),po=n(U,"CODE",{});var vi=r(po);ln=s(vi,"submit()"),vi.forEach(o),nn=s(U," (when a user presses the enter key while focused on the textbox). More complex components can have even more events: for example, the "),uo=n(U,"CODE",{});var yi=r(uo);rn=s(yi,"Audio"),yi.forEach(o),cn=s(U," component also has separate events for when the audio file is played, cleared, paused, etc. See the documentation for the events each component supports."),U.forEach(o),sa=h(e),z=n(e,"P",{});var ot=r(z);pn=s(ot,"You can attach event trigger to none, one, or more of these events. You create an event trigger by calling the name of the event on the component instance as a function \u2014 e.g. "),ho=n(ot,"CODE",{});var gi=r(ho);un=s(gi,"textbox.change(...)"),gi.forEach(o),hn=s(ot," or "),fo=n(ot,"CODE",{});var bi=r(fo);dn=s(bi,"btn.click(...)"),bi.forEach(o),fn=s(ot,". The function takes in three parameters, as discussed above:"),ot.forEach(o),la=h(e),Y=n(e,"UL",{});var at=r(Y);Je=n(at,"LI",{});var Jn=r(Je);mo=n(Jn,"CODE",{});var xi=r(mo);mn=s(xi,"fn"),xi.forEach(o),wn=s(Jn,": the function to run"),Jn.forEach(o),vn=h(at),Ke=n(at,"LI",{});var Kn=r(Ke);wo=n(Kn,"CODE",{});var _i=r(wo);yn=s(_i,"inputs"),_i.forEach(o),gn=s(Kn,": a (list of) component(s) whose values should supplied as the input parameters to the function. Each component\u2019s value gets mapped to the corresponding function parameter, in order. This parameter can be None if the function does not take any parameters."),Kn.forEach(o),bn=h(at),Qe=n(at,"LI",{});var Qn=r(Qe);vo=n(Qn,"CODE",{});var ki=r(vo);xn=s(ki,"outputs"),ki.forEach(o),_n=s(Qn,": a (list of) component(s) whose values should be updated based on the values returned by the function. Each return value sets the corresponding component\u2019s value, in order. This parameter can be None if the function does not return anything."),Qn.forEach(o),at.forEach(o),na=h(e),Ve=n(e,"P",{});var Ei=r(Ve);kn=s(Ei,"You can even make the input and output component be the same component, as we do in this example that uses a GPT model to do text completion:"),Ei.forEach(o),ra=h(e),b(Ne.$$.fragment,e),ia=h(e),I=n(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),r(I).forEach(o),ca=h(e),ee=n(e,"H3",{class:!0});var qa=r(ee);de=n(qa,"A",{id:!0,class:!0,href:!0});var $i=r(de);yo=n($i,"SPAN",{});var ji=r(yo);b(Fe.$$.fragment,ji),ji.forEach(o),$i.forEach(o),En=h(qa),go=n(qa,"SPAN",{});var Ci=r(go);$n=s(Ci,"Creating multi-step demos"),Ci.forEach(o),qa.forEach(o),pa=h(e),H=n(e,"P",{});var st=r(H);jn=s(st,"In some cases, you might want a "),bo=n(st,"EM",{});var Ii=r(bo);Cn=s(Ii,"multi-step demo"),Ii.forEach(o),In=s(st,", in which you reuse the output of one function as the input to the next. This is really easy to do with "),xo=n(st,"CODE",{});var Pi=r(xo);Pn=s(Pi,"Blocks"),Pi.forEach(o),Tn=s(st,", as you can use a component for the input of one event trigger but the output of another. Take a look at the text component in the example below, its value is the result of a speech-to-text model, but also gets passed into a sentiment analysis model:"),st.forEach(o),ua=h(e),b(Le.$$.fragment,e),ha=h(e),P=n(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),r(P).forEach(o),da=h(e),te=n(e,"H3",{class:!0});var Da=r(te);fe=n(Da,"A",{id:!0,class:!0,href:!0});var Ti=r(fe);_o=n(Ti,"SPAN",{});var Bi=r(_o);b(Ge.$$.fragment,Bi),Bi.forEach(o),Ti.forEach(o),Bn=h(Da),ko=n(Da,"SPAN",{});var qi=r(ko);qn=s(qi,"Updating Component Properties"),qi.forEach(o),Da.forEach(o),fa=h(e),me=n(e,"P",{});var Oa=r(me);Dn=s(Oa,"So far, we have seen how to create events to update the value of another component. But what happens if you want to change other properties of a component, like the visibility of a textbox or the choices in a radio button group? You can do this by returning a component class\u2019s "),Eo=n(Oa,"CODE",{});var Di=r(Eo);On=s(Di,"update()"),Di.forEach(o),An=s(Oa," method instead of a regular return value from your function."),Oa.forEach(o),ma=h(e),Xe=n(e,"P",{});var Oi=r(Xe);Sn=s(Oi,"This is most easily illustrated with an example:"),Oi.forEach(o),wa=h(e),b(Re.$$.fragment,e),va=h(e),T=n(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),r(T).forEach(o),ya=h(e),f=n(e,"P",{});var N=r(f);Nn=s(N,"We just explored all the core concepts of "),$o=n(N,"CODE",{});var Ai=r($o);Fn=s(Ai,"Blocks"),Ai.forEach(o),Ln=s(N,"! Just like with "),jo=n(N,"CODE",{});var Si=r(jo);Gn=s(Si,"Interfaces"),Si.forEach(o),Rn=s(N,", you can create cool demos that can be shared by using "),Co=n(N,"CODE",{});var Ni=r(Co);zn=s(Ni,"share=True"),Ni.forEach(o),Yn=s(N," in the "),Io=n(N,"CODE",{});var Fi=r(Io);Hn=s(Fi,"launch()"),Fi.forEach(o),Mn=s(N," method or deployed on "),ze=n(N,"A",{href:!0,rel:!0});var Li=r(ze);Wn=s(Li,"Hugging Face Spaces"),Li.forEach(o),Un=s(N,"."),N.forEach(o),this.h()},h(){p(w,"name","hf:doc:metadata"),p(w,"content",JSON.stringify(Ki)),p(oe,"id","introduction-to-gradio-blocks"),p(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(oe,"href","#introduction-to-gradio-blocks"),p(F,"class","relative group"),p(se,"id","why-blocks"),p(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(se,"href","#why-blocks"),p(K,"class","relative group"),p(le,"id","creating-a-simple-demo-using-blocks"),p(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(le,"href","#creating-a-simple-demo-using-blocks"),p(Q,"class","relative group"),To($.src,Vn="https://hf.space/gradioiframe/course-demos/flip_text/+")||p($,"src",Vn),p($,"frameborder","0"),p($,"height","400"),p($,"title","Gradio app"),p($,"class","container p-0 flex-grow space-iframe"),p($,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),p($,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),p(qe,"href","https://www.gradio.app/docs/"),p(qe,"rel","nofollow"),p(ie,"id","customizing-the-layout-of-your-demo"),p(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ie,"href","#customizing-the-layout-of-your-demo"),p(X,"class","relative group"),p(Oe,"href","https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"),p(Oe,"rel","nofollow"),To(C.src,Xn="https://hf.space/gradioiframe/course-demos/flip_text_image/+")||p(C,"src",Xn),p(C,"frameborder","0"),p(C,"height","450"),p(C,"title","Gradio app"),p(C,"class","container p-0 flex-grow space-iframe"),p(C,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),p(C,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),p(ue,"id","exploring-events-and-state"),p(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ue,"href","#exploring-events-and-state"),p(Z,"class","relative group"),To(I.src,Zn="https://hf.space/gradioiframe/course-demos/blocks_gpt/+")||p(I,"src",Zn),p(I,"frameborder","0"),p(I,"height","300"),p(I,"title","Gradio app"),p(I,"class","container p-0 flex-grow space-iframe"),p(I,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),p(I,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),p(de,"id","creating-multistep-demos"),p(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(de,"href","#creating-multistep-demos"),p(ee,"class","relative group"),To(P.src,er="https://hf.space/gradioiframe/course-demos/blocks_multi_step/+")||p(P,"src",er),p(P,"frameborder","0"),p(P,"height","600"),p(P,"title","Gradio app"),p(P,"class","container p-0 flex-grow space-iframe"),p(P,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),p(P,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),p(fe,"id","updating-component-properties"),p(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(fe,"href","#updating-component-properties"),p(te,"class","relative group"),To(T.src,tr="https://hf.space/gradioiframe/course-demos/blocks_update_component_properties/+")||p(T,"src",tr),p(T,"frameborder","0"),p(T,"height","300"),p(T,"title","Gradio app"),p(T,"class","container p-0 flex-grow space-iframe"),p(T,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),p(T,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),p(ze,"href","https://huggingface.co/spaces"),p(ze,"rel","nofollow")},m(e,i){t(document.head,w),c(e,G,i),c(e,F,i),t(F,oe),t(oe,lt),x(ke,lt,null),t(F,Aa),t(F,nt),t(nt,Sa),c(e,Do,i),x(Ee,e,i),c(e,Oo,i),c(e,B,i),t(B,Na),t(B,rt),t(rt,Fa),t(B,La),t(B,it),t(it,Ga),t(B,Ra),t(B,ct),t(ct,za),t(B,Ya),c(e,Ao,i),c(e,R,i),t(R,Ha),t(R,pt),t(pt,Ma),t(R,Wa),t(R,ut),t(ut,Ua),t(R,Ja),c(e,So,i),c(e,ae,i),t(ae,ht),t(ht,$e),t($e,Ka),t($e,dt),t(dt,Qa),t($e,Va),t(ae,Xa),t(ae,ft),t(ft,J),t(J,Za),t(J,mt),t(mt,es),t(J,ts),t(J,wt),t(wt,os),t(J,as),c(e,No,i),c(e,K,i),t(K,se),t(se,vt),x(je,vt,null),t(K,ss),t(K,yt),t(yt,ls),c(e,Fo,i),c(e,q,i),t(q,ns),t(q,gt),t(gt,rs),t(q,is),t(q,bt),t(bt,cs),t(q,ps),t(q,xt),t(xt,us),t(q,hs),c(e,Lo,i),c(e,D,i),t(D,_t),t(_t,ds),t(D,fs),t(D,kt),t(kt,ms),t(D,ws),t(D,Et),t(Et,vs),t(D,ys),t(D,$t),t($t,gs),c(e,Go,i),c(e,Me,i),t(Me,bs),c(e,Ro,i),c(e,Q,i),t(Q,le),t(le,jt),x(Ce,jt,null),t(Q,xs),t(Q,Ct),t(Ct,_s),c(e,zo,i),c(e,We,i),t(We,ks),c(e,Yo,i),x(Ie,e,i),c(e,Ho,i),c(e,$,i),c(e,Mo,i),c(e,Ue,i),t(Ue,Es),c(e,Wo,i),c(e,O,i),t(O,ne),t(ne,Pe),t(Pe,$s),t(Pe,It),t(It,js),t(Pe,Cs),t(ne,Is),x(re,ne,null),t(ne,Ps),t(O,Ts),t(O,Pt),t(Pt,Te),t(Te,Bs),t(Te,Tt),t(Tt,qs),t(Te,Ds),t(O,Os),t(O,V),t(V,j),t(j,As),t(j,Bt),t(Bt,Ss),t(j,Ns),t(j,qt),t(qt,Fs),t(j,Ls),t(j,Dt),t(Dt,Gs),t(j,Rs),t(j,Ot),t(Ot,zs),t(j,Ys),t(V,Hs),t(V,d),t(d,Ms),t(d,At),t(At,Ws),t(d,Us),t(d,St),t(St,Js),t(d,Ks),t(d,Nt),t(Nt,Qs),t(d,Vs),t(d,Ft),t(Ft,Xs),t(d,Zs),t(d,Lt),t(Lt,el),t(d,tl),t(d,Gt),t(Gt,ol),t(d,al),t(d,Rt),t(Rt,sl),t(d,ll),t(V,nl),t(V,Be),t(Be,rl),t(Be,qe),t(qe,il),t(Be,cl),t(O,pl),t(O,zt),t(zt,L),t(L,ul),t(L,Yt),t(Yt,hl),t(L,dl),t(L,Ht),t(Ht,fl),t(L,ml),t(L,Mt),t(Mt,wl),t(L,vl),c(e,Uo,i),c(e,X,i),t(X,ie),t(ie,Wt),x(De,Wt,null),t(X,yl),t(X,Ut),t(Ut,gl),c(e,Jo,i),c(e,v,i),t(v,bl),t(v,Jt),t(Jt,xl),t(v,_l),t(v,Kt),t(Kt,kl),t(v,El),t(v,Qt),t(Qt,$l),t(v,jl),t(v,Vt),t(Vt,Cl),t(v,Il),c(e,Ko,i),c(e,A,i),t(A,Pl),t(A,Xt),t(Xt,Tl),t(A,Bl),t(A,Zt),t(Zt,ql),t(A,Dl),t(A,Oe),t(Oe,Ol),t(A,Al),c(e,Qo,i),c(e,S,i),t(S,Sl),t(S,eo),t(eo,Nl),t(S,Fl),t(S,to),t(to,Ll),t(S,Gl),t(S,oo),t(oo,Rl),t(S,zl),c(e,Vo,i),c(e,ce,i),t(ce,Yl),t(ce,ao),t(ao,Hl),t(ce,Ml),c(e,Xo,i),x(Ae,e,i),c(e,Zo,i),c(e,C,i),c(e,ea,i),c(e,pe,i),t(pe,Wl),t(pe,so),t(so,Ul),t(pe,Jl),c(e,ta,i),c(e,Z,i),t(Z,ue),t(ue,lo),x(Se,lo,null),t(Z,Kl),t(Z,no),t(no,Ql),c(e,oa,i),c(e,he,i),t(he,Vl),t(he,ro),t(ro,Xl),t(he,Zl),c(e,aa,i),c(e,y,i),t(y,en),t(y,io),t(io,tn),t(y,on),t(y,co),t(co,an),t(y,sn),t(y,po),t(po,ln),t(y,nn),t(y,uo),t(uo,rn),t(y,cn),c(e,sa,i),c(e,z,i),t(z,pn),t(z,ho),t(ho,un),t(z,hn),t(z,fo),t(fo,dn),t(z,fn),c(e,la,i),c(e,Y,i),t(Y,Je),t(Je,mo),t(mo,mn),t(Je,wn),t(Y,vn),t(Y,Ke),t(Ke,wo),t(wo,yn),t(Ke,gn),t(Y,bn),t(Y,Qe),t(Qe,vo),t(vo,xn),t(Qe,_n),c(e,na,i),c(e,Ve,i),t(Ve,kn),c(e,ra,i),x(Ne,e,i),c(e,ia,i),c(e,I,i),c(e,ca,i),c(e,ee,i),t(ee,de),t(de,yo),x(Fe,yo,null),t(ee,En),t(ee,go),t(go,$n),c(e,pa,i),c(e,H,i),t(H,jn),t(H,bo),t(bo,Cn),t(H,In),t(H,xo),t(xo,Pn),t(H,Tn),c(e,ua,i),x(Le,e,i),c(e,ha,i),c(e,P,i),c(e,da,i),c(e,te,i),t(te,fe),t(fe,_o),x(Ge,_o,null),t(te,Bn),t(te,ko),t(ko,qn),c(e,fa,i),c(e,me,i),t(me,Dn),t(me,Eo),t(Eo,On),t(me,An),c(e,ma,i),c(e,Xe,i),t(Xe,Sn),c(e,wa,i),x(Re,e,i),c(e,va,i),c(e,T,i),c(e,ya,i),c(e,f,i),t(f,Nn),t(f,$o),t($o,Fn),t(f,Ln),t(f,jo),t(jo,Gn),t(f,Rn),t(f,Co),t(Co,zn),t(f,Yn),t(f,Io),t(Io,Hn),t(f,Mn),t(f,ze),t(ze,Wn),t(f,Un),ga=!0},p(e,[i]){const Ye={};i&2&&(Ye.$$scope={dirty:i,ctx:e}),re.$set(Ye)},i(e){ga||(_(ke.$$.fragment,e),_(Ee.$$.fragment,e),_(je.$$.fragment,e),_(Ce.$$.fragment,e),_(Ie.$$.fragment,e),_(re.$$.fragment,e),_(De.$$.fragment,e),_(Ae.$$.fragment,e),_(Se.$$.fragment,e),_(Ne.$$.fragment,e),_(Fe.$$.fragment,e),_(Le.$$.fragment,e),_(Ge.$$.fragment,e),_(Re.$$.fragment,e),ga=!0)},o(e){k(ke.$$.fragment,e),k(Ee.$$.fragment,e),k(je.$$.fragment,e),k(Ce.$$.fragment,e),k(Ie.$$.fragment,e),k(re.$$.fragment,e),k(De.$$.fragment,e),k(Ae.$$.fragment,e),k(Se.$$.fragment,e),k(Ne.$$.fragment,e),k(Fe.$$.fragment,e),k(Le.$$.fragment,e),k(Ge.$$.fragment,e),k(Re.$$.fragment,e),ga=!1},d(e){o(w),e&&o(G),e&&o(F),E(ke),e&&o(Do),E(Ee,e),e&&o(Oo),e&&o(B),e&&o(Ao),e&&o(R),e&&o(So),e&&o(ae),e&&o(No),e&&o(K),E(je),e&&o(Fo),e&&o(q),e&&o(Lo),e&&o(D),e&&o(Go),e&&o(Me),e&&o(Ro),e&&o(Q),E(Ce),e&&o(zo),e&&o(We),e&&o(Yo),E(Ie,e),e&&o(Ho),e&&o($),e&&o(Mo),e&&o(Ue),e&&o(Wo),e&&o(O),E(re),e&&o(Uo),e&&o(X),E(De),e&&o(Jo),e&&o(v),e&&o(Ko),e&&o(A),e&&o(Qo),e&&o(S),e&&o(Vo),e&&o(ce),e&&o(Xo),E(Ae,e),e&&o(Zo),e&&o(C),e&&o(ea),e&&o(pe),e&&o(ta),e&&o(Z),E(Se),e&&o(oa),e&&o(he),e&&o(aa),e&&o(y),e&&o(sa),e&&o(z),e&&o(la),e&&o(Y),e&&o(na),e&&o(Ve),e&&o(ra),E(Ne,e),e&&o(ia),e&&o(I),e&&o(ca),e&&o(ee),E(Fe),e&&o(pa),e&&o(H),e&&o(ua),E(Le,e),e&&o(ha),e&&o(P),e&&o(da),e&&o(te),E(Ge),e&&o(fa),e&&o(me),e&&o(ma),e&&o(Xe),e&&o(wa),E(Re,e),e&&o(va),e&&o(T),e&&o(ya),e&&o(f)}}}const Ki={local:"introduction-to-gradio-blocks",sections:[{local:"why-blocks",title:"Why Blocks \u{1F9F1}?"},{local:"creating-a-simple-demo-using-blocks",title:"Creating a simple demo using Blocks"},{local:"customizing-the-layout-of-your-demo",title:"Customizing the layout of your demo"},{local:"exploring-events-and-state",title:"Exploring events and state"},{local:"creating-multistep-demos",title:"Creating multi-step demos"},{local:"updating-component-properties",title:"Updating Component Properties"}],title:"Introduction to Gradio Blocks"};function Qi(qo){return Hi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class oc extends Gi{constructor(w){super();Ri(this,w,Qi,Ji,zi,{})}}export{oc as default,Ki as metadata};
