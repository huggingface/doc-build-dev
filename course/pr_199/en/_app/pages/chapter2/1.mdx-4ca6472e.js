import{S as ot,i as nt,s as rt,e as r,k as w,w as Xe,t as o,M as lt,c as l,d as a,m as v,a as s,x as Ye,h as n,b as T,G as t,g as d,y as Ze,q as et,o as tt,B as at,v as st}from"../../chunks/vendor-37701547.js";import{T as it}from"../../chunks/Tip-3026cd5f.js";import{I as dt}from"../../chunks/IconCopyLink-80214518.js";function ht(J){let c,p,m,u;return{c(){c=o("\u26A0\uFE0F In order to benefit from all features available with the Model Hub and \u{1F917} Transformers, we recommend "),p=r("a"),m=o("creating an account"),u=o("."),this.h()},l(h){c=n(h,"\u26A0\uFE0F In order to benefit from all features available with the Model Hub and \u{1F917} Transformers, we recommend "),p=l(h,"A",{href:!0});var f=s(p);m=n(f,"creating an account"),f.forEach(a),u=n(h,"."),this.h()},h(){T(p,"href","https://huggingface.co/join")},m(h,f){d(h,c,f),d(h,p,f),t(p,m),d(h,u,f)},d(h){h&&a(c),h&&a(p),h&&a(u)}}}function ct(J){let c,p,m,u,h,f,ae,F,oe,K,y,ne,P,re,le,D,se,ie,Q,x,de,V,b,A,q,he,ce,fe,g,H,me,ue,G,pe,we,R,ve,ye,be,M,j,ge,_e,X,L,ke,Y,_,Te,U,Ee,$e,C,Ie,Pe,Z,k,xe,W,Ae,Me,B,Le,Ce,ee,E,te;return f=new dt({}),E=new it({props:{$$slots:{default:[ht]},$$scope:{ctx:J}}}),{c(){c=r("meta"),p=w(),m=r("h1"),u=r("a"),h=r("span"),Xe(f.$$.fragment),ae=w(),F=r("span"),oe=o("Introduction"),K=w(),y=r("p"),ne=o("As you saw in "),P=r("a"),re=o("Chapter 1"),le=o(", Transformer models are usually very large. With millions to tens of "),D=r("em"),se=o("billions"),ie=o(" of parameters, training and deploying these models is a complicated undertaking. Furthermore, with new models being released on a near-daily basis and each having its own implementation, trying them all out is no easy task."),Q=w(),x=r("p"),de=o("The \u{1F917} Transformers library was created to solve this problem. Its goal is to provide a single API through which any Transformer model can be loaded, trained, and saved. The library\u2019s main features are:"),V=w(),b=r("ul"),A=r("li"),q=r("strong"),he=o("Ease of use"),ce=o(": Downloading, loading, and using a state-of-the-art NLP model for inference can be done in just two lines of code."),fe=w(),g=r("li"),H=r("strong"),me=o("Flexibility"),ue=o(": At their core, all models are simple PyTorch "),G=r("code"),pe=o("nn.Module"),we=o(" or TensorFlow "),R=r("code"),ve=o("tf.keras.Model"),ye=o(" classes and can be handled like any other models in their respective machine learning (ML) frameworks."),be=w(),M=r("li"),j=r("strong"),ge=o("Simplicity"),_e=o(": Hardly any abstractions are made across the library. The \u201CAll in one file\u201D is a core concept: a model\u2019s forward pass is entirely defined in a single file, so that the code itself is understandable and hackable."),X=w(),L=r("p"),ke=o(`This last feature makes \u{1F917} Transformers quite different from other ML libraries. The models are not built on modules
that are shared across files; instead, each model has its own layers. In addition to making the models more approachable and understandable, this allows you to easily experiment on one model without affecting others.`),Y=w(),_=r("p"),Te=o("This chapter will begin with an end-to-end example where we use a model and a tokenizer together to replicate the "),U=r("code"),Ee=o("pipeline()"),$e=o(" function introduced in "),C=r("a"),Ie=o("Chapter 1"),Pe=o(". Next, we\u2019ll discuss the model API: we\u2019ll dive into the model and configuration classes, and show you how to load a model and how it processes numerical inputs to output predictions."),Z=w(),k=r("p"),xe=o("Then we\u2019ll look at the tokenizer API, which is the other main component of the "),W=r("code"),Ae=o("pipeline()"),Me=o(" function. Tokenizers take care of the first and last processing steps, handling the conversion from text to numerical inputs for the neural network, and the conversion back to text when it is needed. Finally, we\u2019ll show you how to handle sending multiple sentences through a model in a prepared batch, then wrap it all up with a closer look at the high-level "),B=r("code"),Le=o("tokenizer()"),Ce=o(" function."),ee=w(),Xe(E.$$.fragment),this.h()},l(e){const i=lt('[data-svelte="svelte-1phssyn"]',document.head);c=l(i,"META",{name:!0,content:!0}),i.forEach(a),p=v(e),m=l(e,"H1",{class:!0});var $=s(m);u=l($,"A",{id:!0,class:!0,href:!0});var Oe=s(u);h=l(Oe,"SPAN",{});var ze=s(h);Ye(f.$$.fragment,ze),ze.forEach(a),Oe.forEach(a),ae=v($),F=l($,"SPAN",{});var Fe=s(F);oe=n(Fe,"Introduction"),Fe.forEach(a),$.forEach(a),K=v(e),y=l(e,"P",{});var S=s(y);ne=n(S,"As you saw in "),P=l(S,"A",{href:!0});var De=s(P);re=n(De,"Chapter 1"),De.forEach(a),le=n(S,", Transformer models are usually very large. With millions to tens of "),D=l(S,"EM",{});var qe=s(D);se=n(qe,"billions"),qe.forEach(a),ie=n(S," of parameters, training and deploying these models is a complicated undertaking. Furthermore, with new models being released on a near-daily basis and each having its own implementation, trying them all out is no easy task."),S.forEach(a),Q=v(e),x=l(e,"P",{});var He=s(x);de=n(He,"The \u{1F917} Transformers library was created to solve this problem. Its goal is to provide a single API through which any Transformer model can be loaded, trained, and saved. The library\u2019s main features are:"),He.forEach(a),V=v(e),b=l(e,"UL",{});var N=s(b);A=l(N,"LI",{});var Se=s(A);q=l(Se,"STRONG",{});var Ge=s(q);he=n(Ge,"Ease of use"),Ge.forEach(a),ce=n(Se,": Downloading, loading, and using a state-of-the-art NLP model for inference can be done in just two lines of code."),Se.forEach(a),fe=v(N),g=l(N,"LI",{});var I=s(g);H=l(I,"STRONG",{});var Re=s(H);me=n(Re,"Flexibility"),Re.forEach(a),ue=n(I,": At their core, all models are simple PyTorch "),G=l(I,"CODE",{});var je=s(G);pe=n(je,"nn.Module"),je.forEach(a),we=n(I," or TensorFlow "),R=l(I,"CODE",{});var Ue=s(R);ve=n(Ue,"tf.keras.Model"),Ue.forEach(a),ye=n(I," classes and can be handled like any other models in their respective machine learning (ML) frameworks."),I.forEach(a),be=v(N),M=l(N,"LI",{});var Ne=s(M);j=l(Ne,"STRONG",{});var We=s(j);ge=n(We,"Simplicity"),We.forEach(a),_e=n(Ne,": Hardly any abstractions are made across the library. The \u201CAll in one file\u201D is a core concept: a model\u2019s forward pass is entirely defined in a single file, so that the code itself is understandable and hackable."),Ne.forEach(a),N.forEach(a),X=v(e),L=l(e,"P",{});var Be=s(L);ke=n(Be,`This last feature makes \u{1F917} Transformers quite different from other ML libraries. The models are not built on modules
that are shared across files; instead, each model has its own layers. In addition to making the models more approachable and understandable, this allows you to easily experiment on one model without affecting others.`),Be.forEach(a),Y=v(e),_=l(e,"P",{});var O=s(_);Te=n(O,"This chapter will begin with an end-to-end example where we use a model and a tokenizer together to replicate the "),U=l(O,"CODE",{});var Je=s(U);Ee=n(Je,"pipeline()"),Je.forEach(a),$e=n(O," function introduced in "),C=l(O,"A",{href:!0});var Ke=s(C);Ie=n(Ke,"Chapter 1"),Ke.forEach(a),Pe=n(O,". Next, we\u2019ll discuss the model API: we\u2019ll dive into the model and configuration classes, and show you how to load a model and how it processes numerical inputs to output predictions."),O.forEach(a),Z=v(e),k=l(e,"P",{});var z=s(k);xe=n(z,"Then we\u2019ll look at the tokenizer API, which is the other main component of the "),W=l(z,"CODE",{});var Qe=s(W);Ae=n(Qe,"pipeline()"),Qe.forEach(a),Me=n(z," function. Tokenizers take care of the first and last processing steps, handling the conversion from text to numerical inputs for the neural network, and the conversion back to text when it is needed. Finally, we\u2019ll show you how to handle sending multiple sentences through a model in a prepared batch, then wrap it all up with a closer look at the high-level "),B=l(z,"CODE",{});var Ve=s(B);Le=n(Ve,"tokenizer()"),Ve.forEach(a),Ce=n(z," function."),z.forEach(a),ee=v(e),Ye(E.$$.fragment,e),this.h()},h(){T(c,"name","hf:doc:metadata"),T(c,"content",JSON.stringify(ft)),T(u,"id","introduction"),T(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),T(u,"href","#introduction"),T(m,"class","relative group"),T(P,"href","/course/chapter1"),T(C,"href","/course/chapter1")},m(e,i){t(document.head,c),d(e,p,i),d(e,m,i),t(m,u),t(u,h),Ze(f,h,null),t(m,ae),t(m,F),t(F,oe),d(e,K,i),d(e,y,i),t(y,ne),t(y,P),t(P,re),t(y,le),t(y,D),t(D,se),t(y,ie),d(e,Q,i),d(e,x,i),t(x,de),d(e,V,i),d(e,b,i),t(b,A),t(A,q),t(q,he),t(A,ce),t(b,fe),t(b,g),t(g,H),t(H,me),t(g,ue),t(g,G),t(G,pe),t(g,we),t(g,R),t(R,ve),t(g,ye),t(b,be),t(b,M),t(M,j),t(j,ge),t(M,_e),d(e,X,i),d(e,L,i),t(L,ke),d(e,Y,i),d(e,_,i),t(_,Te),t(_,U),t(U,Ee),t(_,$e),t(_,C),t(C,Ie),t(_,Pe),d(e,Z,i),d(e,k,i),t(k,xe),t(k,W),t(W,Ae),t(k,Me),t(k,B),t(B,Le),t(k,Ce),d(e,ee,i),Ze(E,e,i),te=!0},p(e,[i]){const $={};i&2&&($.$$scope={dirty:i,ctx:e}),E.$set($)},i(e){te||(et(f.$$.fragment,e),et(E.$$.fragment,e),te=!0)},o(e){tt(f.$$.fragment,e),tt(E.$$.fragment,e),te=!1},d(e){a(c),e&&a(p),e&&a(m),at(f),e&&a(K),e&&a(y),e&&a(Q),e&&a(x),e&&a(V),e&&a(b),e&&a(X),e&&a(L),e&&a(Y),e&&a(_),e&&a(Z),e&&a(k),e&&a(ee),at(E,e)}}}const ft={local:"introduction",title:"Introduction"};function mt(J){return st(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vt extends ot{constructor(c){super();nt(this,c,mt,ct,rt,{})}}export{vt as default,ft as metadata};
