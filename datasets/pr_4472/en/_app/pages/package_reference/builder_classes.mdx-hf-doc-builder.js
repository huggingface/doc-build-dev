import{S as rm,i as nm,s as om,e as r,k as p,w as v,t as m,M as lm,c as n,d as a,m as c,a as o,x as b,h as g,b as y,G as e,g as $,y as x,q as w,o as E,B as D,v as dm,L as B}from"../../chunks/vendor-hf-doc-builder.js";import{D as j}from"../../chunks/Docstring-hf-doc-builder.js";import{C as N}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Zr}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function im(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder('rotten_tomatoes')
ds = builder.download_and_prepare()
ds = builder.as_dataset(split='train')
ds`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.as_dataset(split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">8530</span>
})`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function pm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder('rotten_tomatoes')
ds = builder.download_and_prepare()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function cm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_all_exported_dataset_infos()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_all_exported_dataset_infos()
{<span class="hljs-string">&#x27;default&#x27;</span>: DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)}</span>`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function mm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_exported_dataset_info()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_exported_dataset_info()
DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)</span>`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function gm(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function fm(k){let d,h,f,l,u;return l=new N({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=r("p"),h=m("Is roughly equivalent to:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Is roughly equivalent to:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function um(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download_custom('s3://my-bucket/data.zip', custom_download_for_my_private_bucket)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download_custom(<span class="hljs-string">&#x27;s3://my-bucket/data.zip&#x27;</span>, custom_download_for_my_private_bucket)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function hm(k){let d,h,f,l,u;return l=new N({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function _m(k){let d,h,f,l,u;return l=new N({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function $m(k){let d,h,f,l,u;return l=new N({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function vm(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function bm(k){let d,h,f,l,u;return l=new N({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=r("p"),h=m("Is roughly equivalent to:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Is roughly equivalent to:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function xm(k){let d,h,f,l,u;return l=new N({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function wm(k){let d,h,f,l,u;return l=new N({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Em(k){let d,h,f,l,u;return l=new N({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Dm(k){let d,h,f,l,u;return l=new N({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and_extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and_extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function ym(k){let d,h,f,l,u;return l=new N({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.VALIDATION,
    gen_kwargs={"split_key": "validation", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.TEST,
    gen_kwargs={"split_key": "test", "files": dl_manager.download_and extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.VALIDATION,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;validation&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TEST,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function km(k){let d,h,f,l,u;return l=new N({props:{code:`Each descriptor can be composed with other using addition or slice. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[0:25]) + datasets.Split.TEST

The resulting split will correspond to 25% of the train split merged with
100% of the test split.`,highlighted:`Each descriptor can be composed <span class="hljs-keyword">with</span> other using addition <span class="hljs-keyword">or</span> <span class="hljs-built_in">slice</span>. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">0</span>:<span class="hljs-number">25</span>]) + datasets.Split.TEST

The resulting split will correspond to <span class="hljs-number">25</span>% of the train split merged <span class="hljs-keyword">with</span>
<span class="hljs-number">100</span>% of the test split.`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function jm(k){let d,h,f,l,u;return l=new N({props:{code:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[75:])
)  # Error
split = datasets.Split.TEST + datasets.Split.ALL  # Error`,highlighted:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">75</span>:])
)  <span class="hljs-comment"># Error</span>
split = datasets.Split.TEST + datasets.Split.ALL  <span class="hljs-comment"># Error</span>`}}),{c(){d=r("p"),h=m("A split cannot be added twice, so the following will fail:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"A split cannot be added twice, so the following will fail:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Tm(k){let d,h,f,l,u;return l=new N({props:{code:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
datasets.Split.TEST.subsplit(datasets.percent[:50])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:50])`,highlighted:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
datasets.Split.TEST.subsplit(datasets.percent[:<span class="hljs-number">50</span>])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=r("p"),h=m("The slices can be applied only one time. So the following are valid:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"The slices can be applied only one time. So the following are valid:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Sm(k){let d,h,f,l,u;return l=new N({props:{code:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:25]).subsplit(datasets.percent[:25])
split = (train.subsplit(datasets.percent[:25]) + test).subsplit(datasets.percent[:50])`,highlighted:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]).subsplit(datasets.percent[:<span class="hljs-number">25</span>])
split = (train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) + test).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=r("p"),h=m("But not:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"But not:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Im(k){let d,h,f,l,u;return l=new N({props:{code:`# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec('test[:33%]'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction('test', to=33, unit='%'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%'))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]+train[1:-1]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%]+train[1:-1]'))
ds = datasets.load_dataset('mnist', split=(
datasets.ReadInstruction('test', to=33, unit='%') +
datasets.ReadInstruction('train', from_=1, to=-1, unit='abs')))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%](pct1_dropremainder)')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%](pct1_dropremainder)'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%', rounding="pct1_dropremainder"))

# 10-fold validation:
tests = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', from_=k, to=k+10, unit='%')
for k in range(0, 100, 10)])
trains = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', to=k, unit='%') + datasets.ReadInstruction('train', from_=k+10, unit='%')
for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(<span class="hljs-string">&#x27;test[:33%]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=(
datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>) +
datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=<span class="hljs-number">1</span>, to=-<span class="hljs-number">1</span>, unit=<span class="hljs-string">&#x27;abs&#x27;</span>)))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))

<span class="hljs-comment"># 10-fold validation:</span>
tests = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
trains = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, to=k, unit=<span class="hljs-string">&#x27;%&#x27;</span>) + datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}),{c(){d=r("p"),h=m("Examples:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Examples:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Bm(k){let d,h,f,l,u;return l=new N({props:{code:'VERSION = datasets.Version("1.0.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>VERSION = datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Nm(k){let d,h,f,l,u,t,i,rs,Vn,en,$e,qe,ns,bt,Mn,os,Fn,tn,K,zn,va,Un,Gn,ba,Hn,Wn,an,T,xt,Xn,ls,Jn,Kn,xa,ds,Yn,Qn,Zn,ve,wt,eo,is,to,ao,so,Et,ro,ps,no,oo,lo,be,io,cs,po,co,ms,mo,go,fo,W,gs,uo,ho,fs,_o,$o,us,vo,bo,hs,xo,wo,Eo,Y,Dt,Do,_s,yo,ko,Ve,jo,Q,yt,To,$s,So,Io,Me,Bo,Z,kt,No,vs,Po,Co,Fe,Ro,ee,jt,Ao,bs,Lo,Oo,ze,qo,Ue,Tt,Vo,xs,Mo,sn,X,St,Fo,ws,zo,Uo,te,Es,Go,Ho,Ds,Wo,Xo,ys,Jo,Ko,rn,xe,It,Yo,ks,Qo,nn,we,Bt,Zo,js,el,on,z,Nt,tl,Pt,al,wa,sl,rl,nl,Ct,ol,Ea,ll,dl,il,ae,Rt,pl,Ts,cl,ml,Ee,Ss,gl,fl,Is,ul,hl,Bs,_l,ln,De,Ge,Ns,At,$l,Ps,vl,dn,P,Lt,bl,se,Ot,xl,Cs,wl,El,He,Dl,re,qt,yl,Rs,kl,jl,We,Tl,ne,Vt,Sl,Mt,Il,As,Bl,Nl,Pl,Xe,Cl,oe,Ft,Rl,Ls,Al,Ll,Je,Ol,le,zt,ql,Os,Vl,Ml,Ke,Fl,de,Ut,zl,qs,Ul,Gl,Ye,Hl,Qe,Gt,Wl,Vs,Xl,pn,R,Ht,Jl,U,Kl,Ms,Yl,Ql,Fs,Zl,ed,zs,td,ad,Us,sd,rd,nd,ie,Wt,od,Gs,ld,dd,Ze,id,pe,Xt,pd,Hs,cd,md,et,gd,ce,Jt,fd,Ws,ud,hd,tt,_d,me,Kt,$d,Xs,vd,bd,at,xd,ge,Yt,wd,Js,Ed,Dd,st,cn,ye,Qt,yd,Ks,kd,mn,q,Zt,jd,Da,Ys,Td,Sd,Id,ea,Bd,Qs,Nd,Pd,Cd,Zs,Rd,Ad,ta,er,ke,gn,Ld,tr,Od,qd,ar,Vd,Md,je,Te,ya,sr,Fd,zd,Ud,rr,Gd,Hd,nr,Wd,Xd,Se,or,lr,Jd,Kd,dr,Yd,Qd,ir,Zd,ei,Ie,pr,cr,ti,ai,mr,si,ri,gr,ni,fn,Be,rt,fr,aa,oi,ur,li,un,G,sa,di,hr,ii,pi,Ne,ci,_r,mi,gi,$r,fi,ui,hi,nt,hn,A,ra,_i,ka,vr,$i,vi,bi,br,xi,wi,J,ja,xr,Ei,Di,yi,Ta,wr,ki,ji,Ti,Sa,Er,Si,Ii,Bi,Ia,Dr,Ni,Pi,Ci,Ba,Ri,yr,Ai,Li,na,Oi,kr,qi,Vi,Mi,ot,_n,C,oa,Fi,jr,zi,Ui,lt,Gi,Tr,Hi,Wi,dt,Xi,Sr,Ji,Ki,it,Yi,pt,$n,Pe,la,Qi,Ir,Zi,vn,V,da,ep,Br,tp,ap,ct,sp,mt,ia,rp,Nr,np,op,fe,pa,lp,Pr,dp,ip,Cr,pp,bn,Ce,gt,Rr,ca,cp,Ar,mp,xn,H,ma,gp,Lr,fp,up,ft,hp,ut,ga,_p,Or,$p,wn;return t=new Zr({}),bt=new Zr({}),xt=new j({props:{name:"class datasets.DatasetBuilder",anchor:"datasets.DatasetBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.cache_dir",description:"<strong>cache_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Directory to cache data. Defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>.",name:"cache_dir"},{anchor:"datasets.DatasetBuilder.config_name",description:`<strong>config_name</strong> (<em>str</em>, <em>optional</em>) &#x2014; Name of the dataset configuration.
It affects the data generated on disk: different configurations will have their own subdirectories and
versions.
If not provided, the default configuration is used (if it exists).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.3.0</p>
						
<p>Parameter <em>name</em> was renamed to <em>config_name</em>.</p>

					</div>`,name:"config_name"},{anchor:"datasets.DatasetBuilder.hash",description:`<strong>hash</strong> (<em>str</em>, <em>optional</em>) &#x2014; Hash specific to the dataset code. Used to update the caching directory when the
dataset loading script code is updated (to avoid reusing old data).
The typical caching directory (defined in <code>self._relative_data_dir</code>) is: <code>name/version/hash/</code>.`,name:"hash"},{anchor:"datasets.DatasetBuilder.base_path",description:`<strong>base_path</strong> (<em>str</em>, <em>optional</em>) &#x2014; Base path for relative paths that are used to download files.
This can be a remote URL.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.features",description:`<strong>features</strong> ([<em>Features</em>], <em>optional</em>) &#x2014; Features types to use with this dataset.
It can be used to change the Features types of a dataset, for example.`,name:"features"},{anchor:"datasets.DatasetBuilder.use_auth_token",description:`<strong>use_auth_token</strong> (<em>str</em> or <em>bool</em>, <em>optional</em>) &#x2014; String or boolean to use as Bearer token for remote files on the
Datasets Hub. If <em>True</em>, will get token from <code>&quot;~/.huggingface&quot;</code>.`,name:"use_auth_token"},{anchor:"datasets.DatasetBuilder.repo_id",description:`<strong>repo_id</strong> (<em>str</em>, <em>optional</em>) &#x2014; ID of the dataset repository.
Used to distinguish builders with the same name but not coming from the same namespace, for example &#x201C;squad&#x201D;
and &#x201C;lhoestq/squad&#x201D; repo IDs. In the latter, the builder name would be &#x201C;lhoestq___squad&#x201D;.`,name:"repo_id"},{anchor:"datasets.DatasetBuilder.data_files",description:`<strong>data_files</strong> (<em>str</em> or <em>Sequence</em> or <em>Mapping</em>, <em>optional</em>) &#x2014; Path(s) to source data file(s).
For builders like &#x201C;csv&#x201D; or &#x201C;json&#x201D; that need the user to specify data files. They can be either
local or remote files. For convenience, you can use a DataFilesDict.`,name:"data_files"},{anchor:"datasets.DatasetBuilder.data_dir",description:`<strong>data_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Path to directory containing source data file(s).
Use only if <em>data_files</em> is not passed, in which case it is equivalent to passing
<code>os.path.join(data_dir, &quot;**&quot;)</code> as <em>data_files</em>.
For builders that require manual download, it must be the path to the local directory containing the
manually downloaded data.`,name:"data_dir"},{anchor:"datasets.DatasetBuilder.name",description:`<strong>name</strong> (<em>str</em>) &#x2014; Configuration name for the dataset.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						<p class="font-medium">Deprecated in 2.3.0</p>
						
<p>Use <em>config_name</em> instead.</p>

					</div>`,name:"name"},{anchor:"datasets.DatasetBuilder.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the corresponding builder
configuration class, set on the class attribute [<em>DatasetBuilder.BUILDER_CONFIG_CLASS</em>]. The builder
configuration class is [<em>BuilderConfig</em>] or a subclass of it.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L180"}}),Dt=new j({props:{name:"as_dataset",anchor:"datasets.DatasetBuilder.as_dataset",parameters:[{name:"split",val:": typing.Optional[datasets.splits.Split] = None"},{name:"run_post_process",val:" = True"},{name:"ignore_verifications",val:" = False"},{name:"in_memory",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetBuilder.as_dataset.split",description:"<strong>split</strong> (<code>datasets.Split</code>) &#x2014; Which subset of the data to return.",name:"split"},{anchor:"datasets.DatasetBuilder.as_dataset.run_post_process",description:`<strong>run_post_process</strong> (bool, default=True) &#x2014; Whether to run post-processing dataset transforms and/or add
indexes.`,name:"run_post_process"},{anchor:"datasets.DatasetBuilder.as_dataset.ignore_verifications",description:`<strong>ignore_verifications</strong> (bool, default=False) &#x2014; Whether to ignore the verifications of the
downloaded/processed dataset information (checksums/size/splits/&#x2026;).`,name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.as_dataset.in_memory",description:"<strong>in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L831",returnDescription:`
<p>datasets.Dataset</p>
`}}),Ve=new I({props:{anchor:"datasets.DatasetBuilder.as_dataset.example",$$slots:{default:[im]},$$scope:{ctx:k}}}),yt=new j({props:{name:"download_and_prepare",anchor:"datasets.DatasetBuilder.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"ignore_verifications",val:": bool = False"},{name:"try_from_hf_gcs",val:": bool = True"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**download_and_prepare_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; specific download configuration parameters.',name:"download_config"},{anchor:"datasets.DatasetBuilder.download_and_prepare.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, optional) &#x2014; select the download/generate mode - Default to <code>REUSE_DATASET_IF_EXISTS</code>',name:"download_mode"},{anchor:"datasets.DatasetBuilder.download_and_prepare.ignore_verifications",description:"<strong>ignore_verifications</strong> (<code>bool</code>) &#x2014; Ignore the verifications of the downloaded/processed dataset information (checksums/size/splits/&#x2026;)",name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.download_and_prepare.try_from_hf_gcs",description:"<strong>try_from_hf_gcs</strong> (<code>bool</code>) &#x2014; If True, it will try to download the already prepared dataset from the Hf google cloud storage",name:"try_from_hf_gcs"},{anchor:"datasets.DatasetBuilder.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; specific Download Manger to use',name:"dl_manager"},{anchor:"datasets.DatasetBuilder.download_and_prepare.base_path",description:`<strong>base_path</strong> (<code>str</code>, optional) &#x2014; base path for relative paths that are used to download files. This can be a remote url.
If not specified, the value of the <em>base_path</em> attribute (<em>self.base_path</em>) will be used instead.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.download_and_prepare.use_auth_token",description:`<strong>use_auth_token</strong> (<code>Union[str, bool]</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from ~/.huggingface.`,name:"use_auth_token"},{anchor:"datasets.DatasetBuilder.download_and_prepare.*download_and_prepare_kwargs",description:"*<strong>*download_and_prepare_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments.",name:"*download_and_prepare_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L559"}}),Me=new I({props:{anchor:"datasets.DatasetBuilder.download_and_prepare.example",$$slots:{default:[pm]},$$scope:{ctx:k}}}),kt=new j({props:{name:"get_all_exported_dataset_infos",anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L363"}}),Fe=new I({props:{anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos.example",$$slots:{default:[cm]},$$scope:{ctx:k}}}),jt=new j({props:{name:"get_exported_dataset_info",anchor:"datasets.DatasetBuilder.get_exported_dataset_info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L381"}}),ze=new I({props:{anchor:"datasets.DatasetBuilder.get_exported_dataset_info.example",$$slots:{default:[mm]},$$scope:{ctx:k}}}),Tt=new j({props:{name:"get_imported_module_dir",anchor:"datasets.DatasetBuilder.get_imported_module_dir",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L554"}}),St=new j({props:{name:"class datasets.GeneratorBasedBuilder",anchor:"datasets.GeneratorBasedBuilder",parameters:[{name:"*args",val:""},{name:"writer_batch_size",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L1118"}}),It=new j({props:{name:"class datasets.BeamBasedBuilder",anchor:"datasets.BeamBasedBuilder",parameters:[{name:"*args",val:""},{name:"beam_runner",val:" = None"},{name:"beam_options",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L1278"}}),Bt=new j({props:{name:"class datasets.ArrowBasedBuilder",anchor:"datasets.ArrowBasedBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L1216"}}),Nt=new j({props:{name:"class datasets.BuilderConfig",anchor:"datasets.BuilderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.BuilderConfig.name",description:"<strong>name</strong> (<code>str</code>, default <code>&quot;default&quot;</code>) &#x2014;",name:"name"},{anchor:"datasets.BuilderConfig.version",description:'<strong>version</strong> (<a href="/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014;',name:"version"},{anchor:"datasets.BuilderConfig.data_dir",description:"<strong>data_dir</strong> (<code>str</code>, optional) &#x2014;",name:"data_dir"},{anchor:"datasets.BuilderConfig.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.BuilderConfig.description",description:"<strong>description</strong> (<code>str</code>, optional) &#x2014;",name:"description"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L84"}}),Rt=new j({props:{name:"create_config_id",anchor:"datasets.BuilderConfig.create_config_id",parameters:[{name:"config_kwargs",val:": dict"},{name:"custom_features",val:": typing.Optional[datasets.features.features.Features] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/builder.py#L123"}}),At=new Zr({}),Lt=new j({props:{name:"class datasets.DownloadManager",anchor:"datasets.DownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"record_checksums",val:" = True"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L148"}}),Ot=new j({props:{name:"download",anchor:"datasets.DownloadManager.download",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L280",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),He=new I({props:{anchor:"datasets.DownloadManager.download.example",$$slots:{default:[gm]},$$scope:{ctx:k}}}),qt=new j({props:{name:"download_and_extract",anchor:"datasets.DownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L415",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),We=new I({props:{anchor:"datasets.DownloadManager.download_and_extract.example",$$slots:{default:[fm]},$$scope:{ctx:k}}}),Vt=new j({props:{name:"download_custom",anchor:"datasets.DownloadManager.download_custom",parameters:[{name:"url_or_urls",val:""},{name:"custom_download",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L233",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),Xe=new I({props:{anchor:"datasets.DownloadManager.download_custom.example",$$slots:{default:[um]},$$scope:{ctx:k}}}),Ft=new j({props:{name:"extract",anchor:"datasets.DownloadManager.extract",parameters:[{name:"path_or_paths",val:""},{name:"num_proc",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L378",returnDescription:`
<p><code>str</code>, The extracted paths matching the given input
path_or_paths.</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),Je=new I({props:{anchor:"datasets.DownloadManager.extract.example",$$slots:{default:[hm]},$$scope:{ctx:k}}}),zt=new j({props:{name:"iter_archive",anchor:"datasets.DownloadManager.iter_archive",parameters:[{name:"path_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_archive.path_or_buf",description:"<strong>path_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"path_or_buf"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L337"}}),Ke=new I({props:{anchor:"datasets.DownloadManager.iter_archive.example",$$slots:{default:[_m]},$$scope:{ctx:k}}}),Ut=new j({props:{name:"iter_files",anchor:"datasets.DownloadManager.iter_files",parameters:[{name:"paths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_files.paths",description:"<strong>paths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"paths"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L360"}}),Ye=new I({props:{anchor:"datasets.DownloadManager.iter_files.example",$$slots:{default:[$m]},$$scope:{ctx:k}}}),Gt=new j({props:{name:"ship_files_with_pipeline",anchor:"datasets.DownloadManager.ship_files_with_pipeline",parameters:[{name:"downloaded_path_or_paths",val:""},{name:"pipeline",val:""}],parametersDescription:[{anchor:"datasets.DownloadManager.ship_files_with_pipeline.downloaded_path_or_paths",description:`<strong>downloaded_path_or_paths</strong> (<code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code>) &#x2014; Nested structure containing the
downloaded path(s).`,name:"downloaded_path_or_paths"},{anchor:"datasets.DownloadManager.ship_files_with_pipeline.pipeline",description:"<strong>pipeline</strong> (<code>utils.beam_utils.BeamPipeline</code>) &#x2014; Apache Beam Pipeline.",name:"pipeline"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L190",returnDescription:`
<p><code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code></p>
`}}),Ht=new j({props:{name:"class datasets.StreamingDownloadManager",anchor:"datasets.StreamingDownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/streaming_download_manager.py#L800"}}),Wt=new j({props:{name:"download",anchor:"datasets.StreamingDownloadManager.download",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/streaming_download_manager.py#L826",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),Ze=new I({props:{anchor:"datasets.StreamingDownloadManager.download.example",$$slots:{default:[vm]},$$scope:{ctx:k}}}),Xt=new j({props:{name:"download_and_extract",anchor:"datasets.StreamingDownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/streaming_download_manager.py#L894",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),et=new I({props:{anchor:"datasets.StreamingDownloadManager.download_and_extract.example",$$slots:{default:[bm]},$$scope:{ctx:k}}}),Jt=new j({props:{name:"extract",anchor:"datasets.StreamingDownloadManager.extract",parameters:[{name:"path_or_paths",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/streaming_download_manager.py#L853",returnDescription:`
<p><code>str</code>, The extracted paths matching the given input
path_or_paths.</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),tt=new I({props:{anchor:"datasets.StreamingDownloadManager.extract.example",$$slots:{default:[xm]},$$scope:{ctx:k}}}),Kt=new j({props:{name:"iter_archive",anchor:"datasets.StreamingDownloadManager.iter_archive",parameters:[{name:"urlpath_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_archive.urlpath_or_buf",description:"<strong>urlpath_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"urlpath_or_buf"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/streaming_download_manager.py#L912"}}),at=new I({props:{anchor:"datasets.StreamingDownloadManager.iter_archive.example",$$slots:{default:[wm]},$$scope:{ctx:k}}}),Yt=new j({props:{name:"iter_files",anchor:"datasets.StreamingDownloadManager.iter_files",parameters:[{name:"urlpaths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_files.urlpaths",description:"<strong>urlpaths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"urlpaths"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/streaming_download_manager.py#L935"}}),st=new I({props:{anchor:"datasets.StreamingDownloadManager.iter_files.example",$$slots:{default:[Em]},$$scope:{ctx:k}}}),Qt=new j({props:{name:"class datasets.DownloadConfig",anchor:"datasets.DownloadConfig",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"force_download",val:": bool = False"},{name:"resume_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"user_agent",val:": typing.Optional[str] = None"},{name:"extract_compressed_file",val:": bool = False"},{name:"force_extract",val:": bool = False"},{name:"delete_extracted",val:": bool = False"},{name:"use_etag",val:": bool = True"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"max_retries",val:": int = 1"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"ignore_url_params",val:": bool = False"},{name:"download_desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DownloadConfig.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, optional) &#x2014; Specify a cache directory to save the file to (overwrite the
default cache dir).`,name:"cache_dir"},{anchor:"datasets.DownloadConfig.force_download",description:`<strong>force_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, re-dowload the file even if it&#x2019;s already cached in
the cache dir.`,name:"force_download"},{anchor:"datasets.DownloadConfig.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, resume the download if incompletly recieved file is
found.`,name:"resume_download"},{anchor:"datasets.DownloadConfig.proxies",description:"<strong>proxies</strong> (<code>dict</code>, optional) &#x2014;",name:"proxies"},{anchor:"datasets.DownloadConfig.user_agent",description:`<strong>user_agent</strong> (<code>str</code>, optional) &#x2014; Optional string or dict that will be appended to the user-agent on remote
requests.`,name:"user_agent"},{anchor:"datasets.DownloadConfig.extract_compressed_file",description:`<strong>extract_compressed_file</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True and the path point to a zip or tar file,
extract the compressed file in a folder along the archive.`,name:"extract_compressed_file"},{anchor:"datasets.DownloadConfig.force_extract",description:`<strong>force_extract</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True when extract_compressed_file is True and the archive
was already extracted, re-extract the archive and override the folder where it was extracted.`,name:"force_extract"},{anchor:"datasets.DownloadConfig.delete_extracted",description:"<strong>delete_extracted</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to delete (or keep) the extracted files.",name:"delete_extracted"},{anchor:"datasets.DownloadConfig.use_etag",description:"<strong>use_etag</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to use the ETag HTTP response header to validate the cached files.",name:"use_etag"},{anchor:"datasets.DownloadConfig.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; The number of processes to launch to download the files in parallel.",name:"num_proc"},{anchor:"datasets.DownloadConfig.max_retries",description:"<strong>max_retries</strong> (<code>int</code>, default <code>1</code>) &#x2014; The number of times to retry an HTTP request if it fails.",name:"max_retries"},{anchor:"datasets.DownloadConfig.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token
for remote files on the Datasets Hub. If True, will get token from ~/.huggingface.`,name:"use_auth_token"},{anchor:"datasets.DownloadConfig.ignore_url_params",description:`<strong>ignore_url_params</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to strip all query parameters and #fragments from
the download URL before using it for caching the file.`,name:"ignore_url_params"},{anchor:"datasets.DownloadConfig.download_desc",description:"<strong>download_desc</strong> (<code>str</code>, optional) &#x2014; A description to be displayed alongside with the progress bar while downloading the files.",name:"download_desc"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_config.py#L8"}}),Zt=new j({props:{name:"class datasets.DownloadMode",anchor:"datasets.DownloadMode",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/download/download_manager.py#L39"}}),aa=new Zr({}),sa=new j({props:{name:"class datasets.SplitGenerator",anchor:"datasets.SplitGenerator",parameters:[{name:"name",val:": str"},{name:"gen_kwargs",val:": typing.Dict = <factory>"}],parametersDescription:[{anchor:"datasets.SplitGenerator.name",description:`<strong>name</strong> (str) &#x2014; Name of the Split for which the generator will
create the examples.
**gen_kwargs &#x2014; Keyword arguments to forward to the <code>DatasetBuilder._generate_examples</code> method
of the builder.`,name:"name"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/splits.py#L566"}}),nt=new I({props:{anchor:"datasets.SplitGenerator.example",$$slots:{default:[Dm]},$$scope:{ctx:k}}}),ra=new j({props:{name:"class datasets.Split",anchor:"datasets.Split",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/splits.py#L387"}}),ot=new I({props:{anchor:"datasets.Split.example",$$slots:{default:[ym]},$$scope:{ctx:k}}}),oa=new j({props:{name:"class datasets.NamedSplit",anchor:"datasets.NamedSplit",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/splits.py#L303"}}),lt=new I({props:{anchor:"datasets.NamedSplit.example",$$slots:{default:[km]},$$scope:{ctx:k}}}),dt=new I({props:{anchor:"datasets.NamedSplit.example-2",$$slots:{default:[jm]},$$scope:{ctx:k}}}),it=new I({props:{anchor:"datasets.NamedSplit.example-3",$$slots:{default:[Tm]},$$scope:{ctx:k}}}),pt=new I({props:{anchor:"datasets.NamedSplit.example-4",$$slots:{default:[Sm]},$$scope:{ctx:k}}}),la=new j({props:{name:"class datasets.NamedSplitAll",anchor:"datasets.NamedSplitAll",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/splits.py#L372"}}),da=new j({props:{name:"class datasets.ReadInstruction",anchor:"datasets.ReadInstruction",parameters:[{name:"split_name",val:""},{name:"rounding",val:" = None"},{name:"from_",val:" = None"},{name:"to",val:" = None"},{name:"unit",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/arrow_reader.py#L457"}}),ct=new I({props:{anchor:"datasets.ReadInstruction.example",$$slots:{default:[Im]},$$scope:{ctx:k}}}),ia=new j({props:{name:"from_spec",anchor:"datasets.ReadInstruction.from_spec",parameters:[{name:"spec",val:""}],parametersDescription:[{anchor:"datasets.ReadInstruction.from_spec.spec",description:`<strong>spec</strong> (str) &#x2014; split(s) + optional slice(s) to read + optional rounding
if percents are used as the slicing unit. A slice can be specified,
using absolute numbers (int) or percentages (int). E.g.
<code>test</code>: test split.
<code>test + validation</code>: test split + validation split.
<code>test[10:]</code>: test split, minus its first 10 records.
<code>test[:10%]</code>: first 10% records of test split.
<code>test[:20%](pct1_dropremainder)</code>: first 10% records, rounded with
the <code>pct1_dropremainder</code> rounding.
<code>test[:-5%]+train[40%:60%]</code>: first 95% of test + middle 20% of
train.`,name:"spec"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/arrow_reader.py#L537",returnDescription:`
<p>ReadInstruction instance.</p>
`}}),pa=new j({props:{name:"to_absolute",anchor:"datasets.ReadInstruction.to_absolute",parameters:[{name:"name2len",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/arrow_reader.py#L605",returnDescription:`
<p>list of _AbsoluteInstruction instances (corresponds to the + in spec).</p>
`}}),ca=new Zr({}),ma=new j({props:{name:"class datasets.Version",anchor:"datasets.Version",parameters:[{name:"version_str",val:": str"},{name:"description",val:": typing.Optional[str] = None"},{name:"major",val:": typing.Union[str, int, NoneType] = None"},{name:"minor",val:": typing.Union[str, int, NoneType] = None"},{name:"patch",val:": typing.Union[str, int, NoneType] = None"}],parametersDescription:[{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.major",description:"<strong>major</strong> (<code>str</code>) &#x2014;",name:"major"},{anchor:"datasets.Version.minor",description:"<strong>minor</strong> (<code>str</code>) &#x2014;",name:"minor"},{anchor:"datasets.Version.patch",description:"<strong>patch</strong> (<code>str</code>) &#x2014;",name:"patch"}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/utils/version.py#L30"}}),ft=new I({props:{anchor:"datasets.Version.example",$$slots:{default:[Bm]},$$scope:{ctx:k}}}),ga=new j({props:{name:"match",anchor:"datasets.Version.match",parameters:[{name:"other_version",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4472/src/datasets/utils/version.py#L101"}}),{c(){d=r("meta"),h=p(),f=r("h1"),l=r("a"),u=r("span"),v(t.$$.fragment),i=p(),rs=r("span"),Vn=m("Builder classes"),en=p(),$e=r("h2"),qe=r("a"),ns=r("span"),v(bt.$$.fragment),Mn=p(),os=r("span"),Fn=m("Builders"),tn=p(),K=r("p"),zn=m("\u{1F917} Datasets relies on two main classes during the dataset building process: "),va=r("a"),Un=m("DatasetBuilder"),Gn=m(" and "),ba=r("a"),Hn=m("BuilderConfig"),Wn=m("."),an=p(),T=r("div"),v(xt.$$.fragment),Xn=p(),ls=r("p"),Jn=m("Abstract base class for all datasets."),Kn=p(),xa=r("p"),ds=r("em"),Yn=m("DatasetBuilder"),Qn=m(" has 3 key methods:"),Zn=p(),ve=r("ul"),wt=r("li"),eo=m("["),is=r("em"),to=m("DatasetBuilder.info"),ao=m(`]: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),so=p(),Et=r("li"),ro=m("["),ps=r("em"),no=m("DatasetBuilder.download_and_prepare"),oo=m(`]: Downloads the source data
and writes it to disk.`),lo=p(),be=r("li"),io=m("["),cs=r("em"),po=m("DatasetBuilder.as_dataset"),co=m("]: Generates a ["),ms=r("em"),mo=m("Dataset"),go=m("]."),fo=p(),W=r("p"),gs=r("strong"),uo=m("Configuration"),ho=m(": Some "),fs=r("em"),_o=m("DatasetBuilder"),$o=m(`s expose multiple variants of the
dataset by defining a [`),us=r("em"),vo=m("BuilderConfig"),bo=m(`] subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in [`),hs=r("em"),xo=m("DatasetBuilder.builder_configs"),wo=m("]."),Eo=p(),Y=r("div"),v(Dt.$$.fragment),Do=p(),_s=r("p"),yo=m("Return a Dataset for the specified split."),ko=p(),v(Ve.$$.fragment),jo=p(),Q=r("div"),v(yt.$$.fragment),To=p(),$s=r("p"),So=m("Downloads and prepares dataset for reading."),Io=p(),v(Me.$$.fragment),Bo=p(),Z=r("div"),v(kt.$$.fragment),No=p(),vs=r("p"),Po=m("Empty dict if doesn\u2019t exist"),Co=p(),v(Fe.$$.fragment),Ro=p(),ee=r("div"),v(jt.$$.fragment),Ao=p(),bs=r("p"),Lo=m("Empty DatasetInfo if doesn\u2019t exist"),Oo=p(),v(ze.$$.fragment),qo=p(),Ue=r("div"),v(Tt.$$.fragment),Vo=p(),xs=r("p"),Mo=m("Return the path of the module of this class or subclass."),sn=p(),X=r("div"),v(St.$$.fragment),Fo=p(),ws=r("p"),zo=m("Base class for datasets with data generation based on dict generators."),Uo=p(),te=r("p"),Es=r("code"),Go=m("GeneratorBasedBuilder"),Ho=m(` is a convenience class that abstracts away much
of the data writing and reading of `),Ds=r("code"),Wo=m("DatasetBuilder"),Xo=m(`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),ys=r("code"),Jo=m("_split_generators"),Ko=m("). See the method docstrings for details."),rn=p(),xe=r("div"),v(It.$$.fragment),Yo=p(),ks=r("p"),Qo=m("Beam based Builder."),nn=p(),we=r("div"),v(Bt.$$.fragment),Zo=p(),js=r("p"),el=m("Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),on=p(),z=r("div"),v(Nt.$$.fragment),tl=p(),Pt=r("p"),al=m("Base class for "),wa=r("a"),sl=m("DatasetBuilder"),rl=m(" data configuration."),nl=p(),Ct=r("p"),ol=m(`DatasetBuilder subclasses with data configuration options should subclass
`),Ea=r("a"),ll=m("BuilderConfig"),dl=m(" and add their own properties."),il=p(),ae=r("div"),v(Rt.$$.fragment),pl=p(),Ts=r("p"),cl=m(`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),ml=p(),Ee=r("ul"),Ss=r("li"),gl=m("the config kwargs that can be used to overwrite attributes"),fl=p(),Is=r("li"),ul=m("the custom features used to write the dataset"),hl=p(),Bs=r("li"),_l=m(`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),ln=p(),De=r("h2"),Ge=r("a"),Ns=r("span"),v(At.$$.fragment),$l=p(),Ps=r("span"),vl=m("Download"),dn=p(),P=r("div"),v(Lt.$$.fragment),bl=p(),se=r("div"),v(Ot.$$.fragment),xl=p(),Cs=r("p"),wl=m("Download given url(s)."),El=p(),v(He.$$.fragment),Dl=p(),re=r("div"),v(qt.$$.fragment),yl=p(),Rs=r("p"),kl=m("Download and extract given url_or_urls."),jl=p(),v(We.$$.fragment),Tl=p(),ne=r("div"),v(Vt.$$.fragment),Sl=p(),Mt=r("p"),Il=m("Download given urls(s) by calling "),As=r("code"),Bl=m("custom_download"),Nl=m("."),Pl=p(),v(Xe.$$.fragment),Cl=p(),oe=r("div"),v(Ft.$$.fragment),Rl=p(),Ls=r("p"),Al=m("Extract given path(s)."),Ll=p(),v(Je.$$.fragment),Ol=p(),le=r("div"),v(zt.$$.fragment),ql=p(),Os=r("p"),Vl=m("Iterate over files within an archive."),Ml=p(),v(Ke.$$.fragment),Fl=p(),de=r("div"),v(Ut.$$.fragment),zl=p(),qs=r("p"),Ul=m("Iterate over file paths."),Gl=p(),v(Ye.$$.fragment),Hl=p(),Qe=r("div"),v(Gt.$$.fragment),Wl=p(),Vs=r("p"),Xl=m("Ship the files using Beam FileSystems to the pipeline temp dir."),pn=p(),R=r("div"),v(Ht.$$.fragment),Jl=p(),U=r("p"),Kl=m(`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Ms=r("code"),Yl=m("download"),Ql=m(" and "),Fs=r("code"),Zl=m("extract"),ed=m(` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),zs=r("code"),td=m("xopen"),ad=m(` function which extends the
builtin `),Us=r("code"),sd=m("open"),rd=m(" function to stream data from remote files."),nd=p(),ie=r("div"),v(Wt.$$.fragment),od=p(),Gs=r("p"),ld=m("Download given url(s)."),dd=p(),v(Ze.$$.fragment),id=p(),pe=r("div"),v(Xt.$$.fragment),pd=p(),Hs=r("p"),cd=m("Download and extract given url_or_urls."),md=p(),v(et.$$.fragment),gd=p(),ce=r("div"),v(Jt.$$.fragment),fd=p(),Ws=r("p"),ud=m("Extract given path(s)."),hd=p(),v(tt.$$.fragment),_d=p(),me=r("div"),v(Kt.$$.fragment),$d=p(),Xs=r("p"),vd=m("Iterate over files within an archive."),bd=p(),v(at.$$.fragment),xd=p(),ge=r("div"),v(Yt.$$.fragment),wd=p(),Js=r("p"),Ed=m("Iterate over files."),Dd=p(),v(st.$$.fragment),cn=p(),ye=r("div"),v(Qt.$$.fragment),yd=p(),Ks=r("p"),kd=m("Configuration for our cached path manager."),mn=p(),q=r("div"),v(Zt.$$.fragment),jd=p(),Da=r("p"),Ys=r("code"),Td=m("Enum"),Sd=m(" for how to treat pre-existing downloads and data."),Id=p(),ea=r("p"),Bd=m("The default mode is "),Qs=r("code"),Nd=m("REUSE_DATASET_IF_EXISTS"),Pd=m(`, which will reuse both
raw downloads and the prepared dataset if they exist.`),Cd=p(),Zs=r("p"),Rd=m("The generations modes:"),Ad=p(),ta=r("table"),er=r("thead"),ke=r("tr"),gn=r("th"),Ld=p(),tr=r("th"),Od=m("Downloads"),qd=p(),ar=r("th"),Vd=m("Dataset"),Md=p(),je=r("tbody"),Te=r("tr"),ya=r("td"),sr=r("code"),Fd=m("REUSE_DATASET_IF_EXISTS"),zd=m(" (default)"),Ud=p(),rr=r("td"),Gd=m("Reuse"),Hd=p(),nr=r("td"),Wd=m("Reuse"),Xd=p(),Se=r("tr"),or=r("td"),lr=r("code"),Jd=m("REUSE_CACHE_IF_EXISTS"),Kd=p(),dr=r("td"),Yd=m("Reuse"),Qd=p(),ir=r("td"),Zd=m("Fresh"),ei=p(),Ie=r("tr"),pr=r("td"),cr=r("code"),ti=m("FORCE_REDOWNLOAD"),ai=p(),mr=r("td"),si=m("Fresh"),ri=p(),gr=r("td"),ni=m("Fresh"),fn=p(),Be=r("h2"),rt=r("a"),fr=r("span"),v(aa.$$.fragment),oi=p(),ur=r("span"),li=m("Splits"),un=p(),G=r("div"),v(sa.$$.fragment),di=p(),hr=r("p"),ii=m("Defines the split information for the generator."),pi=p(),Ne=r("p"),ci=m(`This should be used as returned value of
`),_r=r("code"),mi=m("GeneratorBasedBuilder._split_generators()"),gi=m(`.
See `),$r=r("code"),fi=m("GeneratorBasedBuilder._split_generators()"),ui=m(` for more info and example
of usage.`),hi=p(),v(nt.$$.fragment),hn=p(),A=r("div"),v(ra.$$.fragment),_i=p(),ka=r("p"),vr=r("code"),$i=m("Enum"),vi=m(" for dataset splits."),bi=p(),br=r("p"),xi=m(`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),wi=p(),J=r("ul"),ja=r("li"),xr=r("code"),Ei=m("TRAIN"),Di=m(": the training data."),yi=p(),Ta=r("li"),wr=r("code"),ki=m("VALIDATION"),ji=m(`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),Ti=p(),Sa=r("li"),Er=r("code"),Si=m("TEST"),Ii=m(`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),Bi=p(),Ia=r("li"),Dr=r("code"),Ni=m("ALL"),Pi=m(": the union of all defined dataset splits."),Ci=p(),Ba=r("p"),Ri=m("Note: All splits, including compositions inherit from "),yr=r("code"),Ai=m("datasets.SplitBase"),Li=p(),na=r("p"),Oi=m("See the :doc:"),kr=r("code"),qi=m("guide on splits </loading>"),Vi=m(" for more information."),Mi=p(),v(ot.$$.fragment),_n=p(),C=r("div"),v(oa.$$.fragment),Fi=p(),jr=r("p"),zi=m("Descriptor corresponding to a named split (train, test, \u2026)."),Ui=p(),v(lt.$$.fragment),Gi=p(),Tr=r("p"),Hi=m("Warning:"),Wi=p(),v(dt.$$.fragment),Xi=p(),Sr=r("p"),Ji=m("Warning:"),Ki=p(),v(it.$$.fragment),Yi=p(),v(pt.$$.fragment),$n=p(),Pe=r("div"),v(la.$$.fragment),Qi=p(),Ir=r("p"),Zi=m("Split corresponding to the union of all defined dataset splits."),vn=p(),V=r("div"),v(da.$$.fragment),ep=p(),Br=r("p"),tp=m("Reading instruction for a dataset."),ap=p(),v(ct.$$.fragment),sp=p(),mt=r("div"),v(ia.$$.fragment),rp=p(),Nr=r("p"),np=m("Creates a ReadInstruction instance out of a string spec."),op=p(),fe=r("div"),v(pa.$$.fragment),lp=p(),Pr=r("p"),dp=m("Translate instruction into a list of absolute instructions."),ip=p(),Cr=r("p"),pp=m("Those absolute instructions are then to be added together."),bn=p(),Ce=r("h2"),gt=r("a"),Rr=r("span"),v(ca.$$.fragment),cp=p(),Ar=r("span"),mp=m("Version"),xn=p(),H=r("div"),v(ma.$$.fragment),gp=p(),Lr=r("p"),fp=m("Dataset version MAJOR.MINOR.PATCH."),up=p(),v(ft.$$.fragment),hp=p(),ut=r("div"),v(ga.$$.fragment),_p=p(),Or=r("p"),$p=m("Returns True if other_version matches."),this.h()},l(s){const _=lm('[data-svelte="svelte-1phssyn"]',document.head);d=n(_,"META",{name:!0,content:!0}),_.forEach(a),h=c(s),f=n(s,"H1",{class:!0});var fa=o(f);l=n(fa,"A",{id:!0,class:!0,href:!0});var qr=o(l);u=n(qr,"SPAN",{});var Vr=o(u);b(t.$$.fragment,Vr),Vr.forEach(a),qr.forEach(a),i=c(fa),rs=n(fa,"SPAN",{});var Mr=o(rs);Vn=g(Mr,"Builder classes"),Mr.forEach(a),fa.forEach(a),en=c(s),$e=n(s,"H2",{class:!0});var ua=o($e);qe=n(ua,"A",{id:!0,class:!0,href:!0});var Fr=o(qe);ns=n(Fr,"SPAN",{});var zr=o(ns);b(bt.$$.fragment,zr),zr.forEach(a),Fr.forEach(a),Mn=c(ua),os=n(ua,"SPAN",{});var Ur=o(os);Fn=g(Ur,"Builders"),Ur.forEach(a),ua.forEach(a),tn=c(s),K=n(s,"P",{});var Re=o(K);zn=g(Re,"\u{1F917} Datasets relies on two main classes during the dataset building process: "),va=n(Re,"A",{href:!0});var Gr=o(va);Un=g(Gr,"DatasetBuilder"),Gr.forEach(a),Gn=g(Re," and "),ba=n(Re,"A",{href:!0});var Hr=o(ba);Hn=g(Hr,"BuilderConfig"),Hr.forEach(a),Wn=g(Re,"."),Re.forEach(a),an=c(s),T=n(s,"DIV",{class:!0});var S=o(T);b(xt.$$.fragment,S),Xn=c(S),ls=n(S,"P",{});var Wr=o(ls);Jn=g(Wr,"Abstract base class for all datasets."),Wr.forEach(a),Kn=c(S),xa=n(S,"P",{});var Na=o(xa);ds=n(Na,"EM",{});var Xr=o(ds);Yn=g(Xr,"DatasetBuilder"),Xr.forEach(a),Qn=g(Na," has 3 key methods:"),Na.forEach(a),Zn=c(S),ve=n(S,"UL",{});var Ae=o(ve);wt=n(Ae,"LI",{});var ha=o(wt);eo=g(ha,"["),is=n(ha,"EM",{});var Jr=o(is);to=g(Jr,"DatasetBuilder.info"),Jr.forEach(a),ao=g(ha,`]: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),ha.forEach(a),so=c(Ae),Et=n(Ae,"LI",{});var _a=o(Et);ro=g(_a,"["),ps=n(_a,"EM",{});var Kr=o(ps);no=g(Kr,"DatasetBuilder.download_and_prepare"),Kr.forEach(a),oo=g(_a,`]: Downloads the source data
and writes it to disk.`),_a.forEach(a),lo=c(Ae),be=n(Ae,"LI",{});var Le=o(be);io=g(Le,"["),cs=n(Le,"EM",{});var Yr=o(cs);po=g(Yr,"DatasetBuilder.as_dataset"),Yr.forEach(a),co=g(Le,"]: Generates a ["),ms=n(Le,"EM",{});var Qr=o(ms);mo=g(Qr,"Dataset"),Qr.forEach(a),go=g(Le,"]."),Le.forEach(a),Ae.forEach(a),fo=c(S),W=n(S,"P",{});var Oe=o(W);gs=n(Oe,"STRONG",{});var jp=o(gs);uo=g(jp,"Configuration"),jp.forEach(a),ho=g(Oe,": Some "),fs=n(Oe,"EM",{});var Tp=o(fs);_o=g(Tp,"DatasetBuilder"),Tp.forEach(a),$o=g(Oe,`s expose multiple variants of the
dataset by defining a [`),us=n(Oe,"EM",{});var Sp=o(us);vo=g(Sp,"BuilderConfig"),Sp.forEach(a),bo=g(Oe,`] subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in [`),hs=n(Oe,"EM",{});var Ip=o(hs);xo=g(Ip,"DatasetBuilder.builder_configs"),Ip.forEach(a),wo=g(Oe,"]."),Oe.forEach(a),Eo=c(S),Y=n(S,"DIV",{class:!0});var Pa=o(Y);b(Dt.$$.fragment,Pa),Do=c(Pa),_s=n(Pa,"P",{});var Bp=o(_s);yo=g(Bp,"Return a Dataset for the specified split."),Bp.forEach(a),ko=c(Pa),b(Ve.$$.fragment,Pa),Pa.forEach(a),jo=c(S),Q=n(S,"DIV",{class:!0});var Ca=o(Q);b(yt.$$.fragment,Ca),To=c(Ca),$s=n(Ca,"P",{});var Np=o($s);So=g(Np,"Downloads and prepares dataset for reading."),Np.forEach(a),Io=c(Ca),b(Me.$$.fragment,Ca),Ca.forEach(a),Bo=c(S),Z=n(S,"DIV",{class:!0});var Ra=o(Z);b(kt.$$.fragment,Ra),No=c(Ra),vs=n(Ra,"P",{});var Pp=o(vs);Po=g(Pp,"Empty dict if doesn\u2019t exist"),Pp.forEach(a),Co=c(Ra),b(Fe.$$.fragment,Ra),Ra.forEach(a),Ro=c(S),ee=n(S,"DIV",{class:!0});var Aa=o(ee);b(jt.$$.fragment,Aa),Ao=c(Aa),bs=n(Aa,"P",{});var Cp=o(bs);Lo=g(Cp,"Empty DatasetInfo if doesn\u2019t exist"),Cp.forEach(a),Oo=c(Aa),b(ze.$$.fragment,Aa),Aa.forEach(a),qo=c(S),Ue=n(S,"DIV",{class:!0});var En=o(Ue);b(Tt.$$.fragment,En),Vo=c(En),xs=n(En,"P",{});var Rp=o(xs);Mo=g(Rp,"Return the path of the module of this class or subclass."),Rp.forEach(a),En.forEach(a),S.forEach(a),sn=c(s),X=n(s,"DIV",{class:!0});var La=o(X);b(St.$$.fragment,La),Fo=c(La),ws=n(La,"P",{});var Ap=o(ws);zo=g(Ap,"Base class for datasets with data generation based on dict generators."),Ap.forEach(a),Uo=c(La),te=n(La,"P",{});var $a=o(te);Es=n($a,"CODE",{});var Lp=o(Es);Go=g(Lp,"GeneratorBasedBuilder"),Lp.forEach(a),Ho=g($a,` is a convenience class that abstracts away much
of the data writing and reading of `),Ds=n($a,"CODE",{});var Op=o(Ds);Wo=g(Op,"DatasetBuilder"),Op.forEach(a),Xo=g($a,`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),ys=n($a,"CODE",{});var qp=o(ys);Jo=g(qp,"_split_generators"),qp.forEach(a),Ko=g($a,"). See the method docstrings for details."),$a.forEach(a),La.forEach(a),rn=c(s),xe=n(s,"DIV",{class:!0});var Dn=o(xe);b(It.$$.fragment,Dn),Yo=c(Dn),ks=n(Dn,"P",{});var Vp=o(ks);Qo=g(Vp,"Beam based Builder."),Vp.forEach(a),Dn.forEach(a),nn=c(s),we=n(s,"DIV",{class:!0});var yn=o(we);b(Bt.$$.fragment,yn),Zo=c(yn),js=n(yn,"P",{});var Mp=o(js);el=g(Mp,"Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),Mp.forEach(a),yn.forEach(a),on=c(s),z=n(s,"DIV",{class:!0});var ht=o(z);b(Nt.$$.fragment,ht),tl=c(ht),Pt=n(ht,"P",{});var kn=o(Pt);al=g(kn,"Base class for "),wa=n(kn,"A",{href:!0});var Fp=o(wa);sl=g(Fp,"DatasetBuilder"),Fp.forEach(a),rl=g(kn," data configuration."),kn.forEach(a),nl=c(ht),Ct=n(ht,"P",{});var jn=o(Ct);ol=g(jn,`DatasetBuilder subclasses with data configuration options should subclass
`),Ea=n(jn,"A",{href:!0});var zp=o(Ea);ll=g(zp,"BuilderConfig"),zp.forEach(a),dl=g(jn," and add their own properties."),jn.forEach(a),il=c(ht),ae=n(ht,"DIV",{class:!0});var Oa=o(ae);b(Rt.$$.fragment,Oa),pl=c(Oa),Ts=n(Oa,"P",{});var Up=o(Ts);cl=g(Up,`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),Up.forEach(a),ml=c(Oa),Ee=n(Oa,"UL",{});var qa=o(Ee);Ss=n(qa,"LI",{});var Gp=o(Ss);gl=g(Gp,"the config kwargs that can be used to overwrite attributes"),Gp.forEach(a),fl=c(qa),Is=n(qa,"LI",{});var Hp=o(Is);ul=g(Hp,"the custom features used to write the dataset"),Hp.forEach(a),hl=c(qa),Bs=n(qa,"LI",{});var Wp=o(Bs);_l=g(Wp,`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),Wp.forEach(a),qa.forEach(a),Oa.forEach(a),ht.forEach(a),ln=c(s),De=n(s,"H2",{class:!0});var Tn=o(De);Ge=n(Tn,"A",{id:!0,class:!0,href:!0});var Xp=o(Ge);Ns=n(Xp,"SPAN",{});var Jp=o(Ns);b(At.$$.fragment,Jp),Jp.forEach(a),Xp.forEach(a),$l=c(Tn),Ps=n(Tn,"SPAN",{});var Kp=o(Ps);vl=g(Kp,"Download"),Kp.forEach(a),Tn.forEach(a),dn=c(s),P=n(s,"DIV",{class:!0});var L=o(P);b(Lt.$$.fragment,L),bl=c(L),se=n(L,"DIV",{class:!0});var Va=o(se);b(Ot.$$.fragment,Va),xl=c(Va),Cs=n(Va,"P",{});var Yp=o(Cs);wl=g(Yp,"Download given url(s)."),Yp.forEach(a),El=c(Va),b(He.$$.fragment,Va),Va.forEach(a),Dl=c(L),re=n(L,"DIV",{class:!0});var Ma=o(re);b(qt.$$.fragment,Ma),yl=c(Ma),Rs=n(Ma,"P",{});var Qp=o(Rs);kl=g(Qp,"Download and extract given url_or_urls."),Qp.forEach(a),jl=c(Ma),b(We.$$.fragment,Ma),Ma.forEach(a),Tl=c(L),ne=n(L,"DIV",{class:!0});var Fa=o(ne);b(Vt.$$.fragment,Fa),Sl=c(Fa),Mt=n(Fa,"P",{});var Sn=o(Mt);Il=g(Sn,"Download given urls(s) by calling "),As=n(Sn,"CODE",{});var Zp=o(As);Bl=g(Zp,"custom_download"),Zp.forEach(a),Nl=g(Sn,"."),Sn.forEach(a),Pl=c(Fa),b(Xe.$$.fragment,Fa),Fa.forEach(a),Cl=c(L),oe=n(L,"DIV",{class:!0});var za=o(oe);b(Ft.$$.fragment,za),Rl=c(za),Ls=n(za,"P",{});var ec=o(Ls);Al=g(ec,"Extract given path(s)."),ec.forEach(a),Ll=c(za),b(Je.$$.fragment,za),za.forEach(a),Ol=c(L),le=n(L,"DIV",{class:!0});var Ua=o(le);b(zt.$$.fragment,Ua),ql=c(Ua),Os=n(Ua,"P",{});var tc=o(Os);Vl=g(tc,"Iterate over files within an archive."),tc.forEach(a),Ml=c(Ua),b(Ke.$$.fragment,Ua),Ua.forEach(a),Fl=c(L),de=n(L,"DIV",{class:!0});var Ga=o(de);b(Ut.$$.fragment,Ga),zl=c(Ga),qs=n(Ga,"P",{});var ac=o(qs);Ul=g(ac,"Iterate over file paths."),ac.forEach(a),Gl=c(Ga),b(Ye.$$.fragment,Ga),Ga.forEach(a),Hl=c(L),Qe=n(L,"DIV",{class:!0});var In=o(Qe);b(Gt.$$.fragment,In),Wl=c(In),Vs=n(In,"P",{});var sc=o(Vs);Xl=g(sc,"Ship the files using Beam FileSystems to the pipeline temp dir."),sc.forEach(a),In.forEach(a),L.forEach(a),pn=c(s),R=n(s,"DIV",{class:!0});var M=o(R);b(Ht.$$.fragment,M),Jl=c(M),U=n(M,"P",{});var ue=o(U);Kl=g(ue,`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Ms=n(ue,"CODE",{});var rc=o(Ms);Yl=g(rc,"download"),rc.forEach(a),Ql=g(ue," and "),Fs=n(ue,"CODE",{});var nc=o(Fs);Zl=g(nc,"extract"),nc.forEach(a),ed=g(ue,` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),zs=n(ue,"CODE",{});var oc=o(zs);td=g(oc,"xopen"),oc.forEach(a),ad=g(ue,` function which extends the
builtin `),Us=n(ue,"CODE",{});var lc=o(Us);sd=g(lc,"open"),lc.forEach(a),rd=g(ue," function to stream data from remote files."),ue.forEach(a),nd=c(M),ie=n(M,"DIV",{class:!0});var Ha=o(ie);b(Wt.$$.fragment,Ha),od=c(Ha),Gs=n(Ha,"P",{});var dc=o(Gs);ld=g(dc,"Download given url(s)."),dc.forEach(a),dd=c(Ha),b(Ze.$$.fragment,Ha),Ha.forEach(a),id=c(M),pe=n(M,"DIV",{class:!0});var Wa=o(pe);b(Xt.$$.fragment,Wa),pd=c(Wa),Hs=n(Wa,"P",{});var ic=o(Hs);cd=g(ic,"Download and extract given url_or_urls."),ic.forEach(a),md=c(Wa),b(et.$$.fragment,Wa),Wa.forEach(a),gd=c(M),ce=n(M,"DIV",{class:!0});var Xa=o(ce);b(Jt.$$.fragment,Xa),fd=c(Xa),Ws=n(Xa,"P",{});var pc=o(Ws);ud=g(pc,"Extract given path(s)."),pc.forEach(a),hd=c(Xa),b(tt.$$.fragment,Xa),Xa.forEach(a),_d=c(M),me=n(M,"DIV",{class:!0});var Ja=o(me);b(Kt.$$.fragment,Ja),$d=c(Ja),Xs=n(Ja,"P",{});var cc=o(Xs);vd=g(cc,"Iterate over files within an archive."),cc.forEach(a),bd=c(Ja),b(at.$$.fragment,Ja),Ja.forEach(a),xd=c(M),ge=n(M,"DIV",{class:!0});var Ka=o(ge);b(Yt.$$.fragment,Ka),wd=c(Ka),Js=n(Ka,"P",{});var mc=o(Js);Ed=g(mc,"Iterate over files."),mc.forEach(a),Dd=c(Ka),b(st.$$.fragment,Ka),Ka.forEach(a),M.forEach(a),cn=c(s),ye=n(s,"DIV",{class:!0});var Bn=o(ye);b(Qt.$$.fragment,Bn),yd=c(Bn),Ks=n(Bn,"P",{});var gc=o(Ks);kd=g(gc,"Configuration for our cached path manager."),gc.forEach(a),Bn.forEach(a),mn=c(s),q=n(s,"DIV",{class:!0});var he=o(q);b(Zt.$$.fragment,he),jd=c(he),Da=n(he,"P",{});var vp=o(Da);Ys=n(vp,"CODE",{});var fc=o(Ys);Td=g(fc,"Enum"),fc.forEach(a),Sd=g(vp," for how to treat pre-existing downloads and data."),vp.forEach(a),Id=c(he),ea=n(he,"P",{});var Nn=o(ea);Bd=g(Nn,"The default mode is "),Qs=n(Nn,"CODE",{});var uc=o(Qs);Nd=g(uc,"REUSE_DATASET_IF_EXISTS"),uc.forEach(a),Pd=g(Nn,`, which will reuse both
raw downloads and the prepared dataset if they exist.`),Nn.forEach(a),Cd=c(he),Zs=n(he,"P",{});var hc=o(Zs);Rd=g(hc,"The generations modes:"),hc.forEach(a),Ad=c(he),ta=n(he,"TABLE",{});var Pn=o(ta);er=n(Pn,"THEAD",{});var _c=o(er);ke=n(_c,"TR",{});var Ya=o(ke);gn=n(Ya,"TH",{}),o(gn).forEach(a),Ld=c(Ya),tr=n(Ya,"TH",{});var $c=o(tr);Od=g($c,"Downloads"),$c.forEach(a),qd=c(Ya),ar=n(Ya,"TH",{});var vc=o(ar);Vd=g(vc,"Dataset"),vc.forEach(a),Ya.forEach(a),_c.forEach(a),Md=c(Pn),je=n(Pn,"TBODY",{});var Qa=o(je);Te=n(Qa,"TR",{});var Za=o(Te);ya=n(Za,"TD",{});var bp=o(ya);sr=n(bp,"CODE",{});var bc=o(sr);Fd=g(bc,"REUSE_DATASET_IF_EXISTS"),bc.forEach(a),zd=g(bp," (default)"),bp.forEach(a),Ud=c(Za),rr=n(Za,"TD",{});var xc=o(rr);Gd=g(xc,"Reuse"),xc.forEach(a),Hd=c(Za),nr=n(Za,"TD",{});var wc=o(nr);Wd=g(wc,"Reuse"),wc.forEach(a),Za.forEach(a),Xd=c(Qa),Se=n(Qa,"TR",{});var es=o(Se);or=n(es,"TD",{});var Ec=o(or);lr=n(Ec,"CODE",{});var Dc=o(lr);Jd=g(Dc,"REUSE_CACHE_IF_EXISTS"),Dc.forEach(a),Ec.forEach(a),Kd=c(es),dr=n(es,"TD",{});var yc=o(dr);Yd=g(yc,"Reuse"),yc.forEach(a),Qd=c(es),ir=n(es,"TD",{});var kc=o(ir);Zd=g(kc,"Fresh"),kc.forEach(a),es.forEach(a),ei=c(Qa),Ie=n(Qa,"TR",{});var ts=o(Ie);pr=n(ts,"TD",{});var jc=o(pr);cr=n(jc,"CODE",{});var Tc=o(cr);ti=g(Tc,"FORCE_REDOWNLOAD"),Tc.forEach(a),jc.forEach(a),ai=c(ts),mr=n(ts,"TD",{});var Sc=o(mr);si=g(Sc,"Fresh"),Sc.forEach(a),ri=c(ts),gr=n(ts,"TD",{});var Ic=o(gr);ni=g(Ic,"Fresh"),Ic.forEach(a),ts.forEach(a),Qa.forEach(a),Pn.forEach(a),he.forEach(a),fn=c(s),Be=n(s,"H2",{class:!0});var Cn=o(Be);rt=n(Cn,"A",{id:!0,class:!0,href:!0});var Bc=o(rt);fr=n(Bc,"SPAN",{});var Nc=o(fr);b(aa.$$.fragment,Nc),Nc.forEach(a),Bc.forEach(a),oi=c(Cn),ur=n(Cn,"SPAN",{});var Pc=o(ur);li=g(Pc,"Splits"),Pc.forEach(a),Cn.forEach(a),un=c(s),G=n(s,"DIV",{class:!0});var _t=o(G);b(sa.$$.fragment,_t),di=c(_t),hr=n(_t,"P",{});var Cc=o(hr);ii=g(Cc,"Defines the split information for the generator."),Cc.forEach(a),pi=c(_t),Ne=n(_t,"P",{});var as=o(Ne);ci=g(as,`This should be used as returned value of
`),_r=n(as,"CODE",{});var Rc=o(_r);mi=g(Rc,"GeneratorBasedBuilder._split_generators()"),Rc.forEach(a),gi=g(as,`.
See `),$r=n(as,"CODE",{});var Ac=o($r);fi=g(Ac,"GeneratorBasedBuilder._split_generators()"),Ac.forEach(a),ui=g(as,` for more info and example
of usage.`),as.forEach(a),hi=c(_t),b(nt.$$.fragment,_t),_t.forEach(a),hn=c(s),A=n(s,"DIV",{class:!0});var F=o(A);b(ra.$$.fragment,F),_i=c(F),ka=n(F,"P",{});var xp=o(ka);vr=n(xp,"CODE",{});var Lc=o(vr);$i=g(Lc,"Enum"),Lc.forEach(a),vi=g(xp," for dataset splits."),xp.forEach(a),bi=c(F),br=n(F,"P",{});var Oc=o(br);xi=g(Oc,`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),Oc.forEach(a),wi=c(F),J=n(F,"UL",{});var $t=o(J);ja=n($t,"LI",{});var wp=o(ja);xr=n(wp,"CODE",{});var qc=o(xr);Ei=g(qc,"TRAIN"),qc.forEach(a),Di=g(wp,": the training data."),wp.forEach(a),yi=c($t),Ta=n($t,"LI",{});var Ep=o(Ta);wr=n(Ep,"CODE",{});var Vc=o(wr);ki=g(Vc,"VALIDATION"),Vc.forEach(a),ji=g(Ep,`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),Ep.forEach(a),Ti=c($t),Sa=n($t,"LI",{});var Dp=o(Sa);Er=n(Dp,"CODE",{});var Mc=o(Er);Si=g(Mc,"TEST"),Mc.forEach(a),Ii=g(Dp,`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),Dp.forEach(a),Bi=c($t),Ia=n($t,"LI",{});var yp=o(Ia);Dr=n(yp,"CODE",{});var Fc=o(Dr);Ni=g(Fc,"ALL"),Fc.forEach(a),Pi=g(yp,": the union of all defined dataset splits."),yp.forEach(a),$t.forEach(a),Ci=c(F),Ba=n(F,"P",{});var kp=o(Ba);Ri=g(kp,"Note: All splits, including compositions inherit from "),yr=n(kp,"CODE",{});var zc=o(yr);Ai=g(zc,"datasets.SplitBase"),zc.forEach(a),kp.forEach(a),Li=c(F),na=n(F,"P",{});var Rn=o(na);Oi=g(Rn,"See the :doc:"),kr=n(Rn,"CODE",{});var Uc=o(kr);qi=g(Uc,"guide on splits </loading>"),Uc.forEach(a),Vi=g(Rn," for more information."),Rn.forEach(a),Mi=c(F),b(ot.$$.fragment,F),F.forEach(a),_n=c(s),C=n(s,"DIV",{class:!0});var O=o(C);b(oa.$$.fragment,O),Fi=c(O),jr=n(O,"P",{});var Gc=o(jr);zi=g(Gc,"Descriptor corresponding to a named split (train, test, \u2026)."),Gc.forEach(a),Ui=c(O),b(lt.$$.fragment,O),Gi=c(O),Tr=n(O,"P",{});var Hc=o(Tr);Hi=g(Hc,"Warning:"),Hc.forEach(a),Wi=c(O),b(dt.$$.fragment,O),Xi=c(O),Sr=n(O,"P",{});var Wc=o(Sr);Ji=g(Wc,"Warning:"),Wc.forEach(a),Ki=c(O),b(it.$$.fragment,O),Yi=c(O),b(pt.$$.fragment,O),O.forEach(a),$n=c(s),Pe=n(s,"DIV",{class:!0});var An=o(Pe);b(la.$$.fragment,An),Qi=c(An),Ir=n(An,"P",{});var Xc=o(Ir);Zi=g(Xc,"Split corresponding to the union of all defined dataset splits."),Xc.forEach(a),An.forEach(a),vn=c(s),V=n(s,"DIV",{class:!0});var _e=o(V);b(da.$$.fragment,_e),ep=c(_e),Br=n(_e,"P",{});var Jc=o(Br);tp=g(Jc,"Reading instruction for a dataset."),Jc.forEach(a),ap=c(_e),b(ct.$$.fragment,_e),sp=c(_e),mt=n(_e,"DIV",{class:!0});var Ln=o(mt);b(ia.$$.fragment,Ln),rp=c(Ln),Nr=n(Ln,"P",{});var Kc=o(Nr);np=g(Kc,"Creates a ReadInstruction instance out of a string spec."),Kc.forEach(a),Ln.forEach(a),op=c(_e),fe=n(_e,"DIV",{class:!0});var ss=o(fe);b(pa.$$.fragment,ss),lp=c(ss),Pr=n(ss,"P",{});var Yc=o(Pr);dp=g(Yc,"Translate instruction into a list of absolute instructions."),Yc.forEach(a),ip=c(ss),Cr=n(ss,"P",{});var Qc=o(Cr);pp=g(Qc,"Those absolute instructions are then to be added together."),Qc.forEach(a),ss.forEach(a),_e.forEach(a),bn=c(s),Ce=n(s,"H2",{class:!0});var On=o(Ce);gt=n(On,"A",{id:!0,class:!0,href:!0});var Zc=o(gt);Rr=n(Zc,"SPAN",{});var em=o(Rr);b(ca.$$.fragment,em),em.forEach(a),Zc.forEach(a),cp=c(On),Ar=n(On,"SPAN",{});var tm=o(Ar);mp=g(tm,"Version"),tm.forEach(a),On.forEach(a),xn=c(s),H=n(s,"DIV",{class:!0});var vt=o(H);b(ma.$$.fragment,vt),gp=c(vt),Lr=n(vt,"P",{});var am=o(Lr);fp=g(am,"Dataset version MAJOR.MINOR.PATCH."),am.forEach(a),up=c(vt),b(ft.$$.fragment,vt),hp=c(vt),ut=n(vt,"DIV",{class:!0});var qn=o(ut);b(ga.$$.fragment,qn),_p=c(qn),Or=n(qn,"P",{});var sm=o(Or);$p=g(sm,"Returns True if other_version matches."),sm.forEach(a),qn.forEach(a),vt.forEach(a),this.h()},h(){y(d,"name","hf:doc:metadata"),y(d,"content",JSON.stringify(Pm)),y(l,"id","builder-classes"),y(l,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(l,"href","#builder-classes"),y(f,"class","relative group"),y(qe,"id","datasets.DatasetBuilder"),y(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(qe,"href","#datasets.DatasetBuilder"),y($e,"class","relative group"),y(va,"href","/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.DatasetBuilder"),y(ba,"href","/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.BuilderConfig"),y(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(wa,"href","/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.DatasetBuilder"),y(Ea,"href","/docs/datasets/pr_4472/en/package_reference/builder_classes#datasets.BuilderConfig"),y(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Ge,"id","datasets.DownloadManager"),y(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Ge,"href","#datasets.DownloadManager"),y(De,"class","relative group"),y(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(rt,"id","datasets.SplitGenerator"),y(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(rt,"href","#datasets.SplitGenerator"),y(Be,"class","relative group"),y(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(gt,"id","datasets.Version"),y(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(gt,"href","#datasets.Version"),y(Ce,"class","relative group"),y(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,_){e(document.head,d),$(s,h,_),$(s,f,_),e(f,l),e(l,u),x(t,u,null),e(f,i),e(f,rs),e(rs,Vn),$(s,en,_),$(s,$e,_),e($e,qe),e(qe,ns),x(bt,ns,null),e($e,Mn),e($e,os),e(os,Fn),$(s,tn,_),$(s,K,_),e(K,zn),e(K,va),e(va,Un),e(K,Gn),e(K,ba),e(ba,Hn),e(K,Wn),$(s,an,_),$(s,T,_),x(xt,T,null),e(T,Xn),e(T,ls),e(ls,Jn),e(T,Kn),e(T,xa),e(xa,ds),e(ds,Yn),e(xa,Qn),e(T,Zn),e(T,ve),e(ve,wt),e(wt,eo),e(wt,is),e(is,to),e(wt,ao),e(ve,so),e(ve,Et),e(Et,ro),e(Et,ps),e(ps,no),e(Et,oo),e(ve,lo),e(ve,be),e(be,io),e(be,cs),e(cs,po),e(be,co),e(be,ms),e(ms,mo),e(be,go),e(T,fo),e(T,W),e(W,gs),e(gs,uo),e(W,ho),e(W,fs),e(fs,_o),e(W,$o),e(W,us),e(us,vo),e(W,bo),e(W,hs),e(hs,xo),e(W,wo),e(T,Eo),e(T,Y),x(Dt,Y,null),e(Y,Do),e(Y,_s),e(_s,yo),e(Y,ko),x(Ve,Y,null),e(T,jo),e(T,Q),x(yt,Q,null),e(Q,To),e(Q,$s),e($s,So),e(Q,Io),x(Me,Q,null),e(T,Bo),e(T,Z),x(kt,Z,null),e(Z,No),e(Z,vs),e(vs,Po),e(Z,Co),x(Fe,Z,null),e(T,Ro),e(T,ee),x(jt,ee,null),e(ee,Ao),e(ee,bs),e(bs,Lo),e(ee,Oo),x(ze,ee,null),e(T,qo),e(T,Ue),x(Tt,Ue,null),e(Ue,Vo),e(Ue,xs),e(xs,Mo),$(s,sn,_),$(s,X,_),x(St,X,null),e(X,Fo),e(X,ws),e(ws,zo),e(X,Uo),e(X,te),e(te,Es),e(Es,Go),e(te,Ho),e(te,Ds),e(Ds,Wo),e(te,Xo),e(te,ys),e(ys,Jo),e(te,Ko),$(s,rn,_),$(s,xe,_),x(It,xe,null),e(xe,Yo),e(xe,ks),e(ks,Qo),$(s,nn,_),$(s,we,_),x(Bt,we,null),e(we,Zo),e(we,js),e(js,el),$(s,on,_),$(s,z,_),x(Nt,z,null),e(z,tl),e(z,Pt),e(Pt,al),e(Pt,wa),e(wa,sl),e(Pt,rl),e(z,nl),e(z,Ct),e(Ct,ol),e(Ct,Ea),e(Ea,ll),e(Ct,dl),e(z,il),e(z,ae),x(Rt,ae,null),e(ae,pl),e(ae,Ts),e(Ts,cl),e(ae,ml),e(ae,Ee),e(Ee,Ss),e(Ss,gl),e(Ee,fl),e(Ee,Is),e(Is,ul),e(Ee,hl),e(Ee,Bs),e(Bs,_l),$(s,ln,_),$(s,De,_),e(De,Ge),e(Ge,Ns),x(At,Ns,null),e(De,$l),e(De,Ps),e(Ps,vl),$(s,dn,_),$(s,P,_),x(Lt,P,null),e(P,bl),e(P,se),x(Ot,se,null),e(se,xl),e(se,Cs),e(Cs,wl),e(se,El),x(He,se,null),e(P,Dl),e(P,re),x(qt,re,null),e(re,yl),e(re,Rs),e(Rs,kl),e(re,jl),x(We,re,null),e(P,Tl),e(P,ne),x(Vt,ne,null),e(ne,Sl),e(ne,Mt),e(Mt,Il),e(Mt,As),e(As,Bl),e(Mt,Nl),e(ne,Pl),x(Xe,ne,null),e(P,Cl),e(P,oe),x(Ft,oe,null),e(oe,Rl),e(oe,Ls),e(Ls,Al),e(oe,Ll),x(Je,oe,null),e(P,Ol),e(P,le),x(zt,le,null),e(le,ql),e(le,Os),e(Os,Vl),e(le,Ml),x(Ke,le,null),e(P,Fl),e(P,de),x(Ut,de,null),e(de,zl),e(de,qs),e(qs,Ul),e(de,Gl),x(Ye,de,null),e(P,Hl),e(P,Qe),x(Gt,Qe,null),e(Qe,Wl),e(Qe,Vs),e(Vs,Xl),$(s,pn,_),$(s,R,_),x(Ht,R,null),e(R,Jl),e(R,U),e(U,Kl),e(U,Ms),e(Ms,Yl),e(U,Ql),e(U,Fs),e(Fs,Zl),e(U,ed),e(U,zs),e(zs,td),e(U,ad),e(U,Us),e(Us,sd),e(U,rd),e(R,nd),e(R,ie),x(Wt,ie,null),e(ie,od),e(ie,Gs),e(Gs,ld),e(ie,dd),x(Ze,ie,null),e(R,id),e(R,pe),x(Xt,pe,null),e(pe,pd),e(pe,Hs),e(Hs,cd),e(pe,md),x(et,pe,null),e(R,gd),e(R,ce),x(Jt,ce,null),e(ce,fd),e(ce,Ws),e(Ws,ud),e(ce,hd),x(tt,ce,null),e(R,_d),e(R,me),x(Kt,me,null),e(me,$d),e(me,Xs),e(Xs,vd),e(me,bd),x(at,me,null),e(R,xd),e(R,ge),x(Yt,ge,null),e(ge,wd),e(ge,Js),e(Js,Ed),e(ge,Dd),x(st,ge,null),$(s,cn,_),$(s,ye,_),x(Qt,ye,null),e(ye,yd),e(ye,Ks),e(Ks,kd),$(s,mn,_),$(s,q,_),x(Zt,q,null),e(q,jd),e(q,Da),e(Da,Ys),e(Ys,Td),e(Da,Sd),e(q,Id),e(q,ea),e(ea,Bd),e(ea,Qs),e(Qs,Nd),e(ea,Pd),e(q,Cd),e(q,Zs),e(Zs,Rd),e(q,Ad),e(q,ta),e(ta,er),e(er,ke),e(ke,gn),e(ke,Ld),e(ke,tr),e(tr,Od),e(ke,qd),e(ke,ar),e(ar,Vd),e(ta,Md),e(ta,je),e(je,Te),e(Te,ya),e(ya,sr),e(sr,Fd),e(ya,zd),e(Te,Ud),e(Te,rr),e(rr,Gd),e(Te,Hd),e(Te,nr),e(nr,Wd),e(je,Xd),e(je,Se),e(Se,or),e(or,lr),e(lr,Jd),e(Se,Kd),e(Se,dr),e(dr,Yd),e(Se,Qd),e(Se,ir),e(ir,Zd),e(je,ei),e(je,Ie),e(Ie,pr),e(pr,cr),e(cr,ti),e(Ie,ai),e(Ie,mr),e(mr,si),e(Ie,ri),e(Ie,gr),e(gr,ni),$(s,fn,_),$(s,Be,_),e(Be,rt),e(rt,fr),x(aa,fr,null),e(Be,oi),e(Be,ur),e(ur,li),$(s,un,_),$(s,G,_),x(sa,G,null),e(G,di),e(G,hr),e(hr,ii),e(G,pi),e(G,Ne),e(Ne,ci),e(Ne,_r),e(_r,mi),e(Ne,gi),e(Ne,$r),e($r,fi),e(Ne,ui),e(G,hi),x(nt,G,null),$(s,hn,_),$(s,A,_),x(ra,A,null),e(A,_i),e(A,ka),e(ka,vr),e(vr,$i),e(ka,vi),e(A,bi),e(A,br),e(br,xi),e(A,wi),e(A,J),e(J,ja),e(ja,xr),e(xr,Ei),e(ja,Di),e(J,yi),e(J,Ta),e(Ta,wr),e(wr,ki),e(Ta,ji),e(J,Ti),e(J,Sa),e(Sa,Er),e(Er,Si),e(Sa,Ii),e(J,Bi),e(J,Ia),e(Ia,Dr),e(Dr,Ni),e(Ia,Pi),e(A,Ci),e(A,Ba),e(Ba,Ri),e(Ba,yr),e(yr,Ai),e(A,Li),e(A,na),e(na,Oi),e(na,kr),e(kr,qi),e(na,Vi),e(A,Mi),x(ot,A,null),$(s,_n,_),$(s,C,_),x(oa,C,null),e(C,Fi),e(C,jr),e(jr,zi),e(C,Ui),x(lt,C,null),e(C,Gi),e(C,Tr),e(Tr,Hi),e(C,Wi),x(dt,C,null),e(C,Xi),e(C,Sr),e(Sr,Ji),e(C,Ki),x(it,C,null),e(C,Yi),x(pt,C,null),$(s,$n,_),$(s,Pe,_),x(la,Pe,null),e(Pe,Qi),e(Pe,Ir),e(Ir,Zi),$(s,vn,_),$(s,V,_),x(da,V,null),e(V,ep),e(V,Br),e(Br,tp),e(V,ap),x(ct,V,null),e(V,sp),e(V,mt),x(ia,mt,null),e(mt,rp),e(mt,Nr),e(Nr,np),e(V,op),e(V,fe),x(pa,fe,null),e(fe,lp),e(fe,Pr),e(Pr,dp),e(fe,ip),e(fe,Cr),e(Cr,pp),$(s,bn,_),$(s,Ce,_),e(Ce,gt),e(gt,Rr),x(ca,Rr,null),e(Ce,cp),e(Ce,Ar),e(Ar,mp),$(s,xn,_),$(s,H,_),x(ma,H,null),e(H,gp),e(H,Lr),e(Lr,fp),e(H,up),x(ft,H,null),e(H,hp),e(H,ut),x(ga,ut,null),e(ut,_p),e(ut,Or),e(Or,$p),wn=!0},p(s,[_]){const fa={};_&2&&(fa.$$scope={dirty:_,ctx:s}),Ve.$set(fa);const qr={};_&2&&(qr.$$scope={dirty:_,ctx:s}),Me.$set(qr);const Vr={};_&2&&(Vr.$$scope={dirty:_,ctx:s}),Fe.$set(Vr);const Mr={};_&2&&(Mr.$$scope={dirty:_,ctx:s}),ze.$set(Mr);const ua={};_&2&&(ua.$$scope={dirty:_,ctx:s}),He.$set(ua);const Fr={};_&2&&(Fr.$$scope={dirty:_,ctx:s}),We.$set(Fr);const zr={};_&2&&(zr.$$scope={dirty:_,ctx:s}),Xe.$set(zr);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:s}),Je.$set(Ur);const Re={};_&2&&(Re.$$scope={dirty:_,ctx:s}),Ke.$set(Re);const Gr={};_&2&&(Gr.$$scope={dirty:_,ctx:s}),Ye.$set(Gr);const Hr={};_&2&&(Hr.$$scope={dirty:_,ctx:s}),Ze.$set(Hr);const S={};_&2&&(S.$$scope={dirty:_,ctx:s}),et.$set(S);const Wr={};_&2&&(Wr.$$scope={dirty:_,ctx:s}),tt.$set(Wr);const Na={};_&2&&(Na.$$scope={dirty:_,ctx:s}),at.$set(Na);const Xr={};_&2&&(Xr.$$scope={dirty:_,ctx:s}),st.$set(Xr);const Ae={};_&2&&(Ae.$$scope={dirty:_,ctx:s}),nt.$set(Ae);const ha={};_&2&&(ha.$$scope={dirty:_,ctx:s}),ot.$set(ha);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:s}),lt.$set(Jr);const _a={};_&2&&(_a.$$scope={dirty:_,ctx:s}),dt.$set(_a);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:s}),it.$set(Kr);const Le={};_&2&&(Le.$$scope={dirty:_,ctx:s}),pt.$set(Le);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:s}),ct.$set(Yr);const Qr={};_&2&&(Qr.$$scope={dirty:_,ctx:s}),ft.$set(Qr)},i(s){wn||(w(t.$$.fragment,s),w(bt.$$.fragment,s),w(xt.$$.fragment,s),w(Dt.$$.fragment,s),w(Ve.$$.fragment,s),w(yt.$$.fragment,s),w(Me.$$.fragment,s),w(kt.$$.fragment,s),w(Fe.$$.fragment,s),w(jt.$$.fragment,s),w(ze.$$.fragment,s),w(Tt.$$.fragment,s),w(St.$$.fragment,s),w(It.$$.fragment,s),w(Bt.$$.fragment,s),w(Nt.$$.fragment,s),w(Rt.$$.fragment,s),w(At.$$.fragment,s),w(Lt.$$.fragment,s),w(Ot.$$.fragment,s),w(He.$$.fragment,s),w(qt.$$.fragment,s),w(We.$$.fragment,s),w(Vt.$$.fragment,s),w(Xe.$$.fragment,s),w(Ft.$$.fragment,s),w(Je.$$.fragment,s),w(zt.$$.fragment,s),w(Ke.$$.fragment,s),w(Ut.$$.fragment,s),w(Ye.$$.fragment,s),w(Gt.$$.fragment,s),w(Ht.$$.fragment,s),w(Wt.$$.fragment,s),w(Ze.$$.fragment,s),w(Xt.$$.fragment,s),w(et.$$.fragment,s),w(Jt.$$.fragment,s),w(tt.$$.fragment,s),w(Kt.$$.fragment,s),w(at.$$.fragment,s),w(Yt.$$.fragment,s),w(st.$$.fragment,s),w(Qt.$$.fragment,s),w(Zt.$$.fragment,s),w(aa.$$.fragment,s),w(sa.$$.fragment,s),w(nt.$$.fragment,s),w(ra.$$.fragment,s),w(ot.$$.fragment,s),w(oa.$$.fragment,s),w(lt.$$.fragment,s),w(dt.$$.fragment,s),w(it.$$.fragment,s),w(pt.$$.fragment,s),w(la.$$.fragment,s),w(da.$$.fragment,s),w(ct.$$.fragment,s),w(ia.$$.fragment,s),w(pa.$$.fragment,s),w(ca.$$.fragment,s),w(ma.$$.fragment,s),w(ft.$$.fragment,s),w(ga.$$.fragment,s),wn=!0)},o(s){E(t.$$.fragment,s),E(bt.$$.fragment,s),E(xt.$$.fragment,s),E(Dt.$$.fragment,s),E(Ve.$$.fragment,s),E(yt.$$.fragment,s),E(Me.$$.fragment,s),E(kt.$$.fragment,s),E(Fe.$$.fragment,s),E(jt.$$.fragment,s),E(ze.$$.fragment,s),E(Tt.$$.fragment,s),E(St.$$.fragment,s),E(It.$$.fragment,s),E(Bt.$$.fragment,s),E(Nt.$$.fragment,s),E(Rt.$$.fragment,s),E(At.$$.fragment,s),E(Lt.$$.fragment,s),E(Ot.$$.fragment,s),E(He.$$.fragment,s),E(qt.$$.fragment,s),E(We.$$.fragment,s),E(Vt.$$.fragment,s),E(Xe.$$.fragment,s),E(Ft.$$.fragment,s),E(Je.$$.fragment,s),E(zt.$$.fragment,s),E(Ke.$$.fragment,s),E(Ut.$$.fragment,s),E(Ye.$$.fragment,s),E(Gt.$$.fragment,s),E(Ht.$$.fragment,s),E(Wt.$$.fragment,s),E(Ze.$$.fragment,s),E(Xt.$$.fragment,s),E(et.$$.fragment,s),E(Jt.$$.fragment,s),E(tt.$$.fragment,s),E(Kt.$$.fragment,s),E(at.$$.fragment,s),E(Yt.$$.fragment,s),E(st.$$.fragment,s),E(Qt.$$.fragment,s),E(Zt.$$.fragment,s),E(aa.$$.fragment,s),E(sa.$$.fragment,s),E(nt.$$.fragment,s),E(ra.$$.fragment,s),E(ot.$$.fragment,s),E(oa.$$.fragment,s),E(lt.$$.fragment,s),E(dt.$$.fragment,s),E(it.$$.fragment,s),E(pt.$$.fragment,s),E(la.$$.fragment,s),E(da.$$.fragment,s),E(ct.$$.fragment,s),E(ia.$$.fragment,s),E(pa.$$.fragment,s),E(ca.$$.fragment,s),E(ma.$$.fragment,s),E(ft.$$.fragment,s),E(ga.$$.fragment,s),wn=!1},d(s){a(d),s&&a(h),s&&a(f),D(t),s&&a(en),s&&a($e),D(bt),s&&a(tn),s&&a(K),s&&a(an),s&&a(T),D(xt),D(Dt),D(Ve),D(yt),D(Me),D(kt),D(Fe),D(jt),D(ze),D(Tt),s&&a(sn),s&&a(X),D(St),s&&a(rn),s&&a(xe),D(It),s&&a(nn),s&&a(we),D(Bt),s&&a(on),s&&a(z),D(Nt),D(Rt),s&&a(ln),s&&a(De),D(At),s&&a(dn),s&&a(P),D(Lt),D(Ot),D(He),D(qt),D(We),D(Vt),D(Xe),D(Ft),D(Je),D(zt),D(Ke),D(Ut),D(Ye),D(Gt),s&&a(pn),s&&a(R),D(Ht),D(Wt),D(Ze),D(Xt),D(et),D(Jt),D(tt),D(Kt),D(at),D(Yt),D(st),s&&a(cn),s&&a(ye),D(Qt),s&&a(mn),s&&a(q),D(Zt),s&&a(fn),s&&a(Be),D(aa),s&&a(un),s&&a(G),D(sa),D(nt),s&&a(hn),s&&a(A),D(ra),D(ot),s&&a(_n),s&&a(C),D(oa),D(lt),D(dt),D(it),D(pt),s&&a($n),s&&a(Pe),D(la),s&&a(vn),s&&a(V),D(da),D(ct),D(ia),D(pa),s&&a(bn),s&&a(Ce),D(ca),s&&a(xn),s&&a(H),D(ma),D(ft),D(ga)}}}const Pm={local:"builder-classes",sections:[{local:"datasets.DatasetBuilder",title:"Builders"},{local:"datasets.DownloadManager",title:"Download"},{local:"datasets.SplitGenerator",title:"Splits"},{local:"datasets.Version",title:"Version"}],title:"Builder classes"};function Cm(k){return dm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vm extends rm{constructor(d){super();nm(this,d,Cm,Nm,om,{})}}export{Vm as default,Pm as metadata};
