import{S as wo,i as Eo,s as yo,e as n,k as d,w as h,t as s,M as ko,c as i,d as t,m,a as r,x as u,h as l,b as c,G as e,g as p,y as g,q as _,o as j,B as $,v as xo}from"../chunks/vendor-hf-doc-builder.js";import{T as bo}from"../chunks/Tip-hf-doc-builder.js";import{I as Ka}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as k}from"../chunks/CodeBlock-hf-doc-builder.js";function Io(Ca){let f,C,v,w,I,b,D,P;return{c(){f=n("p"),C=s("To work with image datasets, you need to have the "),v=n("code"),w=s("vision"),I=s(" dependency installed. Check out the "),b=n("a"),D=s("installation"),P=s(" guide to learn how to install it."),this.h()},l(E){f=i(E,"P",{});var q=r(f);C=l(q,"To work with image datasets, you need to have the "),v=i(q,"CODE",{});var x=r(v);w=l(x,"vision"),x.forEach(t),I=l(q," dependency installed. Check out the "),b=i(q,"A",{href:!0});var z=r(b);D=l(z,"installation"),z.forEach(t),P=l(q," guide to learn how to install it."),q.forEach(t),this.h()},h(){c(b,"href","./installation#vision")},m(E,q){p(E,f,q),e(f,C),e(f,v),e(v,w),e(f,I),e(f,b),e(b,D),e(f,P)},d(E){E&&t(f)}}}function Po(Ca){let f,C,v,w,I,b,D,P;return{c(){f=n("p"),C=s("Index into an image dataset using the row index first and then the "),v=n("code"),w=s("image"),I=s(" column - "),b=n("code"),D=s('dataset[0]["image"]'),P=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(E){f=i(E,"P",{});var q=r(f);C=l(q,"Index into an image dataset using the row index first and then the "),v=i(q,"CODE",{});var x=r(v);w=l(x,"image"),x.forEach(t),I=l(q," column - "),b=i(q,"CODE",{});var z=r(b);D=l(z,'dataset[0]["image"]'),z.forEach(t),P=l(q," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),q.forEach(t)},m(E,q){p(E,f,q),e(f,C),e(f,v),e(v,w),e(f,I),e(f,b),e(b,D),e(f,P)},d(E){E&&t(f)}}}function Co(Ca){let f,C,v,w,I,b,D,P,E,q,x,z,Qa,Tt,St,Oe,K,Le,A,Bt,Va,Nt,Yt,Da,Mt,Rt,Te,pa,Se,Q,Be,V,zt,Fa,Ht,Gt,Ne,H,X,Xa,da,Ut,Za,Jt,Ye,O,Wt,Aa,Kt,Qt,Oa,Vt,Xt,Me,ma,Re,L,Zt,ae,as,es,La,ts,ss,ze,ca,He,G,Z,ee,fa,ls,te,os,Ge,aa,ns,se,is,rs,Ue,ha,Je,T,ps,le,ds,ms,oe,cs,fs,We,ua,Ke,ea,hs,ne,us,gs,Qe,ga,Ve,y,ie,_s,js,re,$s,qs,pe,vs,bs,de,ws,Es,Ta,ys,ks,Xe,U,ta,me,_a,xs,ce,Is,Ze,S,Ps,fe,Cs,Ds,he,Fs,As,at,ja,et,B,Os,ue,Ls,Ts,ge,Ss,Bs,tt,$a,st,sa,Ns,_e,Ys,Ms,lt,Sa,Rs,ot,qa,nt,la,zs,je,Hs,Gs,it,va,rt,Ba,Us,pt,ba,dt,N,Js,$e,Ws,Ks,qe,Qs,Vs,mt,Y,Xs,ve,Zs,al,be,el,tl,ct,J,oa,we,wa,sl,Ee,ll,ft,na,ol,ye,nl,il,ht,Ea,ut,M,rl,ke,pl,dl,xe,ml,cl,gt,ya,_t,W,ia,Ie,ka,fl,Pe,hl,jt,ra,ul,Ce,gl,_l,$t,xa,qt,R,jl,De,$l,ql,Fe,vl,bl,vt,Ia,bt;return b=new Ka({}),K=new bo({props:{$$slots:{default:[Io]},$$scope:{ctx:Ca}}}),pa=new k({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),Q=new bo({props:{warning:!0,$$slots:{default:[Po]},$$scope:{ctx:Ca}}}),da=new Ka({}),ma=new k({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),ca=new k({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),fa=new Ka({}),ha=new k({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ua=new k({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]

dataset["train"][-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][-<span class="hljs-number">1</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E8DAD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}`}}),ga=new k({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),_a=new Ka({}),ja=new k({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),$a=new k({props:{code:`{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a first value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a second value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a third value of a text feature you added to your images&quot;</span>}`}}),qa=new k({props:{code:`folder/train/metadata.jsonl
folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png`}}),va=new k({props:{code:`{"file_name": "dog/golden_retriever.png", "text": "This is a golden retriever"}
{"file_name": "dog/german_shepherd.png", "text": "This is a german shepherd"}
{"file_name": "cat/bengal.png", "text": "This is a bengal cat"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;dog/golden_retriever.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;dog/german_shepherd.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;cat/bengal.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a bengal cat&quot;</span>}`}}),ba=new k({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", drop_labels=False, split="train")
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, drop_labels=<span class="hljs-literal">False</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480 at <span class="hljs-number">0x7F5182C7AD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;This is a golden retriever&quot;</span>}`}}),wa=new Ka({}),Ea=new k({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),ya=new k({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),ka=new Ka({}),xa=new k({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),Ia=new k({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){f=n("meta"),C=d(),v=n("h1"),w=n("a"),I=n("span"),h(b.$$.fragment),D=d(),P=n("span"),E=s("Load image data"),q=d(),x=n("p"),z=s("Image datasets are loaded from the "),Qa=n("code"),Tt=s("image"),St=s(" column, which contains a PIL object."),Oe=d(),h(K.$$.fragment),Le=d(),A=n("p"),Bt=s("When you load an image dataset and call the "),Va=n("code"),Nt=s("image"),Yt=s(" column, the "),Da=n("a"),Mt=s("Image"),Rt=s(" feature automatically decodes the PIL object into an image:"),Te=d(),h(pa.$$.fragment),Se=d(),h(Q.$$.fragment),Be=d(),V=n("p"),zt=s("For a guide on how to load any type of dataset, take a look at the "),Fa=n("a"),Ht=s("general loading guide"),Gt=s("."),Ne=d(),H=n("h2"),X=n("a"),Xa=n("span"),h(da.$$.fragment),Ut=d(),Za=n("span"),Jt=s("Local files"),Ye=d(),O=n("p"),Wt=s("You can load a dataset from the image path. Use the "),Aa=n("a"),Kt=s("cast_column()"),Qt=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),Oa=n("a"),Vt=s("Image"),Xt=s(" feature:"),Me=d(),h(ma.$$.fragment),Re=d(),L=n("p"),Zt=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),ae=n("code"),as=s("decode=False"),es=s(" in the "),La=n("a"),ts=s("Image"),ss=s(" feature:"),ze=d(),h(ca.$$.fragment),He=d(),G=n("h2"),Z=n("a"),ee=n("span"),h(fa.$$.fragment),ls=d(),te=n("span"),os=s("ImageFolder"),Ge=d(),aa=n("p"),ns=s("You can also load a dataset with a "),se=n("code"),is=s("ImageFolder"),rs=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Ue=d(),h(ha.$$.fragment),Je=d(),T=n("p"),ps=s("Load your dataset by specifying "),le=n("code"),ds=s("imagefolder"),ms=s(" and the directory of your dataset in "),oe=n("code"),cs=s("data_dir"),fs=s(":"),We=d(),h(ua.$$.fragment),Ke=d(),ea=n("p"),hs=s("Load remote datasets from their URLs with the "),ne=n("code"),us=s("data_files"),gs=s(" parameter:"),Qe=d(),h(ga.$$.fragment),Ve=d(),y=n("p"),ie=n("code"),_s=s("ImageFolder"),js=s(" creates a "),re=n("code"),$s=s("label"),qs=s(" column, and the label name is based on the directory name. To ignore the "),pe=n("code"),vs=s("label"),bs=s(" column, set "),de=n("code"),ws=s("drop_labels=False"),Es=s(" as defined in "),Ta=n("a"),ys=s("ImageFolderConfig"),ks=s("."),Xe=d(),U=n("h2"),ta=n("a"),me=n("span"),h(_a.$$.fragment),xs=d(),ce=n("span"),Is=s("ImageFolder with metadata"),Ze=d(),S=n("p"),Ps=s("Metadata associated with your dataset can also be loaded, extending the utility of "),fe=n("code"),Cs=s("ImageFolder"),Ds=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),he=n("code"),Fs=s("metadata.jsonl"),As=s(" file:"),at=d(),h(ja.$$.fragment),et=d(),B=n("p"),Os=s("Your "),ue=n("code"),Ls=s("metadata.jsonl"),Ts=s(" file must have a "),ge=n("code"),Ss=s("file_name"),Bs=s(" column which links image files with their metadata:"),tt=d(),h($a.$$.fragment),st=d(),sa=n("p"),Ns=s("If you want to both extract labels from directories names and use information from metadata files, set "),_e=n("code"),Ys=s("drop_labels=False"),Ms=s(`.
By default, if metadata files are present, inferring labels based on the directory name is skipped.`),lt=d(),Sa=n("p"),Rs=s("If you have data structure like this:"),ot=d(),h(qa.$$.fragment),nt=d(),la=n("p"),zs=s("and your "),je=n("code"),Hs=s("metadata.jsonl"),Gs=s(" file looks like this:"),it=d(),h(va.$$.fragment),rt=d(),Ba=n("p"),Us=s("you can use both features from metadata and labels from filenames:"),pt=d(),h(ba.$$.fragment),dt=d(),N=n("p"),Js=s("Alternatively, you can add "),$e=n("code"),Ws=s('"label"'),Ks=s(" field to your "),qe=n("code"),Qs=s("metadata.jsonl"),Vs=s("."),mt=d(),Y=n("p"),Xs=s("If you have any metadata files in your data directory, like in example above, but want to ignore them and only add labels extracted from the directories names, set "),ve=n("code"),Zs=s("drop_metadata=True"),al=s(" and "),be=n("code"),el=s("drop_labels=False"),tl=s("."),ct=d(),J=n("h3"),oa=n("a"),we=n("span"),h(wa.$$.fragment),sl=d(),Ee=n("span"),ll=s("Image captioning"),ft=d(),na=n("p"),ol=s("Image captioning datasets have text describing an image. An example "),ye=n("code"),nl=s("metadata.jsonl"),il=s(" may look like:"),ht=d(),h(Ea.$$.fragment),ut=d(),M=n("p"),rl=s("Load the dataset with "),ke=n("code"),pl=s("ImageFolder"),dl=s(", and it will create a "),xe=n("code"),ml=s("text"),cl=s(" column for the image captions:"),gt=d(),h(ya.$$.fragment),_t=d(),W=n("h3"),ia=n("a"),Ie=n("span"),h(ka.$$.fragment),fl=d(),Pe=n("span"),hl=s("Object detection"),jt=d(),ra=n("p"),ul=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Ce=n("code"),gl=s("metadata.jsonl"),_l=s(" may look like:"),$t=d(),h(xa.$$.fragment),qt=d(),R=n("p"),jl=s("Load the dataset with "),De=n("code"),$l=s("ImageFolder"),ql=s(", and it will create a "),Fe=n("code"),vl=s("objects"),bl=s(" column with the bounding boxes and the categories:"),vt=d(),h(Ia.$$.fragment),this.h()},l(a){const o=ko('[data-svelte="svelte-1phssyn"]',document.head);f=i(o,"META",{name:!0,content:!0}),o.forEach(t),C=m(a),v=i(a,"H1",{class:!0});var Pa=r(v);w=i(Pa,"A",{id:!0,class:!0,href:!0});var Ae=r(w);I=i(Ae,"SPAN",{});var wl=r(I);u(b.$$.fragment,wl),wl.forEach(t),Ae.forEach(t),D=m(Pa),P=i(Pa,"SPAN",{});var El=r(P);E=l(El,"Load image data"),El.forEach(t),Pa.forEach(t),q=m(a),x=i(a,"P",{});var wt=r(x);z=l(wt,"Image datasets are loaded from the "),Qa=i(wt,"CODE",{});var yl=r(Qa);Tt=l(yl,"image"),yl.forEach(t),St=l(wt," column, which contains a PIL object."),wt.forEach(t),Oe=m(a),u(K.$$.fragment,a),Le=m(a),A=i(a,"P",{});var Na=r(A);Bt=l(Na,"When you load an image dataset and call the "),Va=i(Na,"CODE",{});var kl=r(Va);Nt=l(kl,"image"),kl.forEach(t),Yt=l(Na," column, the "),Da=i(Na,"A",{href:!0});var xl=r(Da);Mt=l(xl,"Image"),xl.forEach(t),Rt=l(Na," feature automatically decodes the PIL object into an image:"),Na.forEach(t),Te=m(a),u(pa.$$.fragment,a),Se=m(a),u(Q.$$.fragment,a),Be=m(a),V=i(a,"P",{});var Et=r(V);zt=l(Et,"For a guide on how to load any type of dataset, take a look at the "),Fa=i(Et,"A",{href:!0});var Il=r(Fa);Ht=l(Il,"general loading guide"),Il.forEach(t),Gt=l(Et,"."),Et.forEach(t),Ne=m(a),H=i(a,"H2",{class:!0});var yt=r(H);X=i(yt,"A",{id:!0,class:!0,href:!0});var Pl=r(X);Xa=i(Pl,"SPAN",{});var Cl=r(Xa);u(da.$$.fragment,Cl),Cl.forEach(t),Pl.forEach(t),Ut=m(yt),Za=i(yt,"SPAN",{});var Dl=r(Za);Jt=l(Dl,"Local files"),Dl.forEach(t),yt.forEach(t),Ye=m(a),O=i(a,"P",{});var Ya=r(O);Wt=l(Ya,"You can load a dataset from the image path. Use the "),Aa=i(Ya,"A",{href:!0});var Fl=r(Aa);Kt=l(Fl,"cast_column()"),Fl.forEach(t),Qt=l(Ya," function to accept a column of image file paths, and decode it into a PIL image with the "),Oa=i(Ya,"A",{href:!0});var Al=r(Oa);Vt=l(Al,"Image"),Al.forEach(t),Xt=l(Ya," feature:"),Ya.forEach(t),Me=m(a),u(ma.$$.fragment,a),Re=m(a),L=i(a,"P",{});var Ma=r(L);Zt=l(Ma,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),ae=i(Ma,"CODE",{});var Ol=r(ae);as=l(Ol,"decode=False"),Ol.forEach(t),es=l(Ma," in the "),La=i(Ma,"A",{href:!0});var Ll=r(La);ts=l(Ll,"Image"),Ll.forEach(t),ss=l(Ma," feature:"),Ma.forEach(t),ze=m(a),u(ca.$$.fragment,a),He=m(a),G=i(a,"H2",{class:!0});var kt=r(G);Z=i(kt,"A",{id:!0,class:!0,href:!0});var Tl=r(Z);ee=i(Tl,"SPAN",{});var Sl=r(ee);u(fa.$$.fragment,Sl),Sl.forEach(t),Tl.forEach(t),ls=m(kt),te=i(kt,"SPAN",{});var Bl=r(te);os=l(Bl,"ImageFolder"),Bl.forEach(t),kt.forEach(t),Ge=m(a),aa=i(a,"P",{});var xt=r(aa);ns=l(xt,"You can also load a dataset with a "),se=i(xt,"CODE",{});var Nl=r(se);is=l(Nl,"ImageFolder"),Nl.forEach(t),rs=l(xt," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),xt.forEach(t),Ue=m(a),u(ha.$$.fragment,a),Je=m(a),T=i(a,"P",{});var Ra=r(T);ps=l(Ra,"Load your dataset by specifying "),le=i(Ra,"CODE",{});var Yl=r(le);ds=l(Yl,"imagefolder"),Yl.forEach(t),ms=l(Ra," and the directory of your dataset in "),oe=i(Ra,"CODE",{});var Ml=r(oe);cs=l(Ml,"data_dir"),Ml.forEach(t),fs=l(Ra,":"),Ra.forEach(t),We=m(a),u(ua.$$.fragment,a),Ke=m(a),ea=i(a,"P",{});var It=r(ea);hs=l(It,"Load remote datasets from their URLs with the "),ne=i(It,"CODE",{});var Rl=r(ne);us=l(Rl,"data_files"),Rl.forEach(t),gs=l(It," parameter:"),It.forEach(t),Qe=m(a),u(ga.$$.fragment,a),Ve=m(a),y=i(a,"P",{});var F=r(y);ie=i(F,"CODE",{});var zl=r(ie);_s=l(zl,"ImageFolder"),zl.forEach(t),js=l(F," creates a "),re=i(F,"CODE",{});var Hl=r(re);$s=l(Hl,"label"),Hl.forEach(t),qs=l(F," column, and the label name is based on the directory name. To ignore the "),pe=i(F,"CODE",{});var Gl=r(pe);vs=l(Gl,"label"),Gl.forEach(t),bs=l(F," column, set "),de=i(F,"CODE",{});var Ul=r(de);ws=l(Ul,"drop_labels=False"),Ul.forEach(t),Es=l(F," as defined in "),Ta=i(F,"A",{href:!0});var Jl=r(Ta);ys=l(Jl,"ImageFolderConfig"),Jl.forEach(t),ks=l(F,"."),F.forEach(t),Xe=m(a),U=i(a,"H2",{class:!0});var Pt=r(U);ta=i(Pt,"A",{id:!0,class:!0,href:!0});var Wl=r(ta);me=i(Wl,"SPAN",{});var Kl=r(me);u(_a.$$.fragment,Kl),Kl.forEach(t),Wl.forEach(t),xs=m(Pt),ce=i(Pt,"SPAN",{});var Ql=r(ce);Is=l(Ql,"ImageFolder with metadata"),Ql.forEach(t),Pt.forEach(t),Ze=m(a),S=i(a,"P",{});var za=r(S);Ps=l(za,"Metadata associated with your dataset can also be loaded, extending the utility of "),fe=i(za,"CODE",{});var Vl=r(fe);Cs=l(Vl,"ImageFolder"),Vl.forEach(t),Ds=l(za," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),he=i(za,"CODE",{});var Xl=r(he);Fs=l(Xl,"metadata.jsonl"),Xl.forEach(t),As=l(za," file:"),za.forEach(t),at=m(a),u(ja.$$.fragment,a),et=m(a),B=i(a,"P",{});var Ha=r(B);Os=l(Ha,"Your "),ue=i(Ha,"CODE",{});var Zl=r(ue);Ls=l(Zl,"metadata.jsonl"),Zl.forEach(t),Ts=l(Ha," file must have a "),ge=i(Ha,"CODE",{});var ao=r(ge);Ss=l(ao,"file_name"),ao.forEach(t),Bs=l(Ha," column which links image files with their metadata:"),Ha.forEach(t),tt=m(a),u($a.$$.fragment,a),st=m(a),sa=i(a,"P",{});var Ct=r(sa);Ns=l(Ct,"If you want to both extract labels from directories names and use information from metadata files, set "),_e=i(Ct,"CODE",{});var eo=r(_e);Ys=l(eo,"drop_labels=False"),eo.forEach(t),Ms=l(Ct,`.
By default, if metadata files are present, inferring labels based on the directory name is skipped.`),Ct.forEach(t),lt=m(a),Sa=i(a,"P",{});var to=r(Sa);Rs=l(to,"If you have data structure like this:"),to.forEach(t),ot=m(a),u(qa.$$.fragment,a),nt=m(a),la=i(a,"P",{});var Dt=r(la);zs=l(Dt,"and your "),je=i(Dt,"CODE",{});var so=r(je);Hs=l(so,"metadata.jsonl"),so.forEach(t),Gs=l(Dt," file looks like this:"),Dt.forEach(t),it=m(a),u(va.$$.fragment,a),rt=m(a),Ba=i(a,"P",{});var lo=r(Ba);Us=l(lo,"you can use both features from metadata and labels from filenames:"),lo.forEach(t),pt=m(a),u(ba.$$.fragment,a),dt=m(a),N=i(a,"P",{});var Ga=r(N);Js=l(Ga,"Alternatively, you can add "),$e=i(Ga,"CODE",{});var oo=r($e);Ws=l(oo,'"label"'),oo.forEach(t),Ks=l(Ga," field to your "),qe=i(Ga,"CODE",{});var no=r(qe);Qs=l(no,"metadata.jsonl"),no.forEach(t),Vs=l(Ga,"."),Ga.forEach(t),mt=m(a),Y=i(a,"P",{});var Ua=r(Y);Xs=l(Ua,"If you have any metadata files in your data directory, like in example above, but want to ignore them and only add labels extracted from the directories names, set "),ve=i(Ua,"CODE",{});var io=r(ve);Zs=l(io,"drop_metadata=True"),io.forEach(t),al=l(Ua," and "),be=i(Ua,"CODE",{});var ro=r(be);el=l(ro,"drop_labels=False"),ro.forEach(t),tl=l(Ua,"."),Ua.forEach(t),ct=m(a),J=i(a,"H3",{class:!0});var Ft=r(J);oa=i(Ft,"A",{id:!0,class:!0,href:!0});var po=r(oa);we=i(po,"SPAN",{});var mo=r(we);u(wa.$$.fragment,mo),mo.forEach(t),po.forEach(t),sl=m(Ft),Ee=i(Ft,"SPAN",{});var co=r(Ee);ll=l(co,"Image captioning"),co.forEach(t),Ft.forEach(t),ft=m(a),na=i(a,"P",{});var At=r(na);ol=l(At,"Image captioning datasets have text describing an image. An example "),ye=i(At,"CODE",{});var fo=r(ye);nl=l(fo,"metadata.jsonl"),fo.forEach(t),il=l(At," may look like:"),At.forEach(t),ht=m(a),u(Ea.$$.fragment,a),ut=m(a),M=i(a,"P",{});var Ja=r(M);rl=l(Ja,"Load the dataset with "),ke=i(Ja,"CODE",{});var ho=r(ke);pl=l(ho,"ImageFolder"),ho.forEach(t),dl=l(Ja,", and it will create a "),xe=i(Ja,"CODE",{});var uo=r(xe);ml=l(uo,"text"),uo.forEach(t),cl=l(Ja," column for the image captions:"),Ja.forEach(t),gt=m(a),u(ya.$$.fragment,a),_t=m(a),W=i(a,"H3",{class:!0});var Ot=r(W);ia=i(Ot,"A",{id:!0,class:!0,href:!0});var go=r(ia);Ie=i(go,"SPAN",{});var _o=r(Ie);u(ka.$$.fragment,_o),_o.forEach(t),go.forEach(t),fl=m(Ot),Pe=i(Ot,"SPAN",{});var jo=r(Pe);hl=l(jo,"Object detection"),jo.forEach(t),Ot.forEach(t),jt=m(a),ra=i(a,"P",{});var Lt=r(ra);ul=l(Lt,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Ce=i(Lt,"CODE",{});var $o=r(Ce);gl=l($o,"metadata.jsonl"),$o.forEach(t),_l=l(Lt," may look like:"),Lt.forEach(t),$t=m(a),u(xa.$$.fragment,a),qt=m(a),R=i(a,"P",{});var Wa=r(R);jl=l(Wa,"Load the dataset with "),De=i(Wa,"CODE",{});var qo=r(De);$l=l(qo,"ImageFolder"),qo.forEach(t),ql=l(Wa,", and it will create a "),Fe=i(Wa,"CODE",{});var vo=r(Fe);vl=l(vo,"objects"),vo.forEach(t),bl=l(Wa," column with the bounding boxes and the categories:"),Wa.forEach(t),vt=m(a),u(Ia.$$.fragment,a),this.h()},h(){c(f,"name","hf:doc:metadata"),c(f,"content",JSON.stringify(Do)),c(w,"id","load-image-data"),c(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w,"href","#load-image-data"),c(v,"class","relative group"),c(Da,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),c(Fa,"href","./loading"),c(X,"id","local-files"),c(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X,"href","#local-files"),c(H,"class","relative group"),c(Aa,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Dataset.cast_column"),c(Oa,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),c(La,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),c(Z,"id","imagefolder"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#imagefolder"),c(G,"class","relative group"),c(Ta,"href","/docs/datasets/pr_4622/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),c(ta,"id","imagefolder-with-metadata"),c(ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ta,"href","#imagefolder-with-metadata"),c(U,"class","relative group"),c(oa,"id","image-captioning"),c(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oa,"href","#image-captioning"),c(J,"class","relative group"),c(ia,"id","object-detection"),c(ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ia,"href","#object-detection"),c(W,"class","relative group")},m(a,o){e(document.head,f),p(a,C,o),p(a,v,o),e(v,w),e(w,I),g(b,I,null),e(v,D),e(v,P),e(P,E),p(a,q,o),p(a,x,o),e(x,z),e(x,Qa),e(Qa,Tt),e(x,St),p(a,Oe,o),g(K,a,o),p(a,Le,o),p(a,A,o),e(A,Bt),e(A,Va),e(Va,Nt),e(A,Yt),e(A,Da),e(Da,Mt),e(A,Rt),p(a,Te,o),g(pa,a,o),p(a,Se,o),g(Q,a,o),p(a,Be,o),p(a,V,o),e(V,zt),e(V,Fa),e(Fa,Ht),e(V,Gt),p(a,Ne,o),p(a,H,o),e(H,X),e(X,Xa),g(da,Xa,null),e(H,Ut),e(H,Za),e(Za,Jt),p(a,Ye,o),p(a,O,o),e(O,Wt),e(O,Aa),e(Aa,Kt),e(O,Qt),e(O,Oa),e(Oa,Vt),e(O,Xt),p(a,Me,o),g(ma,a,o),p(a,Re,o),p(a,L,o),e(L,Zt),e(L,ae),e(ae,as),e(L,es),e(L,La),e(La,ts),e(L,ss),p(a,ze,o),g(ca,a,o),p(a,He,o),p(a,G,o),e(G,Z),e(Z,ee),g(fa,ee,null),e(G,ls),e(G,te),e(te,os),p(a,Ge,o),p(a,aa,o),e(aa,ns),e(aa,se),e(se,is),e(aa,rs),p(a,Ue,o),g(ha,a,o),p(a,Je,o),p(a,T,o),e(T,ps),e(T,le),e(le,ds),e(T,ms),e(T,oe),e(oe,cs),e(T,fs),p(a,We,o),g(ua,a,o),p(a,Ke,o),p(a,ea,o),e(ea,hs),e(ea,ne),e(ne,us),e(ea,gs),p(a,Qe,o),g(ga,a,o),p(a,Ve,o),p(a,y,o),e(y,ie),e(ie,_s),e(y,js),e(y,re),e(re,$s),e(y,qs),e(y,pe),e(pe,vs),e(y,bs),e(y,de),e(de,ws),e(y,Es),e(y,Ta),e(Ta,ys),e(y,ks),p(a,Xe,o),p(a,U,o),e(U,ta),e(ta,me),g(_a,me,null),e(U,xs),e(U,ce),e(ce,Is),p(a,Ze,o),p(a,S,o),e(S,Ps),e(S,fe),e(fe,Cs),e(S,Ds),e(S,he),e(he,Fs),e(S,As),p(a,at,o),g(ja,a,o),p(a,et,o),p(a,B,o),e(B,Os),e(B,ue),e(ue,Ls),e(B,Ts),e(B,ge),e(ge,Ss),e(B,Bs),p(a,tt,o),g($a,a,o),p(a,st,o),p(a,sa,o),e(sa,Ns),e(sa,_e),e(_e,Ys),e(sa,Ms),p(a,lt,o),p(a,Sa,o),e(Sa,Rs),p(a,ot,o),g(qa,a,o),p(a,nt,o),p(a,la,o),e(la,zs),e(la,je),e(je,Hs),e(la,Gs),p(a,it,o),g(va,a,o),p(a,rt,o),p(a,Ba,o),e(Ba,Us),p(a,pt,o),g(ba,a,o),p(a,dt,o),p(a,N,o),e(N,Js),e(N,$e),e($e,Ws),e(N,Ks),e(N,qe),e(qe,Qs),e(N,Vs),p(a,mt,o),p(a,Y,o),e(Y,Xs),e(Y,ve),e(ve,Zs),e(Y,al),e(Y,be),e(be,el),e(Y,tl),p(a,ct,o),p(a,J,o),e(J,oa),e(oa,we),g(wa,we,null),e(J,sl),e(J,Ee),e(Ee,ll),p(a,ft,o),p(a,na,o),e(na,ol),e(na,ye),e(ye,nl),e(na,il),p(a,ht,o),g(Ea,a,o),p(a,ut,o),p(a,M,o),e(M,rl),e(M,ke),e(ke,pl),e(M,dl),e(M,xe),e(xe,ml),e(M,cl),p(a,gt,o),g(ya,a,o),p(a,_t,o),p(a,W,o),e(W,ia),e(ia,Ie),g(ka,Ie,null),e(W,fl),e(W,Pe),e(Pe,hl),p(a,jt,o),p(a,ra,o),e(ra,ul),e(ra,Ce),e(Ce,gl),e(ra,_l),p(a,$t,o),g(xa,a,o),p(a,qt,o),p(a,R,o),e(R,jl),e(R,De),e(De,$l),e(R,ql),e(R,Fe),e(Fe,vl),e(R,bl),p(a,vt,o),g(Ia,a,o),bt=!0},p(a,[o]){const Pa={};o&2&&(Pa.$$scope={dirty:o,ctx:a}),K.$set(Pa);const Ae={};o&2&&(Ae.$$scope={dirty:o,ctx:a}),Q.$set(Ae)},i(a){bt||(_(b.$$.fragment,a),_(K.$$.fragment,a),_(pa.$$.fragment,a),_(Q.$$.fragment,a),_(da.$$.fragment,a),_(ma.$$.fragment,a),_(ca.$$.fragment,a),_(fa.$$.fragment,a),_(ha.$$.fragment,a),_(ua.$$.fragment,a),_(ga.$$.fragment,a),_(_a.$$.fragment,a),_(ja.$$.fragment,a),_($a.$$.fragment,a),_(qa.$$.fragment,a),_(va.$$.fragment,a),_(ba.$$.fragment,a),_(wa.$$.fragment,a),_(Ea.$$.fragment,a),_(ya.$$.fragment,a),_(ka.$$.fragment,a),_(xa.$$.fragment,a),_(Ia.$$.fragment,a),bt=!0)},o(a){j(b.$$.fragment,a),j(K.$$.fragment,a),j(pa.$$.fragment,a),j(Q.$$.fragment,a),j(da.$$.fragment,a),j(ma.$$.fragment,a),j(ca.$$.fragment,a),j(fa.$$.fragment,a),j(ha.$$.fragment,a),j(ua.$$.fragment,a),j(ga.$$.fragment,a),j(_a.$$.fragment,a),j(ja.$$.fragment,a),j($a.$$.fragment,a),j(qa.$$.fragment,a),j(va.$$.fragment,a),j(ba.$$.fragment,a),j(wa.$$.fragment,a),j(Ea.$$.fragment,a),j(ya.$$.fragment,a),j(ka.$$.fragment,a),j(xa.$$.fragment,a),j(Ia.$$.fragment,a),bt=!1},d(a){t(f),a&&t(C),a&&t(v),$(b),a&&t(q),a&&t(x),a&&t(Oe),$(K,a),a&&t(Le),a&&t(A),a&&t(Te),$(pa,a),a&&t(Se),$(Q,a),a&&t(Be),a&&t(V),a&&t(Ne),a&&t(H),$(da),a&&t(Ye),a&&t(O),a&&t(Me),$(ma,a),a&&t(Re),a&&t(L),a&&t(ze),$(ca,a),a&&t(He),a&&t(G),$(fa),a&&t(Ge),a&&t(aa),a&&t(Ue),$(ha,a),a&&t(Je),a&&t(T),a&&t(We),$(ua,a),a&&t(Ke),a&&t(ea),a&&t(Qe),$(ga,a),a&&t(Ve),a&&t(y),a&&t(Xe),a&&t(U),$(_a),a&&t(Ze),a&&t(S),a&&t(at),$(ja,a),a&&t(et),a&&t(B),a&&t(tt),$($a,a),a&&t(st),a&&t(sa),a&&t(lt),a&&t(Sa),a&&t(ot),$(qa,a),a&&t(nt),a&&t(la),a&&t(it),$(va,a),a&&t(rt),a&&t(Ba),a&&t(pt),$(ba,a),a&&t(dt),a&&t(N),a&&t(mt),a&&t(Y),a&&t(ct),a&&t(J),$(wa),a&&t(ft),a&&t(na),a&&t(ht),$(Ea,a),a&&t(ut),a&&t(M),a&&t(gt),$(ya,a),a&&t(_t),a&&t(W),$(ka),a&&t(jt),a&&t(ra),a&&t($t),$(xa,a),a&&t(qt),a&&t(R),a&&t(vt),$(Ia,a)}}}const Do={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function Fo(Ca){return xo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class So extends wo{constructor(f){super();Eo(this,f,Fo,Co,yo,{})}}export{So as default,Do as metadata};
