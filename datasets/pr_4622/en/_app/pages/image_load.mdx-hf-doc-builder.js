import{S as So,i as No,s as Bo,e as n,k as d,w as h,t as s,M as Yo,c as i,d as t,m,a as r,x as u,h as l,b as c,G as e,g as p,y as g,q as _,o as j,B as $,v as Mo}from"../chunks/vendor-hf-doc-builder.js";import{T as To}from"../chunks/Tip-hf-doc-builder.js";import{I as Xa}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function Ho(Oa){let f,C,v,E,I,b,D,P;return{c(){f=n("p"),C=s("To work with image datasets, you need to have the "),v=n("code"),E=s("vision"),I=s(" dependency installed. Check out the "),b=n("a"),D=s("installation"),P=s(" guide to learn how to install it."),this.h()},l(y){f=i(y,"P",{});var q=r(f);C=l(q,"To work with image datasets, you need to have the "),v=i(q,"CODE",{});var x=r(v);E=l(x,"vision"),x.forEach(t),I=l(q," dependency installed. Check out the "),b=i(q,"A",{href:!0});var z=r(b);D=l(z,"installation"),z.forEach(t),P=l(q," guide to learn how to install it."),q.forEach(t),this.h()},h(){c(b,"href","./installation#vision")},m(y,q){p(y,f,q),e(f,C),e(f,v),e(v,E),e(f,I),e(f,b),e(b,D),e(f,P)},d(y){y&&t(f)}}}function Ro(Oa){let f,C,v,E,I,b,D,P;return{c(){f=n("p"),C=s("Index into an image dataset using the row index first and then the "),v=n("code"),E=s("image"),I=s(" column - "),b=n("code"),D=s('dataset[0]["image"]'),P=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(y){f=i(y,"P",{});var q=r(f);C=l(q,"Index into an image dataset using the row index first and then the "),v=i(q,"CODE",{});var x=r(v);E=l(x,"image"),x.forEach(t),I=l(q," column - "),b=i(q,"CODE",{});var z=r(b);D=l(z,'dataset[0]["image"]'),z.forEach(t),P=l(q," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),q.forEach(t)},m(y,q){p(y,f,q),e(f,C),e(f,v),e(v,E),e(f,I),e(f,b),e(b,D),e(f,P)},d(y){y&&t(f)}}}function zo(Oa){let f,C,v,E,I,b,D,P,y,q,x,z,Za,Rt,zt,Be,Q,Ye,F,Ut,ae,Gt,Jt,Fa,Wt,Kt,Me,da,He,V,Re,X,Qt,Aa,Vt,Xt,ze,U,Z,ee,ma,Zt,te,as,Ue,A,es,La,ts,ss,Ta,ls,os,Ge,ca,Je,L,ns,se,is,rs,Sa,ps,ds,We,fa,Ke,G,aa,le,ha,ms,oe,cs,Qe,ea,fs,ne,hs,us,Ve,ua,Xe,T,gs,ie,_s,js,re,$s,qs,Ze,ga,at,ta,vs,pe,bs,Es,et,_a,tt,k,de,ws,ys,me,ks,xs,ce,Is,Ps,fe,Cs,Ds,Na,Os,Fs,st,J,sa,he,ja,As,ue,Ls,lt,S,Ts,ge,Ss,Ns,_e,Bs,Ys,ot,$a,nt,N,Ms,je,Hs,Rs,$e,zs,Us,it,qa,rt,B,Gs,qe,Js,Ws,ve,Ks,Qs,pt,va,dt,la,Vs,be,Xs,Zs,mt,Ba,al,ct,ba,ft,oa,el,Ee,tl,sl,ht,Ea,ut,Ya,ll,gt,wa,_t,Y,ol,we,nl,il,ye,rl,pl,jt,M,dl,ke,ml,cl,xe,fl,hl,$t,W,na,Ie,ya,ul,Pe,gl,qt,ia,_l,Ce,jl,$l,vt,ka,bt,H,ql,De,vl,bl,Oe,El,wl,Et,xa,wt,K,ra,Fe,Ia,yl,Ae,kl,yt,pa,xl,Le,Il,Pl,kt,Pa,xt,R,Cl,Te,Dl,Ol,Se,Fl,Al,It,Ca,Pt;return b=new Xa({}),Q=new To({props:{$$slots:{default:[Ho]},$$scope:{ctx:Oa}}}),da=new w({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),V=new To({props:{warning:!0,$$slots:{default:[Ro]},$$scope:{ctx:Oa}}}),ma=new Xa({}),ca=new w({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),fa=new w({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),ha=new Xa({}),ua=new w({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ga=new w({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),_a=new w({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ja=new Xa({}),$a=new w({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),qa=new w({props:{code:`{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a first value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a second value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a third value of a text feature you added to your images&quot;</span>}`}}),va=new w({props:{code:'dataset = load_dataset("imagefolder", data_dir="/path/to/folder", file_path="/path/to/folder/train/metadata.jsonl", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, file_path=<span class="hljs-string">&quot;/path/to/folder/train/metadata.jsonl&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ba=new w({props:{code:`folder/train/metadata.jsonl
folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png`}}),Ea=new w({props:{code:`{"file_name": "dog/golden_retriever.png", "text": "This is a golden retriever"}
{"file_name": "dog/german_shepherd.png", "text": "This is a german shepherd"}
{"file_name": "cat/bengal.png", "text": "This is a bengal cat"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;dog/golden_retriever.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;dog/german_shepherd.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;cat/bengal.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a bengal cat&quot;</span>}`}}),wa=new w({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", drop_labels=False, split="train")
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, drop_labels=<span class="hljs-literal">False</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480 at <span class="hljs-number">0x7F5182C7AD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;This is a golden retriever&quot;</span>}`}}),ya=new Xa({}),ka=new w({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),xa=new w({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),Ia=new Xa({}),Pa=new w({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),Ca=new w({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){f=n("meta"),C=d(),v=n("h1"),E=n("a"),I=n("span"),h(b.$$.fragment),D=d(),P=n("span"),y=s("Load image data"),q=d(),x=n("p"),z=s("Image datasets are loaded from the "),Za=n("code"),Rt=s("image"),zt=s(" column, which contains a PIL object."),Be=d(),h(Q.$$.fragment),Ye=d(),F=n("p"),Ut=s("When you load an image dataset and call the "),ae=n("code"),Gt=s("image"),Jt=s(" column, the "),Fa=n("a"),Wt=s("Image"),Kt=s(" feature automatically decodes the PIL object into an image:"),Me=d(),h(da.$$.fragment),He=d(),h(V.$$.fragment),Re=d(),X=n("p"),Qt=s("For a guide on how to load any type of dataset, take a look at the "),Aa=n("a"),Vt=s("general loading guide"),Xt=s("."),ze=d(),U=n("h2"),Z=n("a"),ee=n("span"),h(ma.$$.fragment),Zt=d(),te=n("span"),as=s("Local files"),Ue=d(),A=n("p"),es=s("You can load a dataset from the image path. Use the "),La=n("a"),ts=s("cast_column()"),ss=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),Ta=n("a"),ls=s("Image"),os=s(" feature:"),Ge=d(),h(ca.$$.fragment),Je=d(),L=n("p"),ns=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),se=n("code"),is=s("decode=False"),rs=s(" in the "),Sa=n("a"),ps=s("Image"),ds=s(" feature:"),We=d(),h(fa.$$.fragment),Ke=d(),G=n("h2"),aa=n("a"),le=n("span"),h(ha.$$.fragment),ms=d(),oe=n("span"),cs=s("ImageFolder"),Qe=d(),ea=n("p"),fs=s("You can also load a dataset with a "),ne=n("code"),hs=s("ImageFolder"),us=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Ve=d(),h(ua.$$.fragment),Xe=d(),T=n("p"),gs=s("Load your dataset by specifying "),ie=n("code"),_s=s("imagefolder"),js=s(" and the directory of your dataset in "),re=n("code"),$s=s("data_dir"),qs=s(":"),Ze=d(),h(ga.$$.fragment),at=d(),ta=n("p"),vs=s("Load remote datasets from their URLs with the "),pe=n("code"),bs=s("data_files"),Es=s(" parameter:"),et=d(),h(_a.$$.fragment),tt=d(),k=n("p"),de=n("code"),ws=s("ImageFolder"),ys=s(" creates a "),me=n("code"),ks=s("label"),xs=s(" column, and the label name is based on the directory name. To ignore the "),ce=n("code"),Is=s("label"),Ps=s(" column, set "),fe=n("code"),Cs=s("drop_labels=False"),Ds=s(" as defined in "),Na=n("a"),Os=s("ImageFolderConfig"),Fs=s("."),st=d(),J=n("h2"),sa=n("a"),he=n("span"),h(ja.$$.fragment),As=d(),ue=n("span"),Ls=s("ImageFolder with metadata"),lt=d(),S=n("p"),Ts=s("Metadata associated with your dataset can also be loaded, extending the utility of "),ge=n("code"),Ss=s("ImageFolder"),Ns=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),_e=n("code"),Bs=s("metadata.jsonl"),Ys=s(" file:"),ot=d(),h($a.$$.fragment),nt=d(),N=n("p"),Ms=s("Your "),je=n("code"),Hs=s("metadata.jsonl"),Rs=s(" file must have a "),$e=n("code"),zs=s('"file_name"'),Us=s(" column which links image files with their metadata:"),it=d(),h(qa.$$.fragment),rt=d(),B=n("p"),Gs=s("Link the metadata in "),qe=n("code"),Js=s("metadata.jsonl"),Ws=s(" file to the images using the "),ve=n("code"),Ks=s("file_path"),Qs=s(" parameter:"),pt=d(),h(va.$$.fragment),dt=d(),la=n("p"),Vs=s("If you want to both extract labels from directories names and use information from metadata files, set "),be=n("code"),Xs=s("drop_labels=False"),Zs=s(`.
By default, if metadata files are present, inferring labels based on the directory name is skipped.`),mt=d(),Ba=n("p"),al=s("If you have data structure like this:"),ct=d(),h(ba.$$.fragment),ft=d(),oa=n("p"),el=s("and "),Ee=n("code"),tl=s("metadata.jsonl"),sl=s(" file looks like:"),ht=d(),h(Ea.$$.fragment),ut=d(),Ya=n("p"),ll=s("You can use both features from metadata and labels from filenames:"),gt=d(),h(wa.$$.fragment),_t=d(),Y=n("p"),ol=s("Alternatively, you can add "),we=n("code"),nl=s('"label"'),il=s(" field to your "),ye=n("code"),rl=s("metadata.jsonl"),pl=s("."),jt=d(),M=n("p"),dl=s("If you have any metadata files in your data directory, like in example above, but want to ignore them and only add labels extracted from the directories names, set "),ke=n("code"),ml=s("drop_metadata=True"),cl=s(" and "),xe=n("code"),fl=s("drop_labels=False"),hl=s("."),$t=d(),W=n("h3"),na=n("a"),Ie=n("span"),h(ya.$$.fragment),ul=d(),Pe=n("span"),gl=s("Image captioning"),qt=d(),ia=n("p"),_l=s("Image captioning datasets have text describing an image. An example "),Ce=n("code"),jl=s("metadata.jsonl"),$l=s(" may look like:"),vt=d(),h(ka.$$.fragment),bt=d(),H=n("p"),ql=s("Load the dataset with "),De=n("code"),vl=s("ImageFolder"),bl=s(", and it will create a "),Oe=n("code"),El=s("text"),wl=s(" column for the image captions:"),Et=d(),h(xa.$$.fragment),wt=d(),K=n("h3"),ra=n("a"),Fe=n("span"),h(Ia.$$.fragment),yl=d(),Ae=n("span"),kl=s("Object detection"),yt=d(),pa=n("p"),xl=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Le=n("code"),Il=s("metadata.jsonl"),Pl=s(" may look like:"),kt=d(),h(Pa.$$.fragment),xt=d(),R=n("p"),Cl=s("Load the dataset with "),Te=n("code"),Dl=s("ImageFolder"),Ol=s(", and it will create a "),Se=n("code"),Fl=s("objects"),Al=s(" column with the bounding boxes and the categories:"),It=d(),h(Ca.$$.fragment),this.h()},l(a){const o=Yo('[data-svelte="svelte-1phssyn"]',document.head);f=i(o,"META",{name:!0,content:!0}),o.forEach(t),C=m(a),v=i(a,"H1",{class:!0});var Da=r(v);E=i(Da,"A",{id:!0,class:!0,href:!0});var Ne=r(E);I=i(Ne,"SPAN",{});var Ll=r(I);u(b.$$.fragment,Ll),Ll.forEach(t),Ne.forEach(t),D=m(Da),P=i(Da,"SPAN",{});var Tl=r(P);y=l(Tl,"Load image data"),Tl.forEach(t),Da.forEach(t),q=m(a),x=i(a,"P",{});var Ct=r(x);z=l(Ct,"Image datasets are loaded from the "),Za=i(Ct,"CODE",{});var Sl=r(Za);Rt=l(Sl,"image"),Sl.forEach(t),zt=l(Ct," column, which contains a PIL object."),Ct.forEach(t),Be=m(a),u(Q.$$.fragment,a),Ye=m(a),F=i(a,"P",{});var Ma=r(F);Ut=l(Ma,"When you load an image dataset and call the "),ae=i(Ma,"CODE",{});var Nl=r(ae);Gt=l(Nl,"image"),Nl.forEach(t),Jt=l(Ma," column, the "),Fa=i(Ma,"A",{href:!0});var Bl=r(Fa);Wt=l(Bl,"Image"),Bl.forEach(t),Kt=l(Ma," feature automatically decodes the PIL object into an image:"),Ma.forEach(t),Me=m(a),u(da.$$.fragment,a),He=m(a),u(V.$$.fragment,a),Re=m(a),X=i(a,"P",{});var Dt=r(X);Qt=l(Dt,"For a guide on how to load any type of dataset, take a look at the "),Aa=i(Dt,"A",{href:!0});var Yl=r(Aa);Vt=l(Yl,"general loading guide"),Yl.forEach(t),Xt=l(Dt,"."),Dt.forEach(t),ze=m(a),U=i(a,"H2",{class:!0});var Ot=r(U);Z=i(Ot,"A",{id:!0,class:!0,href:!0});var Ml=r(Z);ee=i(Ml,"SPAN",{});var Hl=r(ee);u(ma.$$.fragment,Hl),Hl.forEach(t),Ml.forEach(t),Zt=m(Ot),te=i(Ot,"SPAN",{});var Rl=r(te);as=l(Rl,"Local files"),Rl.forEach(t),Ot.forEach(t),Ue=m(a),A=i(a,"P",{});var Ha=r(A);es=l(Ha,"You can load a dataset from the image path. Use the "),La=i(Ha,"A",{href:!0});var zl=r(La);ts=l(zl,"cast_column()"),zl.forEach(t),ss=l(Ha," function to accept a column of image file paths, and decode it into a PIL image with the "),Ta=i(Ha,"A",{href:!0});var Ul=r(Ta);ls=l(Ul,"Image"),Ul.forEach(t),os=l(Ha," feature:"),Ha.forEach(t),Ge=m(a),u(ca.$$.fragment,a),Je=m(a),L=i(a,"P",{});var Ra=r(L);ns=l(Ra,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),se=i(Ra,"CODE",{});var Gl=r(se);is=l(Gl,"decode=False"),Gl.forEach(t),rs=l(Ra," in the "),Sa=i(Ra,"A",{href:!0});var Jl=r(Sa);ps=l(Jl,"Image"),Jl.forEach(t),ds=l(Ra," feature:"),Ra.forEach(t),We=m(a),u(fa.$$.fragment,a),Ke=m(a),G=i(a,"H2",{class:!0});var Ft=r(G);aa=i(Ft,"A",{id:!0,class:!0,href:!0});var Wl=r(aa);le=i(Wl,"SPAN",{});var Kl=r(le);u(ha.$$.fragment,Kl),Kl.forEach(t),Wl.forEach(t),ms=m(Ft),oe=i(Ft,"SPAN",{});var Ql=r(oe);cs=l(Ql,"ImageFolder"),Ql.forEach(t),Ft.forEach(t),Qe=m(a),ea=i(a,"P",{});var At=r(ea);fs=l(At,"You can also load a dataset with a "),ne=i(At,"CODE",{});var Vl=r(ne);hs=l(Vl,"ImageFolder"),Vl.forEach(t),us=l(At," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),At.forEach(t),Ve=m(a),u(ua.$$.fragment,a),Xe=m(a),T=i(a,"P",{});var za=r(T);gs=l(za,"Load your dataset by specifying "),ie=i(za,"CODE",{});var Xl=r(ie);_s=l(Xl,"imagefolder"),Xl.forEach(t),js=l(za," and the directory of your dataset in "),re=i(za,"CODE",{});var Zl=r(re);$s=l(Zl,"data_dir"),Zl.forEach(t),qs=l(za,":"),za.forEach(t),Ze=m(a),u(ga.$$.fragment,a),at=m(a),ta=i(a,"P",{});var Lt=r(ta);vs=l(Lt,"Load remote datasets from their URLs with the "),pe=i(Lt,"CODE",{});var ao=r(pe);bs=l(ao,"data_files"),ao.forEach(t),Es=l(Lt," parameter:"),Lt.forEach(t),et=m(a),u(_a.$$.fragment,a),tt=m(a),k=i(a,"P",{});var O=r(k);de=i(O,"CODE",{});var eo=r(de);ws=l(eo,"ImageFolder"),eo.forEach(t),ys=l(O," creates a "),me=i(O,"CODE",{});var to=r(me);ks=l(to,"label"),to.forEach(t),xs=l(O," column, and the label name is based on the directory name. To ignore the "),ce=i(O,"CODE",{});var so=r(ce);Is=l(so,"label"),so.forEach(t),Ps=l(O," column, set "),fe=i(O,"CODE",{});var lo=r(fe);Cs=l(lo,"drop_labels=False"),lo.forEach(t),Ds=l(O," as defined in "),Na=i(O,"A",{href:!0});var oo=r(Na);Os=l(oo,"ImageFolderConfig"),oo.forEach(t),Fs=l(O,"."),O.forEach(t),st=m(a),J=i(a,"H2",{class:!0});var Tt=r(J);sa=i(Tt,"A",{id:!0,class:!0,href:!0});var no=r(sa);he=i(no,"SPAN",{});var io=r(he);u(ja.$$.fragment,io),io.forEach(t),no.forEach(t),As=m(Tt),ue=i(Tt,"SPAN",{});var ro=r(ue);Ls=l(ro,"ImageFolder with metadata"),ro.forEach(t),Tt.forEach(t),lt=m(a),S=i(a,"P",{});var Ua=r(S);Ts=l(Ua,"Metadata associated with your dataset can also be loaded, extending the utility of "),ge=i(Ua,"CODE",{});var po=r(ge);Ss=l(po,"ImageFolder"),po.forEach(t),Ns=l(Ua," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),_e=i(Ua,"CODE",{});var mo=r(_e);Bs=l(mo,"metadata.jsonl"),mo.forEach(t),Ys=l(Ua," file:"),Ua.forEach(t),ot=m(a),u($a.$$.fragment,a),nt=m(a),N=i(a,"P",{});var Ga=r(N);Ms=l(Ga,"Your "),je=i(Ga,"CODE",{});var co=r(je);Hs=l(co,"metadata.jsonl"),co.forEach(t),Rs=l(Ga," file must have a "),$e=i(Ga,"CODE",{});var fo=r($e);zs=l(fo,'"file_name"'),fo.forEach(t),Us=l(Ga," column which links image files with their metadata:"),Ga.forEach(t),it=m(a),u(qa.$$.fragment,a),rt=m(a),B=i(a,"P",{});var Ja=r(B);Gs=l(Ja,"Link the metadata in "),qe=i(Ja,"CODE",{});var ho=r(qe);Js=l(ho,"metadata.jsonl"),ho.forEach(t),Ws=l(Ja," file to the images using the "),ve=i(Ja,"CODE",{});var uo=r(ve);Ks=l(uo,"file_path"),uo.forEach(t),Qs=l(Ja," parameter:"),Ja.forEach(t),pt=m(a),u(va.$$.fragment,a),dt=m(a),la=i(a,"P",{});var St=r(la);Vs=l(St,"If you want to both extract labels from directories names and use information from metadata files, set "),be=i(St,"CODE",{});var go=r(be);Xs=l(go,"drop_labels=False"),go.forEach(t),Zs=l(St,`.
By default, if metadata files are present, inferring labels based on the directory name is skipped.`),St.forEach(t),mt=m(a),Ba=i(a,"P",{});var _o=r(Ba);al=l(_o,"If you have data structure like this:"),_o.forEach(t),ct=m(a),u(ba.$$.fragment,a),ft=m(a),oa=i(a,"P",{});var Nt=r(oa);el=l(Nt,"and "),Ee=i(Nt,"CODE",{});var jo=r(Ee);tl=l(jo,"metadata.jsonl"),jo.forEach(t),sl=l(Nt," file looks like:"),Nt.forEach(t),ht=m(a),u(Ea.$$.fragment,a),ut=m(a),Ya=i(a,"P",{});var $o=r(Ya);ll=l($o,"You can use both features from metadata and labels from filenames:"),$o.forEach(t),gt=m(a),u(wa.$$.fragment,a),_t=m(a),Y=i(a,"P",{});var Wa=r(Y);ol=l(Wa,"Alternatively, you can add "),we=i(Wa,"CODE",{});var qo=r(we);nl=l(qo,'"label"'),qo.forEach(t),il=l(Wa," field to your "),ye=i(Wa,"CODE",{});var vo=r(ye);rl=l(vo,"metadata.jsonl"),vo.forEach(t),pl=l(Wa,"."),Wa.forEach(t),jt=m(a),M=i(a,"P",{});var Ka=r(M);dl=l(Ka,"If you have any metadata files in your data directory, like in example above, but want to ignore them and only add labels extracted from the directories names, set "),ke=i(Ka,"CODE",{});var bo=r(ke);ml=l(bo,"drop_metadata=True"),bo.forEach(t),cl=l(Ka," and "),xe=i(Ka,"CODE",{});var Eo=r(xe);fl=l(Eo,"drop_labels=False"),Eo.forEach(t),hl=l(Ka,"."),Ka.forEach(t),$t=m(a),W=i(a,"H3",{class:!0});var Bt=r(W);na=i(Bt,"A",{id:!0,class:!0,href:!0});var wo=r(na);Ie=i(wo,"SPAN",{});var yo=r(Ie);u(ya.$$.fragment,yo),yo.forEach(t),wo.forEach(t),ul=m(Bt),Pe=i(Bt,"SPAN",{});var ko=r(Pe);gl=l(ko,"Image captioning"),ko.forEach(t),Bt.forEach(t),qt=m(a),ia=i(a,"P",{});var Yt=r(ia);_l=l(Yt,"Image captioning datasets have text describing an image. An example "),Ce=i(Yt,"CODE",{});var xo=r(Ce);jl=l(xo,"metadata.jsonl"),xo.forEach(t),$l=l(Yt," may look like:"),Yt.forEach(t),vt=m(a),u(ka.$$.fragment,a),bt=m(a),H=i(a,"P",{});var Qa=r(H);ql=l(Qa,"Load the dataset with "),De=i(Qa,"CODE",{});var Io=r(De);vl=l(Io,"ImageFolder"),Io.forEach(t),bl=l(Qa,", and it will create a "),Oe=i(Qa,"CODE",{});var Po=r(Oe);El=l(Po,"text"),Po.forEach(t),wl=l(Qa," column for the image captions:"),Qa.forEach(t),Et=m(a),u(xa.$$.fragment,a),wt=m(a),K=i(a,"H3",{class:!0});var Mt=r(K);ra=i(Mt,"A",{id:!0,class:!0,href:!0});var Co=r(ra);Fe=i(Co,"SPAN",{});var Do=r(Fe);u(Ia.$$.fragment,Do),Do.forEach(t),Co.forEach(t),yl=m(Mt),Ae=i(Mt,"SPAN",{});var Oo=r(Ae);kl=l(Oo,"Object detection"),Oo.forEach(t),Mt.forEach(t),yt=m(a),pa=i(a,"P",{});var Ht=r(pa);xl=l(Ht,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Le=i(Ht,"CODE",{});var Fo=r(Le);Il=l(Fo,"metadata.jsonl"),Fo.forEach(t),Pl=l(Ht," may look like:"),Ht.forEach(t),kt=m(a),u(Pa.$$.fragment,a),xt=m(a),R=i(a,"P",{});var Va=r(R);Cl=l(Va,"Load the dataset with "),Te=i(Va,"CODE",{});var Ao=r(Te);Dl=l(Ao,"ImageFolder"),Ao.forEach(t),Ol=l(Va,", and it will create a "),Se=i(Va,"CODE",{});var Lo=r(Se);Fl=l(Lo,"objects"),Lo.forEach(t),Al=l(Va," column with the bounding boxes and the categories:"),Va.forEach(t),It=m(a),u(Ca.$$.fragment,a),this.h()},h(){c(f,"name","hf:doc:metadata"),c(f,"content",JSON.stringify(Uo)),c(E,"id","load-image-data"),c(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E,"href","#load-image-data"),c(v,"class","relative group"),c(Fa,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),c(Aa,"href","./loading"),c(Z,"id","local-files"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#local-files"),c(U,"class","relative group"),c(La,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Dataset.cast_column"),c(Ta,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),c(Sa,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),c(aa,"id","imagefolder"),c(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aa,"href","#imagefolder"),c(G,"class","relative group"),c(Na,"href","/docs/datasets/pr_4622/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),c(sa,"id","imagefolder-with-metadata"),c(sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sa,"href","#imagefolder-with-metadata"),c(J,"class","relative group"),c(na,"id","image-captioning"),c(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(na,"href","#image-captioning"),c(W,"class","relative group"),c(ra,"id","object-detection"),c(ra,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ra,"href","#object-detection"),c(K,"class","relative group")},m(a,o){e(document.head,f),p(a,C,o),p(a,v,o),e(v,E),e(E,I),g(b,I,null),e(v,D),e(v,P),e(P,y),p(a,q,o),p(a,x,o),e(x,z),e(x,Za),e(Za,Rt),e(x,zt),p(a,Be,o),g(Q,a,o),p(a,Ye,o),p(a,F,o),e(F,Ut),e(F,ae),e(ae,Gt),e(F,Jt),e(F,Fa),e(Fa,Wt),e(F,Kt),p(a,Me,o),g(da,a,o),p(a,He,o),g(V,a,o),p(a,Re,o),p(a,X,o),e(X,Qt),e(X,Aa),e(Aa,Vt),e(X,Xt),p(a,ze,o),p(a,U,o),e(U,Z),e(Z,ee),g(ma,ee,null),e(U,Zt),e(U,te),e(te,as),p(a,Ue,o),p(a,A,o),e(A,es),e(A,La),e(La,ts),e(A,ss),e(A,Ta),e(Ta,ls),e(A,os),p(a,Ge,o),g(ca,a,o),p(a,Je,o),p(a,L,o),e(L,ns),e(L,se),e(se,is),e(L,rs),e(L,Sa),e(Sa,ps),e(L,ds),p(a,We,o),g(fa,a,o),p(a,Ke,o),p(a,G,o),e(G,aa),e(aa,le),g(ha,le,null),e(G,ms),e(G,oe),e(oe,cs),p(a,Qe,o),p(a,ea,o),e(ea,fs),e(ea,ne),e(ne,hs),e(ea,us),p(a,Ve,o),g(ua,a,o),p(a,Xe,o),p(a,T,o),e(T,gs),e(T,ie),e(ie,_s),e(T,js),e(T,re),e(re,$s),e(T,qs),p(a,Ze,o),g(ga,a,o),p(a,at,o),p(a,ta,o),e(ta,vs),e(ta,pe),e(pe,bs),e(ta,Es),p(a,et,o),g(_a,a,o),p(a,tt,o),p(a,k,o),e(k,de),e(de,ws),e(k,ys),e(k,me),e(me,ks),e(k,xs),e(k,ce),e(ce,Is),e(k,Ps),e(k,fe),e(fe,Cs),e(k,Ds),e(k,Na),e(Na,Os),e(k,Fs),p(a,st,o),p(a,J,o),e(J,sa),e(sa,he),g(ja,he,null),e(J,As),e(J,ue),e(ue,Ls),p(a,lt,o),p(a,S,o),e(S,Ts),e(S,ge),e(ge,Ss),e(S,Ns),e(S,_e),e(_e,Bs),e(S,Ys),p(a,ot,o),g($a,a,o),p(a,nt,o),p(a,N,o),e(N,Ms),e(N,je),e(je,Hs),e(N,Rs),e(N,$e),e($e,zs),e(N,Us),p(a,it,o),g(qa,a,o),p(a,rt,o),p(a,B,o),e(B,Gs),e(B,qe),e(qe,Js),e(B,Ws),e(B,ve),e(ve,Ks),e(B,Qs),p(a,pt,o),g(va,a,o),p(a,dt,o),p(a,la,o),e(la,Vs),e(la,be),e(be,Xs),e(la,Zs),p(a,mt,o),p(a,Ba,o),e(Ba,al),p(a,ct,o),g(ba,a,o),p(a,ft,o),p(a,oa,o),e(oa,el),e(oa,Ee),e(Ee,tl),e(oa,sl),p(a,ht,o),g(Ea,a,o),p(a,ut,o),p(a,Ya,o),e(Ya,ll),p(a,gt,o),g(wa,a,o),p(a,_t,o),p(a,Y,o),e(Y,ol),e(Y,we),e(we,nl),e(Y,il),e(Y,ye),e(ye,rl),e(Y,pl),p(a,jt,o),p(a,M,o),e(M,dl),e(M,ke),e(ke,ml),e(M,cl),e(M,xe),e(xe,fl),e(M,hl),p(a,$t,o),p(a,W,o),e(W,na),e(na,Ie),g(ya,Ie,null),e(W,ul),e(W,Pe),e(Pe,gl),p(a,qt,o),p(a,ia,o),e(ia,_l),e(ia,Ce),e(Ce,jl),e(ia,$l),p(a,vt,o),g(ka,a,o),p(a,bt,o),p(a,H,o),e(H,ql),e(H,De),e(De,vl),e(H,bl),e(H,Oe),e(Oe,El),e(H,wl),p(a,Et,o),g(xa,a,o),p(a,wt,o),p(a,K,o),e(K,ra),e(ra,Fe),g(Ia,Fe,null),e(K,yl),e(K,Ae),e(Ae,kl),p(a,yt,o),p(a,pa,o),e(pa,xl),e(pa,Le),e(Le,Il),e(pa,Pl),p(a,kt,o),g(Pa,a,o),p(a,xt,o),p(a,R,o),e(R,Cl),e(R,Te),e(Te,Dl),e(R,Ol),e(R,Se),e(Se,Fl),e(R,Al),p(a,It,o),g(Ca,a,o),Pt=!0},p(a,[o]){const Da={};o&2&&(Da.$$scope={dirty:o,ctx:a}),Q.$set(Da);const Ne={};o&2&&(Ne.$$scope={dirty:o,ctx:a}),V.$set(Ne)},i(a){Pt||(_(b.$$.fragment,a),_(Q.$$.fragment,a),_(da.$$.fragment,a),_(V.$$.fragment,a),_(ma.$$.fragment,a),_(ca.$$.fragment,a),_(fa.$$.fragment,a),_(ha.$$.fragment,a),_(ua.$$.fragment,a),_(ga.$$.fragment,a),_(_a.$$.fragment,a),_(ja.$$.fragment,a),_($a.$$.fragment,a),_(qa.$$.fragment,a),_(va.$$.fragment,a),_(ba.$$.fragment,a),_(Ea.$$.fragment,a),_(wa.$$.fragment,a),_(ya.$$.fragment,a),_(ka.$$.fragment,a),_(xa.$$.fragment,a),_(Ia.$$.fragment,a),_(Pa.$$.fragment,a),_(Ca.$$.fragment,a),Pt=!0)},o(a){j(b.$$.fragment,a),j(Q.$$.fragment,a),j(da.$$.fragment,a),j(V.$$.fragment,a),j(ma.$$.fragment,a),j(ca.$$.fragment,a),j(fa.$$.fragment,a),j(ha.$$.fragment,a),j(ua.$$.fragment,a),j(ga.$$.fragment,a),j(_a.$$.fragment,a),j(ja.$$.fragment,a),j($a.$$.fragment,a),j(qa.$$.fragment,a),j(va.$$.fragment,a),j(ba.$$.fragment,a),j(Ea.$$.fragment,a),j(wa.$$.fragment,a),j(ya.$$.fragment,a),j(ka.$$.fragment,a),j(xa.$$.fragment,a),j(Ia.$$.fragment,a),j(Pa.$$.fragment,a),j(Ca.$$.fragment,a),Pt=!1},d(a){t(f),a&&t(C),a&&t(v),$(b),a&&t(q),a&&t(x),a&&t(Be),$(Q,a),a&&t(Ye),a&&t(F),a&&t(Me),$(da,a),a&&t(He),$(V,a),a&&t(Re),a&&t(X),a&&t(ze),a&&t(U),$(ma),a&&t(Ue),a&&t(A),a&&t(Ge),$(ca,a),a&&t(Je),a&&t(L),a&&t(We),$(fa,a),a&&t(Ke),a&&t(G),$(ha),a&&t(Qe),a&&t(ea),a&&t(Ve),$(ua,a),a&&t(Xe),a&&t(T),a&&t(Ze),$(ga,a),a&&t(at),a&&t(ta),a&&t(et),$(_a,a),a&&t(tt),a&&t(k),a&&t(st),a&&t(J),$(ja),a&&t(lt),a&&t(S),a&&t(ot),$($a,a),a&&t(nt),a&&t(N),a&&t(it),$(qa,a),a&&t(rt),a&&t(B),a&&t(pt),$(va,a),a&&t(dt),a&&t(la),a&&t(mt),a&&t(Ba),a&&t(ct),$(ba,a),a&&t(ft),a&&t(oa),a&&t(ht),$(Ea,a),a&&t(ut),a&&t(Ya),a&&t(gt),$(wa,a),a&&t(_t),a&&t(Y),a&&t(jt),a&&t(M),a&&t($t),a&&t(W),$(ya),a&&t(qt),a&&t(ia),a&&t(vt),$(ka,a),a&&t(bt),a&&t(H),a&&t(Et),$(xa,a),a&&t(wt),a&&t(K),$(Ia),a&&t(yt),a&&t(pa),a&&t(kt),$(Pa,a),a&&t(xt),a&&t(R),a&&t(It),$(Ca,a)}}}const Uo={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function Go(Oa){return Mo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vo extends So{constructor(f){super();No(this,f,Go,zo,Bo,{})}}export{Vo as default,Uo as metadata};
