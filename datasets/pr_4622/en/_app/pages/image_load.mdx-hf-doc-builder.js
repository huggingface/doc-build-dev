import{S as to,i as so,s as lo,e as n,k as d,w as _,t as s,M as oo,c as i,d as t,m as c,a as r,x as j,h as l,b as f,G as e,g as p,y as $,q,o as b,B as v,v as no}from"../chunks/vendor-hf-doc-builder.js";import{T as il}from"../chunks/Tip-hf-doc-builder.js";import{I as Ua}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as D}from"../chunks/CodeBlock-hf-doc-builder.js";function io(K){let m,I,u,E,y,g,P,k;return{c(){m=n("p"),I=s("To work with image datasets, you need to have the "),u=n("code"),E=s("vision"),y=s(" dependency installed. Check out the "),g=n("a"),P=s("installation"),k=s(" guide to learn how to install it."),this.h()},l(w){m=i(w,"P",{});var h=r(m);I=l(h,"To work with image datasets, you need to have the "),u=i(h,"CODE",{});var x=r(u);E=l(x,"vision"),x.forEach(t),y=l(h," dependency installed. Check out the "),g=i(h,"A",{href:!0});var F=r(g);P=l(F,"installation"),F.forEach(t),k=l(h," guide to learn how to install it."),h.forEach(t),this.h()},h(){f(g,"href","./installation#vision")},m(w,h){p(w,m,h),e(m,I),e(m,u),e(u,E),e(m,y),e(m,g),e(g,P),e(m,k)},d(w){w&&t(m)}}}function ro(K){let m,I,u,E,y,g,P,k;return{c(){m=n("p"),I=s("Index into an image dataset using the row index first and then the "),u=n("code"),E=s("image"),y=s(" column - "),g=n("code"),P=s('dataset[0]["image"]'),k=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(w){m=i(w,"P",{});var h=r(m);I=l(h,"Index into an image dataset using the row index first and then the "),u=i(h,"CODE",{});var x=r(u);E=l(x,"image"),x.forEach(t),y=l(h," column - "),g=i(h,"CODE",{});var F=r(g);P=l(F,'dataset[0]["image"]'),F.forEach(t),k=l(h," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),h.forEach(t)},m(w,h){p(w,m,h),e(m,I),e(m,u),e(u,E),e(m,y),e(m,g),e(g,P),e(m,k)},d(w){w&&t(m)}}}function po(K){let m,I,u,E,y,g,P,k;return{c(){m=n("p"),I=s("If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=n("code"),E=s("drop_labels=False"),y=s(" in "),g=n("code"),P=s("load_dataset"),k=s(".")},l(w){m=i(w,"P",{});var h=r(m);I=l(h,"If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=i(h,"CODE",{});var x=r(u);E=l(x,"drop_labels=False"),x.forEach(t),y=l(h," in "),g=i(h,"CODE",{});var F=r(g);P=l(F,"load_dataset"),F.forEach(t),k=l(h,"."),h.forEach(t)},m(w,h){p(w,m,h),e(m,I),e(m,u),e(u,E),e(m,y),e(m,g),e(g,P),e(m,k)},d(w){w&&t(m)}}}function co(K){let m,I,u,E,y,g,P,k,w,h,x,F,Ja,xt,It,Ce,Q,De,O,Pt,Wa,Ct,Dt,Pa,Ft,At,Fe,pa,Ae,V,Oe,X,Ot,Ca,Lt,Tt,Le,H,Z,Ka,da,St,Qa,Nt,Te,L,Bt,Da,Yt,Mt,Fa,Rt,zt,Se,ca,Ne,T,Ht,Va,Gt,Ut,Aa,Jt,Wt,Be,ma,Ye,G,aa,Xa,fa,Kt,Za,Qt,Me,ea,Vt,ae,Xt,Zt,Re,ha,ze,S,as,ee,es,ts,te,ss,ls,He,ua,Ge,ta,os,se,ns,is,Ue,ga,Je,C,le,rs,ps,oe,ds,cs,ne,ms,fs,ie,hs,us,Oa,gs,_s,We,U,sa,re,_a,js,pe,$s,Ke,N,qs,de,bs,vs,ce,ws,Es,Qe,ja,Ve,B,ys,me,ks,xs,fe,Is,Ps,Xe,$a,Ze,la,at,qa,et,La,Cs,tt,ba,st,Y,Ds,he,Fs,As,ue,Os,Ls,lt,M,Ts,ge,Ss,Ns,_e,Bs,Ys,ot,J,oa,je,va,Ms,$e,Rs,nt,na,zs,qe,Hs,Gs,it,wa,rt,R,Us,be,Js,Ws,ve,Ks,Qs,pt,Ea,dt,W,ia,we,ya,Vs,Ee,Xs,ct,ra,Zs,ye,al,el,mt,ka,ft,z,tl,ke,sl,ll,xe,ol,nl,ht,xa,ut;return g=new Ua({}),Q=new il({props:{$$slots:{default:[io]},$$scope:{ctx:K}}}),pa=new D({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),V=new il({props:{warning:!0,$$slots:{default:[ro]},$$scope:{ctx:K}}}),da=new Ua({}),ca=new D({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),ma=new D({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),fa=new Ua({}),ha=new D({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ua=new D({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]

dataset["train"][-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][-<span class="hljs-number">1</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E8DAD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}`}}),ga=new D({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),_a=new Ua({}),ja=new D({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),$a=new D({props:{code:`{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a first value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a second value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a third value of a text feature you added to your images&quot;</span>}`}}),la=new il({props:{$$slots:{default:[po]},$$scope:{ctx:K}}}),qa=new D({props:{code:`{"file_name": "dog/golden_retriever.png", "text": "This is a golden retriever"}
{"file_name": "dog/german_shepherd.png", "text": "This is a german shepherd"}
{"file_name": "cat/bengal.png", "text": "This is a bengal cat"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;dog/golden_retriever.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;dog/german_shepherd.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;cat/bengal.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a bengal cat&quot;</span>}`}}),ba=new D({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", drop_labels=False, split="train")
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, drop_labels=<span class="hljs-literal">False</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480 at <span class="hljs-number">0x7F5182C7AD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;This is a golden retriever&quot;</span>}`}}),va=new Ua({}),wa=new D({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),Ea=new D({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),ya=new Ua({}),ka=new D({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),xa=new D({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){m=n("meta"),I=d(),u=n("h1"),E=n("a"),y=n("span"),_(g.$$.fragment),P=d(),k=n("span"),w=s("Load image data"),h=d(),x=n("p"),F=s("Image datasets are loaded from the "),Ja=n("code"),xt=s("image"),It=s(" column, which contains a PIL object."),Ce=d(),_(Q.$$.fragment),De=d(),O=n("p"),Pt=s("When you load an image dataset and call the "),Wa=n("code"),Ct=s("image"),Dt=s(" column, the "),Pa=n("a"),Ft=s("Image"),At=s(" feature automatically decodes the PIL object into an image:"),Fe=d(),_(pa.$$.fragment),Ae=d(),_(V.$$.fragment),Oe=d(),X=n("p"),Ot=s("For a guide on how to load any type of dataset, take a look at the "),Ca=n("a"),Lt=s("general loading guide"),Tt=s("."),Le=d(),H=n("h2"),Z=n("a"),Ka=n("span"),_(da.$$.fragment),St=d(),Qa=n("span"),Nt=s("Local files"),Te=d(),L=n("p"),Bt=s("You can load a dataset from the image path. Use the "),Da=n("a"),Yt=s("cast_column()"),Mt=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),Fa=n("a"),Rt=s("Image"),zt=s(" feature:"),Se=d(),_(ca.$$.fragment),Ne=d(),T=n("p"),Ht=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),Va=n("code"),Gt=s("decode=False"),Ut=s(" in the "),Aa=n("a"),Jt=s("Image"),Wt=s(" feature:"),Be=d(),_(ma.$$.fragment),Ye=d(),G=n("h2"),aa=n("a"),Xa=n("span"),_(fa.$$.fragment),Kt=d(),Za=n("span"),Qt=s("ImageFolder"),Me=d(),ea=n("p"),Vt=s("You can also load a dataset with a "),ae=n("code"),Xt=s("ImageFolder"),Zt=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Re=d(),_(ha.$$.fragment),ze=d(),S=n("p"),as=s("Load your dataset by specifying "),ee=n("code"),es=s("imagefolder"),ts=s(" and the directory of your dataset in "),te=n("code"),ss=s("data_dir"),ls=s(":"),He=d(),_(ua.$$.fragment),Ge=d(),ta=n("p"),os=s("Load remote datasets from their URLs with the "),se=n("code"),ns=s("data_files"),is=s(" parameter:"),Ue=d(),_(ga.$$.fragment),Je=d(),C=n("p"),le=n("code"),rs=s("ImageFolder"),ps=s(" creates a "),oe=n("code"),ds=s("label"),cs=s(" column, and the label name is based on the directory name. To ignore the "),ne=n("code"),ms=s("label"),fs=s(" column, set "),ie=n("code"),hs=s("drop_labels=False"),us=s(" as defined in "),Oa=n("a"),gs=s("ImageFolderConfig"),_s=s("."),We=d(),U=n("h2"),sa=n("a"),re=n("span"),_(_a.$$.fragment),js=d(),pe=n("span"),$s=s("ImageFolder with metadata"),Ke=d(),N=n("p"),qs=s("Metadata associated with your dataset can also be loaded, extending the utility of "),de=n("code"),bs=s("ImageFolder"),vs=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),ce=n("code"),ws=s("metadata.jsonl"),Es=s(" file:"),Qe=d(),_(ja.$$.fragment),Ve=d(),B=n("p"),ys=s("Your "),me=n("code"),ks=s("metadata.jsonl"),xs=s(" file must have a "),fe=n("code"),Is=s("file_name"),Ps=s(" column which links image files with their metadata:"),Xe=d(),_($a.$$.fragment),Ze=d(),_(la.$$.fragment),at=d(),_(qa.$$.fragment),et=d(),La=n("p"),Cs=s("you can use both features from metadata and labels from filenames:"),tt=d(),_(ba.$$.fragment),st=d(),Y=n("p"),Ds=s("Alternatively, you can add "),he=n("code"),Fs=s('"label"'),As=s(" field to your "),ue=n("code"),Os=s("metadata.jsonl"),Ls=s("."),lt=d(),M=n("p"),Ts=s("If you have any metadata files in your data directory, like in example above, but want to ignore them and only add labels extracted from the directories names, set "),ge=n("code"),Ss=s("drop_metadata=True"),Ns=s(" and "),_e=n("code"),Bs=s("drop_labels=False"),Ys=s("."),ot=d(),J=n("h3"),oa=n("a"),je=n("span"),_(va.$$.fragment),Ms=d(),$e=n("span"),Rs=s("Image captioning"),nt=d(),na=n("p"),zs=s("Image captioning datasets have text describing an image. An example "),qe=n("code"),Hs=s("metadata.jsonl"),Gs=s(" may look like:"),it=d(),_(wa.$$.fragment),rt=d(),R=n("p"),Us=s("Load the dataset with "),be=n("code"),Js=s("ImageFolder"),Ws=s(", and it will create a "),ve=n("code"),Ks=s("text"),Qs=s(" column for the image captions:"),pt=d(),_(Ea.$$.fragment),dt=d(),W=n("h3"),ia=n("a"),we=n("span"),_(ya.$$.fragment),Vs=d(),Ee=n("span"),Xs=s("Object detection"),ct=d(),ra=n("p"),Zs=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ye=n("code"),al=s("metadata.jsonl"),el=s(" may look like:"),mt=d(),_(ka.$$.fragment),ft=d(),z=n("p"),tl=s("Load the dataset with "),ke=n("code"),sl=s("ImageFolder"),ll=s(", and it will create a "),xe=n("code"),ol=s("objects"),nl=s(" column with the bounding boxes and the categories:"),ht=d(),_(xa.$$.fragment),this.h()},l(a){const o=oo('[data-svelte="svelte-1phssyn"]',document.head);m=i(o,"META",{name:!0,content:!0}),o.forEach(t),I=c(a),u=i(a,"H1",{class:!0});var Ia=r(u);E=i(Ia,"A",{id:!0,class:!0,href:!0});var Ie=r(E);y=i(Ie,"SPAN",{});var Pe=r(y);j(g.$$.fragment,Pe),Pe.forEach(t),Ie.forEach(t),P=c(Ia),k=i(Ia,"SPAN",{});var rl=r(k);w=l(rl,"Load image data"),rl.forEach(t),Ia.forEach(t),h=c(a),x=i(a,"P",{});var gt=r(x);F=l(gt,"Image datasets are loaded from the "),Ja=i(gt,"CODE",{});var pl=r(Ja);xt=l(pl,"image"),pl.forEach(t),It=l(gt," column, which contains a PIL object."),gt.forEach(t),Ce=c(a),j(Q.$$.fragment,a),De=c(a),O=i(a,"P",{});var Ta=r(O);Pt=l(Ta,"When you load an image dataset and call the "),Wa=i(Ta,"CODE",{});var dl=r(Wa);Ct=l(dl,"image"),dl.forEach(t),Dt=l(Ta," column, the "),Pa=i(Ta,"A",{href:!0});var cl=r(Pa);Ft=l(cl,"Image"),cl.forEach(t),At=l(Ta," feature automatically decodes the PIL object into an image:"),Ta.forEach(t),Fe=c(a),j(pa.$$.fragment,a),Ae=c(a),j(V.$$.fragment,a),Oe=c(a),X=i(a,"P",{});var _t=r(X);Ot=l(_t,"For a guide on how to load any type of dataset, take a look at the "),Ca=i(_t,"A",{href:!0});var ml=r(Ca);Lt=l(ml,"general loading guide"),ml.forEach(t),Tt=l(_t,"."),_t.forEach(t),Le=c(a),H=i(a,"H2",{class:!0});var jt=r(H);Z=i(jt,"A",{id:!0,class:!0,href:!0});var fl=r(Z);Ka=i(fl,"SPAN",{});var hl=r(Ka);j(da.$$.fragment,hl),hl.forEach(t),fl.forEach(t),St=c(jt),Qa=i(jt,"SPAN",{});var ul=r(Qa);Nt=l(ul,"Local files"),ul.forEach(t),jt.forEach(t),Te=c(a),L=i(a,"P",{});var Sa=r(L);Bt=l(Sa,"You can load a dataset from the image path. Use the "),Da=i(Sa,"A",{href:!0});var gl=r(Da);Yt=l(gl,"cast_column()"),gl.forEach(t),Mt=l(Sa," function to accept a column of image file paths, and decode it into a PIL image with the "),Fa=i(Sa,"A",{href:!0});var _l=r(Fa);Rt=l(_l,"Image"),_l.forEach(t),zt=l(Sa," feature:"),Sa.forEach(t),Se=c(a),j(ca.$$.fragment,a),Ne=c(a),T=i(a,"P",{});var Na=r(T);Ht=l(Na,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),Va=i(Na,"CODE",{});var jl=r(Va);Gt=l(jl,"decode=False"),jl.forEach(t),Ut=l(Na," in the "),Aa=i(Na,"A",{href:!0});var $l=r(Aa);Jt=l($l,"Image"),$l.forEach(t),Wt=l(Na," feature:"),Na.forEach(t),Be=c(a),j(ma.$$.fragment,a),Ye=c(a),G=i(a,"H2",{class:!0});var $t=r(G);aa=i($t,"A",{id:!0,class:!0,href:!0});var ql=r(aa);Xa=i(ql,"SPAN",{});var bl=r(Xa);j(fa.$$.fragment,bl),bl.forEach(t),ql.forEach(t),Kt=c($t),Za=i($t,"SPAN",{});var vl=r(Za);Qt=l(vl,"ImageFolder"),vl.forEach(t),$t.forEach(t),Me=c(a),ea=i(a,"P",{});var qt=r(ea);Vt=l(qt,"You can also load a dataset with a "),ae=i(qt,"CODE",{});var wl=r(ae);Xt=l(wl,"ImageFolder"),wl.forEach(t),Zt=l(qt," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),qt.forEach(t),Re=c(a),j(ha.$$.fragment,a),ze=c(a),S=i(a,"P",{});var Ba=r(S);as=l(Ba,"Load your dataset by specifying "),ee=i(Ba,"CODE",{});var El=r(ee);es=l(El,"imagefolder"),El.forEach(t),ts=l(Ba," and the directory of your dataset in "),te=i(Ba,"CODE",{});var yl=r(te);ss=l(yl,"data_dir"),yl.forEach(t),ls=l(Ba,":"),Ba.forEach(t),He=c(a),j(ua.$$.fragment,a),Ge=c(a),ta=i(a,"P",{});var bt=r(ta);os=l(bt,"Load remote datasets from their URLs with the "),se=i(bt,"CODE",{});var kl=r(se);ns=l(kl,"data_files"),kl.forEach(t),is=l(bt," parameter:"),bt.forEach(t),Ue=c(a),j(ga.$$.fragment,a),Je=c(a),C=i(a,"P",{});var A=r(C);le=i(A,"CODE",{});var xl=r(le);rs=l(xl,"ImageFolder"),xl.forEach(t),ps=l(A," creates a "),oe=i(A,"CODE",{});var Il=r(oe);ds=l(Il,"label"),Il.forEach(t),cs=l(A," column, and the label name is based on the directory name. To ignore the "),ne=i(A,"CODE",{});var Pl=r(ne);ms=l(Pl,"label"),Pl.forEach(t),fs=l(A," column, set "),ie=i(A,"CODE",{});var Cl=r(ie);hs=l(Cl,"drop_labels=False"),Cl.forEach(t),us=l(A," as defined in "),Oa=i(A,"A",{href:!0});var Dl=r(Oa);gs=l(Dl,"ImageFolderConfig"),Dl.forEach(t),_s=l(A,"."),A.forEach(t),We=c(a),U=i(a,"H2",{class:!0});var vt=r(U);sa=i(vt,"A",{id:!0,class:!0,href:!0});var Fl=r(sa);re=i(Fl,"SPAN",{});var Al=r(re);j(_a.$$.fragment,Al),Al.forEach(t),Fl.forEach(t),js=c(vt),pe=i(vt,"SPAN",{});var Ol=r(pe);$s=l(Ol,"ImageFolder with metadata"),Ol.forEach(t),vt.forEach(t),Ke=c(a),N=i(a,"P",{});var Ya=r(N);qs=l(Ya,"Metadata associated with your dataset can also be loaded, extending the utility of "),de=i(Ya,"CODE",{});var Ll=r(de);bs=l(Ll,"ImageFolder"),Ll.forEach(t),vs=l(Ya," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),ce=i(Ya,"CODE",{});var Tl=r(ce);ws=l(Tl,"metadata.jsonl"),Tl.forEach(t),Es=l(Ya," file:"),Ya.forEach(t),Qe=c(a),j(ja.$$.fragment,a),Ve=c(a),B=i(a,"P",{});var Ma=r(B);ys=l(Ma,"Your "),me=i(Ma,"CODE",{});var Sl=r(me);ks=l(Sl,"metadata.jsonl"),Sl.forEach(t),xs=l(Ma," file must have a "),fe=i(Ma,"CODE",{});var Nl=r(fe);Is=l(Nl,"file_name"),Nl.forEach(t),Ps=l(Ma," column which links image files with their metadata:"),Ma.forEach(t),Xe=c(a),j($a.$$.fragment,a),Ze=c(a),j(la.$$.fragment,a),at=c(a),j(qa.$$.fragment,a),et=c(a),La=i(a,"P",{});var Bl=r(La);Cs=l(Bl,"you can use both features from metadata and labels from filenames:"),Bl.forEach(t),tt=c(a),j(ba.$$.fragment,a),st=c(a),Y=i(a,"P",{});var Ra=r(Y);Ds=l(Ra,"Alternatively, you can add "),he=i(Ra,"CODE",{});var Yl=r(he);Fs=l(Yl,'"label"'),Yl.forEach(t),As=l(Ra," field to your "),ue=i(Ra,"CODE",{});var Ml=r(ue);Os=l(Ml,"metadata.jsonl"),Ml.forEach(t),Ls=l(Ra,"."),Ra.forEach(t),lt=c(a),M=i(a,"P",{});var za=r(M);Ts=l(za,"If you have any metadata files in your data directory, like in example above, but want to ignore them and only add labels extracted from the directories names, set "),ge=i(za,"CODE",{});var Rl=r(ge);Ss=l(Rl,"drop_metadata=True"),Rl.forEach(t),Ns=l(za," and "),_e=i(za,"CODE",{});var zl=r(_e);Bs=l(zl,"drop_labels=False"),zl.forEach(t),Ys=l(za,"."),za.forEach(t),ot=c(a),J=i(a,"H3",{class:!0});var wt=r(J);oa=i(wt,"A",{id:!0,class:!0,href:!0});var Hl=r(oa);je=i(Hl,"SPAN",{});var Gl=r(je);j(va.$$.fragment,Gl),Gl.forEach(t),Hl.forEach(t),Ms=c(wt),$e=i(wt,"SPAN",{});var Ul=r($e);Rs=l(Ul,"Image captioning"),Ul.forEach(t),wt.forEach(t),nt=c(a),na=i(a,"P",{});var Et=r(na);zs=l(Et,"Image captioning datasets have text describing an image. An example "),qe=i(Et,"CODE",{});var Jl=r(qe);Hs=l(Jl,"metadata.jsonl"),Jl.forEach(t),Gs=l(Et," may look like:"),Et.forEach(t),it=c(a),j(wa.$$.fragment,a),rt=c(a),R=i(a,"P",{});var Ha=r(R);Us=l(Ha,"Load the dataset with "),be=i(Ha,"CODE",{});var Wl=r(be);Js=l(Wl,"ImageFolder"),Wl.forEach(t),Ws=l(Ha,", and it will create a "),ve=i(Ha,"CODE",{});var Kl=r(ve);Ks=l(Kl,"text"),Kl.forEach(t),Qs=l(Ha," column for the image captions:"),Ha.forEach(t),pt=c(a),j(Ea.$$.fragment,a),dt=c(a),W=i(a,"H3",{class:!0});var yt=r(W);ia=i(yt,"A",{id:!0,class:!0,href:!0});var Ql=r(ia);we=i(Ql,"SPAN",{});var Vl=r(we);j(ya.$$.fragment,Vl),Vl.forEach(t),Ql.forEach(t),Vs=c(yt),Ee=i(yt,"SPAN",{});var Xl=r(Ee);Xs=l(Xl,"Object detection"),Xl.forEach(t),yt.forEach(t),ct=c(a),ra=i(a,"P",{});var kt=r(ra);Zs=l(kt,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ye=i(kt,"CODE",{});var Zl=r(ye);al=l(Zl,"metadata.jsonl"),Zl.forEach(t),el=l(kt," may look like:"),kt.forEach(t),mt=c(a),j(ka.$$.fragment,a),ft=c(a),z=i(a,"P",{});var Ga=r(z);tl=l(Ga,"Load the dataset with "),ke=i(Ga,"CODE",{});var ao=r(ke);sl=l(ao,"ImageFolder"),ao.forEach(t),ll=l(Ga,", and it will create a "),xe=i(Ga,"CODE",{});var eo=r(xe);ol=l(eo,"objects"),eo.forEach(t),nl=l(Ga," column with the bounding boxes and the categories:"),Ga.forEach(t),ht=c(a),j(xa.$$.fragment,a),this.h()},h(){f(m,"name","hf:doc:metadata"),f(m,"content",JSON.stringify(mo)),f(E,"id","load-image-data"),f(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(E,"href","#load-image-data"),f(u,"class","relative group"),f(Pa,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),f(Ca,"href","./loading"),f(Z,"id","local-files"),f(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Z,"href","#local-files"),f(H,"class","relative group"),f(Da,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Dataset.cast_column"),f(Fa,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),f(Aa,"href","/docs/datasets/pr_4622/en/package_reference/main_classes#datasets.Image"),f(aa,"id","imagefolder"),f(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(aa,"href","#imagefolder"),f(G,"class","relative group"),f(Oa,"href","/docs/datasets/pr_4622/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),f(sa,"id","imagefolder-with-metadata"),f(sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(sa,"href","#imagefolder-with-metadata"),f(U,"class","relative group"),f(oa,"id","image-captioning"),f(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oa,"href","#image-captioning"),f(J,"class","relative group"),f(ia,"id","object-detection"),f(ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ia,"href","#object-detection"),f(W,"class","relative group")},m(a,o){e(document.head,m),p(a,I,o),p(a,u,o),e(u,E),e(E,y),$(g,y,null),e(u,P),e(u,k),e(k,w),p(a,h,o),p(a,x,o),e(x,F),e(x,Ja),e(Ja,xt),e(x,It),p(a,Ce,o),$(Q,a,o),p(a,De,o),p(a,O,o),e(O,Pt),e(O,Wa),e(Wa,Ct),e(O,Dt),e(O,Pa),e(Pa,Ft),e(O,At),p(a,Fe,o),$(pa,a,o),p(a,Ae,o),$(V,a,o),p(a,Oe,o),p(a,X,o),e(X,Ot),e(X,Ca),e(Ca,Lt),e(X,Tt),p(a,Le,o),p(a,H,o),e(H,Z),e(Z,Ka),$(da,Ka,null),e(H,St),e(H,Qa),e(Qa,Nt),p(a,Te,o),p(a,L,o),e(L,Bt),e(L,Da),e(Da,Yt),e(L,Mt),e(L,Fa),e(Fa,Rt),e(L,zt),p(a,Se,o),$(ca,a,o),p(a,Ne,o),p(a,T,o),e(T,Ht),e(T,Va),e(Va,Gt),e(T,Ut),e(T,Aa),e(Aa,Jt),e(T,Wt),p(a,Be,o),$(ma,a,o),p(a,Ye,o),p(a,G,o),e(G,aa),e(aa,Xa),$(fa,Xa,null),e(G,Kt),e(G,Za),e(Za,Qt),p(a,Me,o),p(a,ea,o),e(ea,Vt),e(ea,ae),e(ae,Xt),e(ea,Zt),p(a,Re,o),$(ha,a,o),p(a,ze,o),p(a,S,o),e(S,as),e(S,ee),e(ee,es),e(S,ts),e(S,te),e(te,ss),e(S,ls),p(a,He,o),$(ua,a,o),p(a,Ge,o),p(a,ta,o),e(ta,os),e(ta,se),e(se,ns),e(ta,is),p(a,Ue,o),$(ga,a,o),p(a,Je,o),p(a,C,o),e(C,le),e(le,rs),e(C,ps),e(C,oe),e(oe,ds),e(C,cs),e(C,ne),e(ne,ms),e(C,fs),e(C,ie),e(ie,hs),e(C,us),e(C,Oa),e(Oa,gs),e(C,_s),p(a,We,o),p(a,U,o),e(U,sa),e(sa,re),$(_a,re,null),e(U,js),e(U,pe),e(pe,$s),p(a,Ke,o),p(a,N,o),e(N,qs),e(N,de),e(de,bs),e(N,vs),e(N,ce),e(ce,ws),e(N,Es),p(a,Qe,o),$(ja,a,o),p(a,Ve,o),p(a,B,o),e(B,ys),e(B,me),e(me,ks),e(B,xs),e(B,fe),e(fe,Is),e(B,Ps),p(a,Xe,o),$($a,a,o),p(a,Ze,o),$(la,a,o),p(a,at,o),$(qa,a,o),p(a,et,o),p(a,La,o),e(La,Cs),p(a,tt,o),$(ba,a,o),p(a,st,o),p(a,Y,o),e(Y,Ds),e(Y,he),e(he,Fs),e(Y,As),e(Y,ue),e(ue,Os),e(Y,Ls),p(a,lt,o),p(a,M,o),e(M,Ts),e(M,ge),e(ge,Ss),e(M,Ns),e(M,_e),e(_e,Bs),e(M,Ys),p(a,ot,o),p(a,J,o),e(J,oa),e(oa,je),$(va,je,null),e(J,Ms),e(J,$e),e($e,Rs),p(a,nt,o),p(a,na,o),e(na,zs),e(na,qe),e(qe,Hs),e(na,Gs),p(a,it,o),$(wa,a,o),p(a,rt,o),p(a,R,o),e(R,Us),e(R,be),e(be,Js),e(R,Ws),e(R,ve),e(ve,Ks),e(R,Qs),p(a,pt,o),$(Ea,a,o),p(a,dt,o),p(a,W,o),e(W,ia),e(ia,we),$(ya,we,null),e(W,Vs),e(W,Ee),e(Ee,Xs),p(a,ct,o),p(a,ra,o),e(ra,Zs),e(ra,ye),e(ye,al),e(ra,el),p(a,mt,o),$(ka,a,o),p(a,ft,o),p(a,z,o),e(z,tl),e(z,ke),e(ke,sl),e(z,ll),e(z,xe),e(xe,ol),e(z,nl),p(a,ht,o),$(xa,a,o),ut=!0},p(a,[o]){const Ia={};o&2&&(Ia.$$scope={dirty:o,ctx:a}),Q.$set(Ia);const Ie={};o&2&&(Ie.$$scope={dirty:o,ctx:a}),V.$set(Ie);const Pe={};o&2&&(Pe.$$scope={dirty:o,ctx:a}),la.$set(Pe)},i(a){ut||(q(g.$$.fragment,a),q(Q.$$.fragment,a),q(pa.$$.fragment,a),q(V.$$.fragment,a),q(da.$$.fragment,a),q(ca.$$.fragment,a),q(ma.$$.fragment,a),q(fa.$$.fragment,a),q(ha.$$.fragment,a),q(ua.$$.fragment,a),q(ga.$$.fragment,a),q(_a.$$.fragment,a),q(ja.$$.fragment,a),q($a.$$.fragment,a),q(la.$$.fragment,a),q(qa.$$.fragment,a),q(ba.$$.fragment,a),q(va.$$.fragment,a),q(wa.$$.fragment,a),q(Ea.$$.fragment,a),q(ya.$$.fragment,a),q(ka.$$.fragment,a),q(xa.$$.fragment,a),ut=!0)},o(a){b(g.$$.fragment,a),b(Q.$$.fragment,a),b(pa.$$.fragment,a),b(V.$$.fragment,a),b(da.$$.fragment,a),b(ca.$$.fragment,a),b(ma.$$.fragment,a),b(fa.$$.fragment,a),b(ha.$$.fragment,a),b(ua.$$.fragment,a),b(ga.$$.fragment,a),b(_a.$$.fragment,a),b(ja.$$.fragment,a),b($a.$$.fragment,a),b(la.$$.fragment,a),b(qa.$$.fragment,a),b(ba.$$.fragment,a),b(va.$$.fragment,a),b(wa.$$.fragment,a),b(Ea.$$.fragment,a),b(ya.$$.fragment,a),b(ka.$$.fragment,a),b(xa.$$.fragment,a),ut=!1},d(a){t(m),a&&t(I),a&&t(u),v(g),a&&t(h),a&&t(x),a&&t(Ce),v(Q,a),a&&t(De),a&&t(O),a&&t(Fe),v(pa,a),a&&t(Ae),v(V,a),a&&t(Oe),a&&t(X),a&&t(Le),a&&t(H),v(da),a&&t(Te),a&&t(L),a&&t(Se),v(ca,a),a&&t(Ne),a&&t(T),a&&t(Be),v(ma,a),a&&t(Ye),a&&t(G),v(fa),a&&t(Me),a&&t(ea),a&&t(Re),v(ha,a),a&&t(ze),a&&t(S),a&&t(He),v(ua,a),a&&t(Ge),a&&t(ta),a&&t(Ue),v(ga,a),a&&t(Je),a&&t(C),a&&t(We),a&&t(U),v(_a),a&&t(Ke),a&&t(N),a&&t(Qe),v(ja,a),a&&t(Ve),a&&t(B),a&&t(Xe),v($a,a),a&&t(Ze),v(la,a),a&&t(at),v(qa,a),a&&t(et),a&&t(La),a&&t(tt),v(ba,a),a&&t(st),a&&t(Y),a&&t(lt),a&&t(M),a&&t(ot),a&&t(J),v(va),a&&t(nt),a&&t(na),a&&t(it),v(wa,a),a&&t(rt),a&&t(R),a&&t(pt),v(Ea,a),a&&t(dt),a&&t(W),v(ya),a&&t(ct),a&&t(ra),a&&t(mt),v(ka,a),a&&t(ft),a&&t(z),a&&t(ht),v(xa,a)}}}const mo={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function fo(K){return no(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jo extends to{constructor(m){super();so(this,m,fo,co,lo,{})}}export{jo as default,mo as metadata};
