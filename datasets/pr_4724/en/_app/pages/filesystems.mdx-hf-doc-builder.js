import{S as Cr,i as Pr,s as Nr,e as a,k as d,w as u,t as i,M as Or,c as o,d as e,m as f,a as l,x as h,h as p,b as c,G as s,g as n,y as g,q as m,o as _,B as v,v as Fr}from"../chunks/vendor-hf-doc-builder.js";import{T as Ir}from"../chunks/Tip-hf-doc-builder.js";import{I as D}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function xr(rs){let y,Y,$,k,z,E,dt,C;return{c(){y=a("p"),Y=i("Remember to define your credentials in your "),$=a("a"),k=i("FileSystem instance"),z=d(),E=a("code"),dt=i("fs"),C=i(" whenever you are interacting with a private cloud storage."),this.h()},l(P){y=o(P,"P",{});var b=l(y);Y=p(b,"Remember to define your credentials in your "),$=o(b,"A",{href:!0});var A=l($);k=p(A,"FileSystem instance"),A.forEach(e),z=f(b),E=o(b,"CODE",{});var Zt=l(E);dt=p(Zt,"fs"),Zt.forEach(e),C=p(b," whenever you are interacting with a private cloud storage."),b.forEach(e),this.h()},h(){c($,"href","#set-up-your-cloud-storage-filesystem")},m(P,b){n(P,y,b),s(y,Y),s(y,$),s($,k),s(y,z),s(y,E),s(E,dt),s(y,C)},d(P){P&&e(y)}}}function Hr(rs){let y,Y,$,k,z,E,dt,C,P,b,A,Zt,de,Ea,ba,ns,M,fe,ft,ce,ja,ka,ue,Sa,qa,j,ct,he,Aa,La,ge,ut,Ta,Da,ht,me,za,Ca,_e,gt,Pa,Na,mt,ve,Oa,Fa,ye,_t,Ia,xa,vt,$e,Ha,Ba,we,yt,Ga,Ra,$t,Ee,Ya,Ma,be,wt,Ua,is,te,Ka,ps,N,U,je,Et,Wa,ke,Ja,ds,O,K,Se,bt,Qa,qe,Va,fs,ee,Ae,Xa,cs,jt,us,kt,Le,Za,hs,S,to,Te,eo,so,De,ao,oo,ze,lo,ro,gs,St,ms,qt,Ce,no,_s,At,vs,F,W,Pe,Lt,io,Ne,po,ys,se,Oe,fo,$s,Tt,ws,Dt,Fe,co,Es,zt,bs,Ct,Ie,uo,js,Pt,ks,I,J,xe,Nt,ho,He,go,Ss,ae,Be,mo,qs,Ot,As,Ft,Ge,_o,Ls,It,Ts,xt,Re,vo,Ds,Ht,zs,x,Q,Ye,Bt,yo,Me,$o,Cs,H,V,Ue,Gt,wo,Ke,Eo,Ps,q,bo,We,jo,ko,Je,So,qo,Qe,Ao,Lo,Ns,X,To,oe,Do,zo,Os,Rt,Fs,Z,Co,le,Po,No,Is,Yt,xs,tt,Oo,re,Fo,Io,Hs,Mt,Bs,et,xo,Ve,Ho,Bo,Gs,B,st,Xe,Ut,Go,Ze,Ro,Rs,at,Yo,ne,Mo,Uo,Ys,Kt,Ms,ot,Us,G,lt,ts,Wt,Ko,es,Wo,Ks,L,Jo,ss,Qo,Vo,as,Xo,Zo,Ws,Jt,Js,R,rt,os,Qt,tl,ls,el,Qs,nt,sl,ie,al,ol,Vs,Vt,Xs;return E=new D({}),Et=new D({}),bt=new D({}),jt=new w({props:{code:"pip install datasets[s3]",highlighted:'&gt;&gt;&gt; pip <span class="hljs-keyword">install </span>datasets[<span class="hljs-built_in">s3</span>]'}}),St=new w({props:{code:`storage_options = {"anon": True}  # for anynonous connection
storage_options = {"key": aws_access_key_id, "secret": aws_secret_access_key}  # for private buckets
import botocore
s3_session = botocore.session.Session(profile="my_profile_name")
storage_options = {"session": s3_session}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options = {<span class="hljs-string">&quot;anon&quot;</span>: <span class="hljs-literal">True</span>}  <span class="hljs-comment"># for anynonous connection</span>
<span class="hljs-comment"># or use your credentials</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options = {<span class="hljs-string">&quot;key&quot;</span>: aws_access_key_id, <span class="hljs-string">&quot;secret&quot;</span>: aws_secret_access_key}  <span class="hljs-comment"># for private buckets</span>
<span class="hljs-comment"># or use a botocore session</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile=<span class="hljs-string">&quot;my_profile_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options = {<span class="hljs-string">&quot;session&quot;</span>: s3_session}`}}),At=new w({props:{code:`import s3fs
fs = s3fs.S3FileSystem(**storage_options)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> s3fs
<span class="hljs-meta">&gt;&gt;&gt; </span>fs = s3fs.S3FileSystem(**storage_options)`}}),Lt=new D({}),Tt=new w({props:{code:`conda install -c conda-forge gcsfs
pip install gcsfs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">conda install -c conda-forge gcsfs</span>
# or install with pip
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">pip install gcsfs</span>`}}),zt=new w({props:{code:`storage_options={"token": "anon"}  # for anonymous connection
storage_options={"project": "my-google-project"}
storage_options={"project": "my-google-project", "token": TOKEN}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options={<span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;anon&quot;</span>}  <span class="hljs-comment"># for anonymous connection</span>
<span class="hljs-comment"># or use your credentials of your default gcloud credentials or from the google metadata service</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options={<span class="hljs-string">&quot;project&quot;</span>: <span class="hljs-string">&quot;my-google-project&quot;</span>}
<span class="hljs-comment"># or use your credentials from elsewhere, see the documentation at https://gcsfs.readthedocs.io/</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options={<span class="hljs-string">&quot;project&quot;</span>: <span class="hljs-string">&quot;my-google-project&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>: TOKEN}`}}),Pt=new w({props:{code:`import gcsfs
fs = gcsfs.GCSFileSystem(**storage_options)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> gcsfs
<span class="hljs-meta">&gt;&gt;&gt; </span>fs = gcsfs.GCSFileSystem(**storage_options)`}}),Nt=new D({}),Ot=new w({props:{code:`conda install -c conda-forge adlfs
pip install adlfs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">conda install -c conda-forge adlfs</span>
# or install with pip
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">pip install adlfs</span>`}}),It=new w({props:{code:`storage_options = {"anon": True}  # for anonymous connection
storage_options = {"account_name": ACCOUNT_NAME, "account_key": ACCOUNT_KEY)  # gen 2 filesystem
storage_options={"tenant_id": TENANT_ID, "client_id": CLIENT_ID, "client_secret": CLIENT_SECRET}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options = {<span class="hljs-string">&quot;anon&quot;</span>: <span class="hljs-literal">True</span>}  <span class="hljs-comment"># for anonymous connection</span>
<span class="hljs-comment"># or use your credentials</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options = {<span class="hljs-string">&quot;account_name&quot;</span>: ACCOUNT_NAME, <span class="hljs-string">&quot;account_key&quot;</span>: ACCOUNT_KEY)  <span class="hljs-comment"># gen 2 filesystem</span>
<span class="hljs-comment"># or use your credentials with the gen 1 filesystem</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options={<span class="hljs-string">&quot;tenant_id&quot;</span>: TENANT_ID, <span class="hljs-string">&quot;client_id&quot;</span>: CLIENT_ID, <span class="hljs-string">&quot;client_secret&quot;</span>: CLIENT_SECRET}`}}),Ht=new w({props:{code:`import adlfs
fs = adlfs.AzureBlobFileSystem(**storage_options)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> adlfs
<span class="hljs-meta">&gt;&gt;&gt; </span>fs = adlfs.AzureBlobFileSystem(**storage_options)`}}),Bt=new D({}),Gt=new D({}),Rt=new w({props:{code:`cache_dir = "s3://my-bucket/datasets-cache"
builder = load_dataset_builder("imdb", cache_dir=cache_dir, storage_options=storage_options)
builder.download_and_prepare(file_format="parquet")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>cache_dir = <span class="hljs-string">&quot;s3://my-bucket/datasets-cache&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&quot;imdb&quot;</span>, cache_dir=cache_dir, storage_options=storage_options)
<span class="hljs-meta">&gt;&gt;&gt; </span>builder.download_and_prepare(file_format=<span class="hljs-string">&quot;parquet&quot;</span>)`}}),Yt=new w({props:{code:`cache_dir = "s3://my-bucket/datasets-cache"
builder = load_dataset_builder("path/to/local/loading_script/loading_script.py", cache_dir=cache_dir, storage_options=storage_options)
builder.download_and_prepare(file_format="parquet")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>cache_dir = <span class="hljs-string">&quot;s3://my-bucket/datasets-cache&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, cache_dir=cache_dir, storage_options=storage_options)
<span class="hljs-meta">&gt;&gt;&gt; </span>builder.download_and_prepare(file_format=<span class="hljs-string">&quot;parquet&quot;</span>)`}}),Mt=new w({props:{code:`data_files = {"train": ["path/to/train.csv"]}
cache_dir "s3://my-bucket/datasets-cache"
builder = load_dataset_builder("csv", data_files=data_files, cache_dir=cache_dir, storage_options=storage_options)
builder.download_and_prepare(file_format="parquet")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;path/to/train.csv&quot;</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>cache_dir <span class="hljs-string">&quot;s3://my-bucket/datasets-cache&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&quot;csv&quot;</span>, data_files=data_files, cache_dir=cache_dir, storage_options=storage_options)
<span class="hljs-meta">&gt;&gt;&gt; </span>builder.download_and_prepare(file_format=<span class="hljs-string">&quot;parquet&quot;</span>)`}}),Ut=new D({}),Kt=new w({props:{code:`encoded_dataset.save_to_disk("s3://my-private-datasets/imdb/train", fs=fs)
encoded_dataset.save_to_disk("gcs://my-private-datasets/imdb/train", fs=fs)
encoded_dataset.save_to_disk("adl://my-private-datasets/imdb/train", fs=fs)`,highlighted:`<span class="hljs-comment"># saves encoded_dataset to amazon s3</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;s3://my-private-datasets/imdb/train&quot;</span>, fs=fs)
<span class="hljs-comment"># saves encoded_dataset to google cloud storage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;gcs://my-private-datasets/imdb/train&quot;</span>, fs=fs)
<span class="hljs-comment"># saves encoded_dataset to microsoft azure blob/datalake</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;adl://my-private-datasets/imdb/train&quot;</span>, fs=fs)`}}),ot=new Ir({props:{$$slots:{default:[xr]},$$scope:{ctx:rs}}}),Wt=new D({}),Jt=new w({props:{code:'fs.ls("my-private-datasets/imdb/train")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>fs.ls(<span class="hljs-string">&quot;my-private-datasets/imdb/train&quot;</span>)
[<span class="hljs-string">&quot;dataset_info.json.json&quot;</span>,<span class="hljs-string">&quot;dataset.arrow&quot;</span>,<span class="hljs-string">&quot;state.json&quot;</span>]`}}),Qt=new D({}),Vt=new w({props:{code:`from datasets import load_from_disk
dataset = load_from_disk("s3://a-public-datasets/imdb/train", fs=fs)  
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-comment"># load encoded_dataset from cloud storage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&quot;s3://a-public-datasets/imdb/train&quot;</span>, fs=fs)  
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){y=a("meta"),Y=d(),$=a("h1"),k=a("a"),z=a("span"),u(E.$$.fragment),dt=d(),C=a("span"),P=i("Cloud storage"),b=d(),A=a("p"),Zt=i("\u{1F917} Datasets supports access to cloud storage providers through a "),de=a("code"),Ea=i("fsspec"),ba=i(` FileSystem implementations.
You can save and load datasets from any cloud storage in a Pythonic way.
Take a look at the following table for some example of supported cloud storage providers:`),ns=d(),M=a("table"),fe=a("thead"),ft=a("tr"),ce=a("th"),ja=i("Storage provider"),ka=d(),ue=a("th"),Sa=i("Filesystem implementation"),qa=d(),j=a("tbody"),ct=a("tr"),he=a("td"),Aa=i("Amazon S3"),La=d(),ge=a("td"),ut=a("a"),Ta=i("s3fs"),Da=d(),ht=a("tr"),me=a("td"),za=i("Google Cloud Storage"),Ca=d(),_e=a("td"),gt=a("a"),Pa=i("gcsfs"),Na=d(),mt=a("tr"),ve=a("td"),Oa=i("Azure Blob/DataLake"),Fa=d(),ye=a("td"),_t=a("a"),Ia=i("adlfs"),xa=d(),vt=a("tr"),$e=a("td"),Ha=i("Dropbox"),Ba=d(),we=a("td"),yt=a("a"),Ga=i("dropboxdrivefs"),Ra=d(),$t=a("tr"),Ee=a("td"),Ya=i("Google Drive"),Ma=d(),be=a("td"),wt=a("a"),Ua=i("gdrivefs"),is=d(),te=a("p"),Ka=i(`This guide will show you how to save and load datasets with any cloud storage.
Here are examples for S3, Google Cloud Storage and Azure Blob Storage.`),ps=d(),N=a("h2"),U=a("a"),je=a("span"),u(Et.$$.fragment),Wa=d(),ke=a("span"),Ja=i("Set up your cloud storage FileSystem"),ds=d(),O=a("h3"),K=a("a"),Se=a("span"),u(bt.$$.fragment),Qa=d(),qe=a("span"),Va=i("Amazon S3"),fs=d(),ee=a("ol"),Ae=a("li"),Xa=i("Install the S3 dependency with \u{1F917} Datasets:"),cs=d(),u(jt.$$.fragment),us=d(),kt=a("ol"),Le=a("li"),Za=i("Define your credentials"),hs=d(),S=a("p"),to=i("To use an anonymous connection, use "),Te=a("code"),eo=i("anon=True"),so=i(`.
Otherwise, include your `),De=a("code"),ao=i("aws_access_key_id"),oo=i(" and "),ze=a("code"),lo=i("aws_secret_access_key"),ro=i(" whenever you are interacting with a private S3 bucket."),gs=d(),u(St.$$.fragment),ms=d(),qt=a("ol"),Ce=a("li"),no=i("Load your FileSystem instance"),_s=d(),u(At.$$.fragment),vs=d(),F=a("h3"),W=a("a"),Pe=a("span"),u(Lt.$$.fragment),io=d(),Ne=a("span"),po=i("Google Cloud Storage"),ys=d(),se=a("ol"),Oe=a("li"),fo=i("Install the Google Cloud Storage implementation:"),$s=d(),u(Tt.$$.fragment),ws=d(),Dt=a("ol"),Fe=a("li"),co=i("Define your credentials"),Es=d(),u(zt.$$.fragment),bs=d(),Ct=a("ol"),Ie=a("li"),uo=i("Load your FileSystem instance"),js=d(),u(Pt.$$.fragment),ks=d(),I=a("h3"),J=a("a"),xe=a("span"),u(Nt.$$.fragment),ho=d(),He=a("span"),go=i("Azure Blob Storage"),Ss=d(),ae=a("ol"),Be=a("li"),mo=i("Install the Azure Blob Storage implementation:"),qs=d(),u(Ot.$$.fragment),As=d(),Ft=a("ol"),Ge=a("li"),_o=i("Define your credentials"),Ls=d(),u(It.$$.fragment),Ts=d(),xt=a("ol"),Re=a("li"),vo=i("Load your FileSystem instance"),Ds=d(),u(Ht.$$.fragment),zs=d(),x=a("h2"),Q=a("a"),Ye=a("span"),u(Bt.$$.fragment),yo=d(),Me=a("span"),$o=i("Load and Save your datasets using your cloud storage FileSystem"),Cs=d(),H=a("h3"),V=a("a"),Ue=a("span"),u(Gt.$$.fragment),wo=d(),Ke=a("span"),Eo=i("Load datasets into a cloud storage"),Ps=d(),q=a("p"),bo=i("You can load and cache a dataset into your cloud storage by specifying a remote "),We=a("code"),jo=i("cache_dir"),ko=i(" in "),Je=a("code"),So=i("load_dataset"),qo=i(`.
Don\u2019t forget to use the previously defined `),Qe=a("code"),Ao=i("storage_options"),Lo=i(" containing your credentials to write into a private cloud storage."),Ns=d(),X=a("p"),To=i("Load a dataset from the Hugging Face Hub (see "),oe=a("a"),Do=i("how to load from the Hugging Face Hub"),zo=i("):"),Os=d(),u(Rt.$$.fragment),Fs=d(),Z=a("p"),Co=i("Load a dataset using a loading script (see "),le=a("a"),Po=i("how to load a local loading script"),No=i("):"),Is=d(),u(Yt.$$.fragment),xs=d(),tt=a("p"),Oo=i("Load your own data files (see "),re=a("a"),Fo=i("how to load local and remote files"),Io=i("):"),Hs=d(),u(Mt.$$.fragment),Bs=d(),et=a("p"),xo=i("It is highly recommended to save the files as compressed Parquet files to optimize I/O by specifying "),Ve=a("code"),Ho=i('file_format="parquet"'),Bo=i(`.
Otherwize the dataset is saved as an uncompressed Arrow file.`),Gs=d(),B=a("h2"),st=a("a"),Xe=a("span"),u(Ut.$$.fragment),Go=d(),Ze=a("span"),Ro=i("Saving serialized datasets"),Rs=d(),at=a("p"),Yo=i("After you have processed your dataset, you can save it to your cloud storage with "),ne=a("a"),Mo=i("Dataset.save_to_disk()"),Uo=i(":"),Ys=d(),u(Kt.$$.fragment),Ms=d(),u(ot.$$.fragment),Us=d(),G=a("h2"),lt=a("a"),ts=a("span"),u(Wt.$$.fragment),Ko=d(),es=a("span"),Wo=i("Listing serialized datasets"),Ks=d(),L=a("p"),Jo=i("List files from a cloud storage with your FileSystem instance "),ss=a("code"),Qo=i("fs"),Vo=i(", using "),as=a("code"),Xo=i("fs.ls"),Zo=i(":"),Ws=d(),u(Jt.$$.fragment),Js=d(),R=a("h3"),rt=a("a"),os=a("span"),u(Qt.$$.fragment),tl=d(),ls=a("span"),el=i("Load serialized datasets"),Qs=d(),nt=a("p"),sl=i("When you are ready to use your dataset again, reload it with "),ie=a("a"),al=i("Dataset.load_from_disk()"),ol=i(":"),Vs=d(),u(Vt.$$.fragment),this.h()},l(t){const r=Or('[data-svelte="svelte-1phssyn"]',document.head);y=o(r,"META",{name:!0,content:!0}),r.forEach(e),Y=f(t),$=o(t,"H1",{class:!0});var Xt=l($);k=o(Xt,"A",{id:!0,class:!0,href:!0});var ll=l(k);z=o(ll,"SPAN",{});var rl=l(z);h(E.$$.fragment,rl),rl.forEach(e),ll.forEach(e),dt=f(Xt),C=o(Xt,"SPAN",{});var nl=l(C);P=p(nl,"Cloud storage"),nl.forEach(e),Xt.forEach(e),b=f(t),A=o(t,"P",{});var Zs=l(A);Zt=p(Zs,"\u{1F917} Datasets supports access to cloud storage providers through a "),de=o(Zs,"CODE",{});var il=l(de);Ea=p(il,"fsspec"),il.forEach(e),ba=p(Zs,` FileSystem implementations.
You can save and load datasets from any cloud storage in a Pythonic way.
Take a look at the following table for some example of supported cloud storage providers:`),Zs.forEach(e),ns=f(t),M=o(t,"TABLE",{});var ta=l(M);fe=o(ta,"THEAD",{});var pl=l(fe);ft=o(pl,"TR",{});var ea=l(ft);ce=o(ea,"TH",{});var dl=l(ce);ja=p(dl,"Storage provider"),dl.forEach(e),ka=f(ea),ue=o(ea,"TH",{});var fl=l(ue);Sa=p(fl,"Filesystem implementation"),fl.forEach(e),ea.forEach(e),pl.forEach(e),qa=f(ta),j=o(ta,"TBODY",{});var T=l(j);ct=o(T,"TR",{});var sa=l(ct);he=o(sa,"TD",{});var cl=l(he);Aa=p(cl,"Amazon S3"),cl.forEach(e),La=f(sa),ge=o(sa,"TD",{});var ul=l(ge);ut=o(ul,"A",{href:!0,rel:!0});var hl=l(ut);Ta=p(hl,"s3fs"),hl.forEach(e),ul.forEach(e),sa.forEach(e),Da=f(T),ht=o(T,"TR",{});var aa=l(ht);me=o(aa,"TD",{});var gl=l(me);za=p(gl,"Google Cloud Storage"),gl.forEach(e),Ca=f(aa),_e=o(aa,"TD",{});var ml=l(_e);gt=o(ml,"A",{href:!0,rel:!0});var _l=l(gt);Pa=p(_l,"gcsfs"),_l.forEach(e),ml.forEach(e),aa.forEach(e),Na=f(T),mt=o(T,"TR",{});var oa=l(mt);ve=o(oa,"TD",{});var vl=l(ve);Oa=p(vl,"Azure Blob/DataLake"),vl.forEach(e),Fa=f(oa),ye=o(oa,"TD",{});var yl=l(ye);_t=o(yl,"A",{href:!0,rel:!0});var $l=l(_t);Ia=p($l,"adlfs"),$l.forEach(e),yl.forEach(e),oa.forEach(e),xa=f(T),vt=o(T,"TR",{});var la=l(vt);$e=o(la,"TD",{});var wl=l($e);Ha=p(wl,"Dropbox"),wl.forEach(e),Ba=f(la),we=o(la,"TD",{});var El=l(we);yt=o(El,"A",{href:!0,rel:!0});var bl=l(yt);Ga=p(bl,"dropboxdrivefs"),bl.forEach(e),El.forEach(e),la.forEach(e),Ra=f(T),$t=o(T,"TR",{});var ra=l($t);Ee=o(ra,"TD",{});var jl=l(Ee);Ya=p(jl,"Google Drive"),jl.forEach(e),Ma=f(ra),be=o(ra,"TD",{});var kl=l(be);wt=o(kl,"A",{href:!0,rel:!0});var Sl=l(wt);Ua=p(Sl,"gdrivefs"),Sl.forEach(e),kl.forEach(e),ra.forEach(e),T.forEach(e),ta.forEach(e),is=f(t),te=o(t,"P",{});var ql=l(te);Ka=p(ql,`This guide will show you how to save and load datasets with any cloud storage.
Here are examples for S3, Google Cloud Storage and Azure Blob Storage.`),ql.forEach(e),ps=f(t),N=o(t,"H2",{class:!0});var na=l(N);U=o(na,"A",{id:!0,class:!0,href:!0});var Al=l(U);je=o(Al,"SPAN",{});var Ll=l(je);h(Et.$$.fragment,Ll),Ll.forEach(e),Al.forEach(e),Wa=f(na),ke=o(na,"SPAN",{});var Tl=l(ke);Ja=p(Tl,"Set up your cloud storage FileSystem"),Tl.forEach(e),na.forEach(e),ds=f(t),O=o(t,"H3",{class:!0});var ia=l(O);K=o(ia,"A",{id:!0,class:!0,href:!0});var Dl=l(K);Se=o(Dl,"SPAN",{});var zl=l(Se);h(bt.$$.fragment,zl),zl.forEach(e),Dl.forEach(e),Qa=f(ia),qe=o(ia,"SPAN",{});var Cl=l(qe);Va=p(Cl,"Amazon S3"),Cl.forEach(e),ia.forEach(e),fs=f(t),ee=o(t,"OL",{});var Pl=l(ee);Ae=o(Pl,"LI",{});var Nl=l(Ae);Xa=p(Nl,"Install the S3 dependency with \u{1F917} Datasets:"),Nl.forEach(e),Pl.forEach(e),cs=f(t),h(jt.$$.fragment,t),us=f(t),kt=o(t,"OL",{start:!0});var Ol=l(kt);Le=o(Ol,"LI",{});var Fl=l(Le);Za=p(Fl,"Define your credentials"),Fl.forEach(e),Ol.forEach(e),hs=f(t),S=o(t,"P",{});var it=l(S);to=p(it,"To use an anonymous connection, use "),Te=o(it,"CODE",{});var Il=l(Te);eo=p(Il,"anon=True"),Il.forEach(e),so=p(it,`.
Otherwise, include your `),De=o(it,"CODE",{});var xl=l(De);ao=p(xl,"aws_access_key_id"),xl.forEach(e),oo=p(it," and "),ze=o(it,"CODE",{});var Hl=l(ze);lo=p(Hl,"aws_secret_access_key"),Hl.forEach(e),ro=p(it," whenever you are interacting with a private S3 bucket."),it.forEach(e),gs=f(t),h(St.$$.fragment,t),ms=f(t),qt=o(t,"OL",{start:!0});var Bl=l(qt);Ce=o(Bl,"LI",{});var Gl=l(Ce);no=p(Gl,"Load your FileSystem instance"),Gl.forEach(e),Bl.forEach(e),_s=f(t),h(At.$$.fragment,t),vs=f(t),F=o(t,"H3",{class:!0});var pa=l(F);W=o(pa,"A",{id:!0,class:!0,href:!0});var Rl=l(W);Pe=o(Rl,"SPAN",{});var Yl=l(Pe);h(Lt.$$.fragment,Yl),Yl.forEach(e),Rl.forEach(e),io=f(pa),Ne=o(pa,"SPAN",{});var Ml=l(Ne);po=p(Ml,"Google Cloud Storage"),Ml.forEach(e),pa.forEach(e),ys=f(t),se=o(t,"OL",{});var Ul=l(se);Oe=o(Ul,"LI",{});var Kl=l(Oe);fo=p(Kl,"Install the Google Cloud Storage implementation:"),Kl.forEach(e),Ul.forEach(e),$s=f(t),h(Tt.$$.fragment,t),ws=f(t),Dt=o(t,"OL",{start:!0});var Wl=l(Dt);Fe=o(Wl,"LI",{});var Jl=l(Fe);co=p(Jl,"Define your credentials"),Jl.forEach(e),Wl.forEach(e),Es=f(t),h(zt.$$.fragment,t),bs=f(t),Ct=o(t,"OL",{start:!0});var Ql=l(Ct);Ie=o(Ql,"LI",{});var Vl=l(Ie);uo=p(Vl,"Load your FileSystem instance"),Vl.forEach(e),Ql.forEach(e),js=f(t),h(Pt.$$.fragment,t),ks=f(t),I=o(t,"H3",{class:!0});var da=l(I);J=o(da,"A",{id:!0,class:!0,href:!0});var Xl=l(J);xe=o(Xl,"SPAN",{});var Zl=l(xe);h(Nt.$$.fragment,Zl),Zl.forEach(e),Xl.forEach(e),ho=f(da),He=o(da,"SPAN",{});var tr=l(He);go=p(tr,"Azure Blob Storage"),tr.forEach(e),da.forEach(e),Ss=f(t),ae=o(t,"OL",{});var er=l(ae);Be=o(er,"LI",{});var sr=l(Be);mo=p(sr,"Install the Azure Blob Storage implementation:"),sr.forEach(e),er.forEach(e),qs=f(t),h(Ot.$$.fragment,t),As=f(t),Ft=o(t,"OL",{start:!0});var ar=l(Ft);Ge=o(ar,"LI",{});var or=l(Ge);_o=p(or,"Define your credentials"),or.forEach(e),ar.forEach(e),Ls=f(t),h(It.$$.fragment,t),Ts=f(t),xt=o(t,"OL",{start:!0});var lr=l(xt);Re=o(lr,"LI",{});var rr=l(Re);vo=p(rr,"Load your FileSystem instance"),rr.forEach(e),lr.forEach(e),Ds=f(t),h(Ht.$$.fragment,t),zs=f(t),x=o(t,"H2",{class:!0});var fa=l(x);Q=o(fa,"A",{id:!0,class:!0,href:!0});var nr=l(Q);Ye=o(nr,"SPAN",{});var ir=l(Ye);h(Bt.$$.fragment,ir),ir.forEach(e),nr.forEach(e),yo=f(fa),Me=o(fa,"SPAN",{});var pr=l(Me);$o=p(pr,"Load and Save your datasets using your cloud storage FileSystem"),pr.forEach(e),fa.forEach(e),Cs=f(t),H=o(t,"H3",{class:!0});var ca=l(H);V=o(ca,"A",{id:!0,class:!0,href:!0});var dr=l(V);Ue=o(dr,"SPAN",{});var fr=l(Ue);h(Gt.$$.fragment,fr),fr.forEach(e),dr.forEach(e),wo=f(ca),Ke=o(ca,"SPAN",{});var cr=l(Ke);Eo=p(cr,"Load datasets into a cloud storage"),cr.forEach(e),ca.forEach(e),Ps=f(t),q=o(t,"P",{});var pt=l(q);bo=p(pt,"You can load and cache a dataset into your cloud storage by specifying a remote "),We=o(pt,"CODE",{});var ur=l(We);jo=p(ur,"cache_dir"),ur.forEach(e),ko=p(pt," in "),Je=o(pt,"CODE",{});var hr=l(Je);So=p(hr,"load_dataset"),hr.forEach(e),qo=p(pt,`.
Don\u2019t forget to use the previously defined `),Qe=o(pt,"CODE",{});var gr=l(Qe);Ao=p(gr,"storage_options"),gr.forEach(e),Lo=p(pt," containing your credentials to write into a private cloud storage."),pt.forEach(e),Ns=f(t),X=o(t,"P",{});var ua=l(X);To=p(ua,"Load a dataset from the Hugging Face Hub (see "),oe=o(ua,"A",{href:!0});var mr=l(oe);Do=p(mr,"how to load from the Hugging Face Hub"),mr.forEach(e),zo=p(ua,"):"),ua.forEach(e),Os=f(t),h(Rt.$$.fragment,t),Fs=f(t),Z=o(t,"P",{});var ha=l(Z);Co=p(ha,"Load a dataset using a loading script (see "),le=o(ha,"A",{href:!0});var _r=l(le);Po=p(_r,"how to load a local loading script"),_r.forEach(e),No=p(ha,"):"),ha.forEach(e),Is=f(t),h(Yt.$$.fragment,t),xs=f(t),tt=o(t,"P",{});var ga=l(tt);Oo=p(ga,"Load your own data files (see "),re=o(ga,"A",{href:!0});var vr=l(re);Fo=p(vr,"how to load local and remote files"),vr.forEach(e),Io=p(ga,"):"),ga.forEach(e),Hs=f(t),h(Mt.$$.fragment,t),Bs=f(t),et=o(t,"P",{});var ma=l(et);xo=p(ma,"It is highly recommended to save the files as compressed Parquet files to optimize I/O by specifying "),Ve=o(ma,"CODE",{});var yr=l(Ve);Ho=p(yr,'file_format="parquet"'),yr.forEach(e),Bo=p(ma,`.
Otherwize the dataset is saved as an uncompressed Arrow file.`),ma.forEach(e),Gs=f(t),B=o(t,"H2",{class:!0});var _a=l(B);st=o(_a,"A",{id:!0,class:!0,href:!0});var $r=l(st);Xe=o($r,"SPAN",{});var wr=l(Xe);h(Ut.$$.fragment,wr),wr.forEach(e),$r.forEach(e),Go=f(_a),Ze=o(_a,"SPAN",{});var Er=l(Ze);Ro=p(Er,"Saving serialized datasets"),Er.forEach(e),_a.forEach(e),Rs=f(t),at=o(t,"P",{});var va=l(at);Yo=p(va,"After you have processed your dataset, you can save it to your cloud storage with "),ne=o(va,"A",{href:!0});var br=l(ne);Mo=p(br,"Dataset.save_to_disk()"),br.forEach(e),Uo=p(va,":"),va.forEach(e),Ys=f(t),h(Kt.$$.fragment,t),Ms=f(t),h(ot.$$.fragment,t),Us=f(t),G=o(t,"H2",{class:!0});var ya=l(G);lt=o(ya,"A",{id:!0,class:!0,href:!0});var jr=l(lt);ts=o(jr,"SPAN",{});var kr=l(ts);h(Wt.$$.fragment,kr),kr.forEach(e),jr.forEach(e),Ko=f(ya),es=o(ya,"SPAN",{});var Sr=l(es);Wo=p(Sr,"Listing serialized datasets"),Sr.forEach(e),ya.forEach(e),Ks=f(t),L=o(t,"P",{});var pe=l(L);Jo=p(pe,"List files from a cloud storage with your FileSystem instance "),ss=o(pe,"CODE",{});var qr=l(ss);Qo=p(qr,"fs"),qr.forEach(e),Vo=p(pe,", using "),as=o(pe,"CODE",{});var Ar=l(as);Xo=p(Ar,"fs.ls"),Ar.forEach(e),Zo=p(pe,":"),pe.forEach(e),Ws=f(t),h(Jt.$$.fragment,t),Js=f(t),R=o(t,"H3",{class:!0});var $a=l(R);rt=o($a,"A",{id:!0,class:!0,href:!0});var Lr=l(rt);os=o(Lr,"SPAN",{});var Tr=l(os);h(Qt.$$.fragment,Tr),Tr.forEach(e),Lr.forEach(e),tl=f($a),ls=o($a,"SPAN",{});var Dr=l(ls);el=p(Dr,"Load serialized datasets"),Dr.forEach(e),$a.forEach(e),Qs=f(t),nt=o(t,"P",{});var wa=l(nt);sl=p(wa,"When you are ready to use your dataset again, reload it with "),ie=o(wa,"A",{href:!0});var zr=l(ie);al=p(zr,"Dataset.load_from_disk()"),zr.forEach(e),ol=p(wa,":"),wa.forEach(e),Vs=f(t),h(Vt.$$.fragment,t),this.h()},h(){c(y,"name","hf:doc:metadata"),c(y,"content",JSON.stringify(Br)),c(k,"id","cloud-storage"),c(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k,"href","#cloud-storage"),c($,"class","relative group"),c(ut,"href","https://s3fs.readthedocs.io/en/latest/"),c(ut,"rel","nofollow"),c(gt,"href","https://gcsfs.readthedocs.io/en/latest/"),c(gt,"rel","nofollow"),c(_t,"href","https://github.com/fsspec/adlfs"),c(_t,"rel","nofollow"),c(yt,"href","https://github.com/MarineChap/dropboxdrivefs"),c(yt,"rel","nofollow"),c(wt,"href","https://github.com/intake/gdrivefs"),c(wt,"rel","nofollow"),c(U,"id","set-up-your-cloud-storage-filesystem"),c(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U,"href","#set-up-your-cloud-storage-filesystem"),c(N,"class","relative group"),c(K,"id","amazon-s3"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#amazon-s3"),c(O,"class","relative group"),c(kt,"start","2"),c(qt,"start","3"),c(W,"id","google-cloud-storage"),c(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W,"href","#google-cloud-storage"),c(F,"class","relative group"),c(Dt,"start","2"),c(Ct,"start","3"),c(J,"id","azure-blob-storage"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#azure-blob-storage"),c(I,"class","relative group"),c(Ft,"start","2"),c(xt,"start","3"),c(Q,"id","load-and-save-your-datasets-using-your-cloud-storage-filesystem"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#load-and-save-your-datasets-using-your-cloud-storage-filesystem"),c(x,"class","relative group"),c(V,"id","load-datasets-into-a-cloud-storage"),c(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V,"href","#load-datasets-into-a-cloud-storage"),c(H,"class","relative group"),c(oe,"href","./loading#hugging-face-hub"),c(le,"href","./loading#local-loading-script"),c(re,"href","./loading#local-and-remote-files"),c(st,"id","saving-serialized-datasets"),c(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(st,"href","#saving-serialized-datasets"),c(B,"class","relative group"),c(ne,"href","/docs/datasets/pr_4724/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(lt,"id","listing-serialized-datasets"),c(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lt,"href","#listing-serialized-datasets"),c(G,"class","relative group"),c(rt,"id","load-serialized-datasets"),c(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rt,"href","#load-serialized-datasets"),c(R,"class","relative group"),c(ie,"href","/docs/datasets/pr_4724/en/package_reference/main_classes#datasets.Dataset.load_from_disk")},m(t,r){s(document.head,y),n(t,Y,r),n(t,$,r),s($,k),s(k,z),g(E,z,null),s($,dt),s($,C),s(C,P),n(t,b,r),n(t,A,r),s(A,Zt),s(A,de),s(de,Ea),s(A,ba),n(t,ns,r),n(t,M,r),s(M,fe),s(fe,ft),s(ft,ce),s(ce,ja),s(ft,ka),s(ft,ue),s(ue,Sa),s(M,qa),s(M,j),s(j,ct),s(ct,he),s(he,Aa),s(ct,La),s(ct,ge),s(ge,ut),s(ut,Ta),s(j,Da),s(j,ht),s(ht,me),s(me,za),s(ht,Ca),s(ht,_e),s(_e,gt),s(gt,Pa),s(j,Na),s(j,mt),s(mt,ve),s(ve,Oa),s(mt,Fa),s(mt,ye),s(ye,_t),s(_t,Ia),s(j,xa),s(j,vt),s(vt,$e),s($e,Ha),s(vt,Ba),s(vt,we),s(we,yt),s(yt,Ga),s(j,Ra),s(j,$t),s($t,Ee),s(Ee,Ya),s($t,Ma),s($t,be),s(be,wt),s(wt,Ua),n(t,is,r),n(t,te,r),s(te,Ka),n(t,ps,r),n(t,N,r),s(N,U),s(U,je),g(Et,je,null),s(N,Wa),s(N,ke),s(ke,Ja),n(t,ds,r),n(t,O,r),s(O,K),s(K,Se),g(bt,Se,null),s(O,Qa),s(O,qe),s(qe,Va),n(t,fs,r),n(t,ee,r),s(ee,Ae),s(Ae,Xa),n(t,cs,r),g(jt,t,r),n(t,us,r),n(t,kt,r),s(kt,Le),s(Le,Za),n(t,hs,r),n(t,S,r),s(S,to),s(S,Te),s(Te,eo),s(S,so),s(S,De),s(De,ao),s(S,oo),s(S,ze),s(ze,lo),s(S,ro),n(t,gs,r),g(St,t,r),n(t,ms,r),n(t,qt,r),s(qt,Ce),s(Ce,no),n(t,_s,r),g(At,t,r),n(t,vs,r),n(t,F,r),s(F,W),s(W,Pe),g(Lt,Pe,null),s(F,io),s(F,Ne),s(Ne,po),n(t,ys,r),n(t,se,r),s(se,Oe),s(Oe,fo),n(t,$s,r),g(Tt,t,r),n(t,ws,r),n(t,Dt,r),s(Dt,Fe),s(Fe,co),n(t,Es,r),g(zt,t,r),n(t,bs,r),n(t,Ct,r),s(Ct,Ie),s(Ie,uo),n(t,js,r),g(Pt,t,r),n(t,ks,r),n(t,I,r),s(I,J),s(J,xe),g(Nt,xe,null),s(I,ho),s(I,He),s(He,go),n(t,Ss,r),n(t,ae,r),s(ae,Be),s(Be,mo),n(t,qs,r),g(Ot,t,r),n(t,As,r),n(t,Ft,r),s(Ft,Ge),s(Ge,_o),n(t,Ls,r),g(It,t,r),n(t,Ts,r),n(t,xt,r),s(xt,Re),s(Re,vo),n(t,Ds,r),g(Ht,t,r),n(t,zs,r),n(t,x,r),s(x,Q),s(Q,Ye),g(Bt,Ye,null),s(x,yo),s(x,Me),s(Me,$o),n(t,Cs,r),n(t,H,r),s(H,V),s(V,Ue),g(Gt,Ue,null),s(H,wo),s(H,Ke),s(Ke,Eo),n(t,Ps,r),n(t,q,r),s(q,bo),s(q,We),s(We,jo),s(q,ko),s(q,Je),s(Je,So),s(q,qo),s(q,Qe),s(Qe,Ao),s(q,Lo),n(t,Ns,r),n(t,X,r),s(X,To),s(X,oe),s(oe,Do),s(X,zo),n(t,Os,r),g(Rt,t,r),n(t,Fs,r),n(t,Z,r),s(Z,Co),s(Z,le),s(le,Po),s(Z,No),n(t,Is,r),g(Yt,t,r),n(t,xs,r),n(t,tt,r),s(tt,Oo),s(tt,re),s(re,Fo),s(tt,Io),n(t,Hs,r),g(Mt,t,r),n(t,Bs,r),n(t,et,r),s(et,xo),s(et,Ve),s(Ve,Ho),s(et,Bo),n(t,Gs,r),n(t,B,r),s(B,st),s(st,Xe),g(Ut,Xe,null),s(B,Go),s(B,Ze),s(Ze,Ro),n(t,Rs,r),n(t,at,r),s(at,Yo),s(at,ne),s(ne,Mo),s(at,Uo),n(t,Ys,r),g(Kt,t,r),n(t,Ms,r),g(ot,t,r),n(t,Us,r),n(t,G,r),s(G,lt),s(lt,ts),g(Wt,ts,null),s(G,Ko),s(G,es),s(es,Wo),n(t,Ks,r),n(t,L,r),s(L,Jo),s(L,ss),s(ss,Qo),s(L,Vo),s(L,as),s(as,Xo),s(L,Zo),n(t,Ws,r),g(Jt,t,r),n(t,Js,r),n(t,R,r),s(R,rt),s(rt,os),g(Qt,os,null),s(R,tl),s(R,ls),s(ls,el),n(t,Qs,r),n(t,nt,r),s(nt,sl),s(nt,ie),s(ie,al),s(nt,ol),n(t,Vs,r),g(Vt,t,r),Xs=!0},p(t,[r]){const Xt={};r&2&&(Xt.$$scope={dirty:r,ctx:t}),ot.$set(Xt)},i(t){Xs||(m(E.$$.fragment,t),m(Et.$$.fragment,t),m(bt.$$.fragment,t),m(jt.$$.fragment,t),m(St.$$.fragment,t),m(At.$$.fragment,t),m(Lt.$$.fragment,t),m(Tt.$$.fragment,t),m(zt.$$.fragment,t),m(Pt.$$.fragment,t),m(Nt.$$.fragment,t),m(Ot.$$.fragment,t),m(It.$$.fragment,t),m(Ht.$$.fragment,t),m(Bt.$$.fragment,t),m(Gt.$$.fragment,t),m(Rt.$$.fragment,t),m(Yt.$$.fragment,t),m(Mt.$$.fragment,t),m(Ut.$$.fragment,t),m(Kt.$$.fragment,t),m(ot.$$.fragment,t),m(Wt.$$.fragment,t),m(Jt.$$.fragment,t),m(Qt.$$.fragment,t),m(Vt.$$.fragment,t),Xs=!0)},o(t){_(E.$$.fragment,t),_(Et.$$.fragment,t),_(bt.$$.fragment,t),_(jt.$$.fragment,t),_(St.$$.fragment,t),_(At.$$.fragment,t),_(Lt.$$.fragment,t),_(Tt.$$.fragment,t),_(zt.$$.fragment,t),_(Pt.$$.fragment,t),_(Nt.$$.fragment,t),_(Ot.$$.fragment,t),_(It.$$.fragment,t),_(Ht.$$.fragment,t),_(Bt.$$.fragment,t),_(Gt.$$.fragment,t),_(Rt.$$.fragment,t),_(Yt.$$.fragment,t),_(Mt.$$.fragment,t),_(Ut.$$.fragment,t),_(Kt.$$.fragment,t),_(ot.$$.fragment,t),_(Wt.$$.fragment,t),_(Jt.$$.fragment,t),_(Qt.$$.fragment,t),_(Vt.$$.fragment,t),Xs=!1},d(t){e(y),t&&e(Y),t&&e($),v(E),t&&e(b),t&&e(A),t&&e(ns),t&&e(M),t&&e(is),t&&e(te),t&&e(ps),t&&e(N),v(Et),t&&e(ds),t&&e(O),v(bt),t&&e(fs),t&&e(ee),t&&e(cs),v(jt,t),t&&e(us),t&&e(kt),t&&e(hs),t&&e(S),t&&e(gs),v(St,t),t&&e(ms),t&&e(qt),t&&e(_s),v(At,t),t&&e(vs),t&&e(F),v(Lt),t&&e(ys),t&&e(se),t&&e($s),v(Tt,t),t&&e(ws),t&&e(Dt),t&&e(Es),v(zt,t),t&&e(bs),t&&e(Ct),t&&e(js),v(Pt,t),t&&e(ks),t&&e(I),v(Nt),t&&e(Ss),t&&e(ae),t&&e(qs),v(Ot,t),t&&e(As),t&&e(Ft),t&&e(Ls),v(It,t),t&&e(Ts),t&&e(xt),t&&e(Ds),v(Ht,t),t&&e(zs),t&&e(x),v(Bt),t&&e(Cs),t&&e(H),v(Gt),t&&e(Ps),t&&e(q),t&&e(Ns),t&&e(X),t&&e(Os),v(Rt,t),t&&e(Fs),t&&e(Z),t&&e(Is),v(Yt,t),t&&e(xs),t&&e(tt),t&&e(Hs),v(Mt,t),t&&e(Bs),t&&e(et),t&&e(Gs),t&&e(B),v(Ut),t&&e(Rs),t&&e(at),t&&e(Ys),v(Kt,t),t&&e(Ms),v(ot,t),t&&e(Us),t&&e(G),v(Wt),t&&e(Ks),t&&e(L),t&&e(Ws),v(Jt,t),t&&e(Js),t&&e(R),v(Qt),t&&e(Qs),t&&e(nt),t&&e(Vs),v(Vt,t)}}}const Br={local:"cloud-storage",sections:[{local:"set-up-your-cloud-storage-filesystem",sections:[{local:"amazon-s3",title:"Amazon S3"},{local:"google-cloud-storage",title:"Google Cloud Storage"},{local:"azure-blob-storage",title:"Azure Blob Storage"}],title:"Set up your cloud storage FileSystem"},{local:"load-and-save-your-datasets-using-your-cloud-storage-filesystem",sections:[{local:"load-datasets-into-a-cloud-storage",title:"Load datasets into a cloud storage"}],title:"Load and Save your datasets using your cloud storage FileSystem"},{local:"saving-serialized-datasets",title:"Saving serialized datasets"},{local:"listing-serialized-datasets",sections:[{local:"load-serialized-datasets",title:"Load serialized datasets"}],title:"Listing serialized datasets"}],title:"Cloud storage"};function Gr(rs){return Fr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Kr extends Cr{constructor(y){super();Pr(this,y,Gr,Hr,Nr,{})}}export{Kr as default,Br as metadata};
