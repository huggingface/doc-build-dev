import{S as ld,i as od,s as rd,e as s,k as d,w as m,t as n,M as nd,c as l,d as a,m as u,a as o,x as _,h as i,b as f,G as e,g as p,y as g,q as y,o as v,B as w,v as id}from"../chunks/vendor-hf-doc-builder.js";import{T as vs}from"../chunks/Tip-hf-doc-builder.js";import{I as R}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as L}from"../chunks/CodeBlock-hf-doc-builder.js";function pd(T){let h,q,c,$,k;return{c(){h=s("p"),q=n("To help you get started, try beginning with the dataset loading script "),c=s("a"),$=n("template"),k=n("!"),this.h()},l(E){h=l(E,"P",{});var b=o(h);q=i(b,"To help you get started, try beginning with the dataset loading script "),c=l(b,"A",{href:!0,rel:!0});var x=o(c);$=i(x,"template"),x.forEach(a),k=i(b,"!"),b.forEach(a),this.h()},h(){f(c,"href","https://github.com/huggingface/datasets/blob/master/templates/new_dataset_script.py"),f(c,"rel","nofollow")},m(E,b){p(E,h,b),e(h,q),e(h,c),e(c,$),e(h,k)},d(E){E&&a(h)}}}function dd(T){let h,q;return{c(){h=s("p"),q=n("Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one.")},l(c){h=l(c,"P",{});var $=o(h);q=i($,"Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one."),$.forEach(a)},m(c,$){p(c,h,$),e(h,q)},d(c){c&&a(h)}}}function ud(T){let h,q;return{c(){h=s("p"),q=n("If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs.")},l(c){h=l(c,"P",{});var $=o(h);q=i($,"If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs."),$.forEach(a)},m(c,$){p(c,h,$),e(h,q)},d(c){c&&a(h)}}}function fd(T){let h,q,c,$,k,E,b,x;return{c(){h=s("p"),q=n("Make sure you run all of the following commands "),c=s("strong"),$=n("from the root"),k=n(" of your local "),E=s("code"),b=n("datasets"),x=n(" repository.")},l(D){h=l(D,"P",{});var j=o(h);q=i(j,"Make sure you run all of the following commands "),c=l(j,"STRONG",{});var C=o(c);$=i(C,"from the root"),C.forEach(a),k=i(j," of your local "),E=l(j,"CODE",{});var M=o(E);b=i(M,"datasets"),M.forEach(a),x=i(j," repository."),j.forEach(a)},m(D,j){p(D,h,j),e(h,q),e(h,c),e(c,$),e(h,k),e(h,E),e(E,b),e(h,x)},d(D){D&&a(h)}}}function hd(T){let h,q,c,$,k,E,b,x;return{c(){h=s("p"),q=n("Manually creating dummy data can be tricky. Make sure you follow the instructions from the command "),c=s("code"),$=n("datasets-cli dummy_data datasets/<your-dataset-folder>"),k=n(". If you are still unable to successfully generate dummy data, open a "),E=s("a"),b=n("Pull Request"),x=n(" and we will be happy to help you out!"),this.h()},l(D){h=l(D,"P",{});var j=o(h);q=i(j,"Manually creating dummy data can be tricky. Make sure you follow the instructions from the command "),c=l(j,"CODE",{});var C=o(c);$=i(C,"datasets-cli dummy_data datasets/<your-dataset-folder>"),C.forEach(a),k=i(j,". If you are still unable to successfully generate dummy data, open a "),E=l(j,"A",{href:!0,rel:!0});var M=o(E);b=i(M,"Pull Request"),M.forEach(a),x=i(j," and we will be happy to help you out!"),j.forEach(a),this.h()},h(){f(E,"href","https://github.com/huggingface/datasets/pulls"),f(E,"rel","nofollow")},m(D,j){p(D,h,j),e(h,q),e(h,c),e(c,$),e(h,k),e(h,E),e(E,b),e(h,x)},d(D){D&&a(h)}}}function cd(T){let h,q,c,$,k,E,b,x,D,j,C,M,ws,me,ao,$s,U,so,Ye,lo,oo,Xe,ro,no,Es,It,qs,Dt,js,_e,io,bs,A,We,po,uo,Je,fo,ho,Ke,co,mo,Ze,_o,go,ta,yo,vo,ea,wo,ks,st,$o,Lt,Eo,qo,xs,lt,As,H,ot,aa,St,jo,sa,bo,Is,rt,ko,la,xo,Ao,Ds,nt,oa,ge,ra,Io,Do,Lo,na,it,ia,So,To,ye,Co,Oo,Ls,Tt,Ss,Q,pa,ve,da,Po,No,Ro,ua,we,fa,Uo,Go,Ts,$e,Vo,Cs,Ct,Os,Y,pt,ha,Ot,Bo,ca,zo,Ps,G,Fo,Pt,Mo,Ho,Ee,Qo,Yo,Ns,dt,Xo,Nt,Wo,Jo,Rs,qe,Rt,Ko,je,Zo,tr,Us,Ut,Gs,Gt,Vt,er,ma,ar,sr,Vs,Bt,Bs,zt,Ft,lr,_a,or,rr,zs,Mt,Fs,X,ut,ga,Ht,nr,ya,ir,Ms,V,pr,va,dr,ur,wa,fr,hr,Hs,Qt,Qs,ft,Ys,W,ht,$a,Yt,cr,Ea,mr,Xs,be,_r,Ws,ke,qa,gr,Js,Xt,Ks,ct,Zs,Wt,Jt,mt,xe,yr,vr,Ae,wr,$r,Er,Kt,ja,S,qr,ba,jr,br,ka,kr,xr,xa,Ar,Ir,Aa,Dr,Lr,Sr,Ia,Ie,Da,Tr,Cr,tl,_t,Or,La,Pr,Nr,el,Zt,al,J,gt,Sa,te,Rr,Ta,Ur,sl,De,Gr,ll,B,Ca,Vr,Br,Oa,zr,Fr,Pa,Mr,ol,Le,Hr,rl,yt,Na,vt,Ra,Qr,Yr,Ua,Xr,Wr,Jr,Ga,ee,Kr,Va,Zr,tn,nl,ae,il,K,wt,Ba,se,en,za,an,pl,Se,sn,dl,$t,ul,Z,Et,Fa,le,ln,Ma,on,fl,Te,oe,rn,Ha,nn,pn,hl,re,cl,ne,N,dn,Qa,un,fn,Ya,hn,cn,Xa,mn,_n,ml,tt,qt,Wa,ie,gn,Ja,yn,_l,Ce,vn,gl,I,Ka,wn,$n,Za,En,qn,ts,jn,bn,es,kn,xn,as,An,In,ss,Dn,yl,Oe,Ln,vl,pe,wl,et,jt,ls,de,Sn,os,Tn,$l,Pe,Cn,El,ue,ql,bt,jl,Ne,On,bl,kt,rs,Re,ns,Pn,Nn,Rn,is,Ue,ps,Un,Gn,kl,at,xt,ds,fe,Vn,us,Bn,xl,z,zn,Ge,Fn,Mn,Ve,Hn,Qn,Al,Be,Yn,Il,he,Dl;return E=new R({}),It=new L({props:{code:`my_dataset/
\u251C\u2500\u2500 README.md
\u2514\u2500\u2500 my_dataset.py`,highlighted:`my<span class="hljs-emphasis">_dataset/
\u251C\u2500\u2500 README.md
\u2514\u2500\u2500 my_</span>dataset.py`}}),Dt=new L({props:{code:`from datasets import load_dataset
load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),lt=new vs({props:{$$slots:{default:[pd]},$$scope:{ctx:T}}}),St=new R({}),Tt=new L({props:{code:`datasets.Features(
    {
        "id": datasets.Value("string"),
        "title": datasets.Value("string"),
        "context": datasets.Value("string"),
        "question": datasets.Value("string"),
        "answers": datasets.Sequence(
            {
                "text": datasets.Value("string"),
                "answer_start": datasets.Value("int32"),
            }
        ),
    }
)`,highlighted:`datasets.Features(
    {
        <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;answers&quot;</span>: datasets.<span class="hljs-type">Sequence</span>(
            {
                <span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),
            }
        ),
    }
)`}}),Ct=new L({props:{code:`def _info(self):
    return datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                "id": datasets.Value("string"),
                "title": datasets.Value("string"),
                "context": datasets.Value("string"),
                "question": datasets.Value("string"),
                "answers": datasets.features.Sequence(
                    {"text": datasets.Value("string"), "answer_start": datasets.Value("int32"),}
                ),
            }
        ),
        # No default supervised_keys (as we have to pass both question
        # and context as input).
        supervised_keys=None,
        homepage="https://rajpurkar.github.io/SQuAD-explorer/",
        citation=_CITATION,
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answers&quot;</span>: datasets.features.<span class="hljs-type">Sequence</span>(
                    {<span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),}
                ),
            }
        ),
        <span class="hljs-comment"># No default supervised_keys (as we have to pass both question</span>
        <span class="hljs-comment"># and context as input).</span>
        supervised_keys=<span class="hljs-literal">None</span>,
        homepage=<span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/&quot;</span>,
        citation=_CITATION,
    )`}}),Ot=new R({}),Ut=new L({props:{code:`
`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlueConfig</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, data_url, citation, url, label_classes=(<span class="hljs-params"><span class="hljs-string">&quot;False&quot;</span>, <span class="hljs-string">&quot;True&quot;</span></span>), **kwargs</span>):
        <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.

        Args:
        features: *list[string]*, list of the features that will appear in the
            feature dict. Should not include &quot;label&quot;.
        data_url: *string*, url to download the zip file from.
        citation: *string*, citation for the data set.
        url: *string*, url for information about the data set.
        label_classes: *list[string]*, the list of classes for the label if the
            label is present as a string. Non-string labels will be cast to either
            &#x27;False&#x27; or &#x27;True&#x27;.
        **kwargs: keyword arguments forwarded to super.
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># Version history:</span>
        <span class="hljs-comment"># 1.0.2: Fixed non-nondeterminism in ReCoRD.</span>
        <span class="hljs-comment"># 1.0.1: Change from the pre-release trial version of SuperGLUE (v1.9) to</span>
        <span class="hljs-comment">#        the full release (v2.0).</span>
        <span class="hljs-comment"># 1.0.0: S3 (new shuffling, sharding and slicing mechanism).</span>
        <span class="hljs-comment"># 0.0.2: Initial version.</span>
        <span class="hljs-built_in">super</span>(SuperGlueConfig, self).__init__(version=datasets.Version(<span class="hljs-string">&quot;1.0.2&quot;</span>), **kwargs)
        self.features = features
        self.label_classes = label_classes
        self.data_url = data_url
        self.citation = citation
        self.url = url`}}),Bt=new L({props:{code:"",highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlue</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;The SuperGLUE benchmark.&quot;&quot;&quot;</span>

    BUILDER_CONFIGS = [
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;boolq&quot;</span>,
            description=_BOOLQ_DESCRIPTION,
            features=[<span class="hljs-string">&quot;question&quot;</span>, <span class="hljs-string">&quot;passage&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/BoolQ.zip&quot;</span>,
            citation=_BOOLQ_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/google-research-datasets/boolean-questions&quot;</span>,
        ),
        ...
        ...
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;axg&quot;</span>,
            description=_AXG_DESCRIPTION,
            features=[<span class="hljs-string">&quot;premise&quot;</span>, <span class="hljs-string">&quot;hypothesis&quot;</span>],
            label_classes=[<span class="hljs-string">&quot;entailment&quot;</span>, <span class="hljs-string">&quot;not_entailment&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/AX-g.zip&quot;</span>,
            citation=_AXG_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/rudinger/winogender-schemas&quot;</span>,
        ),`}}),Mt=new L({props:{code:`from datasets import load_dataset
dataset = load_dataset('super_glue', 'boolq')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;super_glue&#x27;</span>, <span class="hljs-string">&#x27;boolq&#x27;</span>)`}}),Ht=new R({}),Qt=new L({props:{code:`

`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">NewDataset</span>(datasets.GeneratorBasedBuilder):

VERSION = datasets.Version(<span class="hljs-string">&quot;1.1.0&quot;</span>)

BUILDER_CONFIGS = [
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;first_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a first domain&quot;</span>),
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;second_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a second domain&quot;</span>),
]

DEFAULT_CONFIG_NAME = <span class="hljs-string">&quot;first_domain&quot;</span>`}}),ft=new vs({props:{warning:!0,$$slots:{default:[dd]},$$scope:{ctx:T}}}),Yt=new R({}),Xt=new L({props:{code:`_URL = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
_URLS = {
    "train": _URL + "train-v1.1.json",
    "dev": _URL + "dev-v1.1.json",
}`,highlighted:`_URL = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
_URLS = {
    <span class="hljs-string">&quot;train&quot;</span>: _URL + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>,
    <span class="hljs-string">&quot;dev&quot;</span>: _URL + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>,
}`}}),ct=new vs({props:{$$slots:{default:[ud]},$$scope:{ctx:T}}}),Zt=new L({props:{code:"",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager: datasets.DownloadManager</span>) -&gt; <span class="hljs-type">List</span>[datasets.SplitGenerator]:
    urls_to_download = self._URLS
    downloaded_files = dl_manager.download_and_extract(urls_to_download)

    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;train&quot;</span>]}),
        datasets.SplitGenerator(name=datasets.Split.VALIDATION, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;dev&quot;</span>]}),
    ]`}}),te=new R({}),ae=new L({props:{code:`
`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, filepath</span>):
    <span class="hljs-string">&quot;&quot;&quot;This function returns the examples in the raw (text) form.&quot;&quot;&quot;</span>
    logger.info(<span class="hljs-string">&quot;generating examples from = %s&quot;</span>, filepath)
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath) <span class="hljs-keyword">as</span> f:
        squad = json.load(f)
        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> squad[<span class="hljs-string">&quot;data&quot;</span>]:
            title = article.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip()
            <span class="hljs-keyword">for</span> paragraph <span class="hljs-keyword">in</span> article[<span class="hljs-string">&quot;paragraphs&quot;</span>]:
                context = paragraph[<span class="hljs-string">&quot;context&quot;</span>].strip()
                <span class="hljs-keyword">for</span> qa <span class="hljs-keyword">in</span> paragraph[<span class="hljs-string">&quot;qas&quot;</span>]:
                    question = qa[<span class="hljs-string">&quot;question&quot;</span>].strip()
                    id_ = qa[<span class="hljs-string">&quot;id&quot;</span>]

                    answer_starts = [answer[<span class="hljs-string">&quot;answer_start&quot;</span>] <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]
                    answers = [answer[<span class="hljs-string">&quot;text&quot;</span>].strip() <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]

                    <span class="hljs-comment"># Features currently used are &quot;context&quot;, &quot;question&quot;, and &quot;answers&quot;.</span>
                    <span class="hljs-comment"># Others are extracted here for the ease of future expansions.</span>
                    <span class="hljs-keyword">yield</span> id_, {
                        <span class="hljs-string">&quot;title&quot;</span>: title,
                        <span class="hljs-string">&quot;context&quot;</span>: context,
                        <span class="hljs-string">&quot;question&quot;</span>: question,
                        <span class="hljs-string">&quot;id&quot;</span>: id_,
                        <span class="hljs-string">&quot;answers&quot;</span>: {<span class="hljs-string">&quot;answer_start&quot;</span>: answer_starts, <span class="hljs-string">&quot;text&quot;</span>: answers,},
                    }`}}),se=new R({}),$t=new vs({props:{warning:!0,$$slots:{default:[fd]},$$scope:{ctx:T}}}),le=new R({}),re=new L({props:{code:"datasets-cli test path/to/<your-dataset-folder> --save_infos --all_configs",highlighted:'datasets-cli test path/<span class="hljs-selector-tag">to</span>/&lt;your-dataset-folder&gt; <span class="hljs-attr">--save_infos</span> <span class="hljs-attr">--all_configs</span>'}}),ie=new R({}),pe=new L({props:{code:"datasets-cli dummy_data datasets/<your-dataset-folder> --auto_generate",highlighted:'datasets-cli dummy_data datasets/&lt;your-dataset-<span class="hljs-built_in">folder</span>&gt; <span class="hljs-comment">--auto_generate</span>'}}),de=new R({}),ue=new L({props:{code:`






`,highlighted:`datasets-cli dummy_data datasets/<span class="hljs-symbol">&lt;your-dataset-folder&gt;</span>

==============================DUMMY DATA INSTRUCTIONS==============================
- In order <span class="hljs-keyword">to</span> create the dummy data <span class="hljs-keyword">for</span> my-dataset, please <span class="hljs-keyword">go</span> into the folder <span class="hljs-string">&#x27;./datasets/my-dataset/dummy/1.1.0&#x27;</span> with *<span class="hljs-keyword">cd</span> ./datasets/my-dataset/dummy/<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span>* .

- Please create the following dummy data <span class="hljs-keyword">files</span> <span class="hljs-string">&#x27;dummy_data/TREC_10.label, dummy_data/train_5500.label&#x27;</span> from the folder <span class="hljs-string">&#x27;./datasets/my-dataset/dummy/1.1.0&#x27;</span>

- For each of the splits <span class="hljs-string">&#x27;train, test&#x27;</span>, <span class="hljs-keyword">make</span> sure that one <span class="hljs-built_in">or</span> more of the dummy data <span class="hljs-keyword">files</span> provide at least one example

- If the method *_generate_examples(...)* includes multiple *<span class="hljs-keyword">open</span>()* statements, you might have <span class="hljs-keyword">to</span> create other <span class="hljs-keyword">files</span> in addition <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;dummy_data/TREC_10.label, dummy_data/train_5500.label&#x27;</span>. In this case please refer <span class="hljs-keyword">to</span> the *_generate_examples(...)* method

- After <span class="hljs-keyword">all</span> dummy data <span class="hljs-keyword">files</span> are created, they should <span class="hljs-keyword">be</span> zipped recursively <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;dummy_data.zip&#x27;</span> with the <span class="hljs-keyword">command</span> *zip -r dummy_data.zip dummy_data/*

- You can now <span class="hljs-keyword">delete</span> the folder <span class="hljs-string">&#x27;dummy_data&#x27;</span> with the <span class="hljs-keyword">command</span> *rm -r dummy_data*

- To <span class="hljs-built_in">get</span> the folder <span class="hljs-string">&#x27;dummy_data&#x27;</span> back <span class="hljs-keyword">for</span> further <span class="hljs-keyword">changes</span> <span class="hljs-keyword">to</span> the dummy data, simply unzip dummy_data.zip with the <span class="hljs-keyword">command</span> *unzip dummy_data.zip*

- Make sure you have created the <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;dummy_data.zip&#x27;</span> in <span class="hljs-string">&#x27;./datasets/my-dataset/dummy/1.1.0&#x27;</span>
===================================================================================`}}),bt=new vs({props:{$$slots:{default:[hd]},$$scope:{ctx:T}}}),fe=new R({}),he=new L({props:{code:`from datasets import load_dataset
load_dataset("<username>/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;&lt;username&gt;/my_dataset&quot;</span>)`}}),{c(){h=s("meta"),q=d(),c=s("h1"),$=s("a"),k=s("span"),m(E.$$.fragment),b=d(),x=s("span"),D=n("Create a dataset loading script"),j=d(),C=s("p"),M=n("Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),ws=d(),me=s("p"),ao=n("The script can download data files from any website, or from the same dataset repository."),$s=d(),U=s("p"),so=n("Any dataset script, for example "),Ye=s("code"),lo=n("my_dataset.py"),oo=n(", can be placed in a folder or a repository named "),Xe=s("code"),ro=n("my_dataset"),no=n(" and be loaded with:"),Es=d(),m(It.$$.fragment),qs=d(),m(Dt.$$.fragment),js=d(),_e=s("p"),io=n("The following guide includes instructions for dataset scripts for how to:"),bs=d(),A=s("ul"),We=s("li"),po=n("Add dataset metadata."),uo=d(),Je=s("li"),fo=n("Download data files."),ho=d(),Ke=s("li"),co=n("Generate samples."),mo=d(),Ze=s("li"),_o=n("Test if your dataset was generated correctly."),go=d(),ta=s("li"),yo=n("Create a Dataset card."),vo=d(),ea=s("li"),wo=n("Upload a dataset to the Hugging Face Hub or GitHub."),ks=d(),st=s("p"),$o=n("Open the "),Lt=s("a"),Eo=n("SQuAD dataset loading script"),qo=n(" template to follow along on how to share a dataset."),xs=d(),m(lt.$$.fragment),As=d(),H=s("h2"),ot=s("a"),aa=s("span"),m(St.$$.fragment),jo=d(),sa=s("span"),bo=n("Add dataset attributes"),Is=d(),rt=s("p"),ko=n("The first step is to add some information, or attributes, about your dataset in "),la=s("code"),xo=n("DatasetBuilder._info()"),Ao=n(". The most important attributes you should specify are:"),Ds=d(),nt=s("ol"),oa=s("li"),ge=s("p"),ra=s("code"),Io=n("DatasetInfo.description"),Do=n(" provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),Lo=d(),na=s("li"),it=s("p"),ia=s("code"),So=n("DatasetInfo.features"),To=n(" defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),ye=s("a"),Co=n("Features"),Oo=n(" for a full list of feature types you can use."),Ls=d(),m(Tt.$$.fragment),Ss=d(),Q=s("ol"),pa=s("li"),ve=s("p"),da=s("code"),Po=n("DatasetInfo.homepage"),No=n(" contains the URL to the dataset homepage so users can find more details about the dataset."),Ro=d(),ua=s("li"),we=s("p"),fa=s("code"),Uo=n("DatasetInfo.citation"),Go=n(" contains a BibTeX citation for the dataset."),Ts=d(),$e=s("p"),Vo=n("After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),Cs=d(),m(Ct.$$.fragment),Os=d(),Y=s("h3"),pt=s("a"),ha=s("span"),m(Ot.$$.fragment),Bo=d(),ca=s("span"),zo=n("Multiple configurations"),Ps=d(),G=s("p"),Fo=n("In some cases, your dataset may have multiple configurations. For example, the "),Pt=s("a"),Mo=n("SuperGLUE"),Ho=n(" dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),Ee=s("a"),Qo=n("BuilderConfig"),Yo=n(" which allows you to create different configurations for the user to select from."),Ns=d(),dt=s("p"),Xo=n("Let\u2019s study the "),Nt=s("a"),Wo=n("SuperGLUE loading script"),Jo=n(" to see how you can define several configurations."),Rs=d(),qe=s("ol"),Rt=s("li"),Ko=n("Create a "),je=s("a"),Zo=n("BuilderConfig"),tr=n(" subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Us=d(),m(Ut.$$.fragment),Gs=d(),Gt=s("ol"),Vt=s("li"),er=n("Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),ma=s("code"),ar=n("DatasetBuilder.BUILDER_CONFIGS"),sr=n(":"),Vs=d(),m(Bt.$$.fragment),Bs=d(),zt=s("ol"),Ft=s("li"),lr=n("Now, users can load a specific configuration of the dataset with the configuration "),_a=s("code"),or=n("name"),rr=n(":"),zs=d(),m(Mt.$$.fragment),Fs=d(),X=s("h3"),ut=s("a"),ga=s("span"),m(Ht.$$.fragment),nr=d(),ya=s("span"),ir=n("Default configurations"),Ms=d(),V=s("p"),pr=n("Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),va=s("code"),dr=n("ValueError"),ur=n(", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),wa=s("code"),fr=n("DEFAULT_CONFIG_NAME"),hr=n(" attribute:"),Hs=d(),m(Qt.$$.fragment),Qs=d(),m(ft.$$.fragment),Ys=d(),W=s("h2"),ht=s("a"),$a=s("span"),m(Yt.$$.fragment),cr=d(),Ea=s("span"),mr=n("Download data files and organize splits"),Xs=d(),be=s("p"),_r=n("After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),Ws=d(),ke=s("ol"),qa=s("li"),gr=n("Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),Js=d(),m(Xt.$$.fragment),Ks=d(),m(ct.$$.fragment),Zs=d(),Wt=s("ol"),Jt=s("li"),mt=s("p"),xe=s("a"),yr=n("DownloadManager.download_and_extract()"),vr=n(" takes this dictionary and downloads the data files. Once the files are downloaded, use "),Ae=s("a"),wr=n("SplitGenerator"),$r=n(" to organize each split in the dataset. This is a simple class that contains:"),Er=d(),Kt=s("ul"),ja=s("li"),S=s("p"),qr=n("The "),ba=s("code"),jr=n("name"),br=n(" of each split. You should use the standard split names: "),ka=s("code"),kr=n("Split.TRAIN"),xr=n(", "),xa=s("code"),Ar=n("Split.TEST"),Ir=n(", and "),Aa=s("code"),Dr=n("Split.VALIDATION"),Lr=n("."),Sr=d(),Ia=s("li"),Ie=s("p"),Da=s("code"),Tr=n("gen_kwargs"),Cr=n(" provides the file paths to the data files to load for each split."),tl=d(),_t=s("p"),Or=n("Your "),La=s("code"),Pr=n("DatasetBuilder._split_generator()"),Nr=n(" should look like this now:"),el=d(),m(Zt.$$.fragment),al=d(),J=s("h2"),gt=s("a"),Sa=s("span"),m(te.$$.fragment),Rr=d(),Ta=s("span"),Ur=n("Generate samples"),sl=d(),De=s("p"),Gr=n("At this point, you have:"),ll=d(),B=s("ul"),Ca=s("li"),Vr=n("Added the dataset attributes."),Br=d(),Oa=s("li"),zr=n("Provided instructions for how to download the data files."),Fr=d(),Pa=s("li"),Mr=n("Organized the splits."),ol=d(),Le=s("p"),Hr=n("The next step is to actually generate the samples in each split."),rl=d(),yt=s("ol"),Na=s("li"),vt=s("p"),Ra=s("code"),Qr=n("DatasetBuilder._generate_examples"),Yr=n(" takes the file path provided by "),Ua=s("code"),Xr=n("gen_kwargs"),Wr=n(" to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),Jr=d(),Ga=s("li"),ee=s("p"),Kr=n("Your function should yield a tuple of an "),Va=s("code"),Zr=n("id_"),tn=n(", and an example from the dataset."),nl=d(),m(ae.$$.fragment),il=d(),K=s("h2"),wt=s("a"),Ba=s("span"),m(se.$$.fragment),en=d(),za=s("span"),an=n("Testing data and checksum metadata"),pl=d(),Se=s("p"),sn=n(`We strongly recommend adding testing data and checksum metadata to your dataset to verify and test its behavior. This ensures the generated dataset matches your expectations.
Testing data and checksum metadata are mandatory for datasets stored in the GitHub repository of the \u{1F917} Datasets library.`),dl=d(),m($t.$$.fragment),ul=d(),Z=s("h3"),Et=s("a"),Fa=s("span"),m(le.$$.fragment),ln=d(),Ma=s("span"),on=n("Dataset metadata"),fl=d(),Te=s("ol"),oe=s("li"),rn=n("Run the following command to create the metadata file, "),Ha=s("code"),nn=n("dataset_infos.json"),pn=n(". This will also test your new dataset loading script and make sure it works correctly."),hl=d(),m(re.$$.fragment),cl=d(),ne=s("ol"),N=s("li"),dn=n("If your dataset loading script passed the test, you should now have a "),Qa=s("code"),un=n("dataset_infos.json"),fn=n(" file in your dataset folder. This file contains information about the dataset, like its "),Ya=s("code"),hn=n("features"),cn=n(" and "),Xa=s("code"),mn=n("download_size"),_n=n("."),ml=d(),tt=s("h4"),qt=s("a"),Wa=s("span"),m(ie.$$.fragment),gn=d(),Ja=s("span"),yn=n("Automatic"),_l=d(),Ce=s("p"),vn=n("If your data file is one of the following formats, then you can automatically generate the dummy data:"),gl=d(),I=s("ul"),Ka=s("li"),wn=n("txt"),$n=d(),Za=s("li"),En=n("csv"),qn=d(),ts=s("li"),jn=n("tsv"),bn=d(),es=s("li"),kn=n("jsonl"),xn=d(),as=s("li"),An=n("json"),In=d(),ss=s("li"),Dn=n("xml"),yl=d(),Oe=s("p"),Ln=n("Run the command below to generate the dummy data:"),vl=d(),m(pe.$$.fragment),wl=d(),et=s("h4"),jt=s("a"),ls=s("span"),m(de.$$.fragment),Sn=d(),os=s("span"),Tn=n("Manual"),$l=d(),Pe=s("p"),Cn=n("If your data files are not among the supported formats, you will need to generate your dummy data manually. Run the command below to output detailed instructions on how to create the dummy data:"),El=d(),m(ue.$$.fragment),ql=d(),m(bt.$$.fragment),jl=d(),Ne=s("p"),On=n("There should be two new files in your dataset folder:"),bl=d(),kt=s("ul"),rs=s("li"),Re=s("p"),ns=s("code"),Pn=n("dataset_infos.json"),Nn=n(" stores the dataset metadata including the data file checksums, and the number of examples required to confirm the dataset was generated properly."),Rn=d(),is=s("li"),Ue=s("p"),ps=s("code"),Un=n("dummy_data.zip"),Gn=n(" is a file used to test the behavior of the loading script without having to download the full dataset."),kl=d(),at=s("h2"),xt=s("a"),ds=s("span"),m(fe.$$.fragment),Vn=d(),us=s("span"),Bn=n("Upload to the Hub"),xl=d(),z=s("p"),zn=n("Once your script is ready, you can "),Ge=s("a"),Fn=n("create a dataset card"),Mn=n(" and "),Ve=s("a"),Hn=n("upload it to the Hub"),Qn=n("."),Al=d(),Be=s("p"),Yn=n("Congrats ! you can now load your dataset using"),Il=d(),m(he.$$.fragment),this.h()},l(t){const r=nd('[data-svelte="svelte-1phssyn"]',document.head);h=l(r,"META",{name:!0,content:!0}),r.forEach(a),q=u(t),c=l(t,"H1",{class:!0});var ce=o(c);$=l(ce,"A",{id:!0,class:!0,href:!0});var fs=o($);k=l(fs,"SPAN",{});var hs=o(k);_(E.$$.fragment,hs),hs.forEach(a),fs.forEach(a),b=u(ce),x=l(ce,"SPAN",{});var cs=o(x);D=i(cs,"Create a dataset loading script"),cs.forEach(a),ce.forEach(a),j=u(t),C=l(t,"P",{});var ms=o(C);M=i(ms,"Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),ms.forEach(a),ws=u(t),me=l(t,"P",{});var ei=o(me);ao=i(ei,"The script can download data files from any website, or from the same dataset repository."),ei.forEach(a),$s=u(t),U=l(t,"P",{});var ze=o(U);so=i(ze,"Any dataset script, for example "),Ye=l(ze,"CODE",{});var ai=o(Ye);lo=i(ai,"my_dataset.py"),ai.forEach(a),oo=i(ze,", can be placed in a folder or a repository named "),Xe=l(ze,"CODE",{});var si=o(Xe);ro=i(si,"my_dataset"),si.forEach(a),no=i(ze," and be loaded with:"),ze.forEach(a),Es=u(t),_(It.$$.fragment,t),qs=u(t),_(Dt.$$.fragment,t),js=u(t),_e=l(t,"P",{});var li=o(_e);io=i(li,"The following guide includes instructions for dataset scripts for how to:"),li.forEach(a),bs=u(t),A=l(t,"UL",{});var O=o(A);We=l(O,"LI",{});var oi=o(We);po=i(oi,"Add dataset metadata."),oi.forEach(a),uo=u(O),Je=l(O,"LI",{});var ri=o(Je);fo=i(ri,"Download data files."),ri.forEach(a),ho=u(O),Ke=l(O,"LI",{});var ni=o(Ke);co=i(ni,"Generate samples."),ni.forEach(a),mo=u(O),Ze=l(O,"LI",{});var ii=o(Ze);_o=i(ii,"Test if your dataset was generated correctly."),ii.forEach(a),go=u(O),ta=l(O,"LI",{});var pi=o(ta);yo=i(pi,"Create a Dataset card."),pi.forEach(a),vo=u(O),ea=l(O,"LI",{});var di=o(ea);wo=i(di,"Upload a dataset to the Hugging Face Hub or GitHub."),di.forEach(a),O.forEach(a),ks=u(t),st=l(t,"P",{});var Ll=o(st);$o=i(Ll,"Open the "),Lt=l(Ll,"A",{href:!0,rel:!0});var ui=o(Lt);Eo=i(ui,"SQuAD dataset loading script"),ui.forEach(a),qo=i(Ll," template to follow along on how to share a dataset."),Ll.forEach(a),xs=u(t),_(lt.$$.fragment,t),As=u(t),H=l(t,"H2",{class:!0});var Sl=o(H);ot=l(Sl,"A",{id:!0,class:!0,href:!0});var fi=o(ot);aa=l(fi,"SPAN",{});var hi=o(aa);_(St.$$.fragment,hi),hi.forEach(a),fi.forEach(a),jo=u(Sl),sa=l(Sl,"SPAN",{});var ci=o(sa);bo=i(ci,"Add dataset attributes"),ci.forEach(a),Sl.forEach(a),Is=u(t),rt=l(t,"P",{});var Tl=o(rt);ko=i(Tl,"The first step is to add some information, or attributes, about your dataset in "),la=l(Tl,"CODE",{});var mi=o(la);xo=i(mi,"DatasetBuilder._info()"),mi.forEach(a),Ao=i(Tl,". The most important attributes you should specify are:"),Tl.forEach(a),Ds=u(t),nt=l(t,"OL",{});var Cl=o(nt);oa=l(Cl,"LI",{});var _i=o(oa);ge=l(_i,"P",{});var Xn=o(ge);ra=l(Xn,"CODE",{});var gi=o(ra);Io=i(gi,"DatasetInfo.description"),gi.forEach(a),Do=i(Xn," provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),Xn.forEach(a),_i.forEach(a),Lo=u(Cl),na=l(Cl,"LI",{});var yi=o(na);it=l(yi,"P",{});var _s=o(it);ia=l(_s,"CODE",{});var vi=o(ia);So=i(vi,"DatasetInfo.features"),vi.forEach(a),To=i(_s," defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),ye=l(_s,"A",{href:!0});var wi=o(ye);Co=i(wi,"Features"),wi.forEach(a),Oo=i(_s," for a full list of feature types you can use."),_s.forEach(a),yi.forEach(a),Cl.forEach(a),Ls=u(t),_(Tt.$$.fragment,t),Ss=u(t),Q=l(t,"OL",{start:!0});var Ol=o(Q);pa=l(Ol,"LI",{});var $i=o(pa);ve=l($i,"P",{});var Wn=o(ve);da=l(Wn,"CODE",{});var Ei=o(da);Po=i(Ei,"DatasetInfo.homepage"),Ei.forEach(a),No=i(Wn," contains the URL to the dataset homepage so users can find more details about the dataset."),Wn.forEach(a),$i.forEach(a),Ro=u(Ol),ua=l(Ol,"LI",{});var qi=o(ua);we=l(qi,"P",{});var Jn=o(we);fa=l(Jn,"CODE",{});var ji=o(fa);Uo=i(ji,"DatasetInfo.citation"),ji.forEach(a),Go=i(Jn," contains a BibTeX citation for the dataset."),Jn.forEach(a),qi.forEach(a),Ol.forEach(a),Ts=u(t),$e=l(t,"P",{});var bi=o($e);Vo=i(bi,"After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),bi.forEach(a),Cs=u(t),_(Ct.$$.fragment,t),Os=u(t),Y=l(t,"H3",{class:!0});var Pl=o(Y);pt=l(Pl,"A",{id:!0,class:!0,href:!0});var ki=o(pt);ha=l(ki,"SPAN",{});var xi=o(ha);_(Ot.$$.fragment,xi),xi.forEach(a),ki.forEach(a),Bo=u(Pl),ca=l(Pl,"SPAN",{});var Ai=o(ca);zo=i(Ai,"Multiple configurations"),Ai.forEach(a),Pl.forEach(a),Ps=u(t),G=l(t,"P",{});var Fe=o(G);Fo=i(Fe,"In some cases, your dataset may have multiple configurations. For example, the "),Pt=l(Fe,"A",{href:!0,rel:!0});var Ii=o(Pt);Mo=i(Ii,"SuperGLUE"),Ii.forEach(a),Ho=i(Fe," dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),Ee=l(Fe,"A",{href:!0});var Di=o(Ee);Qo=i(Di,"BuilderConfig"),Di.forEach(a),Yo=i(Fe," which allows you to create different configurations for the user to select from."),Fe.forEach(a),Ns=u(t),dt=l(t,"P",{});var Nl=o(dt);Xo=i(Nl,"Let\u2019s study the "),Nt=l(Nl,"A",{href:!0,rel:!0});var Li=o(Nt);Wo=i(Li,"SuperGLUE loading script"),Li.forEach(a),Jo=i(Nl," to see how you can define several configurations."),Nl.forEach(a),Rs=u(t),qe=l(t,"OL",{});var Si=o(qe);Rt=l(Si,"LI",{});var Rl=o(Rt);Ko=i(Rl,"Create a "),je=l(Rl,"A",{href:!0});var Ti=o(je);Zo=i(Ti,"BuilderConfig"),Ti.forEach(a),tr=i(Rl," subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Rl.forEach(a),Si.forEach(a),Us=u(t),_(Ut.$$.fragment,t),Gs=u(t),Gt=l(t,"OL",{start:!0});var Ci=o(Gt);Vt=l(Ci,"LI",{});var Ul=o(Vt);er=i(Ul,"Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),ma=l(Ul,"CODE",{});var Oi=o(ma);ar=i(Oi,"DatasetBuilder.BUILDER_CONFIGS"),Oi.forEach(a),sr=i(Ul,":"),Ul.forEach(a),Ci.forEach(a),Vs=u(t),_(Bt.$$.fragment,t),Bs=u(t),zt=l(t,"OL",{start:!0});var Pi=o(zt);Ft=l(Pi,"LI",{});var Gl=o(Ft);lr=i(Gl,"Now, users can load a specific configuration of the dataset with the configuration "),_a=l(Gl,"CODE",{});var Ni=o(_a);or=i(Ni,"name"),Ni.forEach(a),rr=i(Gl,":"),Gl.forEach(a),Pi.forEach(a),zs=u(t),_(Mt.$$.fragment,t),Fs=u(t),X=l(t,"H3",{class:!0});var Vl=o(X);ut=l(Vl,"A",{id:!0,class:!0,href:!0});var Ri=o(ut);ga=l(Ri,"SPAN",{});var Ui=o(ga);_(Ht.$$.fragment,Ui),Ui.forEach(a),Ri.forEach(a),nr=u(Vl),ya=l(Vl,"SPAN",{});var Gi=o(ya);ir=i(Gi,"Default configurations"),Gi.forEach(a),Vl.forEach(a),Ms=u(t),V=l(t,"P",{});var Me=o(V);pr=i(Me,"Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),va=l(Me,"CODE",{});var Vi=o(va);dr=i(Vi,"ValueError"),Vi.forEach(a),ur=i(Me,", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),wa=l(Me,"CODE",{});var Bi=o(wa);fr=i(Bi,"DEFAULT_CONFIG_NAME"),Bi.forEach(a),hr=i(Me," attribute:"),Me.forEach(a),Hs=u(t),_(Qt.$$.fragment,t),Qs=u(t),_(ft.$$.fragment,t),Ys=u(t),W=l(t,"H2",{class:!0});var Bl=o(W);ht=l(Bl,"A",{id:!0,class:!0,href:!0});var zi=o(ht);$a=l(zi,"SPAN",{});var Fi=o($a);_(Yt.$$.fragment,Fi),Fi.forEach(a),zi.forEach(a),cr=u(Bl),Ea=l(Bl,"SPAN",{});var Mi=o(Ea);mr=i(Mi,"Download data files and organize splits"),Mi.forEach(a),Bl.forEach(a),Xs=u(t),be=l(t,"P",{});var Hi=o(be);_r=i(Hi,"After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),Hi.forEach(a),Ws=u(t),ke=l(t,"OL",{});var Qi=o(ke);qa=l(Qi,"LI",{});var Yi=o(qa);gr=i(Yi,"Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),Yi.forEach(a),Qi.forEach(a),Js=u(t),_(Xt.$$.fragment,t),Ks=u(t),_(ct.$$.fragment,t),Zs=u(t),Wt=l(t,"OL",{start:!0});var Xi=o(Wt);Jt=l(Xi,"LI",{});var zl=o(Jt);mt=l(zl,"P",{});var gs=o(mt);xe=l(gs,"A",{href:!0});var Wi=o(xe);yr=i(Wi,"DownloadManager.download_and_extract()"),Wi.forEach(a),vr=i(gs," takes this dictionary and downloads the data files. Once the files are downloaded, use "),Ae=l(gs,"A",{href:!0});var Ji=o(Ae);wr=i(Ji,"SplitGenerator"),Ji.forEach(a),$r=i(gs," to organize each split in the dataset. This is a simple class that contains:"),gs.forEach(a),Er=u(zl),Kt=l(zl,"UL",{});var Fl=o(Kt);ja=l(Fl,"LI",{});var Ki=o(ja);S=l(Ki,"P",{});var F=o(S);qr=i(F,"The "),ba=l(F,"CODE",{});var Zi=o(ba);jr=i(Zi,"name"),Zi.forEach(a),br=i(F," of each split. You should use the standard split names: "),ka=l(F,"CODE",{});var tp=o(ka);kr=i(tp,"Split.TRAIN"),tp.forEach(a),xr=i(F,", "),xa=l(F,"CODE",{});var ep=o(xa);Ar=i(ep,"Split.TEST"),ep.forEach(a),Ir=i(F,", and "),Aa=l(F,"CODE",{});var ap=o(Aa);Dr=i(ap,"Split.VALIDATION"),ap.forEach(a),Lr=i(F,"."),F.forEach(a),Ki.forEach(a),Sr=u(Fl),Ia=l(Fl,"LI",{});var sp=o(Ia);Ie=l(sp,"P",{});var Kn=o(Ie);Da=l(Kn,"CODE",{});var lp=o(Da);Tr=i(lp,"gen_kwargs"),lp.forEach(a),Cr=i(Kn," provides the file paths to the data files to load for each split."),Kn.forEach(a),sp.forEach(a),Fl.forEach(a),zl.forEach(a),Xi.forEach(a),tl=u(t),_t=l(t,"P",{});var Ml=o(_t);Or=i(Ml,"Your "),La=l(Ml,"CODE",{});var op=o(La);Pr=i(op,"DatasetBuilder._split_generator()"),op.forEach(a),Nr=i(Ml," should look like this now:"),Ml.forEach(a),el=u(t),_(Zt.$$.fragment,t),al=u(t),J=l(t,"H2",{class:!0});var Hl=o(J);gt=l(Hl,"A",{id:!0,class:!0,href:!0});var rp=o(gt);Sa=l(rp,"SPAN",{});var np=o(Sa);_(te.$$.fragment,np),np.forEach(a),rp.forEach(a),Rr=u(Hl),Ta=l(Hl,"SPAN",{});var ip=o(Ta);Ur=i(ip,"Generate samples"),ip.forEach(a),Hl.forEach(a),sl=u(t),De=l(t,"P",{});var pp=o(De);Gr=i(pp,"At this point, you have:"),pp.forEach(a),ll=u(t),B=l(t,"UL",{});var He=o(B);Ca=l(He,"LI",{});var dp=o(Ca);Vr=i(dp,"Added the dataset attributes."),dp.forEach(a),Br=u(He),Oa=l(He,"LI",{});var up=o(Oa);zr=i(up,"Provided instructions for how to download the data files."),up.forEach(a),Fr=u(He),Pa=l(He,"LI",{});var fp=o(Pa);Mr=i(fp,"Organized the splits."),fp.forEach(a),He.forEach(a),ol=u(t),Le=l(t,"P",{});var hp=o(Le);Hr=i(hp,"The next step is to actually generate the samples in each split."),hp.forEach(a),rl=u(t),yt=l(t,"OL",{});var Ql=o(yt);Na=l(Ql,"LI",{});var cp=o(Na);vt=l(cp,"P",{});var ys=o(vt);Ra=l(ys,"CODE",{});var mp=o(Ra);Qr=i(mp,"DatasetBuilder._generate_examples"),mp.forEach(a),Yr=i(ys," takes the file path provided by "),Ua=l(ys,"CODE",{});var _p=o(Ua);Xr=i(_p,"gen_kwargs"),_p.forEach(a),Wr=i(ys," to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),ys.forEach(a),cp.forEach(a),Jr=u(Ql),Ga=l(Ql,"LI",{});var gp=o(Ga);ee=l(gp,"P",{});var Yl=o(ee);Kr=i(Yl,"Your function should yield a tuple of an "),Va=l(Yl,"CODE",{});var yp=o(Va);Zr=i(yp,"id_"),yp.forEach(a),tn=i(Yl,", and an example from the dataset."),Yl.forEach(a),gp.forEach(a),Ql.forEach(a),nl=u(t),_(ae.$$.fragment,t),il=u(t),K=l(t,"H2",{class:!0});var Xl=o(K);wt=l(Xl,"A",{id:!0,class:!0,href:!0});var vp=o(wt);Ba=l(vp,"SPAN",{});var wp=o(Ba);_(se.$$.fragment,wp),wp.forEach(a),vp.forEach(a),en=u(Xl),za=l(Xl,"SPAN",{});var $p=o(za);an=i($p,"Testing data and checksum metadata"),$p.forEach(a),Xl.forEach(a),pl=u(t),Se=l(t,"P",{});var Ep=o(Se);sn=i(Ep,`We strongly recommend adding testing data and checksum metadata to your dataset to verify and test its behavior. This ensures the generated dataset matches your expectations.
Testing data and checksum metadata are mandatory for datasets stored in the GitHub repository of the \u{1F917} Datasets library.`),Ep.forEach(a),dl=u(t),_($t.$$.fragment,t),ul=u(t),Z=l(t,"H3",{class:!0});var Wl=o(Z);Et=l(Wl,"A",{id:!0,class:!0,href:!0});var qp=o(Et);Fa=l(qp,"SPAN",{});var jp=o(Fa);_(le.$$.fragment,jp),jp.forEach(a),qp.forEach(a),ln=u(Wl),Ma=l(Wl,"SPAN",{});var bp=o(Ma);on=i(bp,"Dataset metadata"),bp.forEach(a),Wl.forEach(a),fl=u(t),Te=l(t,"OL",{});var kp=o(Te);oe=l(kp,"LI",{});var Jl=o(oe);rn=i(Jl,"Run the following command to create the metadata file, "),Ha=l(Jl,"CODE",{});var xp=o(Ha);nn=i(xp,"dataset_infos.json"),xp.forEach(a),pn=i(Jl,". This will also test your new dataset loading script and make sure it works correctly."),Jl.forEach(a),kp.forEach(a),hl=u(t),_(re.$$.fragment,t),cl=u(t),ne=l(t,"OL",{start:!0});var Ap=o(ne);N=l(Ap,"LI",{});var At=o(N);dn=i(At,"If your dataset loading script passed the test, you should now have a "),Qa=l(At,"CODE",{});var Ip=o(Qa);un=i(Ip,"dataset_infos.json"),Ip.forEach(a),fn=i(At," file in your dataset folder. This file contains information about the dataset, like its "),Ya=l(At,"CODE",{});var Dp=o(Ya);hn=i(Dp,"features"),Dp.forEach(a),cn=i(At," and "),Xa=l(At,"CODE",{});var Lp=o(Xa);mn=i(Lp,"download_size"),Lp.forEach(a),_n=i(At,"."),At.forEach(a),Ap.forEach(a),ml=u(t),tt=l(t,"H4",{class:!0});var Kl=o(tt);qt=l(Kl,"A",{id:!0,class:!0,href:!0});var Sp=o(qt);Wa=l(Sp,"SPAN",{});var Tp=o(Wa);_(ie.$$.fragment,Tp),Tp.forEach(a),Sp.forEach(a),gn=u(Kl),Ja=l(Kl,"SPAN",{});var Cp=o(Ja);yn=i(Cp,"Automatic"),Cp.forEach(a),Kl.forEach(a),_l=u(t),Ce=l(t,"P",{});var Op=o(Ce);vn=i(Op,"If your data file is one of the following formats, then you can automatically generate the dummy data:"),Op.forEach(a),gl=u(t),I=l(t,"UL",{});var P=o(I);Ka=l(P,"LI",{});var Pp=o(Ka);wn=i(Pp,"txt"),Pp.forEach(a),$n=u(P),Za=l(P,"LI",{});var Np=o(Za);En=i(Np,"csv"),Np.forEach(a),qn=u(P),ts=l(P,"LI",{});var Rp=o(ts);jn=i(Rp,"tsv"),Rp.forEach(a),bn=u(P),es=l(P,"LI",{});var Up=o(es);kn=i(Up,"jsonl"),Up.forEach(a),xn=u(P),as=l(P,"LI",{});var Gp=o(as);An=i(Gp,"json"),Gp.forEach(a),In=u(P),ss=l(P,"LI",{});var Vp=o(ss);Dn=i(Vp,"xml"),Vp.forEach(a),P.forEach(a),yl=u(t),Oe=l(t,"P",{});var Bp=o(Oe);Ln=i(Bp,"Run the command below to generate the dummy data:"),Bp.forEach(a),vl=u(t),_(pe.$$.fragment,t),wl=u(t),et=l(t,"H4",{class:!0});var Zl=o(et);jt=l(Zl,"A",{id:!0,class:!0,href:!0});var zp=o(jt);ls=l(zp,"SPAN",{});var Fp=o(ls);_(de.$$.fragment,Fp),Fp.forEach(a),zp.forEach(a),Sn=u(Zl),os=l(Zl,"SPAN",{});var Mp=o(os);Tn=i(Mp,"Manual"),Mp.forEach(a),Zl.forEach(a),$l=u(t),Pe=l(t,"P",{});var Hp=o(Pe);Cn=i(Hp,"If your data files are not among the supported formats, you will need to generate your dummy data manually. Run the command below to output detailed instructions on how to create the dummy data:"),Hp.forEach(a),El=u(t),_(ue.$$.fragment,t),ql=u(t),_(bt.$$.fragment,t),jl=u(t),Ne=l(t,"P",{});var Qp=o(Ne);On=i(Qp,"There should be two new files in your dataset folder:"),Qp.forEach(a),bl=u(t),kt=l(t,"UL",{});var to=o(kt);rs=l(to,"LI",{});var Yp=o(rs);Re=l(Yp,"P",{});var Zn=o(Re);ns=l(Zn,"CODE",{});var Xp=o(ns);Pn=i(Xp,"dataset_infos.json"),Xp.forEach(a),Nn=i(Zn," stores the dataset metadata including the data file checksums, and the number of examples required to confirm the dataset was generated properly."),Zn.forEach(a),Yp.forEach(a),Rn=u(to),is=l(to,"LI",{});var Wp=o(is);Ue=l(Wp,"P",{});var ti=o(Ue);ps=l(ti,"CODE",{});var Jp=o(ps);Un=i(Jp,"dummy_data.zip"),Jp.forEach(a),Gn=i(ti," is a file used to test the behavior of the loading script without having to download the full dataset."),ti.forEach(a),Wp.forEach(a),to.forEach(a),kl=u(t),at=l(t,"H2",{class:!0});var eo=o(at);xt=l(eo,"A",{id:!0,class:!0,href:!0});var Kp=o(xt);ds=l(Kp,"SPAN",{});var Zp=o(ds);_(fe.$$.fragment,Zp),Zp.forEach(a),Kp.forEach(a),Vn=u(eo),us=l(eo,"SPAN",{});var td=o(us);Bn=i(td,"Upload to the Hub"),td.forEach(a),eo.forEach(a),xl=u(t),z=l(t,"P",{});var Qe=o(z);zn=i(Qe,"Once your script is ready, you can "),Ge=l(Qe,"A",{href:!0});var ed=o(Ge);Fn=i(ed,"create a dataset card"),ed.forEach(a),Mn=i(Qe," and "),Ve=l(Qe,"A",{href:!0});var ad=o(Ve);Hn=i(ad,"upload it to the Hub"),ad.forEach(a),Qn=i(Qe,"."),Qe.forEach(a),Al=u(t),Be=l(t,"P",{});var sd=o(Be);Yn=i(sd,"Congrats ! you can now load your dataset using"),sd.forEach(a),Il=u(t),_(he.$$.fragment,t),this.h()},h(){f(h,"name","hf:doc:metadata"),f(h,"content",JSON.stringify(md)),f($,"id","create-a-dataset-loading-script"),f($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f($,"href","#create-a-dataset-loading-script"),f(c,"class","relative group"),f(Lt,"href","https://huggingface.co/datasets/squad/blob/main/squad.py"),f(Lt,"rel","nofollow"),f(ot,"id","add-dataset-attributes"),f(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ot,"href","#add-dataset-attributes"),f(H,"class","relative group"),f(ye,"href","/docs/datasets/pr_4625/en/package_reference/main_classes#datasets.Features"),f(Q,"start","3"),f(pt,"id","multiple-configurations"),f(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(pt,"href","#multiple-configurations"),f(Y,"class","relative group"),f(Pt,"href","https://huggingface.co/datasets/super_glue"),f(Pt,"rel","nofollow"),f(Ee,"href","/docs/datasets/pr_4625/en/package_reference/builder_classes#datasets.BuilderConfig"),f(Nt,"href","https://github.com/huggingface/datasets/blob/master/datasets/super_glue/super_glue.py"),f(Nt,"rel","nofollow"),f(je,"href","/docs/datasets/pr_4625/en/package_reference/builder_classes#datasets.BuilderConfig"),f(Gt,"start","2"),f(zt,"start","3"),f(ut,"id","default-configurations"),f(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ut,"href","#default-configurations"),f(X,"class","relative group"),f(ht,"id","download-data-files-and-organize-splits"),f(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ht,"href","#download-data-files-and-organize-splits"),f(W,"class","relative group"),f(xe,"href","/docs/datasets/pr_4625/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract"),f(Ae,"href","/docs/datasets/pr_4625/en/package_reference/builder_classes#datasets.SplitGenerator"),f(Wt,"start","2"),f(gt,"id","generate-samples"),f(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(gt,"href","#generate-samples"),f(J,"class","relative group"),f(wt,"id","testing-data-and-checksum-metadata"),f(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(wt,"href","#testing-data-and-checksum-metadata"),f(K,"class","relative group"),f(Et,"id","dataset-metadata"),f(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Et,"href","#dataset-metadata"),f(Z,"class","relative group"),f(ne,"start","2"),f(qt,"id","automatic"),f(qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(qt,"href","#automatic"),f(tt,"class","relative group"),f(jt,"id","manual"),f(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(jt,"href","#manual"),f(et,"class","relative group"),f(xt,"id","upload-to-the-hub"),f(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xt,"href","#upload-to-the-hub"),f(at,"class","relative group"),f(Ge,"href","dataset_card"),f(Ve,"href","share")},m(t,r){e(document.head,h),p(t,q,r),p(t,c,r),e(c,$),e($,k),g(E,k,null),e(c,b),e(c,x),e(x,D),p(t,j,r),p(t,C,r),e(C,M),p(t,ws,r),p(t,me,r),e(me,ao),p(t,$s,r),p(t,U,r),e(U,so),e(U,Ye),e(Ye,lo),e(U,oo),e(U,Xe),e(Xe,ro),e(U,no),p(t,Es,r),g(It,t,r),p(t,qs,r),g(Dt,t,r),p(t,js,r),p(t,_e,r),e(_e,io),p(t,bs,r),p(t,A,r),e(A,We),e(We,po),e(A,uo),e(A,Je),e(Je,fo),e(A,ho),e(A,Ke),e(Ke,co),e(A,mo),e(A,Ze),e(Ze,_o),e(A,go),e(A,ta),e(ta,yo),e(A,vo),e(A,ea),e(ea,wo),p(t,ks,r),p(t,st,r),e(st,$o),e(st,Lt),e(Lt,Eo),e(st,qo),p(t,xs,r),g(lt,t,r),p(t,As,r),p(t,H,r),e(H,ot),e(ot,aa),g(St,aa,null),e(H,jo),e(H,sa),e(sa,bo),p(t,Is,r),p(t,rt,r),e(rt,ko),e(rt,la),e(la,xo),e(rt,Ao),p(t,Ds,r),p(t,nt,r),e(nt,oa),e(oa,ge),e(ge,ra),e(ra,Io),e(ge,Do),e(nt,Lo),e(nt,na),e(na,it),e(it,ia),e(ia,So),e(it,To),e(it,ye),e(ye,Co),e(it,Oo),p(t,Ls,r),g(Tt,t,r),p(t,Ss,r),p(t,Q,r),e(Q,pa),e(pa,ve),e(ve,da),e(da,Po),e(ve,No),e(Q,Ro),e(Q,ua),e(ua,we),e(we,fa),e(fa,Uo),e(we,Go),p(t,Ts,r),p(t,$e,r),e($e,Vo),p(t,Cs,r),g(Ct,t,r),p(t,Os,r),p(t,Y,r),e(Y,pt),e(pt,ha),g(Ot,ha,null),e(Y,Bo),e(Y,ca),e(ca,zo),p(t,Ps,r),p(t,G,r),e(G,Fo),e(G,Pt),e(Pt,Mo),e(G,Ho),e(G,Ee),e(Ee,Qo),e(G,Yo),p(t,Ns,r),p(t,dt,r),e(dt,Xo),e(dt,Nt),e(Nt,Wo),e(dt,Jo),p(t,Rs,r),p(t,qe,r),e(qe,Rt),e(Rt,Ko),e(Rt,je),e(je,Zo),e(Rt,tr),p(t,Us,r),g(Ut,t,r),p(t,Gs,r),p(t,Gt,r),e(Gt,Vt),e(Vt,er),e(Vt,ma),e(ma,ar),e(Vt,sr),p(t,Vs,r),g(Bt,t,r),p(t,Bs,r),p(t,zt,r),e(zt,Ft),e(Ft,lr),e(Ft,_a),e(_a,or),e(Ft,rr),p(t,zs,r),g(Mt,t,r),p(t,Fs,r),p(t,X,r),e(X,ut),e(ut,ga),g(Ht,ga,null),e(X,nr),e(X,ya),e(ya,ir),p(t,Ms,r),p(t,V,r),e(V,pr),e(V,va),e(va,dr),e(V,ur),e(V,wa),e(wa,fr),e(V,hr),p(t,Hs,r),g(Qt,t,r),p(t,Qs,r),g(ft,t,r),p(t,Ys,r),p(t,W,r),e(W,ht),e(ht,$a),g(Yt,$a,null),e(W,cr),e(W,Ea),e(Ea,mr),p(t,Xs,r),p(t,be,r),e(be,_r),p(t,Ws,r),p(t,ke,r),e(ke,qa),e(qa,gr),p(t,Js,r),g(Xt,t,r),p(t,Ks,r),g(ct,t,r),p(t,Zs,r),p(t,Wt,r),e(Wt,Jt),e(Jt,mt),e(mt,xe),e(xe,yr),e(mt,vr),e(mt,Ae),e(Ae,wr),e(mt,$r),e(Jt,Er),e(Jt,Kt),e(Kt,ja),e(ja,S),e(S,qr),e(S,ba),e(ba,jr),e(S,br),e(S,ka),e(ka,kr),e(S,xr),e(S,xa),e(xa,Ar),e(S,Ir),e(S,Aa),e(Aa,Dr),e(S,Lr),e(Kt,Sr),e(Kt,Ia),e(Ia,Ie),e(Ie,Da),e(Da,Tr),e(Ie,Cr),p(t,tl,r),p(t,_t,r),e(_t,Or),e(_t,La),e(La,Pr),e(_t,Nr),p(t,el,r),g(Zt,t,r),p(t,al,r),p(t,J,r),e(J,gt),e(gt,Sa),g(te,Sa,null),e(J,Rr),e(J,Ta),e(Ta,Ur),p(t,sl,r),p(t,De,r),e(De,Gr),p(t,ll,r),p(t,B,r),e(B,Ca),e(Ca,Vr),e(B,Br),e(B,Oa),e(Oa,zr),e(B,Fr),e(B,Pa),e(Pa,Mr),p(t,ol,r),p(t,Le,r),e(Le,Hr),p(t,rl,r),p(t,yt,r),e(yt,Na),e(Na,vt),e(vt,Ra),e(Ra,Qr),e(vt,Yr),e(vt,Ua),e(Ua,Xr),e(vt,Wr),e(yt,Jr),e(yt,Ga),e(Ga,ee),e(ee,Kr),e(ee,Va),e(Va,Zr),e(ee,tn),p(t,nl,r),g(ae,t,r),p(t,il,r),p(t,K,r),e(K,wt),e(wt,Ba),g(se,Ba,null),e(K,en),e(K,za),e(za,an),p(t,pl,r),p(t,Se,r),e(Se,sn),p(t,dl,r),g($t,t,r),p(t,ul,r),p(t,Z,r),e(Z,Et),e(Et,Fa),g(le,Fa,null),e(Z,ln),e(Z,Ma),e(Ma,on),p(t,fl,r),p(t,Te,r),e(Te,oe),e(oe,rn),e(oe,Ha),e(Ha,nn),e(oe,pn),p(t,hl,r),g(re,t,r),p(t,cl,r),p(t,ne,r),e(ne,N),e(N,dn),e(N,Qa),e(Qa,un),e(N,fn),e(N,Ya),e(Ya,hn),e(N,cn),e(N,Xa),e(Xa,mn),e(N,_n),p(t,ml,r),p(t,tt,r),e(tt,qt),e(qt,Wa),g(ie,Wa,null),e(tt,gn),e(tt,Ja),e(Ja,yn),p(t,_l,r),p(t,Ce,r),e(Ce,vn),p(t,gl,r),p(t,I,r),e(I,Ka),e(Ka,wn),e(I,$n),e(I,Za),e(Za,En),e(I,qn),e(I,ts),e(ts,jn),e(I,bn),e(I,es),e(es,kn),e(I,xn),e(I,as),e(as,An),e(I,In),e(I,ss),e(ss,Dn),p(t,yl,r),p(t,Oe,r),e(Oe,Ln),p(t,vl,r),g(pe,t,r),p(t,wl,r),p(t,et,r),e(et,jt),e(jt,ls),g(de,ls,null),e(et,Sn),e(et,os),e(os,Tn),p(t,$l,r),p(t,Pe,r),e(Pe,Cn),p(t,El,r),g(ue,t,r),p(t,ql,r),g(bt,t,r),p(t,jl,r),p(t,Ne,r),e(Ne,On),p(t,bl,r),p(t,kt,r),e(kt,rs),e(rs,Re),e(Re,ns),e(ns,Pn),e(Re,Nn),e(kt,Rn),e(kt,is),e(is,Ue),e(Ue,ps),e(ps,Un),e(Ue,Gn),p(t,kl,r),p(t,at,r),e(at,xt),e(xt,ds),g(fe,ds,null),e(at,Vn),e(at,us),e(us,Bn),p(t,xl,r),p(t,z,r),e(z,zn),e(z,Ge),e(Ge,Fn),e(z,Mn),e(z,Ve),e(Ve,Hn),e(z,Qn),p(t,Al,r),p(t,Be,r),e(Be,Yn),p(t,Il,r),g(he,t,r),Dl=!0},p(t,[r]){const ce={};r&2&&(ce.$$scope={dirty:r,ctx:t}),lt.$set(ce);const fs={};r&2&&(fs.$$scope={dirty:r,ctx:t}),ft.$set(fs);const hs={};r&2&&(hs.$$scope={dirty:r,ctx:t}),ct.$set(hs);const cs={};r&2&&(cs.$$scope={dirty:r,ctx:t}),$t.$set(cs);const ms={};r&2&&(ms.$$scope={dirty:r,ctx:t}),bt.$set(ms)},i(t){Dl||(y(E.$$.fragment,t),y(It.$$.fragment,t),y(Dt.$$.fragment,t),y(lt.$$.fragment,t),y(St.$$.fragment,t),y(Tt.$$.fragment,t),y(Ct.$$.fragment,t),y(Ot.$$.fragment,t),y(Ut.$$.fragment,t),y(Bt.$$.fragment,t),y(Mt.$$.fragment,t),y(Ht.$$.fragment,t),y(Qt.$$.fragment,t),y(ft.$$.fragment,t),y(Yt.$$.fragment,t),y(Xt.$$.fragment,t),y(ct.$$.fragment,t),y(Zt.$$.fragment,t),y(te.$$.fragment,t),y(ae.$$.fragment,t),y(se.$$.fragment,t),y($t.$$.fragment,t),y(le.$$.fragment,t),y(re.$$.fragment,t),y(ie.$$.fragment,t),y(pe.$$.fragment,t),y(de.$$.fragment,t),y(ue.$$.fragment,t),y(bt.$$.fragment,t),y(fe.$$.fragment,t),y(he.$$.fragment,t),Dl=!0)},o(t){v(E.$$.fragment,t),v(It.$$.fragment,t),v(Dt.$$.fragment,t),v(lt.$$.fragment,t),v(St.$$.fragment,t),v(Tt.$$.fragment,t),v(Ct.$$.fragment,t),v(Ot.$$.fragment,t),v(Ut.$$.fragment,t),v(Bt.$$.fragment,t),v(Mt.$$.fragment,t),v(Ht.$$.fragment,t),v(Qt.$$.fragment,t),v(ft.$$.fragment,t),v(Yt.$$.fragment,t),v(Xt.$$.fragment,t),v(ct.$$.fragment,t),v(Zt.$$.fragment,t),v(te.$$.fragment,t),v(ae.$$.fragment,t),v(se.$$.fragment,t),v($t.$$.fragment,t),v(le.$$.fragment,t),v(re.$$.fragment,t),v(ie.$$.fragment,t),v(pe.$$.fragment,t),v(de.$$.fragment,t),v(ue.$$.fragment,t),v(bt.$$.fragment,t),v(fe.$$.fragment,t),v(he.$$.fragment,t),Dl=!1},d(t){a(h),t&&a(q),t&&a(c),w(E),t&&a(j),t&&a(C),t&&a(ws),t&&a(me),t&&a($s),t&&a(U),t&&a(Es),w(It,t),t&&a(qs),w(Dt,t),t&&a(js),t&&a(_e),t&&a(bs),t&&a(A),t&&a(ks),t&&a(st),t&&a(xs),w(lt,t),t&&a(As),t&&a(H),w(St),t&&a(Is),t&&a(rt),t&&a(Ds),t&&a(nt),t&&a(Ls),w(Tt,t),t&&a(Ss),t&&a(Q),t&&a(Ts),t&&a($e),t&&a(Cs),w(Ct,t),t&&a(Os),t&&a(Y),w(Ot),t&&a(Ps),t&&a(G),t&&a(Ns),t&&a(dt),t&&a(Rs),t&&a(qe),t&&a(Us),w(Ut,t),t&&a(Gs),t&&a(Gt),t&&a(Vs),w(Bt,t),t&&a(Bs),t&&a(zt),t&&a(zs),w(Mt,t),t&&a(Fs),t&&a(X),w(Ht),t&&a(Ms),t&&a(V),t&&a(Hs),w(Qt,t),t&&a(Qs),w(ft,t),t&&a(Ys),t&&a(W),w(Yt),t&&a(Xs),t&&a(be),t&&a(Ws),t&&a(ke),t&&a(Js),w(Xt,t),t&&a(Ks),w(ct,t),t&&a(Zs),t&&a(Wt),t&&a(tl),t&&a(_t),t&&a(el),w(Zt,t),t&&a(al),t&&a(J),w(te),t&&a(sl),t&&a(De),t&&a(ll),t&&a(B),t&&a(ol),t&&a(Le),t&&a(rl),t&&a(yt),t&&a(nl),w(ae,t),t&&a(il),t&&a(K),w(se),t&&a(pl),t&&a(Se),t&&a(dl),w($t,t),t&&a(ul),t&&a(Z),w(le),t&&a(fl),t&&a(Te),t&&a(hl),w(re,t),t&&a(cl),t&&a(ne),t&&a(ml),t&&a(tt),w(ie),t&&a(_l),t&&a(Ce),t&&a(gl),t&&a(I),t&&a(yl),t&&a(Oe),t&&a(vl),w(pe,t),t&&a(wl),t&&a(et),w(de),t&&a($l),t&&a(Pe),t&&a(El),w(ue,t),t&&a(ql),w(bt,t),t&&a(jl),t&&a(Ne),t&&a(bl),t&&a(kt),t&&a(kl),t&&a(at),w(fe),t&&a(xl),t&&a(z),t&&a(Al),t&&a(Be),t&&a(Il),w(he,t)}}}const md={local:"create-a-dataset-loading-script",sections:[{local:"add-dataset-attributes",sections:[{local:"multiple-configurations",title:"Multiple configurations"},{local:"default-configurations",title:"Default configurations"}],title:"Add dataset attributes"},{local:"download-data-files-and-organize-splits",title:"Download data files and organize splits"},{local:"generate-samples",title:"Generate samples"},{local:"testing-data-and-checksum-metadata",sections:[{local:"dataset-metadata",sections:[{local:"automatic",title:"Automatic"},{local:"manual",title:"Manual"}],title:"Dataset metadata"}],title:"Testing data and checksum metadata"},{local:"upload-to-the-hub",title:"Upload to the Hub"}],title:"Create a dataset loading script"};function _d(T){return id(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $d extends ld{constructor(h){super();od(this,h,_d,cd,rd,{})}}export{$d as default,md as metadata};
