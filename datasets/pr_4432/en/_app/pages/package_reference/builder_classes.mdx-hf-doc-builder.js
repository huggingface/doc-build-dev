import{S as tm,i as am,s as sm,e as r,k as p,w as v,t as m,M as rm,c as n,d as a,m as c,a as o,x as b,h as g,b as y,G as e,g as $,y as x,q as w,o as E,B as D,v as nm,L as B}from"../../chunks/vendor-hf-doc-builder.js";import{D as j}from"../../chunks/Docstring-hf-doc-builder.js";import{C as N}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Zr}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function om(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder('rotten_tomatoes')
ds = builder.download_and_prepare()
ds = builder.as_dataset(split='train')
ds`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.as_dataset(split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">8530</span>
})`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function lm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder('rotten_tomatoes')
ds = builder.download_and_prepare()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function dm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_all_exported_dataset_infos()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_all_exported_dataset_infos()
{<span class="hljs-string">&#x27;default&#x27;</span>: DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)}</span>`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function im(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_exported_dataset_info()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_exported_dataset_info()
DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)</span>`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function pm(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function cm(k){let d,h,f,l,u;return l=new N({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=r("p"),h=m("Is roughly equivalent to:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Is roughly equivalent to:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function mm(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download_custom('s3://my-bucket/data.zip', custom_download_for_my_private_bucket)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download_custom(<span class="hljs-string">&#x27;s3://my-bucket/data.zip&#x27;</span>, custom_download_for_my_private_bucket)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function gm(k){let d,h,f,l,u;return l=new N({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function fm(k){let d,h,f,l,u;return l=new N({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function um(k){let d,h,f,l,u;return l=new N({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function hm(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function _m(k){let d,h,f,l,u;return l=new N({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=r("p"),h=m("Is roughly equivalent to:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Is roughly equivalent to:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function $m(k){let d,h,f,l,u;return l=new N({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function vm(k){let d,h,f,l,u;return l=new N({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function bm(k){let d,h,f,l,u;return l=new N({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function xm(k){let d,h,f,l,u;return l=new N({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and_extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and_extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function wm(k){let d,h,f,l,u;return l=new N({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.VALIDATION,
    gen_kwargs={"split_key": "validation", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.TEST,
    gen_kwargs={"split_key": "test", "files": dl_manager.download_and extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.VALIDATION,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;validation&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TEST,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Em(k){let d,h,f,l,u;return l=new N({props:{code:`Each descriptor can be composed with other using addition or slice. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[0:25]) + datasets.Split.TEST

The resulting split will correspond to 25% of the train split merged with
100% of the test split.`,highlighted:`Each descriptor can be composed <span class="hljs-keyword">with</span> other using addition <span class="hljs-keyword">or</span> <span class="hljs-built_in">slice</span>. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">0</span>:<span class="hljs-number">25</span>]) + datasets.Split.TEST

The resulting split will correspond to <span class="hljs-number">25</span>% of the train split merged <span class="hljs-keyword">with</span>
<span class="hljs-number">100</span>% of the test split.`}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Dm(k){let d,h,f,l,u;return l=new N({props:{code:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[75:])
)  # Error
split = datasets.Split.TEST + datasets.Split.ALL  # Error`,highlighted:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">75</span>:])
)  <span class="hljs-comment"># Error</span>
split = datasets.Split.TEST + datasets.Split.ALL  <span class="hljs-comment"># Error</span>`}}),{c(){d=r("p"),h=m("A split cannot be added twice, so the following will fail:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"A split cannot be added twice, so the following will fail:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function ym(k){let d,h,f,l,u;return l=new N({props:{code:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
datasets.Split.TEST.subsplit(datasets.percent[:50])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:50])`,highlighted:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
datasets.Split.TEST.subsplit(datasets.percent[:<span class="hljs-number">50</span>])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=r("p"),h=m("The slices can be applied only one time. So the following are valid:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"The slices can be applied only one time. So the following are valid:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function km(k){let d,h,f,l,u;return l=new N({props:{code:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:25]).subsplit(datasets.percent[:25])
split = (train.subsplit(datasets.percent[:25]) + test).subsplit(datasets.percent[:50])`,highlighted:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]).subsplit(datasets.percent[:<span class="hljs-number">25</span>])
split = (train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) + test).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=r("p"),h=m("But not:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"But not:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function jm(k){let d,h,f,l,u;return l=new N({props:{code:`# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec('test[:33%]'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction('test', to=33, unit='%'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%'))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]+train[1:-1]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%]+train[1:-1]'))
ds = datasets.load_dataset('mnist', split=(
datasets.ReadInstruction('test', to=33, unit='%') +
datasets.ReadInstruction('train', from_=1, to=-1, unit='abs')))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%](pct1_dropremainder)')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%](pct1_dropremainder)'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%', rounding="pct1_dropremainder"))

# 10-fold validation:
tests = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', from_=k, to=k+10, unit='%')
for k in range(0, 100, 10)])
trains = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', to=k, unit='%') + datasets.ReadInstruction('train', from_=k+10, unit='%')
for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(<span class="hljs-string">&#x27;test[:33%]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=(
datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>) +
datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=<span class="hljs-number">1</span>, to=-<span class="hljs-number">1</span>, unit=<span class="hljs-string">&#x27;abs&#x27;</span>)))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))

<span class="hljs-comment"># 10-fold validation:</span>
tests = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
trains = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, to=k, unit=<span class="hljs-string">&#x27;%&#x27;</span>) + datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}),{c(){d=r("p"),h=m("Examples:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Examples:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Tm(k){let d,h,f,l,u;return l=new N({props:{code:'VERSION = datasets.Version("1.0.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>VERSION = datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>)'}}),{c(){d=r("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=n(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Sm(k){let d,h,f,l,u,t,i,os,Vn,en,$e,Le,ls,bt,Mn,ds,Fn,tn,K,zn,ua,Un,Gn,ha,Hn,Wn,an,T,xt,Xn,is,Jn,Kn,_a,ps,Yn,Qn,Zn,ve,$a,cs,eo,to,ao,va,ba,so,ro,no,Oe,xa,oo,lo,ms,io,po,co,W,gs,mo,go,fs,fo,uo,us,ho,_o,hs,$o,vo,bo,Y,wt,xo,_s,wo,Eo,qe,Do,Q,Et,yo,$s,ko,jo,Ve,To,Z,Dt,So,vs,Io,Bo,Me,No,ee,yt,Po,bs,Co,Ro,Fe,Ao,ze,kt,Lo,xs,Oo,sn,X,jt,qo,ws,Vo,Mo,te,Es,Fo,zo,Ds,Uo,Go,ys,Ho,Wo,rn,be,Tt,Xo,ks,Jo,nn,xe,St,Ko,js,Yo,on,z,It,Qo,Bt,Zo,wa,el,tl,al,Nt,sl,Ea,rl,nl,ol,ae,Pt,ll,Ts,dl,il,we,Ss,pl,cl,Is,ml,gl,Bs,fl,ln,Ee,Ue,Ns,Ct,ul,Ps,hl,dn,P,Rt,_l,se,At,$l,Cs,vl,bl,Ge,xl,re,Lt,wl,Rs,El,Dl,He,yl,ne,Ot,kl,qt,jl,As,Tl,Sl,Il,We,Bl,oe,Vt,Nl,Ls,Pl,Cl,Xe,Rl,le,Mt,Al,Os,Ll,Ol,Je,ql,de,Ft,Vl,qs,Ml,Fl,Ke,zl,Ye,zt,Ul,Vs,Gl,pn,R,Ut,Hl,U,Wl,Ms,Xl,Jl,Fs,Kl,Yl,zs,Ql,Zl,Us,ed,td,ad,ie,Gt,sd,Gs,rd,nd,Qe,od,pe,Ht,ld,Hs,dd,id,Ze,pd,ce,Wt,cd,Ws,md,gd,et,fd,me,Xt,ud,Xs,hd,_d,tt,$d,ge,Jt,vd,Js,bd,xd,at,cn,De,Kt,wd,Ks,Ed,mn,q,Yt,Dd,Da,Ys,yd,kd,jd,Qt,Td,Qs,Sd,Id,Bd,Zs,Nd,Pd,Zt,er,ye,gn,Cd,tr,Rd,Ad,ar,Ld,Od,ke,je,ya,sr,qd,Vd,Md,rr,Fd,zd,nr,Ud,Gd,Te,or,lr,Hd,Wd,dr,Xd,Jd,ir,Kd,Yd,Se,pr,cr,Qd,Zd,mr,ei,ti,gr,ai,fn,Ie,st,fr,ea,si,ur,ri,un,G,ta,ni,hr,oi,li,Be,di,_r,ii,pi,$r,ci,mi,gi,rt,hn,A,aa,fi,ka,vr,ui,hi,_i,br,$i,vi,J,ja,xr,bi,xi,wi,Ta,wr,Ei,Di,yi,Sa,Er,ki,ji,Ti,Ia,Dr,Si,Ii,Bi,Ba,Ni,yr,Pi,Ci,sa,Ri,kr,Ai,Li,Oi,nt,_n,C,ra,qi,jr,Vi,Mi,ot,Fi,Tr,zi,Ui,lt,Gi,Sr,Hi,Wi,dt,Xi,it,$n,Ne,na,Ji,Ir,Ki,vn,V,oa,Yi,Br,Qi,Zi,pt,ep,ct,la,tp,Nr,ap,sp,fe,da,rp,Pr,np,op,Cr,lp,bn,Pe,mt,Rr,ia,dp,Ar,ip,xn,H,pa,pp,Lr,cp,mp,gt,gp,ft,ca,fp,Or,up,wn;return t=new Zr({}),bt=new Zr({}),xt=new j({props:{name:"class datasets.DatasetBuilder",anchor:"datasets.DatasetBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.cache_dir",description:"<strong>cache_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Directory to cache data. Defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>.",name:"cache_dir"},{anchor:"datasets.DatasetBuilder.config_name",description:`<strong>config_name</strong> (<em>str</em>, <em>optional</em>) &#x2014; Name of the dataset configuration.
It affects the data generated on disk: different configurations will have their own subdirectories and
versions.
If not provided, the default configuration is used (if it exists).`,name:"config_name"},{anchor:"datasets.DatasetBuilder.hash",description:`<strong>hash</strong> (<em>str</em>, <em>optional</em>) &#x2014; Hash specific to the dataset code. Used to update the caching directory when the
dataset loading script code is updated (to avoid reusing old data).
The typical caching directory (defined in <code>self._relative_data_dir</code>) is: <code>name/version/hash/</code>.`,name:"hash"},{anchor:"datasets.DatasetBuilder.base_path",description:`<strong>base_path</strong> (<em>str</em>, <em>optional</em>) &#x2014; Base path for relative paths that are used to download files.
This can be a remote URL.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.features",description:`<strong>features</strong> ([<em>~datasets.Features</em>], <em>optional</em>) &#x2014; Features types to use with this dataset.
It can be used to change the Features types of a dataset, for example.`,name:"features"},{anchor:"datasets.DatasetBuilder.use_auth_token",description:`<strong>use_auth_token</strong> (<em>str</em> or <em>bool</em>, <em>optional</em>) &#x2014; String or boolean to use as Bearer token for remote files on the
Datasets Hub. If <em>True</em>, will get token from <code>&quot;~/.huggingface&quot;</code>.`,name:"use_auth_token"},{anchor:"datasets.DatasetBuilder.repo_id",description:`<strong>repo_id</strong> (<em>str</em>, <em>optional</em>) &#x2014; ID of the dataset repository.
Used to distinguish builders with the same name but not coming from the same namespace, for example &#x201C;squad&#x201D;
and &#x201C;lhoestq/squad&#x201D; repo IDs. In the latter, the builder name would be &#x201C;lhoestq___squad&#x201D;.`,name:"repo_id"},{anchor:"datasets.DatasetBuilder.data_files",description:`<strong>data_files</strong> (<em>str</em> or <em>Sequence</em> or <em>Mapping</em>, <em>optional</em>) &#x2014; Path(s) to source data file(s).
For builders like &#x201C;csv&#x201D; or &#x201C;json&#x201D; that need the user to specify data files. They can be either
local or remote files. For convenience, you can use a DataFilesDict.`,name:"data_files"},{anchor:"datasets.DatasetBuilder.data_dir",description:`<strong>data_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Path to directory containing source data file(s).
Use only if <em>data_files</em> is not passed, in which case it is equivalent to passing
<code>os.path.join(data_dir, &quot;**&quot;)</code> as <em>data_files</em>.
For builders that require manual download, it must be the path to the local directory containing the
manually downloaded data.`,name:"data_dir"},{anchor:"datasets.DatasetBuilder.name",description:`<strong>name</strong> (<em>str</em>) &#x2014; Deprecated. Use <em>config_name</em> instead.
config_kwargs &#x2014; Keyword arguments to be passed to the [<em>BuilderConfig</em>].`,name:"name"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L180"}}),wt=new j({props:{name:"as_dataset",anchor:"datasets.DatasetBuilder.as_dataset",parameters:[{name:"split",val:": typing.Optional[datasets.splits.Split] = None"},{name:"run_post_process",val:" = True"},{name:"ignore_verifications",val:" = False"},{name:"in_memory",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetBuilder.as_dataset.split",description:"<strong>split</strong> (<code>datasets.Split</code>) &#x2014; Which subset of the data to return.",name:"split"},{anchor:"datasets.DatasetBuilder.as_dataset.run_post_process",description:`<strong>run_post_process</strong> (bool, default=True) &#x2014; Whether to run post-processing dataset transforms and/or add
indexes.`,name:"run_post_process"},{anchor:"datasets.DatasetBuilder.as_dataset.ignore_verifications",description:`<strong>ignore_verifications</strong> (bool, default=False) &#x2014; Whether to ignore the verifications of the
downloaded/processed dataset information (checksums/size/splits/&#x2026;).`,name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.as_dataset.in_memory",description:"<strong>in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L815",returnDescription:`
<p>datasets.Dataset</p>
`}}),qe=new I({props:{anchor:"datasets.DatasetBuilder.as_dataset.example",$$slots:{default:[om]},$$scope:{ctx:k}}}),Et=new j({props:{name:"download_and_prepare",anchor:"datasets.DatasetBuilder.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"ignore_verifications",val:": bool = False"},{name:"try_from_hf_gcs",val:": bool = True"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"**download_and_prepare_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; specific download configuration parameters.',name:"download_config"},{anchor:"datasets.DatasetBuilder.download_and_prepare.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, optional) &#x2014; select the download/generate mode - Default to <code>REUSE_DATASET_IF_EXISTS</code>',name:"download_mode"},{anchor:"datasets.DatasetBuilder.download_and_prepare.ignore_verifications",description:"<strong>ignore_verifications</strong> (<code>bool</code>) &#x2014; Ignore the verifications of the downloaded/processed dataset information (checksums/size/splits/&#x2026;)",name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.download_and_prepare.try_from_hf_gcs",description:"<strong>try_from_hf_gcs</strong> (<code>bool</code>) &#x2014; If True, it will try to download the already prepared dataset from the Hf google cloud storage",name:"try_from_hf_gcs"},{anchor:"datasets.DatasetBuilder.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; specific Download Manger to use',name:"dl_manager"},{anchor:"datasets.DatasetBuilder.download_and_prepare.base_path",description:`<strong>base_path</strong> (<code>str</code>, optional) &#x2014; base path for relative paths that are used to download files. This can be a remote url.
If not specified, the value of the <em>base_path</em> attribute (<em>self.base_path</em>) will be used instead.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.download_and_prepare.use_auth_token",description:`<strong>use_auth_token</strong> (<code>Union[str, bool]</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from ~/.huggingface.`,name:"use_auth_token"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L544"}}),Ve=new I({props:{anchor:"datasets.DatasetBuilder.download_and_prepare.example",$$slots:{default:[lm]},$$scope:{ctx:k}}}),Dt=new j({props:{name:"get_all_exported_dataset_infos",anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L348"}}),Me=new I({props:{anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos.example",$$slots:{default:[dm]},$$scope:{ctx:k}}}),yt=new j({props:{name:"get_exported_dataset_info",anchor:"datasets.DatasetBuilder.get_exported_dataset_info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L366"}}),Fe=new I({props:{anchor:"datasets.DatasetBuilder.get_exported_dataset_info.example",$$slots:{default:[im]},$$scope:{ctx:k}}}),kt=new j({props:{name:"get_imported_module_dir",anchor:"datasets.DatasetBuilder.get_imported_module_dir",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L539"}}),jt=new j({props:{name:"class datasets.GeneratorBasedBuilder",anchor:"datasets.GeneratorBasedBuilder",parameters:[{name:"*args",val:""},{name:"writer_batch_size",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L1102"}}),Tt=new j({props:{name:"class datasets.BeamBasedBuilder",anchor:"datasets.BeamBasedBuilder",parameters:[{name:"*args",val:""},{name:"beam_runner",val:" = None"},{name:"beam_options",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L1262"}}),St=new j({props:{name:"class datasets.ArrowBasedBuilder",anchor:"datasets.ArrowBasedBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L1200"}}),It=new j({props:{name:"class datasets.BuilderConfig",anchor:"datasets.BuilderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.BuilderConfig.name",description:"<strong>name</strong> (<code>str</code>, default <code>&quot;default&quot;</code>) &#x2014;",name:"name"},{anchor:"datasets.BuilderConfig.version",description:'<strong>version</strong> (<a href="/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014;',name:"version"},{anchor:"datasets.BuilderConfig.data_dir",description:"<strong>data_dir</strong> (<code>str</code>, optional) &#x2014;",name:"data_dir"},{anchor:"datasets.BuilderConfig.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.BuilderConfig.description",description:"<strong>description</strong> (<code>str</code>, optional) &#x2014;",name:"description"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L84"}}),Pt=new j({props:{name:"create_config_id",anchor:"datasets.BuilderConfig.create_config_id",parameters:[{name:"config_kwargs",val:": dict"},{name:"custom_features",val:": typing.Optional[datasets.features.features.Features] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/builder.py#L123"}}),Ct=new Zr({}),Rt=new j({props:{name:"class datasets.DownloadManager",anchor:"datasets.DownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"record_checksums",val:" = True"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L149"}}),At=new j({props:{name:"download",anchor:"datasets.DownloadManager.download",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L281",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),Ge=new I({props:{anchor:"datasets.DownloadManager.download.example",$$slots:{default:[pm]},$$scope:{ctx:k}}}),Lt=new j({props:{name:"download_and_extract",anchor:"datasets.DownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L416",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),He=new I({props:{anchor:"datasets.DownloadManager.download_and_extract.example",$$slots:{default:[cm]},$$scope:{ctx:k}}}),Ot=new j({props:{name:"download_custom",anchor:"datasets.DownloadManager.download_custom",parameters:[{name:"url_or_urls",val:""},{name:"custom_download",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L234",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),We=new I({props:{anchor:"datasets.DownloadManager.download_custom.example",$$slots:{default:[mm]},$$scope:{ctx:k}}}),Vt=new j({props:{name:"extract",anchor:"datasets.DownloadManager.extract",parameters:[{name:"path_or_paths",val:""},{name:"num_proc",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L379",returnDescription:`
<p><code>str</code>, The extracted paths matching the given input
path_or_paths.</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),Xe=new I({props:{anchor:"datasets.DownloadManager.extract.example",$$slots:{default:[gm]},$$scope:{ctx:k}}}),Mt=new j({props:{name:"iter_archive",anchor:"datasets.DownloadManager.iter_archive",parameters:[{name:"path_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_archive.path_or_buf",description:"<strong>path_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"path_or_buf"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L338"}}),Je=new I({props:{anchor:"datasets.DownloadManager.iter_archive.example",$$slots:{default:[fm]},$$scope:{ctx:k}}}),Ft=new j({props:{name:"iter_files",anchor:"datasets.DownloadManager.iter_files",parameters:[{name:"paths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_files.paths",description:"<strong>paths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"paths"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L361"}}),Ke=new I({props:{anchor:"datasets.DownloadManager.iter_files.example",$$slots:{default:[um]},$$scope:{ctx:k}}}),zt=new j({props:{name:"ship_files_with_pipeline",anchor:"datasets.DownloadManager.ship_files_with_pipeline",parameters:[{name:"downloaded_path_or_paths",val:""},{name:"pipeline",val:""}],parametersDescription:[{anchor:"datasets.DownloadManager.ship_files_with_pipeline.downloaded_path_or_paths",description:`<strong>downloaded_path_or_paths</strong> (<code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code>) &#x2014; Nested structure containing the
downloaded path(s).`,name:"downloaded_path_or_paths"},{anchor:"datasets.DownloadManager.ship_files_with_pipeline.pipeline",description:"<strong>pipeline</strong> (<code>utils.beam_utils.BeamPipeline</code>) &#x2014; Apache Beam Pipeline.",name:"pipeline"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L191",returnDescription:`
<p><code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code></p>
`}}),Ut=new j({props:{name:"class datasets.StreamingDownloadManager",anchor:"datasets.StreamingDownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/streaming_download_manager.py#L781"}}),Gt=new j({props:{name:"download",anchor:"datasets.StreamingDownloadManager.download",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/streaming_download_manager.py#L807",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),Qe=new I({props:{anchor:"datasets.StreamingDownloadManager.download.example",$$slots:{default:[hm]},$$scope:{ctx:k}}}),Ht=new j({props:{name:"download_and_extract",anchor:"datasets.StreamingDownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/streaming_download_manager.py#L875",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),Ze=new I({props:{anchor:"datasets.StreamingDownloadManager.download_and_extract.example",$$slots:{default:[_m]},$$scope:{ctx:k}}}),Wt=new j({props:{name:"extract",anchor:"datasets.StreamingDownloadManager.extract",parameters:[{name:"path_or_paths",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/streaming_download_manager.py#L834",returnDescription:`
<p><code>str</code>, The extracted paths matching the given input
path_or_paths.</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),et=new I({props:{anchor:"datasets.StreamingDownloadManager.extract.example",$$slots:{default:[$m]},$$scope:{ctx:k}}}),Xt=new j({props:{name:"iter_archive",anchor:"datasets.StreamingDownloadManager.iter_archive",parameters:[{name:"urlpath_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_archive.urlpath_or_buf",description:"<strong>urlpath_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"urlpath_or_buf"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/streaming_download_manager.py#L893"}}),tt=new I({props:{anchor:"datasets.StreamingDownloadManager.iter_archive.example",$$slots:{default:[vm]},$$scope:{ctx:k}}}),Jt=new j({props:{name:"iter_files",anchor:"datasets.StreamingDownloadManager.iter_files",parameters:[{name:"urlpaths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_files.urlpaths",description:"<strong>urlpaths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"urlpaths"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/streaming_download_manager.py#L916"}}),at=new I({props:{anchor:"datasets.StreamingDownloadManager.iter_files.example",$$slots:{default:[bm]},$$scope:{ctx:k}}}),Kt=new j({props:{name:"class datasets.DownloadConfig",anchor:"datasets.DownloadConfig",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"force_download",val:": bool = False"},{name:"resume_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"user_agent",val:": typing.Optional[str] = None"},{name:"extract_compressed_file",val:": bool = False"},{name:"force_extract",val:": bool = False"},{name:"delete_extracted",val:": bool = False"},{name:"use_etag",val:": bool = True"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"max_retries",val:": int = 1"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"ignore_url_params",val:": bool = False"},{name:"download_desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DownloadConfig.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, optional) &#x2014; Specify a cache directory to save the file to (overwrite the
default cache dir).`,name:"cache_dir"},{anchor:"datasets.DownloadConfig.force_download",description:`<strong>force_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, re-dowload the file even if it&#x2019;s already cached in
the cache dir.`,name:"force_download"},{anchor:"datasets.DownloadConfig.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, resume the download if incompletly recieved file is
found.`,name:"resume_download"},{anchor:"datasets.DownloadConfig.proxies",description:"<strong>proxies</strong> (<code>dict</code>, optional) &#x2014;",name:"proxies"},{anchor:"datasets.DownloadConfig.user_agent",description:`<strong>user_agent</strong> (<code>str</code>, optional) &#x2014; Optional string or dict that will be appended to the user-agent on remote
requests.`,name:"user_agent"},{anchor:"datasets.DownloadConfig.extract_compressed_file",description:`<strong>extract_compressed_file</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True and the path point to a zip or tar file,
extract the compressed file in a folder along the archive.`,name:"extract_compressed_file"},{anchor:"datasets.DownloadConfig.force_extract",description:`<strong>force_extract</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True when extract_compressed_file is True and the archive
was already extracted, re-extract the archive and override the folder where it was extracted.`,name:"force_extract"},{anchor:"datasets.DownloadConfig.delete_extracted",description:"<strong>delete_extracted</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to delete (or keep) the extracted files.",name:"delete_extracted"},{anchor:"datasets.DownloadConfig.use_etag",description:"<strong>use_etag</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to use the ETag HTTP response header to validate the cached files.",name:"use_etag"},{anchor:"datasets.DownloadConfig.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; The number of processes to launch to download the files in parallel.",name:"num_proc"},{anchor:"datasets.DownloadConfig.max_retries",description:"<strong>max_retries</strong> (<code>int</code>, default <code>1</code>) &#x2014; The number of times to retry an HTTP request if it fails.",name:"max_retries"},{anchor:"datasets.DownloadConfig.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token
for remote files on the Datasets Hub. If True, will get token from ~/.huggingface.`,name:"use_auth_token"},{anchor:"datasets.DownloadConfig.ignore_url_params",description:`<strong>ignore_url_params</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to strip all query parameters and #fragments from
the download URL before using it for caching the file.`,name:"ignore_url_params"},{anchor:"datasets.DownloadConfig.download_desc",description:"<strong>download_desc</strong> (<code>str</code>, optional) &#x2014; A description to be displayed alongside with the progress bar while downloading the files.",name:"download_desc"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_config.py#L8"}}),Yt=new j({props:{name:"class datasets.DownloadMode",anchor:"datasets.DownloadMode",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/download/download_manager.py#L39"}}),ea=new Zr({}),ta=new j({props:{name:"class datasets.SplitGenerator",anchor:"datasets.SplitGenerator",parameters:[{name:"name",val:": str"},{name:"gen_kwargs",val:": typing.Dict = <factory>"}],parametersDescription:[{anchor:"datasets.SplitGenerator.name",description:`<strong>name</strong> (str) &#x2014; Name of the Split for which the generator will
create the examples.
**gen_kwargs &#x2014; Keyword arguments to forward to the <code>DatasetBuilder._generate_examples</code> method
of the builder.`,name:"name"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/splits.py#L566"}}),rt=new I({props:{anchor:"datasets.SplitGenerator.example",$$slots:{default:[xm]},$$scope:{ctx:k}}}),aa=new j({props:{name:"class datasets.Split",anchor:"datasets.Split",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/splits.py#L387"}}),nt=new I({props:{anchor:"datasets.Split.example",$$slots:{default:[wm]},$$scope:{ctx:k}}}),ra=new j({props:{name:"class datasets.NamedSplit",anchor:"datasets.NamedSplit",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/splits.py#L303"}}),ot=new I({props:{anchor:"datasets.NamedSplit.example",$$slots:{default:[Em]},$$scope:{ctx:k}}}),lt=new I({props:{anchor:"datasets.NamedSplit.example-2",$$slots:{default:[Dm]},$$scope:{ctx:k}}}),dt=new I({props:{anchor:"datasets.NamedSplit.example-3",$$slots:{default:[ym]},$$scope:{ctx:k}}}),it=new I({props:{anchor:"datasets.NamedSplit.example-4",$$slots:{default:[km]},$$scope:{ctx:k}}}),na=new j({props:{name:"class datasets.NamedSplitAll",anchor:"datasets.NamedSplitAll",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/splits.py#L372"}}),oa=new j({props:{name:"class datasets.ReadInstruction",anchor:"datasets.ReadInstruction",parameters:[{name:"split_name",val:""},{name:"rounding",val:" = None"},{name:"from_",val:" = None"},{name:"to",val:" = None"},{name:"unit",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/arrow_reader.py#L457"}}),pt=new I({props:{anchor:"datasets.ReadInstruction.example",$$slots:{default:[jm]},$$scope:{ctx:k}}}),la=new j({props:{name:"from_spec",anchor:"datasets.ReadInstruction.from_spec",parameters:[{name:"spec",val:""}],parametersDescription:[{anchor:"datasets.ReadInstruction.from_spec.spec",description:`<strong>spec</strong> (str) &#x2014; split(s) + optional slice(s) to read + optional rounding
if percents are used as the slicing unit. A slice can be specified,
using absolute numbers (int) or percentages (int). E.g.
<code>test</code>: test split.
<code>test + validation</code>: test split + validation split.
<code>test[10:]</code>: test split, minus its first 10 records.
<code>test[:10%]</code>: first 10% records of test split.
<code>test[:20%](pct1_dropremainder)</code>: first 10% records, rounded with
the <code>pct1_dropremainder</code> rounding.
<code>test[:-5%]+train[40%:60%]</code>: first 95% of test + middle 20% of
train.`,name:"spec"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/arrow_reader.py#L537",returnDescription:`
<p>ReadInstruction instance.</p>
`}}),da=new j({props:{name:"to_absolute",anchor:"datasets.ReadInstruction.to_absolute",parameters:[{name:"name2len",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/arrow_reader.py#L605",returnDescription:`
<p>list of _AbsoluteInstruction instances (corresponds to the + in spec).</p>
`}}),ia=new Zr({}),pa=new j({props:{name:"class datasets.Version",anchor:"datasets.Version",parameters:[{name:"version_str",val:": str"},{name:"description",val:": typing.Optional[str] = None"},{name:"major",val:": typing.Union[str, int, NoneType] = None"},{name:"minor",val:": typing.Union[str, int, NoneType] = None"},{name:"patch",val:": typing.Union[str, int, NoneType] = None"}],parametersDescription:[{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.major",description:"<strong>major</strong> (<code>str</code>) &#x2014;",name:"major"},{anchor:"datasets.Version.minor",description:"<strong>minor</strong> (<code>str</code>) &#x2014;",name:"minor"},{anchor:"datasets.Version.patch",description:"<strong>patch</strong> (<code>str</code>) &#x2014;",name:"patch"}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/utils/version.py#L30"}}),gt=new I({props:{anchor:"datasets.Version.example",$$slots:{default:[Tm]},$$scope:{ctx:k}}}),ca=new j({props:{name:"match",anchor:"datasets.Version.match",parameters:[{name:"other_version",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4432/src/datasets/utils/version.py#L101"}}),{c(){d=r("meta"),h=p(),f=r("h1"),l=r("a"),u=r("span"),v(t.$$.fragment),i=p(),os=r("span"),Vn=m("Builder classes"),en=p(),$e=r("h2"),Le=r("a"),ls=r("span"),v(bt.$$.fragment),Mn=p(),ds=r("span"),Fn=m("Builders"),tn=p(),K=r("p"),zn=m("\u{1F917} Datasets relies on two main classes during the dataset building process: "),ua=r("a"),Un=m("DatasetBuilder"),Gn=m(" and "),ha=r("a"),Hn=m("BuilderConfig"),Wn=m("."),an=p(),T=r("div"),v(xt.$$.fragment),Xn=p(),is=r("p"),Jn=m("Abstract base class for all datasets."),Kn=p(),_a=r("p"),ps=r("em"),Yn=m("DatasetBuilder"),Qn=m(" has 3 key methods:"),Zn=p(),ve=r("ul"),$a=r("li"),cs=r("code"),eo=m("datasets.DatasetBuilder.info"),to=m(`: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),ao=p(),va=r("li"),ba=r("a"),so=m("datasets.DatasetBuilder.download_and_prepare()"),ro=m(`: Downloads the source data
and writes it to disk.`),no=p(),Oe=r("li"),xa=r("a"),oo=m("datasets.DatasetBuilder.as_dataset()"),lo=m(": Generates a "),ms=r("em"),io=m("Dataset"),po=m("."),co=p(),W=r("p"),gs=r("strong"),mo=m("Configuration"),go=m(": Some "),fs=r("em"),fo=m("DatasetBuilder"),uo=m(`s expose multiple variants of the
dataset by defining a `),us=r("em"),ho=m("datasets.BuilderConfig"),_o=m(` subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in `),hs=r("code"),$o=m("datasets.DatasetBuilder.builder_configs()"),vo=m("."),bo=p(),Y=r("div"),v(wt.$$.fragment),xo=p(),_s=r("p"),wo=m("Return a Dataset for the specified split."),Eo=p(),v(qe.$$.fragment),Do=p(),Q=r("div"),v(Et.$$.fragment),yo=p(),$s=r("p"),ko=m("Downloads and prepares dataset for reading."),jo=p(),v(Ve.$$.fragment),To=p(),Z=r("div"),v(Dt.$$.fragment),So=p(),vs=r("p"),Io=m("Empty dict if doesn\u2019t exist"),Bo=p(),v(Me.$$.fragment),No=p(),ee=r("div"),v(yt.$$.fragment),Po=p(),bs=r("p"),Co=m("Empty DatasetInfo if doesn\u2019t exist"),Ro=p(),v(Fe.$$.fragment),Ao=p(),ze=r("div"),v(kt.$$.fragment),Lo=p(),xs=r("p"),Oo=m("Return the path of the module of this class or subclass."),sn=p(),X=r("div"),v(jt.$$.fragment),qo=p(),ws=r("p"),Vo=m("Base class for datasets with data generation based on dict generators."),Mo=p(),te=r("p"),Es=r("code"),Fo=m("GeneratorBasedBuilder"),zo=m(` is a convenience class that abstracts away much
of the data writing and reading of `),Ds=r("code"),Uo=m("DatasetBuilder"),Go=m(`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),ys=r("code"),Ho=m("_split_generators"),Wo=m("). See the method docstrings for details."),rn=p(),be=r("div"),v(Tt.$$.fragment),Xo=p(),ks=r("p"),Jo=m("Beam based Builder."),nn=p(),xe=r("div"),v(St.$$.fragment),Ko=p(),js=r("p"),Yo=m("Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),on=p(),z=r("div"),v(It.$$.fragment),Qo=p(),Bt=r("p"),Zo=m("Base class for "),wa=r("a"),el=m("DatasetBuilder"),tl=m(" data configuration."),al=p(),Nt=r("p"),sl=m(`DatasetBuilder subclasses with data configuration options should subclass
`),Ea=r("a"),rl=m("BuilderConfig"),nl=m(" and add their own properties."),ol=p(),ae=r("div"),v(Pt.$$.fragment),ll=p(),Ts=r("p"),dl=m(`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),il=p(),we=r("ul"),Ss=r("li"),pl=m("the config kwargs that can be used to overwrite attributes"),cl=p(),Is=r("li"),ml=m("the custom features used to write the dataset"),gl=p(),Bs=r("li"),fl=m(`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),ln=p(),Ee=r("h2"),Ue=r("a"),Ns=r("span"),v(Ct.$$.fragment),ul=p(),Ps=r("span"),hl=m("Download"),dn=p(),P=r("div"),v(Rt.$$.fragment),_l=p(),se=r("div"),v(At.$$.fragment),$l=p(),Cs=r("p"),vl=m("Download given url(s)."),bl=p(),v(Ge.$$.fragment),xl=p(),re=r("div"),v(Lt.$$.fragment),wl=p(),Rs=r("p"),El=m("Download and extract given url_or_urls."),Dl=p(),v(He.$$.fragment),yl=p(),ne=r("div"),v(Ot.$$.fragment),kl=p(),qt=r("p"),jl=m("Download given urls(s) by calling "),As=r("code"),Tl=m("custom_download"),Sl=m("."),Il=p(),v(We.$$.fragment),Bl=p(),oe=r("div"),v(Vt.$$.fragment),Nl=p(),Ls=r("p"),Pl=m("Extract given path(s)."),Cl=p(),v(Xe.$$.fragment),Rl=p(),le=r("div"),v(Mt.$$.fragment),Al=p(),Os=r("p"),Ll=m("Iterate over files within an archive."),Ol=p(),v(Je.$$.fragment),ql=p(),de=r("div"),v(Ft.$$.fragment),Vl=p(),qs=r("p"),Ml=m("Iterate over file paths."),Fl=p(),v(Ke.$$.fragment),zl=p(),Ye=r("div"),v(zt.$$.fragment),Ul=p(),Vs=r("p"),Gl=m("Ship the files using Beam FileSystems to the pipeline temp dir."),pn=p(),R=r("div"),v(Ut.$$.fragment),Hl=p(),U=r("p"),Wl=m(`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Ms=r("code"),Xl=m("download"),Jl=m(" and "),Fs=r("code"),Kl=m("extract"),Yl=m(` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),zs=r("code"),Ql=m("xopen"),Zl=m(` function which extends the
builtin `),Us=r("code"),ed=m("open"),td=m(" function to stream data from remote files."),ad=p(),ie=r("div"),v(Gt.$$.fragment),sd=p(),Gs=r("p"),rd=m("Download given url(s)."),nd=p(),v(Qe.$$.fragment),od=p(),pe=r("div"),v(Ht.$$.fragment),ld=p(),Hs=r("p"),dd=m("Download and extract given url_or_urls."),id=p(),v(Ze.$$.fragment),pd=p(),ce=r("div"),v(Wt.$$.fragment),cd=p(),Ws=r("p"),md=m("Extract given path(s)."),gd=p(),v(et.$$.fragment),fd=p(),me=r("div"),v(Xt.$$.fragment),ud=p(),Xs=r("p"),hd=m("Iterate over files within an archive."),_d=p(),v(tt.$$.fragment),$d=p(),ge=r("div"),v(Jt.$$.fragment),vd=p(),Js=r("p"),bd=m("Iterate over files."),xd=p(),v(at.$$.fragment),cn=p(),De=r("div"),v(Kt.$$.fragment),wd=p(),Ks=r("p"),Ed=m("Configuration for our cached path manager."),mn=p(),q=r("div"),v(Yt.$$.fragment),Dd=p(),Da=r("p"),Ys=r("code"),yd=m("Enum"),kd=m(" for how to treat pre-existing downloads and data."),jd=p(),Qt=r("p"),Td=m("The default mode is "),Qs=r("code"),Sd=m("REUSE_DATASET_IF_EXISTS"),Id=m(`, which will reuse both
raw downloads and the prepared dataset if they exist.`),Bd=p(),Zs=r("p"),Nd=m("The generations modes:"),Pd=p(),Zt=r("table"),er=r("thead"),ye=r("tr"),gn=r("th"),Cd=p(),tr=r("th"),Rd=m("Downloads"),Ad=p(),ar=r("th"),Ld=m("Dataset"),Od=p(),ke=r("tbody"),je=r("tr"),ya=r("td"),sr=r("code"),qd=m("REUSE_DATASET_IF_EXISTS"),Vd=m(" (default)"),Md=p(),rr=r("td"),Fd=m("Reuse"),zd=p(),nr=r("td"),Ud=m("Reuse"),Gd=p(),Te=r("tr"),or=r("td"),lr=r("code"),Hd=m("REUSE_CACHE_IF_EXISTS"),Wd=p(),dr=r("td"),Xd=m("Reuse"),Jd=p(),ir=r("td"),Kd=m("Fresh"),Yd=p(),Se=r("tr"),pr=r("td"),cr=r("code"),Qd=m("FORCE_REDOWNLOAD"),Zd=p(),mr=r("td"),ei=m("Fresh"),ti=p(),gr=r("td"),ai=m("Fresh"),fn=p(),Ie=r("h2"),st=r("a"),fr=r("span"),v(ea.$$.fragment),si=p(),ur=r("span"),ri=m("Splits"),un=p(),G=r("div"),v(ta.$$.fragment),ni=p(),hr=r("p"),oi=m("Defines the split information for the generator."),li=p(),Be=r("p"),di=m(`This should be used as returned value of
`),_r=r("code"),ii=m("GeneratorBasedBuilder._split_generators()"),pi=m(`.
See `),$r=r("code"),ci=m("GeneratorBasedBuilder._split_generators()"),mi=m(` for more info and example
of usage.`),gi=p(),v(rt.$$.fragment),hn=p(),A=r("div"),v(aa.$$.fragment),fi=p(),ka=r("p"),vr=r("code"),ui=m("Enum"),hi=m(" for dataset splits."),_i=p(),br=r("p"),$i=m(`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),vi=p(),J=r("ul"),ja=r("li"),xr=r("code"),bi=m("TRAIN"),xi=m(": the training data."),wi=p(),Ta=r("li"),wr=r("code"),Ei=m("VALIDATION"),Di=m(`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),yi=p(),Sa=r("li"),Er=r("code"),ki=m("TEST"),ji=m(`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),Ti=p(),Ia=r("li"),Dr=r("code"),Si=m("ALL"),Ii=m(": the union of all defined dataset splits."),Bi=p(),Ba=r("p"),Ni=m("Note: All splits, including compositions inherit from "),yr=r("code"),Pi=m("datasets.SplitBase"),Ci=p(),sa=r("p"),Ri=m("See the :doc:"),kr=r("code"),Ai=m("guide on splits </loading>"),Li=m(" for more information."),Oi=p(),v(nt.$$.fragment),_n=p(),C=r("div"),v(ra.$$.fragment),qi=p(),jr=r("p"),Vi=m("Descriptor corresponding to a named split (train, test, \u2026)."),Mi=p(),v(ot.$$.fragment),Fi=p(),Tr=r("p"),zi=m("Warning:"),Ui=p(),v(lt.$$.fragment),Gi=p(),Sr=r("p"),Hi=m("Warning:"),Wi=p(),v(dt.$$.fragment),Xi=p(),v(it.$$.fragment),$n=p(),Ne=r("div"),v(na.$$.fragment),Ji=p(),Ir=r("p"),Ki=m("Split corresponding to the union of all defined dataset splits."),vn=p(),V=r("div"),v(oa.$$.fragment),Yi=p(),Br=r("p"),Qi=m("Reading instruction for a dataset."),Zi=p(),v(pt.$$.fragment),ep=p(),ct=r("div"),v(la.$$.fragment),tp=p(),Nr=r("p"),ap=m("Creates a ReadInstruction instance out of a string spec."),sp=p(),fe=r("div"),v(da.$$.fragment),rp=p(),Pr=r("p"),np=m("Translate instruction into a list of absolute instructions."),op=p(),Cr=r("p"),lp=m("Those absolute instructions are then to be added together."),bn=p(),Pe=r("h2"),mt=r("a"),Rr=r("span"),v(ia.$$.fragment),dp=p(),Ar=r("span"),ip=m("Version"),xn=p(),H=r("div"),v(pa.$$.fragment),pp=p(),Lr=r("p"),cp=m("Dataset version MAJOR.MINOR.PATCH."),mp=p(),v(gt.$$.fragment),gp=p(),ft=r("div"),v(ca.$$.fragment),fp=p(),Or=r("p"),up=m("Returns True if other_version matches."),this.h()},l(s){const _=rm('[data-svelte="svelte-1phssyn"]',document.head);d=n(_,"META",{name:!0,content:!0}),_.forEach(a),h=c(s),f=n(s,"H1",{class:!0});var ma=o(f);l=n(ma,"A",{id:!0,class:!0,href:!0});var qr=o(l);u=n(qr,"SPAN",{});var Vr=o(u);b(t.$$.fragment,Vr),Vr.forEach(a),qr.forEach(a),i=c(ma),os=n(ma,"SPAN",{});var Mr=o(os);Vn=g(Mr,"Builder classes"),Mr.forEach(a),ma.forEach(a),en=c(s),$e=n(s,"H2",{class:!0});var ga=o($e);Le=n(ga,"A",{id:!0,class:!0,href:!0});var Fr=o(Le);ls=n(Fr,"SPAN",{});var zr=o(ls);b(bt.$$.fragment,zr),zr.forEach(a),Fr.forEach(a),Mn=c(ga),ds=n(ga,"SPAN",{});var Ur=o(ds);Fn=g(Ur,"Builders"),Ur.forEach(a),ga.forEach(a),tn=c(s),K=n(s,"P",{});var Ce=o(K);zn=g(Ce,"\u{1F917} Datasets relies on two main classes during the dataset building process: "),ua=n(Ce,"A",{href:!0});var Gr=o(ua);Un=g(Gr,"DatasetBuilder"),Gr.forEach(a),Gn=g(Ce," and "),ha=n(Ce,"A",{href:!0});var Hr=o(ha);Hn=g(Hr,"BuilderConfig"),Hr.forEach(a),Wn=g(Ce,"."),Ce.forEach(a),an=c(s),T=n(s,"DIV",{class:!0});var S=o(T);b(xt.$$.fragment,S),Xn=c(S),is=n(S,"P",{});var Wr=o(is);Jn=g(Wr,"Abstract base class for all datasets."),Wr.forEach(a),Kn=c(S),_a=n(S,"P",{});var Na=o(_a);ps=n(Na,"EM",{});var Xr=o(ps);Yn=g(Xr,"DatasetBuilder"),Xr.forEach(a),Qn=g(Na," has 3 key methods:"),Na.forEach(a),Zn=c(S),ve=n(S,"UL",{});var Re=o(ve);$a=n(Re,"LI",{});var Pa=o($a);cs=n(Pa,"CODE",{});var Jr=o(cs);eo=g(Jr,"datasets.DatasetBuilder.info"),Jr.forEach(a),to=g(Pa,`: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),Pa.forEach(a),ao=c(Re),va=n(Re,"LI",{});var Ca=o(va);ba=n(Ca,"A",{href:!0});var Kr=o(ba);so=g(Kr,"datasets.DatasetBuilder.download_and_prepare()"),Kr.forEach(a),ro=g(Ca,`: Downloads the source data
and writes it to disk.`),Ca.forEach(a),no=c(Re),Oe=n(Re,"LI",{});var ut=o(Oe);xa=n(ut,"A",{href:!0});var Yr=o(xa);oo=g(Yr,"datasets.DatasetBuilder.as_dataset()"),Yr.forEach(a),lo=g(ut,": Generates a "),ms=n(ut,"EM",{});var Qr=o(ms);io=g(Qr,"Dataset"),Qr.forEach(a),po=g(ut,"."),ut.forEach(a),Re.forEach(a),co=c(S),W=n(S,"P",{});var Ae=o(W);gs=n(Ae,"STRONG",{});var Dp=o(gs);mo=g(Dp,"Configuration"),Dp.forEach(a),go=g(Ae,": Some "),fs=n(Ae,"EM",{});var yp=o(fs);fo=g(yp,"DatasetBuilder"),yp.forEach(a),uo=g(Ae,`s expose multiple variants of the
dataset by defining a `),us=n(Ae,"EM",{});var kp=o(us);ho=g(kp,"datasets.BuilderConfig"),kp.forEach(a),_o=g(Ae,` subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in `),hs=n(Ae,"CODE",{});var jp=o(hs);$o=g(jp,"datasets.DatasetBuilder.builder_configs()"),jp.forEach(a),vo=g(Ae,"."),Ae.forEach(a),bo=c(S),Y=n(S,"DIV",{class:!0});var Ra=o(Y);b(wt.$$.fragment,Ra),xo=c(Ra),_s=n(Ra,"P",{});var Tp=o(_s);wo=g(Tp,"Return a Dataset for the specified split."),Tp.forEach(a),Eo=c(Ra),b(qe.$$.fragment,Ra),Ra.forEach(a),Do=c(S),Q=n(S,"DIV",{class:!0});var Aa=o(Q);b(Et.$$.fragment,Aa),yo=c(Aa),$s=n(Aa,"P",{});var Sp=o($s);ko=g(Sp,"Downloads and prepares dataset for reading."),Sp.forEach(a),jo=c(Aa),b(Ve.$$.fragment,Aa),Aa.forEach(a),To=c(S),Z=n(S,"DIV",{class:!0});var La=o(Z);b(Dt.$$.fragment,La),So=c(La),vs=n(La,"P",{});var Ip=o(vs);Io=g(Ip,"Empty dict if doesn\u2019t exist"),Ip.forEach(a),Bo=c(La),b(Me.$$.fragment,La),La.forEach(a),No=c(S),ee=n(S,"DIV",{class:!0});var Oa=o(ee);b(yt.$$.fragment,Oa),Po=c(Oa),bs=n(Oa,"P",{});var Bp=o(bs);Co=g(Bp,"Empty DatasetInfo if doesn\u2019t exist"),Bp.forEach(a),Ro=c(Oa),b(Fe.$$.fragment,Oa),Oa.forEach(a),Ao=c(S),ze=n(S,"DIV",{class:!0});var En=o(ze);b(kt.$$.fragment,En),Lo=c(En),xs=n(En,"P",{});var Np=o(xs);Oo=g(Np,"Return the path of the module of this class or subclass."),Np.forEach(a),En.forEach(a),S.forEach(a),sn=c(s),X=n(s,"DIV",{class:!0});var qa=o(X);b(jt.$$.fragment,qa),qo=c(qa),ws=n(qa,"P",{});var Pp=o(ws);Vo=g(Pp,"Base class for datasets with data generation based on dict generators."),Pp.forEach(a),Mo=c(qa),te=n(qa,"P",{});var fa=o(te);Es=n(fa,"CODE",{});var Cp=o(Es);Fo=g(Cp,"GeneratorBasedBuilder"),Cp.forEach(a),zo=g(fa,` is a convenience class that abstracts away much
of the data writing and reading of `),Ds=n(fa,"CODE",{});var Rp=o(Ds);Uo=g(Rp,"DatasetBuilder"),Rp.forEach(a),Go=g(fa,`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),ys=n(fa,"CODE",{});var Ap=o(ys);Ho=g(Ap,"_split_generators"),Ap.forEach(a),Wo=g(fa,"). See the method docstrings for details."),fa.forEach(a),qa.forEach(a),rn=c(s),be=n(s,"DIV",{class:!0});var Dn=o(be);b(Tt.$$.fragment,Dn),Xo=c(Dn),ks=n(Dn,"P",{});var Lp=o(ks);Jo=g(Lp,"Beam based Builder."),Lp.forEach(a),Dn.forEach(a),nn=c(s),xe=n(s,"DIV",{class:!0});var yn=o(xe);b(St.$$.fragment,yn),Ko=c(yn),js=n(yn,"P",{});var Op=o(js);Yo=g(Op,"Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),Op.forEach(a),yn.forEach(a),on=c(s),z=n(s,"DIV",{class:!0});var ht=o(z);b(It.$$.fragment,ht),Qo=c(ht),Bt=n(ht,"P",{});var kn=o(Bt);Zo=g(kn,"Base class for "),wa=n(kn,"A",{href:!0});var qp=o(wa);el=g(qp,"DatasetBuilder"),qp.forEach(a),tl=g(kn," data configuration."),kn.forEach(a),al=c(ht),Nt=n(ht,"P",{});var jn=o(Nt);sl=g(jn,`DatasetBuilder subclasses with data configuration options should subclass
`),Ea=n(jn,"A",{href:!0});var Vp=o(Ea);rl=g(Vp,"BuilderConfig"),Vp.forEach(a),nl=g(jn," and add their own properties."),jn.forEach(a),ol=c(ht),ae=n(ht,"DIV",{class:!0});var Va=o(ae);b(Pt.$$.fragment,Va),ll=c(Va),Ts=n(Va,"P",{});var Mp=o(Ts);dl=g(Mp,`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),Mp.forEach(a),il=c(Va),we=n(Va,"UL",{});var Ma=o(we);Ss=n(Ma,"LI",{});var Fp=o(Ss);pl=g(Fp,"the config kwargs that can be used to overwrite attributes"),Fp.forEach(a),cl=c(Ma),Is=n(Ma,"LI",{});var zp=o(Is);ml=g(zp,"the custom features used to write the dataset"),zp.forEach(a),gl=c(Ma),Bs=n(Ma,"LI",{});var Up=o(Bs);fl=g(Up,`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),Up.forEach(a),Ma.forEach(a),Va.forEach(a),ht.forEach(a),ln=c(s),Ee=n(s,"H2",{class:!0});var Tn=o(Ee);Ue=n(Tn,"A",{id:!0,class:!0,href:!0});var Gp=o(Ue);Ns=n(Gp,"SPAN",{});var Hp=o(Ns);b(Ct.$$.fragment,Hp),Hp.forEach(a),Gp.forEach(a),ul=c(Tn),Ps=n(Tn,"SPAN",{});var Wp=o(Ps);hl=g(Wp,"Download"),Wp.forEach(a),Tn.forEach(a),dn=c(s),P=n(s,"DIV",{class:!0});var L=o(P);b(Rt.$$.fragment,L),_l=c(L),se=n(L,"DIV",{class:!0});var Fa=o(se);b(At.$$.fragment,Fa),$l=c(Fa),Cs=n(Fa,"P",{});var Xp=o(Cs);vl=g(Xp,"Download given url(s)."),Xp.forEach(a),bl=c(Fa),b(Ge.$$.fragment,Fa),Fa.forEach(a),xl=c(L),re=n(L,"DIV",{class:!0});var za=o(re);b(Lt.$$.fragment,za),wl=c(za),Rs=n(za,"P",{});var Jp=o(Rs);El=g(Jp,"Download and extract given url_or_urls."),Jp.forEach(a),Dl=c(za),b(He.$$.fragment,za),za.forEach(a),yl=c(L),ne=n(L,"DIV",{class:!0});var Ua=o(ne);b(Ot.$$.fragment,Ua),kl=c(Ua),qt=n(Ua,"P",{});var Sn=o(qt);jl=g(Sn,"Download given urls(s) by calling "),As=n(Sn,"CODE",{});var Kp=o(As);Tl=g(Kp,"custom_download"),Kp.forEach(a),Sl=g(Sn,"."),Sn.forEach(a),Il=c(Ua),b(We.$$.fragment,Ua),Ua.forEach(a),Bl=c(L),oe=n(L,"DIV",{class:!0});var Ga=o(oe);b(Vt.$$.fragment,Ga),Nl=c(Ga),Ls=n(Ga,"P",{});var Yp=o(Ls);Pl=g(Yp,"Extract given path(s)."),Yp.forEach(a),Cl=c(Ga),b(Xe.$$.fragment,Ga),Ga.forEach(a),Rl=c(L),le=n(L,"DIV",{class:!0});var Ha=o(le);b(Mt.$$.fragment,Ha),Al=c(Ha),Os=n(Ha,"P",{});var Qp=o(Os);Ll=g(Qp,"Iterate over files within an archive."),Qp.forEach(a),Ol=c(Ha),b(Je.$$.fragment,Ha),Ha.forEach(a),ql=c(L),de=n(L,"DIV",{class:!0});var Wa=o(de);b(Ft.$$.fragment,Wa),Vl=c(Wa),qs=n(Wa,"P",{});var Zp=o(qs);Ml=g(Zp,"Iterate over file paths."),Zp.forEach(a),Fl=c(Wa),b(Ke.$$.fragment,Wa),Wa.forEach(a),zl=c(L),Ye=n(L,"DIV",{class:!0});var In=o(Ye);b(zt.$$.fragment,In),Ul=c(In),Vs=n(In,"P",{});var ec=o(Vs);Gl=g(ec,"Ship the files using Beam FileSystems to the pipeline temp dir."),ec.forEach(a),In.forEach(a),L.forEach(a),pn=c(s),R=n(s,"DIV",{class:!0});var M=o(R);b(Ut.$$.fragment,M),Hl=c(M),U=n(M,"P",{});var ue=o(U);Wl=g(ue,`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Ms=n(ue,"CODE",{});var tc=o(Ms);Xl=g(tc,"download"),tc.forEach(a),Jl=g(ue," and "),Fs=n(ue,"CODE",{});var ac=o(Fs);Kl=g(ac,"extract"),ac.forEach(a),Yl=g(ue,` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),zs=n(ue,"CODE",{});var sc=o(zs);Ql=g(sc,"xopen"),sc.forEach(a),Zl=g(ue,` function which extends the
builtin `),Us=n(ue,"CODE",{});var rc=o(Us);ed=g(rc,"open"),rc.forEach(a),td=g(ue," function to stream data from remote files."),ue.forEach(a),ad=c(M),ie=n(M,"DIV",{class:!0});var Xa=o(ie);b(Gt.$$.fragment,Xa),sd=c(Xa),Gs=n(Xa,"P",{});var nc=o(Gs);rd=g(nc,"Download given url(s)."),nc.forEach(a),nd=c(Xa),b(Qe.$$.fragment,Xa),Xa.forEach(a),od=c(M),pe=n(M,"DIV",{class:!0});var Ja=o(pe);b(Ht.$$.fragment,Ja),ld=c(Ja),Hs=n(Ja,"P",{});var oc=o(Hs);dd=g(oc,"Download and extract given url_or_urls."),oc.forEach(a),id=c(Ja),b(Ze.$$.fragment,Ja),Ja.forEach(a),pd=c(M),ce=n(M,"DIV",{class:!0});var Ka=o(ce);b(Wt.$$.fragment,Ka),cd=c(Ka),Ws=n(Ka,"P",{});var lc=o(Ws);md=g(lc,"Extract given path(s)."),lc.forEach(a),gd=c(Ka),b(et.$$.fragment,Ka),Ka.forEach(a),fd=c(M),me=n(M,"DIV",{class:!0});var Ya=o(me);b(Xt.$$.fragment,Ya),ud=c(Ya),Xs=n(Ya,"P",{});var dc=o(Xs);hd=g(dc,"Iterate over files within an archive."),dc.forEach(a),_d=c(Ya),b(tt.$$.fragment,Ya),Ya.forEach(a),$d=c(M),ge=n(M,"DIV",{class:!0});var Qa=o(ge);b(Jt.$$.fragment,Qa),vd=c(Qa),Js=n(Qa,"P",{});var ic=o(Js);bd=g(ic,"Iterate over files."),ic.forEach(a),xd=c(Qa),b(at.$$.fragment,Qa),Qa.forEach(a),M.forEach(a),cn=c(s),De=n(s,"DIV",{class:!0});var Bn=o(De);b(Kt.$$.fragment,Bn),wd=c(Bn),Ks=n(Bn,"P",{});var pc=o(Ks);Ed=g(pc,"Configuration for our cached path manager."),pc.forEach(a),Bn.forEach(a),mn=c(s),q=n(s,"DIV",{class:!0});var he=o(q);b(Yt.$$.fragment,he),Dd=c(he),Da=n(he,"P",{});var hp=o(Da);Ys=n(hp,"CODE",{});var cc=o(Ys);yd=g(cc,"Enum"),cc.forEach(a),kd=g(hp," for how to treat pre-existing downloads and data."),hp.forEach(a),jd=c(he),Qt=n(he,"P",{});var Nn=o(Qt);Td=g(Nn,"The default mode is "),Qs=n(Nn,"CODE",{});var mc=o(Qs);Sd=g(mc,"REUSE_DATASET_IF_EXISTS"),mc.forEach(a),Id=g(Nn,`, which will reuse both
raw downloads and the prepared dataset if they exist.`),Nn.forEach(a),Bd=c(he),Zs=n(he,"P",{});var gc=o(Zs);Nd=g(gc,"The generations modes:"),gc.forEach(a),Pd=c(he),Zt=n(he,"TABLE",{});var Pn=o(Zt);er=n(Pn,"THEAD",{});var fc=o(er);ye=n(fc,"TR",{});var Za=o(ye);gn=n(Za,"TH",{}),o(gn).forEach(a),Cd=c(Za),tr=n(Za,"TH",{});var uc=o(tr);Rd=g(uc,"Downloads"),uc.forEach(a),Ad=c(Za),ar=n(Za,"TH",{});var hc=o(ar);Ld=g(hc,"Dataset"),hc.forEach(a),Za.forEach(a),fc.forEach(a),Od=c(Pn),ke=n(Pn,"TBODY",{});var es=o(ke);je=n(es,"TR",{});var ts=o(je);ya=n(ts,"TD",{});var _p=o(ya);sr=n(_p,"CODE",{});var _c=o(sr);qd=g(_c,"REUSE_DATASET_IF_EXISTS"),_c.forEach(a),Vd=g(_p," (default)"),_p.forEach(a),Md=c(ts),rr=n(ts,"TD",{});var $c=o(rr);Fd=g($c,"Reuse"),$c.forEach(a),zd=c(ts),nr=n(ts,"TD",{});var vc=o(nr);Ud=g(vc,"Reuse"),vc.forEach(a),ts.forEach(a),Gd=c(es),Te=n(es,"TR",{});var as=o(Te);or=n(as,"TD",{});var bc=o(or);lr=n(bc,"CODE",{});var xc=o(lr);Hd=g(xc,"REUSE_CACHE_IF_EXISTS"),xc.forEach(a),bc.forEach(a),Wd=c(as),dr=n(as,"TD",{});var wc=o(dr);Xd=g(wc,"Reuse"),wc.forEach(a),Jd=c(as),ir=n(as,"TD",{});var Ec=o(ir);Kd=g(Ec,"Fresh"),Ec.forEach(a),as.forEach(a),Yd=c(es),Se=n(es,"TR",{});var ss=o(Se);pr=n(ss,"TD",{});var Dc=o(pr);cr=n(Dc,"CODE",{});var yc=o(cr);Qd=g(yc,"FORCE_REDOWNLOAD"),yc.forEach(a),Dc.forEach(a),Zd=c(ss),mr=n(ss,"TD",{});var kc=o(mr);ei=g(kc,"Fresh"),kc.forEach(a),ti=c(ss),gr=n(ss,"TD",{});var jc=o(gr);ai=g(jc,"Fresh"),jc.forEach(a),ss.forEach(a),es.forEach(a),Pn.forEach(a),he.forEach(a),fn=c(s),Ie=n(s,"H2",{class:!0});var Cn=o(Ie);st=n(Cn,"A",{id:!0,class:!0,href:!0});var Tc=o(st);fr=n(Tc,"SPAN",{});var Sc=o(fr);b(ea.$$.fragment,Sc),Sc.forEach(a),Tc.forEach(a),si=c(Cn),ur=n(Cn,"SPAN",{});var Ic=o(ur);ri=g(Ic,"Splits"),Ic.forEach(a),Cn.forEach(a),un=c(s),G=n(s,"DIV",{class:!0});var _t=o(G);b(ta.$$.fragment,_t),ni=c(_t),hr=n(_t,"P",{});var Bc=o(hr);oi=g(Bc,"Defines the split information for the generator."),Bc.forEach(a),li=c(_t),Be=n(_t,"P",{});var rs=o(Be);di=g(rs,`This should be used as returned value of
`),_r=n(rs,"CODE",{});var Nc=o(_r);ii=g(Nc,"GeneratorBasedBuilder._split_generators()"),Nc.forEach(a),pi=g(rs,`.
See `),$r=n(rs,"CODE",{});var Pc=o($r);ci=g(Pc,"GeneratorBasedBuilder._split_generators()"),Pc.forEach(a),mi=g(rs,` for more info and example
of usage.`),rs.forEach(a),gi=c(_t),b(rt.$$.fragment,_t),_t.forEach(a),hn=c(s),A=n(s,"DIV",{class:!0});var F=o(A);b(aa.$$.fragment,F),fi=c(F),ka=n(F,"P",{});var $p=o(ka);vr=n($p,"CODE",{});var Cc=o(vr);ui=g(Cc,"Enum"),Cc.forEach(a),hi=g($p," for dataset splits."),$p.forEach(a),_i=c(F),br=n(F,"P",{});var Rc=o(br);$i=g(Rc,`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),Rc.forEach(a),vi=c(F),J=n(F,"UL",{});var $t=o(J);ja=n($t,"LI",{});var vp=o(ja);xr=n(vp,"CODE",{});var Ac=o(xr);bi=g(Ac,"TRAIN"),Ac.forEach(a),xi=g(vp,": the training data."),vp.forEach(a),wi=c($t),Ta=n($t,"LI",{});var bp=o(Ta);wr=n(bp,"CODE",{});var Lc=o(wr);Ei=g(Lc,"VALIDATION"),Lc.forEach(a),Di=g(bp,`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),bp.forEach(a),yi=c($t),Sa=n($t,"LI",{});var xp=o(Sa);Er=n(xp,"CODE",{});var Oc=o(Er);ki=g(Oc,"TEST"),Oc.forEach(a),ji=g(xp,`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),xp.forEach(a),Ti=c($t),Ia=n($t,"LI",{});var wp=o(Ia);Dr=n(wp,"CODE",{});var qc=o(Dr);Si=g(qc,"ALL"),qc.forEach(a),Ii=g(wp,": the union of all defined dataset splits."),wp.forEach(a),$t.forEach(a),Bi=c(F),Ba=n(F,"P",{});var Ep=o(Ba);Ni=g(Ep,"Note: All splits, including compositions inherit from "),yr=n(Ep,"CODE",{});var Vc=o(yr);Pi=g(Vc,"datasets.SplitBase"),Vc.forEach(a),Ep.forEach(a),Ci=c(F),sa=n(F,"P",{});var Rn=o(sa);Ri=g(Rn,"See the :doc:"),kr=n(Rn,"CODE",{});var Mc=o(kr);Ai=g(Mc,"guide on splits </loading>"),Mc.forEach(a),Li=g(Rn," for more information."),Rn.forEach(a),Oi=c(F),b(nt.$$.fragment,F),F.forEach(a),_n=c(s),C=n(s,"DIV",{class:!0});var O=o(C);b(ra.$$.fragment,O),qi=c(O),jr=n(O,"P",{});var Fc=o(jr);Vi=g(Fc,"Descriptor corresponding to a named split (train, test, \u2026)."),Fc.forEach(a),Mi=c(O),b(ot.$$.fragment,O),Fi=c(O),Tr=n(O,"P",{});var zc=o(Tr);zi=g(zc,"Warning:"),zc.forEach(a),Ui=c(O),b(lt.$$.fragment,O),Gi=c(O),Sr=n(O,"P",{});var Uc=o(Sr);Hi=g(Uc,"Warning:"),Uc.forEach(a),Wi=c(O),b(dt.$$.fragment,O),Xi=c(O),b(it.$$.fragment,O),O.forEach(a),$n=c(s),Ne=n(s,"DIV",{class:!0});var An=o(Ne);b(na.$$.fragment,An),Ji=c(An),Ir=n(An,"P",{});var Gc=o(Ir);Ki=g(Gc,"Split corresponding to the union of all defined dataset splits."),Gc.forEach(a),An.forEach(a),vn=c(s),V=n(s,"DIV",{class:!0});var _e=o(V);b(oa.$$.fragment,_e),Yi=c(_e),Br=n(_e,"P",{});var Hc=o(Br);Qi=g(Hc,"Reading instruction for a dataset."),Hc.forEach(a),Zi=c(_e),b(pt.$$.fragment,_e),ep=c(_e),ct=n(_e,"DIV",{class:!0});var Ln=o(ct);b(la.$$.fragment,Ln),tp=c(Ln),Nr=n(Ln,"P",{});var Wc=o(Nr);ap=g(Wc,"Creates a ReadInstruction instance out of a string spec."),Wc.forEach(a),Ln.forEach(a),sp=c(_e),fe=n(_e,"DIV",{class:!0});var ns=o(fe);b(da.$$.fragment,ns),rp=c(ns),Pr=n(ns,"P",{});var Xc=o(Pr);np=g(Xc,"Translate instruction into a list of absolute instructions."),Xc.forEach(a),op=c(ns),Cr=n(ns,"P",{});var Jc=o(Cr);lp=g(Jc,"Those absolute instructions are then to be added together."),Jc.forEach(a),ns.forEach(a),_e.forEach(a),bn=c(s),Pe=n(s,"H2",{class:!0});var On=o(Pe);mt=n(On,"A",{id:!0,class:!0,href:!0});var Kc=o(mt);Rr=n(Kc,"SPAN",{});var Yc=o(Rr);b(ia.$$.fragment,Yc),Yc.forEach(a),Kc.forEach(a),dp=c(On),Ar=n(On,"SPAN",{});var Qc=o(Ar);ip=g(Qc,"Version"),Qc.forEach(a),On.forEach(a),xn=c(s),H=n(s,"DIV",{class:!0});var vt=o(H);b(pa.$$.fragment,vt),pp=c(vt),Lr=n(vt,"P",{});var Zc=o(Lr);cp=g(Zc,"Dataset version MAJOR.MINOR.PATCH."),Zc.forEach(a),mp=c(vt),b(gt.$$.fragment,vt),gp=c(vt),ft=n(vt,"DIV",{class:!0});var qn=o(ft);b(ca.$$.fragment,qn),fp=c(qn),Or=n(qn,"P",{});var em=o(Or);up=g(em,"Returns True if other_version matches."),em.forEach(a),qn.forEach(a),vt.forEach(a),this.h()},h(){y(d,"name","hf:doc:metadata"),y(d,"content",JSON.stringify(Im)),y(l,"id","builder-classes"),y(l,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(l,"href","#builder-classes"),y(f,"class","relative group"),y(Le,"id","datasets.DatasetBuilder"),y(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Le,"href","#datasets.DatasetBuilder"),y($e,"class","relative group"),y(ua,"href","/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.DatasetBuilder"),y(ha,"href","/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.BuilderConfig"),y(ba,"href","/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.DatasetBuilder.download_and_prepare"),y(xa,"href","/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.DatasetBuilder.as_dataset"),y(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(wa,"href","/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.DatasetBuilder"),y(Ea,"href","/docs/datasets/pr_4432/en/package_reference/builder_classes#datasets.BuilderConfig"),y(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Ue,"id","datasets.DownloadManager"),y(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Ue,"href","#datasets.DownloadManager"),y(Ee,"class","relative group"),y(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(st,"id","datasets.SplitGenerator"),y(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(st,"href","#datasets.SplitGenerator"),y(Ie,"class","relative group"),y(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(mt,"id","datasets.Version"),y(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(mt,"href","#datasets.Version"),y(Pe,"class","relative group"),y(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,_){e(document.head,d),$(s,h,_),$(s,f,_),e(f,l),e(l,u),x(t,u,null),e(f,i),e(f,os),e(os,Vn),$(s,en,_),$(s,$e,_),e($e,Le),e(Le,ls),x(bt,ls,null),e($e,Mn),e($e,ds),e(ds,Fn),$(s,tn,_),$(s,K,_),e(K,zn),e(K,ua),e(ua,Un),e(K,Gn),e(K,ha),e(ha,Hn),e(K,Wn),$(s,an,_),$(s,T,_),x(xt,T,null),e(T,Xn),e(T,is),e(is,Jn),e(T,Kn),e(T,_a),e(_a,ps),e(ps,Yn),e(_a,Qn),e(T,Zn),e(T,ve),e(ve,$a),e($a,cs),e(cs,eo),e($a,to),e(ve,ao),e(ve,va),e(va,ba),e(ba,so),e(va,ro),e(ve,no),e(ve,Oe),e(Oe,xa),e(xa,oo),e(Oe,lo),e(Oe,ms),e(ms,io),e(Oe,po),e(T,co),e(T,W),e(W,gs),e(gs,mo),e(W,go),e(W,fs),e(fs,fo),e(W,uo),e(W,us),e(us,ho),e(W,_o),e(W,hs),e(hs,$o),e(W,vo),e(T,bo),e(T,Y),x(wt,Y,null),e(Y,xo),e(Y,_s),e(_s,wo),e(Y,Eo),x(qe,Y,null),e(T,Do),e(T,Q),x(Et,Q,null),e(Q,yo),e(Q,$s),e($s,ko),e(Q,jo),x(Ve,Q,null),e(T,To),e(T,Z),x(Dt,Z,null),e(Z,So),e(Z,vs),e(vs,Io),e(Z,Bo),x(Me,Z,null),e(T,No),e(T,ee),x(yt,ee,null),e(ee,Po),e(ee,bs),e(bs,Co),e(ee,Ro),x(Fe,ee,null),e(T,Ao),e(T,ze),x(kt,ze,null),e(ze,Lo),e(ze,xs),e(xs,Oo),$(s,sn,_),$(s,X,_),x(jt,X,null),e(X,qo),e(X,ws),e(ws,Vo),e(X,Mo),e(X,te),e(te,Es),e(Es,Fo),e(te,zo),e(te,Ds),e(Ds,Uo),e(te,Go),e(te,ys),e(ys,Ho),e(te,Wo),$(s,rn,_),$(s,be,_),x(Tt,be,null),e(be,Xo),e(be,ks),e(ks,Jo),$(s,nn,_),$(s,xe,_),x(St,xe,null),e(xe,Ko),e(xe,js),e(js,Yo),$(s,on,_),$(s,z,_),x(It,z,null),e(z,Qo),e(z,Bt),e(Bt,Zo),e(Bt,wa),e(wa,el),e(Bt,tl),e(z,al),e(z,Nt),e(Nt,sl),e(Nt,Ea),e(Ea,rl),e(Nt,nl),e(z,ol),e(z,ae),x(Pt,ae,null),e(ae,ll),e(ae,Ts),e(Ts,dl),e(ae,il),e(ae,we),e(we,Ss),e(Ss,pl),e(we,cl),e(we,Is),e(Is,ml),e(we,gl),e(we,Bs),e(Bs,fl),$(s,ln,_),$(s,Ee,_),e(Ee,Ue),e(Ue,Ns),x(Ct,Ns,null),e(Ee,ul),e(Ee,Ps),e(Ps,hl),$(s,dn,_),$(s,P,_),x(Rt,P,null),e(P,_l),e(P,se),x(At,se,null),e(se,$l),e(se,Cs),e(Cs,vl),e(se,bl),x(Ge,se,null),e(P,xl),e(P,re),x(Lt,re,null),e(re,wl),e(re,Rs),e(Rs,El),e(re,Dl),x(He,re,null),e(P,yl),e(P,ne),x(Ot,ne,null),e(ne,kl),e(ne,qt),e(qt,jl),e(qt,As),e(As,Tl),e(qt,Sl),e(ne,Il),x(We,ne,null),e(P,Bl),e(P,oe),x(Vt,oe,null),e(oe,Nl),e(oe,Ls),e(Ls,Pl),e(oe,Cl),x(Xe,oe,null),e(P,Rl),e(P,le),x(Mt,le,null),e(le,Al),e(le,Os),e(Os,Ll),e(le,Ol),x(Je,le,null),e(P,ql),e(P,de),x(Ft,de,null),e(de,Vl),e(de,qs),e(qs,Ml),e(de,Fl),x(Ke,de,null),e(P,zl),e(P,Ye),x(zt,Ye,null),e(Ye,Ul),e(Ye,Vs),e(Vs,Gl),$(s,pn,_),$(s,R,_),x(Ut,R,null),e(R,Hl),e(R,U),e(U,Wl),e(U,Ms),e(Ms,Xl),e(U,Jl),e(U,Fs),e(Fs,Kl),e(U,Yl),e(U,zs),e(zs,Ql),e(U,Zl),e(U,Us),e(Us,ed),e(U,td),e(R,ad),e(R,ie),x(Gt,ie,null),e(ie,sd),e(ie,Gs),e(Gs,rd),e(ie,nd),x(Qe,ie,null),e(R,od),e(R,pe),x(Ht,pe,null),e(pe,ld),e(pe,Hs),e(Hs,dd),e(pe,id),x(Ze,pe,null),e(R,pd),e(R,ce),x(Wt,ce,null),e(ce,cd),e(ce,Ws),e(Ws,md),e(ce,gd),x(et,ce,null),e(R,fd),e(R,me),x(Xt,me,null),e(me,ud),e(me,Xs),e(Xs,hd),e(me,_d),x(tt,me,null),e(R,$d),e(R,ge),x(Jt,ge,null),e(ge,vd),e(ge,Js),e(Js,bd),e(ge,xd),x(at,ge,null),$(s,cn,_),$(s,De,_),x(Kt,De,null),e(De,wd),e(De,Ks),e(Ks,Ed),$(s,mn,_),$(s,q,_),x(Yt,q,null),e(q,Dd),e(q,Da),e(Da,Ys),e(Ys,yd),e(Da,kd),e(q,jd),e(q,Qt),e(Qt,Td),e(Qt,Qs),e(Qs,Sd),e(Qt,Id),e(q,Bd),e(q,Zs),e(Zs,Nd),e(q,Pd),e(q,Zt),e(Zt,er),e(er,ye),e(ye,gn),e(ye,Cd),e(ye,tr),e(tr,Rd),e(ye,Ad),e(ye,ar),e(ar,Ld),e(Zt,Od),e(Zt,ke),e(ke,je),e(je,ya),e(ya,sr),e(sr,qd),e(ya,Vd),e(je,Md),e(je,rr),e(rr,Fd),e(je,zd),e(je,nr),e(nr,Ud),e(ke,Gd),e(ke,Te),e(Te,or),e(or,lr),e(lr,Hd),e(Te,Wd),e(Te,dr),e(dr,Xd),e(Te,Jd),e(Te,ir),e(ir,Kd),e(ke,Yd),e(ke,Se),e(Se,pr),e(pr,cr),e(cr,Qd),e(Se,Zd),e(Se,mr),e(mr,ei),e(Se,ti),e(Se,gr),e(gr,ai),$(s,fn,_),$(s,Ie,_),e(Ie,st),e(st,fr),x(ea,fr,null),e(Ie,si),e(Ie,ur),e(ur,ri),$(s,un,_),$(s,G,_),x(ta,G,null),e(G,ni),e(G,hr),e(hr,oi),e(G,li),e(G,Be),e(Be,di),e(Be,_r),e(_r,ii),e(Be,pi),e(Be,$r),e($r,ci),e(Be,mi),e(G,gi),x(rt,G,null),$(s,hn,_),$(s,A,_),x(aa,A,null),e(A,fi),e(A,ka),e(ka,vr),e(vr,ui),e(ka,hi),e(A,_i),e(A,br),e(br,$i),e(A,vi),e(A,J),e(J,ja),e(ja,xr),e(xr,bi),e(ja,xi),e(J,wi),e(J,Ta),e(Ta,wr),e(wr,Ei),e(Ta,Di),e(J,yi),e(J,Sa),e(Sa,Er),e(Er,ki),e(Sa,ji),e(J,Ti),e(J,Ia),e(Ia,Dr),e(Dr,Si),e(Ia,Ii),e(A,Bi),e(A,Ba),e(Ba,Ni),e(Ba,yr),e(yr,Pi),e(A,Ci),e(A,sa),e(sa,Ri),e(sa,kr),e(kr,Ai),e(sa,Li),e(A,Oi),x(nt,A,null),$(s,_n,_),$(s,C,_),x(ra,C,null),e(C,qi),e(C,jr),e(jr,Vi),e(C,Mi),x(ot,C,null),e(C,Fi),e(C,Tr),e(Tr,zi),e(C,Ui),x(lt,C,null),e(C,Gi),e(C,Sr),e(Sr,Hi),e(C,Wi),x(dt,C,null),e(C,Xi),x(it,C,null),$(s,$n,_),$(s,Ne,_),x(na,Ne,null),e(Ne,Ji),e(Ne,Ir),e(Ir,Ki),$(s,vn,_),$(s,V,_),x(oa,V,null),e(V,Yi),e(V,Br),e(Br,Qi),e(V,Zi),x(pt,V,null),e(V,ep),e(V,ct),x(la,ct,null),e(ct,tp),e(ct,Nr),e(Nr,ap),e(V,sp),e(V,fe),x(da,fe,null),e(fe,rp),e(fe,Pr),e(Pr,np),e(fe,op),e(fe,Cr),e(Cr,lp),$(s,bn,_),$(s,Pe,_),e(Pe,mt),e(mt,Rr),x(ia,Rr,null),e(Pe,dp),e(Pe,Ar),e(Ar,ip),$(s,xn,_),$(s,H,_),x(pa,H,null),e(H,pp),e(H,Lr),e(Lr,cp),e(H,mp),x(gt,H,null),e(H,gp),e(H,ft),x(ca,ft,null),e(ft,fp),e(ft,Or),e(Or,up),wn=!0},p(s,[_]){const ma={};_&2&&(ma.$$scope={dirty:_,ctx:s}),qe.$set(ma);const qr={};_&2&&(qr.$$scope={dirty:_,ctx:s}),Ve.$set(qr);const Vr={};_&2&&(Vr.$$scope={dirty:_,ctx:s}),Me.$set(Vr);const Mr={};_&2&&(Mr.$$scope={dirty:_,ctx:s}),Fe.$set(Mr);const ga={};_&2&&(ga.$$scope={dirty:_,ctx:s}),Ge.$set(ga);const Fr={};_&2&&(Fr.$$scope={dirty:_,ctx:s}),He.$set(Fr);const zr={};_&2&&(zr.$$scope={dirty:_,ctx:s}),We.$set(zr);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:s}),Xe.$set(Ur);const Ce={};_&2&&(Ce.$$scope={dirty:_,ctx:s}),Je.$set(Ce);const Gr={};_&2&&(Gr.$$scope={dirty:_,ctx:s}),Ke.$set(Gr);const Hr={};_&2&&(Hr.$$scope={dirty:_,ctx:s}),Qe.$set(Hr);const S={};_&2&&(S.$$scope={dirty:_,ctx:s}),Ze.$set(S);const Wr={};_&2&&(Wr.$$scope={dirty:_,ctx:s}),et.$set(Wr);const Na={};_&2&&(Na.$$scope={dirty:_,ctx:s}),tt.$set(Na);const Xr={};_&2&&(Xr.$$scope={dirty:_,ctx:s}),at.$set(Xr);const Re={};_&2&&(Re.$$scope={dirty:_,ctx:s}),rt.$set(Re);const Pa={};_&2&&(Pa.$$scope={dirty:_,ctx:s}),nt.$set(Pa);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:s}),ot.$set(Jr);const Ca={};_&2&&(Ca.$$scope={dirty:_,ctx:s}),lt.$set(Ca);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:s}),dt.$set(Kr);const ut={};_&2&&(ut.$$scope={dirty:_,ctx:s}),it.$set(ut);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:s}),pt.$set(Yr);const Qr={};_&2&&(Qr.$$scope={dirty:_,ctx:s}),gt.$set(Qr)},i(s){wn||(w(t.$$.fragment,s),w(bt.$$.fragment,s),w(xt.$$.fragment,s),w(wt.$$.fragment,s),w(qe.$$.fragment,s),w(Et.$$.fragment,s),w(Ve.$$.fragment,s),w(Dt.$$.fragment,s),w(Me.$$.fragment,s),w(yt.$$.fragment,s),w(Fe.$$.fragment,s),w(kt.$$.fragment,s),w(jt.$$.fragment,s),w(Tt.$$.fragment,s),w(St.$$.fragment,s),w(It.$$.fragment,s),w(Pt.$$.fragment,s),w(Ct.$$.fragment,s),w(Rt.$$.fragment,s),w(At.$$.fragment,s),w(Ge.$$.fragment,s),w(Lt.$$.fragment,s),w(He.$$.fragment,s),w(Ot.$$.fragment,s),w(We.$$.fragment,s),w(Vt.$$.fragment,s),w(Xe.$$.fragment,s),w(Mt.$$.fragment,s),w(Je.$$.fragment,s),w(Ft.$$.fragment,s),w(Ke.$$.fragment,s),w(zt.$$.fragment,s),w(Ut.$$.fragment,s),w(Gt.$$.fragment,s),w(Qe.$$.fragment,s),w(Ht.$$.fragment,s),w(Ze.$$.fragment,s),w(Wt.$$.fragment,s),w(et.$$.fragment,s),w(Xt.$$.fragment,s),w(tt.$$.fragment,s),w(Jt.$$.fragment,s),w(at.$$.fragment,s),w(Kt.$$.fragment,s),w(Yt.$$.fragment,s),w(ea.$$.fragment,s),w(ta.$$.fragment,s),w(rt.$$.fragment,s),w(aa.$$.fragment,s),w(nt.$$.fragment,s),w(ra.$$.fragment,s),w(ot.$$.fragment,s),w(lt.$$.fragment,s),w(dt.$$.fragment,s),w(it.$$.fragment,s),w(na.$$.fragment,s),w(oa.$$.fragment,s),w(pt.$$.fragment,s),w(la.$$.fragment,s),w(da.$$.fragment,s),w(ia.$$.fragment,s),w(pa.$$.fragment,s),w(gt.$$.fragment,s),w(ca.$$.fragment,s),wn=!0)},o(s){E(t.$$.fragment,s),E(bt.$$.fragment,s),E(xt.$$.fragment,s),E(wt.$$.fragment,s),E(qe.$$.fragment,s),E(Et.$$.fragment,s),E(Ve.$$.fragment,s),E(Dt.$$.fragment,s),E(Me.$$.fragment,s),E(yt.$$.fragment,s),E(Fe.$$.fragment,s),E(kt.$$.fragment,s),E(jt.$$.fragment,s),E(Tt.$$.fragment,s),E(St.$$.fragment,s),E(It.$$.fragment,s),E(Pt.$$.fragment,s),E(Ct.$$.fragment,s),E(Rt.$$.fragment,s),E(At.$$.fragment,s),E(Ge.$$.fragment,s),E(Lt.$$.fragment,s),E(He.$$.fragment,s),E(Ot.$$.fragment,s),E(We.$$.fragment,s),E(Vt.$$.fragment,s),E(Xe.$$.fragment,s),E(Mt.$$.fragment,s),E(Je.$$.fragment,s),E(Ft.$$.fragment,s),E(Ke.$$.fragment,s),E(zt.$$.fragment,s),E(Ut.$$.fragment,s),E(Gt.$$.fragment,s),E(Qe.$$.fragment,s),E(Ht.$$.fragment,s),E(Ze.$$.fragment,s),E(Wt.$$.fragment,s),E(et.$$.fragment,s),E(Xt.$$.fragment,s),E(tt.$$.fragment,s),E(Jt.$$.fragment,s),E(at.$$.fragment,s),E(Kt.$$.fragment,s),E(Yt.$$.fragment,s),E(ea.$$.fragment,s),E(ta.$$.fragment,s),E(rt.$$.fragment,s),E(aa.$$.fragment,s),E(nt.$$.fragment,s),E(ra.$$.fragment,s),E(ot.$$.fragment,s),E(lt.$$.fragment,s),E(dt.$$.fragment,s),E(it.$$.fragment,s),E(na.$$.fragment,s),E(oa.$$.fragment,s),E(pt.$$.fragment,s),E(la.$$.fragment,s),E(da.$$.fragment,s),E(ia.$$.fragment,s),E(pa.$$.fragment,s),E(gt.$$.fragment,s),E(ca.$$.fragment,s),wn=!1},d(s){a(d),s&&a(h),s&&a(f),D(t),s&&a(en),s&&a($e),D(bt),s&&a(tn),s&&a(K),s&&a(an),s&&a(T),D(xt),D(wt),D(qe),D(Et),D(Ve),D(Dt),D(Me),D(yt),D(Fe),D(kt),s&&a(sn),s&&a(X),D(jt),s&&a(rn),s&&a(be),D(Tt),s&&a(nn),s&&a(xe),D(St),s&&a(on),s&&a(z),D(It),D(Pt),s&&a(ln),s&&a(Ee),D(Ct),s&&a(dn),s&&a(P),D(Rt),D(At),D(Ge),D(Lt),D(He),D(Ot),D(We),D(Vt),D(Xe),D(Mt),D(Je),D(Ft),D(Ke),D(zt),s&&a(pn),s&&a(R),D(Ut),D(Gt),D(Qe),D(Ht),D(Ze),D(Wt),D(et),D(Xt),D(tt),D(Jt),D(at),s&&a(cn),s&&a(De),D(Kt),s&&a(mn),s&&a(q),D(Yt),s&&a(fn),s&&a(Ie),D(ea),s&&a(un),s&&a(G),D(ta),D(rt),s&&a(hn),s&&a(A),D(aa),D(nt),s&&a(_n),s&&a(C),D(ra),D(ot),D(lt),D(dt),D(it),s&&a($n),s&&a(Ne),D(na),s&&a(vn),s&&a(V),D(oa),D(pt),D(la),D(da),s&&a(bn),s&&a(Pe),D(ia),s&&a(xn),s&&a(H),D(pa),D(gt),D(ca)}}}const Im={local:"builder-classes",sections:[{local:"datasets.DatasetBuilder",title:"Builders"},{local:"datasets.DownloadManager",title:"Download"},{local:"datasets.SplitGenerator",title:"Splits"},{local:"datasets.Version",title:"Version"}],title:"Builder classes"};function Bm(k){return nm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Lm extends tm{constructor(d){super();am(this,d,Bm,Sm,sm,{})}}export{Lm as default,Im as metadata};
