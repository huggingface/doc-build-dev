import{S as El,i as yl,s as kl,e as n,k as c,w as $,t as s,M as xl,c as i,d as t,m,a as r,x as j,h as l,b as h,G as e,g as p,y as v,q,o as b,B as w,v as Il}from"../chunks/vendor-hf-doc-builder.js";import{T as Os}from"../chunks/Tip-hf-doc-builder.js";import{I as Ba}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as D}from"../chunks/CodeBlock-hf-doc-builder.js";function Pl(W){let d,I,u,E,y,g,P,k;return{c(){d=n("p"),I=s("To work with image datasets, you need to have the "),u=n("code"),E=s("vision"),y=s(" dependency installed. Check out the "),g=n("a"),P=s("installation"),k=s(" guide to learn how to install it."),this.h()},l(_){d=i(_,"P",{});var f=r(d);I=l(f,"To work with image datasets, you need to have the "),u=i(f,"CODE",{});var x=r(u);E=l(x,"vision"),x.forEach(t),y=l(f," dependency installed. Check out the "),g=i(f,"A",{href:!0});var A=r(g);P=l(A,"installation"),A.forEach(t),k=l(f," guide to learn how to install it."),f.forEach(t),this.h()},h(){h(g,"href","./installation#vision")},m(_,f){p(_,d,f),e(d,I),e(d,u),e(u,E),e(d,y),e(d,g),e(g,P),e(d,k)},d(_){_&&t(d)}}}function Cl(W){let d,I,u,E,y,g,P,k;return{c(){d=n("p"),I=s("Index into an image dataset using the row index first and then the "),u=n("code"),E=s("image"),y=s(" column - "),g=n("code"),P=s('dataset[0]["image"]'),k=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(_){d=i(_,"P",{});var f=r(d);I=l(f,"Index into an image dataset using the row index first and then the "),u=i(f,"CODE",{});var x=r(u);E=l(x,"image"),x.forEach(t),y=l(f," column - "),g=i(f,"CODE",{});var A=r(g);P=l(A,'dataset[0]["image"]'),A.forEach(t),k=l(f," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),f.forEach(t)},m(_,f){p(_,d,f),e(d,I),e(d,u),e(u,E),e(d,y),e(d,g),e(g,P),e(d,k)},d(_){_&&t(d)}}}function Al(W){let d,I,u,E,y,g,P,k;return{c(){d=n("p"),I=s("If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=n("code"),E=s("drop_labels=False"),y=s(" in "),g=n("code"),P=s("load_dataset"),k=s(".")},l(_){d=i(_,"P",{});var f=r(d);I=l(f,"If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=i(f,"CODE",{});var x=r(u);E=l(x,"drop_labels=False"),x.forEach(t),y=l(f," in "),g=i(f,"CODE",{});var A=r(g);P=l(A,"load_dataset"),A.forEach(t),k=l(f,"."),f.forEach(t)},m(_,f){p(_,d,f),e(d,I),e(d,u),e(u,E),e(d,y),e(d,g),e(g,P),e(d,k)},d(_){_&&t(d)}}}function Dl(W){let d,I,u,E,y,g,P,k,_,f,x,A,Ya,ct,mt,je,J,ve,O,ht,Ma,ft,ut,ya,gt,_t,qe,ia,be,K,we,Q,$t,ka,jt,vt,Ee,H,V,Ha,ra,qt,Ra,bt,ye,L,wt,xa,Et,yt,Ia,kt,xt,ke,pa,xe,T,It,za,Pt,Ct,Pa,At,Dt,Ie,da,Pe,R,X,Ua,ca,Ft,Ga,Ot,Ce,Z,Lt,Wa,Tt,St,Ae,ma,De,S,Nt,Ja,Bt,Yt,Ka,Mt,Ht,Fe,ha,Oe,aa,Rt,Qa,zt,Ut,Le,fa,Te,C,Va,Gt,Wt,Xa,Jt,Kt,Za,Qt,Vt,ae,Xt,Zt,Ca,as,es,Se,z,ea,ee,ua,ts,te,ss,Ne,N,ls,se,os,ns,le,is,rs,Be,ga,Ye,B,ps,oe,ds,cs,ne,ms,hs,Me,_a,He,ta,Re,U,sa,ie,$a,fs,re,us,ze,la,gs,pe,_s,$s,Ue,ja,Ge,Y,js,de,vs,qs,ce,bs,ws,We,va,Je,G,oa,me,qa,Es,he,ys,Ke,na,ks,fe,xs,Is,Qe,ba,Ve,M,Ps,ue,Cs,As,ge,Ds,Fs,Xe,wa,Ze;return g=new Ba({}),J=new Os({props:{$$slots:{default:[Pl]},$$scope:{ctx:W}}}),ia=new D({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),K=new Os({props:{warning:!0,$$slots:{default:[Cl]},$$scope:{ctx:W}}}),ra=new Ba({}),pa=new D({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),da=new D({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),ca=new Ba({}),ma=new D({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ha=new D({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]

dataset["train"][-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][-<span class="hljs-number">1</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E8DAD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}`}}),fa=new D({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ua=new Ba({}),ga=new D({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),_a=new D({props:{code:`{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a first value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a second value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a third value of a text feature you added to your images&quot;</span>}`}}),ta=new Os({props:{$$slots:{default:[Al]},$$scope:{ctx:W}}}),$a=new Ba({}),ja=new D({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),va=new D({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),qa=new Ba({}),ba=new D({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),wa=new D({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){d=n("meta"),I=c(),u=n("h1"),E=n("a"),y=n("span"),$(g.$$.fragment),P=c(),k=n("span"),_=s("Load image data"),f=c(),x=n("p"),A=s("Image datasets are loaded from the "),Ya=n("code"),ct=s("image"),mt=s(" column, which contains a PIL object."),je=c(),$(J.$$.fragment),ve=c(),O=n("p"),ht=s("When you load an image dataset and call the "),Ma=n("code"),ft=s("image"),ut=s(" column, the "),ya=n("a"),gt=s("Image"),_t=s(" feature automatically decodes the PIL object into an image:"),qe=c(),$(ia.$$.fragment),be=c(),$(K.$$.fragment),we=c(),Q=n("p"),$t=s("For a guide on how to load any type of dataset, take a look at the "),ka=n("a"),jt=s("general loading guide"),vt=s("."),Ee=c(),H=n("h2"),V=n("a"),Ha=n("span"),$(ra.$$.fragment),qt=c(),Ra=n("span"),bt=s("Local files"),ye=c(),L=n("p"),wt=s("You can load a dataset from the image path. Use the "),xa=n("a"),Et=s("cast_column()"),yt=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),Ia=n("a"),kt=s("Image"),xt=s(" feature:"),ke=c(),$(pa.$$.fragment),xe=c(),T=n("p"),It=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),za=n("code"),Pt=s("decode=False"),Ct=s(" in the "),Pa=n("a"),At=s("Image"),Dt=s(" feature:"),Ie=c(),$(da.$$.fragment),Pe=c(),R=n("h2"),X=n("a"),Ua=n("span"),$(ca.$$.fragment),Ft=c(),Ga=n("span"),Ot=s("ImageFolder"),Ce=c(),Z=n("p"),Lt=s("You can also load a dataset with a "),Wa=n("code"),Tt=s("ImageFolder"),St=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Ae=c(),$(ma.$$.fragment),De=c(),S=n("p"),Nt=s("Load your dataset by specifying "),Ja=n("code"),Bt=s("imagefolder"),Yt=s(" and the directory of your dataset in "),Ka=n("code"),Mt=s("data_dir"),Ht=s(":"),Fe=c(),$(ha.$$.fragment),Oe=c(),aa=n("p"),Rt=s("Load remote datasets from their URLs with the "),Qa=n("code"),zt=s("data_files"),Ut=s(" parameter:"),Le=c(),$(fa.$$.fragment),Te=c(),C=n("p"),Va=n("code"),Gt=s("ImageFolder"),Wt=s(" creates a "),Xa=n("code"),Jt=s("label"),Kt=s(" column, and the label name is based on the directory name. To ignore the "),Za=n("code"),Qt=s("label"),Vt=s(" column, set "),ae=n("code"),Xt=s("drop_labels=False"),Zt=s(" as defined in "),Ca=n("a"),as=s("ImageFolderConfig"),es=s("."),Se=c(),z=n("h2"),ea=n("a"),ee=n("span"),$(ua.$$.fragment),ts=c(),te=n("span"),ss=s("ImageFolder with metadata"),Ne=c(),N=n("p"),ls=s("Metadata associated with your dataset can also be loaded, extending the utility of "),se=n("code"),os=s("ImageFolder"),ns=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),le=n("code"),is=s("metadata.jsonl"),rs=s(" file:"),Be=c(),$(ga.$$.fragment),Ye=c(),B=n("p"),ps=s("Your "),oe=n("code"),ds=s("metadata.jsonl"),cs=s(" file must have a "),ne=n("code"),ms=s("file_name"),hs=s(" column which links image files with their metadata:"),Me=c(),$(_a.$$.fragment),He=c(),$(ta.$$.fragment),Re=c(),U=n("h3"),sa=n("a"),ie=n("span"),$($a.$$.fragment),fs=c(),re=n("span"),us=s("Image captioning"),ze=c(),la=n("p"),gs=s("Image captioning datasets have text describing an image. An example "),pe=n("code"),_s=s("metadata.jsonl"),$s=s(" may look like:"),Ue=c(),$(ja.$$.fragment),Ge=c(),Y=n("p"),js=s("Load the dataset with "),de=n("code"),vs=s("ImageFolder"),qs=s(", and it will create a "),ce=n("code"),bs=s("text"),ws=s(" column for the image captions:"),We=c(),$(va.$$.fragment),Je=c(),G=n("h3"),oa=n("a"),me=n("span"),$(qa.$$.fragment),Es=c(),he=n("span"),ys=s("Object detection"),Ke=c(),na=n("p"),ks=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),fe=n("code"),xs=s("metadata.jsonl"),Is=s(" may look like:"),Qe=c(),$(ba.$$.fragment),Ve=c(),M=n("p"),Ps=s("Load the dataset with "),ue=n("code"),Cs=s("ImageFolder"),As=s(", and it will create a "),ge=n("code"),Ds=s("objects"),Fs=s(" column with the bounding boxes and the categories:"),Xe=c(),$(wa.$$.fragment),this.h()},l(a){const o=xl('[data-svelte="svelte-1phssyn"]',document.head);d=i(o,"META",{name:!0,content:!0}),o.forEach(t),I=m(a),u=i(a,"H1",{class:!0});var Ea=r(u);E=i(Ea,"A",{id:!0,class:!0,href:!0});var _e=r(E);y=i(_e,"SPAN",{});var $e=r(y);j(g.$$.fragment,$e),$e.forEach(t),_e.forEach(t),P=m(Ea),k=i(Ea,"SPAN",{});var Ls=r(k);_=l(Ls,"Load image data"),Ls.forEach(t),Ea.forEach(t),f=m(a),x=i(a,"P",{});var at=r(x);A=l(at,"Image datasets are loaded from the "),Ya=i(at,"CODE",{});var Ts=r(Ya);ct=l(Ts,"image"),Ts.forEach(t),mt=l(at," column, which contains a PIL object."),at.forEach(t),je=m(a),j(J.$$.fragment,a),ve=m(a),O=i(a,"P",{});var Aa=r(O);ht=l(Aa,"When you load an image dataset and call the "),Ma=i(Aa,"CODE",{});var Ss=r(Ma);ft=l(Ss,"image"),Ss.forEach(t),ut=l(Aa," column, the "),ya=i(Aa,"A",{href:!0});var Ns=r(ya);gt=l(Ns,"Image"),Ns.forEach(t),_t=l(Aa," feature automatically decodes the PIL object into an image:"),Aa.forEach(t),qe=m(a),j(ia.$$.fragment,a),be=m(a),j(K.$$.fragment,a),we=m(a),Q=i(a,"P",{});var et=r(Q);$t=l(et,"For a guide on how to load any type of dataset, take a look at the "),ka=i(et,"A",{href:!0});var Bs=r(ka);jt=l(Bs,"general loading guide"),Bs.forEach(t),vt=l(et,"."),et.forEach(t),Ee=m(a),H=i(a,"H2",{class:!0});var tt=r(H);V=i(tt,"A",{id:!0,class:!0,href:!0});var Ys=r(V);Ha=i(Ys,"SPAN",{});var Ms=r(Ha);j(ra.$$.fragment,Ms),Ms.forEach(t),Ys.forEach(t),qt=m(tt),Ra=i(tt,"SPAN",{});var Hs=r(Ra);bt=l(Hs,"Local files"),Hs.forEach(t),tt.forEach(t),ye=m(a),L=i(a,"P",{});var Da=r(L);wt=l(Da,"You can load a dataset from the image path. Use the "),xa=i(Da,"A",{href:!0});var Rs=r(xa);Et=l(Rs,"cast_column()"),Rs.forEach(t),yt=l(Da," function to accept a column of image file paths, and decode it into a PIL image with the "),Ia=i(Da,"A",{href:!0});var zs=r(Ia);kt=l(zs,"Image"),zs.forEach(t),xt=l(Da," feature:"),Da.forEach(t),ke=m(a),j(pa.$$.fragment,a),xe=m(a),T=i(a,"P",{});var Fa=r(T);It=l(Fa,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),za=i(Fa,"CODE",{});var Us=r(za);Pt=l(Us,"decode=False"),Us.forEach(t),Ct=l(Fa," in the "),Pa=i(Fa,"A",{href:!0});var Gs=r(Pa);At=l(Gs,"Image"),Gs.forEach(t),Dt=l(Fa," feature:"),Fa.forEach(t),Ie=m(a),j(da.$$.fragment,a),Pe=m(a),R=i(a,"H2",{class:!0});var st=r(R);X=i(st,"A",{id:!0,class:!0,href:!0});var Ws=r(X);Ua=i(Ws,"SPAN",{});var Js=r(Ua);j(ca.$$.fragment,Js),Js.forEach(t),Ws.forEach(t),Ft=m(st),Ga=i(st,"SPAN",{});var Ks=r(Ga);Ot=l(Ks,"ImageFolder"),Ks.forEach(t),st.forEach(t),Ce=m(a),Z=i(a,"P",{});var lt=r(Z);Lt=l(lt,"You can also load a dataset with a "),Wa=i(lt,"CODE",{});var Qs=r(Wa);Tt=l(Qs,"ImageFolder"),Qs.forEach(t),St=l(lt," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),lt.forEach(t),Ae=m(a),j(ma.$$.fragment,a),De=m(a),S=i(a,"P",{});var Oa=r(S);Nt=l(Oa,"Load your dataset by specifying "),Ja=i(Oa,"CODE",{});var Vs=r(Ja);Bt=l(Vs,"imagefolder"),Vs.forEach(t),Yt=l(Oa," and the directory of your dataset in "),Ka=i(Oa,"CODE",{});var Xs=r(Ka);Mt=l(Xs,"data_dir"),Xs.forEach(t),Ht=l(Oa,":"),Oa.forEach(t),Fe=m(a),j(ha.$$.fragment,a),Oe=m(a),aa=i(a,"P",{});var ot=r(aa);Rt=l(ot,"Load remote datasets from their URLs with the "),Qa=i(ot,"CODE",{});var Zs=r(Qa);zt=l(Zs,"data_files"),Zs.forEach(t),Ut=l(ot," parameter:"),ot.forEach(t),Le=m(a),j(fa.$$.fragment,a),Te=m(a),C=i(a,"P",{});var F=r(C);Va=i(F,"CODE",{});var al=r(Va);Gt=l(al,"ImageFolder"),al.forEach(t),Wt=l(F," creates a "),Xa=i(F,"CODE",{});var el=r(Xa);Jt=l(el,"label"),el.forEach(t),Kt=l(F," column, and the label name is based on the directory name. To ignore the "),Za=i(F,"CODE",{});var tl=r(Za);Qt=l(tl,"label"),tl.forEach(t),Vt=l(F," column, set "),ae=i(F,"CODE",{});var sl=r(ae);Xt=l(sl,"drop_labels=False"),sl.forEach(t),Zt=l(F," as defined in "),Ca=i(F,"A",{href:!0});var ll=r(Ca);as=l(ll,"ImageFolderConfig"),ll.forEach(t),es=l(F,"."),F.forEach(t),Se=m(a),z=i(a,"H2",{class:!0});var nt=r(z);ea=i(nt,"A",{id:!0,class:!0,href:!0});var ol=r(ea);ee=i(ol,"SPAN",{});var nl=r(ee);j(ua.$$.fragment,nl),nl.forEach(t),ol.forEach(t),ts=m(nt),te=i(nt,"SPAN",{});var il=r(te);ss=l(il,"ImageFolder with metadata"),il.forEach(t),nt.forEach(t),Ne=m(a),N=i(a,"P",{});var La=r(N);ls=l(La,"Metadata associated with your dataset can also be loaded, extending the utility of "),se=i(La,"CODE",{});var rl=r(se);os=l(rl,"ImageFolder"),rl.forEach(t),ns=l(La," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),le=i(La,"CODE",{});var pl=r(le);is=l(pl,"metadata.jsonl"),pl.forEach(t),rs=l(La," file:"),La.forEach(t),Be=m(a),j(ga.$$.fragment,a),Ye=m(a),B=i(a,"P",{});var Ta=r(B);ps=l(Ta,"Your "),oe=i(Ta,"CODE",{});var dl=r(oe);ds=l(dl,"metadata.jsonl"),dl.forEach(t),cs=l(Ta," file must have a "),ne=i(Ta,"CODE",{});var cl=r(ne);ms=l(cl,"file_name"),cl.forEach(t),hs=l(Ta," column which links image files with their metadata:"),Ta.forEach(t),Me=m(a),j(_a.$$.fragment,a),He=m(a),j(ta.$$.fragment,a),Re=m(a),U=i(a,"H3",{class:!0});var it=r(U);sa=i(it,"A",{id:!0,class:!0,href:!0});var ml=r(sa);ie=i(ml,"SPAN",{});var hl=r(ie);j($a.$$.fragment,hl),hl.forEach(t),ml.forEach(t),fs=m(it),re=i(it,"SPAN",{});var fl=r(re);us=l(fl,"Image captioning"),fl.forEach(t),it.forEach(t),ze=m(a),la=i(a,"P",{});var rt=r(la);gs=l(rt,"Image captioning datasets have text describing an image. An example "),pe=i(rt,"CODE",{});var ul=r(pe);_s=l(ul,"metadata.jsonl"),ul.forEach(t),$s=l(rt," may look like:"),rt.forEach(t),Ue=m(a),j(ja.$$.fragment,a),Ge=m(a),Y=i(a,"P",{});var Sa=r(Y);js=l(Sa,"Load the dataset with "),de=i(Sa,"CODE",{});var gl=r(de);vs=l(gl,"ImageFolder"),gl.forEach(t),qs=l(Sa,", and it will create a "),ce=i(Sa,"CODE",{});var _l=r(ce);bs=l(_l,"text"),_l.forEach(t),ws=l(Sa," column for the image captions:"),Sa.forEach(t),We=m(a),j(va.$$.fragment,a),Je=m(a),G=i(a,"H3",{class:!0});var pt=r(G);oa=i(pt,"A",{id:!0,class:!0,href:!0});var $l=r(oa);me=i($l,"SPAN",{});var jl=r(me);j(qa.$$.fragment,jl),jl.forEach(t),$l.forEach(t),Es=m(pt),he=i(pt,"SPAN",{});var vl=r(he);ys=l(vl,"Object detection"),vl.forEach(t),pt.forEach(t),Ke=m(a),na=i(a,"P",{});var dt=r(na);ks=l(dt,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),fe=i(dt,"CODE",{});var ql=r(fe);xs=l(ql,"metadata.jsonl"),ql.forEach(t),Is=l(dt," may look like:"),dt.forEach(t),Qe=m(a),j(ba.$$.fragment,a),Ve=m(a),M=i(a,"P",{});var Na=r(M);Ps=l(Na,"Load the dataset with "),ue=i(Na,"CODE",{});var bl=r(ue);Cs=l(bl,"ImageFolder"),bl.forEach(t),As=l(Na,", and it will create a "),ge=i(Na,"CODE",{});var wl=r(ge);Ds=l(wl,"objects"),wl.forEach(t),Fs=l(Na," column with the bounding boxes and the categories:"),Na.forEach(t),Xe=m(a),j(wa.$$.fragment,a),this.h()},h(){h(d,"name","hf:doc:metadata"),h(d,"content",JSON.stringify(Fl)),h(E,"id","load-image-data"),h(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(E,"href","#load-image-data"),h(u,"class","relative group"),h(ya,"href","/docs/datasets/pr_4695/en/package_reference/main_classes#datasets.Image"),h(ka,"href","./loading"),h(V,"id","local-files"),h(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(V,"href","#local-files"),h(H,"class","relative group"),h(xa,"href","/docs/datasets/pr_4695/en/package_reference/main_classes#datasets.Dataset.cast_column"),h(Ia,"href","/docs/datasets/pr_4695/en/package_reference/main_classes#datasets.Image"),h(Pa,"href","/docs/datasets/pr_4695/en/package_reference/main_classes#datasets.Image"),h(X,"id","imagefolder"),h(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(X,"href","#imagefolder"),h(R,"class","relative group"),h(Ca,"href","/docs/datasets/pr_4695/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),h(ea,"id","imagefolder-with-metadata"),h(ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ea,"href","#imagefolder-with-metadata"),h(z,"class","relative group"),h(sa,"id","image-captioning"),h(sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(sa,"href","#image-captioning"),h(U,"class","relative group"),h(oa,"id","object-detection"),h(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oa,"href","#object-detection"),h(G,"class","relative group")},m(a,o){e(document.head,d),p(a,I,o),p(a,u,o),e(u,E),e(E,y),v(g,y,null),e(u,P),e(u,k),e(k,_),p(a,f,o),p(a,x,o),e(x,A),e(x,Ya),e(Ya,ct),e(x,mt),p(a,je,o),v(J,a,o),p(a,ve,o),p(a,O,o),e(O,ht),e(O,Ma),e(Ma,ft),e(O,ut),e(O,ya),e(ya,gt),e(O,_t),p(a,qe,o),v(ia,a,o),p(a,be,o),v(K,a,o),p(a,we,o),p(a,Q,o),e(Q,$t),e(Q,ka),e(ka,jt),e(Q,vt),p(a,Ee,o),p(a,H,o),e(H,V),e(V,Ha),v(ra,Ha,null),e(H,qt),e(H,Ra),e(Ra,bt),p(a,ye,o),p(a,L,o),e(L,wt),e(L,xa),e(xa,Et),e(L,yt),e(L,Ia),e(Ia,kt),e(L,xt),p(a,ke,o),v(pa,a,o),p(a,xe,o),p(a,T,o),e(T,It),e(T,za),e(za,Pt),e(T,Ct),e(T,Pa),e(Pa,At),e(T,Dt),p(a,Ie,o),v(da,a,o),p(a,Pe,o),p(a,R,o),e(R,X),e(X,Ua),v(ca,Ua,null),e(R,Ft),e(R,Ga),e(Ga,Ot),p(a,Ce,o),p(a,Z,o),e(Z,Lt),e(Z,Wa),e(Wa,Tt),e(Z,St),p(a,Ae,o),v(ma,a,o),p(a,De,o),p(a,S,o),e(S,Nt),e(S,Ja),e(Ja,Bt),e(S,Yt),e(S,Ka),e(Ka,Mt),e(S,Ht),p(a,Fe,o),v(ha,a,o),p(a,Oe,o),p(a,aa,o),e(aa,Rt),e(aa,Qa),e(Qa,zt),e(aa,Ut),p(a,Le,o),v(fa,a,o),p(a,Te,o),p(a,C,o),e(C,Va),e(Va,Gt),e(C,Wt),e(C,Xa),e(Xa,Jt),e(C,Kt),e(C,Za),e(Za,Qt),e(C,Vt),e(C,ae),e(ae,Xt),e(C,Zt),e(C,Ca),e(Ca,as),e(C,es),p(a,Se,o),p(a,z,o),e(z,ea),e(ea,ee),v(ua,ee,null),e(z,ts),e(z,te),e(te,ss),p(a,Ne,o),p(a,N,o),e(N,ls),e(N,se),e(se,os),e(N,ns),e(N,le),e(le,is),e(N,rs),p(a,Be,o),v(ga,a,o),p(a,Ye,o),p(a,B,o),e(B,ps),e(B,oe),e(oe,ds),e(B,cs),e(B,ne),e(ne,ms),e(B,hs),p(a,Me,o),v(_a,a,o),p(a,He,o),v(ta,a,o),p(a,Re,o),p(a,U,o),e(U,sa),e(sa,ie),v($a,ie,null),e(U,fs),e(U,re),e(re,us),p(a,ze,o),p(a,la,o),e(la,gs),e(la,pe),e(pe,_s),e(la,$s),p(a,Ue,o),v(ja,a,o),p(a,Ge,o),p(a,Y,o),e(Y,js),e(Y,de),e(de,vs),e(Y,qs),e(Y,ce),e(ce,bs),e(Y,ws),p(a,We,o),v(va,a,o),p(a,Je,o),p(a,G,o),e(G,oa),e(oa,me),v(qa,me,null),e(G,Es),e(G,he),e(he,ys),p(a,Ke,o),p(a,na,o),e(na,ks),e(na,fe),e(fe,xs),e(na,Is),p(a,Qe,o),v(ba,a,o),p(a,Ve,o),p(a,M,o),e(M,Ps),e(M,ue),e(ue,Cs),e(M,As),e(M,ge),e(ge,Ds),e(M,Fs),p(a,Xe,o),v(wa,a,o),Ze=!0},p(a,[o]){const Ea={};o&2&&(Ea.$$scope={dirty:o,ctx:a}),J.$set(Ea);const _e={};o&2&&(_e.$$scope={dirty:o,ctx:a}),K.$set(_e);const $e={};o&2&&($e.$$scope={dirty:o,ctx:a}),ta.$set($e)},i(a){Ze||(q(g.$$.fragment,a),q(J.$$.fragment,a),q(ia.$$.fragment,a),q(K.$$.fragment,a),q(ra.$$.fragment,a),q(pa.$$.fragment,a),q(da.$$.fragment,a),q(ca.$$.fragment,a),q(ma.$$.fragment,a),q(ha.$$.fragment,a),q(fa.$$.fragment,a),q(ua.$$.fragment,a),q(ga.$$.fragment,a),q(_a.$$.fragment,a),q(ta.$$.fragment,a),q($a.$$.fragment,a),q(ja.$$.fragment,a),q(va.$$.fragment,a),q(qa.$$.fragment,a),q(ba.$$.fragment,a),q(wa.$$.fragment,a),Ze=!0)},o(a){b(g.$$.fragment,a),b(J.$$.fragment,a),b(ia.$$.fragment,a),b(K.$$.fragment,a),b(ra.$$.fragment,a),b(pa.$$.fragment,a),b(da.$$.fragment,a),b(ca.$$.fragment,a),b(ma.$$.fragment,a),b(ha.$$.fragment,a),b(fa.$$.fragment,a),b(ua.$$.fragment,a),b(ga.$$.fragment,a),b(_a.$$.fragment,a),b(ta.$$.fragment,a),b($a.$$.fragment,a),b(ja.$$.fragment,a),b(va.$$.fragment,a),b(qa.$$.fragment,a),b(ba.$$.fragment,a),b(wa.$$.fragment,a),Ze=!1},d(a){t(d),a&&t(I),a&&t(u),w(g),a&&t(f),a&&t(x),a&&t(je),w(J,a),a&&t(ve),a&&t(O),a&&t(qe),w(ia,a),a&&t(be),w(K,a),a&&t(we),a&&t(Q),a&&t(Ee),a&&t(H),w(ra),a&&t(ye),a&&t(L),a&&t(ke),w(pa,a),a&&t(xe),a&&t(T),a&&t(Ie),w(da,a),a&&t(Pe),a&&t(R),w(ca),a&&t(Ce),a&&t(Z),a&&t(Ae),w(ma,a),a&&t(De),a&&t(S),a&&t(Fe),w(ha,a),a&&t(Oe),a&&t(aa),a&&t(Le),w(fa,a),a&&t(Te),a&&t(C),a&&t(Se),a&&t(z),w(ua),a&&t(Ne),a&&t(N),a&&t(Be),w(ga,a),a&&t(Ye),a&&t(B),a&&t(Me),w(_a,a),a&&t(He),w(ta,a),a&&t(Re),a&&t(U),w($a),a&&t(ze),a&&t(la),a&&t(Ue),w(ja,a),a&&t(Ge),a&&t(Y),a&&t(We),w(va,a),a&&t(Je),a&&t(G),w(qa),a&&t(Ke),a&&t(na),a&&t(Qe),w(ba,a),a&&t(Ve),a&&t(M),a&&t(Xe),w(wa,a)}}}const Fl={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function Ol(W){return Il(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Bl extends El{constructor(d){super();yl(this,d,Ol,Dl,kl,{})}}export{Bl as default,Fl as metadata};
