import{S as Pse,i as Fse,s as Ase,e as r,k as m,w as _,t as i,M as Lse,c as o,d as s,m as h,a as l,x as b,h as p,b as w,G as e,g as D,y as $,q as x,o as v,B as y,v as Sse,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ose}from"../../chunks/Tip-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ms}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as T}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Cse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function zse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Use(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mse(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Hse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Gse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Wse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Yse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Jse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Kse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Zse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Xse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Qse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function eae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function tae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function sae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function aae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function nae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function rae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function oae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function lae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function iae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function pae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function cae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function dae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function mae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function hae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function fae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function uae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)

ds = load_dataset("imdb",split="train")
ds = ds.train_test_split(test_size=0.2, stratify_by_column="label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)

<span class="hljs-comment"># stratified split</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>,split=<span class="hljs-string">&quot;train&quot;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, stratify_by_column=<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">20000</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function gae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function _ae(k){let c,g,f,n,u;return n=new P({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function bae(k){let c,g,f,n,u;return n=new P({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function $ae(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function xae(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function vae(k){let c,g,f,n,u;return n=new P({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function yae(k){let c,g,f,n,u;return n=new P({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function jae(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function wae(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Dae(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kae(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Eae(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qae(k){let c,g,f,n,u;return n=new P({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Iae(k){let c,g,f,n,u;return n=new P({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tae(k){let c,g,f,n,u;return n=new P({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){c=r("p"),g=i("Default config is:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Default config is:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nae(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pae(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Fae(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Aae(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Lae(k){let c,g,f,n,u;return n=new P({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Sae(k){let c,g,f,n,u;return n=new P({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Oae(k){let c,g,f,n,u;return n=new P({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Cae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function zae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Uae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Hae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Gae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Wae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Yae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Jae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Kae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Zae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Xae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Qae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ene(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function tne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function sne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ane(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function nne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function rne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function one(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function lne(k){let c,g,f,n,u;return n=new P({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ine(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function pne(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function cne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function dne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function mne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function hne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function fne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function une(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function gne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function _ne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function bne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function $ne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function xne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function vne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function yne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
ds = ds.skip(1)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function jne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function wne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Dne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ene(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ine(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.remove_columns("label")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Fne(k){let c,g,f,n,u,t,d,cn,hs,Tr,Se;return{c(){c=r("p"),g=i("A "),f=r("a"),n=i("datasets.Sequence"),u=i(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r("code"),d=i("list"),cn=i(` instead of the
`),hs=r("a"),Tr=i("datasets.Sequence"),Se=i("."),this.h()},l(_e){c=o(_e,"P",{});var ae=l(c);g=p(ae,"A "),f=o(ae,"A",{href:!0});var fs=l(f);n=p(fs,"datasets.Sequence"),fs.forEach(s),u=p(ae,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=o(ae,"CODE",{});var Yf=l(t);d=p(Yf,"list"),Yf.forEach(s),cn=p(ae,` instead of the
`),hs=o(ae,"A",{href:!0});var Nr=l(hs);Tr=p(Nr,"datasets.Sequence"),Nr.forEach(s),Se=p(ae,"."),ae.forEach(s),this.h()},h(){w(f,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Sequence"),w(hs,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Sequence")},m(_e,ae){D(_e,c,ae),e(c,g),e(c,f),e(f,n),e(c,u),e(c,t),e(t,d),e(c,cn),e(c,hs),e(hs,Tr),e(c,Se)},d(_e){_e&&s(c)}}}function Ane(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
copy_of_features = ds.features.copy()
copy_of_features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Lne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features.flatten()
{<span class="hljs-string">&#x27;answers.answer_start&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;answers.text&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Sne(k){let c,g,f,n,u;return n=new P({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function One(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Cne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value, ClassLabel
features = Features({'post': Sequence(feature={'text': Value(dtype='string'), 'upvotes': Value(dtype='int32'), 'label': ClassLabel(num_classes=2, names=['hot', 'cold'])})})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>])})})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function zne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets Features
features = Features({'label': ClassLabel(num_classes=3, names=['bad', 'ok', 'good'])})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].int2str(0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].int2str(<span class="hljs-number">0</span>)
<span class="hljs-string">&#x27;neg&#x27;</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Une(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].str2int('neg')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].str2int(<span class="hljs-string">&#x27;neg&#x27;</span>)
<span class="hljs-number">0</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'stars': Value(dtype='int32')})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rne(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bne(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Hne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array2D(shape=(1, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array2D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Gne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array3D(shape=(1, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array3D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Wne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array4D(shape=(1, 2, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array4D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Yne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array5D(shape=(1, 2, 2, 3, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array5D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Jne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train")
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">2.3443763e-05</span>,  <span class="hljs-number">2.1729663e-04</span>,  <span class="hljs-number">2.2145823e-04</span>, ...,
     <span class="hljs-number">3.8356509e-05</span>, -<span class="hljs-number">7.3497440e-06</span>, -<span class="hljs-number">2.1754686e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Kne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Image
ds = load_dataset("beans", split="train")
ds.features["image"]
ds[0]["image"]
ds = ds.cast_column('image', Image(decode=False))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;image&quot;</span>]
Image(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x500 at <span class="hljs-number">0x15E52E7F0</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/healthy/healthy_train.85.jpg&#x27;</span>}`}}),{c(){c=r("p"),g=i("Examples:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Examples:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Zne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import MetricInfo
metric_info = MetricInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> MetricInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>metric_info = MetricInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Xne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Qne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add(predictions=model_predictions, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add(predictions=model_predictions, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ere(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add_batch(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add_batch(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function tre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
accuracy = metric.compute(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = metric.compute(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function sre(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)
s3.ls('public-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function are(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
s3.ls('my-private-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function nre(k){let c,g;return c=new P({props:{code:`import botocore
from datasets.filesystems import S3Filesystem

s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function rre(k){let c,g;return c=new P({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem

s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset = load_from_disk('s3://my-private-datasets/imdb/train', fs=s3)
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function ore(k){let c,g;return c=new P({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem

dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset.save_to_disk('s3://my-private-datasets/imdb/train', fs=s3)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function lre(k){let c,g,f,n,u,t,d,cn,hs,Tr,Se,_e,ae,fs,Yf,Nr,PD,p7,Z,Pp,FD,i$,AD,LD,Jf,p$,SD,OD,CD,c$,zD,VD,be,Fp,UD,Ap,MD,d$,RD,BD,HD,m$,GD,WD,h$,YD,JD,Pr,KD,us,Lp,ZD,dn,XD,f$,QD,e3,u$,t3,s3,a3,Fr,c7,mn,Ar,g$,Sp,n3,_$,r3,d7,Lr,o3,Kf,l3,i3,m7,q,Op,p3,b$,c3,d3,et,Cp,m3,$$,h3,f3,x$,v$,u3,g3,Sr,_3,tt,zp,b3,y$,$3,x3,j$,w$,v3,y3,Or,j3,Cr,Vp,w3,D$,D3,k3,zr,Up,E3,k$,q3,I3,$e,Mp,T3,Pt,N3,E$,P3,F3,q$,A3,L3,Zf,S3,O3,C3,Rp,z3,I$,V3,U3,M3,Bp,R3,T$,B3,H3,G3,Vr,W3,Ur,Hp,Y3,Ft,J3,N$,K3,Z3,P$,X3,Q3,Xf,ek,tk,sk,gs,Gp,ak,F$,nk,rk,Mr,ok,_s,Wp,lk,A$,ik,pk,Rr,ck,bs,Yp,dk,L$,mk,hk,Br,fk,$s,Jp,uk,Kp,gk,Hr,_k,S$,bk,$k,xk,vk,Gr,yk,xs,Zp,jk,O$,wk,Dk,Wr,kk,vs,Xp,Ek,C$,qk,Ik,Yr,Tk,st,Qp,Nk,z$,Pk,Fk,V$,Ak,Lk,Jr,Sk,ys,ec,Ok,U$,Ck,zk,Kr,Vk,js,tc,Uk,M$,Mk,Rk,Zr,Bk,ws,sc,Hk,R$,Gk,Wk,Xr,Yk,at,ac,Jk,B$,Kk,Zk,hn,Xk,Qf,Qk,e5,H$,t5,s5,a5,Qr,n5,Ds,nc,r5,G$,o5,l5,eo,i5,ks,rc,p5,W$,c5,d5,to,m5,Es,oc,h5,lc,f5,Y$,u5,g5,_5,so,b5,qs,ic,$5,J$,x5,v5,ao,y5,Is,pc,j5,K$,w5,D5,cc,k5,eu,E5,q5,I5,no,dc,T5,fn,N5,Z$,P5,F5,X$,A5,L5,S5,xe,mc,O5,Oe,C5,Q$,z5,V5,e2,U5,M5,t2,R5,B5,tu,H5,G5,W5,Ce,Y5,s2,J5,K5,a2,Z5,X5,n2,Q5,e6,r2,t6,s6,a6,o2,n6,r6,ro,o6,Ts,hc,l6,nt,i6,l2,p6,c6,i2,d6,m6,su,h6,f6,au,u6,g6,oo,_6,rt,fc,b6,uc,$6,p2,x6,v6,y6,nu,j6,c2,w6,D6,lo,k6,ve,gc,E6,At,q6,d2,I6,T6,m2,N6,P6,h2,F6,A6,L6,_c,S6,ru,O6,C6,z6,un,V6,ou,U6,M6,f2,R6,B6,H6,io,G6,ye,bc,W6,gn,Y6,u2,J6,K6,g2,Z6,X6,Q6,_n,eE,lu,tE,sE,iu,aE,nE,rE,bn,oE,pu,lE,iE,_2,pE,cE,dE,po,mE,co,$c,hE,b2,fE,uE,ot,xc,gE,$2,_E,bE,x2,$E,xE,mo,vE,je,vc,yE,v2,jE,wE,yc,DE,y2,kE,EE,qE,$n,j2,IE,TE,w2,NE,PE,ce,FE,D2,AE,LE,k2,SE,OE,E2,CE,zE,q2,VE,UE,I2,ME,RE,BE,ho,HE,Ns,jc,GE,T2,WE,YE,fo,JE,Ps,wc,KE,N2,ZE,XE,uo,QE,lt,Dc,e8,P2,t8,s8,F2,a8,n8,go,r8,it,kc,o8,A2,l8,i8,L2,p8,c8,_o,d8,pt,Ec,m8,W,h8,S2,f8,u8,O2,g8,_8,C2,b8,$8,z2,x8,v8,V2,y8,j8,U2,w8,D8,M2,k8,E8,q8,qc,I8,R2,T8,N8,P8,bo,F8,ne,Ic,A8,xn,L8,B2,S8,O8,H2,C8,z8,V8,G2,U8,M8,Tc,R8,W2,B8,H8,G8,Y2,W8,Y8,$o,J8,Fs,Nc,K8,J2,Z8,X8,xo,Q8,ct,Pc,eq,K2,tq,sq,Lt,aq,cu,nq,rq,du,oq,lq,Z2,iq,pq,cq,vo,dq,K,Fc,mq,vn,hq,mu,fq,uq,X2,gq,_q,bq,yn,$q,hu,xq,vq,fu,yq,jq,wq,Ac,Dq,Q2,kq,Eq,qq,yo,Iq,jo,Tq,wo,Nq,As,Lc,Pq,St,Fq,ex,Aq,Lq,uu,Sq,Oq,tx,Cq,zq,Vq,Do,Uq,ko,Sc,Mq,sx,Rq,Bq,Ls,Oc,Hq,ax,Gq,Wq,Eo,Yq,Ss,Cc,Jq,zc,Kq,nx,Zq,Xq,Qq,qo,e9,Os,Vc,t9,rx,s9,a9,Io,n9,Cs,Uc,r9,ox,o9,l9,To,i9,zs,Mc,p9,lx,c9,d9,No,m9,dt,Rc,h9,jn,f9,ix,u9,g9,px,_9,b9,$9,cx,gu,x9,Bc,v9,y9,Po,j9,Vs,Hc,w9,Ot,D9,dx,k9,E9,mx,q9,I9,hx,T9,N9,P9,fx,_u,F9,Gc,A9,L9,Fo,Wc,S9,ux,O9,C9,Us,Yc,z9,gx,V9,U9,Jc,M9,_x,R9,B9,H9,Ms,Kc,G9,bx,W9,Y9,Ao,J9,Rs,Zc,K9,$x,Z9,X9,Lo,Q9,So,Xc,eI,xx,tI,sI,Oo,Qc,aI,vx,nI,rI,Co,ed,oI,yx,lI,iI,zo,td,pI,jx,cI,dI,Vo,sd,mI,wx,hI,fI,Uo,ad,uI,Dx,gI,_I,Mo,nd,bI,kx,$I,xI,Ro,rd,vI,bu,$u,yI,jI,wI,Bo,od,DI,xu,vu,kI,EI,qI,yu,ld,II,ju,id,TI,wu,pd,NI,Du,cd,PI,ku,dd,FI,Eu,md,AI,qu,hd,LI,Iu,fd,SI,Tu,ud,OI,Nu,gd,CI,Pu,_d,zI,Fu,bd,VI,Au,$d,UI,Bs,xd,MI,Ex,RI,BI,Ho,HI,Hs,vd,GI,qx,WI,YI,Go,JI,Gs,yd,KI,Ix,ZI,XI,Wo,QI,Ws,jd,eT,Tx,tT,sT,Yo,aT,Ys,wd,nT,wn,rT,Lu,oT,lT,Su,iT,pT,cT,Dn,dT,Nx,mT,hT,Px,fT,uT,gT,Js,Dd,_T,kd,bT,Fx,$T,xT,vT,Jo,h7,Ct,Ed,yT,kn,jT,Ou,wT,DT,Cu,kT,ET,qT,Ko,f7,X,qd,IT,Ax,TT,NT,En,PT,zu,FT,AT,Vu,LT,ST,OT,ze,CT,Lx,zT,VT,Sx,UT,MT,Ox,RT,BT,Cx,HT,GT,WT,zx,YT,JT,Zo,u7,de,Id,KT,Vx,ZT,XT,Ux,QT,eN,Mx,tN,sN,Ve,Rx,aN,nN,Bx,rN,oN,Hx,lN,iN,Td,pN,Uu,cN,dN,mN,zt,hN,Mu,fN,uN,Gx,gN,_N,Ru,bN,$N,g7,me,Nd,xN,Wx,vN,yN,Yx,jN,wN,Jx,DN,kN,Ue,Kx,EN,qN,Zx,IN,TN,Xx,NN,PN,Pd,FN,Bu,AN,LN,SN,Vt,ON,Hu,CN,zN,Qx,VN,UN,Gu,MN,RN,_7,he,Fd,BN,e1,HN,GN,t1,WN,YN,s1,JN,KN,Me,a1,ZN,XN,n1,QN,eP,r1,tP,sP,Ad,aP,Wu,nP,rP,oP,Ut,lP,Yu,iP,pP,o1,cP,dP,Ju,mP,hP,b7,qn,Xo,l1,Ld,fP,i1,uP,$7,Qo,gP,p1,_P,bP,x7,F,Sd,$P,c1,xP,vP,Ks,Od,yP,d1,jP,wP,el,DP,Zs,Cd,kP,m1,EP,qP,tl,IP,Xs,zd,TP,h1,NP,PP,sl,FP,Qs,Vd,AP,Ud,LP,al,SP,f1,OP,CP,zP,VP,nl,UP,ea,Md,MP,u1,RP,BP,rl,HP,ta,Rd,GP,g1,WP,YP,ol,JP,mt,Bd,KP,_1,ZP,XP,b1,QP,eF,ll,tF,sa,Hd,sF,$1,aF,nF,il,rF,aa,Gd,oF,x1,lF,iF,pl,pF,na,Wd,cF,v1,dF,mF,cl,hF,ht,Yd,fF,y1,uF,gF,j1,_F,bF,dl,$F,we,Jd,xF,w1,vF,yF,D1,jF,wF,k1,DF,kF,ml,EF,De,Kd,qF,Zd,IF,E1,TF,NF,PF,Re,FF,q1,AF,LF,I1,SF,OF,T1,CF,zF,N1,VF,UF,MF,P1,RF,BF,hl,HF,ft,Xd,GF,Qd,WF,F1,YF,JF,KF,Ku,ZF,A1,XF,QF,fl,eA,ul,em,tA,In,sA,L1,aA,nA,S1,rA,oA,lA,ke,tm,iA,Mt,pA,O1,cA,dA,C1,mA,hA,z1,fA,uA,gA,sm,_A,Zu,bA,$A,xA,Tn,vA,Xu,yA,jA,V1,wA,DA,kA,gl,EA,Ee,am,qA,Nn,IA,U1,TA,NA,M1,PA,FA,AA,Pn,LA,Qu,SA,OA,eg,CA,zA,VA,Fn,UA,R1,MA,RA,B1,BA,HA,GA,_l,WA,ra,nm,YA,H1,JA,KA,bl,ZA,ut,rm,XA,G1,QA,eL,Rt,tL,tg,sL,aL,W1,nL,rL,Y1,oL,lL,iL,$l,pL,oa,om,cL,J1,dL,mL,xl,hL,qe,lm,fL,K1,uL,gL,Z1,_L,bL,An,$L,sg,xL,vL,X1,yL,jL,wL,vl,DL,Ie,im,kL,Q1,EL,qL,Ln,IL,ag,TL,NL,ev,PL,FL,AL,pm,tv,LL,SL,sv,OL,CL,yl,zL,la,cm,VL,av,UL,ML,jl,RL,ia,dm,BL,mm,HL,nv,GL,WL,YL,wl,JL,Te,hm,KL,Sn,ZL,rv,XL,QL,ov,eS,tS,sS,lv,aS,nS,Bt,rS,ng,oS,lS,rg,iS,pS,iv,cS,dS,mS,Dl,hS,re,fm,fS,On,uS,og,gS,_S,pv,bS,$S,xS,Cn,vS,lg,yS,jS,ig,wS,DS,kS,um,ES,cv,qS,IS,TS,kl,NS,El,PS,pa,gm,FS,Ht,AS,dv,LS,SS,pg,OS,CS,mv,zS,VS,US,ql,MS,ca,_m,RS,hv,BS,HS,Il,GS,da,bm,WS,fv,YS,JS,Tl,KS,ma,$m,ZS,uv,XS,QS,Nl,eO,ha,xm,tO,gv,sO,aO,Pl,nO,fa,vm,rO,zn,oO,cg,lO,iO,dg,pO,cO,dO,Vn,mO,_v,hO,fO,bv,uO,gO,v7,mg,y7,Un,Fl,$v,ym,_O,xv,bO,j7,Al,$O,hg,xO,vO,w7,L,jm,yO,vv,jO,wO,ua,wm,DO,yv,kO,EO,Ll,qO,ga,Dm,IO,jv,TO,NO,Sl,PO,_a,km,FO,wv,AO,LO,Ol,SO,fg,Em,OO,Ne,qm,CO,Dv,zO,VO,Im,UO,kv,MO,RO,BO,Mn,Ev,HO,GO,qv,WO,YO,fe,JO,Iv,KO,ZO,Tv,XO,QO,Nv,eC,tC,Pv,sC,aC,Fv,nC,rC,oC,Cl,lC,ba,Tm,iC,Av,pC,cC,zl,dC,$a,Nm,mC,Lv,hC,fC,Vl,uC,oe,Pm,gC,Sv,_C,bC,Ov,$C,xC,Fm,vC,Cv,yC,jC,wC,Rn,DC,ug,kC,EC,gg,qC,IC,TC,Ul,NC,xa,Am,PC,Lm,FC,zv,AC,LC,SC,Ml,OC,va,Sm,CC,Om,zC,Vv,VC,UC,MC,Rl,RC,Bl,Cm,BC,_g,bg,HC,GC,WC,Hl,zm,YC,$g,xg,JC,KC,ZC,vg,Vm,XC,yg,Um,QC,jg,Mm,ez,wg,Rm,tz,Dg,Bm,sz,kg,Hm,az,Eg,Gm,nz,qg,Wm,rz,Ig,Ym,oz,Tg,Jm,lz,Ng,Km,iz,Pg,Zm,pz,Fg,Xm,D7,Bn,Gl,Uv,Qm,cz,Mv,dz,k7,Wl,mz,Rv,hz,fz,E7,U,eh,uz,Pe,th,gz,Bv,_z,bz,sh,$z,Hv,xz,vz,yz,Hn,Gv,jz,wz,Wv,Dz,kz,ue,Ez,Yv,qz,Iz,Jv,Tz,Nz,Kv,Pz,Fz,Zv,Az,Lz,Xv,Sz,Oz,Cz,Yl,zz,ya,ah,Vz,Qv,Uz,Mz,Jl,Rz,le,nh,Bz,ey,Hz,Gz,ty,Wz,Yz,rh,Jz,sy,Kz,Zz,Xz,Gn,Qz,Ag,eV,tV,Lg,sV,aV,nV,Kl,rV,ja,oh,oV,ay,lV,iV,Zl,pV,wa,lh,cV,ny,dV,mV,Xl,hV,Da,ih,fV,ry,uV,gV,Ql,_V,ka,ph,bV,oy,$V,xV,ei,vV,Ea,ch,yV,ly,jV,wV,ti,DV,qa,dh,kV,iy,EV,qV,si,q7,Wn,ai,py,mh,IV,cy,TV,I7,O,hh,NV,dy,PV,FV,fh,AV,my,LV,SV,OV,Sg,hy,CV,zV,VV,Y,fy,Ia,UV,Og,MV,RV,uy,BV,HV,gy,GV,WV,_y,uh,YV,Cg,JV,KV,ZV,by,gh,XV,$y,QV,eU,tU,_h,Be,sU,xy,aU,nU,zg,rU,oU,vy,lU,iU,Vg,pU,cU,dU,ni,mU,yy,He,hU,Ug,fU,uU,Mg,gU,_U,Rg,bU,$U,Bg,xU,vU,yU,jy,bh,jU,Hg,wU,DU,kU,wy,Gt,EU,Gg,qU,IU,Dy,TU,NU,ky,PU,FU,AU,Ey,ri,Wg,LU,SU,Yg,OU,CU,zU,Ta,$h,VU,qy,UU,MU,oi,RU,li,xh,BU,Iy,HU,GU,ii,vh,WU,Ty,YU,JU,pi,yh,KU,Ny,ZU,XU,ci,jh,QU,Py,eM,tM,di,wh,sM,Fy,aM,nM,gt,Dh,rM,Ay,oM,lM,Ly,iM,pM,mi,cM,hi,kh,dM,Sy,mM,hM,Fe,Eh,fM,Oy,uM,gM,Cy,_M,bM,Wt,$M,Jg,xM,vM,Kg,yM,jM,Zg,wM,DM,kM,fi,EM,_t,qh,qM,zy,IM,TM,Vy,NM,PM,ui,T7,Yt,Ih,FM,Uy,AM,LM,gi,N7,J,Th,SM,My,OM,CM,Nh,zM,Ry,VM,UM,MM,Yn,Xg,By,RM,BM,HM,Qg,Hy,GM,WM,YM,e_,Gy,JM,KM,ZM,_i,XM,Na,Ph,QM,Wy,eR,tR,bi,sR,Pa,Fh,aR,Yy,nR,rR,$i,P7,Ge,Ah,oR,Jy,lR,iR,Ky,pR,cR,xi,F7,Q,Lh,dR,t_,Zy,mR,hR,fR,Xy,uR,gR,Sh,_R,Qy,bR,$R,xR,vi,vR,yi,Oh,yR,ej,jR,A7,ee,Ch,wR,s_,tj,DR,kR,ER,sj,qR,IR,aj,TR,NR,ji,PR,wi,zh,FR,nj,AR,L7,Jt,Vh,LR,rj,SR,OR,Di,S7,Kt,Uh,CR,oj,zR,VR,ki,O7,Zt,Mh,UR,lj,MR,RR,Ei,C7,Xt,Rh,BR,ij,HR,GR,qi,z7,M,Bh,WR,pj,YR,JR,cj,KR,ZR,Jn,dj,Hh,XR,mj,QR,eB,tB,Kn,Gh,sB,hj,aB,nB,rB,Wh,fj,oB,lB,uj,iB,pB,gj,cB,dB,Zn,Yh,mB,_j,hB,fB,uB,Xn,bj,gB,_B,$j,bB,$B,xj,xB,vB,vj,yB,jB,Ii,wB,Fa,Jh,DB,yj,kB,EB,Qt,jj,qB,IB,wj,TB,NB,Dj,PB,FB,kj,AB,LB,Ti,Kh,SB,Ej,OB,CB,Ni,Zh,zB,qj,VB,UB,Pi,Xh,MB,Ij,RB,BB,Fi,Qh,HB,Tj,GB,V7,R,ef,WB,Nj,YB,JB,Pj,KB,ZB,es,Fj,tf,XB,Aj,QB,eH,tH,Qn,sf,sH,Lj,aH,nH,rH,af,Sj,oH,lH,Oj,iH,pH,Cj,cH,dH,zj,nf,mH,Vj,hH,fH,uH,Uj,rf,gH,Mj,_H,bH,$H,Ai,xH,Aa,of,vH,Rj,yH,jH,We,Bj,wH,DH,Hj,kH,EH,Gj,qH,IH,Wj,TH,NH,Yj,PH,FH,Li,lf,AH,Jj,LH,SH,Si,pf,OH,Kj,CH,zH,Oi,cf,VH,Zj,UH,MH,Ci,df,RH,Xj,BH,U7,er,zi,Qj,mf,HH,e0,GH,M7,te,hf,WH,t0,YH,JH,a_,s0,KH,ZH,XH,a0,QH,eG,La,ff,tG,uf,sG,n0,aG,nG,rG,Vi,oG,Sa,gf,lG,ts,iG,r0,pG,cG,o0,dG,mG,l0,hG,fG,uG,Ui,R7,tr,Mi,i0,_f,gG,p0,_G,B7,Oa,bG,c0,$G,xG,n_,vG,yG,H7,se,bf,jG,d0,wG,DG,Ca,$f,kG,m0,EG,qG,Ri,IG,za,xf,TG,h0,NG,PG,Bi,FG,bt,vf,AG,f0,LG,SG,u0,OG,CG,Hi,zG,Gi,yf,VG,g0,UG,G7,sr,Wi,_0,jf,MG,b0,RG,W7,C,wf,BG,Yi,$0,HG,GG,Df,x0,WG,YG,JG,ss,KG,v0,ZG,XG,y0,QG,eW,j0,tW,sW,aW,w0,nW,rW,D0,oW,lW,Ji,iW,ar,pW,k0,cW,dW,E0,mW,hW,fW,Ki,uW,as,gW,q0,_W,bW,I0,$W,xW,T0,vW,yW,jW,Zi,wW,nr,DW,N0,kW,EW,r_,qW,IW,TW,Xi,NW,rr,PW,P0,FW,AW,o_,LW,SW,OW,Qi,Y7,or,kf,CW,lr,zW,F0,VW,UW,A0,MW,RW,J7,ir,Ef,BW,L0,HW,K7,pr,ep,S0,qf,GW,O0,WW,Z7,cr,If,YW,C0,JW,X7;return t=new ms({}),fs=new ms({}),Pp=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/info.py#L87"}}),Fp=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/info.py#L241"}}),Pr=new T({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[Cse]},$$scope:{ctx:k}}}),Lp=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/info.py#L182"}}),Fr=new T({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[zse]},$$scope:{ctx:k}}}),Sp=new ms({}),Op=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L627"}}),Cp=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4157",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Sr=new T({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[Vse]},$$scope:{ctx:k}}}),zp=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4390",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Or=new T({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[Use]},$$scope:{ctx:k}}}),Vp=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L693",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Up=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L728",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Mp=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L756",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vr=new T({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[Mse]},$$scope:{ctx:k}}}),Hp=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L808",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Gp=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1207"}}),Mr=new T({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[Rse]},$$scope:{ctx:k}}}),Wp=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1227"}}),Rr=new T({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[Bse]},$$scope:{ctx:k}}}),Yp=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1245"}}),Br=new T({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[Hse]},$$scope:{ctx:k}}}),Jp=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1260"}}),Gr=new T({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[Gse]},$$scope:{ctx:k}}}),Zp=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1277"}}),Wr=new T({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[Wse]},$$scope:{ctx:k}}}),Xp=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1292"}}),Yr=new T({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[Yse]},$$scope:{ctx:k}}}),Qp=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1309",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Jr=new T({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[Jse]},$$scope:{ctx:k}}}),ec=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1413",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Kr=new T({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[Kse]},$$scope:{ctx:k}}}),tc=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1452",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Zr=new T({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[Zse]},$$scope:{ctx:k}}}),sc=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1528",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Xr=new T({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[Xse]},$$scope:{ctx:k}}}),ac=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1565",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Qr=new T({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[Qse]},$$scope:{ctx:k}}}),nc=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1613",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),eo=new T({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[eae]},$$scope:{ctx:k}}}),rc=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1675",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),to=new T({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[tae]},$$scope:{ctx:k}}}),oc=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1339"}}),so=new T({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[sae]},$$scope:{ctx:k}}}),ic=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1739"}}),ao=new T({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[aae]},$$scope:{ctx:k}}}),pc=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1768"}}),dc=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1788"}}),mc=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1816"}}),ro=new T({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[nae]},$$scope:{ctx:k}}}),hc=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1917"}}),oo=new T({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[rae]},$$scope:{ctx:k}}}),fc=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1888"}}),lo=new T({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[oae]},$$scope:{ctx:k}}}),gc=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1957"}}),io=new T({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[lae]},$$scope:{ctx:k}}}),bc=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2005"}}),po=new T({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[iae]},$$scope:{ctx:k}}}),$c=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2124"}}),xc=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2130",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),mo=new T({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[pae]},$$scope:{ctx:k}}}),vc=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2177"}}),ho=new T({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[cae]},$$scope:{ctx:k}}}),jc=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2785"}}),fo=new T({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[dae]},$$scope:{ctx:k}}}),wc=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2959"}}),uo=new T({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[mae]},$$scope:{ctx:k}}}),Dc=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3061"}}),go=new T({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[hae]},$$scope:{ctx:k}}}),kc=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3155"}}),_o=new T({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[fae]},$$scope:{ctx:k}}}),Ec=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"stratify_by_column",val:": typing.Optional[str] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.stratify_by_column",description:"<strong>stratify_by_column</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The column name of labels to be used to perform stratified split of data.",name:"stratify_by_column"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3247"}}),bo=new T({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[uae]},$$scope:{ctx:k}}}),Ic=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3515"}}),$o=new T({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[gae]},$$scope:{ctx:k}}}),Nc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L308",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),xo=new T({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[_ae]},$$scope:{ctx:k}}}),Pc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4066"}}),vo=new T({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[bae]},$$scope:{ctx:k}}}),Fc=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1018"}}),yo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[$ae]},$$scope:{ctx:k}}}),jo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[xae]},$$scope:{ctx:k}}}),wo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[vae]},$$scope:{ctx:k}}}),Lc=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L1140",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Do=new T({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[yae]},$$scope:{ctx:k}}}),Sc=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2890"}}),Oc=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3671",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Eo=new T({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[jae]},$$scope:{ctx:k}}}),Cc=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3784",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),qo=new T({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[wae]},$$scope:{ctx:k}}}),Vc=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3704",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Io=new T({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[Dae]},$$scope:{ctx:k}}}),Uc=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3739",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),To=new T({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[kae]},$$scope:{ctx:k}}}),Mc=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.
parquet_writer_kwargs &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L3821",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),No=new T({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[Eae]},$$scope:{ctx:k}}}),Rc=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4195"}}),Po=new T({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[qae]},$$scope:{ctx:k}}}),Hc=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4268"}}),Wc=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L513"}}),Yc=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L526"}}),Kc=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4320"}}),Ao=new T({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[Iae]},$$scope:{ctx:k}}}),Zc=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L604"}}),Lo=new T({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[Tae]},$$scope:{ctx:k}}}),Xc=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L426"}}),Qc=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L430",returnType:`
<p><code>BaseIndex</code></p>
`}}),ed=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L648"}}),td=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L656",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),sd=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L671",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),ad=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L686",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),nd=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/search.py#L705",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),rd=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L147"}}),od=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L152"}}),ld=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L157"}}),id=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L161"}}),pd=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L165"}}),cd=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L169"}}),dd=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L173"}}),md=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L177"}}),hd=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L181"}}),fd=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L185"}}),ud=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L189"}}),gd=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L193"}}),_d=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L197"}}),bd=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L201"}}),$d=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L209"}}),xd=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L847",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ho=new T({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[Nae]},$$scope:{ctx:k}}}),vd=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L882",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Go=new T({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[Pae]},$$scope:{ctx:k}}}),yd=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L925",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Wo=new T({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[Fae]},$$scope:{ctx:k}}}),jd=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L970",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Yo=new T({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[Aae]},$$scope:{ctx:k}}}),wd=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L2050"}}),Dd=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4441"}}),Jo=new T({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[Lae]},$$scope:{ctx:k}}}),Ed=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L4519"}}),Ko=new T({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[Sae]},$$scope:{ctx:k}}}),qd=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/combine.py#L20",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Zo=new T({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[Oae]},$$scope:{ctx:k}}}),Id=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/fingerprint.py#L96"}}),Nd=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/fingerprint.py#L117"}}),Fd=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/fingerprint.py#L162"}}),Ld=new ms({}),Sd=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L32"}}),Od=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L62"}}),el=new T({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[Cae]},$$scope:{ctx:k}}}),Cd=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L77"}}),tl=new T({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[zae]},$$scope:{ctx:k}}}),zd=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L95"}}),sl=new T({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[Vae]},$$scope:{ctx:k}}}),Vd=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L111"}}),nl=new T({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[Uae]},$$scope:{ctx:k}}}),Md=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L127"}}),rl=new T({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[Mae]},$$scope:{ctx:k}}}),Rd=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L145"}}),ol=new T({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[Rae]},$$scope:{ctx:k}}}),Bd=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L193",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),ll=new T({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[Bae]},$$scope:{ctx:k}}}),Hd=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L217",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),il=new T({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[Hae]},$$scope:{ctx:k}}}),Gd=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L682"}}),pl=new T({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[Gae]},$$scope:{ctx:k}}}),Wd=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L794"}}),cl=new T({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[Wae]},$$scope:{ctx:k}}}),Yd=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L884"}}),dl=new T({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[Yae]},$$scope:{ctx:k}}}),Jd=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (a <em>ValueError</em> is raised if both are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L952"}}),ml=new T({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[Jae]},$$scope:{ctx:k}}}),Kd=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L484"}}),hl=new T({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[Kae]},$$scope:{ctx:k}}}),Xd=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L526"}}),fl=new T({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[Zae]},$$scope:{ctx:k}}}),em=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L451"}}),tm=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L582"}}),gl=new T({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[Xae]},$$scope:{ctx:k}}}),am=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L631"}}),_l=new T({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[Qae]},$$scope:{ctx:k}}}),nm=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L161"}}),bl=new T({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[ene]},$$scope:{ctx:k}}}),rm=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L241"}}),$l=new T({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[tne]},$$scope:{ctx:k}}}),om=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L275",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),xl=new T({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[sne]},$$scope:{ctx:k}}}),lm=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L302"}}),vl=new T({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[ane]},$$scope:{ctx:k}}}),im=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L340"}}),yl=new T({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[nne]},$$scope:{ctx:k}}}),cm=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L383",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),jl=new T({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[rne]},$$scope:{ctx:k}}}),dm=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L420"}}),wl=new T({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[one]},$$scope:{ctx:k}}}),hm=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1283"}}),Dl=new T({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[lne]},$$scope:{ctx:k}}}),fm=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1028"}}),kl=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[ine]},$$scope:{ctx:k}}}),El=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[pne]},$$scope:{ctx:k}}}),gm=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1076",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ql=new T({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[cne]},$$scope:{ctx:k}}}),_m=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1123",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Il=new T({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[dne]},$$scope:{ctx:k}}}),bm=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1157",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Tl=new T({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[mne]},$$scope:{ctx:k}}}),$m=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1191",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Nl=new T({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[hne]},$$scope:{ctx:k}}}),xm=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1234",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Pl=new T({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[fne]},$$scope:{ctx:k}}}),vm=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1268"}}),ym=new ms({}),jm=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L456"}}),wm=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L922",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ll=new T({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[une]},$$scope:{ctx:k}}}),Dm=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L948",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Sl=new T({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[gne]},$$scope:{ctx:k}}}),km=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L996",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ol=new T({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[_ne]},$$scope:{ctx:k}}}),Em=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L502"}}),qm=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L542"}}),Cl=new T({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[bne]},$$scope:{ctx:k}}}),Tm=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L854",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),zl=new T({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[$ne]},$$scope:{ctx:k}}}),Nm=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L636"}}),Vl=new T({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[xne]},$$scope:{ctx:k}}}),Pm=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L703"}}),Ul=new T({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[vne]},$$scope:{ctx:k}}}),Am=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L769"}}),Ml=new T({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[yne]},$$scope:{ctx:k}}}),Sm=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/iterable_dataset.py#L806"}}),Rl=new T({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[jne]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L147"}}),zm=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L152"}}),Vm=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L157"}}),Um=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L161"}}),Mm=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L165"}}),Rm=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L169"}}),Bm=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L173"}}),Hm=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L177"}}),Gm=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L181"}}),Wm=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L185"}}),Ym=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L189"}}),Jm=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L193"}}),Km=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L197"}}),Zm=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L201"}}),Xm=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/arrow_dataset.py#L209"}}),Qm=new ms({}),eh=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1384"}}),th=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1414"}}),Yl=new T({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[wne]},$$scope:{ctx:k}}}),ah=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1492"}}),Jl=new T({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[Dne]},$$scope:{ctx:k}}}),nh=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1546"}}),Kl=new T({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[kne]},$$scope:{ctx:k}}}),oh=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1385"}}),Zl=new T({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[Ene]},$$scope:{ctx:k}}}),lh=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1713",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Xl=new T({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[qne]},$$scope:{ctx:k}}}),ih=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1684",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ql=new T({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[Ine]},$$scope:{ctx:k}}}),ph=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1659",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ei=new T({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[Tne]},$$scope:{ctx:k}}}),ch=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1601",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ti=new T({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[Nne]},$$scope:{ctx:k}}}),dh=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/dataset_dict.py#L1632",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),si=new T({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[Pne]},$$scope:{ctx:k}}}),mh=new ms({}),hh=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1397"}}),ni=new Ose({props:{$$slots:{default:[Fne]},$$scope:{ctx:k}}}),$h=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1606",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),oi=new T({props:{anchor:"datasets.Features.copy.example",$$slots:{default:[Ane]},$$scope:{ctx:k}}}),xh=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1588",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),vh=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1572",returnDescription:`
<p><code>list[Any]</code></p>
`}}),yh=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1550",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),jh=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1532",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),wh=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1519",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Dh=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1687",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),mi=new T({props:{anchor:"datasets.Features.flatten.example",$$slots:{default:[Lne]},$$scope:{ctx:k}}}),kh=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1468",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Eh=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1488",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),fi=new T({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[Sne]},$$scope:{ctx:k}}}),qh=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1626",returnType:`
<p><a
  href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ui=new T({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[One]},$$scope:{ctx:k}}}),Ih=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Sequence.length",description:"<strong>length</strong> (<code>int</code>) &#x2014; Length of the sequence.",name:"length"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L1005"}}),gi=new T({props:{anchor:"datasets.Sequence.example",$$slots:{default:[Cne]},$$scope:{ctx:k}}}),Th=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L846"}}),_i=new T({props:{anchor:"datasets.ClassLabel.example",$$slots:{default:[zne]},$$scope:{ctx:k}}}),Ph=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L950"}}),bi=new T({props:{anchor:"datasets.ClassLabel.int2str.example",$$slots:{default:[Vne]},$$scope:{ctx:k}}}),Fh=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L911"}}),$i=new T({props:{anchor:"datasets.ClassLabel.str2int.example",$$slots:{default:[Une]},$$scope:{ctx:k}}}),Ah=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L402"}}),xi=new T({props:{anchor:"datasets.Value.example",$$slots:{default:[Mne]},$$scope:{ctx:k}}}),Lh=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/translation.py#L12"}}),vi=new T({props:{anchor:"datasets.Translation.example",$$slots:{default:[Rne]},$$scope:{ctx:k}}}),Oh=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/translation.py#L46"}}),Ch=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/translation.py#L54"}}),ji=new T({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[Bne]},$$scope:{ctx:k}}}),zh=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/translation.py#L123"}}),Vh=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array2D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array2D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L487"}}),Di=new T({props:{anchor:"datasets.Array2D.example",$$slots:{default:[Hne]},$$scope:{ctx:k}}}),Uh=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array3D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array3D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L510"}}),ki=new T({props:{anchor:"datasets.Array3D.example",$$slots:{default:[Gne]},$$scope:{ctx:k}}}),Mh=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array4D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array4D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L533"}}),Ei=new T({props:{anchor:"datasets.Array4D.example",$$slots:{default:[Wne]},$$scope:{ctx:k}}}),Rh=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array5D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array5D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/features.py#L556"}}),qi=new T({props:{anchor:"datasets.Array5D.example",$$slots:{default:[Yne]},$$scope:{ctx:k}}}),Bh=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/audio.py#L20"}}),Ii=new T({props:{anchor:"datasets.Audio.example",$$slots:{default:[Jne]},$$scope:{ctx:k}}}),Jh=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/audio.py#L152",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Kh=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/audio.py#L104",returnDescription:`
<p>dict</p>
`}}),Zh=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/audio.py#L185",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Xh=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/audio.py#L73",returnType:`
<p><code>dict</code></p>
`}}),Qh=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/audio.py#L141"}}),ef=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/image.py#L26"}}),Ai=new T({props:{anchor:"datasets.Image.example",$$slots:{default:[Kne]},$$scope:{ctx:k}}}),of=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/image.py#L163",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),lf=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/image.py#L104",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),pf=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/image.py#L212",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),cf=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/image.py#L70",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),df=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/features/image.py#L150"}}),mf=new ms({}),hf=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/info.py#L317"}}),ff=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/info.py#L372"}}),Vi=new T({props:{anchor:"datasets.MetricInfo.from_directory.example",$$slots:{default:[Zne]},$$scope:{ctx:k}}}),gf=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/info.py#L352"}}),Ui=new T({props:{anchor:"datasets.MetricInfo.write_to_directory.example",$$slots:{default:[Xne]},$$scope:{ctx:k}}}),_f=new ms({}),bf=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/metric.py#L138"}}),$f=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/metric.py#L506"}}),Ri=new T({props:{anchor:"datasets.Metric.add.example",$$slots:{default:[Qne]},$$scope:{ctx:k}}}),xf=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/metric.py#L459"}}),Bi=new T({props:{anchor:"datasets.Metric.add_batch.example",$$slots:{default:[ere]},$$scope:{ctx:k}}}),vf=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/metric.py#L388",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),Hi=new T({props:{anchor:"datasets.Metric.compute.example",$$slots:{default:[tre]},$$scope:{ctx:k}}}),yf=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/metric.py#L589"}}),jf=new ms({}),wf=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.filesystems.S3FileSystem.anon",description:`<strong>anon</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to use anonymous connection (public buckets only). If False, uses the key/secret given,
or boto&#x2019;s credential resolver (client_kwargs, environment, variables, config files, EC2 IAM server, in that order).`,name:"anon"},{anchor:"datasets.filesystems.S3FileSystem.key",description:"<strong>key</strong> (<code>str</code>) &#x2014; If not anonymous, use this access key ID, if specified.",name:"key"},{anchor:"datasets.filesystems.S3FileSystem.secret",description:"<strong>secret</strong> (<code>str</code>) &#x2014; If not anonymous, use this secret access key, if specified.",name:"secret"},{anchor:"datasets.filesystems.S3FileSystem.token",description:"<strong>token</strong> (<code>str</code>) &#x2014; If not anonymous, use this security token, if specified.",name:"token"},{anchor:"datasets.filesystems.S3FileSystem.use_ssl",description:`<strong>use_ssl</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use SSL in connections to S3; may be faster without, but insecure. If <code>use_ssl</code> is
also set in <code>client_kwargs</code>, the value set in <code>client_kwargs</code> will take priority.`,name:"use_ssl"},{anchor:"datasets.filesystems.S3FileSystem.s3_additional_kwargs",description:`<strong>s3_additional_kwargs</strong> (<code>dict</code>) &#x2014; Parameters that are used when calling S3 API methods. Typically used for things
like ServerSideEncryption.`,name:"s3_additional_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.client_kwargs",description:"<strong>client_kwargs</strong> (<code>dict</code>) &#x2014; Parameters for the botocore client.",name:"client_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.requester_pays",description:"<strong>requester_pays</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether RequesterPays buckets are supported.",name:"requester_pays"},{anchor:"datasets.filesystems.S3FileSystem.default_block_size",description:`<strong>default_block_size</strong> (<code>int</code>) &#x2014; If given, the default block size value used for <code>open()</code>, if no specific value is given at all time.
The built-in default is 5MB.`,name:"default_block_size"},{anchor:"datasets.filesystems.S3FileSystem.default_fill_cache",description:"<strong>default_fill_cache</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use cache filling with open by default. Refer to <code>S3File.open</code>.",name:"default_fill_cache"},{anchor:"datasets.filesystems.S3FileSystem.default_cache_type",description:`<strong>default_cache_type</strong> (<code>str</code>, default to <code>bytes</code>) &#x2014; If given, the default cache_type value used for <code>open()</code>. Set to <code>none</code> if no
caching is desired. See fsspec&#x2019;s documentation for other available cache_type values.`,name:"default_cache_type"},{anchor:"datasets.filesystems.S3FileSystem.version_aware",description:`<strong>version_aware</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to support bucket versioning. If enable this will require the user to have
the necessary IAM permissions for dealing with versioned objects.`,name:"version_aware"},{anchor:"datasets.filesystems.S3FileSystem.cache_regions",description:`<strong>cache_regions</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to cache bucket regions. Whenever a new bucket is used, it will
first find out which region it belongs to and then use the client for that region.`,name:"cache_regions"},{anchor:"datasets.filesystems.S3FileSystem.asynchronous",description:"<strong>asynchronous</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether this instance is to be used from inside coroutines.",name:"asynchronous"},{anchor:"datasets.filesystems.S3FileSystem.config_kwargs",description:`<strong>config_kwargs</strong> (<code>dict</code>) &#x2014; Parameters passed to <code>botocore.client.Config</code>.
kwargs &#x2014; Other parameters for core session.`,name:"config_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.session",description:`<strong>session</strong> (<code>aiobotocore.session.AioSession</code>) &#x2014; Session to be used for all connections. This session will be used inplace of creating
a new session inside S3FileSystem. For example: <code>aiobotocore.session.AioSession(profile=&apos;test_user&apos;)</code>.`,name:"session"},{anchor:"datasets.filesystems.S3FileSystem.skip_instance_cache",description:"<strong>skip_instance_cache</strong> (<code>bool</code>) &#x2014; Control reuse of instances. Passed on to <code>fsspec</code>.",name:"skip_instance_cache"},{anchor:"datasets.filesystems.S3FileSystem.use_listings_cache",description:"<strong>use_listings_cache</strong> (<code>bool</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"use_listings_cache"},{anchor:"datasets.filesystems.S3FileSystem.listings_expiry_time",description:"<strong>listings_expiry_time</strong> (<code>int</code> or <code>float</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"listings_expiry_time"},{anchor:"datasets.filesystems.S3FileSystem.max_paths",description:"<strong>max_paths</strong> (<code>int</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"max_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/filesystems/s3filesystem.py#L4"}}),Ji=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[sre]},$$scope:{ctx:k}}}),Ki=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[are]},$$scope:{ctx:k}}}),Zi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[nre]},$$scope:{ctx:k}}}),Xi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[rre]},$$scope:{ctx:k}}}),Qi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[ore]},$$scope:{ctx:k}}}),kf=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/filesystems/__init__.py#L28"}}),Ef=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/filesystems/__init__.py#L40"}}),qf=new ms({}),If=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4356/src/datasets/fingerprint.py#L212"}}),{c(){c=r("meta"),g=m(),f=r("h1"),n=r("a"),u=r("span"),_(t.$$.fragment),d=m(),cn=r("span"),hs=i("Main classes"),Tr=m(),Se=r("h2"),_e=r("a"),ae=r("span"),_(fs.$$.fragment),Yf=m(),Nr=r("span"),PD=i("DatasetInfo"),p7=m(),Z=r("div"),_(Pp.$$.fragment),FD=m(),i$=r("p"),AD=i("Information about a dataset."),LD=m(),Jf=r("p"),p$=r("em"),SD=i("DatasetInfo"),OD=i(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),CD=m(),c$=r("p"),zD=i("Note: Not all fields are known on construction and may be updated later."),VD=m(),be=r("div"),_(Fp.$$.fragment),UD=m(),Ap=r("p"),MD=i("Create DatasetInfo from the JSON file in "),d$=r("code"),RD=i("dataset_info_dir"),BD=i("."),HD=m(),m$=r("p"),GD=i(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),WD=m(),h$=r("p"),YD=i("This will overwrite all previous metadata."),JD=m(),_(Pr.$$.fragment),KD=m(),us=r("div"),_(Lp.$$.fragment),ZD=m(),dn=r("p"),XD=i("Write "),f$=r("em"),QD=i("DatasetInfo"),e3=i(" and license (if present) as JSON files to "),u$=r("em"),t3=i("dataset_info_dir"),s3=i("."),a3=m(),_(Fr.$$.fragment),c7=m(),mn=r("h2"),Ar=r("a"),g$=r("span"),_(Sp.$$.fragment),n3=m(),_$=r("span"),r3=i("Dataset"),d7=m(),Lr=r("p"),o3=i("The base class "),Kf=r("a"),l3=i("Dataset"),i3=i(" implements a Dataset backed by an Apache Arrow table."),m7=m(),q=r("div"),_(Op.$$.fragment),p3=m(),b$=r("p"),c3=i("A Dataset backed by an Arrow table."),d3=m(),et=r("div"),_(Cp.$$.fragment),m3=m(),$$=r("p"),h3=i("Add column to Dataset."),f3=m(),x$=r("p"),v$=r("em"),u3=i("New in version 1.7."),g3=m(),_(Sr.$$.fragment),_3=m(),tt=r("div"),_(zp.$$.fragment),b3=m(),y$=r("p"),$3=i("Add item to Dataset."),x3=m(),j$=r("p"),w$=r("em"),v3=i("New in version 1.7."),y3=m(),_(Or.$$.fragment),j3=m(),Cr=r("div"),_(Vp.$$.fragment),w3=m(),D$=r("p"),D3=i("Instantiate a Dataset backed by an Arrow table at filename."),k3=m(),zr=r("div"),_(Up.$$.fragment),E3=m(),k$=r("p"),q3=i("Instantiate a Dataset backed by an Arrow buffer."),I3=m(),$e=r("div"),_(Mp.$$.fragment),T3=m(),Pt=r("p"),N3=i("Convert "),E$=r("code"),P3=i("pandas.DataFrame"),F3=i(" to a "),q$=r("code"),A3=i("pyarrow.Table"),L3=i(" to create a "),Zf=r("a"),S3=i("Dataset"),O3=i("."),C3=m(),Rp=r("p"),z3=i(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),I$=r("em"),V3=i("object"),U3=i(", we need to guess the datatype by looking at the Python objects in this Series."),M3=m(),Bp=r("p"),R3=i("Be aware that Series of the "),T$=r("em"),B3=i("object"),H3=i(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),G3=m(),_(Vr.$$.fragment),W3=m(),Ur=r("div"),_(Hp.$$.fragment),Y3=m(),Ft=r("p"),J3=i("Convert "),N$=r("code"),K3=i("dict"),Z3=i(" to a "),P$=r("code"),X3=i("pyarrow.Table"),Q3=i(" to create a "),Xf=r("a"),ek=i("Dataset"),tk=i("."),sk=m(),gs=r("div"),_(Gp.$$.fragment),ak=m(),F$=r("p"),nk=i("The Apache Arrow table backing the dataset."),rk=m(),_(Mr.$$.fragment),ok=m(),_s=r("div"),_(Wp.$$.fragment),lk=m(),A$=r("p"),ik=i("The cache files containing the Apache Arrow table backing the dataset."),pk=m(),_(Rr.$$.fragment),ck=m(),bs=r("div"),_(Yp.$$.fragment),dk=m(),L$=r("p"),mk=i("Number of columns in the dataset."),hk=m(),_(Br.$$.fragment),fk=m(),$s=r("div"),_(Jp.$$.fragment),uk=m(),Kp=r("p"),gk=i("Number of rows in the dataset (same as "),Hr=r("a"),_k=i("Dataset."),S$=r("strong"),bk=i("len"),$k=i("()"),xk=i(")."),vk=m(),_(Gr.$$.fragment),yk=m(),xs=r("div"),_(Zp.$$.fragment),jk=m(),O$=r("p"),wk=i("Names of the columns in the dataset."),Dk=m(),_(Wr.$$.fragment),kk=m(),vs=r("div"),_(Xp.$$.fragment),Ek=m(),C$=r("p"),qk=i("Shape of the dataset (number of columns, number of rows)."),Ik=m(),_(Yr.$$.fragment),Tk=m(),st=r("div"),_(Qp.$$.fragment),Nk=m(),z$=r("p"),Pk=i("Return a list of the unique elements in a column."),Fk=m(),V$=r("p"),Ak=i("This is implemented in the low-level backend and as such, very fast."),Lk=m(),_(Jr.$$.fragment),Sk=m(),ys=r("div"),_(ec.$$.fragment),Ok=m(),U$=r("p"),Ck=i(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),zk=m(),_(Kr.$$.fragment),Vk=m(),js=r("div"),_(tc.$$.fragment),Uk=m(),M$=r("p"),Mk=i("Cast the dataset to a new set of features."),Rk=m(),_(Zr.$$.fragment),Bk=m(),ws=r("div"),_(sc.$$.fragment),Hk=m(),R$=r("p"),Gk=i("Cast column to feature for decoding."),Wk=m(),_(Xr.$$.fragment),Yk=m(),at=r("div"),_(ac.$$.fragment),Jk=m(),B$=r("p"),Kk=i("Remove one or several column(s) in the dataset and the features associated to them."),Zk=m(),hn=r("p"),Xk=i("You can also remove a column using "),Qf=r("a"),Qk=i("Dataset.map()"),e5=i(" with "),H$=r("em"),t5=i("remove_columns"),s5=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),a5=m(),_(Qr.$$.fragment),n5=m(),Ds=r("div"),_(nc.$$.fragment),r5=m(),G$=r("p"),o5=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),l5=m(),_(eo.$$.fragment),i5=m(),ks=r("div"),_(rc.$$.fragment),p5=m(),W$=r("p"),c5=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),d5=m(),_(to.$$.fragment),m5=m(),Es=r("div"),_(oc.$$.fragment),h5=m(),lc=r("p"),f5=i("Casts the given column as :obj:"),Y$=r("code"),u5=i("datasets.features.ClassLabel"),g5=i(" and updates the table."),_5=m(),_(so.$$.fragment),b5=m(),qs=r("div"),_(ic.$$.fragment),$5=m(),J$=r("p"),x5=i("Number of rows in the dataset."),v5=m(),_(ao.$$.fragment),y5=m(),Is=r("div"),_(pc.$$.fragment),j5=m(),K$=r("p"),w5=i("Iterate through the examples."),D5=m(),cc=r("p"),k5=i("If a formatting is set with "),eu=r("a"),E5=i("Dataset.set_format()"),q5=i(` rows will be returned with the
selected format.`),I5=m(),no=r("div"),_(dc.$$.fragment),T5=m(),fn=r("p"),N5=i("To be used in a "),Z$=r("code"),P5=i("with"),F5=i(" statement. Set "),X$=r("code"),A5=i("__getitem__"),L5=i(" return format (type and columns)."),S5=m(),xe=r("div"),_(mc.$$.fragment),O5=m(),Oe=r("p"),C5=i("Set "),Q$=r("strong"),z5=i("getitem"),V5=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),e2=r("code"),U5=i("type"),M5=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),t2=r("strong"),R5=i("getitem"),B5=i(`.
It\u2019s also possible to use custom transforms for formatting using `),tu=r("a"),H5=i("datasets.Dataset.set_transform()"),G5=i("."),W5=m(),Ce=r("p"),Y5=i("It is possible to call "),s2=r("code"),J5=i("map"),K5=i(" after calling "),a2=r("code"),Z5=i("set_format"),X5=i(". Since "),n2=r("code"),Q5=i("map"),e6=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),r2=r("code"),t6=i("map"),s6=i(" on a dataset to add a new column, then this column will be formatted:"),a6=m(),o2=r("p"),n6=i("new formatted columns = (all columns - previously unformatted columns)"),r6=m(),_(ro.$$.fragment),o6=m(),Ts=r("div"),_(hc.$$.fragment),l6=m(),nt=r("p"),i6=i("Set "),l2=r("strong"),p6=i("getitem"),c6=i(" return format using this transform. The transform is applied on-the-fly on batches when "),i2=r("strong"),d6=i("getitem"),m6=i(` is called.
As `),su=r("a"),h6=i("datasets.Dataset.set_format()"),f6=i(", this can be reset using "),au=r("a"),u6=i("datasets.Dataset.reset_format()"),g6=m(),_(oo.$$.fragment),_6=m(),rt=r("div"),_(fc.$$.fragment),b6=m(),uc=r("p"),$6=i("Reset "),p2=r("strong"),x6=i("getitem"),v6=i(" return format to python objects and all columns."),y6=m(),nu=r("p"),j6=i("Same as "),c2=r("code"),w6=i("self.set_format()"),D6=m(),_(lo.$$.fragment),k6=m(),ve=r("div"),_(gc.$$.fragment),E6=m(),At=r("p"),q6=i("Set "),d2=r("strong"),I6=i("getitem"),T6=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),m2=r("code"),N6=i("type"),P6=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),h2=r("strong"),F6=i("getitem"),A6=i("."),L6=m(),_c=r("p"),S6=i("It\u2019s also possible to use custom transforms for formatting using "),ru=r("a"),O6=i("datasets.Dataset.with_transform()"),C6=i("."),z6=m(),un=r("p"),V6=i("Contrary to "),ou=r("a"),U6=i("datasets.Dataset.set_format()"),M6=i(", "),f2=r("code"),R6=i("with_format"),B6=i(" returns a new Dataset object."),H6=m(),_(io.$$.fragment),G6=m(),ye=r("div"),_(bc.$$.fragment),W6=m(),gn=r("p"),Y6=i("Set "),u2=r("strong"),J6=i("getitem"),K6=i(" return format using this transform. The transform is applied on-the-fly on batches when "),g2=r("strong"),Z6=i("getitem"),X6=i(" is called."),Q6=m(),_n=r("p"),eE=i("As "),lu=r("a"),tE=i("datasets.Dataset.set_format()"),sE=i(", this can be reset using "),iu=r("a"),aE=i("datasets.Dataset.reset_format()"),nE=i("."),rE=m(),bn=r("p"),oE=i("Contrary to "),pu=r("a"),lE=i("datasets.Dataset.set_transform()"),iE=i(", "),_2=r("code"),pE=i("with_transform"),cE=i(" returns a new Dataset object."),dE=m(),_(po.$$.fragment),mE=m(),co=r("div"),_($c.$$.fragment),hE=m(),b2=r("p"),fE=i("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),uE=m(),ot=r("div"),_(xc.$$.fragment),gE=m(),$2=r("p"),_E=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),bE=m(),x2=r("p"),$E=i("Be careful when running this command that no other process is currently using other cache files."),xE=m(),_(mo.$$.fragment),vE=m(),je=r("div"),_(vc.$$.fragment),yE=m(),v2=r("p"),jE=i(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),wE=m(),yc=r("p"),DE=i("You can specify whether the function should be batched or not with the "),y2=r("code"),kE=i("batched"),EE=i(" parameter:"),qE=m(),$n=r("ul"),j2=r("li"),IE=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),TE=m(),w2=r("li"),NE=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),PE=m(),ce=r("li"),FE=i("If batched is True and batch_size is "),D2=r("code"),AE=i("n"),LE=i(" > 1, then the function takes a batch of "),k2=r("code"),SE=i("n"),OE=i(" examples as input and can return a batch with "),E2=r("code"),CE=i("n"),zE=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),q2=r("code"),VE=i("n"),UE=i(` examples.
A batch is a dictionary, e.g. a batch of `),I2=r("code"),ME=i("n"),RE=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),BE=m(),_(ho.$$.fragment),HE=m(),Ns=r("div"),_(jc.$$.fragment),GE=m(),T2=r("p"),WE=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),YE=m(),_(fo.$$.fragment),JE=m(),Ps=r("div"),_(wc.$$.fragment),KE=m(),N2=r("p"),ZE=i("Create a new dataset with rows selected following the list/array of indices."),XE=m(),_(uo.$$.fragment),QE=m(),lt=r("div"),_(Dc.$$.fragment),e8=m(),P2=r("p"),t8=i("Create a new dataset sorted according to a column."),s8=m(),F2=r("p"),a8=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),n8=m(),_(go.$$.fragment),r8=m(),it=r("div"),_(kc.$$.fragment),o8=m(),A2=r("p"),l8=i("Create a new Dataset where the rows are shuffled."),i8=m(),L2=r("p"),p8=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),c8=m(),_(_o.$$.fragment),d8=m(),pt=r("div"),_(Ec.$$.fragment),m8=m(),W=r("p"),h8=i("Return a dictionary ("),S2=r("code"),f8=i("datasets.DatasetDict"),u8=i(") with two random train and test subsets ("),O2=r("em"),g8=i("train"),_8=i(" and "),C2=r("em"),b8=i("test"),$8=m(),z2=r("code"),x8=i("Dataset"),v8=i(` splits).
Splits are created from the dataset according to `),V2=r("em"),y8=i("test_size"),j8=i(", "),U2=r("em"),w8=i("train_size"),D8=i(" and "),M2=r("em"),k8=i("shuffle"),E8=i("."),q8=m(),qc=r("p"),I8=i("This method is similar to scikit-learn "),R2=r("em"),T8=i("train_test_split"),N8=i(" with the omission of the stratified options."),P8=m(),_(bo.$$.fragment),F8=m(),ne=r("div"),_(Ic.$$.fragment),A8=m(),xn=r("p"),L8=i("Return the "),B2=r("em"),S8=i("index"),O8=i("-nth shard from dataset split into "),H2=r("em"),C8=i("num_shards"),z8=i(" pieces."),V8=m(),G2=r("p"),U8=i(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),M8=m(),Tc=r("p"),R8=i(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),W2=r("em"),B8=i("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),H8=i(` will return
a dataset with the same order as the original.`),G8=m(),Y2=r("p"),W8=i(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),Y8=m(),_($o.$$.fragment),J8=m(),Fs=r("div"),_(Nc.$$.fragment),K8=m(),J2=r("p"),Z8=i(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),X8=m(),_(xo.$$.fragment),Q8=m(),ct=r("div"),_(Pc.$$.fragment),eq=m(),K2=r("p"),tq=i(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),sq=m(),Lt=r("p"),aq=i("The resulting Parquet files are self-contained by default: if your dataset contains "),cu=r("a"),nq=i("Image"),rq=i(" or "),du=r("a"),oq=i("Audio"),lq=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),Z2=r("em"),iq=i("embed_external_files"),pq=i(" to False."),cq=m(),_(vo.$$.fragment),dq=m(),K=r("div"),_(Fc.$$.fragment),mq=m(),vn=r("p"),hq=i("Saves a dataset to a dataset directory, or in a filesystem using either "),mu=r("a"),fq=i("S3FileSystem"),uq=i(` or
any implementation of `),X2=r("code"),gq=i("fsspec.spec.AbstractFileSystem"),_q=i("."),bq=m(),yn=r("p"),$q=i("For "),hu=r("a"),xq=i("Image"),vq=i(" and "),fu=r("a"),yq=i("Audio"),jq=i(" data:"),wq=m(),Ac=r("p"),Dq=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Q2=r("em"),kq=i("read()"),Eq=i(" those files first."),qq=m(),_(yo.$$.fragment),Iq=m(),_(jo.$$.fragment),Tq=m(),_(wo.$$.fragment),Nq=m(),As=r("div"),_(Lc.$$.fragment),Pq=m(),St=r("p"),Fq=i("Loads a dataset that was previously saved using "),ex=r("code"),Aq=i("save_to_disk"),Lq=i(` from a dataset directory, or from a
filesystem using either `),uu=r("a"),Sq=i("S3FileSystem"),Oq=i(` or any implementation of
`),tx=r("code"),Cq=i("fsspec.spec.AbstractFileSystem"),zq=i("."),Vq=m(),_(Do.$$.fragment),Uq=m(),ko=r("div"),_(Sc.$$.fragment),Mq=m(),sx=r("p"),Rq=i("Create and cache a new Dataset by flattening the indices mapping."),Bq=m(),Ls=r("div"),_(Oc.$$.fragment),Hq=m(),ax=r("p"),Gq=i("Exports the dataset to csv"),Wq=m(),_(Eo.$$.fragment),Yq=m(),Ss=r("div"),_(Cc.$$.fragment),Jq=m(),zc=r("p"),Kq=i("Returns the dataset as a "),nx=r("code"),Zq=i("pandas.DataFrame"),Xq=i(". Can also return a generator for large datasets."),Qq=m(),_(qo.$$.fragment),e9=m(),Os=r("div"),_(Vc.$$.fragment),t9=m(),rx=r("p"),s9=i("Returns the dataset as a Python dict. Can also return a generator for large datasets."),a9=m(),_(Io.$$.fragment),n9=m(),Cs=r("div"),_(Uc.$$.fragment),r9=m(),ox=r("p"),o9=i("Export the dataset to JSON Lines or JSON."),l9=m(),_(To.$$.fragment),i9=m(),zs=r("div"),_(Mc.$$.fragment),p9=m(),lx=r("p"),c9=i("Exports the dataset to parquet"),d9=m(),_(No.$$.fragment),m9=m(),dt=r("div"),_(Rc.$$.fragment),h9=m(),jn=r("p"),f9=i(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),ix=r("code"),u9=i("device"),g9=i(" if you want to run it on GPU ("),px=r("code"),_9=i("device"),b9=i(` must be the GPU index).
You can find more information about Faiss here:`),$9=m(),cx=r("ul"),gu=r("li"),x9=i("For "),Bc=r("a"),v9=i("string factory"),y9=m(),_(Po.$$.fragment),j9=m(),Vs=r("div"),_(Hc.$$.fragment),w9=m(),Ot=r("p"),D9=i(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),dx=r("em"),k9=i("external_arrays"),E9=i(`.
You can specify `),mx=r("em"),q9=i("device"),I9=i(" if you want to run it on GPU ("),hx=r("em"),T9=i("device"),N9=i(` must be the GPU index).
You can find more information about Faiss here:`),P9=m(),fx=r("ul"),_u=r("li"),F9=i("For "),Gc=r("a"),A9=i("string factory"),L9=m(),Fo=r("div"),_(Wc.$$.fragment),S9=m(),ux=r("p"),O9=i("Save a FaissIndex on disk."),C9=m(),Us=r("div"),_(Yc.$$.fragment),z9=m(),gx=r("p"),V9=i("Load a FaissIndex from disk."),U9=m(),Jc=r("p"),M9=i(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),_x=r("em"),R9=i(".get_index(index_name).faiss_index"),B9=i(" to make it fit your needs."),H9=m(),Ms=r("div"),_(Kc.$$.fragment),G9=m(),bx=r("p"),W9=i("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),Y9=m(),_(Ao.$$.fragment),J9=m(),Rs=r("div"),_(Zc.$$.fragment),K9=m(),$x=r("p"),Z9=i("Load an existing text index using ElasticSearch for fast retrieval."),X9=m(),_(Lo.$$.fragment),Q9=m(),So=r("div"),_(Xc.$$.fragment),eI=m(),xx=r("p"),tI=i("List the colindex_nameumns/identifiers of all the attached indexes."),sI=m(),Oo=r("div"),_(Qc.$$.fragment),aI=m(),vx=r("p"),nI=i("List the index_name/identifiers of all the attached indexes."),rI=m(),Co=r("div"),_(ed.$$.fragment),oI=m(),yx=r("p"),lI=i("Drop the index with the specified column."),iI=m(),zo=r("div"),_(td.$$.fragment),pI=m(),jx=r("p"),cI=i("Find the nearest examples indices in the dataset to the query."),dI=m(),Vo=r("div"),_(sd.$$.fragment),mI=m(),wx=r("p"),hI=i("Find the nearest examples indices in the dataset to the query."),fI=m(),Uo=r("div"),_(ad.$$.fragment),uI=m(),Dx=r("p"),gI=i("Find the nearest examples in the dataset to the query."),_I=m(),Mo=r("div"),_(nd.$$.fragment),bI=m(),kx=r("p"),$I=i("Find the nearest examples in the dataset to the query."),xI=m(),Ro=r("div"),_(rd.$$.fragment),vI=m(),bu=r("p"),$u=r("a"),yI=i("datasets.DatasetInfo"),jI=i(" object containing all the metadata in the dataset."),wI=m(),Bo=r("div"),_(od.$$.fragment),DI=m(),xu=r("p"),vu=r("a"),kI=i("datasets.NamedSplit"),EI=i(" object corresponding to a named dataset split."),qI=m(),yu=r("div"),_(ld.$$.fragment),II=m(),ju=r("div"),_(id.$$.fragment),TI=m(),wu=r("div"),_(pd.$$.fragment),NI=m(),Du=r("div"),_(cd.$$.fragment),PI=m(),ku=r("div"),_(dd.$$.fragment),FI=m(),Eu=r("div"),_(md.$$.fragment),AI=m(),qu=r("div"),_(hd.$$.fragment),LI=m(),Iu=r("div"),_(fd.$$.fragment),SI=m(),Tu=r("div"),_(ud.$$.fragment),OI=m(),Nu=r("div"),_(gd.$$.fragment),CI=m(),Pu=r("div"),_(_d.$$.fragment),zI=m(),Fu=r("div"),_(bd.$$.fragment),VI=m(),Au=r("div"),_($d.$$.fragment),UI=m(),Bs=r("div"),_(xd.$$.fragment),MI=m(),Ex=r("p"),RI=i("Create Dataset from CSV file(s)."),BI=m(),_(Ho.$$.fragment),HI=m(),Hs=r("div"),_(vd.$$.fragment),GI=m(),qx=r("p"),WI=i("Create Dataset from JSON or JSON Lines file(s)."),YI=m(),_(Go.$$.fragment),JI=m(),Gs=r("div"),_(yd.$$.fragment),KI=m(),Ix=r("p"),ZI=i("Create Dataset from Parquet file(s)."),XI=m(),_(Wo.$$.fragment),QI=m(),Ws=r("div"),_(jd.$$.fragment),eT=m(),Tx=r("p"),tT=i("Create Dataset from text file(s)."),sT=m(),_(Yo.$$.fragment),aT=m(),Ys=r("div"),_(wd.$$.fragment),nT=m(),wn=r("p"),rT=i("Prepare a dataset for the given task by casting the dataset\u2019s "),Lu=r("a"),oT=i("Features"),lT=i(" to standardized column names and types as detailed in "),Su=r("a"),iT=i("datasets.tasks"),pT=i("."),cT=m(),Dn=r("p"),dT=i("Casts "),Nx=r("code"),mT=i("datasets.DatasetInfo.features"),hT=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Px=r("code"),fT=i("datasets.DatasetInfo.task_templates"),uT=i(" after casting."),gT=m(),Js=r("div"),_(Dd.$$.fragment),_T=m(),kd=r("p"),bT=i("Align the dataset\u2019s label ID and label name mapping to match an input "),Fx=r("code"),$T=i("label2id"),xT=i(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),vT=m(),_(Jo.$$.fragment),h7=m(),Ct=r("div"),_(Ed.$$.fragment),yT=m(),kn=r("p"),jT=i("Converts a list of "),Ou=r("a"),wT=i("Dataset"),DT=i(" with the same schema into a single "),Cu=r("a"),kT=i("Dataset"),ET=i("."),qT=m(),_(Ko.$$.fragment),f7=m(),X=r("div"),_(qd.$$.fragment),IT=m(),Ax=r("p"),TT=i(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),NT=m(),En=r("p"),PT=i("You can use this function on a list of "),zu=r("a"),FT=i("Dataset"),AT=i(" objects, or on a list of "),Vu=r("a"),LT=i("IterableDataset"),ST=i(" objects."),OT=m(),ze=r("p"),CT=i("If "),Lx=r("code"),zT=i("probabilities"),VT=i(" is "),Sx=r("code"),UT=i("None"),MT=i(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Ox=r("code"),RT=i("probabilities"),BT=i(" is not "),Cx=r("code"),HT=i("None"),GT=i(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),WT=m(),zx=r("p"),YT=i("The resulting dataset ends when one of the source datasets runs out of examples."),JT=m(),_(Zo.$$.fragment),u7=m(),de=r("div"),_(Id.$$.fragment),KT=m(),Vx=r("p"),ZT=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),XT=m(),Ux=r("p"),QT=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),eN=m(),Mx=r("p"),tN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),sN=m(),Ve=r("ul"),Rx=r("li"),aN=i("cache files are always recreated"),nN=m(),Bx=r("li"),rN=i("cache files are written to a temporary directory that is deleted when session closes"),oN=m(),Hx=r("li"),lN=i("cache files are named using a random hash instead of the dataset fingerprint"),iN=m(),Td=r("li"),pN=i("use "),Uu=r("a"),cN=i("datasets.Dataset.save_to_disk()"),dN=i(" to save a transformed dataset or it will be deleted when session closes"),mN=m(),zt=r("li"),hN=i("caching doesn\u2019t affect "),Mu=r("a"),fN=i("datasets.load_dataset()"),uN=i(`. If you want to regenerate a dataset from scratch you should use
the `),Gx=r("code"),gN=i("download_mode"),_N=i(" parameter in "),Ru=r("a"),bN=i("datasets.load_dataset()"),$N=i("."),g7=m(),me=r("div"),_(Nd.$$.fragment),xN=m(),Wx=r("p"),vN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),yN=m(),Yx=r("p"),jN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),wN=m(),Jx=r("p"),DN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),kN=m(),Ue=r("ul"),Kx=r("li"),EN=i("cache files are always recreated"),qN=m(),Zx=r("li"),IN=i("cache files are written to a temporary directory that is deleted when session closes"),TN=m(),Xx=r("li"),NN=i("cache files are named using a random hash instead of the dataset fingerprint"),PN=m(),Pd=r("li"),FN=i("use "),Bu=r("a"),AN=i("datasets.Dataset.save_to_disk()"),LN=i(" to save a transformed dataset or it will be deleted when session closes"),SN=m(),Vt=r("li"),ON=i("caching doesn\u2019t affect "),Hu=r("a"),CN=i("datasets.load_dataset()"),zN=i(`. If you want to regenerate a dataset from scratch you should use
the `),Qx=r("code"),VN=i("download_mode"),UN=i(" parameter in "),Gu=r("a"),MN=i("datasets.load_dataset()"),RN=i("."),_7=m(),he=r("div"),_(Fd.$$.fragment),BN=m(),e1=r("p"),HN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),GN=m(),t1=r("p"),WN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),YN=m(),s1=r("p"),JN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),KN=m(),Me=r("ul"),a1=r("li"),ZN=i("cache files are always recreated"),XN=m(),n1=r("li"),QN=i("cache files are written to a temporary directory that is deleted when session closes"),eP=m(),r1=r("li"),tP=i("cache files are named using a random hash instead of the dataset fingerprint"),sP=m(),Ad=r("li"),aP=i("use "),Wu=r("a"),nP=i("datasets.Dataset.save_to_disk()"),rP=i(" to save a transformed dataset or it will be deleted when session closes"),oP=m(),Ut=r("li"),lP=i("caching doesn\u2019t affect "),Yu=r("a"),iP=i("datasets.load_dataset()"),pP=i(`. If you want to regenerate a dataset from scratch you should use
the `),o1=r("code"),cP=i("download_mode"),dP=i(" parameter in "),Ju=r("a"),mP=i("datasets.load_dataset()"),hP=i("."),b7=m(),qn=r("h2"),Xo=r("a"),l1=r("span"),_(Ld.$$.fragment),fP=m(),i1=r("span"),uP=i("DatasetDict"),$7=m(),Qo=r("p"),gP=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),p1=r("code"),_P=i("Dataset"),bP=i(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),x7=m(),F=r("div"),_(Sd.$$.fragment),$P=m(),c1=r("p"),xP=i("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),vP=m(),Ks=r("div"),_(Od.$$.fragment),yP=m(),d1=r("p"),jP=i("The Apache Arrow tables backing each split."),wP=m(),_(el.$$.fragment),DP=m(),Zs=r("div"),_(Cd.$$.fragment),kP=m(),m1=r("p"),EP=i("The cache files containing the Apache Arrow table backing each split."),qP=m(),_(tl.$$.fragment),IP=m(),Xs=r("div"),_(zd.$$.fragment),TP=m(),h1=r("p"),NP=i("Number of columns in each split of the dataset."),PP=m(),_(sl.$$.fragment),FP=m(),Qs=r("div"),_(Vd.$$.fragment),AP=m(),Ud=r("p"),LP=i("Number of rows in each split of the dataset (same as "),al=r("a"),SP=i("datasets.Dataset."),f1=r("strong"),OP=i("len"),CP=i("()"),zP=i(")."),VP=m(),_(nl.$$.fragment),UP=m(),ea=r("div"),_(Md.$$.fragment),MP=m(),u1=r("p"),RP=i("Names of the columns in each split of the dataset."),BP=m(),_(rl.$$.fragment),HP=m(),ta=r("div"),_(Rd.$$.fragment),GP=m(),g1=r("p"),WP=i("Shape of each split of the dataset (number of columns, number of rows)."),YP=m(),_(ol.$$.fragment),JP=m(),mt=r("div"),_(Bd.$$.fragment),KP=m(),_1=r("p"),ZP=i("Return a list of the unique elements in a column for each split."),XP=m(),b1=r("p"),QP=i("This is implemented in the low-level backend and as such, very fast."),eF=m(),_(ll.$$.fragment),tF=m(),sa=r("div"),_(Hd.$$.fragment),sF=m(),$1=r("p"),aF=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),nF=m(),_(il.$$.fragment),rF=m(),aa=r("div"),_(Gd.$$.fragment),oF=m(),x1=r("p"),lF=i(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),iF=m(),_(pl.$$.fragment),pF=m(),na=r("div"),_(Wd.$$.fragment),cF=m(),v1=r("p"),dF=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),mF=m(),_(cl.$$.fragment),hF=m(),ht=r("div"),_(Yd.$$.fragment),fF=m(),y1=r("p"),uF=i(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),gF=m(),j1=r("p"),_F=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),bF=m(),_(dl.$$.fragment),$F=m(),we=r("div"),_(Jd.$$.fragment),xF=m(),w1=r("p"),vF=i("Create a new Dataset where the rows are shuffled."),yF=m(),D1=r("p"),jF=i("The transformation is applied to all the datasets of the dataset dictionary."),wF=m(),k1=r("p"),DF=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),kF=m(),_(ml.$$.fragment),EF=m(),De=r("div"),_(Kd.$$.fragment),qF=m(),Zd=r("p"),IF=i("Set "),E1=r("code"),TF=i("__getitem__"),NF=i(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),PF=m(),Re=r("p"),FF=i("It is possible to call "),q1=r("code"),AF=i("map"),LF=i(" after calling "),I1=r("code"),SF=i("set_format"),OF=i(". Since "),T1=r("code"),CF=i("map"),zF=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),N1=r("code"),VF=i("map"),UF=i(" on a dataset to add a new column, then this column will be formatted:"),MF=m(),P1=r("p"),RF=i("new formatted columns = (all columns - previously unformatted columns)"),BF=m(),_(hl.$$.fragment),HF=m(),ft=r("div"),_(Xd.$$.fragment),GF=m(),Qd=r("p"),WF=i("Reset "),F1=r("code"),YF=i("__getitem__"),JF=i(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),KF=m(),Ku=r("p"),ZF=i("Same as "),A1=r("code"),XF=i("self.set_format()"),QF=m(),_(fl.$$.fragment),eA=m(),ul=r("div"),_(em.$$.fragment),tA=m(),In=r("p"),sA=i("To be used in a "),L1=r("em"),aA=i("with"),nA=i(" statement. Set "),S1=r("code"),rA=i("__getitem__"),oA=i(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),lA=m(),ke=r("div"),_(tm.$$.fragment),iA=m(),Mt=r("p"),pA=i("Set "),O1=r("code"),cA=i("__getitem__"),dA=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),C1=r("code"),mA=i("type"),hA=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),z1=r("code"),fA=i("__getitem__"),uA=i(`.
The format is set for every dataset in the dataset dictionary`),gA=m(),sm=r("p"),_A=i("It\u2019s also possible to use custom transforms for formatting using "),Zu=r("a"),bA=i("datasets.Dataset.with_transform()"),$A=i("."),xA=m(),Tn=r("p"),vA=i("Contrary to "),Xu=r("a"),yA=i("datasets.DatasetDict.set_format()"),jA=i(", "),V1=r("code"),wA=i("with_format"),DA=i(" returns a new DatasetDict object with new Dataset objects."),kA=m(),_(gl.$$.fragment),EA=m(),Ee=r("div"),_(am.$$.fragment),qA=m(),Nn=r("p"),IA=i("Set "),U1=r("code"),TA=i("__getitem__"),NA=i(" return format using this transform. The transform is applied on-the-fly on batches when "),M1=r("code"),PA=i("__getitem__"),FA=i(` is called.
The transform is set for every dataset in the dataset dictionary`),AA=m(),Pn=r("p"),LA=i("As "),Qu=r("a"),SA=i("datasets.Dataset.set_format()"),OA=i(", this can be reset using "),eg=r("a"),CA=i("datasets.Dataset.reset_format()"),zA=i("."),VA=m(),Fn=r("p"),UA=i("Contrary to "),R1=r("code"),MA=i("datasets.DatasetDict.set_transform()"),RA=i(", "),B1=r("code"),BA=i("with_transform"),HA=i(" returns a new DatasetDict object with new Dataset objects."),GA=m(),_(_l.$$.fragment),WA=m(),ra=r("div"),_(nm.$$.fragment),YA=m(),H1=r("p"),JA=i(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),KA=m(),_(bl.$$.fragment),ZA=m(),ut=r("div"),_(rm.$$.fragment),XA=m(),G1=r("p"),QA=i(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),eL=m(),Rt=r("p"),tL=i("You can also remove a column using "),tg=r("a"),sL=i("Dataset.map()"),aL=i(" with "),W1=r("em"),nL=i("feature"),rL=i(" but "),Y1=r("code"),oL=i("cast_"),lL=i(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),iL=m(),_($l.$$.fragment),pL=m(),oa=r("div"),_(om.$$.fragment),cL=m(),J1=r("p"),dL=i("Cast column to feature for decoding."),mL=m(),_(xl.$$.fragment),hL=m(),qe=r("div"),_(lm.$$.fragment),fL=m(),K1=r("p"),uL=i(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),gL=m(),Z1=r("p"),_L=i("The transformation is applied to all the splits of the dataset dictionary."),bL=m(),An=r("p"),$L=i("You can also remove a column using "),sg=r("a"),xL=i("Dataset.map()"),vL=i(" with "),X1=r("em"),yL=i("remove_columns"),jL=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),wL=m(),_(vl.$$.fragment),DL=m(),Ie=r("div"),_(im.$$.fragment),kL=m(),Q1=r("p"),EL=i(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),qL=m(),Ln=r("p"),IL=i("You can also rename a column using "),ag=r("a"),TL=i("Dataset.map()"),NL=i(" with "),ev=r("em"),PL=i("remove_columns"),FL=i(" but the present method:"),AL=m(),pm=r("ul"),tv=r("li"),LL=i("takes care of moving the original features under the new column name."),SL=m(),sv=r("li"),OL=i("doesn\u2019t copy the data to a new dataset and is thus much faster."),CL=m(),_(yl.$$.fragment),zL=m(),la=r("div"),_(cm.$$.fragment),VL=m(),av=r("p"),UL=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),ML=m(),_(jl.$$.fragment),RL=m(),ia=r("div"),_(dm.$$.fragment),BL=m(),mm=r("p"),HL=i("Casts the given column as :obj:"),nv=r("code"),GL=i("datasets.features.ClassLabel"),WL=i(" and updates the tables."),YL=m(),_(wl.$$.fragment),JL=m(),Te=r("div"),_(hm.$$.fragment),KL=m(),Sn=r("p"),ZL=i("Pushes the "),rv=r("code"),XL=i("DatasetDict"),QL=i(` to the hub as a Parquet dataset.
The `),ov=r("code"),eS=i("DatasetDict"),tS=i(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),sS=m(),lv=r("p"),aS=i("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),nS=m(),Bt=r("p"),rS=i("The resulting Parquet files are self-contained by default: if your dataset contains "),ng=r("a"),oS=i("Image"),lS=i(" or "),rg=r("a"),iS=i("Audio"),pS=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),iv=r("em"),cS=i("embed_external_files"),dS=i(" to False."),mS=m(),_(Dl.$$.fragment),hS=m(),re=r("div"),_(fm.$$.fragment),fS=m(),On=r("p"),uS=i("Saves a dataset dict to a filesystem using either "),og=r("a"),gS=i("S3FileSystem"),_S=i(` or
`),pv=r("code"),bS=i("fsspec.spec.AbstractFileSystem"),$S=i("."),xS=m(),Cn=r("p"),vS=i("For "),lg=r("a"),yS=i("Image"),jS=i(" and "),ig=r("a"),wS=i("Audio"),DS=i(" data:"),kS=m(),um=r("p"),ES=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),cv=r("em"),qS=i("read()"),IS=i(" those files first."),TS=m(),_(kl.$$.fragment),NS=m(),_(El.$$.fragment),PS=m(),pa=r("div"),_(gm.$$.fragment),FS=m(),Ht=r("p"),AS=i("Load a dataset that was previously saved using "),dv=r("code"),LS=i("save_to_disk"),SS=i(` from a filesystem using either
`),pg=r("a"),OS=i("S3FileSystem"),CS=i(" or "),mv=r("code"),zS=i("fsspec.spec.AbstractFileSystem"),VS=i("."),US=m(),_(ql.$$.fragment),MS=m(),ca=r("div"),_(_m.$$.fragment),RS=m(),hv=r("p"),BS=i("Create DatasetDict from CSV file(s)."),HS=m(),_(Il.$$.fragment),GS=m(),da=r("div"),_(bm.$$.fragment),WS=m(),fv=r("p"),YS=i("Create DatasetDict from JSON Lines file(s)."),JS=m(),_(Tl.$$.fragment),KS=m(),ma=r("div"),_($m.$$.fragment),ZS=m(),uv=r("p"),XS=i("Create DatasetDict from Parquet file(s)."),QS=m(),_(Nl.$$.fragment),eO=m(),ha=r("div"),_(xm.$$.fragment),tO=m(),gv=r("p"),sO=i("Create DatasetDict from text file(s)."),aO=m(),_(Pl.$$.fragment),nO=m(),fa=r("div"),_(vm.$$.fragment),rO=m(),zn=r("p"),oO=i("Prepare a dataset for the given task by casting the dataset\u2019s "),cg=r("a"),lO=i("Features"),iO=i(" to standardized column names and types as detailed in "),dg=r("a"),pO=i("datasets.tasks"),cO=i("."),dO=m(),Vn=r("p"),mO=i("Casts "),_v=r("code"),hO=i("datasets.DatasetInfo.features"),fO=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),bv=r("code"),uO=i("datasets.DatasetInfo.task_templates"),gO=i(" after casting."),v7=m(),mg=r("a"),y7=m(),Un=r("h2"),Fl=r("a"),$v=r("span"),_(ym.$$.fragment),_O=m(),xv=r("span"),bO=i("IterableDataset"),j7=m(),Al=r("p"),$O=i("The base class "),hg=r("a"),xO=i("IterableDataset"),vO=i(" implements an iterable Dataset backed by python generators."),w7=m(),L=r("div"),_(jm.$$.fragment),yO=m(),vv=r("p"),jO=i("A Dataset backed by an iterable."),wO=m(),ua=r("div"),_(wm.$$.fragment),DO=m(),yv=r("p"),kO=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),EO=m(),_(Ll.$$.fragment),qO=m(),ga=r("div"),_(Dm.$$.fragment),IO=m(),jv=r("p"),TO=i("Cast column to feature for decoding."),NO=m(),_(Sl.$$.fragment),PO=m(),_a=r("div"),_(km.$$.fragment),FO=m(),wv=r("p"),AO=i("Cast the dataset to a new set of features."),LO=m(),_(Ol.$$.fragment),SO=m(),fg=r("div"),_(Em.$$.fragment),OO=m(),Ne=r("div"),_(qm.$$.fragment),CO=m(),Dv=r("p"),zO=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),VO=m(),Im=r("p"),UO=i("You can specify whether the function should be batched or not with the "),kv=r("code"),MO=i("batched"),RO=i(" parameter:"),BO=m(),Mn=r("ul"),Ev=r("li"),HO=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),GO=m(),qv=r("li"),WO=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),YO=m(),fe=r("li"),JO=i("If batched is True and batch_size is "),Iv=r("code"),KO=i("n"),ZO=i(" > 1, then the function takes a batch of "),Tv=r("code"),XO=i("n"),QO=i(" examples as input and can return a batch with "),Nv=r("code"),eC=i("n"),tC=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Pv=r("code"),sC=i("n"),aC=i(` examples.
A batch is a dictionary, e.g. a batch of `),Fv=r("code"),nC=i("n"),rC=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),oC=m(),_(Cl.$$.fragment),lC=m(),ba=r("div"),_(Tm.$$.fragment),iC=m(),Av=r("p"),pC=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),cC=m(),_(zl.$$.fragment),dC=m(),$a=r("div"),_(Nm.$$.fragment),mC=m(),Lv=r("p"),hC=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),fC=m(),_(Vl.$$.fragment),uC=m(),oe=r("div"),_(Pm.$$.fragment),gC=m(),Sv=r("p"),_C=i("Randomly shuffles the elements of this dataset."),bC=m(),Ov=r("p"),$C=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),xC=m(),Fm=r("p"),vC=i("For instance, if your dataset contains 10,000 elements but "),Cv=r("code"),yC=i("buffer_size"),jC=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),wC=m(),Rn=r("p"),DC=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),ug=r("a"),kC=i("datasets.IterableDataset.skip()"),EC=i(" or "),gg=r("a"),qC=i("datasets.IterableDataset.take()"),IC=i(`
then the order of the shards is kept unchanged.`),TC=m(),_(Ul.$$.fragment),NC=m(),xa=r("div"),_(Am.$$.fragment),PC=m(),Lm=r("p"),FC=i("Create a new IterableDataset that skips the first "),zv=r("code"),AC=i("n"),LC=i(" elements."),SC=m(),_(Ml.$$.fragment),OC=m(),va=r("div"),_(Sm.$$.fragment),CC=m(),Om=r("p"),zC=i("Create a new IterableDataset with only the first "),Vv=r("code"),VC=i("n"),UC=i(" elements."),MC=m(),_(Rl.$$.fragment),RC=m(),Bl=r("div"),_(Cm.$$.fragment),BC=m(),_g=r("p"),bg=r("a"),HC=i("datasets.DatasetInfo"),GC=i(" object containing all the metadata in the dataset."),WC=m(),Hl=r("div"),_(zm.$$.fragment),YC=m(),$g=r("p"),xg=r("a"),JC=i("datasets.NamedSplit"),KC=i(" object corresponding to a named dataset split."),ZC=m(),vg=r("div"),_(Vm.$$.fragment),XC=m(),yg=r("div"),_(Um.$$.fragment),QC=m(),jg=r("div"),_(Mm.$$.fragment),ez=m(),wg=r("div"),_(Rm.$$.fragment),tz=m(),Dg=r("div"),_(Bm.$$.fragment),sz=m(),kg=r("div"),_(Hm.$$.fragment),az=m(),Eg=r("div"),_(Gm.$$.fragment),nz=m(),qg=r("div"),_(Wm.$$.fragment),rz=m(),Ig=r("div"),_(Ym.$$.fragment),oz=m(),Tg=r("div"),_(Jm.$$.fragment),lz=m(),Ng=r("div"),_(Km.$$.fragment),iz=m(),Pg=r("div"),_(Zm.$$.fragment),pz=m(),Fg=r("div"),_(Xm.$$.fragment),D7=m(),Bn=r("h2"),Gl=r("a"),Uv=r("span"),_(Qm.$$.fragment),cz=m(),Mv=r("span"),dz=i("IterableDatasetDict"),k7=m(),Wl=r("p"),mz=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Rv=r("code"),hz=i("IterableDataset"),fz=i(" objects as values."),E7=m(),U=r("div"),_(eh.$$.fragment),uz=m(),Pe=r("div"),_(th.$$.fragment),gz=m(),Bv=r("p"),_z=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),bz=m(),sh=r("p"),$z=i("You can specify whether the function should be batched or not with the "),Hv=r("code"),xz=i("batched"),vz=i(" parameter:"),yz=m(),Hn=r("ul"),Gv=r("li"),jz=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),wz=m(),Wv=r("li"),Dz=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),kz=m(),ue=r("li"),Ez=i("If batched is True and batch_size is "),Yv=r("code"),qz=i("n"),Iz=i(" > 1, then the function takes a batch of "),Jv=r("code"),Tz=i("n"),Nz=i(" examples as input and can return a batch with "),Kv=r("code"),Pz=i("n"),Fz=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Zv=r("code"),Az=i("n"),Lz=i(` examples.
A batch is a dictionary, e.g. a batch of `),Xv=r("code"),Sz=i("n"),Oz=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Cz=m(),_(Yl.$$.fragment),zz=m(),ya=r("div"),_(ah.$$.fragment),Vz=m(),Qv=r("p"),Uz=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),Mz=m(),_(Jl.$$.fragment),Rz=m(),le=r("div"),_(nh.$$.fragment),Bz=m(),ey=r("p"),Hz=i(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),Gz=m(),ty=r("p"),Wz=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),Yz=m(),rh=r("p"),Jz=i("For instance, if your dataset contains 10,000 elements but "),sy=r("code"),Kz=i("buffer_size"),Zz=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Xz=m(),Gn=r("p"),Qz=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Ag=r("a"),eV=i("datasets.IterableDataset.skip()"),tV=i(" or "),Lg=r("a"),sV=i("datasets.IterableDataset.take()"),aV=i(`
then the order of the shards is kept unchanged.`),nV=m(),_(Kl.$$.fragment),rV=m(),ja=r("div"),_(oh.$$.fragment),oV=m(),ay=r("p"),lV=i(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),iV=m(),_(Zl.$$.fragment),pV=m(),wa=r("div"),_(lh.$$.fragment),cV=m(),ny=r("p"),dV=i(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),mV=m(),_(Xl.$$.fragment),hV=m(),Da=r("div"),_(ih.$$.fragment),fV=m(),ry=r("p"),uV=i(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),gV=m(),_(Ql.$$.fragment),_V=m(),ka=r("div"),_(ph.$$.fragment),bV=m(),oy=r("p"),$V=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),xV=m(),_(ei.$$.fragment),vV=m(),Ea=r("div"),_(ch.$$.fragment),yV=m(),ly=r("p"),jV=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),wV=m(),_(ti.$$.fragment),DV=m(),qa=r("div"),_(dh.$$.fragment),kV=m(),iy=r("p"),EV=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),qV=m(),_(si.$$.fragment),q7=m(),Wn=r("h2"),ai=r("a"),py=r("span"),_(mh.$$.fragment),IV=m(),cy=r("span"),TV=i("Features"),I7=m(),O=r("div"),_(hh.$$.fragment),NV=m(),dy=r("p"),PV=i("A special dictionary that defines the internal structure of a dataset."),FV=m(),fh=r("p"),AV=i("Instantiated with a dictionary of type "),my=r("code"),LV=i("dict[str, FieldType]"),SV=i(`, where keys are the desired column names,
and values are the type of that column.`),OV=m(),Sg=r("p"),hy=r("code"),CV=i("FieldType"),zV=i(" can be one of the following:"),VV=m(),Y=r("ul"),fy=r("li"),Ia=r("p"),UV=i("a "),Og=r("a"),MV=i("datasets.Value"),RV=i(" feature specifies a single typed value, e.g. "),uy=r("code"),BV=i("int64"),HV=i(" or "),gy=r("code"),GV=i("string"),WV=m(),_y=r("li"),uh=r("p"),YV=i("a "),Cg=r("a"),JV=i("datasets.ClassLabel"),KV=i(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),ZV=m(),by=r("li"),gh=r("p"),XV=i("a python "),$y=r("code"),QV=i("dict"),eU=i(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),tU=m(),_h=r("li"),Be=r("p"),sU=i("a python "),xy=r("code"),aU=i("list"),nU=i(" or a "),zg=r("a"),rU=i("datasets.Sequence"),oU=i(` specifies that the field contains a list of objects. The python
`),vy=r("code"),lU=i("list"),iU=i(" or "),Vg=r("a"),pU=i("datasets.Sequence"),cU=i(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),dU=m(),_(ni.$$.fragment),mU=m(),yy=r("li"),He=r("p"),hU=i("a "),Ug=r("a"),fU=i("Array2D"),uU=i(", "),Mg=r("a"),gU=i("Array3D"),_U=i(", "),Rg=r("a"),bU=i("Array4D"),$U=i(" or "),Bg=r("a"),xU=i("Array5D"),vU=i(" feature for multidimensional arrays"),yU=m(),jy=r("li"),bh=r("p"),jU=i("an "),Hg=r("a"),wU=i("Audio"),DU=i(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),kU=m(),wy=r("li"),Gt=r("p"),EU=i("an "),Gg=r("a"),qU=i("Image"),IU=i(" feature to store the absolute path to an image file, an "),Dy=r("code"),TU=i("np.ndarray"),NU=i(" object, a "),ky=r("code"),PU=i("PIL.Image.Image"),FU=i(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),AU=m(),Ey=r("li"),ri=r("p"),Wg=r("a"),LU=i("datasets.Translation"),SU=i(" and "),Yg=r("a"),OU=i("datasets.TranslationVariableLanguages"),CU=i(", the two features specific to Machine Translation"),zU=m(),Ta=r("div"),_($h.$$.fragment),VU=m(),qy=r("p"),UU=i("Make a deep copy of Features."),MU=m(),_(oi.$$.fragment),RU=m(),li=r("div"),_(xh.$$.fragment),BU=m(),Iy=r("p"),HU=i("Decode batch with custom feature decoding."),GU=m(),ii=r("div"),_(vh.$$.fragment),WU=m(),Ty=r("p"),YU=i("Decode column with custom feature decoding."),JU=m(),pi=r("div"),_(yh.$$.fragment),KU=m(),Ny=r("p"),ZU=i("Decode example with custom feature decoding."),XU=m(),ci=r("div"),_(jh.$$.fragment),QU=m(),Py=r("p"),eM=i("Encode batch into a format for Arrow."),tM=m(),di=r("div"),_(wh.$$.fragment),sM=m(),Fy=r("p"),aM=i("Encode example into a format for Arrow."),nM=m(),gt=r("div"),_(Dh.$$.fragment),rM=m(),Ay=r("p"),oM=i(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),lM=m(),Ly=r("p"),iM=i(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),pM=m(),_(mi.$$.fragment),cM=m(),hi=r("div"),_(kh.$$.fragment),dM=m(),Sy=r("p"),mM=i(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),hM=m(),Fe=r("div"),_(Eh.$$.fragment),fM=m(),Oy=r("p"),uM=i("Construct Features from dict."),gM=m(),Cy=r("p"),_M=i(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),bM=m(),Wt=r("p"),$M=i(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Jg=r("a"),xM=i("DatasetInfo"),vM=i(` that was dumped to a JSON object. This acts as an analogue to
`),Kg=r("a"),yM=i("Features.from_arrow_schema()"),jM=i(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Zg=r("a"),wM=i("Value"),DM=i(" automatically performs."),kM=m(),_(fi.$$.fragment),EM=m(),_t=r("div"),_(qh.$$.fragment),qM=m(),zy=r("p"),IM=i("Reorder Features fields to match the field order of other Features."),TM=m(),Vy=r("p"),NM=i(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),PM=m(),_(ui.$$.fragment),T7=m(),Yt=r("div"),_(Ih.$$.fragment),FM=m(),Uy=r("p"),AM=i(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),LM=m(),_(gi.$$.fragment),N7=m(),J=r("div"),_(Th.$$.fragment),SM=m(),My=r("p"),OM=i("Feature type for integer class labels."),CM=m(),Nh=r("p"),zM=i("There are 3 ways to define a "),Ry=r("em"),VM=i("ClassLabel"),UM=i(", which correspond to the 3 arguments:"),MM=m(),Yn=r("ul"),Xg=r("li"),By=r("em"),RM=i("num_classes"),BM=i(": Create 0 to (num_classes-1) labels."),HM=m(),Qg=r("li"),Hy=r("em"),GM=i("names"),WM=i(": List of label strings."),YM=m(),e_=r("li"),Gy=r("em"),JM=i("names_file"),KM=i(": File containing the list of labels."),ZM=m(),_(_i.$$.fragment),XM=m(),Na=r("div"),_(Ph.$$.fragment),QM=m(),Wy=r("p"),eR=i("Conversion integer => class name string."),tR=m(),_(bi.$$.fragment),sR=m(),Pa=r("div"),_(Fh.$$.fragment),aR=m(),Yy=r("p"),nR=i("Conversion class name string => integer."),rR=m(),_($i.$$.fragment),P7=m(),Ge=r("div"),_(Ah.$$.fragment),oR=m(),Jy=r("p"),lR=i("The Value dtypes are as follows:"),iR=m(),Ky=r("p"),pR=i(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),cR=m(),_(xi.$$.fragment),F7=m(),Q=r("div"),_(Lh.$$.fragment),dR=m(),t_=r("p"),Zy=r("code"),mR=i("FeatureConnector"),hR=i(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),fR=m(),Xy=r("p"),uR=i(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),gR=m(),Sh=r("p"),_R=i("Output: A dictionary mapping string language codes to translations as "),Qy=r("code"),bR=i("Text"),$R=i(`
features.`),xR=m(),_(vi.$$.fragment),vR=m(),yi=r("div"),_(Oh.$$.fragment),yR=m(),ej=r("p"),jR=i("Flatten the Translation feature into a dictionary."),A7=m(),ee=r("div"),_(Ch.$$.fragment),wR=m(),s_=r("p"),tj=r("code"),DR=i("FeatureConnector"),kR=i(` for translations with variable languages per example.
Here for compatiblity with tfds.`),ER=m(),sj=r("p"),qR=i(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),IR=m(),aj=r("p"),TR=i(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),NR=m(),_(ji.$$.fragment),PR=m(),wi=r("div"),_(zh.$$.fragment),FR=m(),nj=r("p"),AR=i("Flatten the TranslationVariableLanguages feature into a dictionary."),L7=m(),Jt=r("div"),_(Vh.$$.fragment),LR=m(),rj=r("p"),SR=i("Create a two-dimensional array."),OR=m(),_(Di.$$.fragment),S7=m(),Kt=r("div"),_(Uh.$$.fragment),CR=m(),oj=r("p"),zR=i("Create a three-dimensional array."),VR=m(),_(ki.$$.fragment),O7=m(),Zt=r("div"),_(Mh.$$.fragment),UR=m(),lj=r("p"),MR=i("Create a four-dimensional array."),RR=m(),_(Ei.$$.fragment),C7=m(),Xt=r("div"),_(Rh.$$.fragment),BR=m(),ij=r("p"),HR=i("Create a five-dimensional array."),GR=m(),_(qi.$$.fragment),z7=m(),M=r("div"),_(Bh.$$.fragment),WR=m(),pj=r("p"),YR=i("Audio Feature to extract audio data from an audio file."),JR=m(),cj=r("p"),KR=i("Input: The Audio feature accepts as input:"),ZR=m(),Jn=r("ul"),dj=r("li"),Hh=r("p"),XR=i("A "),mj=r("code"),QR=i("str"),eB=i(": Absolute path to the audio file (i.e. random access is allowed)."),tB=m(),Kn=r("li"),Gh=r("p"),sB=i("A "),hj=r("code"),aB=i("dict"),nB=i(" with the keys:"),rB=m(),Wh=r("ul"),fj=r("li"),oB=i("path: String with relative path of the audio file to the archive file."),lB=m(),uj=r("li"),iB=i("bytes: Bytes content of the audio file."),pB=m(),gj=r("p"),cB=i("This is useful for archived files with sequential access."),dB=m(),Zn=r("li"),Yh=r("p"),mB=i("A "),_j=r("code"),hB=i("dict"),fB=i(" with the keys:"),uB=m(),Xn=r("ul"),bj=r("li"),gB=i("path: String with relative path of the audio file to the archive file."),_B=m(),$j=r("li"),bB=i("array: Array containing the audio sample"),$B=m(),xj=r("li"),xB=i("sampling_rate: Integer corresponding to the samping rate of the audio sample."),vB=m(),vj=r("p"),yB=i("This is useful for archived files with sequential access."),jB=m(),_(Ii.$$.fragment),wB=m(),Fa=r("div"),_(Jh.$$.fragment),DB=m(),yj=r("p"),kB=i(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),EB=m(),Qt=r("ul"),jj=r("li"),qB=i("pa.string() - it must contain the \u201Cpath\u201D data"),IB=m(),wj=r("li"),TB=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),NB=m(),Dj=r("li"),PB=i("pa.struct({\u201Cpath\u201D: pa.string()})"),FB=m(),kj=r("li"),AB=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),LB=m(),Ti=r("div"),_(Kh.$$.fragment),SB=m(),Ej=r("p"),OB=i("Decode example audio file into audio data."),CB=m(),Ni=r("div"),_(Zh.$$.fragment),zB=m(),qj=r("p"),VB=i("Embed audio files into the Arrow array."),UB=m(),Pi=r("div"),_(Xh.$$.fragment),MB=m(),Ij=r("p"),RB=i("Encode example into a format for Arrow."),BB=m(),Fi=r("div"),_(Qh.$$.fragment),HB=m(),Tj=r("p"),GB=i("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),V7=m(),R=r("div"),_(ef.$$.fragment),WB=m(),Nj=r("p"),YB=i("Image feature to read image data from an image file."),JB=m(),Pj=r("p"),KB=i("Input: The Image feature accepts as input:"),ZB=m(),es=r("ul"),Fj=r("li"),tf=r("p"),XB=i("A "),Aj=r("code"),QB=i("str"),eH=i(": Absolute path to the image file (i.e. random access is allowed)."),tH=m(),Qn=r("li"),sf=r("p"),sH=i("A "),Lj=r("code"),aH=i("dict"),nH=i(" with the keys:"),rH=m(),af=r("ul"),Sj=r("li"),oH=i("path: String with relative path of the image file to the archive file."),lH=m(),Oj=r("li"),iH=i("bytes: Bytes of the image file."),pH=m(),Cj=r("p"),cH=i("This is useful for archived files with sequential access."),dH=m(),zj=r("li"),nf=r("p"),mH=i("An "),Vj=r("code"),hH=i("np.ndarray"),fH=i(": NumPy array representing an image."),uH=m(),Uj=r("li"),rf=r("p"),gH=i("A "),Mj=r("code"),_H=i("PIL.Image.Image"),bH=i(": PIL image object."),$H=m(),_(Ai.$$.fragment),xH=m(),Aa=r("div"),_(of.$$.fragment),vH=m(),Rj=r("p"),yH=i(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),jH=m(),We=r("ul"),Bj=r("li"),wH=i("pa.string() - it must contain the \u201Cpath\u201D data"),DH=m(),Hj=r("li"),kH=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),EH=m(),Gj=r("li"),qH=i("pa.struct({\u201Cpath\u201D: pa.string()})"),IH=m(),Wj=r("li"),TH=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),NH=m(),Yj=r("li"),PH=i("pa.list(*) - it must contain the image array data"),FH=m(),Li=r("div"),_(lf.$$.fragment),AH=m(),Jj=r("p"),LH=i("Decode example image file into image data."),SH=m(),Si=r("div"),_(pf.$$.fragment),OH=m(),Kj=r("p"),CH=i("Embed image files into the Arrow array."),zH=m(),Oi=r("div"),_(cf.$$.fragment),VH=m(),Zj=r("p"),UH=i("Encode example into a format for Arrow."),MH=m(),Ci=r("div"),_(df.$$.fragment),RH=m(),Xj=r("p"),BH=i("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),U7=m(),er=r("h2"),zi=r("a"),Qj=r("span"),_(mf.$$.fragment),HH=m(),e0=r("span"),GH=i("MetricInfo"),M7=m(),te=r("div"),_(hf.$$.fragment),WH=m(),t0=r("p"),YH=i("Information about a metric."),JH=m(),a_=r("p"),s0=r("code"),KH=i("MetricInfo"),ZH=i(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),XH=m(),a0=r("p"),QH=i("Note: Not all fields are known on construction and may be updated later."),eG=m(),La=r("div"),_(ff.$$.fragment),tG=m(),uf=r("p"),sG=i("Create MetricInfo from the JSON file in "),n0=r("code"),aG=i("metric_info_dir"),nG=i("."),rG=m(),_(Vi.$$.fragment),oG=m(),Sa=r("div"),_(gf.$$.fragment),lG=m(),ts=r("p"),iG=i("Write "),r0=r("code"),pG=i("MetricInfo"),cG=i(" as JSON to "),o0=r("code"),dG=i("metric_info_dir"),mG=i(`.
Also save the license separately in LICENCE.
If `),l0=r("code"),hG=i("pretty_print"),fG=i(" is True, the JSON will be pretty-printed with the indent level of 4."),uG=m(),_(Ui.$$.fragment),R7=m(),tr=r("h2"),Mi=r("a"),i0=r("span"),_(_f.$$.fragment),gG=m(),p0=r("span"),_G=i("Metric"),B7=m(),Oa=r("p"),bG=i("The base class "),c0=r("code"),$G=i("Metric"),xG=i(" implements a Metric backed by one or several "),n_=r("a"),vG=i("Dataset"),yG=i("."),H7=m(),se=r("div"),_(bf.$$.fragment),jG=m(),d0=r("p"),wG=i("A Metric is the base class and common API for all metrics."),DG=m(),Ca=r("div"),_($f.$$.fragment),kG=m(),m0=r("p"),EG=i("Add one prediction and reference for the metric\u2019s stack."),qG=m(),_(Ri.$$.fragment),IG=m(),za=r("div"),_(xf.$$.fragment),TG=m(),h0=r("p"),NG=i("Add a batch of predictions and references for the metric\u2019s stack."),PG=m(),_(Bi.$$.fragment),FG=m(),bt=r("div"),_(vf.$$.fragment),AG=m(),f0=r("p"),LG=i("Compute the metrics."),SG=m(),u0=r("p"),OG=i("Usage of positional arguments is not allowed to prevent mistakes."),CG=m(),_(Hi.$$.fragment),zG=m(),Gi=r("div"),_(yf.$$.fragment),VG=m(),g0=r("p"),UG=i("Downloads and prepares dataset for reading."),G7=m(),sr=r("h2"),Wi=r("a"),_0=r("span"),_(jf.$$.fragment),MG=m(),b0=r("span"),RG=i("Filesystems"),W7=m(),C=r("div"),_(wf.$$.fragment),BG=m(),Yi=r("p"),$0=r("code"),HG=i("datasets.filesystems.S3FileSystem"),GG=i(" is a subclass of "),Df=r("a"),x0=r("code"),WG=i("s3fs.S3FileSystem"),YG=i("."),JG=m(),ss=r("p"),KG=i("Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),v0=r("code"),ZG=i("key="),XG=i(", "),y0=r("code"),QG=i("secret="),eW=i(") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),j0=r("code"),tW=i("anon=True"),sW=i("."),aW=m(),w0=r("p"),nW=i("Examples:"),rW=m(),D0=r("p"),oW=i("Listing files from public S3 bucket."),lW=m(),_(Ji.$$.fragment),iW=m(),ar=r("p"),pW=i("Listing files from private S3 bucket using "),k0=r("code"),cW=i("aws_access_key_id"),dW=i(" and "),E0=r("code"),mW=i("aws_secret_access_key"),hW=i("."),fW=m(),_(Ki.$$.fragment),uW=m(),as=r("p"),gW=i("Using "),q0=r("code"),_W=i("S3Filesystem"),bW=i(" with "),I0=r("code"),$W=i("botocore.session.Session"),xW=i(" and custom "),T0=r("code"),vW=i("aws_profile"),yW=i("."),jW=m(),_(Zi.$$.fragment),wW=m(),nr=r("p"),DW=i("Loading dataset from S3 using "),N0=r("code"),kW=i("S3Filesystem"),EW=i(" and "),r_=r("a"),qW=i("load_from_disk()"),IW=i("."),TW=m(),_(Xi.$$.fragment),NW=m(),rr=r("p"),PW=i("Saving dataset to S3 using "),P0=r("code"),FW=i("S3Filesystem"),AW=i(" and "),o_=r("a"),LW=i("Dataset.save_to_disk()"),SW=i("."),OW=m(),_(Qi.$$.fragment),Y7=m(),or=r("div"),_(kf.$$.fragment),CW=m(),lr=r("p"),zW=i("preprocesses "),F0=r("em"),VW=i("dataset_path"),UW=i(" and removes remote filesystem (e.g. removing "),A0=r("code"),MW=i("s3://"),RW=i(")"),J7=m(),ir=r("div"),_(Ef.$$.fragment),BW=m(),L0=r("p"),HW=i("Validates if filesystem has remote protocol."),K7=m(),pr=r("h2"),ep=r("a"),S0=r("span"),_(qf.$$.fragment),GW=m(),O0=r("span"),WW=i("Fingerprint"),Z7=m(),cr=r("div"),_(If.$$.fragment),YW=m(),C0=r("p"),JW=i("Hasher that accepts python objects as inputs."),this.h()},l(a){const j=Lse('[data-svelte="svelte-1phssyn"]',document.head);c=o(j,"META",{name:!0,content:!0}),j.forEach(s),g=h(a),f=o(a,"H1",{class:!0});var Tf=l(f);n=o(Tf,"A",{id:!0,class:!0,href:!0});var z0=l(n);u=o(z0,"SPAN",{});var V0=l(u);b(t.$$.fragment,V0),V0.forEach(s),z0.forEach(s),d=h(Tf),cn=o(Tf,"SPAN",{});var U0=l(cn);hs=p(U0,"Main classes"),U0.forEach(s),Tf.forEach(s),Tr=h(a),Se=o(a,"H2",{class:!0});var Nf=l(Se);_e=o(Nf,"A",{id:!0,class:!0,href:!0});var M0=l(_e);ae=o(M0,"SPAN",{});var R0=l(ae);b(fs.$$.fragment,R0),R0.forEach(s),M0.forEach(s),Yf=h(Nf),Nr=o(Nf,"SPAN",{});var B0=l(Nr);PD=p(B0,"DatasetInfo"),B0.forEach(s),Nf.forEach(s),p7=h(a),Z=o(a,"DIV",{class:!0});var ge=l(Z);b(Pp.$$.fragment,ge),FD=h(ge),i$=o(ge,"P",{});var H0=l(i$);AD=p(H0,"Information about a dataset."),H0.forEach(s),LD=h(ge),Jf=o(ge,"P",{});var l_=l(Jf);p$=o(l_,"EM",{});var G0=l(p$);SD=p(G0,"DatasetInfo"),G0.forEach(s),OD=p(l_,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),l_.forEach(s),CD=h(ge),c$=o(ge,"P",{});var W0=l(c$);zD=p(W0,"Note: Not all fields are known on construction and may be updated later."),W0.forEach(s),VD=h(ge),be=o(ge,"DIV",{class:!0});var Ye=l(be);b(Fp.$$.fragment,Ye),UD=h(Ye),Ap=o(Ye,"P",{});var Pf=l(Ap);MD=p(Pf,"Create DatasetInfo from the JSON file in "),d$=o(Pf,"CODE",{});var Y0=l(d$);RD=p(Y0,"dataset_info_dir"),Y0.forEach(s),BD=p(Pf,"."),Pf.forEach(s),HD=h(Ye),m$=o(Ye,"P",{});var J0=l(m$);GD=p(J0,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),J0.forEach(s),WD=h(Ye),h$=o(Ye,"P",{});var K0=l(h$);YD=p(K0,"This will overwrite all previous metadata."),K0.forEach(s),JD=h(Ye),b(Pr.$$.fragment,Ye),Ye.forEach(s),KD=h(ge),us=o(ge,"DIV",{class:!0});var dr=l(us);b(Lp.$$.fragment,dr),ZD=h(dr),dn=o(dr,"P",{});var mr=l(dn);XD=p(mr,"Write "),f$=o(mr,"EM",{});var Z0=l(f$);QD=p(Z0,"DatasetInfo"),Z0.forEach(s),e3=p(mr," and license (if present) as JSON files to "),u$=o(mr,"EM",{});var X0=l(u$);t3=p(X0,"dataset_info_dir"),X0.forEach(s),s3=p(mr,"."),mr.forEach(s),a3=h(dr),b(Fr.$$.fragment,dr),dr.forEach(s),ge.forEach(s),c7=h(a),mn=o(a,"H2",{class:!0});var Ff=l(mn);Ar=o(Ff,"A",{id:!0,class:!0,href:!0});var Q0=l(Ar);g$=o(Q0,"SPAN",{});var ew=l(g$);b(Sp.$$.fragment,ew),ew.forEach(s),Q0.forEach(s),n3=h(Ff),_$=o(Ff,"SPAN",{});var tw=l(_$);r3=p(tw,"Dataset"),tw.forEach(s),Ff.forEach(s),d7=h(a),Lr=o(a,"P",{});var Af=l(Lr);o3=p(Af,"The base class "),Kf=o(Af,"A",{href:!0});var sw=l(Kf);l3=p(sw,"Dataset"),sw.forEach(s),i3=p(Af," implements a Dataset backed by an Apache Arrow table."),Af.forEach(s),m7=h(a),q=o(a,"DIV",{class:!0});var I=l(q);b(Op.$$.fragment,I),p3=h(I),b$=o(I,"P",{});var aw=l(b$);c3=p(aw,"A Dataset backed by an Arrow table."),aw.forEach(s),d3=h(I),et=o(I,"DIV",{class:!0});var ns=l(et);b(Cp.$$.fragment,ns),m3=h(ns),$$=o(ns,"P",{});var nw=l($$);h3=p(nw,"Add column to Dataset."),nw.forEach(s),f3=h(ns),x$=o(ns,"P",{});var rw=l(x$);v$=o(rw,"EM",{});var ow=l(v$);u3=p(ow,"New in version 1.7."),ow.forEach(s),rw.forEach(s),g3=h(ns),b(Sr.$$.fragment,ns),ns.forEach(s),_3=h(I),tt=o(I,"DIV",{class:!0});var rs=l(tt);b(zp.$$.fragment,rs),b3=h(rs),y$=o(rs,"P",{});var lw=l(y$);$3=p(lw,"Add item to Dataset."),lw.forEach(s),x3=h(rs),j$=o(rs,"P",{});var iw=l(j$);w$=o(iw,"EM",{});var pw=l(w$);v3=p(pw,"New in version 1.7."),pw.forEach(s),iw.forEach(s),y3=h(rs),b(Or.$$.fragment,rs),rs.forEach(s),j3=h(I),Cr=o(I,"DIV",{class:!0});var Lf=l(Cr);b(Vp.$$.fragment,Lf),w3=h(Lf),D$=o(Lf,"P",{});var cw=l(D$);D3=p(cw,"Instantiate a Dataset backed by an Arrow table at filename."),cw.forEach(s),Lf.forEach(s),k3=h(I),zr=o(I,"DIV",{class:!0});var Sf=l(zr);b(Up.$$.fragment,Sf),E3=h(Sf),k$=o(Sf,"P",{});var dw=l(k$);q3=p(dw,"Instantiate a Dataset backed by an Arrow buffer."),dw.forEach(s),Sf.forEach(s),I3=h(I),$e=o(I,"DIV",{class:!0});var Je=l($e);b(Mp.$$.fragment,Je),T3=h(Je),Pt=o(Je,"P",{});var os=l(Pt);N3=p(os,"Convert "),E$=o(os,"CODE",{});var mw=l(E$);P3=p(mw,"pandas.DataFrame"),mw.forEach(s),F3=p(os," to a "),q$=o(os,"CODE",{});var hw=l(q$);A3=p(hw,"pyarrow.Table"),hw.forEach(s),L3=p(os," to create a "),Zf=o(os,"A",{href:!0});var fw=l(Zf);S3=p(fw,"Dataset"),fw.forEach(s),O3=p(os,"."),os.forEach(s),C3=h(Je),Rp=o(Je,"P",{});var Of=l(Rp);z3=p(Of,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),I$=o(Of,"EM",{});var uw=l(I$);V3=p(uw,"object"),uw.forEach(s),U3=p(Of,", we need to guess the datatype by looking at the Python objects in this Series."),Of.forEach(s),M3=h(Je),Bp=o(Je,"P",{});var Cf=l(Bp);R3=p(Cf,"Be aware that Series of the "),T$=o(Cf,"EM",{});var gw=l(T$);B3=p(gw,"object"),gw.forEach(s),H3=p(Cf,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Cf.forEach(s),G3=h(Je),b(Vr.$$.fragment,Je),Je.forEach(s),W3=h(I),Ur=o(I,"DIV",{class:!0});var zf=l(Ur);b(Hp.$$.fragment,zf),Y3=h(zf),Ft=o(zf,"P",{});var ls=l(Ft);J3=p(ls,"Convert "),N$=o(ls,"CODE",{});var _w=l(N$);K3=p(_w,"dict"),_w.forEach(s),Z3=p(ls," to a "),P$=o(ls,"CODE",{});var bw=l(P$);X3=p(bw,"pyarrow.Table"),bw.forEach(s),Q3=p(ls," to create a "),Xf=o(ls,"A",{href:!0});var $w=l(Xf);ek=p($w,"Dataset"),$w.forEach(s),tk=p(ls,"."),ls.forEach(s),zf.forEach(s),sk=h(I),gs=o(I,"DIV",{class:!0});var hr=l(gs);b(Gp.$$.fragment,hr),ak=h(hr),F$=o(hr,"P",{});var xw=l(F$);nk=p(xw,"The Apache Arrow table backing the dataset."),xw.forEach(s),rk=h(hr),b(Mr.$$.fragment,hr),hr.forEach(s),ok=h(I),_s=o(I,"DIV",{class:!0});var fr=l(_s);b(Wp.$$.fragment,fr),lk=h(fr),A$=o(fr,"P",{});var vw=l(A$);ik=p(vw,"The cache files containing the Apache Arrow table backing the dataset."),vw.forEach(s),pk=h(fr),b(Rr.$$.fragment,fr),fr.forEach(s),ck=h(I),bs=o(I,"DIV",{class:!0});var ur=l(bs);b(Yp.$$.fragment,ur),dk=h(ur),L$=o(ur,"P",{});var yw=l(L$);mk=p(yw,"Number of columns in the dataset."),yw.forEach(s),hk=h(ur),b(Br.$$.fragment,ur),ur.forEach(s),fk=h(I),$s=o(I,"DIV",{class:!0});var gr=l($s);b(Jp.$$.fragment,gr),uk=h(gr),Kp=o(gr,"P",{});var Vf=l(Kp);gk=p(Vf,"Number of rows in the dataset (same as "),Hr=o(Vf,"A",{href:!0});var Uf=l(Hr);_k=p(Uf,"Dataset."),S$=o(Uf,"STRONG",{});var jw=l(S$);bk=p(jw,"len"),jw.forEach(s),$k=p(Uf,"()"),Uf.forEach(s),xk=p(Vf,")."),Vf.forEach(s),vk=h(gr),b(Gr.$$.fragment,gr),gr.forEach(s),yk=h(I),xs=o(I,"DIV",{class:!0});var _r=l(xs);b(Zp.$$.fragment,_r),jk=h(_r),O$=o(_r,"P",{});var ww=l(O$);wk=p(ww,"Names of the columns in the dataset."),ww.forEach(s),Dk=h(_r),b(Wr.$$.fragment,_r),_r.forEach(s),kk=h(I),vs=o(I,"DIV",{class:!0});var br=l(vs);b(Xp.$$.fragment,br),Ek=h(br),C$=o(br,"P",{});var Dw=l(C$);qk=p(Dw,"Shape of the dataset (number of columns, number of rows)."),Dw.forEach(s),Ik=h(br),b(Yr.$$.fragment,br),br.forEach(s),Tk=h(I),st=o(I,"DIV",{class:!0});var is=l(st);b(Qp.$$.fragment,is),Nk=h(is),z$=o(is,"P",{});var kw=l(z$);Pk=p(kw,"Return a list of the unique elements in a column."),kw.forEach(s),Fk=h(is),V$=o(is,"P",{});var Ew=l(V$);Ak=p(Ew,"This is implemented in the low-level backend and as such, very fast."),Ew.forEach(s),Lk=h(is),b(Jr.$$.fragment,is),is.forEach(s),Sk=h(I),ys=o(I,"DIV",{class:!0});var $r=l(ys);b(ec.$$.fragment,$r),Ok=h($r),U$=o($r,"P",{});var qw=l(U$);Ck=p(qw,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),qw.forEach(s),zk=h($r),b(Kr.$$.fragment,$r),$r.forEach(s),Vk=h(I),js=o(I,"DIV",{class:!0});var xr=l(js);b(tc.$$.fragment,xr),Uk=h(xr),M$=o(xr,"P",{});var Iw=l(M$);Mk=p(Iw,"Cast the dataset to a new set of features."),Iw.forEach(s),Rk=h(xr),b(Zr.$$.fragment,xr),xr.forEach(s),Bk=h(I),ws=o(I,"DIV",{class:!0});var vr=l(ws);b(sc.$$.fragment,vr),Hk=h(vr),R$=o(vr,"P",{});var Tw=l(R$);Gk=p(Tw,"Cast column to feature for decoding."),Tw.forEach(s),Wk=h(vr),b(Xr.$$.fragment,vr),vr.forEach(s),Yk=h(I),at=o(I,"DIV",{class:!0});var ps=l(at);b(ac.$$.fragment,ps),Jk=h(ps),B$=o(ps,"P",{});var Nw=l(B$);Kk=p(Nw,"Remove one or several column(s) in the dataset and the features associated to them."),Nw.forEach(s),Zk=h(ps),hn=o(ps,"P",{});var yr=l(hn);Xk=p(yr,"You can also remove a column using "),Qf=o(yr,"A",{href:!0});var Pw=l(Qf);Qk=p(Pw,"Dataset.map()"),Pw.forEach(s),e5=p(yr," with "),H$=o(yr,"EM",{});var Fw=l(H$);t5=p(Fw,"remove_columns"),Fw.forEach(s),s5=p(yr,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),yr.forEach(s),a5=h(ps),b(Qr.$$.fragment,ps),ps.forEach(s),n5=h(I),Ds=o(I,"DIV",{class:!0});var jr=l(Ds);b(nc.$$.fragment,jr),r5=h(jr),G$=o(jr,"P",{});var Aw=l(G$);o5=p(Aw,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),Aw.forEach(s),l5=h(jr),b(eo.$$.fragment,jr),jr.forEach(s),i5=h(I),ks=o(I,"DIV",{class:!0});var wr=l(ks);b(rc.$$.fragment,wr),p5=h(wr),W$=o(wr,"P",{});var Lw=l(W$);c5=p(Lw,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),Lw.forEach(s),d5=h(wr),b(to.$$.fragment,wr),wr.forEach(s),m5=h(I),Es=o(I,"DIV",{class:!0});var Dr=l(Es);b(oc.$$.fragment,Dr),h5=h(Dr),lc=o(Dr,"P",{});var Mf=l(lc);f5=p(Mf,"Casts the given column as :obj:"),Y$=o(Mf,"CODE",{});var Sw=l(Y$);u5=p(Sw,"datasets.features.ClassLabel"),Sw.forEach(s),g5=p(Mf," and updates the table."),Mf.forEach(s),_5=h(Dr),b(so.$$.fragment,Dr),Dr.forEach(s),b5=h(I),qs=o(I,"DIV",{class:!0});var kr=l(qs);b(ic.$$.fragment,kr),$5=h(kr),J$=o(kr,"P",{});var Ow=l(J$);x5=p(Ow,"Number of rows in the dataset."),Ow.forEach(s),v5=h(kr),b(ao.$$.fragment,kr),kr.forEach(s),y5=h(I),Is=o(I,"DIV",{class:!0});var Er=l(Is);b(pc.$$.fragment,Er),j5=h(Er),K$=o(Er,"P",{});var Cw=l(K$);w5=p(Cw,"Iterate through the examples."),Cw.forEach(s),D5=h(Er),cc=o(Er,"P",{});var Rf=l(cc);k5=p(Rf,"If a formatting is set with "),eu=o(Rf,"A",{href:!0});var zw=l(eu);E5=p(zw,"Dataset.set_format()"),zw.forEach(s),q5=p(Rf,` rows will be returned with the
selected format.`),Rf.forEach(s),Er.forEach(s),I5=h(I),no=o(I,"DIV",{class:!0});var Bf=l(no);b(dc.$$.fragment,Bf),T5=h(Bf),fn=o(Bf,"P",{});var qr=l(fn);N5=p(qr,"To be used in a "),Z$=o(qr,"CODE",{});var Vw=l(Z$);P5=p(Vw,"with"),Vw.forEach(s),F5=p(qr," statement. Set "),X$=o(qr,"CODE",{});var Uw=l(X$);A5=p(Uw,"__getitem__"),Uw.forEach(s),L5=p(qr," return format (type and columns)."),qr.forEach(s),Bf.forEach(s),S5=h(I),xe=o(I,"DIV",{class:!0});var Ke=l(xe);b(mc.$$.fragment,Ke),O5=h(Ke),Oe=o(Ke,"P",{});var Ze=l(Oe);C5=p(Ze,"Set "),Q$=o(Ze,"STRONG",{});var Mw=l(Q$);z5=p(Mw,"getitem"),Mw.forEach(s),V5=p(Ze,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),e2=o(Ze,"CODE",{});var Rw=l(e2);U5=p(Rw,"type"),Rw.forEach(s),M5=p(Ze," (for example \u201Cnumpy\u201D) is used to format batches when using "),t2=o(Ze,"STRONG",{});var Bw=l(t2);R5=p(Bw,"getitem"),Bw.forEach(s),B5=p(Ze,`.
It\u2019s also possible to use custom transforms for formatting using `),tu=o(Ze,"A",{href:!0});var Hw=l(tu);H5=p(Hw,"datasets.Dataset.set_transform()"),Hw.forEach(s),G5=p(Ze,"."),Ze.forEach(s),W5=h(Ke),Ce=o(Ke,"P",{});var Xe=l(Ce);Y5=p(Xe,"It is possible to call "),s2=o(Xe,"CODE",{});var Gw=l(s2);J5=p(Gw,"map"),Gw.forEach(s),K5=p(Xe," after calling "),a2=o(Xe,"CODE",{});var Ww=l(a2);Z5=p(Ww,"set_format"),Ww.forEach(s),X5=p(Xe,". Since "),n2=o(Xe,"CODE",{});var Yw=l(n2);Q5=p(Yw,"map"),Yw.forEach(s),e6=p(Xe,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),r2=o(Xe,"CODE",{});var Jw=l(r2);t6=p(Jw,"map"),Jw.forEach(s),s6=p(Xe," on a dataset to add a new column, then this column will be formatted:"),Xe.forEach(s),a6=h(Ke),o2=o(Ke,"P",{});var Kw=l(o2);n6=p(Kw,"new formatted columns = (all columns - previously unformatted columns)"),Kw.forEach(s),r6=h(Ke),b(ro.$$.fragment,Ke),Ke.forEach(s),o6=h(I),Ts=o(I,"DIV",{class:!0});var Ir=l(Ts);b(hc.$$.fragment,Ir),l6=h(Ir),nt=o(Ir,"P",{});var $t=l(nt);i6=p($t,"Set "),l2=o($t,"STRONG",{});var Zw=l(l2);p6=p(Zw,"getitem"),Zw.forEach(s),c6=p($t," return format using this transform. The transform is applied on-the-fly on batches when "),i2=o($t,"STRONG",{});var Xw=l(i2);d6=p(Xw,"getitem"),Xw.forEach(s),m6=p($t,` is called.
As `),su=o($t,"A",{href:!0});var Qw=l(su);h6=p(Qw,"datasets.Dataset.set_format()"),Qw.forEach(s),f6=p($t,", this can be reset using "),au=o($t,"A",{href:!0});var e7=l(au);u6=p(e7,"datasets.Dataset.reset_format()"),e7.forEach(s),$t.forEach(s),g6=h(Ir),b(oo.$$.fragment,Ir),Ir.forEach(s),_6=h(I),rt=o(I,"DIV",{class:!0});var cs=l(rt);b(fc.$$.fragment,cs),b6=h(cs),uc=o(cs,"P",{});var Hf=l(uc);$6=p(Hf,"Reset "),p2=o(Hf,"STRONG",{});var t7=l(p2);x6=p(t7,"getitem"),t7.forEach(s),v6=p(Hf," return format to python objects and all columns."),Hf.forEach(s),y6=h(cs),nu=o(cs,"P",{});var i_=l(nu);j6=p(i_,"Same as "),c2=o(i_,"CODE",{});var s7=l(c2);w6=p(s7,"self.set_format()"),s7.forEach(s),i_.forEach(s),D6=h(cs),b(lo.$$.fragment,cs),cs.forEach(s),k6=h(I),ve=o(I,"DIV",{class:!0});var Qe=l(ve);b(gc.$$.fragment,Qe),E6=h(Qe),At=o(Qe,"P",{});var ds=l(At);q6=p(ds,"Set "),d2=o(ds,"STRONG",{});var a7=l(d2);I6=p(a7,"getitem"),a7.forEach(s),T6=p(ds,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),m2=o(ds,"CODE",{});var n7=l(m2);N6=p(n7,"type"),n7.forEach(s),P6=p(ds," (for example \u201Cnumpy\u201D) is used to format batches when using "),h2=o(ds,"STRONG",{});var r7=l(h2);F6=p(r7,"getitem"),r7.forEach(s),A6=p(ds,"."),ds.forEach(s),L6=h(Qe),_c=o(Qe,"P",{});var Gf=l(_c);S6=p(Gf,"It\u2019s also possible to use custom transforms for formatting using "),ru=o(Gf,"A",{href:!0});var o7=l(ru);O6=p(o7,"datasets.Dataset.with_transform()"),o7.forEach(s),C6=p(Gf,"."),Gf.forEach(s),z6=h(Qe),un=o(Qe,"P",{});var p_=l(un);V6=p(p_,"Contrary to "),ou=o(p_,"A",{href:!0});var cY=l(ou);U6=p(cY,"datasets.Dataset.set_format()"),cY.forEach(s),M6=p(p_,", "),f2=o(p_,"CODE",{});var dY=l(f2);R6=p(dY,"with_format"),dY.forEach(s),B6=p(p_," returns a new Dataset object."),p_.forEach(s),H6=h(Qe),b(io.$$.fragment,Qe),Qe.forEach(s),G6=h(I),ye=o(I,"DIV",{class:!0});var Va=l(ye);b(bc.$$.fragment,Va),W6=h(Va),gn=o(Va,"P",{});var c_=l(gn);Y6=p(c_,"Set "),u2=o(c_,"STRONG",{});var mY=l(u2);J6=p(mY,"getitem"),mY.forEach(s),K6=p(c_," return format using this transform. The transform is applied on-the-fly on batches when "),g2=o(c_,"STRONG",{});var hY=l(g2);Z6=p(hY,"getitem"),hY.forEach(s),X6=p(c_," is called."),c_.forEach(s),Q6=h(Va),_n=o(Va,"P",{});var d_=l(_n);eE=p(d_,"As "),lu=o(d_,"A",{href:!0});var fY=l(lu);tE=p(fY,"datasets.Dataset.set_format()"),fY.forEach(s),sE=p(d_,", this can be reset using "),iu=o(d_,"A",{href:!0});var uY=l(iu);aE=p(uY,"datasets.Dataset.reset_format()"),uY.forEach(s),nE=p(d_,"."),d_.forEach(s),rE=h(Va),bn=o(Va,"P",{});var m_=l(bn);oE=p(m_,"Contrary to "),pu=o(m_,"A",{href:!0});var gY=l(pu);lE=p(gY,"datasets.Dataset.set_transform()"),gY.forEach(s),iE=p(m_,", "),_2=o(m_,"CODE",{});var _Y=l(_2);pE=p(_Y,"with_transform"),_Y.forEach(s),cE=p(m_," returns a new Dataset object."),m_.forEach(s),dE=h(Va),b(po.$$.fragment,Va),Va.forEach(s),mE=h(I),co=o(I,"DIV",{class:!0});var Q7=l(co);b($c.$$.fragment,Q7),hE=h(Q7),b2=o(Q7,"P",{});var bY=l(b2);fE=p(bY,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),bY.forEach(s),Q7.forEach(s),uE=h(I),ot=o(I,"DIV",{class:!0});var tp=l(ot);b(xc.$$.fragment,tp),gE=h(tp),$2=o(tp,"P",{});var $Y=l($2);_E=p($Y,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),$Y.forEach(s),bE=h(tp),x2=o(tp,"P",{});var xY=l(x2);$E=p(xY,"Be careful when running this command that no other process is currently using other cache files."),xY.forEach(s),xE=h(tp),b(mo.$$.fragment,tp),tp.forEach(s),vE=h(I),je=o(I,"DIV",{class:!0});var Ua=l(je);b(vc.$$.fragment,Ua),yE=h(Ua),v2=o(Ua,"P",{});var vY=l(v2);jE=p(vY,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),vY.forEach(s),wE=h(Ua),yc=o(Ua,"P",{});var e4=l(yc);DE=p(e4,"You can specify whether the function should be batched or not with the "),y2=o(e4,"CODE",{});var yY=l(y2);kE=p(yY,"batched"),yY.forEach(s),EE=p(e4," parameter:"),e4.forEach(s),qE=h(Ua),$n=o(Ua,"UL",{});var h_=l($n);j2=o(h_,"LI",{});var jY=l(j2);IE=p(jY,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),jY.forEach(s),TE=h(h_),w2=o(h_,"LI",{});var wY=l(w2);NE=p(wY,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),wY.forEach(s),PE=h(h_),ce=o(h_,"LI",{});var xt=l(ce);FE=p(xt,"If batched is True and batch_size is "),D2=o(xt,"CODE",{});var DY=l(D2);AE=p(DY,"n"),DY.forEach(s),LE=p(xt," > 1, then the function takes a batch of "),k2=o(xt,"CODE",{});var kY=l(k2);SE=p(kY,"n"),kY.forEach(s),OE=p(xt," examples as input and can return a batch with "),E2=o(xt,"CODE",{});var EY=l(E2);CE=p(EY,"n"),EY.forEach(s),zE=p(xt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),q2=o(xt,"CODE",{});var qY=l(q2);VE=p(qY,"n"),qY.forEach(s),UE=p(xt,` examples.
A batch is a dictionary, e.g. a batch of `),I2=o(xt,"CODE",{});var IY=l(I2);ME=p(IY,"n"),IY.forEach(s),RE=p(xt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),xt.forEach(s),h_.forEach(s),BE=h(Ua),b(ho.$$.fragment,Ua),Ua.forEach(s),HE=h(I),Ns=o(I,"DIV",{class:!0});var f_=l(Ns);b(jc.$$.fragment,f_),GE=h(f_),T2=o(f_,"P",{});var TY=l(T2);WE=p(TY,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),TY.forEach(s),YE=h(f_),b(fo.$$.fragment,f_),f_.forEach(s),JE=h(I),Ps=o(I,"DIV",{class:!0});var u_=l(Ps);b(wc.$$.fragment,u_),KE=h(u_),N2=o(u_,"P",{});var NY=l(N2);ZE=p(NY,"Create a new dataset with rows selected following the list/array of indices."),NY.forEach(s),XE=h(u_),b(uo.$$.fragment,u_),u_.forEach(s),QE=h(I),lt=o(I,"DIV",{class:!0});var sp=l(lt);b(Dc.$$.fragment,sp),e8=h(sp),P2=o(sp,"P",{});var PY=l(P2);t8=p(PY,"Create a new dataset sorted according to a column."),PY.forEach(s),s8=h(sp),F2=o(sp,"P",{});var FY=l(F2);a8=p(FY,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),FY.forEach(s),n8=h(sp),b(go.$$.fragment,sp),sp.forEach(s),r8=h(I),it=o(I,"DIV",{class:!0});var ap=l(it);b(kc.$$.fragment,ap),o8=h(ap),A2=o(ap,"P",{});var AY=l(A2);l8=p(AY,"Create a new Dataset where the rows are shuffled."),AY.forEach(s),i8=h(ap),L2=o(ap,"P",{});var LY=l(L2);p8=p(LY,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),LY.forEach(s),c8=h(ap),b(_o.$$.fragment,ap),ap.forEach(s),d8=h(I),pt=o(I,"DIV",{class:!0});var np=l(pt);b(Ec.$$.fragment,np),m8=h(np),W=o(np,"P",{});var ie=l(W);h8=p(ie,"Return a dictionary ("),S2=o(ie,"CODE",{});var SY=l(S2);f8=p(SY,"datasets.DatasetDict"),SY.forEach(s),u8=p(ie,") with two random train and test subsets ("),O2=o(ie,"EM",{});var OY=l(O2);g8=p(OY,"train"),OY.forEach(s),_8=p(ie," and "),C2=o(ie,"EM",{});var CY=l(C2);b8=p(CY,"test"),CY.forEach(s),$8=h(ie),z2=o(ie,"CODE",{});var zY=l(z2);x8=p(zY,"Dataset"),zY.forEach(s),v8=p(ie,` splits).
Splits are created from the dataset according to `),V2=o(ie,"EM",{});var VY=l(V2);y8=p(VY,"test_size"),VY.forEach(s),j8=p(ie,", "),U2=o(ie,"EM",{});var UY=l(U2);w8=p(UY,"train_size"),UY.forEach(s),D8=p(ie," and "),M2=o(ie,"EM",{});var MY=l(M2);k8=p(MY,"shuffle"),MY.forEach(s),E8=p(ie,"."),ie.forEach(s),q8=h(np),qc=o(np,"P",{});var t4=l(qc);I8=p(t4,"This method is similar to scikit-learn "),R2=o(t4,"EM",{});var RY=l(R2);T8=p(RY,"train_test_split"),RY.forEach(s),N8=p(t4," with the omission of the stratified options."),t4.forEach(s),P8=h(np),b(bo.$$.fragment,np),np.forEach(s),F8=h(I),ne=o(I,"DIV",{class:!0});var vt=l(ne);b(Ic.$$.fragment,vt),A8=h(vt),xn=o(vt,"P",{});var g_=l(xn);L8=p(g_,"Return the "),B2=o(g_,"EM",{});var BY=l(B2);S8=p(BY,"index"),BY.forEach(s),O8=p(g_,"-nth shard from dataset split into "),H2=o(g_,"EM",{});var HY=l(H2);C8=p(HY,"num_shards"),HY.forEach(s),z8=p(g_," pieces."),g_.forEach(s),V8=h(vt),G2=o(vt,"P",{});var GY=l(G2);U8=p(GY,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),GY.forEach(s),M8=h(vt),Tc=o(vt,"P",{});var s4=l(Tc);R8=p(s4,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),W2=o(s4,"EM",{});var WY=l(W2);B8=p(WY,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),WY.forEach(s),H8=p(s4,` will return
a dataset with the same order as the original.`),s4.forEach(s),G8=h(vt),Y2=o(vt,"P",{});var YY=l(Y2);W8=p(YY,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),YY.forEach(s),Y8=h(vt),b($o.$$.fragment,vt),vt.forEach(s),J8=h(I),Fs=o(I,"DIV",{class:!0});var __=l(Fs);b(Nc.$$.fragment,__),K8=h(__),J2=o(__,"P",{});var JY=l(J2);Z8=p(JY,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),JY.forEach(s),X8=h(__),b(xo.$$.fragment,__),__.forEach(s),Q8=h(I),ct=o(I,"DIV",{class:!0});var rp=l(ct);b(Pc.$$.fragment,rp),eq=h(rp),K2=o(rp,"P",{});var KY=l(K2);tq=p(KY,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),KY.forEach(s),sq=h(rp),Lt=o(rp,"P",{});var op=l(Lt);aq=p(op,"The resulting Parquet files are self-contained by default: if your dataset contains "),cu=o(op,"A",{href:!0});var ZY=l(cu);nq=p(ZY,"Image"),ZY.forEach(s),rq=p(op," or "),du=o(op,"A",{href:!0});var XY=l(du);oq=p(XY,"Audio"),XY.forEach(s),lq=p(op,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),Z2=o(op,"EM",{});var QY=l(Z2);iq=p(QY,"embed_external_files"),QY.forEach(s),pq=p(op," to False."),op.forEach(s),cq=h(rp),b(vo.$$.fragment,rp),rp.forEach(s),dq=h(I),K=o(I,"DIV",{class:!0});var Ae=l(K);b(Fc.$$.fragment,Ae),mq=h(Ae),vn=o(Ae,"P",{});var b_=l(vn);hq=p(b_,"Saves a dataset to a dataset directory, or in a filesystem using either "),mu=o(b_,"A",{href:!0});var eJ=l(mu);fq=p(eJ,"S3FileSystem"),eJ.forEach(s),uq=p(b_,` or
any implementation of `),X2=o(b_,"CODE",{});var tJ=l(X2);gq=p(tJ,"fsspec.spec.AbstractFileSystem"),tJ.forEach(s),_q=p(b_,"."),b_.forEach(s),bq=h(Ae),yn=o(Ae,"P",{});var $_=l(yn);$q=p($_,"For "),hu=o($_,"A",{href:!0});var sJ=l(hu);xq=p(sJ,"Image"),sJ.forEach(s),vq=p($_," and "),fu=o($_,"A",{href:!0});var aJ=l(fu);yq=p(aJ,"Audio"),aJ.forEach(s),jq=p($_," data:"),$_.forEach(s),wq=h(Ae),Ac=o(Ae,"P",{});var a4=l(Ac);Dq=p(a4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Q2=o(a4,"EM",{});var nJ=l(Q2);kq=p(nJ,"read()"),nJ.forEach(s),Eq=p(a4," those files first."),a4.forEach(s),qq=h(Ae),b(yo.$$.fragment,Ae),Iq=h(Ae),b(jo.$$.fragment,Ae),Tq=h(Ae),b(wo.$$.fragment,Ae),Ae.forEach(s),Nq=h(I),As=o(I,"DIV",{class:!0});var x_=l(As);b(Lc.$$.fragment,x_),Pq=h(x_),St=o(x_,"P",{});var lp=l(St);Fq=p(lp,"Loads a dataset that was previously saved using "),ex=o(lp,"CODE",{});var rJ=l(ex);Aq=p(rJ,"save_to_disk"),rJ.forEach(s),Lq=p(lp,` from a dataset directory, or from a
filesystem using either `),uu=o(lp,"A",{href:!0});var oJ=l(uu);Sq=p(oJ,"S3FileSystem"),oJ.forEach(s),Oq=p(lp,` or any implementation of
`),tx=o(lp,"CODE",{});var lJ=l(tx);Cq=p(lJ,"fsspec.spec.AbstractFileSystem"),lJ.forEach(s),zq=p(lp,"."),lp.forEach(s),Vq=h(x_),b(Do.$$.fragment,x_),x_.forEach(s),Uq=h(I),ko=o(I,"DIV",{class:!0});var n4=l(ko);b(Sc.$$.fragment,n4),Mq=h(n4),sx=o(n4,"P",{});var iJ=l(sx);Rq=p(iJ,"Create and cache a new Dataset by flattening the indices mapping."),iJ.forEach(s),n4.forEach(s),Bq=h(I),Ls=o(I,"DIV",{class:!0});var v_=l(Ls);b(Oc.$$.fragment,v_),Hq=h(v_),ax=o(v_,"P",{});var pJ=l(ax);Gq=p(pJ,"Exports the dataset to csv"),pJ.forEach(s),Wq=h(v_),b(Eo.$$.fragment,v_),v_.forEach(s),Yq=h(I),Ss=o(I,"DIV",{class:!0});var y_=l(Ss);b(Cc.$$.fragment,y_),Jq=h(y_),zc=o(y_,"P",{});var r4=l(zc);Kq=p(r4,"Returns the dataset as a "),nx=o(r4,"CODE",{});var cJ=l(nx);Zq=p(cJ,"pandas.DataFrame"),cJ.forEach(s),Xq=p(r4,". Can also return a generator for large datasets."),r4.forEach(s),Qq=h(y_),b(qo.$$.fragment,y_),y_.forEach(s),e9=h(I),Os=o(I,"DIV",{class:!0});var j_=l(Os);b(Vc.$$.fragment,j_),t9=h(j_),rx=o(j_,"P",{});var dJ=l(rx);s9=p(dJ,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),dJ.forEach(s),a9=h(j_),b(Io.$$.fragment,j_),j_.forEach(s),n9=h(I),Cs=o(I,"DIV",{class:!0});var w_=l(Cs);b(Uc.$$.fragment,w_),r9=h(w_),ox=o(w_,"P",{});var mJ=l(ox);o9=p(mJ,"Export the dataset to JSON Lines or JSON."),mJ.forEach(s),l9=h(w_),b(To.$$.fragment,w_),w_.forEach(s),i9=h(I),zs=o(I,"DIV",{class:!0});var D_=l(zs);b(Mc.$$.fragment,D_),p9=h(D_),lx=o(D_,"P",{});var hJ=l(lx);c9=p(hJ,"Exports the dataset to parquet"),hJ.forEach(s),d9=h(D_),b(No.$$.fragment,D_),D_.forEach(s),m9=h(I),dt=o(I,"DIV",{class:!0});var ip=l(dt);b(Rc.$$.fragment,ip),h9=h(ip),jn=o(ip,"P",{});var k_=l(jn);f9=p(k_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),ix=o(k_,"CODE",{});var fJ=l(ix);u9=p(fJ,"device"),fJ.forEach(s),g9=p(k_," if you want to run it on GPU ("),px=o(k_,"CODE",{});var uJ=l(px);_9=p(uJ,"device"),uJ.forEach(s),b9=p(k_,` must be the GPU index).
You can find more information about Faiss here:`),k_.forEach(s),$9=h(ip),cx=o(ip,"UL",{});var gJ=l(cx);gu=o(gJ,"LI",{});var KW=l(gu);x9=p(KW,"For "),Bc=o(KW,"A",{href:!0,rel:!0});var _J=l(Bc);v9=p(_J,"string factory"),_J.forEach(s),KW.forEach(s),gJ.forEach(s),y9=h(ip),b(Po.$$.fragment,ip),ip.forEach(s),j9=h(I),Vs=o(I,"DIV",{class:!0});var E_=l(Vs);b(Hc.$$.fragment,E_),w9=h(E_),Ot=o(E_,"P",{});var pp=l(Ot);D9=p(pp,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),dx=o(pp,"EM",{});var bJ=l(dx);k9=p(bJ,"external_arrays"),bJ.forEach(s),E9=p(pp,`.
You can specify `),mx=o(pp,"EM",{});var $J=l(mx);q9=p($J,"device"),$J.forEach(s),I9=p(pp," if you want to run it on GPU ("),hx=o(pp,"EM",{});var xJ=l(hx);T9=p(xJ,"device"),xJ.forEach(s),N9=p(pp,` must be the GPU index).
You can find more information about Faiss here:`),pp.forEach(s),P9=h(E_),fx=o(E_,"UL",{});var vJ=l(fx);_u=o(vJ,"LI",{});var ZW=l(_u);F9=p(ZW,"For "),Gc=o(ZW,"A",{href:!0,rel:!0});var yJ=l(Gc);A9=p(yJ,"string factory"),yJ.forEach(s),ZW.forEach(s),vJ.forEach(s),E_.forEach(s),L9=h(I),Fo=o(I,"DIV",{class:!0});var o4=l(Fo);b(Wc.$$.fragment,o4),S9=h(o4),ux=o(o4,"P",{});var jJ=l(ux);O9=p(jJ,"Save a FaissIndex on disk."),jJ.forEach(s),o4.forEach(s),C9=h(I),Us=o(I,"DIV",{class:!0});var q_=l(Us);b(Yc.$$.fragment,q_),z9=h(q_),gx=o(q_,"P",{});var wJ=l(gx);V9=p(wJ,"Load a FaissIndex from disk."),wJ.forEach(s),U9=h(q_),Jc=o(q_,"P",{});var l4=l(Jc);M9=p(l4,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),_x=o(l4,"EM",{});var DJ=l(_x);R9=p(DJ,".get_index(index_name).faiss_index"),DJ.forEach(s),B9=p(l4," to make it fit your needs."),l4.forEach(s),q_.forEach(s),H9=h(I),Ms=o(I,"DIV",{class:!0});var I_=l(Ms);b(Kc.$$.fragment,I_),G9=h(I_),bx=o(I_,"P",{});var kJ=l(bx);W9=p(kJ,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),kJ.forEach(s),Y9=h(I_),b(Ao.$$.fragment,I_),I_.forEach(s),J9=h(I),Rs=o(I,"DIV",{class:!0});var T_=l(Rs);b(Zc.$$.fragment,T_),K9=h(T_),$x=o(T_,"P",{});var EJ=l($x);Z9=p(EJ,"Load an existing text index using ElasticSearch for fast retrieval."),EJ.forEach(s),X9=h(T_),b(Lo.$$.fragment,T_),T_.forEach(s),Q9=h(I),So=o(I,"DIV",{class:!0});var i4=l(So);b(Xc.$$.fragment,i4),eI=h(i4),xx=o(i4,"P",{});var qJ=l(xx);tI=p(qJ,"List the colindex_nameumns/identifiers of all the attached indexes."),qJ.forEach(s),i4.forEach(s),sI=h(I),Oo=o(I,"DIV",{class:!0});var p4=l(Oo);b(Qc.$$.fragment,p4),aI=h(p4),vx=o(p4,"P",{});var IJ=l(vx);nI=p(IJ,"List the index_name/identifiers of all the attached indexes."),IJ.forEach(s),p4.forEach(s),rI=h(I),Co=o(I,"DIV",{class:!0});var c4=l(Co);b(ed.$$.fragment,c4),oI=h(c4),yx=o(c4,"P",{});var TJ=l(yx);lI=p(TJ,"Drop the index with the specified column."),TJ.forEach(s),c4.forEach(s),iI=h(I),zo=o(I,"DIV",{class:!0});var d4=l(zo);b(td.$$.fragment,d4),pI=h(d4),jx=o(d4,"P",{});var NJ=l(jx);cI=p(NJ,"Find the nearest examples indices in the dataset to the query."),NJ.forEach(s),d4.forEach(s),dI=h(I),Vo=o(I,"DIV",{class:!0});var m4=l(Vo);b(sd.$$.fragment,m4),mI=h(m4),wx=o(m4,"P",{});var PJ=l(wx);hI=p(PJ,"Find the nearest examples indices in the dataset to the query."),PJ.forEach(s),m4.forEach(s),fI=h(I),Uo=o(I,"DIV",{class:!0});var h4=l(Uo);b(ad.$$.fragment,h4),uI=h(h4),Dx=o(h4,"P",{});var FJ=l(Dx);gI=p(FJ,"Find the nearest examples in the dataset to the query."),FJ.forEach(s),h4.forEach(s),_I=h(I),Mo=o(I,"DIV",{class:!0});var f4=l(Mo);b(nd.$$.fragment,f4),bI=h(f4),kx=o(f4,"P",{});var AJ=l(kx);$I=p(AJ,"Find the nearest examples in the dataset to the query."),AJ.forEach(s),f4.forEach(s),xI=h(I),Ro=o(I,"DIV",{class:!0});var u4=l(Ro);b(rd.$$.fragment,u4),vI=h(u4),bu=o(u4,"P",{});var XW=l(bu);$u=o(XW,"A",{href:!0});var LJ=l($u);yI=p(LJ,"datasets.DatasetInfo"),LJ.forEach(s),jI=p(XW," object containing all the metadata in the dataset."),XW.forEach(s),u4.forEach(s),wI=h(I),Bo=o(I,"DIV",{class:!0});var g4=l(Bo);b(od.$$.fragment,g4),DI=h(g4),xu=o(g4,"P",{});var QW=l(xu);vu=o(QW,"A",{href:!0});var SJ=l(vu);kI=p(SJ,"datasets.NamedSplit"),SJ.forEach(s),EI=p(QW," object corresponding to a named dataset split."),QW.forEach(s),g4.forEach(s),qI=h(I),yu=o(I,"DIV",{class:!0});var OJ=l(yu);b(ld.$$.fragment,OJ),OJ.forEach(s),II=h(I),ju=o(I,"DIV",{class:!0});var CJ=l(ju);b(id.$$.fragment,CJ),CJ.forEach(s),TI=h(I),wu=o(I,"DIV",{class:!0});var zJ=l(wu);b(pd.$$.fragment,zJ),zJ.forEach(s),NI=h(I),Du=o(I,"DIV",{class:!0});var VJ=l(Du);b(cd.$$.fragment,VJ),VJ.forEach(s),PI=h(I),ku=o(I,"DIV",{class:!0});var UJ=l(ku);b(dd.$$.fragment,UJ),UJ.forEach(s),FI=h(I),Eu=o(I,"DIV",{class:!0});var MJ=l(Eu);b(md.$$.fragment,MJ),MJ.forEach(s),AI=h(I),qu=o(I,"DIV",{class:!0});var RJ=l(qu);b(hd.$$.fragment,RJ),RJ.forEach(s),LI=h(I),Iu=o(I,"DIV",{class:!0});var BJ=l(Iu);b(fd.$$.fragment,BJ),BJ.forEach(s),SI=h(I),Tu=o(I,"DIV",{class:!0});var HJ=l(Tu);b(ud.$$.fragment,HJ),HJ.forEach(s),OI=h(I),Nu=o(I,"DIV",{class:!0});var GJ=l(Nu);b(gd.$$.fragment,GJ),GJ.forEach(s),CI=h(I),Pu=o(I,"DIV",{class:!0});var WJ=l(Pu);b(_d.$$.fragment,WJ),WJ.forEach(s),zI=h(I),Fu=o(I,"DIV",{class:!0});var YJ=l(Fu);b(bd.$$.fragment,YJ),YJ.forEach(s),VI=h(I),Au=o(I,"DIV",{class:!0});var JJ=l(Au);b($d.$$.fragment,JJ),JJ.forEach(s),UI=h(I),Bs=o(I,"DIV",{class:!0});var N_=l(Bs);b(xd.$$.fragment,N_),MI=h(N_),Ex=o(N_,"P",{});var KJ=l(Ex);RI=p(KJ,"Create Dataset from CSV file(s)."),KJ.forEach(s),BI=h(N_),b(Ho.$$.fragment,N_),N_.forEach(s),HI=h(I),Hs=o(I,"DIV",{class:!0});var P_=l(Hs);b(vd.$$.fragment,P_),GI=h(P_),qx=o(P_,"P",{});var ZJ=l(qx);WI=p(ZJ,"Create Dataset from JSON or JSON Lines file(s)."),ZJ.forEach(s),YI=h(P_),b(Go.$$.fragment,P_),P_.forEach(s),JI=h(I),Gs=o(I,"DIV",{class:!0});var F_=l(Gs);b(yd.$$.fragment,F_),KI=h(F_),Ix=o(F_,"P",{});var XJ=l(Ix);ZI=p(XJ,"Create Dataset from Parquet file(s)."),XJ.forEach(s),XI=h(F_),b(Wo.$$.fragment,F_),F_.forEach(s),QI=h(I),Ws=o(I,"DIV",{class:!0});var A_=l(Ws);b(jd.$$.fragment,A_),eT=h(A_),Tx=o(A_,"P",{});var QJ=l(Tx);tT=p(QJ,"Create Dataset from text file(s)."),QJ.forEach(s),sT=h(A_),b(Yo.$$.fragment,A_),A_.forEach(s),aT=h(I),Ys=o(I,"DIV",{class:!0});var L_=l(Ys);b(wd.$$.fragment,L_),nT=h(L_),wn=o(L_,"P",{});var S_=l(wn);rT=p(S_,"Prepare a dataset for the given task by casting the dataset\u2019s "),Lu=o(S_,"A",{href:!0});var eK=l(Lu);oT=p(eK,"Features"),eK.forEach(s),lT=p(S_," to standardized column names and types as detailed in "),Su=o(S_,"A",{href:!0});var tK=l(Su);iT=p(tK,"datasets.tasks"),tK.forEach(s),pT=p(S_,"."),S_.forEach(s),cT=h(L_),Dn=o(L_,"P",{});var O_=l(Dn);dT=p(O_,"Casts "),Nx=o(O_,"CODE",{});var sK=l(Nx);mT=p(sK,"datasets.DatasetInfo.features"),sK.forEach(s),hT=p(O_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Px=o(O_,"CODE",{});var aK=l(Px);fT=p(aK,"datasets.DatasetInfo.task_templates"),aK.forEach(s),uT=p(O_," after casting."),O_.forEach(s),L_.forEach(s),gT=h(I),Js=o(I,"DIV",{class:!0});var C_=l(Js);b(Dd.$$.fragment,C_),_T=h(C_),kd=o(C_,"P",{});var _4=l(kd);bT=p(_4,"Align the dataset\u2019s label ID and label name mapping to match an input "),Fx=o(_4,"CODE",{});var nK=l(Fx);$T=p(nK,"label2id"),nK.forEach(s),xT=p(_4,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),_4.forEach(s),vT=h(C_),b(Jo.$$.fragment,C_),C_.forEach(s),I.forEach(s),h7=h(a),Ct=o(a,"DIV",{class:!0});var z_=l(Ct);b(Ed.$$.fragment,z_),yT=h(z_),kn=o(z_,"P",{});var V_=l(kn);jT=p(V_,"Converts a list of "),Ou=o(V_,"A",{href:!0});var rK=l(Ou);wT=p(rK,"Dataset"),rK.forEach(s),DT=p(V_," with the same schema into a single "),Cu=o(V_,"A",{href:!0});var oK=l(Cu);kT=p(oK,"Dataset"),oK.forEach(s),ET=p(V_,"."),V_.forEach(s),qT=h(z_),b(Ko.$$.fragment,z_),z_.forEach(s),f7=h(a),X=o(a,"DIV",{class:!0});var yt=l(X);b(qd.$$.fragment,yt),IT=h(yt),Ax=o(yt,"P",{});var lK=l(Ax);TT=p(lK,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),lK.forEach(s),NT=h(yt),En=o(yt,"P",{});var U_=l(En);PT=p(U_,"You can use this function on a list of "),zu=o(U_,"A",{href:!0});var iK=l(zu);FT=p(iK,"Dataset"),iK.forEach(s),AT=p(U_," objects, or on a list of "),Vu=o(U_,"A",{href:!0});var pK=l(Vu);LT=p(pK,"IterableDataset"),pK.forEach(s),ST=p(U_," objects."),U_.forEach(s),OT=h(yt),ze=o(yt,"P",{});var Ma=l(ze);CT=p(Ma,"If "),Lx=o(Ma,"CODE",{});var cK=l(Lx);zT=p(cK,"probabilities"),cK.forEach(s),VT=p(Ma," is "),Sx=o(Ma,"CODE",{});var dK=l(Sx);UT=p(dK,"None"),dK.forEach(s),MT=p(Ma,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Ox=o(Ma,"CODE",{});var mK=l(Ox);RT=p(mK,"probabilities"),mK.forEach(s),BT=p(Ma," is not "),Cx=o(Ma,"CODE",{});var hK=l(Cx);HT=p(hK,"None"),hK.forEach(s),GT=p(Ma,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Ma.forEach(s),WT=h(yt),zx=o(yt,"P",{});var fK=l(zx);YT=p(fK,"The resulting dataset ends when one of the source datasets runs out of examples."),fK.forEach(s),JT=h(yt),b(Zo.$$.fragment,yt),yt.forEach(s),u7=h(a),de=o(a,"DIV",{class:!0});var Ra=l(de);b(Id.$$.fragment,Ra),KT=h(Ra),Vx=o(Ra,"P",{});var uK=l(Vx);ZT=p(uK,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),uK.forEach(s),XT=h(Ra),Ux=o(Ra,"P",{});var gK=l(Ux);QT=p(gK,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),gK.forEach(s),eN=h(Ra),Mx=o(Ra,"P",{});var _K=l(Mx);tN=p(_K,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),_K.forEach(s),sN=h(Ra),Ve=o(Ra,"UL",{});var Ba=l(Ve);Rx=o(Ba,"LI",{});var bK=l(Rx);aN=p(bK,"cache files are always recreated"),bK.forEach(s),nN=h(Ba),Bx=o(Ba,"LI",{});var $K=l(Bx);rN=p($K,"cache files are written to a temporary directory that is deleted when session closes"),$K.forEach(s),oN=h(Ba),Hx=o(Ba,"LI",{});var xK=l(Hx);lN=p(xK,"cache files are named using a random hash instead of the dataset fingerprint"),xK.forEach(s),iN=h(Ba),Td=o(Ba,"LI",{});var b4=l(Td);pN=p(b4,"use "),Uu=o(b4,"A",{href:!0});var vK=l(Uu);cN=p(vK,"datasets.Dataset.save_to_disk()"),vK.forEach(s),dN=p(b4," to save a transformed dataset or it will be deleted when session closes"),b4.forEach(s),mN=h(Ba),zt=o(Ba,"LI",{});var cp=l(zt);hN=p(cp,"caching doesn\u2019t affect "),Mu=o(cp,"A",{href:!0});var yK=l(Mu);fN=p(yK,"datasets.load_dataset()"),yK.forEach(s),uN=p(cp,`. If you want to regenerate a dataset from scratch you should use
the `),Gx=o(cp,"CODE",{});var jK=l(Gx);gN=p(jK,"download_mode"),jK.forEach(s),_N=p(cp," parameter in "),Ru=o(cp,"A",{href:!0});var wK=l(Ru);bN=p(wK,"datasets.load_dataset()"),wK.forEach(s),$N=p(cp,"."),cp.forEach(s),Ba.forEach(s),Ra.forEach(s),g7=h(a),me=o(a,"DIV",{class:!0});var Ha=l(me);b(Nd.$$.fragment,Ha),xN=h(Ha),Wx=o(Ha,"P",{});var DK=l(Wx);vN=p(DK,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),DK.forEach(s),yN=h(Ha),Yx=o(Ha,"P",{});var kK=l(Yx);jN=p(kK,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),kK.forEach(s),wN=h(Ha),Jx=o(Ha,"P",{});var EK=l(Jx);DN=p(EK,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),EK.forEach(s),kN=h(Ha),Ue=o(Ha,"UL",{});var Ga=l(Ue);Kx=o(Ga,"LI",{});var qK=l(Kx);EN=p(qK,"cache files are always recreated"),qK.forEach(s),qN=h(Ga),Zx=o(Ga,"LI",{});var IK=l(Zx);IN=p(IK,"cache files are written to a temporary directory that is deleted when session closes"),IK.forEach(s),TN=h(Ga),Xx=o(Ga,"LI",{});var TK=l(Xx);NN=p(TK,"cache files are named using a random hash instead of the dataset fingerprint"),TK.forEach(s),PN=h(Ga),Pd=o(Ga,"LI",{});var $4=l(Pd);FN=p($4,"use "),Bu=o($4,"A",{href:!0});var NK=l(Bu);AN=p(NK,"datasets.Dataset.save_to_disk()"),NK.forEach(s),LN=p($4," to save a transformed dataset or it will be deleted when session closes"),$4.forEach(s),SN=h(Ga),Vt=o(Ga,"LI",{});var dp=l(Vt);ON=p(dp,"caching doesn\u2019t affect "),Hu=o(dp,"A",{href:!0});var PK=l(Hu);CN=p(PK,"datasets.load_dataset()"),PK.forEach(s),zN=p(dp,`. If you want to regenerate a dataset from scratch you should use
the `),Qx=o(dp,"CODE",{});var FK=l(Qx);VN=p(FK,"download_mode"),FK.forEach(s),UN=p(dp," parameter in "),Gu=o(dp,"A",{href:!0});var AK=l(Gu);MN=p(AK,"datasets.load_dataset()"),AK.forEach(s),RN=p(dp,"."),dp.forEach(s),Ga.forEach(s),Ha.forEach(s),_7=h(a),he=o(a,"DIV",{class:!0});var Wa=l(he);b(Fd.$$.fragment,Wa),BN=h(Wa),e1=o(Wa,"P",{});var LK=l(e1);HN=p(LK,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),LK.forEach(s),GN=h(Wa),t1=o(Wa,"P",{});var SK=l(t1);WN=p(SK,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),SK.forEach(s),YN=h(Wa),s1=o(Wa,"P",{});var OK=l(s1);JN=p(OK,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),OK.forEach(s),KN=h(Wa),Me=o(Wa,"UL",{});var Ya=l(Me);a1=o(Ya,"LI",{});var CK=l(a1);ZN=p(CK,"cache files are always recreated"),CK.forEach(s),XN=h(Ya),n1=o(Ya,"LI",{});var zK=l(n1);QN=p(zK,"cache files are written to a temporary directory that is deleted when session closes"),zK.forEach(s),eP=h(Ya),r1=o(Ya,"LI",{});var VK=l(r1);tP=p(VK,"cache files are named using a random hash instead of the dataset fingerprint"),VK.forEach(s),sP=h(Ya),Ad=o(Ya,"LI",{});var x4=l(Ad);aP=p(x4,"use "),Wu=o(x4,"A",{href:!0});var UK=l(Wu);nP=p(UK,"datasets.Dataset.save_to_disk()"),UK.forEach(s),rP=p(x4," to save a transformed dataset or it will be deleted when session closes"),x4.forEach(s),oP=h(Ya),Ut=o(Ya,"LI",{});var mp=l(Ut);lP=p(mp,"caching doesn\u2019t affect "),Yu=o(mp,"A",{href:!0});var MK=l(Yu);iP=p(MK,"datasets.load_dataset()"),MK.forEach(s),pP=p(mp,`. If you want to regenerate a dataset from scratch you should use
the `),o1=o(mp,"CODE",{});var RK=l(o1);cP=p(RK,"download_mode"),RK.forEach(s),dP=p(mp," parameter in "),Ju=o(mp,"A",{href:!0});var BK=l(Ju);mP=p(BK,"datasets.load_dataset()"),BK.forEach(s),hP=p(mp,"."),mp.forEach(s),Ya.forEach(s),Wa.forEach(s),b7=h(a),qn=o(a,"H2",{class:!0});var v4=l(qn);Xo=o(v4,"A",{id:!0,class:!0,href:!0});var HK=l(Xo);l1=o(HK,"SPAN",{});var GK=l(l1);b(Ld.$$.fragment,GK),GK.forEach(s),HK.forEach(s),fP=h(v4),i1=o(v4,"SPAN",{});var WK=l(i1);uP=p(WK,"DatasetDict"),WK.forEach(s),v4.forEach(s),$7=h(a),Qo=o(a,"P",{});var y4=l(Qo);gP=p(y4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),p1=o(y4,"CODE",{});var YK=l(p1);_P=p(YK,"Dataset"),YK.forEach(s),bP=p(y4,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),y4.forEach(s),x7=h(a),F=o(a,"DIV",{class:!0});var A=l(F);b(Sd.$$.fragment,A),$P=h(A),c1=o(A,"P",{});var JK=l(c1);xP=p(JK,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),JK.forEach(s),vP=h(A),Ks=o(A,"DIV",{class:!0});var M_=l(Ks);b(Od.$$.fragment,M_),yP=h(M_),d1=o(M_,"P",{});var KK=l(d1);jP=p(KK,"The Apache Arrow tables backing each split."),KK.forEach(s),wP=h(M_),b(el.$$.fragment,M_),M_.forEach(s),DP=h(A),Zs=o(A,"DIV",{class:!0});var R_=l(Zs);b(Cd.$$.fragment,R_),kP=h(R_),m1=o(R_,"P",{});var ZK=l(m1);EP=p(ZK,"The cache files containing the Apache Arrow table backing each split."),ZK.forEach(s),qP=h(R_),b(tl.$$.fragment,R_),R_.forEach(s),IP=h(A),Xs=o(A,"DIV",{class:!0});var B_=l(Xs);b(zd.$$.fragment,B_),TP=h(B_),h1=o(B_,"P",{});var XK=l(h1);NP=p(XK,"Number of columns in each split of the dataset."),XK.forEach(s),PP=h(B_),b(sl.$$.fragment,B_),B_.forEach(s),FP=h(A),Qs=o(A,"DIV",{class:!0});var H_=l(Qs);b(Vd.$$.fragment,H_),AP=h(H_),Ud=o(H_,"P",{});var j4=l(Ud);LP=p(j4,"Number of rows in each split of the dataset (same as "),al=o(j4,"A",{href:!0});var w4=l(al);SP=p(w4,"datasets.Dataset."),f1=o(w4,"STRONG",{});var QK=l(f1);OP=p(QK,"len"),QK.forEach(s),CP=p(w4,"()"),w4.forEach(s),zP=p(j4,")."),j4.forEach(s),VP=h(H_),b(nl.$$.fragment,H_),H_.forEach(s),UP=h(A),ea=o(A,"DIV",{class:!0});var G_=l(ea);b(Md.$$.fragment,G_),MP=h(G_),u1=o(G_,"P",{});var eZ=l(u1);RP=p(eZ,"Names of the columns in each split of the dataset."),eZ.forEach(s),BP=h(G_),b(rl.$$.fragment,G_),G_.forEach(s),HP=h(A),ta=o(A,"DIV",{class:!0});var W_=l(ta);b(Rd.$$.fragment,W_),GP=h(W_),g1=o(W_,"P",{});var tZ=l(g1);WP=p(tZ,"Shape of each split of the dataset (number of columns, number of rows)."),tZ.forEach(s),YP=h(W_),b(ol.$$.fragment,W_),W_.forEach(s),JP=h(A),mt=o(A,"DIV",{class:!0});var hp=l(mt);b(Bd.$$.fragment,hp),KP=h(hp),_1=o(hp,"P",{});var sZ=l(_1);ZP=p(sZ,"Return a list of the unique elements in a column for each split."),sZ.forEach(s),XP=h(hp),b1=o(hp,"P",{});var aZ=l(b1);QP=p(aZ,"This is implemented in the low-level backend and as such, very fast."),aZ.forEach(s),eF=h(hp),b(ll.$$.fragment,hp),hp.forEach(s),tF=h(A),sa=o(A,"DIV",{class:!0});var Y_=l(sa);b(Hd.$$.fragment,Y_),sF=h(Y_),$1=o(Y_,"P",{});var nZ=l($1);aF=p(nZ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),nZ.forEach(s),nF=h(Y_),b(il.$$.fragment,Y_),Y_.forEach(s),rF=h(A),aa=o(A,"DIV",{class:!0});var J_=l(aa);b(Gd.$$.fragment,J_),oF=h(J_),x1=o(J_,"P",{});var rZ=l(x1);lF=p(rZ,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),rZ.forEach(s),iF=h(J_),b(pl.$$.fragment,J_),J_.forEach(s),pF=h(A),na=o(A,"DIV",{class:!0});var K_=l(na);b(Wd.$$.fragment,K_),cF=h(K_),v1=o(K_,"P",{});var oZ=l(v1);dF=p(oZ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),oZ.forEach(s),mF=h(K_),b(cl.$$.fragment,K_),K_.forEach(s),hF=h(A),ht=o(A,"DIV",{class:!0});var fp=l(ht);b(Yd.$$.fragment,fp),fF=h(fp),y1=o(fp,"P",{});var lZ=l(y1);uF=p(lZ,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),lZ.forEach(s),gF=h(fp),j1=o(fp,"P",{});var iZ=l(j1);_F=p(iZ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),iZ.forEach(s),bF=h(fp),b(dl.$$.fragment,fp),fp.forEach(s),$F=h(A),we=o(A,"DIV",{class:!0});var Ja=l(we);b(Jd.$$.fragment,Ja),xF=h(Ja),w1=o(Ja,"P",{});var pZ=l(w1);vF=p(pZ,"Create a new Dataset where the rows are shuffled."),pZ.forEach(s),yF=h(Ja),D1=o(Ja,"P",{});var cZ=l(D1);jF=p(cZ,"The transformation is applied to all the datasets of the dataset dictionary."),cZ.forEach(s),wF=h(Ja),k1=o(Ja,"P",{});var dZ=l(k1);DF=p(dZ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),dZ.forEach(s),kF=h(Ja),b(ml.$$.fragment,Ja),Ja.forEach(s),EF=h(A),De=o(A,"DIV",{class:!0});var Ka=l(De);b(Kd.$$.fragment,Ka),qF=h(Ka),Zd=o(Ka,"P",{});var D4=l(Zd);IF=p(D4,"Set "),E1=o(D4,"CODE",{});var mZ=l(E1);TF=p(mZ,"__getitem__"),mZ.forEach(s),NF=p(D4,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),D4.forEach(s),PF=h(Ka),Re=o(Ka,"P",{});var Za=l(Re);FF=p(Za,"It is possible to call "),q1=o(Za,"CODE",{});var hZ=l(q1);AF=p(hZ,"map"),hZ.forEach(s),LF=p(Za," after calling "),I1=o(Za,"CODE",{});var fZ=l(I1);SF=p(fZ,"set_format"),fZ.forEach(s),OF=p(Za,". Since "),T1=o(Za,"CODE",{});var uZ=l(T1);CF=p(uZ,"map"),uZ.forEach(s),zF=p(Za,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),N1=o(Za,"CODE",{});var gZ=l(N1);VF=p(gZ,"map"),gZ.forEach(s),UF=p(Za," on a dataset to add a new column, then this column will be formatted:"),Za.forEach(s),MF=h(Ka),P1=o(Ka,"P",{});var _Z=l(P1);RF=p(_Z,"new formatted columns = (all columns - previously unformatted columns)"),_Z.forEach(s),BF=h(Ka),b(hl.$$.fragment,Ka),Ka.forEach(s),HF=h(A),ft=o(A,"DIV",{class:!0});var up=l(ft);b(Xd.$$.fragment,up),GF=h(up),Qd=o(up,"P",{});var k4=l(Qd);WF=p(k4,"Reset "),F1=o(k4,"CODE",{});var bZ=l(F1);YF=p(bZ,"__getitem__"),bZ.forEach(s),JF=p(k4,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),k4.forEach(s),KF=h(up),Ku=o(up,"P",{});var eY=l(Ku);ZF=p(eY,"Same as "),A1=o(eY,"CODE",{});var $Z=l(A1);XF=p($Z,"self.set_format()"),$Z.forEach(s),eY.forEach(s),QF=h(up),b(fl.$$.fragment,up),up.forEach(s),eA=h(A),ul=o(A,"DIV",{class:!0});var E4=l(ul);b(em.$$.fragment,E4),tA=h(E4),In=o(E4,"P",{});var Z_=l(In);sA=p(Z_,"To be used in a "),L1=o(Z_,"EM",{});var xZ=l(L1);aA=p(xZ,"with"),xZ.forEach(s),nA=p(Z_," statement. Set "),S1=o(Z_,"CODE",{});var vZ=l(S1);rA=p(vZ,"__getitem__"),vZ.forEach(s),oA=p(Z_,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),Z_.forEach(s),E4.forEach(s),lA=h(A),ke=o(A,"DIV",{class:!0});var Xa=l(ke);b(tm.$$.fragment,Xa),iA=h(Xa),Mt=o(Xa,"P",{});var gp=l(Mt);pA=p(gp,"Set "),O1=o(gp,"CODE",{});var yZ=l(O1);cA=p(yZ,"__getitem__"),yZ.forEach(s),dA=p(gp,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),C1=o(gp,"CODE",{});var jZ=l(C1);mA=p(jZ,"type"),jZ.forEach(s),hA=p(gp," (for example \u201Cnumpy\u201D) is used to format batches when using "),z1=o(gp,"CODE",{});var wZ=l(z1);fA=p(wZ,"__getitem__"),wZ.forEach(s),uA=p(gp,`.
The format is set for every dataset in the dataset dictionary`),gp.forEach(s),gA=h(Xa),sm=o(Xa,"P",{});var q4=l(sm);_A=p(q4,"It\u2019s also possible to use custom transforms for formatting using "),Zu=o(q4,"A",{href:!0});var DZ=l(Zu);bA=p(DZ,"datasets.Dataset.with_transform()"),DZ.forEach(s),$A=p(q4,"."),q4.forEach(s),xA=h(Xa),Tn=o(Xa,"P",{});var X_=l(Tn);vA=p(X_,"Contrary to "),Xu=o(X_,"A",{href:!0});var kZ=l(Xu);yA=p(kZ,"datasets.DatasetDict.set_format()"),kZ.forEach(s),jA=p(X_,", "),V1=o(X_,"CODE",{});var EZ=l(V1);wA=p(EZ,"with_format"),EZ.forEach(s),DA=p(X_," returns a new DatasetDict object with new Dataset objects."),X_.forEach(s),kA=h(Xa),b(gl.$$.fragment,Xa),Xa.forEach(s),EA=h(A),Ee=o(A,"DIV",{class:!0});var Qa=l(Ee);b(am.$$.fragment,Qa),qA=h(Qa),Nn=o(Qa,"P",{});var Q_=l(Nn);IA=p(Q_,"Set "),U1=o(Q_,"CODE",{});var qZ=l(U1);TA=p(qZ,"__getitem__"),qZ.forEach(s),NA=p(Q_," return format using this transform. The transform is applied on-the-fly on batches when "),M1=o(Q_,"CODE",{});var IZ=l(M1);PA=p(IZ,"__getitem__"),IZ.forEach(s),FA=p(Q_,` is called.
The transform is set for every dataset in the dataset dictionary`),Q_.forEach(s),AA=h(Qa),Pn=o(Qa,"P",{});var eb=l(Pn);LA=p(eb,"As "),Qu=o(eb,"A",{href:!0});var TZ=l(Qu);SA=p(TZ,"datasets.Dataset.set_format()"),TZ.forEach(s),OA=p(eb,", this can be reset using "),eg=o(eb,"A",{href:!0});var NZ=l(eg);CA=p(NZ,"datasets.Dataset.reset_format()"),NZ.forEach(s),zA=p(eb,"."),eb.forEach(s),VA=h(Qa),Fn=o(Qa,"P",{});var tb=l(Fn);UA=p(tb,"Contrary to "),R1=o(tb,"CODE",{});var PZ=l(R1);MA=p(PZ,"datasets.DatasetDict.set_transform()"),PZ.forEach(s),RA=p(tb,", "),B1=o(tb,"CODE",{});var FZ=l(B1);BA=p(FZ,"with_transform"),FZ.forEach(s),HA=p(tb," returns a new DatasetDict object with new Dataset objects."),tb.forEach(s),GA=h(Qa),b(_l.$$.fragment,Qa),Qa.forEach(s),WA=h(A),ra=o(A,"DIV",{class:!0});var sb=l(ra);b(nm.$$.fragment,sb),YA=h(sb),H1=o(sb,"P",{});var AZ=l(H1);JA=p(AZ,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),AZ.forEach(s),KA=h(sb),b(bl.$$.fragment,sb),sb.forEach(s),ZA=h(A),ut=o(A,"DIV",{class:!0});var _p=l(ut);b(rm.$$.fragment,_p),XA=h(_p),G1=o(_p,"P",{});var LZ=l(G1);QA=p(LZ,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),LZ.forEach(s),eL=h(_p),Rt=o(_p,"P",{});var bp=l(Rt);tL=p(bp,"You can also remove a column using "),tg=o(bp,"A",{href:!0});var SZ=l(tg);sL=p(SZ,"Dataset.map()"),SZ.forEach(s),aL=p(bp," with "),W1=o(bp,"EM",{});var OZ=l(W1);nL=p(OZ,"feature"),OZ.forEach(s),rL=p(bp," but "),Y1=o(bp,"CODE",{});var CZ=l(Y1);oL=p(CZ,"cast_"),CZ.forEach(s),lL=p(bp,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),bp.forEach(s),iL=h(_p),b($l.$$.fragment,_p),_p.forEach(s),pL=h(A),oa=o(A,"DIV",{class:!0});var ab=l(oa);b(om.$$.fragment,ab),cL=h(ab),J1=o(ab,"P",{});var zZ=l(J1);dL=p(zZ,"Cast column to feature for decoding."),zZ.forEach(s),mL=h(ab),b(xl.$$.fragment,ab),ab.forEach(s),hL=h(A),qe=o(A,"DIV",{class:!0});var en=l(qe);b(lm.$$.fragment,en),fL=h(en),K1=o(en,"P",{});var VZ=l(K1);uL=p(VZ,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),VZ.forEach(s),gL=h(en),Z1=o(en,"P",{});var UZ=l(Z1);_L=p(UZ,"The transformation is applied to all the splits of the dataset dictionary."),UZ.forEach(s),bL=h(en),An=o(en,"P",{});var nb=l(An);$L=p(nb,"You can also remove a column using "),sg=o(nb,"A",{href:!0});var MZ=l(sg);xL=p(MZ,"Dataset.map()"),MZ.forEach(s),vL=p(nb," with "),X1=o(nb,"EM",{});var RZ=l(X1);yL=p(RZ,"remove_columns"),RZ.forEach(s),jL=p(nb,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),nb.forEach(s),wL=h(en),b(vl.$$.fragment,en),en.forEach(s),DL=h(A),Ie=o(A,"DIV",{class:!0});var tn=l(Ie);b(im.$$.fragment,tn),kL=h(tn),Q1=o(tn,"P",{});var BZ=l(Q1);EL=p(BZ,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),BZ.forEach(s),qL=h(tn),Ln=o(tn,"P",{});var rb=l(Ln);IL=p(rb,"You can also rename a column using "),ag=o(rb,"A",{href:!0});var HZ=l(ag);TL=p(HZ,"Dataset.map()"),HZ.forEach(s),NL=p(rb," with "),ev=o(rb,"EM",{});var GZ=l(ev);PL=p(GZ,"remove_columns"),GZ.forEach(s),FL=p(rb," but the present method:"),rb.forEach(s),AL=h(tn),pm=o(tn,"UL",{});var I4=l(pm);tv=o(I4,"LI",{});var WZ=l(tv);LL=p(WZ,"takes care of moving the original features under the new column name."),WZ.forEach(s),SL=h(I4),sv=o(I4,"LI",{});var YZ=l(sv);OL=p(YZ,"doesn\u2019t copy the data to a new dataset and is thus much faster."),YZ.forEach(s),I4.forEach(s),CL=h(tn),b(yl.$$.fragment,tn),tn.forEach(s),zL=h(A),la=o(A,"DIV",{class:!0});var ob=l(la);b(cm.$$.fragment,ob),VL=h(ob),av=o(ob,"P",{});var JZ=l(av);UL=p(JZ,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),JZ.forEach(s),ML=h(ob),b(jl.$$.fragment,ob),ob.forEach(s),RL=h(A),ia=o(A,"DIV",{class:!0});var lb=l(ia);b(dm.$$.fragment,lb),BL=h(lb),mm=o(lb,"P",{});var T4=l(mm);HL=p(T4,"Casts the given column as :obj:"),nv=o(T4,"CODE",{});var KZ=l(nv);GL=p(KZ,"datasets.features.ClassLabel"),KZ.forEach(s),WL=p(T4," and updates the tables."),T4.forEach(s),YL=h(lb),b(wl.$$.fragment,lb),lb.forEach(s),JL=h(A),Te=o(A,"DIV",{class:!0});var sn=l(Te);b(hm.$$.fragment,sn),KL=h(sn),Sn=o(sn,"P",{});var ib=l(Sn);ZL=p(ib,"Pushes the "),rv=o(ib,"CODE",{});var ZZ=l(rv);XL=p(ZZ,"DatasetDict"),ZZ.forEach(s),QL=p(ib,` to the hub as a Parquet dataset.
The `),ov=o(ib,"CODE",{});var XZ=l(ov);eS=p(XZ,"DatasetDict"),XZ.forEach(s),tS=p(ib," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),ib.forEach(s),sS=h(sn),lv=o(sn,"P",{});var QZ=l(lv);aS=p(QZ,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),QZ.forEach(s),nS=h(sn),Bt=o(sn,"P",{});var $p=l(Bt);rS=p($p,"The resulting Parquet files are self-contained by default: if your dataset contains "),ng=o($p,"A",{href:!0});var eX=l(ng);oS=p(eX,"Image"),eX.forEach(s),lS=p($p," or "),rg=o($p,"A",{href:!0});var tX=l(rg);iS=p(tX,"Audio"),tX.forEach(s),pS=p($p,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),iv=o($p,"EM",{});var sX=l(iv);cS=p(sX,"embed_external_files"),sX.forEach(s),dS=p($p," to False."),$p.forEach(s),mS=h(sn),b(Dl.$$.fragment,sn),sn.forEach(s),hS=h(A),re=o(A,"DIV",{class:!0});var jt=l(re);b(fm.$$.fragment,jt),fS=h(jt),On=o(jt,"P",{});var pb=l(On);uS=p(pb,"Saves a dataset dict to a filesystem using either "),og=o(pb,"A",{href:!0});var aX=l(og);gS=p(aX,"S3FileSystem"),aX.forEach(s),_S=p(pb,` or
`),pv=o(pb,"CODE",{});var nX=l(pv);bS=p(nX,"fsspec.spec.AbstractFileSystem"),nX.forEach(s),$S=p(pb,"."),pb.forEach(s),xS=h(jt),Cn=o(jt,"P",{});var cb=l(Cn);vS=p(cb,"For "),lg=o(cb,"A",{href:!0});var rX=l(lg);yS=p(rX,"Image"),rX.forEach(s),jS=p(cb," and "),ig=o(cb,"A",{href:!0});var oX=l(ig);wS=p(oX,"Audio"),oX.forEach(s),DS=p(cb," data:"),cb.forEach(s),kS=h(jt),um=o(jt,"P",{});var N4=l(um);ES=p(N4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),cv=o(N4,"EM",{});var lX=l(cv);qS=p(lX,"read()"),lX.forEach(s),IS=p(N4," those files first."),N4.forEach(s),TS=h(jt),b(kl.$$.fragment,jt),NS=h(jt),b(El.$$.fragment,jt),jt.forEach(s),PS=h(A),pa=o(A,"DIV",{class:!0});var db=l(pa);b(gm.$$.fragment,db),FS=h(db),Ht=o(db,"P",{});var xp=l(Ht);AS=p(xp,"Load a dataset that was previously saved using "),dv=o(xp,"CODE",{});var iX=l(dv);LS=p(iX,"save_to_disk"),iX.forEach(s),SS=p(xp,` from a filesystem using either
`),pg=o(xp,"A",{href:!0});var pX=l(pg);OS=p(pX,"S3FileSystem"),pX.forEach(s),CS=p(xp," or "),mv=o(xp,"CODE",{});var cX=l(mv);zS=p(cX,"fsspec.spec.AbstractFileSystem"),cX.forEach(s),VS=p(xp,"."),xp.forEach(s),US=h(db),b(ql.$$.fragment,db),db.forEach(s),MS=h(A),ca=o(A,"DIV",{class:!0});var mb=l(ca);b(_m.$$.fragment,mb),RS=h(mb),hv=o(mb,"P",{});var dX=l(hv);BS=p(dX,"Create DatasetDict from CSV file(s)."),dX.forEach(s),HS=h(mb),b(Il.$$.fragment,mb),mb.forEach(s),GS=h(A),da=o(A,"DIV",{class:!0});var hb=l(da);b(bm.$$.fragment,hb),WS=h(hb),fv=o(hb,"P",{});var mX=l(fv);YS=p(mX,"Create DatasetDict from JSON Lines file(s)."),mX.forEach(s),JS=h(hb),b(Tl.$$.fragment,hb),hb.forEach(s),KS=h(A),ma=o(A,"DIV",{class:!0});var fb=l(ma);b($m.$$.fragment,fb),ZS=h(fb),uv=o(fb,"P",{});var hX=l(uv);XS=p(hX,"Create DatasetDict from Parquet file(s)."),hX.forEach(s),QS=h(fb),b(Nl.$$.fragment,fb),fb.forEach(s),eO=h(A),ha=o(A,"DIV",{class:!0});var ub=l(ha);b(xm.$$.fragment,ub),tO=h(ub),gv=o(ub,"P",{});var fX=l(gv);sO=p(fX,"Create DatasetDict from text file(s)."),fX.forEach(s),aO=h(ub),b(Pl.$$.fragment,ub),ub.forEach(s),nO=h(A),fa=o(A,"DIV",{class:!0});var gb=l(fa);b(vm.$$.fragment,gb),rO=h(gb),zn=o(gb,"P",{});var _b=l(zn);oO=p(_b,"Prepare a dataset for the given task by casting the dataset\u2019s "),cg=o(_b,"A",{href:!0});var uX=l(cg);lO=p(uX,"Features"),uX.forEach(s),iO=p(_b," to standardized column names and types as detailed in "),dg=o(_b,"A",{href:!0});var gX=l(dg);pO=p(gX,"datasets.tasks"),gX.forEach(s),cO=p(_b,"."),_b.forEach(s),dO=h(gb),Vn=o(gb,"P",{});var bb=l(Vn);mO=p(bb,"Casts "),_v=o(bb,"CODE",{});var _X=l(_v);hO=p(_X,"datasets.DatasetInfo.features"),_X.forEach(s),fO=p(bb," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),bv=o(bb,"CODE",{});var bX=l(bv);uO=p(bX,"datasets.DatasetInfo.task_templates"),bX.forEach(s),gO=p(bb," after casting."),bb.forEach(s),gb.forEach(s),A.forEach(s),v7=h(a),mg=o(a,"A",{id:!0}),l(mg).forEach(s),y7=h(a),Un=o(a,"H2",{class:!0});var P4=l(Un);Fl=o(P4,"A",{id:!0,class:!0,href:!0});var $X=l(Fl);$v=o($X,"SPAN",{});var xX=l($v);b(ym.$$.fragment,xX),xX.forEach(s),$X.forEach(s),_O=h(P4),xv=o(P4,"SPAN",{});var vX=l(xv);bO=p(vX,"IterableDataset"),vX.forEach(s),P4.forEach(s),j7=h(a),Al=o(a,"P",{});var F4=l(Al);$O=p(F4,"The base class "),hg=o(F4,"A",{href:!0});var yX=l(hg);xO=p(yX,"IterableDataset"),yX.forEach(s),vO=p(F4," implements an iterable Dataset backed by python generators."),F4.forEach(s),w7=h(a),L=o(a,"DIV",{class:!0});var S=l(L);b(jm.$$.fragment,S),yO=h(S),vv=o(S,"P",{});var jX=l(vv);jO=p(jX,"A Dataset backed by an iterable."),jX.forEach(s),wO=h(S),ua=o(S,"DIV",{class:!0});var $b=l(ua);b(wm.$$.fragment,$b),DO=h($b),yv=o($b,"P",{});var wX=l(yv);kO=p(wX,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),wX.forEach(s),EO=h($b),b(Ll.$$.fragment,$b),$b.forEach(s),qO=h(S),ga=o(S,"DIV",{class:!0});var xb=l(ga);b(Dm.$$.fragment,xb),IO=h(xb),jv=o(xb,"P",{});var DX=l(jv);TO=p(DX,"Cast column to feature for decoding."),DX.forEach(s),NO=h(xb),b(Sl.$$.fragment,xb),xb.forEach(s),PO=h(S),_a=o(S,"DIV",{class:!0});var vb=l(_a);b(km.$$.fragment,vb),FO=h(vb),wv=o(vb,"P",{});var kX=l(wv);AO=p(kX,"Cast the dataset to a new set of features."),kX.forEach(s),LO=h(vb),b(Ol.$$.fragment,vb),vb.forEach(s),SO=h(S),fg=o(S,"DIV",{class:!0});var EX=l(fg);b(Em.$$.fragment,EX),EX.forEach(s),OO=h(S),Ne=o(S,"DIV",{class:!0});var an=l(Ne);b(qm.$$.fragment,an),CO=h(an),Dv=o(an,"P",{});var qX=l(Dv);zO=p(qX,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),qX.forEach(s),VO=h(an),Im=o(an,"P",{});var A4=l(Im);UO=p(A4,"You can specify whether the function should be batched or not with the "),kv=o(A4,"CODE",{});var IX=l(kv);MO=p(IX,"batched"),IX.forEach(s),RO=p(A4," parameter:"),A4.forEach(s),BO=h(an),Mn=o(an,"UL",{});var yb=l(Mn);Ev=o(yb,"LI",{});var TX=l(Ev);HO=p(TX,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),TX.forEach(s),GO=h(yb),qv=o(yb,"LI",{});var NX=l(qv);WO=p(NX,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),NX.forEach(s),YO=h(yb),fe=o(yb,"LI",{});var wt=l(fe);JO=p(wt,"If batched is True and batch_size is "),Iv=o(wt,"CODE",{});var PX=l(Iv);KO=p(PX,"n"),PX.forEach(s),ZO=p(wt," > 1, then the function takes a batch of "),Tv=o(wt,"CODE",{});var FX=l(Tv);XO=p(FX,"n"),FX.forEach(s),QO=p(wt," examples as input and can return a batch with "),Nv=o(wt,"CODE",{});var AX=l(Nv);eC=p(AX,"n"),AX.forEach(s),tC=p(wt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Pv=o(wt,"CODE",{});var LX=l(Pv);sC=p(LX,"n"),LX.forEach(s),aC=p(wt,` examples.
A batch is a dictionary, e.g. a batch of `),Fv=o(wt,"CODE",{});var SX=l(Fv);nC=p(SX,"n"),SX.forEach(s),rC=p(wt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),wt.forEach(s),yb.forEach(s),oC=h(an),b(Cl.$$.fragment,an),an.forEach(s),lC=h(S),ba=o(S,"DIV",{class:!0});var jb=l(ba);b(Tm.$$.fragment,jb),iC=h(jb),Av=o(jb,"P",{});var OX=l(Av);pC=p(OX,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),OX.forEach(s),cC=h(jb),b(zl.$$.fragment,jb),jb.forEach(s),dC=h(S),$a=o(S,"DIV",{class:!0});var wb=l($a);b(Nm.$$.fragment,wb),mC=h(wb),Lv=o(wb,"P",{});var CX=l(Lv);hC=p(CX,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),CX.forEach(s),fC=h(wb),b(Vl.$$.fragment,wb),wb.forEach(s),uC=h(S),oe=o(S,"DIV",{class:!0});var Dt=l(oe);b(Pm.$$.fragment,Dt),gC=h(Dt),Sv=o(Dt,"P",{});var zX=l(Sv);_C=p(zX,"Randomly shuffles the elements of this dataset."),zX.forEach(s),bC=h(Dt),Ov=o(Dt,"P",{});var VX=l(Ov);$C=p(VX,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),VX.forEach(s),xC=h(Dt),Fm=o(Dt,"P",{});var L4=l(Fm);vC=p(L4,"For instance, if your dataset contains 10,000 elements but "),Cv=o(L4,"CODE",{});var UX=l(Cv);yC=p(UX,"buffer_size"),UX.forEach(s),jC=p(L4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),L4.forEach(s),wC=h(Dt),Rn=o(Dt,"P",{});var Db=l(Rn);DC=p(Db,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),ug=o(Db,"A",{href:!0});var MX=l(ug);kC=p(MX,"datasets.IterableDataset.skip()"),MX.forEach(s),EC=p(Db," or "),gg=o(Db,"A",{href:!0});var RX=l(gg);qC=p(RX,"datasets.IterableDataset.take()"),RX.forEach(s),IC=p(Db,`
then the order of the shards is kept unchanged.`),Db.forEach(s),TC=h(Dt),b(Ul.$$.fragment,Dt),Dt.forEach(s),NC=h(S),xa=o(S,"DIV",{class:!0});var kb=l(xa);b(Am.$$.fragment,kb),PC=h(kb),Lm=o(kb,"P",{});var S4=l(Lm);FC=p(S4,"Create a new IterableDataset that skips the first "),zv=o(S4,"CODE",{});var BX=l(zv);AC=p(BX,"n"),BX.forEach(s),LC=p(S4," elements."),S4.forEach(s),SC=h(kb),b(Ml.$$.fragment,kb),kb.forEach(s),OC=h(S),va=o(S,"DIV",{class:!0});var Eb=l(va);b(Sm.$$.fragment,Eb),CC=h(Eb),Om=o(Eb,"P",{});var O4=l(Om);zC=p(O4,"Create a new IterableDataset with only the first "),Vv=o(O4,"CODE",{});var HX=l(Vv);VC=p(HX,"n"),HX.forEach(s),UC=p(O4," elements."),O4.forEach(s),MC=h(Eb),b(Rl.$$.fragment,Eb),Eb.forEach(s),RC=h(S),Bl=o(S,"DIV",{class:!0});var C4=l(Bl);b(Cm.$$.fragment,C4),BC=h(C4),_g=o(C4,"P",{});var tY=l(_g);bg=o(tY,"A",{href:!0});var GX=l(bg);HC=p(GX,"datasets.DatasetInfo"),GX.forEach(s),GC=p(tY," object containing all the metadata in the dataset."),tY.forEach(s),C4.forEach(s),WC=h(S),Hl=o(S,"DIV",{class:!0});var z4=l(Hl);b(zm.$$.fragment,z4),YC=h(z4),$g=o(z4,"P",{});var sY=l($g);xg=o(sY,"A",{href:!0});var WX=l(xg);JC=p(WX,"datasets.NamedSplit"),WX.forEach(s),KC=p(sY," object corresponding to a named dataset split."),sY.forEach(s),z4.forEach(s),ZC=h(S),vg=o(S,"DIV",{class:!0});var YX=l(vg);b(Vm.$$.fragment,YX),YX.forEach(s),XC=h(S),yg=o(S,"DIV",{class:!0});var JX=l(yg);b(Um.$$.fragment,JX),JX.forEach(s),QC=h(S),jg=o(S,"DIV",{class:!0});var KX=l(jg);b(Mm.$$.fragment,KX),KX.forEach(s),ez=h(S),wg=o(S,"DIV",{class:!0});var ZX=l(wg);b(Rm.$$.fragment,ZX),ZX.forEach(s),tz=h(S),Dg=o(S,"DIV",{class:!0});var XX=l(Dg);b(Bm.$$.fragment,XX),XX.forEach(s),sz=h(S),kg=o(S,"DIV",{class:!0});var QX=l(kg);b(Hm.$$.fragment,QX),QX.forEach(s),az=h(S),Eg=o(S,"DIV",{class:!0});var eQ=l(Eg);b(Gm.$$.fragment,eQ),eQ.forEach(s),nz=h(S),qg=o(S,"DIV",{class:!0});var tQ=l(qg);b(Wm.$$.fragment,tQ),tQ.forEach(s),rz=h(S),Ig=o(S,"DIV",{class:!0});var sQ=l(Ig);b(Ym.$$.fragment,sQ),sQ.forEach(s),oz=h(S),Tg=o(S,"DIV",{class:!0});var aQ=l(Tg);b(Jm.$$.fragment,aQ),aQ.forEach(s),lz=h(S),Ng=o(S,"DIV",{class:!0});var nQ=l(Ng);b(Km.$$.fragment,nQ),nQ.forEach(s),iz=h(S),Pg=o(S,"DIV",{class:!0});var rQ=l(Pg);b(Zm.$$.fragment,rQ),rQ.forEach(s),pz=h(S),Fg=o(S,"DIV",{class:!0});var oQ=l(Fg);b(Xm.$$.fragment,oQ),oQ.forEach(s),S.forEach(s),D7=h(a),Bn=o(a,"H2",{class:!0});var V4=l(Bn);Gl=o(V4,"A",{id:!0,class:!0,href:!0});var lQ=l(Gl);Uv=o(lQ,"SPAN",{});var iQ=l(Uv);b(Qm.$$.fragment,iQ),iQ.forEach(s),lQ.forEach(s),cz=h(V4),Mv=o(V4,"SPAN",{});var pQ=l(Mv);dz=p(pQ,"IterableDatasetDict"),pQ.forEach(s),V4.forEach(s),k7=h(a),Wl=o(a,"P",{});var U4=l(Wl);mz=p(U4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Rv=o(U4,"CODE",{});var cQ=l(Rv);hz=p(cQ,"IterableDataset"),cQ.forEach(s),fz=p(U4," objects as values."),U4.forEach(s),E7=h(a),U=o(a,"DIV",{class:!0});var B=l(U);b(eh.$$.fragment,B),uz=h(B),Pe=o(B,"DIV",{class:!0});var nn=l(Pe);b(th.$$.fragment,nn),gz=h(nn),Bv=o(nn,"P",{});var dQ=l(Bv);_z=p(dQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),dQ.forEach(s),bz=h(nn),sh=o(nn,"P",{});var M4=l(sh);$z=p(M4,"You can specify whether the function should be batched or not with the "),Hv=o(M4,"CODE",{});var mQ=l(Hv);xz=p(mQ,"batched"),mQ.forEach(s),vz=p(M4," parameter:"),M4.forEach(s),yz=h(nn),Hn=o(nn,"UL",{});var qb=l(Hn);Gv=o(qb,"LI",{});var hQ=l(Gv);jz=p(hQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),hQ.forEach(s),wz=h(qb),Wv=o(qb,"LI",{});var fQ=l(Wv);Dz=p(fQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),fQ.forEach(s),kz=h(qb),ue=o(qb,"LI",{});var kt=l(ue);Ez=p(kt,"If batched is True and batch_size is "),Yv=o(kt,"CODE",{});var uQ=l(Yv);qz=p(uQ,"n"),uQ.forEach(s),Iz=p(kt," > 1, then the function takes a batch of "),Jv=o(kt,"CODE",{});var gQ=l(Jv);Tz=p(gQ,"n"),gQ.forEach(s),Nz=p(kt," examples as input and can return a batch with "),Kv=o(kt,"CODE",{});var _Q=l(Kv);Pz=p(_Q,"n"),_Q.forEach(s),Fz=p(kt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Zv=o(kt,"CODE",{});var bQ=l(Zv);Az=p(bQ,"n"),bQ.forEach(s),Lz=p(kt,` examples.
A batch is a dictionary, e.g. a batch of `),Xv=o(kt,"CODE",{});var $Q=l(Xv);Sz=p($Q,"n"),$Q.forEach(s),Oz=p(kt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),kt.forEach(s),qb.forEach(s),Cz=h(nn),b(Yl.$$.fragment,nn),nn.forEach(s),zz=h(B),ya=o(B,"DIV",{class:!0});var Ib=l(ya);b(ah.$$.fragment,Ib),Vz=h(Ib),Qv=o(Ib,"P",{});var xQ=l(Qv);Uz=p(xQ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),xQ.forEach(s),Mz=h(Ib),b(Jl.$$.fragment,Ib),Ib.forEach(s),Rz=h(B),le=o(B,"DIV",{class:!0});var Et=l(le);b(nh.$$.fragment,Et),Bz=h(Et),ey=o(Et,"P",{});var vQ=l(ey);Hz=p(vQ,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),vQ.forEach(s),Gz=h(Et),ty=o(Et,"P",{});var yQ=l(ty);Wz=p(yQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),yQ.forEach(s),Yz=h(Et),rh=o(Et,"P",{});var R4=l(rh);Jz=p(R4,"For instance, if your dataset contains 10,000 elements but "),sy=o(R4,"CODE",{});var jQ=l(sy);Kz=p(jQ,"buffer_size"),jQ.forEach(s),Zz=p(R4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),R4.forEach(s),Xz=h(Et),Gn=o(Et,"P",{});var Tb=l(Gn);Qz=p(Tb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Ag=o(Tb,"A",{href:!0});var wQ=l(Ag);eV=p(wQ,"datasets.IterableDataset.skip()"),wQ.forEach(s),tV=p(Tb," or "),Lg=o(Tb,"A",{href:!0});var DQ=l(Lg);sV=p(DQ,"datasets.IterableDataset.take()"),DQ.forEach(s),aV=p(Tb,`
then the order of the shards is kept unchanged.`),Tb.forEach(s),nV=h(Et),b(Kl.$$.fragment,Et),Et.forEach(s),rV=h(B),ja=o(B,"DIV",{class:!0});var Nb=l(ja);b(oh.$$.fragment,Nb),oV=h(Nb),ay=o(Nb,"P",{});var kQ=l(ay);lV=p(kQ,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),kQ.forEach(s),iV=h(Nb),b(Zl.$$.fragment,Nb),Nb.forEach(s),pV=h(B),wa=o(B,"DIV",{class:!0});var Pb=l(wa);b(lh.$$.fragment,Pb),cV=h(Pb),ny=o(Pb,"P",{});var EQ=l(ny);dV=p(EQ,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),EQ.forEach(s),mV=h(Pb),b(Xl.$$.fragment,Pb),Pb.forEach(s),hV=h(B),Da=o(B,"DIV",{class:!0});var Fb=l(Da);b(ih.$$.fragment,Fb),fV=h(Fb),ry=o(Fb,"P",{});var qQ=l(ry);uV=p(qQ,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),qQ.forEach(s),gV=h(Fb),b(Ql.$$.fragment,Fb),Fb.forEach(s),_V=h(B),ka=o(B,"DIV",{class:!0});var Ab=l(ka);b(ph.$$.fragment,Ab),bV=h(Ab),oy=o(Ab,"P",{});var IQ=l(oy);$V=p(IQ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),IQ.forEach(s),xV=h(Ab),b(ei.$$.fragment,Ab),Ab.forEach(s),vV=h(B),Ea=o(B,"DIV",{class:!0});var Lb=l(Ea);b(ch.$$.fragment,Lb),yV=h(Lb),ly=o(Lb,"P",{});var TQ=l(ly);jV=p(TQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),TQ.forEach(s),wV=h(Lb),b(ti.$$.fragment,Lb),Lb.forEach(s),DV=h(B),qa=o(B,"DIV",{class:!0});var Sb=l(qa);b(dh.$$.fragment,Sb),kV=h(Sb),iy=o(Sb,"P",{});var NQ=l(iy);EV=p(NQ,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),NQ.forEach(s),qV=h(Sb),b(si.$$.fragment,Sb),Sb.forEach(s),B.forEach(s),q7=h(a),Wn=o(a,"H2",{class:!0});var B4=l(Wn);ai=o(B4,"A",{id:!0,class:!0,href:!0});var PQ=l(ai);py=o(PQ,"SPAN",{});var FQ=l(py);b(mh.$$.fragment,FQ),FQ.forEach(s),PQ.forEach(s),IV=h(B4),cy=o(B4,"SPAN",{});var AQ=l(cy);TV=p(AQ,"Features"),AQ.forEach(s),B4.forEach(s),I7=h(a),O=o(a,"DIV",{class:!0});var z=l(O);b(hh.$$.fragment,z),NV=h(z),dy=o(z,"P",{});var LQ=l(dy);PV=p(LQ,"A special dictionary that defines the internal structure of a dataset."),LQ.forEach(s),FV=h(z),fh=o(z,"P",{});var H4=l(fh);AV=p(H4,"Instantiated with a dictionary of type "),my=o(H4,"CODE",{});var SQ=l(my);LV=p(SQ,"dict[str, FieldType]"),SQ.forEach(s),SV=p(H4,`, where keys are the desired column names,
and values are the type of that column.`),H4.forEach(s),OV=h(z),Sg=o(z,"P",{});var aY=l(Sg);hy=o(aY,"CODE",{});var OQ=l(hy);CV=p(OQ,"FieldType"),OQ.forEach(s),zV=p(aY," can be one of the following:"),aY.forEach(s),VV=h(z),Y=o(z,"UL",{});var pe=l(Y);fy=o(pe,"LI",{});var CQ=l(fy);Ia=o(CQ,"P",{});var Wf=l(Ia);UV=p(Wf,"a "),Og=o(Wf,"A",{href:!0});var zQ=l(Og);MV=p(zQ,"datasets.Value"),zQ.forEach(s),RV=p(Wf," feature specifies a single typed value, e.g. "),uy=o(Wf,"CODE",{});var VQ=l(uy);BV=p(VQ,"int64"),VQ.forEach(s),HV=p(Wf," or "),gy=o(Wf,"CODE",{});var UQ=l(gy);GV=p(UQ,"string"),UQ.forEach(s),Wf.forEach(s),CQ.forEach(s),WV=h(pe),_y=o(pe,"LI",{});var MQ=l(_y);uh=o(MQ,"P",{});var G4=l(uh);YV=p(G4,"a "),Cg=o(G4,"A",{href:!0});var RQ=l(Cg);JV=p(RQ,"datasets.ClassLabel"),RQ.forEach(s),KV=p(G4,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),G4.forEach(s),MQ.forEach(s),ZV=h(pe),by=o(pe,"LI",{});var BQ=l(by);gh=o(BQ,"P",{});var W4=l(gh);XV=p(W4,"a python "),$y=o(W4,"CODE",{});var HQ=l($y);QV=p(HQ,"dict"),HQ.forEach(s),eU=p(W4,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),W4.forEach(s),BQ.forEach(s),tU=h(pe),_h=o(pe,"LI",{});var Y4=l(_h);Be=o(Y4,"P",{});var rn=l(Be);sU=p(rn,"a python "),xy=o(rn,"CODE",{});var GQ=l(xy);aU=p(GQ,"list"),GQ.forEach(s),nU=p(rn," or a "),zg=o(rn,"A",{href:!0});var WQ=l(zg);rU=p(WQ,"datasets.Sequence"),WQ.forEach(s),oU=p(rn,` specifies that the field contains a list of objects. The python
`),vy=o(rn,"CODE",{});var YQ=l(vy);lU=p(YQ,"list"),YQ.forEach(s),iU=p(rn," or "),Vg=o(rn,"A",{href:!0});var JQ=l(Vg);pU=p(JQ,"datasets.Sequence"),JQ.forEach(s),cU=p(rn,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),rn.forEach(s),dU=h(Y4),b(ni.$$.fragment,Y4),Y4.forEach(s),mU=h(pe),yy=o(pe,"LI",{});var KQ=l(yy);He=o(KQ,"P",{});var on=l(He);hU=p(on,"a "),Ug=o(on,"A",{href:!0});var ZQ=l(Ug);fU=p(ZQ,"Array2D"),ZQ.forEach(s),uU=p(on,", "),Mg=o(on,"A",{href:!0});var XQ=l(Mg);gU=p(XQ,"Array3D"),XQ.forEach(s),_U=p(on,", "),Rg=o(on,"A",{href:!0});var QQ=l(Rg);bU=p(QQ,"Array4D"),QQ.forEach(s),$U=p(on," or "),Bg=o(on,"A",{href:!0});var eee=l(Bg);xU=p(eee,"Array5D"),eee.forEach(s),vU=p(on," feature for multidimensional arrays"),on.forEach(s),KQ.forEach(s),yU=h(pe),jy=o(pe,"LI",{});var tee=l(jy);bh=o(tee,"P",{});var J4=l(bh);jU=p(J4,"an "),Hg=o(J4,"A",{href:!0});var see=l(Hg);wU=p(see,"Audio"),see.forEach(s),DU=p(J4,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),J4.forEach(s),tee.forEach(s),kU=h(pe),wy=o(pe,"LI",{});var aee=l(wy);Gt=o(aee,"P",{});var vp=l(Gt);EU=p(vp,"an "),Gg=o(vp,"A",{href:!0});var nee=l(Gg);qU=p(nee,"Image"),nee.forEach(s),IU=p(vp," feature to store the absolute path to an image file, an "),Dy=o(vp,"CODE",{});var ree=l(Dy);TU=p(ree,"np.ndarray"),ree.forEach(s),NU=p(vp," object, a "),ky=o(vp,"CODE",{});var oee=l(ky);PU=p(oee,"PIL.Image.Image"),oee.forEach(s),FU=p(vp,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),vp.forEach(s),aee.forEach(s),AU=h(pe),Ey=o(pe,"LI",{});var lee=l(Ey);ri=o(lee,"P",{});var l7=l(ri);Wg=o(l7,"A",{href:!0});var iee=l(Wg);LU=p(iee,"datasets.Translation"),iee.forEach(s),SU=p(l7," and "),Yg=o(l7,"A",{href:!0});var pee=l(Yg);OU=p(pee,"datasets.TranslationVariableLanguages"),pee.forEach(s),CU=p(l7,", the two features specific to Machine Translation"),l7.forEach(s),lee.forEach(s),pe.forEach(s),zU=h(z),Ta=o(z,"DIV",{class:!0});var Ob=l(Ta);b($h.$$.fragment,Ob),VU=h(Ob),qy=o(Ob,"P",{});var cee=l(qy);UU=p(cee,"Make a deep copy of Features."),cee.forEach(s),MU=h(Ob),b(oi.$$.fragment,Ob),Ob.forEach(s),RU=h(z),li=o(z,"DIV",{class:!0});var K4=l(li);b(xh.$$.fragment,K4),BU=h(K4),Iy=o(K4,"P",{});var dee=l(Iy);HU=p(dee,"Decode batch with custom feature decoding."),dee.forEach(s),K4.forEach(s),GU=h(z),ii=o(z,"DIV",{class:!0});var Z4=l(ii);b(vh.$$.fragment,Z4),WU=h(Z4),Ty=o(Z4,"P",{});var mee=l(Ty);YU=p(mee,"Decode column with custom feature decoding."),mee.forEach(s),Z4.forEach(s),JU=h(z),pi=o(z,"DIV",{class:!0});var X4=l(pi);b(yh.$$.fragment,X4),KU=h(X4),Ny=o(X4,"P",{});var hee=l(Ny);ZU=p(hee,"Decode example with custom feature decoding."),hee.forEach(s),X4.forEach(s),XU=h(z),ci=o(z,"DIV",{class:!0});var Q4=l(ci);b(jh.$$.fragment,Q4),QU=h(Q4),Py=o(Q4,"P",{});var fee=l(Py);eM=p(fee,"Encode batch into a format for Arrow."),fee.forEach(s),Q4.forEach(s),tM=h(z),di=o(z,"DIV",{class:!0});var eD=l(di);b(wh.$$.fragment,eD),sM=h(eD),Fy=o(eD,"P",{});var uee=l(Fy);aM=p(uee,"Encode example into a format for Arrow."),uee.forEach(s),eD.forEach(s),nM=h(z),gt=o(z,"DIV",{class:!0});var yp=l(gt);b(Dh.$$.fragment,yp),rM=h(yp),Ay=o(yp,"P",{});var gee=l(Ay);oM=p(gee,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),gee.forEach(s),lM=h(yp),Ly=o(yp,"P",{});var _ee=l(Ly);iM=p(_ee,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),_ee.forEach(s),pM=h(yp),b(mi.$$.fragment,yp),yp.forEach(s),cM=h(z),hi=o(z,"DIV",{class:!0});var tD=l(hi);b(kh.$$.fragment,tD),dM=h(tD),Sy=o(tD,"P",{});var bee=l(Sy);mM=p(bee,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),bee.forEach(s),tD.forEach(s),hM=h(z),Fe=o(z,"DIV",{class:!0});var ln=l(Fe);b(Eh.$$.fragment,ln),fM=h(ln),Oy=o(ln,"P",{});var $ee=l(Oy);uM=p($ee,"Construct Features from dict."),$ee.forEach(s),gM=h(ln),Cy=o(ln,"P",{});var xee=l(Cy);_M=p(xee,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),xee.forEach(s),bM=h(ln),Wt=o(ln,"P",{});var jp=l(Wt);$M=p(jp,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Jg=o(jp,"A",{href:!0});var vee=l(Jg);xM=p(vee,"DatasetInfo"),vee.forEach(s),vM=p(jp,` that was dumped to a JSON object. This acts as an analogue to
`),Kg=o(jp,"A",{href:!0});var yee=l(Kg);yM=p(yee,"Features.from_arrow_schema()"),yee.forEach(s),jM=p(jp,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Zg=o(jp,"A",{href:!0});var jee=l(Zg);wM=p(jee,"Value"),jee.forEach(s),DM=p(jp," automatically performs."),jp.forEach(s),kM=h(ln),b(fi.$$.fragment,ln),ln.forEach(s),EM=h(z),_t=o(z,"DIV",{class:!0});var wp=l(_t);b(qh.$$.fragment,wp),qM=h(wp),zy=o(wp,"P",{});var wee=l(zy);IM=p(wee,"Reorder Features fields to match the field order of other Features."),wee.forEach(s),TM=h(wp),Vy=o(wp,"P",{});var Dee=l(Vy);NM=p(Dee,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),Dee.forEach(s),PM=h(wp),b(ui.$$.fragment,wp),wp.forEach(s),z.forEach(s),T7=h(a),Yt=o(a,"DIV",{class:!0});var Cb=l(Yt);b(Ih.$$.fragment,Cb),FM=h(Cb),Uy=o(Cb,"P",{});var kee=l(Uy);AM=p(kee,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),kee.forEach(s),LM=h(Cb),b(gi.$$.fragment,Cb),Cb.forEach(s),N7=h(a),J=o(a,"DIV",{class:!0});var Le=l(J);b(Th.$$.fragment,Le),SM=h(Le),My=o(Le,"P",{});var Eee=l(My);OM=p(Eee,"Feature type for integer class labels."),Eee.forEach(s),CM=h(Le),Nh=o(Le,"P",{});var sD=l(Nh);zM=p(sD,"There are 3 ways to define a "),Ry=o(sD,"EM",{});var qee=l(Ry);VM=p(qee,"ClassLabel"),qee.forEach(s),UM=p(sD,", which correspond to the 3 arguments:"),sD.forEach(s),MM=h(Le),Yn=o(Le,"UL",{});var zb=l(Yn);Xg=o(zb,"LI",{});var nY=l(Xg);By=o(nY,"EM",{});var Iee=l(By);RM=p(Iee,"num_classes"),Iee.forEach(s),BM=p(nY,": Create 0 to (num_classes-1) labels."),nY.forEach(s),HM=h(zb),Qg=o(zb,"LI",{});var rY=l(Qg);Hy=o(rY,"EM",{});var Tee=l(Hy);GM=p(Tee,"names"),Tee.forEach(s),WM=p(rY,": List of label strings."),rY.forEach(s),YM=h(zb),e_=o(zb,"LI",{});var oY=l(e_);Gy=o(oY,"EM",{});var Nee=l(Gy);JM=p(Nee,"names_file"),Nee.forEach(s),KM=p(oY,": File containing the list of labels."),oY.forEach(s),zb.forEach(s),ZM=h(Le),b(_i.$$.fragment,Le),XM=h(Le),Na=o(Le,"DIV",{class:!0});var Vb=l(Na);b(Ph.$$.fragment,Vb),QM=h(Vb),Wy=o(Vb,"P",{});var Pee=l(Wy);eR=p(Pee,"Conversion integer => class name string."),Pee.forEach(s),tR=h(Vb),b(bi.$$.fragment,Vb),Vb.forEach(s),sR=h(Le),Pa=o(Le,"DIV",{class:!0});var Ub=l(Pa);b(Fh.$$.fragment,Ub),aR=h(Ub),Yy=o(Ub,"P",{});var Fee=l(Yy);nR=p(Fee,"Conversion class name string => integer."),Fee.forEach(s),rR=h(Ub),b($i.$$.fragment,Ub),Ub.forEach(s),Le.forEach(s),P7=h(a),Ge=o(a,"DIV",{class:!0});var Dp=l(Ge);b(Ah.$$.fragment,Dp),oR=h(Dp),Jy=o(Dp,"P",{});var Aee=l(Jy);lR=p(Aee,"The Value dtypes are as follows:"),Aee.forEach(s),iR=h(Dp),Ky=o(Dp,"P",{});var Lee=l(Ky);pR=p(Lee,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),Lee.forEach(s),cR=h(Dp),b(xi.$$.fragment,Dp),Dp.forEach(s),F7=h(a),Q=o(a,"DIV",{class:!0});var qt=l(Q);b(Lh.$$.fragment,qt),dR=h(qt),t_=o(qt,"P",{});var lY=l(t_);Zy=o(lY,"CODE",{});var See=l(Zy);mR=p(See,"FeatureConnector"),See.forEach(s),hR=p(lY,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),lY.forEach(s),fR=h(qt),Xy=o(qt,"P",{});var Oee=l(Xy);uR=p(Oee,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),Oee.forEach(s),gR=h(qt),Sh=o(qt,"P",{});var aD=l(Sh);_R=p(aD,"Output: A dictionary mapping string language codes to translations as "),Qy=o(aD,"CODE",{});var Cee=l(Qy);bR=p(Cee,"Text"),Cee.forEach(s),$R=p(aD,`
features.`),aD.forEach(s),xR=h(qt),b(vi.$$.fragment,qt),vR=h(qt),yi=o(qt,"DIV",{class:!0});var nD=l(yi);b(Oh.$$.fragment,nD),yR=h(nD),ej=o(nD,"P",{});var zee=l(ej);jR=p(zee,"Flatten the Translation feature into a dictionary."),zee.forEach(s),nD.forEach(s),qt.forEach(s),A7=h(a),ee=o(a,"DIV",{class:!0});var It=l(ee);b(Ch.$$.fragment,It),wR=h(It),s_=o(It,"P",{});var iY=l(s_);tj=o(iY,"CODE",{});var Vee=l(tj);DR=p(Vee,"FeatureConnector"),Vee.forEach(s),kR=p(iY,` for translations with variable languages per example.
Here for compatiblity with tfds.`),iY.forEach(s),ER=h(It),sj=o(It,"P",{});var Uee=l(sj);qR=p(Uee,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),Uee.forEach(s),IR=h(It),aj=o(It,"P",{});var Mee=l(aj);TR=p(Mee,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),Mee.forEach(s),NR=h(It),b(ji.$$.fragment,It),PR=h(It),wi=o(It,"DIV",{class:!0});var rD=l(wi);b(zh.$$.fragment,rD),FR=h(rD),nj=o(rD,"P",{});var Ree=l(nj);AR=p(Ree,"Flatten the TranslationVariableLanguages feature into a dictionary."),Ree.forEach(s),rD.forEach(s),It.forEach(s),L7=h(a),Jt=o(a,"DIV",{class:!0});var Mb=l(Jt);b(Vh.$$.fragment,Mb),LR=h(Mb),rj=o(Mb,"P",{});var Bee=l(rj);SR=p(Bee,"Create a two-dimensional array."),Bee.forEach(s),OR=h(Mb),b(Di.$$.fragment,Mb),Mb.forEach(s),S7=h(a),Kt=o(a,"DIV",{class:!0});var Rb=l(Kt);b(Uh.$$.fragment,Rb),CR=h(Rb),oj=o(Rb,"P",{});var Hee=l(oj);zR=p(Hee,"Create a three-dimensional array."),Hee.forEach(s),VR=h(Rb),b(ki.$$.fragment,Rb),Rb.forEach(s),O7=h(a),Zt=o(a,"DIV",{class:!0});var Bb=l(Zt);b(Mh.$$.fragment,Bb),UR=h(Bb),lj=o(Bb,"P",{});var Gee=l(lj);MR=p(Gee,"Create a four-dimensional array."),Gee.forEach(s),RR=h(Bb),b(Ei.$$.fragment,Bb),Bb.forEach(s),C7=h(a),Xt=o(a,"DIV",{class:!0});var Hb=l(Xt);b(Rh.$$.fragment,Hb),BR=h(Hb),ij=o(Hb,"P",{});var Wee=l(ij);HR=p(Wee,"Create a five-dimensional array."),Wee.forEach(s),GR=h(Hb),b(qi.$$.fragment,Hb),Hb.forEach(s),z7=h(a),M=o(a,"DIV",{class:!0});var H=l(M);b(Bh.$$.fragment,H),WR=h(H),pj=o(H,"P",{});var Yee=l(pj);YR=p(Yee,"Audio Feature to extract audio data from an audio file."),Yee.forEach(s),JR=h(H),cj=o(H,"P",{});var Jee=l(cj);KR=p(Jee,"Input: The Audio feature accepts as input:"),Jee.forEach(s),ZR=h(H),Jn=o(H,"UL",{});var Gb=l(Jn);dj=o(Gb,"LI",{});var Kee=l(dj);Hh=o(Kee,"P",{});var oD=l(Hh);XR=p(oD,"A "),mj=o(oD,"CODE",{});var Zee=l(mj);QR=p(Zee,"str"),Zee.forEach(s),eB=p(oD,": Absolute path to the audio file (i.e. random access is allowed)."),oD.forEach(s),Kee.forEach(s),tB=h(Gb),Kn=o(Gb,"LI",{});var Wb=l(Kn);Gh=o(Wb,"P",{});var lD=l(Gh);sB=p(lD,"A "),hj=o(lD,"CODE",{});var Xee=l(hj);aB=p(Xee,"dict"),Xee.forEach(s),nB=p(lD," with the keys:"),lD.forEach(s),rB=h(Wb),Wh=o(Wb,"UL",{});var iD=l(Wh);fj=o(iD,"LI",{});var Qee=l(fj);oB=p(Qee,"path: String with relative path of the audio file to the archive file."),Qee.forEach(s),lB=h(iD),uj=o(iD,"LI",{});var ete=l(uj);iB=p(ete,"bytes: Bytes content of the audio file."),ete.forEach(s),iD.forEach(s),pB=h(Wb),gj=o(Wb,"P",{});var tte=l(gj);cB=p(tte,"This is useful for archived files with sequential access."),tte.forEach(s),Wb.forEach(s),dB=h(Gb),Zn=o(Gb,"LI",{});var Yb=l(Zn);Yh=o(Yb,"P",{});var pD=l(Yh);mB=p(pD,"A "),_j=o(pD,"CODE",{});var ste=l(_j);hB=p(ste,"dict"),ste.forEach(s),fB=p(pD," with the keys:"),pD.forEach(s),uB=h(Yb),Xn=o(Yb,"UL",{});var Jb=l(Xn);bj=o(Jb,"LI",{});var ate=l(bj);gB=p(ate,"path: String with relative path of the audio file to the archive file."),ate.forEach(s),_B=h(Jb),$j=o(Jb,"LI",{});var nte=l($j);bB=p(nte,"array: Array containing the audio sample"),nte.forEach(s),$B=h(Jb),xj=o(Jb,"LI",{});var rte=l(xj);xB=p(rte,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),rte.forEach(s),Jb.forEach(s),vB=h(Yb),vj=o(Yb,"P",{});var ote=l(vj);yB=p(ote,"This is useful for archived files with sequential access."),ote.forEach(s),Yb.forEach(s),Gb.forEach(s),jB=h(H),b(Ii.$$.fragment,H),wB=h(H),Fa=o(H,"DIV",{class:!0});var Kb=l(Fa);b(Jh.$$.fragment,Kb),DB=h(Kb),yj=o(Kb,"P",{});var lte=l(yj);kB=p(lte,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),lte.forEach(s),EB=h(Kb),Qt=o(Kb,"UL",{});var kp=l(Qt);jj=o(kp,"LI",{});var ite=l(jj);qB=p(ite,"pa.string() - it must contain the \u201Cpath\u201D data"),ite.forEach(s),IB=h(kp),wj=o(kp,"LI",{});var pte=l(wj);TB=p(pte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),pte.forEach(s),NB=h(kp),Dj=o(kp,"LI",{});var cte=l(Dj);PB=p(cte,"pa.struct({\u201Cpath\u201D: pa.string()})"),cte.forEach(s),FB=h(kp),kj=o(kp,"LI",{});var dte=l(kj);AB=p(dte,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),dte.forEach(s),kp.forEach(s),Kb.forEach(s),LB=h(H),Ti=o(H,"DIV",{class:!0});var cD=l(Ti);b(Kh.$$.fragment,cD),SB=h(cD),Ej=o(cD,"P",{});var mte=l(Ej);OB=p(mte,"Decode example audio file into audio data."),mte.forEach(s),cD.forEach(s),CB=h(H),Ni=o(H,"DIV",{class:!0});var dD=l(Ni);b(Zh.$$.fragment,dD),zB=h(dD),qj=o(dD,"P",{});var hte=l(qj);VB=p(hte,"Embed audio files into the Arrow array."),hte.forEach(s),dD.forEach(s),UB=h(H),Pi=o(H,"DIV",{class:!0});var mD=l(Pi);b(Xh.$$.fragment,mD),MB=h(mD),Ij=o(mD,"P",{});var fte=l(Ij);RB=p(fte,"Encode example into a format for Arrow."),fte.forEach(s),mD.forEach(s),BB=h(H),Fi=o(H,"DIV",{class:!0});var hD=l(Fi);b(Qh.$$.fragment,hD),HB=h(hD),Tj=o(hD,"P",{});var ute=l(Tj);GB=p(ute,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),ute.forEach(s),hD.forEach(s),H.forEach(s),V7=h(a),R=o(a,"DIV",{class:!0});var G=l(R);b(ef.$$.fragment,G),WB=h(G),Nj=o(G,"P",{});var gte=l(Nj);YB=p(gte,"Image feature to read image data from an image file."),gte.forEach(s),JB=h(G),Pj=o(G,"P",{});var _te=l(Pj);KB=p(_te,"Input: The Image feature accepts as input:"),_te.forEach(s),ZB=h(G),es=o(G,"UL",{});var Ep=l(es);Fj=o(Ep,"LI",{});var bte=l(Fj);tf=o(bte,"P",{});var fD=l(tf);XB=p(fD,"A "),Aj=o(fD,"CODE",{});var $te=l(Aj);QB=p($te,"str"),$te.forEach(s),eH=p(fD,": Absolute path to the image file (i.e. random access is allowed)."),fD.forEach(s),bte.forEach(s),tH=h(Ep),Qn=o(Ep,"LI",{});var Zb=l(Qn);sf=o(Zb,"P",{});var uD=l(sf);sH=p(uD,"A "),Lj=o(uD,"CODE",{});var xte=l(Lj);aH=p(xte,"dict"),xte.forEach(s),nH=p(uD," with the keys:"),uD.forEach(s),rH=h(Zb),af=o(Zb,"UL",{});var gD=l(af);Sj=o(gD,"LI",{});var vte=l(Sj);oH=p(vte,"path: String with relative path of the image file to the archive file."),vte.forEach(s),lH=h(gD),Oj=o(gD,"LI",{});var yte=l(Oj);iH=p(yte,"bytes: Bytes of the image file."),yte.forEach(s),gD.forEach(s),pH=h(Zb),Cj=o(Zb,"P",{});var jte=l(Cj);cH=p(jte,"This is useful for archived files with sequential access."),jte.forEach(s),Zb.forEach(s),dH=h(Ep),zj=o(Ep,"LI",{});var wte=l(zj);nf=o(wte,"P",{});var _D=l(nf);mH=p(_D,"An "),Vj=o(_D,"CODE",{});var Dte=l(Vj);hH=p(Dte,"np.ndarray"),Dte.forEach(s),fH=p(_D,": NumPy array representing an image."),_D.forEach(s),wte.forEach(s),uH=h(Ep),Uj=o(Ep,"LI",{});var kte=l(Uj);rf=o(kte,"P",{});var bD=l(rf);gH=p(bD,"A "),Mj=o(bD,"CODE",{});var Ete=l(Mj);_H=p(Ete,"PIL.Image.Image"),Ete.forEach(s),bH=p(bD,": PIL image object."),bD.forEach(s),kte.forEach(s),Ep.forEach(s),$H=h(G),b(Ai.$$.fragment,G),xH=h(G),Aa=o(G,"DIV",{class:!0});var Xb=l(Aa);b(of.$$.fragment,Xb),vH=h(Xb),Rj=o(Xb,"P",{});var qte=l(Rj);yH=p(qte,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),qte.forEach(s),jH=h(Xb),We=o(Xb,"UL",{});var pn=l(We);Bj=o(pn,"LI",{});var Ite=l(Bj);wH=p(Ite,"pa.string() - it must contain the \u201Cpath\u201D data"),Ite.forEach(s),DH=h(pn),Hj=o(pn,"LI",{});var Tte=l(Hj);kH=p(Tte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Tte.forEach(s),EH=h(pn),Gj=o(pn,"LI",{});var Nte=l(Gj);qH=p(Nte,"pa.struct({\u201Cpath\u201D: pa.string()})"),Nte.forEach(s),IH=h(pn),Wj=o(pn,"LI",{});var Pte=l(Wj);TH=p(Pte,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Pte.forEach(s),NH=h(pn),Yj=o(pn,"LI",{});var Fte=l(Yj);PH=p(Fte,"pa.list(*) - it must contain the image array data"),Fte.forEach(s),pn.forEach(s),Xb.forEach(s),FH=h(G),Li=o(G,"DIV",{class:!0});var $D=l(Li);b(lf.$$.fragment,$D),AH=h($D),Jj=o($D,"P",{});var Ate=l(Jj);LH=p(Ate,"Decode example image file into image data."),Ate.forEach(s),$D.forEach(s),SH=h(G),Si=o(G,"DIV",{class:!0});var xD=l(Si);b(pf.$$.fragment,xD),OH=h(xD),Kj=o(xD,"P",{});var Lte=l(Kj);CH=p(Lte,"Embed image files into the Arrow array."),Lte.forEach(s),xD.forEach(s),zH=h(G),Oi=o(G,"DIV",{class:!0});var vD=l(Oi);b(cf.$$.fragment,vD),VH=h(vD),Zj=o(vD,"P",{});var Ste=l(Zj);UH=p(Ste,"Encode example into a format for Arrow."),Ste.forEach(s),vD.forEach(s),MH=h(G),Ci=o(G,"DIV",{class:!0});var yD=l(Ci);b(df.$$.fragment,yD),RH=h(yD),Xj=o(yD,"P",{});var Ote=l(Xj);BH=p(Ote,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),Ote.forEach(s),yD.forEach(s),G.forEach(s),U7=h(a),er=o(a,"H2",{class:!0});var jD=l(er);zi=o(jD,"A",{id:!0,class:!0,href:!0});var Cte=l(zi);Qj=o(Cte,"SPAN",{});var zte=l(Qj);b(mf.$$.fragment,zte),zte.forEach(s),Cte.forEach(s),HH=h(jD),e0=o(jD,"SPAN",{});var Vte=l(e0);GH=p(Vte,"MetricInfo"),Vte.forEach(s),jD.forEach(s),M7=h(a),te=o(a,"DIV",{class:!0});var Tt=l(te);b(hf.$$.fragment,Tt),WH=h(Tt),t0=o(Tt,"P",{});var Ute=l(t0);YH=p(Ute,"Information about a metric."),Ute.forEach(s),JH=h(Tt),a_=o(Tt,"P",{});var pY=l(a_);s0=o(pY,"CODE",{});var Mte=l(s0);KH=p(Mte,"MetricInfo"),Mte.forEach(s),ZH=p(pY,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),pY.forEach(s),XH=h(Tt),a0=o(Tt,"P",{});var Rte=l(a0);QH=p(Rte,"Note: Not all fields are known on construction and may be updated later."),Rte.forEach(s),eG=h(Tt),La=o(Tt,"DIV",{class:!0});var Qb=l(La);b(ff.$$.fragment,Qb),tG=h(Qb),uf=o(Qb,"P",{});var wD=l(uf);sG=p(wD,"Create MetricInfo from the JSON file in "),n0=o(wD,"CODE",{});var Bte=l(n0);aG=p(Bte,"metric_info_dir"),Bte.forEach(s),nG=p(wD,"."),wD.forEach(s),rG=h(Qb),b(Vi.$$.fragment,Qb),Qb.forEach(s),oG=h(Tt),Sa=o(Tt,"DIV",{class:!0});var e$=l(Sa);b(gf.$$.fragment,e$),lG=h(e$),ts=o(e$,"P",{});var qp=l(ts);iG=p(qp,"Write "),r0=o(qp,"CODE",{});var Hte=l(r0);pG=p(Hte,"MetricInfo"),Hte.forEach(s),cG=p(qp," as JSON to "),o0=o(qp,"CODE",{});var Gte=l(o0);dG=p(Gte,"metric_info_dir"),Gte.forEach(s),mG=p(qp,`.
Also save the license separately in LICENCE.
If `),l0=o(qp,"CODE",{});var Wte=l(l0);hG=p(Wte,"pretty_print"),Wte.forEach(s),fG=p(qp," is True, the JSON will be pretty-printed with the indent level of 4."),qp.forEach(s),uG=h(e$),b(Ui.$$.fragment,e$),e$.forEach(s),Tt.forEach(s),R7=h(a),tr=o(a,"H2",{class:!0});var DD=l(tr);Mi=o(DD,"A",{id:!0,class:!0,href:!0});var Yte=l(Mi);i0=o(Yte,"SPAN",{});var Jte=l(i0);b(_f.$$.fragment,Jte),Jte.forEach(s),Yte.forEach(s),gG=h(DD),p0=o(DD,"SPAN",{});var Kte=l(p0);_G=p(Kte,"Metric"),Kte.forEach(s),DD.forEach(s),B7=h(a),Oa=o(a,"P",{});var t$=l(Oa);bG=p(t$,"The base class "),c0=o(t$,"CODE",{});var Zte=l(c0);$G=p(Zte,"Metric"),Zte.forEach(s),xG=p(t$," implements a Metric backed by one or several "),n_=o(t$,"A",{href:!0});var Xte=l(n_);vG=p(Xte,"Dataset"),Xte.forEach(s),yG=p(t$,"."),t$.forEach(s),H7=h(a),se=o(a,"DIV",{class:!0});var Nt=l(se);b(bf.$$.fragment,Nt),jG=h(Nt),d0=o(Nt,"P",{});var Qte=l(d0);wG=p(Qte,"A Metric is the base class and common API for all metrics."),Qte.forEach(s),DG=h(Nt),Ca=o(Nt,"DIV",{class:!0});var s$=l(Ca);b($f.$$.fragment,s$),kG=h(s$),m0=o(s$,"P",{});var ese=l(m0);EG=p(ese,"Add one prediction and reference for the metric\u2019s stack."),ese.forEach(s),qG=h(s$),b(Ri.$$.fragment,s$),s$.forEach(s),IG=h(Nt),za=o(Nt,"DIV",{class:!0});var a$=l(za);b(xf.$$.fragment,a$),TG=h(a$),h0=o(a$,"P",{});var tse=l(h0);NG=p(tse,"Add a batch of predictions and references for the metric\u2019s stack."),tse.forEach(s),PG=h(a$),b(Bi.$$.fragment,a$),a$.forEach(s),FG=h(Nt),bt=o(Nt,"DIV",{class:!0});var Ip=l(bt);b(vf.$$.fragment,Ip),AG=h(Ip),f0=o(Ip,"P",{});var sse=l(f0);LG=p(sse,"Compute the metrics."),sse.forEach(s),SG=h(Ip),u0=o(Ip,"P",{});var ase=l(u0);OG=p(ase,"Usage of positional arguments is not allowed to prevent mistakes."),ase.forEach(s),CG=h(Ip),b(Hi.$$.fragment,Ip),Ip.forEach(s),zG=h(Nt),Gi=o(Nt,"DIV",{class:!0});var kD=l(Gi);b(yf.$$.fragment,kD),VG=h(kD),g0=o(kD,"P",{});var nse=l(g0);UG=p(nse,"Downloads and prepares dataset for reading."),nse.forEach(s),kD.forEach(s),Nt.forEach(s),G7=h(a),sr=o(a,"H2",{class:!0});var ED=l(sr);Wi=o(ED,"A",{id:!0,class:!0,href:!0});var rse=l(Wi);_0=o(rse,"SPAN",{});var ose=l(_0);b(jf.$$.fragment,ose),ose.forEach(s),rse.forEach(s),MG=h(ED),b0=o(ED,"SPAN",{});var lse=l(b0);RG=p(lse,"Filesystems"),lse.forEach(s),ED.forEach(s),W7=h(a),C=o(a,"DIV",{class:!0});var V=l(C);b(wf.$$.fragment,V),BG=h(V),Yi=o(V,"P",{});var i7=l(Yi);$0=o(i7,"CODE",{});var ise=l($0);HG=p(ise,"datasets.filesystems.S3FileSystem"),ise.forEach(s),GG=p(i7," is a subclass of "),Df=o(i7,"A",{href:!0,rel:!0});var pse=l(Df);x0=o(pse,"CODE",{});var cse=l(x0);WG=p(cse,"s3fs.S3FileSystem"),cse.forEach(s),pse.forEach(s),YG=p(i7,"."),i7.forEach(s),JG=h(V),ss=o(V,"P",{});var Tp=l(ss);KG=p(Tp,"Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),v0=o(Tp,"CODE",{});var dse=l(v0);ZG=p(dse,"key="),dse.forEach(s),XG=p(Tp,", "),y0=o(Tp,"CODE",{});var mse=l(y0);QG=p(mse,"secret="),mse.forEach(s),eW=p(Tp,") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),j0=o(Tp,"CODE",{});var hse=l(j0);tW=p(hse,"anon=True"),hse.forEach(s),sW=p(Tp,"."),Tp.forEach(s),aW=h(V),w0=o(V,"P",{});var fse=l(w0);nW=p(fse,"Examples:"),fse.forEach(s),rW=h(V),D0=o(V,"P",{});var use=l(D0);oW=p(use,"Listing files from public S3 bucket."),use.forEach(s),lW=h(V),b(Ji.$$.fragment,V),iW=h(V),ar=o(V,"P",{});var n$=l(ar);pW=p(n$,"Listing files from private S3 bucket using "),k0=o(n$,"CODE",{});var gse=l(k0);cW=p(gse,"aws_access_key_id"),gse.forEach(s),dW=p(n$," and "),E0=o(n$,"CODE",{});var _se=l(E0);mW=p(_se,"aws_secret_access_key"),_se.forEach(s),hW=p(n$,"."),n$.forEach(s),fW=h(V),b(Ki.$$.fragment,V),uW=h(V),as=o(V,"P",{});var Np=l(as);gW=p(Np,"Using "),q0=o(Np,"CODE",{});var bse=l(q0);_W=p(bse,"S3Filesystem"),bse.forEach(s),bW=p(Np," with "),I0=o(Np,"CODE",{});var $se=l(I0);$W=p($se,"botocore.session.Session"),$se.forEach(s),xW=p(Np," and custom "),T0=o(Np,"CODE",{});var xse=l(T0);vW=p(xse,"aws_profile"),xse.forEach(s),yW=p(Np,"."),Np.forEach(s),jW=h(V),b(Zi.$$.fragment,V),wW=h(V),nr=o(V,"P",{});var r$=l(nr);DW=p(r$,"Loading dataset from S3 using "),N0=o(r$,"CODE",{});var vse=l(N0);kW=p(vse,"S3Filesystem"),vse.forEach(s),EW=p(r$," and "),r_=o(r$,"A",{href:!0});var yse=l(r_);qW=p(yse,"load_from_disk()"),yse.forEach(s),IW=p(r$,"."),r$.forEach(s),TW=h(V),b(Xi.$$.fragment,V),NW=h(V),rr=o(V,"P",{});var o$=l(rr);PW=p(o$,"Saving dataset to S3 using "),P0=o(o$,"CODE",{});var jse=l(P0);FW=p(jse,"S3Filesystem"),jse.forEach(s),AW=p(o$," and "),o_=o(o$,"A",{href:!0});var wse=l(o_);LW=p(wse,"Dataset.save_to_disk()"),wse.forEach(s),SW=p(o$,"."),o$.forEach(s),OW=h(V),b(Qi.$$.fragment,V),V.forEach(s),Y7=h(a),or=o(a,"DIV",{class:!0});var qD=l(or);b(kf.$$.fragment,qD),CW=h(qD),lr=o(qD,"P",{});var l$=l(lr);zW=p(l$,"preprocesses "),F0=o(l$,"EM",{});var Dse=l(F0);VW=p(Dse,"dataset_path"),Dse.forEach(s),UW=p(l$," and removes remote filesystem (e.g. removing "),A0=o(l$,"CODE",{});var kse=l(A0);MW=p(kse,"s3://"),kse.forEach(s),RW=p(l$,")"),l$.forEach(s),qD.forEach(s),J7=h(a),ir=o(a,"DIV",{class:!0});var ID=l(ir);b(Ef.$$.fragment,ID),BW=h(ID),L0=o(ID,"P",{});var Ese=l(L0);HW=p(Ese,"Validates if filesystem has remote protocol."),Ese.forEach(s),ID.forEach(s),K7=h(a),pr=o(a,"H2",{class:!0});var TD=l(pr);ep=o(TD,"A",{id:!0,class:!0,href:!0});var qse=l(ep);S0=o(qse,"SPAN",{});var Ise=l(S0);b(qf.$$.fragment,Ise),Ise.forEach(s),qse.forEach(s),GW=h(TD),O0=o(TD,"SPAN",{});var Tse=l(O0);WW=p(Tse,"Fingerprint"),Tse.forEach(s),TD.forEach(s),Z7=h(a),cr=o(a,"DIV",{class:!0});var ND=l(cr);b(If.$$.fragment,ND),YW=h(ND),C0=o(ND,"P",{});var Nse=l(C0);JW=p(Nse,"Hasher that accepts python objects as inputs."),Nse.forEach(s),ND.forEach(s),this.h()},h(){w(c,"name","hf:doc:metadata"),w(c,"content",JSON.stringify(ire)),w(n,"id","main-classes"),w(n,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(n,"href","#main-classes"),w(f,"class","relative group"),w(_e,"id","datasets.DatasetInfo"),w(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(_e,"href","#datasets.DatasetInfo"),w(Se,"class","relative group"),w(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ar,"id","datasets.Dataset"),w(Ar,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ar,"href","#datasets.Dataset"),w(mn,"class","relative group"),w(Kf,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"),w(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zf,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"),w($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xf,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"),w(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hr,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.__len__"),w($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qf,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.map"),w(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(eu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format"),w(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(tu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(su,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format"),w(au,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ru,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(ou,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format"),w(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format"),w(iu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(pu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Image"),w(du,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Audio"),w(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(hu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Image"),w(fu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Audio"),w(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(uu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(Bc,"rel","nofollow"),w(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(Gc,"rel","nofollow"),w(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($u,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo"),w(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vu,"href","/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit"),w(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(yu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ju,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Du,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ku,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Iu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features"),w(Su,"href","/docs/datasets/package_reference/task_templates"),w(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ou,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"),w(Cu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"),w(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"),w(Vu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset"),w(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(Mu,"href","/docs/datasets/pr_4356/en/package_reference/loading_methods#datasets.load_dataset"),w(Ru,"href","/docs/datasets/pr_4356/en/package_reference/loading_methods#datasets.load_dataset"),w(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(Hu,"href","/docs/datasets/pr_4356/en/package_reference/loading_methods#datasets.load_dataset"),w(Gu,"href","/docs/datasets/pr_4356/en/package_reference/loading_methods#datasets.load_dataset"),w(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(Yu,"href","/docs/datasets/pr_4356/en/package_reference/loading_methods#datasets.load_dataset"),w(Ju,"href","/docs/datasets/pr_4356/en/package_reference/loading_methods#datasets.load_dataset"),w(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xo,"id","datasets.DatasetDict"),w(Xo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Xo,"href","#datasets.DatasetDict"),w(qn,"class","relative group"),w(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(al,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.__len__"),w(Qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ul,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(Xu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetDict.set_format"),w(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qu,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.set_format"),w(eg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(tg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.map"),w(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.map"),w(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ag,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.map"),w(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ng,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Image"),w(rg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Audio"),w(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(og,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(lg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Image"),w(ig,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Audio"),w(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features"),w(dg,"href","/docs/datasets/package_reference/task_templates"),w(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mg,"id","package_reference_features"),w(Fl,"id","datasets.IterableDataset"),w(Fl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Fl,"href","#datasets.IterableDataset"),w(Un,"class","relative group"),w(hg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset"),w(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ug,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(gg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset.take"),w(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo"),w(Bl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xg,"href","/docs/datasets/pr_4356/en/package_reference/builder_classes#datasets.NamedSplit"),w(Hl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gl,"id","datasets.IterableDatasetDict"),w(Gl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Gl,"href","#datasets.IterableDatasetDict"),w(Bn,"class","relative group"),w(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ag,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(Lg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.IterableDataset.take"),w(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ai,"id","datasets.Features"),w(ai,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ai,"href","#datasets.Features"),w(Wn,"class","relative group"),w(Og,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Value"),w(Cg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.ClassLabel"),w(zg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Sequence"),w(Vg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Sequence"),w(Ug,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Array2D"),w(Mg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Array3D"),w(Rg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Array4D"),w(Bg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Array5D"),w(Hg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Audio"),w(Gg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Image"),w(Wg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Translation"),w(Yg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),w(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Jg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.DatasetInfo"),w(Kg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),w(Zg,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Value"),w(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(yi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ti,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ni,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Si,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zi,"id","datasets.MetricInfo"),w(zi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(zi,"href","#datasets.MetricInfo"),w(er,"class","relative group"),w(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mi,"id","datasets.Metric"),w(Mi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Mi,"href","#datasets.Metric"),w(tr,"class","relative group"),w(n_,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset"),w(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wi,"id","datasets.filesystems.S3FileSystem"),w(Wi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Wi,"href","#datasets.filesystems.S3FileSystem"),w(sr,"class","relative group"),w(Df,"href","https://s3fs.readthedocs.io/en/latest/api.html"),w(Df,"rel","nofollow"),w(r_,"href","/docs/datasets/pr_4356/en/package_reference/loading_methods#datasets.load_from_disk"),w(o_,"href","/docs/datasets/pr_4356/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ep,"id","datasets.fingerprint.Hasher"),w(ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ep,"href","#datasets.fingerprint.Hasher"),w(pr,"class","relative group"),w(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(a,j){e(document.head,c),D(a,g,j),D(a,f,j),e(f,n),e(n,u),$(t,u,null),e(f,d),e(f,cn),e(cn,hs),D(a,Tr,j),D(a,Se,j),e(Se,_e),e(_e,ae),$(fs,ae,null),e(Se,Yf),e(Se,Nr),e(Nr,PD),D(a,p7,j),D(a,Z,j),$(Pp,Z,null),e(Z,FD),e(Z,i$),e(i$,AD),e(Z,LD),e(Z,Jf),e(Jf,p$),e(p$,SD),e(Jf,OD),e(Z,CD),e(Z,c$),e(c$,zD),e(Z,VD),e(Z,be),$(Fp,be,null),e(be,UD),e(be,Ap),e(Ap,MD),e(Ap,d$),e(d$,RD),e(Ap,BD),e(be,HD),e(be,m$),e(m$,GD),e(be,WD),e(be,h$),e(h$,YD),e(be,JD),$(Pr,be,null),e(Z,KD),e(Z,us),$(Lp,us,null),e(us,ZD),e(us,dn),e(dn,XD),e(dn,f$),e(f$,QD),e(dn,e3),e(dn,u$),e(u$,t3),e(dn,s3),e(us,a3),$(Fr,us,null),D(a,c7,j),D(a,mn,j),e(mn,Ar),e(Ar,g$),$(Sp,g$,null),e(mn,n3),e(mn,_$),e(_$,r3),D(a,d7,j),D(a,Lr,j),e(Lr,o3),e(Lr,Kf),e(Kf,l3),e(Lr,i3),D(a,m7,j),D(a,q,j),$(Op,q,null),e(q,p3),e(q,b$),e(b$,c3),e(q,d3),e(q,et),$(Cp,et,null),e(et,m3),e(et,$$),e($$,h3),e(et,f3),e(et,x$),e(x$,v$),e(v$,u3),e(et,g3),$(Sr,et,null),e(q,_3),e(q,tt),$(zp,tt,null),e(tt,b3),e(tt,y$),e(y$,$3),e(tt,x3),e(tt,j$),e(j$,w$),e(w$,v3),e(tt,y3),$(Or,tt,null),e(q,j3),e(q,Cr),$(Vp,Cr,null),e(Cr,w3),e(Cr,D$),e(D$,D3),e(q,k3),e(q,zr),$(Up,zr,null),e(zr,E3),e(zr,k$),e(k$,q3),e(q,I3),e(q,$e),$(Mp,$e,null),e($e,T3),e($e,Pt),e(Pt,N3),e(Pt,E$),e(E$,P3),e(Pt,F3),e(Pt,q$),e(q$,A3),e(Pt,L3),e(Pt,Zf),e(Zf,S3),e(Pt,O3),e($e,C3),e($e,Rp),e(Rp,z3),e(Rp,I$),e(I$,V3),e(Rp,U3),e($e,M3),e($e,Bp),e(Bp,R3),e(Bp,T$),e(T$,B3),e(Bp,H3),e($e,G3),$(Vr,$e,null),e(q,W3),e(q,Ur),$(Hp,Ur,null),e(Ur,Y3),e(Ur,Ft),e(Ft,J3),e(Ft,N$),e(N$,K3),e(Ft,Z3),e(Ft,P$),e(P$,X3),e(Ft,Q3),e(Ft,Xf),e(Xf,ek),e(Ft,tk),e(q,sk),e(q,gs),$(Gp,gs,null),e(gs,ak),e(gs,F$),e(F$,nk),e(gs,rk),$(Mr,gs,null),e(q,ok),e(q,_s),$(Wp,_s,null),e(_s,lk),e(_s,A$),e(A$,ik),e(_s,pk),$(Rr,_s,null),e(q,ck),e(q,bs),$(Yp,bs,null),e(bs,dk),e(bs,L$),e(L$,mk),e(bs,hk),$(Br,bs,null),e(q,fk),e(q,$s),$(Jp,$s,null),e($s,uk),e($s,Kp),e(Kp,gk),e(Kp,Hr),e(Hr,_k),e(Hr,S$),e(S$,bk),e(Hr,$k),e(Kp,xk),e($s,vk),$(Gr,$s,null),e(q,yk),e(q,xs),$(Zp,xs,null),e(xs,jk),e(xs,O$),e(O$,wk),e(xs,Dk),$(Wr,xs,null),e(q,kk),e(q,vs),$(Xp,vs,null),e(vs,Ek),e(vs,C$),e(C$,qk),e(vs,Ik),$(Yr,vs,null),e(q,Tk),e(q,st),$(Qp,st,null),e(st,Nk),e(st,z$),e(z$,Pk),e(st,Fk),e(st,V$),e(V$,Ak),e(st,Lk),$(Jr,st,null),e(q,Sk),e(q,ys),$(ec,ys,null),e(ys,Ok),e(ys,U$),e(U$,Ck),e(ys,zk),$(Kr,ys,null),e(q,Vk),e(q,js),$(tc,js,null),e(js,Uk),e(js,M$),e(M$,Mk),e(js,Rk),$(Zr,js,null),e(q,Bk),e(q,ws),$(sc,ws,null),e(ws,Hk),e(ws,R$),e(R$,Gk),e(ws,Wk),$(Xr,ws,null),e(q,Yk),e(q,at),$(ac,at,null),e(at,Jk),e(at,B$),e(B$,Kk),e(at,Zk),e(at,hn),e(hn,Xk),e(hn,Qf),e(Qf,Qk),e(hn,e5),e(hn,H$),e(H$,t5),e(hn,s5),e(at,a5),$(Qr,at,null),e(q,n5),e(q,Ds),$(nc,Ds,null),e(Ds,r5),e(Ds,G$),e(G$,o5),e(Ds,l5),$(eo,Ds,null),e(q,i5),e(q,ks),$(rc,ks,null),e(ks,p5),e(ks,W$),e(W$,c5),e(ks,d5),$(to,ks,null),e(q,m5),e(q,Es),$(oc,Es,null),e(Es,h5),e(Es,lc),e(lc,f5),e(lc,Y$),e(Y$,u5),e(lc,g5),e(Es,_5),$(so,Es,null),e(q,b5),e(q,qs),$(ic,qs,null),e(qs,$5),e(qs,J$),e(J$,x5),e(qs,v5),$(ao,qs,null),e(q,y5),e(q,Is),$(pc,Is,null),e(Is,j5),e(Is,K$),e(K$,w5),e(Is,D5),e(Is,cc),e(cc,k5),e(cc,eu),e(eu,E5),e(cc,q5),e(q,I5),e(q,no),$(dc,no,null),e(no,T5),e(no,fn),e(fn,N5),e(fn,Z$),e(Z$,P5),e(fn,F5),e(fn,X$),e(X$,A5),e(fn,L5),e(q,S5),e(q,xe),$(mc,xe,null),e(xe,O5),e(xe,Oe),e(Oe,C5),e(Oe,Q$),e(Q$,z5),e(Oe,V5),e(Oe,e2),e(e2,U5),e(Oe,M5),e(Oe,t2),e(t2,R5),e(Oe,B5),e(Oe,tu),e(tu,H5),e(Oe,G5),e(xe,W5),e(xe,Ce),e(Ce,Y5),e(Ce,s2),e(s2,J5),e(Ce,K5),e(Ce,a2),e(a2,Z5),e(Ce,X5),e(Ce,n2),e(n2,Q5),e(Ce,e6),e(Ce,r2),e(r2,t6),e(Ce,s6),e(xe,a6),e(xe,o2),e(o2,n6),e(xe,r6),$(ro,xe,null),e(q,o6),e(q,Ts),$(hc,Ts,null),e(Ts,l6),e(Ts,nt),e(nt,i6),e(nt,l2),e(l2,p6),e(nt,c6),e(nt,i2),e(i2,d6),e(nt,m6),e(nt,su),e(su,h6),e(nt,f6),e(nt,au),e(au,u6),e(Ts,g6),$(oo,Ts,null),e(q,_6),e(q,rt),$(fc,rt,null),e(rt,b6),e(rt,uc),e(uc,$6),e(uc,p2),e(p2,x6),e(uc,v6),e(rt,y6),e(rt,nu),e(nu,j6),e(nu,c2),e(c2,w6),e(rt,D6),$(lo,rt,null),e(q,k6),e(q,ve),$(gc,ve,null),e(ve,E6),e(ve,At),e(At,q6),e(At,d2),e(d2,I6),e(At,T6),e(At,m2),e(m2,N6),e(At,P6),e(At,h2),e(h2,F6),e(At,A6),e(ve,L6),e(ve,_c),e(_c,S6),e(_c,ru),e(ru,O6),e(_c,C6),e(ve,z6),e(ve,un),e(un,V6),e(un,ou),e(ou,U6),e(un,M6),e(un,f2),e(f2,R6),e(un,B6),e(ve,H6),$(io,ve,null),e(q,G6),e(q,ye),$(bc,ye,null),e(ye,W6),e(ye,gn),e(gn,Y6),e(gn,u2),e(u2,J6),e(gn,K6),e(gn,g2),e(g2,Z6),e(gn,X6),e(ye,Q6),e(ye,_n),e(_n,eE),e(_n,lu),e(lu,tE),e(_n,sE),e(_n,iu),e(iu,aE),e(_n,nE),e(ye,rE),e(ye,bn),e(bn,oE),e(bn,pu),e(pu,lE),e(bn,iE),e(bn,_2),e(_2,pE),e(bn,cE),e(ye,dE),$(po,ye,null),e(q,mE),e(q,co),$($c,co,null),e(co,hE),e(co,b2),e(b2,fE),e(q,uE),e(q,ot),$(xc,ot,null),e(ot,gE),e(ot,$2),e($2,_E),e(ot,bE),e(ot,x2),e(x2,$E),e(ot,xE),$(mo,ot,null),e(q,vE),e(q,je),$(vc,je,null),e(je,yE),e(je,v2),e(v2,jE),e(je,wE),e(je,yc),e(yc,DE),e(yc,y2),e(y2,kE),e(yc,EE),e(je,qE),e(je,$n),e($n,j2),e(j2,IE),e($n,TE),e($n,w2),e(w2,NE),e($n,PE),e($n,ce),e(ce,FE),e(ce,D2),e(D2,AE),e(ce,LE),e(ce,k2),e(k2,SE),e(ce,OE),e(ce,E2),e(E2,CE),e(ce,zE),e(ce,q2),e(q2,VE),e(ce,UE),e(ce,I2),e(I2,ME),e(ce,RE),e(je,BE),$(ho,je,null),e(q,HE),e(q,Ns),$(jc,Ns,null),e(Ns,GE),e(Ns,T2),e(T2,WE),e(Ns,YE),$(fo,Ns,null),e(q,JE),e(q,Ps),$(wc,Ps,null),e(Ps,KE),e(Ps,N2),e(N2,ZE),e(Ps,XE),$(uo,Ps,null),e(q,QE),e(q,lt),$(Dc,lt,null),e(lt,e8),e(lt,P2),e(P2,t8),e(lt,s8),e(lt,F2),e(F2,a8),e(lt,n8),$(go,lt,null),e(q,r8),e(q,it),$(kc,it,null),e(it,o8),e(it,A2),e(A2,l8),e(it,i8),e(it,L2),e(L2,p8),e(it,c8),$(_o,it,null),e(q,d8),e(q,pt),$(Ec,pt,null),e(pt,m8),e(pt,W),e(W,h8),e(W,S2),e(S2,f8),e(W,u8),e(W,O2),e(O2,g8),e(W,_8),e(W,C2),e(C2,b8),e(W,$8),e(W,z2),e(z2,x8),e(W,v8),e(W,V2),e(V2,y8),e(W,j8),e(W,U2),e(U2,w8),e(W,D8),e(W,M2),e(M2,k8),e(W,E8),e(pt,q8),e(pt,qc),e(qc,I8),e(qc,R2),e(R2,T8),e(qc,N8),e(pt,P8),$(bo,pt,null),e(q,F8),e(q,ne),$(Ic,ne,null),e(ne,A8),e(ne,xn),e(xn,L8),e(xn,B2),e(B2,S8),e(xn,O8),e(xn,H2),e(H2,C8),e(xn,z8),e(ne,V8),e(ne,G2),e(G2,U8),e(ne,M8),e(ne,Tc),e(Tc,R8),e(Tc,W2),e(W2,B8),e(Tc,H8),e(ne,G8),e(ne,Y2),e(Y2,W8),e(ne,Y8),$($o,ne,null),e(q,J8),e(q,Fs),$(Nc,Fs,null),e(Fs,K8),e(Fs,J2),e(J2,Z8),e(Fs,X8),$(xo,Fs,null),e(q,Q8),e(q,ct),$(Pc,ct,null),e(ct,eq),e(ct,K2),e(K2,tq),e(ct,sq),e(ct,Lt),e(Lt,aq),e(Lt,cu),e(cu,nq),e(Lt,rq),e(Lt,du),e(du,oq),e(Lt,lq),e(Lt,Z2),e(Z2,iq),e(Lt,pq),e(ct,cq),$(vo,ct,null),e(q,dq),e(q,K),$(Fc,K,null),e(K,mq),e(K,vn),e(vn,hq),e(vn,mu),e(mu,fq),e(vn,uq),e(vn,X2),e(X2,gq),e(vn,_q),e(K,bq),e(K,yn),e(yn,$q),e(yn,hu),e(hu,xq),e(yn,vq),e(yn,fu),e(fu,yq),e(yn,jq),e(K,wq),e(K,Ac),e(Ac,Dq),e(Ac,Q2),e(Q2,kq),e(Ac,Eq),e(K,qq),$(yo,K,null),e(K,Iq),$(jo,K,null),e(K,Tq),$(wo,K,null),e(q,Nq),e(q,As),$(Lc,As,null),e(As,Pq),e(As,St),e(St,Fq),e(St,ex),e(ex,Aq),e(St,Lq),e(St,uu),e(uu,Sq),e(St,Oq),e(St,tx),e(tx,Cq),e(St,zq),e(As,Vq),$(Do,As,null),e(q,Uq),e(q,ko),$(Sc,ko,null),e(ko,Mq),e(ko,sx),e(sx,Rq),e(q,Bq),e(q,Ls),$(Oc,Ls,null),e(Ls,Hq),e(Ls,ax),e(ax,Gq),e(Ls,Wq),$(Eo,Ls,null),e(q,Yq),e(q,Ss),$(Cc,Ss,null),e(Ss,Jq),e(Ss,zc),e(zc,Kq),e(zc,nx),e(nx,Zq),e(zc,Xq),e(Ss,Qq),$(qo,Ss,null),e(q,e9),e(q,Os),$(Vc,Os,null),e(Os,t9),e(Os,rx),e(rx,s9),e(Os,a9),$(Io,Os,null),e(q,n9),e(q,Cs),$(Uc,Cs,null),e(Cs,r9),e(Cs,ox),e(ox,o9),e(Cs,l9),$(To,Cs,null),e(q,i9),e(q,zs),$(Mc,zs,null),e(zs,p9),e(zs,lx),e(lx,c9),e(zs,d9),$(No,zs,null),e(q,m9),e(q,dt),$(Rc,dt,null),e(dt,h9),e(dt,jn),e(jn,f9),e(jn,ix),e(ix,u9),e(jn,g9),e(jn,px),e(px,_9),e(jn,b9),e(dt,$9),e(dt,cx),e(cx,gu),e(gu,x9),e(gu,Bc),e(Bc,v9),e(dt,y9),$(Po,dt,null),e(q,j9),e(q,Vs),$(Hc,Vs,null),e(Vs,w9),e(Vs,Ot),e(Ot,D9),e(Ot,dx),e(dx,k9),e(Ot,E9),e(Ot,mx),e(mx,q9),e(Ot,I9),e(Ot,hx),e(hx,T9),e(Ot,N9),e(Vs,P9),e(Vs,fx),e(fx,_u),e(_u,F9),e(_u,Gc),e(Gc,A9),e(q,L9),e(q,Fo),$(Wc,Fo,null),e(Fo,S9),e(Fo,ux),e(ux,O9),e(q,C9),e(q,Us),$(Yc,Us,null),e(Us,z9),e(Us,gx),e(gx,V9),e(Us,U9),e(Us,Jc),e(Jc,M9),e(Jc,_x),e(_x,R9),e(Jc,B9),e(q,H9),e(q,Ms),$(Kc,Ms,null),e(Ms,G9),e(Ms,bx),e(bx,W9),e(Ms,Y9),$(Ao,Ms,null),e(q,J9),e(q,Rs),$(Zc,Rs,null),e(Rs,K9),e(Rs,$x),e($x,Z9),e(Rs,X9),$(Lo,Rs,null),e(q,Q9),e(q,So),$(Xc,So,null),e(So,eI),e(So,xx),e(xx,tI),e(q,sI),e(q,Oo),$(Qc,Oo,null),e(Oo,aI),e(Oo,vx),e(vx,nI),e(q,rI),e(q,Co),$(ed,Co,null),e(Co,oI),e(Co,yx),e(yx,lI),e(q,iI),e(q,zo),$(td,zo,null),e(zo,pI),e(zo,jx),e(jx,cI),e(q,dI),e(q,Vo),$(sd,Vo,null),e(Vo,mI),e(Vo,wx),e(wx,hI),e(q,fI),e(q,Uo),$(ad,Uo,null),e(Uo,uI),e(Uo,Dx),e(Dx,gI),e(q,_I),e(q,Mo),$(nd,Mo,null),e(Mo,bI),e(Mo,kx),e(kx,$I),e(q,xI),e(q,Ro),$(rd,Ro,null),e(Ro,vI),e(Ro,bu),e(bu,$u),e($u,yI),e(bu,jI),e(q,wI),e(q,Bo),$(od,Bo,null),e(Bo,DI),e(Bo,xu),e(xu,vu),e(vu,kI),e(xu,EI),e(q,qI),e(q,yu),$(ld,yu,null),e(q,II),e(q,ju),$(id,ju,null),e(q,TI),e(q,wu),$(pd,wu,null),e(q,NI),e(q,Du),$(cd,Du,null),e(q,PI),e(q,ku),$(dd,ku,null),e(q,FI),e(q,Eu),$(md,Eu,null),e(q,AI),e(q,qu),$(hd,qu,null),e(q,LI),e(q,Iu),$(fd,Iu,null),e(q,SI),e(q,Tu),$(ud,Tu,null),e(q,OI),e(q,Nu),$(gd,Nu,null),e(q,CI),e(q,Pu),$(_d,Pu,null),e(q,zI),e(q,Fu),$(bd,Fu,null),e(q,VI),e(q,Au),$($d,Au,null),e(q,UI),e(q,Bs),$(xd,Bs,null),e(Bs,MI),e(Bs,Ex),e(Ex,RI),e(Bs,BI),$(Ho,Bs,null),e(q,HI),e(q,Hs),$(vd,Hs,null),e(Hs,GI),e(Hs,qx),e(qx,WI),e(Hs,YI),$(Go,Hs,null),e(q,JI),e(q,Gs),$(yd,Gs,null),e(Gs,KI),e(Gs,Ix),e(Ix,ZI),e(Gs,XI),$(Wo,Gs,null),e(q,QI),e(q,Ws),$(jd,Ws,null),e(Ws,eT),e(Ws,Tx),e(Tx,tT),e(Ws,sT),$(Yo,Ws,null),e(q,aT),e(q,Ys),$(wd,Ys,null),e(Ys,nT),e(Ys,wn),e(wn,rT),e(wn,Lu),e(Lu,oT),e(wn,lT),e(wn,Su),e(Su,iT),e(wn,pT),e(Ys,cT),e(Ys,Dn),e(Dn,dT),e(Dn,Nx),e(Nx,mT),e(Dn,hT),e(Dn,Px),e(Px,fT),e(Dn,uT),e(q,gT),e(q,Js),$(Dd,Js,null),e(Js,_T),e(Js,kd),e(kd,bT),e(kd,Fx),e(Fx,$T),e(kd,xT),e(Js,vT),$(Jo,Js,null),D(a,h7,j),D(a,Ct,j),$(Ed,Ct,null),e(Ct,yT),e(Ct,kn),e(kn,jT),e(kn,Ou),e(Ou,wT),e(kn,DT),e(kn,Cu),e(Cu,kT),e(kn,ET),e(Ct,qT),$(Ko,Ct,null),D(a,f7,j),D(a,X,j),$(qd,X,null),e(X,IT),e(X,Ax),e(Ax,TT),e(X,NT),e(X,En),e(En,PT),e(En,zu),e(zu,FT),e(En,AT),e(En,Vu),e(Vu,LT),e(En,ST),e(X,OT),e(X,ze),e(ze,CT),e(ze,Lx),e(Lx,zT),e(ze,VT),e(ze,Sx),e(Sx,UT),e(ze,MT),e(ze,Ox),e(Ox,RT),e(ze,BT),e(ze,Cx),e(Cx,HT),e(ze,GT),e(X,WT),e(X,zx),e(zx,YT),e(X,JT),$(Zo,X,null),D(a,u7,j),D(a,de,j),$(Id,de,null),e(de,KT),e(de,Vx),e(Vx,ZT),e(de,XT),e(de,Ux),e(Ux,QT),e(de,eN),e(de,Mx),e(Mx,tN),e(de,sN),e(de,Ve),e(Ve,Rx),e(Rx,aN),e(Ve,nN),e(Ve,Bx),e(Bx,rN),e(Ve,oN),e(Ve,Hx),e(Hx,lN),e(Ve,iN),e(Ve,Td),e(Td,pN),e(Td,Uu),e(Uu,cN),e(Td,dN),e(Ve,mN),e(Ve,zt),e(zt,hN),e(zt,Mu),e(Mu,fN),e(zt,uN),e(zt,Gx),e(Gx,gN),e(zt,_N),e(zt,Ru),e(Ru,bN),e(zt,$N),D(a,g7,j),D(a,me,j),$(Nd,me,null),e(me,xN),e(me,Wx),e(Wx,vN),e(me,yN),e(me,Yx),e(Yx,jN),e(me,wN),e(me,Jx),e(Jx,DN),e(me,kN),e(me,Ue),e(Ue,Kx),e(Kx,EN),e(Ue,qN),e(Ue,Zx),e(Zx,IN),e(Ue,TN),e(Ue,Xx),e(Xx,NN),e(Ue,PN),e(Ue,Pd),e(Pd,FN),e(Pd,Bu),e(Bu,AN),e(Pd,LN),e(Ue,SN),e(Ue,Vt),e(Vt,ON),e(Vt,Hu),e(Hu,CN),e(Vt,zN),e(Vt,Qx),e(Qx,VN),e(Vt,UN),e(Vt,Gu),e(Gu,MN),e(Vt,RN),D(a,_7,j),D(a,he,j),$(Fd,he,null),e(he,BN),e(he,e1),e(e1,HN),e(he,GN),e(he,t1),e(t1,WN),e(he,YN),e(he,s1),e(s1,JN),e(he,KN),e(he,Me),e(Me,a1),e(a1,ZN),e(Me,XN),e(Me,n1),e(n1,QN),e(Me,eP),e(Me,r1),e(r1,tP),e(Me,sP),e(Me,Ad),e(Ad,aP),e(Ad,Wu),e(Wu,nP),e(Ad,rP),e(Me,oP),e(Me,Ut),e(Ut,lP),e(Ut,Yu),e(Yu,iP),e(Ut,pP),e(Ut,o1),e(o1,cP),e(Ut,dP),e(Ut,Ju),e(Ju,mP),e(Ut,hP),D(a,b7,j),D(a,qn,j),e(qn,Xo),e(Xo,l1),$(Ld,l1,null),e(qn,fP),e(qn,i1),e(i1,uP),D(a,$7,j),D(a,Qo,j),e(Qo,gP),e(Qo,p1),e(p1,_P),e(Qo,bP),D(a,x7,j),D(a,F,j),$(Sd,F,null),e(F,$P),e(F,c1),e(c1,xP),e(F,vP),e(F,Ks),$(Od,Ks,null),e(Ks,yP),e(Ks,d1),e(d1,jP),e(Ks,wP),$(el,Ks,null),e(F,DP),e(F,Zs),$(Cd,Zs,null),e(Zs,kP),e(Zs,m1),e(m1,EP),e(Zs,qP),$(tl,Zs,null),e(F,IP),e(F,Xs),$(zd,Xs,null),e(Xs,TP),e(Xs,h1),e(h1,NP),e(Xs,PP),$(sl,Xs,null),e(F,FP),e(F,Qs),$(Vd,Qs,null),e(Qs,AP),e(Qs,Ud),e(Ud,LP),e(Ud,al),e(al,SP),e(al,f1),e(f1,OP),e(al,CP),e(Ud,zP),e(Qs,VP),$(nl,Qs,null),e(F,UP),e(F,ea),$(Md,ea,null),e(ea,MP),e(ea,u1),e(u1,RP),e(ea,BP),$(rl,ea,null),e(F,HP),e(F,ta),$(Rd,ta,null),e(ta,GP),e(ta,g1),e(g1,WP),e(ta,YP),$(ol,ta,null),e(F,JP),e(F,mt),$(Bd,mt,null),e(mt,KP),e(mt,_1),e(_1,ZP),e(mt,XP),e(mt,b1),e(b1,QP),e(mt,eF),$(ll,mt,null),e(F,tF),e(F,sa),$(Hd,sa,null),e(sa,sF),e(sa,$1),e($1,aF),e(sa,nF),$(il,sa,null),e(F,rF),e(F,aa),$(Gd,aa,null),e(aa,oF),e(aa,x1),e(x1,lF),e(aa,iF),$(pl,aa,null),e(F,pF),e(F,na),$(Wd,na,null),e(na,cF),e(na,v1),e(v1,dF),e(na,mF),$(cl,na,null),e(F,hF),e(F,ht),$(Yd,ht,null),e(ht,fF),e(ht,y1),e(y1,uF),e(ht,gF),e(ht,j1),e(j1,_F),e(ht,bF),$(dl,ht,null),e(F,$F),e(F,we),$(Jd,we,null),e(we,xF),e(we,w1),e(w1,vF),e(we,yF),e(we,D1),e(D1,jF),e(we,wF),e(we,k1),e(k1,DF),e(we,kF),$(ml,we,null),e(F,EF),e(F,De),$(Kd,De,null),e(De,qF),e(De,Zd),e(Zd,IF),e(Zd,E1),e(E1,TF),e(Zd,NF),e(De,PF),e(De,Re),e(Re,FF),e(Re,q1),e(q1,AF),e(Re,LF),e(Re,I1),e(I1,SF),e(Re,OF),e(Re,T1),e(T1,CF),e(Re,zF),e(Re,N1),e(N1,VF),e(Re,UF),e(De,MF),e(De,P1),e(P1,RF),e(De,BF),$(hl,De,null),e(F,HF),e(F,ft),$(Xd,ft,null),e(ft,GF),e(ft,Qd),e(Qd,WF),e(Qd,F1),e(F1,YF),e(Qd,JF),e(ft,KF),e(ft,Ku),e(Ku,ZF),e(Ku,A1),e(A1,XF),e(ft,QF),$(fl,ft,null),e(F,eA),e(F,ul),$(em,ul,null),e(ul,tA),e(ul,In),e(In,sA),e(In,L1),e(L1,aA),e(In,nA),e(In,S1),e(S1,rA),e(In,oA),e(F,lA),e(F,ke),$(tm,ke,null),e(ke,iA),e(ke,Mt),e(Mt,pA),e(Mt,O1),e(O1,cA),e(Mt,dA),e(Mt,C1),e(C1,mA),e(Mt,hA),e(Mt,z1),e(z1,fA),e(Mt,uA),e(ke,gA),e(ke,sm),e(sm,_A),e(sm,Zu),e(Zu,bA),e(sm,$A),e(ke,xA),e(ke,Tn),e(Tn,vA),e(Tn,Xu),e(Xu,yA),e(Tn,jA),e(Tn,V1),e(V1,wA),e(Tn,DA),e(ke,kA),$(gl,ke,null),e(F,EA),e(F,Ee),$(am,Ee,null),e(Ee,qA),e(Ee,Nn),e(Nn,IA),e(Nn,U1),e(U1,TA),e(Nn,NA),e(Nn,M1),e(M1,PA),e(Nn,FA),e(Ee,AA),e(Ee,Pn),e(Pn,LA),e(Pn,Qu),e(Qu,SA),e(Pn,OA),e(Pn,eg),e(eg,CA),e(Pn,zA),e(Ee,VA),e(Ee,Fn),e(Fn,UA),e(Fn,R1),e(R1,MA),e(Fn,RA),e(Fn,B1),e(B1,BA),e(Fn,HA),e(Ee,GA),$(_l,Ee,null),e(F,WA),e(F,ra),$(nm,ra,null),e(ra,YA),e(ra,H1),e(H1,JA),e(ra,KA),$(bl,ra,null),e(F,ZA),e(F,ut),$(rm,ut,null),e(ut,XA),e(ut,G1),e(G1,QA),e(ut,eL),e(ut,Rt),e(Rt,tL),e(Rt,tg),e(tg,sL),e(Rt,aL),e(Rt,W1),e(W1,nL),e(Rt,rL),e(Rt,Y1),e(Y1,oL),e(Rt,lL),e(ut,iL),$($l,ut,null),e(F,pL),e(F,oa),$(om,oa,null),e(oa,cL),e(oa,J1),e(J1,dL),e(oa,mL),$(xl,oa,null),e(F,hL),e(F,qe),$(lm,qe,null),e(qe,fL),e(qe,K1),e(K1,uL),e(qe,gL),e(qe,Z1),e(Z1,_L),e(qe,bL),e(qe,An),e(An,$L),e(An,sg),e(sg,xL),e(An,vL),e(An,X1),e(X1,yL),e(An,jL),e(qe,wL),$(vl,qe,null),e(F,DL),e(F,Ie),$(im,Ie,null),e(Ie,kL),e(Ie,Q1),e(Q1,EL),e(Ie,qL),e(Ie,Ln),e(Ln,IL),e(Ln,ag),e(ag,TL),e(Ln,NL),e(Ln,ev),e(ev,PL),e(Ln,FL),e(Ie,AL),e(Ie,pm),e(pm,tv),e(tv,LL),e(pm,SL),e(pm,sv),e(sv,OL),e(Ie,CL),$(yl,Ie,null),e(F,zL),e(F,la),$(cm,la,null),e(la,VL),e(la,av),e(av,UL),e(la,ML),$(jl,la,null),e(F,RL),e(F,ia),$(dm,ia,null),e(ia,BL),e(ia,mm),e(mm,HL),e(mm,nv),e(nv,GL),e(mm,WL),e(ia,YL),$(wl,ia,null),e(F,JL),e(F,Te),$(hm,Te,null),e(Te,KL),e(Te,Sn),e(Sn,ZL),e(Sn,rv),e(rv,XL),e(Sn,QL),e(Sn,ov),e(ov,eS),e(Sn,tS),e(Te,sS),e(Te,lv),e(lv,aS),e(Te,nS),e(Te,Bt),e(Bt,rS),e(Bt,ng),e(ng,oS),e(Bt,lS),e(Bt,rg),e(rg,iS),e(Bt,pS),e(Bt,iv),e(iv,cS),e(Bt,dS),e(Te,mS),$(Dl,Te,null),e(F,hS),e(F,re),$(fm,re,null),e(re,fS),e(re,On),e(On,uS),e(On,og),e(og,gS),e(On,_S),e(On,pv),e(pv,bS),e(On,$S),e(re,xS),e(re,Cn),e(Cn,vS),e(Cn,lg),e(lg,yS),e(Cn,jS),e(Cn,ig),e(ig,wS),e(Cn,DS),e(re,kS),e(re,um),e(um,ES),e(um,cv),e(cv,qS),e(um,IS),e(re,TS),$(kl,re,null),e(re,NS),$(El,re,null),e(F,PS),e(F,pa),$(gm,pa,null),e(pa,FS),e(pa,Ht),e(Ht,AS),e(Ht,dv),e(dv,LS),e(Ht,SS),e(Ht,pg),e(pg,OS),e(Ht,CS),e(Ht,mv),e(mv,zS),e(Ht,VS),e(pa,US),$(ql,pa,null),e(F,MS),e(F,ca),$(_m,ca,null),e(ca,RS),e(ca,hv),e(hv,BS),e(ca,HS),$(Il,ca,null),e(F,GS),e(F,da),$(bm,da,null),e(da,WS),e(da,fv),e(fv,YS),e(da,JS),$(Tl,da,null),e(F,KS),e(F,ma),$($m,ma,null),e(ma,ZS),e(ma,uv),e(uv,XS),e(ma,QS),$(Nl,ma,null),e(F,eO),e(F,ha),$(xm,ha,null),e(ha,tO),e(ha,gv),e(gv,sO),e(ha,aO),$(Pl,ha,null),e(F,nO),e(F,fa),$(vm,fa,null),e(fa,rO),e(fa,zn),e(zn,oO),e(zn,cg),e(cg,lO),e(zn,iO),e(zn,dg),e(dg,pO),e(zn,cO),e(fa,dO),e(fa,Vn),e(Vn,mO),e(Vn,_v),e(_v,hO),e(Vn,fO),e(Vn,bv),e(bv,uO),e(Vn,gO),D(a,v7,j),D(a,mg,j),D(a,y7,j),D(a,Un,j),e(Un,Fl),e(Fl,$v),$(ym,$v,null),e(Un,_O),e(Un,xv),e(xv,bO),D(a,j7,j),D(a,Al,j),e(Al,$O),e(Al,hg),e(hg,xO),e(Al,vO),D(a,w7,j),D(a,L,j),$(jm,L,null),e(L,yO),e(L,vv),e(vv,jO),e(L,wO),e(L,ua),$(wm,ua,null),e(ua,DO),e(ua,yv),e(yv,kO),e(ua,EO),$(Ll,ua,null),e(L,qO),e(L,ga),$(Dm,ga,null),e(ga,IO),e(ga,jv),e(jv,TO),e(ga,NO),$(Sl,ga,null),e(L,PO),e(L,_a),$(km,_a,null),e(_a,FO),e(_a,wv),e(wv,AO),e(_a,LO),$(Ol,_a,null),e(L,SO),e(L,fg),$(Em,fg,null),e(L,OO),e(L,Ne),$(qm,Ne,null),e(Ne,CO),e(Ne,Dv),e(Dv,zO),e(Ne,VO),e(Ne,Im),e(Im,UO),e(Im,kv),e(kv,MO),e(Im,RO),e(Ne,BO),e(Ne,Mn),e(Mn,Ev),e(Ev,HO),e(Mn,GO),e(Mn,qv),e(qv,WO),e(Mn,YO),e(Mn,fe),e(fe,JO),e(fe,Iv),e(Iv,KO),e(fe,ZO),e(fe,Tv),e(Tv,XO),e(fe,QO),e(fe,Nv),e(Nv,eC),e(fe,tC),e(fe,Pv),e(Pv,sC),e(fe,aC),e(fe,Fv),e(Fv,nC),e(fe,rC),e(Ne,oC),$(Cl,Ne,null),e(L,lC),e(L,ba),$(Tm,ba,null),e(ba,iC),e(ba,Av),e(Av,pC),e(ba,cC),$(zl,ba,null),e(L,dC),e(L,$a),$(Nm,$a,null),e($a,mC),e($a,Lv),e(Lv,hC),e($a,fC),$(Vl,$a,null),e(L,uC),e(L,oe),$(Pm,oe,null),e(oe,gC),e(oe,Sv),e(Sv,_C),e(oe,bC),e(oe,Ov),e(Ov,$C),e(oe,xC),e(oe,Fm),e(Fm,vC),e(Fm,Cv),e(Cv,yC),e(Fm,jC),e(oe,wC),e(oe,Rn),e(Rn,DC),e(Rn,ug),e(ug,kC),e(Rn,EC),e(Rn,gg),e(gg,qC),e(Rn,IC),e(oe,TC),$(Ul,oe,null),e(L,NC),e(L,xa),$(Am,xa,null),e(xa,PC),e(xa,Lm),e(Lm,FC),e(Lm,zv),e(zv,AC),e(Lm,LC),e(xa,SC),$(Ml,xa,null),e(L,OC),e(L,va),$(Sm,va,null),e(va,CC),e(va,Om),e(Om,zC),e(Om,Vv),e(Vv,VC),e(Om,UC),e(va,MC),$(Rl,va,null),e(L,RC),e(L,Bl),$(Cm,Bl,null),e(Bl,BC),e(Bl,_g),e(_g,bg),e(bg,HC),e(_g,GC),e(L,WC),e(L,Hl),$(zm,Hl,null),e(Hl,YC),e(Hl,$g),e($g,xg),e(xg,JC),e($g,KC),e(L,ZC),e(L,vg),$(Vm,vg,null),e(L,XC),e(L,yg),$(Um,yg,null),e(L,QC),e(L,jg),$(Mm,jg,null),e(L,ez),e(L,wg),$(Rm,wg,null),e(L,tz),e(L,Dg),$(Bm,Dg,null),e(L,sz),e(L,kg),$(Hm,kg,null),e(L,az),e(L,Eg),$(Gm,Eg,null),e(L,nz),e(L,qg),$(Wm,qg,null),e(L,rz),e(L,Ig),$(Ym,Ig,null),e(L,oz),e(L,Tg),$(Jm,Tg,null),e(L,lz),e(L,Ng),$(Km,Ng,null),e(L,iz),e(L,Pg),$(Zm,Pg,null),e(L,pz),e(L,Fg),$(Xm,Fg,null),D(a,D7,j),D(a,Bn,j),e(Bn,Gl),e(Gl,Uv),$(Qm,Uv,null),e(Bn,cz),e(Bn,Mv),e(Mv,dz),D(a,k7,j),D(a,Wl,j),e(Wl,mz),e(Wl,Rv),e(Rv,hz),e(Wl,fz),D(a,E7,j),D(a,U,j),$(eh,U,null),e(U,uz),e(U,Pe),$(th,Pe,null),e(Pe,gz),e(Pe,Bv),e(Bv,_z),e(Pe,bz),e(Pe,sh),e(sh,$z),e(sh,Hv),e(Hv,xz),e(sh,vz),e(Pe,yz),e(Pe,Hn),e(Hn,Gv),e(Gv,jz),e(Hn,wz),e(Hn,Wv),e(Wv,Dz),e(Hn,kz),e(Hn,ue),e(ue,Ez),e(ue,Yv),e(Yv,qz),e(ue,Iz),e(ue,Jv),e(Jv,Tz),e(ue,Nz),e(ue,Kv),e(Kv,Pz),e(ue,Fz),e(ue,Zv),e(Zv,Az),e(ue,Lz),e(ue,Xv),e(Xv,Sz),e(ue,Oz),e(Pe,Cz),$(Yl,Pe,null),e(U,zz),e(U,ya),$(ah,ya,null),e(ya,Vz),e(ya,Qv),e(Qv,Uz),e(ya,Mz),$(Jl,ya,null),e(U,Rz),e(U,le),$(nh,le,null),e(le,Bz),e(le,ey),e(ey,Hz),e(le,Gz),e(le,ty),e(ty,Wz),e(le,Yz),e(le,rh),e(rh,Jz),e(rh,sy),e(sy,Kz),e(rh,Zz),e(le,Xz),e(le,Gn),e(Gn,Qz),e(Gn,Ag),e(Ag,eV),e(Gn,tV),e(Gn,Lg),e(Lg,sV),e(Gn,aV),e(le,nV),$(Kl,le,null),e(U,rV),e(U,ja),$(oh,ja,null),e(ja,oV),e(ja,ay),e(ay,lV),e(ja,iV),$(Zl,ja,null),e(U,pV),e(U,wa),$(lh,wa,null),e(wa,cV),e(wa,ny),e(ny,dV),e(wa,mV),$(Xl,wa,null),e(U,hV),e(U,Da),$(ih,Da,null),e(Da,fV),e(Da,ry),e(ry,uV),e(Da,gV),$(Ql,Da,null),e(U,_V),e(U,ka),$(ph,ka,null),e(ka,bV),e(ka,oy),e(oy,$V),e(ka,xV),$(ei,ka,null),e(U,vV),e(U,Ea),$(ch,Ea,null),e(Ea,yV),e(Ea,ly),e(ly,jV),e(Ea,wV),$(ti,Ea,null),e(U,DV),e(U,qa),$(dh,qa,null),e(qa,kV),e(qa,iy),e(iy,EV),e(qa,qV),$(si,qa,null),D(a,q7,j),D(a,Wn,j),e(Wn,ai),e(ai,py),$(mh,py,null),e(Wn,IV),e(Wn,cy),e(cy,TV),D(a,I7,j),D(a,O,j),$(hh,O,null),e(O,NV),e(O,dy),e(dy,PV),e(O,FV),e(O,fh),e(fh,AV),e(fh,my),e(my,LV),e(fh,SV),e(O,OV),e(O,Sg),e(Sg,hy),e(hy,CV),e(Sg,zV),e(O,VV),e(O,Y),e(Y,fy),e(fy,Ia),e(Ia,UV),e(Ia,Og),e(Og,MV),e(Ia,RV),e(Ia,uy),e(uy,BV),e(Ia,HV),e(Ia,gy),e(gy,GV),e(Y,WV),e(Y,_y),e(_y,uh),e(uh,YV),e(uh,Cg),e(Cg,JV),e(uh,KV),e(Y,ZV),e(Y,by),e(by,gh),e(gh,XV),e(gh,$y),e($y,QV),e(gh,eU),e(Y,tU),e(Y,_h),e(_h,Be),e(Be,sU),e(Be,xy),e(xy,aU),e(Be,nU),e(Be,zg),e(zg,rU),e(Be,oU),e(Be,vy),e(vy,lU),e(Be,iU),e(Be,Vg),e(Vg,pU),e(Be,cU),e(_h,dU),$(ni,_h,null),e(Y,mU),e(Y,yy),e(yy,He),e(He,hU),e(He,Ug),e(Ug,fU),e(He,uU),e(He,Mg),e(Mg,gU),e(He,_U),e(He,Rg),e(Rg,bU),e(He,$U),e(He,Bg),e(Bg,xU),e(He,vU),e(Y,yU),e(Y,jy),e(jy,bh),e(bh,jU),e(bh,Hg),e(Hg,wU),e(bh,DU),e(Y,kU),e(Y,wy),e(wy,Gt),e(Gt,EU),e(Gt,Gg),e(Gg,qU),e(Gt,IU),e(Gt,Dy),e(Dy,TU),e(Gt,NU),e(Gt,ky),e(ky,PU),e(Gt,FU),e(Y,AU),e(Y,Ey),e(Ey,ri),e(ri,Wg),e(Wg,LU),e(ri,SU),e(ri,Yg),e(Yg,OU),e(ri,CU),e(O,zU),e(O,Ta),$($h,Ta,null),e(Ta,VU),e(Ta,qy),e(qy,UU),e(Ta,MU),$(oi,Ta,null),e(O,RU),e(O,li),$(xh,li,null),e(li,BU),e(li,Iy),e(Iy,HU),e(O,GU),e(O,ii),$(vh,ii,null),e(ii,WU),e(ii,Ty),e(Ty,YU),e(O,JU),e(O,pi),$(yh,pi,null),e(pi,KU),e(pi,Ny),e(Ny,ZU),e(O,XU),e(O,ci),$(jh,ci,null),e(ci,QU),e(ci,Py),e(Py,eM),e(O,tM),e(O,di),$(wh,di,null),e(di,sM),e(di,Fy),e(Fy,aM),e(O,nM),e(O,gt),$(Dh,gt,null),e(gt,rM),e(gt,Ay),e(Ay,oM),e(gt,lM),e(gt,Ly),e(Ly,iM),e(gt,pM),$(mi,gt,null),e(O,cM),e(O,hi),$(kh,hi,null),e(hi,dM),e(hi,Sy),e(Sy,mM),e(O,hM),e(O,Fe),$(Eh,Fe,null),e(Fe,fM),e(Fe,Oy),e(Oy,uM),e(Fe,gM),e(Fe,Cy),e(Cy,_M),e(Fe,bM),e(Fe,Wt),e(Wt,$M),e(Wt,Jg),e(Jg,xM),e(Wt,vM),e(Wt,Kg),e(Kg,yM),e(Wt,jM),e(Wt,Zg),e(Zg,wM),e(Wt,DM),e(Fe,kM),$(fi,Fe,null),e(O,EM),e(O,_t),$(qh,_t,null),e(_t,qM),e(_t,zy),e(zy,IM),e(_t,TM),e(_t,Vy),e(Vy,NM),e(_t,PM),$(ui,_t,null),D(a,T7,j),D(a,Yt,j),$(Ih,Yt,null),e(Yt,FM),e(Yt,Uy),e(Uy,AM),e(Yt,LM),$(gi,Yt,null),D(a,N7,j),D(a,J,j),$(Th,J,null),e(J,SM),e(J,My),e(My,OM),e(J,CM),e(J,Nh),e(Nh,zM),e(Nh,Ry),e(Ry,VM),e(Nh,UM),e(J,MM),e(J,Yn),e(Yn,Xg),e(Xg,By),e(By,RM),e(Xg,BM),e(Yn,HM),e(Yn,Qg),e(Qg,Hy),e(Hy,GM),e(Qg,WM),e(Yn,YM),e(Yn,e_),e(e_,Gy),e(Gy,JM),e(e_,KM),e(J,ZM),$(_i,J,null),e(J,XM),e(J,Na),$(Ph,Na,null),e(Na,QM),e(Na,Wy),e(Wy,eR),e(Na,tR),$(bi,Na,null),e(J,sR),e(J,Pa),$(Fh,Pa,null),e(Pa,aR),e(Pa,Yy),e(Yy,nR),e(Pa,rR),$($i,Pa,null),D(a,P7,j),D(a,Ge,j),$(Ah,Ge,null),e(Ge,oR),e(Ge,Jy),e(Jy,lR),e(Ge,iR),e(Ge,Ky),e(Ky,pR),e(Ge,cR),$(xi,Ge,null),D(a,F7,j),D(a,Q,j),$(Lh,Q,null),e(Q,dR),e(Q,t_),e(t_,Zy),e(Zy,mR),e(t_,hR),e(Q,fR),e(Q,Xy),e(Xy,uR),e(Q,gR),e(Q,Sh),e(Sh,_R),e(Sh,Qy),e(Qy,bR),e(Sh,$R),e(Q,xR),$(vi,Q,null),e(Q,vR),e(Q,yi),$(Oh,yi,null),e(yi,yR),e(yi,ej),e(ej,jR),D(a,A7,j),D(a,ee,j),$(Ch,ee,null),e(ee,wR),e(ee,s_),e(s_,tj),e(tj,DR),e(s_,kR),e(ee,ER),e(ee,sj),e(sj,qR),e(ee,IR),e(ee,aj),e(aj,TR),e(ee,NR),$(ji,ee,null),e(ee,PR),e(ee,wi),$(zh,wi,null),e(wi,FR),e(wi,nj),e(nj,AR),D(a,L7,j),D(a,Jt,j),$(Vh,Jt,null),e(Jt,LR),e(Jt,rj),e(rj,SR),e(Jt,OR),$(Di,Jt,null),D(a,S7,j),D(a,Kt,j),$(Uh,Kt,null),e(Kt,CR),e(Kt,oj),e(oj,zR),e(Kt,VR),$(ki,Kt,null),D(a,O7,j),D(a,Zt,j),$(Mh,Zt,null),e(Zt,UR),e(Zt,lj),e(lj,MR),e(Zt,RR),$(Ei,Zt,null),D(a,C7,j),D(a,Xt,j),$(Rh,Xt,null),e(Xt,BR),e(Xt,ij),e(ij,HR),e(Xt,GR),$(qi,Xt,null),D(a,z7,j),D(a,M,j),$(Bh,M,null),e(M,WR),e(M,pj),e(pj,YR),e(M,JR),e(M,cj),e(cj,KR),e(M,ZR),e(M,Jn),e(Jn,dj),e(dj,Hh),e(Hh,XR),e(Hh,mj),e(mj,QR),e(Hh,eB),e(Jn,tB),e(Jn,Kn),e(Kn,Gh),e(Gh,sB),e(Gh,hj),e(hj,aB),e(Gh,nB),e(Kn,rB),e(Kn,Wh),e(Wh,fj),e(fj,oB),e(Wh,lB),e(Wh,uj),e(uj,iB),e(Kn,pB),e(Kn,gj),e(gj,cB),e(Jn,dB),e(Jn,Zn),e(Zn,Yh),e(Yh,mB),e(Yh,_j),e(_j,hB),e(Yh,fB),e(Zn,uB),e(Zn,Xn),e(Xn,bj),e(bj,gB),e(Xn,_B),e(Xn,$j),e($j,bB),e(Xn,$B),e(Xn,xj),e(xj,xB),e(Zn,vB),e(Zn,vj),e(vj,yB),e(M,jB),$(Ii,M,null),e(M,wB),e(M,Fa),$(Jh,Fa,null),e(Fa,DB),e(Fa,yj),e(yj,kB),e(Fa,EB),e(Fa,Qt),e(Qt,jj),e(jj,qB),e(Qt,IB),e(Qt,wj),e(wj,TB),e(Qt,NB),e(Qt,Dj),e(Dj,PB),e(Qt,FB),e(Qt,kj),e(kj,AB),e(M,LB),e(M,Ti),$(Kh,Ti,null),e(Ti,SB),e(Ti,Ej),e(Ej,OB),e(M,CB),e(M,Ni),$(Zh,Ni,null),e(Ni,zB),e(Ni,qj),e(qj,VB),e(M,UB),e(M,Pi),$(Xh,Pi,null),e(Pi,MB),e(Pi,Ij),e(Ij,RB),e(M,BB),e(M,Fi),$(Qh,Fi,null),e(Fi,HB),e(Fi,Tj),e(Tj,GB),D(a,V7,j),D(a,R,j),$(ef,R,null),e(R,WB),e(R,Nj),e(Nj,YB),e(R,JB),e(R,Pj),e(Pj,KB),e(R,ZB),e(R,es),e(es,Fj),e(Fj,tf),e(tf,XB),e(tf,Aj),e(Aj,QB),e(tf,eH),e(es,tH),e(es,Qn),e(Qn,sf),e(sf,sH),e(sf,Lj),e(Lj,aH),e(sf,nH),e(Qn,rH),e(Qn,af),e(af,Sj),e(Sj,oH),e(af,lH),e(af,Oj),e(Oj,iH),e(Qn,pH),e(Qn,Cj),e(Cj,cH),e(es,dH),e(es,zj),e(zj,nf),e(nf,mH),e(nf,Vj),e(Vj,hH),e(nf,fH),e(es,uH),e(es,Uj),e(Uj,rf),e(rf,gH),e(rf,Mj),e(Mj,_H),e(rf,bH),e(R,$H),$(Ai,R,null),e(R,xH),e(R,Aa),$(of,Aa,null),e(Aa,vH),e(Aa,Rj),e(Rj,yH),e(Aa,jH),e(Aa,We),e(We,Bj),e(Bj,wH),e(We,DH),e(We,Hj),e(Hj,kH),e(We,EH),e(We,Gj),e(Gj,qH),e(We,IH),e(We,Wj),e(Wj,TH),e(We,NH),e(We,Yj),e(Yj,PH),e(R,FH),e(R,Li),$(lf,Li,null),e(Li,AH),e(Li,Jj),e(Jj,LH),e(R,SH),e(R,Si),$(pf,Si,null),e(Si,OH),e(Si,Kj),e(Kj,CH),e(R,zH),e(R,Oi),$(cf,Oi,null),e(Oi,VH),e(Oi,Zj),e(Zj,UH),e(R,MH),e(R,Ci),$(df,Ci,null),e(Ci,RH),e(Ci,Xj),e(Xj,BH),D(a,U7,j),D(a,er,j),e(er,zi),e(zi,Qj),$(mf,Qj,null),e(er,HH),e(er,e0),e(e0,GH),D(a,M7,j),D(a,te,j),$(hf,te,null),e(te,WH),e(te,t0),e(t0,YH),e(te,JH),e(te,a_),e(a_,s0),e(s0,KH),e(a_,ZH),e(te,XH),e(te,a0),e(a0,QH),e(te,eG),e(te,La),$(ff,La,null),e(La,tG),e(La,uf),e(uf,sG),e(uf,n0),e(n0,aG),e(uf,nG),e(La,rG),$(Vi,La,null),e(te,oG),e(te,Sa),$(gf,Sa,null),e(Sa,lG),e(Sa,ts),e(ts,iG),e(ts,r0),e(r0,pG),e(ts,cG),e(ts,o0),e(o0,dG),e(ts,mG),e(ts,l0),e(l0,hG),e(ts,fG),e(Sa,uG),$(Ui,Sa,null),D(a,R7,j),D(a,tr,j),e(tr,Mi),e(Mi,i0),$(_f,i0,null),e(tr,gG),e(tr,p0),e(p0,_G),D(a,B7,j),D(a,Oa,j),e(Oa,bG),e(Oa,c0),e(c0,$G),e(Oa,xG),e(Oa,n_),e(n_,vG),e(Oa,yG),D(a,H7,j),D(a,se,j),$(bf,se,null),e(se,jG),e(se,d0),e(d0,wG),e(se,DG),e(se,Ca),$($f,Ca,null),e(Ca,kG),e(Ca,m0),e(m0,EG),e(Ca,qG),$(Ri,Ca,null),e(se,IG),e(se,za),$(xf,za,null),e(za,TG),e(za,h0),e(h0,NG),e(za,PG),$(Bi,za,null),e(se,FG),e(se,bt),$(vf,bt,null),e(bt,AG),e(bt,f0),e(f0,LG),e(bt,SG),e(bt,u0),e(u0,OG),e(bt,CG),$(Hi,bt,null),e(se,zG),e(se,Gi),$(yf,Gi,null),e(Gi,VG),e(Gi,g0),e(g0,UG),D(a,G7,j),D(a,sr,j),e(sr,Wi),e(Wi,_0),$(jf,_0,null),e(sr,MG),e(sr,b0),e(b0,RG),D(a,W7,j),D(a,C,j),$(wf,C,null),e(C,BG),e(C,Yi),e(Yi,$0),e($0,HG),e(Yi,GG),e(Yi,Df),e(Df,x0),e(x0,WG),e(Yi,YG),e(C,JG),e(C,ss),e(ss,KG),e(ss,v0),e(v0,ZG),e(ss,XG),e(ss,y0),e(y0,QG),e(ss,eW),e(ss,j0),e(j0,tW),e(ss,sW),e(C,aW),e(C,w0),e(w0,nW),e(C,rW),e(C,D0),e(D0,oW),e(C,lW),$(Ji,C,null),e(C,iW),e(C,ar),e(ar,pW),e(ar,k0),e(k0,cW),e(ar,dW),e(ar,E0),e(E0,mW),e(ar,hW),e(C,fW),$(Ki,C,null),e(C,uW),e(C,as),e(as,gW),e(as,q0),e(q0,_W),e(as,bW),e(as,I0),e(I0,$W),e(as,xW),e(as,T0),e(T0,vW),e(as,yW),e(C,jW),$(Zi,C,null),e(C,wW),e(C,nr),e(nr,DW),e(nr,N0),e(N0,kW),e(nr,EW),e(nr,r_),e(r_,qW),e(nr,IW),e(C,TW),$(Xi,C,null),e(C,NW),e(C,rr),e(rr,PW),e(rr,P0),e(P0,FW),e(rr,AW),e(rr,o_),e(o_,LW),e(rr,SW),e(C,OW),$(Qi,C,null),D(a,Y7,j),D(a,or,j),$(kf,or,null),e(or,CW),e(or,lr),e(lr,zW),e(lr,F0),e(F0,VW),e(lr,UW),e(lr,A0),e(A0,MW),e(lr,RW),D(a,J7,j),D(a,ir,j),$(Ef,ir,null),e(ir,BW),e(ir,L0),e(L0,HW),D(a,K7,j),D(a,pr,j),e(pr,ep),e(ep,S0),$(qf,S0,null),e(pr,GW),e(pr,O0),e(O0,WW),D(a,Z7,j),D(a,cr,j),$(If,cr,null),e(cr,YW),e(cr,C0),e(C0,JW),X7=!0},p(a,[j]){const Tf={};j&2&&(Tf.$$scope={dirty:j,ctx:a}),Pr.$set(Tf);const z0={};j&2&&(z0.$$scope={dirty:j,ctx:a}),Fr.$set(z0);const V0={};j&2&&(V0.$$scope={dirty:j,ctx:a}),Sr.$set(V0);const U0={};j&2&&(U0.$$scope={dirty:j,ctx:a}),Or.$set(U0);const Nf={};j&2&&(Nf.$$scope={dirty:j,ctx:a}),Vr.$set(Nf);const M0={};j&2&&(M0.$$scope={dirty:j,ctx:a}),Mr.$set(M0);const R0={};j&2&&(R0.$$scope={dirty:j,ctx:a}),Rr.$set(R0);const B0={};j&2&&(B0.$$scope={dirty:j,ctx:a}),Br.$set(B0);const ge={};j&2&&(ge.$$scope={dirty:j,ctx:a}),Gr.$set(ge);const H0={};j&2&&(H0.$$scope={dirty:j,ctx:a}),Wr.$set(H0);const l_={};j&2&&(l_.$$scope={dirty:j,ctx:a}),Yr.$set(l_);const G0={};j&2&&(G0.$$scope={dirty:j,ctx:a}),Jr.$set(G0);const W0={};j&2&&(W0.$$scope={dirty:j,ctx:a}),Kr.$set(W0);const Ye={};j&2&&(Ye.$$scope={dirty:j,ctx:a}),Zr.$set(Ye);const Pf={};j&2&&(Pf.$$scope={dirty:j,ctx:a}),Xr.$set(Pf);const Y0={};j&2&&(Y0.$$scope={dirty:j,ctx:a}),Qr.$set(Y0);const J0={};j&2&&(J0.$$scope={dirty:j,ctx:a}),eo.$set(J0);const K0={};j&2&&(K0.$$scope={dirty:j,ctx:a}),to.$set(K0);const dr={};j&2&&(dr.$$scope={dirty:j,ctx:a}),so.$set(dr);const mr={};j&2&&(mr.$$scope={dirty:j,ctx:a}),ao.$set(mr);const Z0={};j&2&&(Z0.$$scope={dirty:j,ctx:a}),ro.$set(Z0);const X0={};j&2&&(X0.$$scope={dirty:j,ctx:a}),oo.$set(X0);const Ff={};j&2&&(Ff.$$scope={dirty:j,ctx:a}),lo.$set(Ff);const Q0={};j&2&&(Q0.$$scope={dirty:j,ctx:a}),io.$set(Q0);const ew={};j&2&&(ew.$$scope={dirty:j,ctx:a}),po.$set(ew);const tw={};j&2&&(tw.$$scope={dirty:j,ctx:a}),mo.$set(tw);const Af={};j&2&&(Af.$$scope={dirty:j,ctx:a}),ho.$set(Af);const sw={};j&2&&(sw.$$scope={dirty:j,ctx:a}),fo.$set(sw);const I={};j&2&&(I.$$scope={dirty:j,ctx:a}),uo.$set(I);const aw={};j&2&&(aw.$$scope={dirty:j,ctx:a}),go.$set(aw);const ns={};j&2&&(ns.$$scope={dirty:j,ctx:a}),_o.$set(ns);const nw={};j&2&&(nw.$$scope={dirty:j,ctx:a}),bo.$set(nw);const rw={};j&2&&(rw.$$scope={dirty:j,ctx:a}),$o.$set(rw);const ow={};j&2&&(ow.$$scope={dirty:j,ctx:a}),xo.$set(ow);const rs={};j&2&&(rs.$$scope={dirty:j,ctx:a}),vo.$set(rs);const lw={};j&2&&(lw.$$scope={dirty:j,ctx:a}),yo.$set(lw);const iw={};j&2&&(iw.$$scope={dirty:j,ctx:a}),jo.$set(iw);const pw={};j&2&&(pw.$$scope={dirty:j,ctx:a}),wo.$set(pw);const Lf={};j&2&&(Lf.$$scope={dirty:j,ctx:a}),Do.$set(Lf);const cw={};j&2&&(cw.$$scope={dirty:j,ctx:a}),Eo.$set(cw);const Sf={};j&2&&(Sf.$$scope={dirty:j,ctx:a}),qo.$set(Sf);const dw={};j&2&&(dw.$$scope={dirty:j,ctx:a}),Io.$set(dw);const Je={};j&2&&(Je.$$scope={dirty:j,ctx:a}),To.$set(Je);const os={};j&2&&(os.$$scope={dirty:j,ctx:a}),No.$set(os);const mw={};j&2&&(mw.$$scope={dirty:j,ctx:a}),Po.$set(mw);const hw={};j&2&&(hw.$$scope={dirty:j,ctx:a}),Ao.$set(hw);const fw={};j&2&&(fw.$$scope={dirty:j,ctx:a}),Lo.$set(fw);const Of={};j&2&&(Of.$$scope={dirty:j,ctx:a}),Ho.$set(Of);const uw={};j&2&&(uw.$$scope={dirty:j,ctx:a}),Go.$set(uw);const Cf={};j&2&&(Cf.$$scope={dirty:j,ctx:a}),Wo.$set(Cf);const gw={};j&2&&(gw.$$scope={dirty:j,ctx:a}),Yo.$set(gw);const zf={};j&2&&(zf.$$scope={dirty:j,ctx:a}),Jo.$set(zf);const ls={};j&2&&(ls.$$scope={dirty:j,ctx:a}),Ko.$set(ls);const _w={};j&2&&(_w.$$scope={dirty:j,ctx:a}),Zo.$set(_w);const bw={};j&2&&(bw.$$scope={dirty:j,ctx:a}),el.$set(bw);const $w={};j&2&&($w.$$scope={dirty:j,ctx:a}),tl.$set($w);const hr={};j&2&&(hr.$$scope={dirty:j,ctx:a}),sl.$set(hr);const xw={};j&2&&(xw.$$scope={dirty:j,ctx:a}),nl.$set(xw);const fr={};j&2&&(fr.$$scope={dirty:j,ctx:a}),rl.$set(fr);const vw={};j&2&&(vw.$$scope={dirty:j,ctx:a}),ol.$set(vw);const ur={};j&2&&(ur.$$scope={dirty:j,ctx:a}),ll.$set(ur);const yw={};j&2&&(yw.$$scope={dirty:j,ctx:a}),il.$set(yw);const gr={};j&2&&(gr.$$scope={dirty:j,ctx:a}),pl.$set(gr);const Vf={};j&2&&(Vf.$$scope={dirty:j,ctx:a}),cl.$set(Vf);const Uf={};j&2&&(Uf.$$scope={dirty:j,ctx:a}),dl.$set(Uf);const jw={};j&2&&(jw.$$scope={dirty:j,ctx:a}),ml.$set(jw);const _r={};j&2&&(_r.$$scope={dirty:j,ctx:a}),hl.$set(_r);const ww={};j&2&&(ww.$$scope={dirty:j,ctx:a}),fl.$set(ww);const br={};j&2&&(br.$$scope={dirty:j,ctx:a}),gl.$set(br);const Dw={};j&2&&(Dw.$$scope={dirty:j,ctx:a}),_l.$set(Dw);const is={};j&2&&(is.$$scope={dirty:j,ctx:a}),bl.$set(is);const kw={};j&2&&(kw.$$scope={dirty:j,ctx:a}),$l.$set(kw);const Ew={};j&2&&(Ew.$$scope={dirty:j,ctx:a}),xl.$set(Ew);const $r={};j&2&&($r.$$scope={dirty:j,ctx:a}),vl.$set($r);const qw={};j&2&&(qw.$$scope={dirty:j,ctx:a}),yl.$set(qw);const xr={};j&2&&(xr.$$scope={dirty:j,ctx:a}),jl.$set(xr);const Iw={};j&2&&(Iw.$$scope={dirty:j,ctx:a}),wl.$set(Iw);const vr={};j&2&&(vr.$$scope={dirty:j,ctx:a}),Dl.$set(vr);const Tw={};j&2&&(Tw.$$scope={dirty:j,ctx:a}),kl.$set(Tw);const ps={};j&2&&(ps.$$scope={dirty:j,ctx:a}),El.$set(ps);const Nw={};j&2&&(Nw.$$scope={dirty:j,ctx:a}),ql.$set(Nw);const yr={};j&2&&(yr.$$scope={dirty:j,ctx:a}),Il.$set(yr);const Pw={};j&2&&(Pw.$$scope={dirty:j,ctx:a}),Tl.$set(Pw);const Fw={};j&2&&(Fw.$$scope={dirty:j,ctx:a}),Nl.$set(Fw);const jr={};j&2&&(jr.$$scope={dirty:j,ctx:a}),Pl.$set(jr);const Aw={};j&2&&(Aw.$$scope={dirty:j,ctx:a}),Ll.$set(Aw);const wr={};j&2&&(wr.$$scope={dirty:j,ctx:a}),Sl.$set(wr);const Lw={};j&2&&(Lw.$$scope={dirty:j,ctx:a}),Ol.$set(Lw);const Dr={};j&2&&(Dr.$$scope={dirty:j,ctx:a}),Cl.$set(Dr);const Mf={};j&2&&(Mf.$$scope={dirty:j,ctx:a}),zl.$set(Mf);const Sw={};j&2&&(Sw.$$scope={dirty:j,ctx:a}),Vl.$set(Sw);const kr={};j&2&&(kr.$$scope={dirty:j,ctx:a}),Ul.$set(kr);const Ow={};j&2&&(Ow.$$scope={dirty:j,ctx:a}),Ml.$set(Ow);const Er={};j&2&&(Er.$$scope={dirty:j,ctx:a}),Rl.$set(Er);const Cw={};j&2&&(Cw.$$scope={dirty:j,ctx:a}),Yl.$set(Cw);const Rf={};j&2&&(Rf.$$scope={dirty:j,ctx:a}),Jl.$set(Rf);const zw={};j&2&&(zw.$$scope={dirty:j,ctx:a}),Kl.$set(zw);const Bf={};j&2&&(Bf.$$scope={dirty:j,ctx:a}),Zl.$set(Bf);const qr={};j&2&&(qr.$$scope={dirty:j,ctx:a}),Xl.$set(qr);const Vw={};j&2&&(Vw.$$scope={dirty:j,ctx:a}),Ql.$set(Vw);const Uw={};j&2&&(Uw.$$scope={dirty:j,ctx:a}),ei.$set(Uw);const Ke={};j&2&&(Ke.$$scope={dirty:j,ctx:a}),ti.$set(Ke);const Ze={};j&2&&(Ze.$$scope={dirty:j,ctx:a}),si.$set(Ze);const Mw={};j&2&&(Mw.$$scope={dirty:j,ctx:a}),ni.$set(Mw);const Rw={};j&2&&(Rw.$$scope={dirty:j,ctx:a}),oi.$set(Rw);const Bw={};j&2&&(Bw.$$scope={dirty:j,ctx:a}),mi.$set(Bw);const Hw={};j&2&&(Hw.$$scope={dirty:j,ctx:a}),fi.$set(Hw);const Xe={};j&2&&(Xe.$$scope={dirty:j,ctx:a}),ui.$set(Xe);const Gw={};j&2&&(Gw.$$scope={dirty:j,ctx:a}),gi.$set(Gw);const Ww={};j&2&&(Ww.$$scope={dirty:j,ctx:a}),_i.$set(Ww);const Yw={};j&2&&(Yw.$$scope={dirty:j,ctx:a}),bi.$set(Yw);const Jw={};j&2&&(Jw.$$scope={dirty:j,ctx:a}),$i.$set(Jw);const Kw={};j&2&&(Kw.$$scope={dirty:j,ctx:a}),xi.$set(Kw);const Ir={};j&2&&(Ir.$$scope={dirty:j,ctx:a}),vi.$set(Ir);const $t={};j&2&&($t.$$scope={dirty:j,ctx:a}),ji.$set($t);const Zw={};j&2&&(Zw.$$scope={dirty:j,ctx:a}),Di.$set(Zw);const Xw={};j&2&&(Xw.$$scope={dirty:j,ctx:a}),ki.$set(Xw);const Qw={};j&2&&(Qw.$$scope={dirty:j,ctx:a}),Ei.$set(Qw);const e7={};j&2&&(e7.$$scope={dirty:j,ctx:a}),qi.$set(e7);const cs={};j&2&&(cs.$$scope={dirty:j,ctx:a}),Ii.$set(cs);const Hf={};j&2&&(Hf.$$scope={dirty:j,ctx:a}),Ai.$set(Hf);const t7={};j&2&&(t7.$$scope={dirty:j,ctx:a}),Vi.$set(t7);const i_={};j&2&&(i_.$$scope={dirty:j,ctx:a}),Ui.$set(i_);const s7={};j&2&&(s7.$$scope={dirty:j,ctx:a}),Ri.$set(s7);const Qe={};j&2&&(Qe.$$scope={dirty:j,ctx:a}),Bi.$set(Qe);const ds={};j&2&&(ds.$$scope={dirty:j,ctx:a}),Hi.$set(ds);const a7={};j&2&&(a7.$$scope={dirty:j,ctx:a}),Ji.$set(a7);const n7={};j&2&&(n7.$$scope={dirty:j,ctx:a}),Ki.$set(n7);const r7={};j&2&&(r7.$$scope={dirty:j,ctx:a}),Zi.$set(r7);const Gf={};j&2&&(Gf.$$scope={dirty:j,ctx:a}),Xi.$set(Gf);const o7={};j&2&&(o7.$$scope={dirty:j,ctx:a}),Qi.$set(o7)},i(a){X7||(x(t.$$.fragment,a),x(fs.$$.fragment,a),x(Pp.$$.fragment,a),x(Fp.$$.fragment,a),x(Pr.$$.fragment,a),x(Lp.$$.fragment,a),x(Fr.$$.fragment,a),x(Sp.$$.fragment,a),x(Op.$$.fragment,a),x(Cp.$$.fragment,a),x(Sr.$$.fragment,a),x(zp.$$.fragment,a),x(Or.$$.fragment,a),x(Vp.$$.fragment,a),x(Up.$$.fragment,a),x(Mp.$$.fragment,a),x(Vr.$$.fragment,a),x(Hp.$$.fragment,a),x(Gp.$$.fragment,a),x(Mr.$$.fragment,a),x(Wp.$$.fragment,a),x(Rr.$$.fragment,a),x(Yp.$$.fragment,a),x(Br.$$.fragment,a),x(Jp.$$.fragment,a),x(Gr.$$.fragment,a),x(Zp.$$.fragment,a),x(Wr.$$.fragment,a),x(Xp.$$.fragment,a),x(Yr.$$.fragment,a),x(Qp.$$.fragment,a),x(Jr.$$.fragment,a),x(ec.$$.fragment,a),x(Kr.$$.fragment,a),x(tc.$$.fragment,a),x(Zr.$$.fragment,a),x(sc.$$.fragment,a),x(Xr.$$.fragment,a),x(ac.$$.fragment,a),x(Qr.$$.fragment,a),x(nc.$$.fragment,a),x(eo.$$.fragment,a),x(rc.$$.fragment,a),x(to.$$.fragment,a),x(oc.$$.fragment,a),x(so.$$.fragment,a),x(ic.$$.fragment,a),x(ao.$$.fragment,a),x(pc.$$.fragment,a),x(dc.$$.fragment,a),x(mc.$$.fragment,a),x(ro.$$.fragment,a),x(hc.$$.fragment,a),x(oo.$$.fragment,a),x(fc.$$.fragment,a),x(lo.$$.fragment,a),x(gc.$$.fragment,a),x(io.$$.fragment,a),x(bc.$$.fragment,a),x(po.$$.fragment,a),x($c.$$.fragment,a),x(xc.$$.fragment,a),x(mo.$$.fragment,a),x(vc.$$.fragment,a),x(ho.$$.fragment,a),x(jc.$$.fragment,a),x(fo.$$.fragment,a),x(wc.$$.fragment,a),x(uo.$$.fragment,a),x(Dc.$$.fragment,a),x(go.$$.fragment,a),x(kc.$$.fragment,a),x(_o.$$.fragment,a),x(Ec.$$.fragment,a),x(bo.$$.fragment,a),x(Ic.$$.fragment,a),x($o.$$.fragment,a),x(Nc.$$.fragment,a),x(xo.$$.fragment,a),x(Pc.$$.fragment,a),x(vo.$$.fragment,a),x(Fc.$$.fragment,a),x(yo.$$.fragment,a),x(jo.$$.fragment,a),x(wo.$$.fragment,a),x(Lc.$$.fragment,a),x(Do.$$.fragment,a),x(Sc.$$.fragment,a),x(Oc.$$.fragment,a),x(Eo.$$.fragment,a),x(Cc.$$.fragment,a),x(qo.$$.fragment,a),x(Vc.$$.fragment,a),x(Io.$$.fragment,a),x(Uc.$$.fragment,a),x(To.$$.fragment,a),x(Mc.$$.fragment,a),x(No.$$.fragment,a),x(Rc.$$.fragment,a),x(Po.$$.fragment,a),x(Hc.$$.fragment,a),x(Wc.$$.fragment,a),x(Yc.$$.fragment,a),x(Kc.$$.fragment,a),x(Ao.$$.fragment,a),x(Zc.$$.fragment,a),x(Lo.$$.fragment,a),x(Xc.$$.fragment,a),x(Qc.$$.fragment,a),x(ed.$$.fragment,a),x(td.$$.fragment,a),x(sd.$$.fragment,a),x(ad.$$.fragment,a),x(nd.$$.fragment,a),x(rd.$$.fragment,a),x(od.$$.fragment,a),x(ld.$$.fragment,a),x(id.$$.fragment,a),x(pd.$$.fragment,a),x(cd.$$.fragment,a),x(dd.$$.fragment,a),x(md.$$.fragment,a),x(hd.$$.fragment,a),x(fd.$$.fragment,a),x(ud.$$.fragment,a),x(gd.$$.fragment,a),x(_d.$$.fragment,a),x(bd.$$.fragment,a),x($d.$$.fragment,a),x(xd.$$.fragment,a),x(Ho.$$.fragment,a),x(vd.$$.fragment,a),x(Go.$$.fragment,a),x(yd.$$.fragment,a),x(Wo.$$.fragment,a),x(jd.$$.fragment,a),x(Yo.$$.fragment,a),x(wd.$$.fragment,a),x(Dd.$$.fragment,a),x(Jo.$$.fragment,a),x(Ed.$$.fragment,a),x(Ko.$$.fragment,a),x(qd.$$.fragment,a),x(Zo.$$.fragment,a),x(Id.$$.fragment,a),x(Nd.$$.fragment,a),x(Fd.$$.fragment,a),x(Ld.$$.fragment,a),x(Sd.$$.fragment,a),x(Od.$$.fragment,a),x(el.$$.fragment,a),x(Cd.$$.fragment,a),x(tl.$$.fragment,a),x(zd.$$.fragment,a),x(sl.$$.fragment,a),x(Vd.$$.fragment,a),x(nl.$$.fragment,a),x(Md.$$.fragment,a),x(rl.$$.fragment,a),x(Rd.$$.fragment,a),x(ol.$$.fragment,a),x(Bd.$$.fragment,a),x(ll.$$.fragment,a),x(Hd.$$.fragment,a),x(il.$$.fragment,a),x(Gd.$$.fragment,a),x(pl.$$.fragment,a),x(Wd.$$.fragment,a),x(cl.$$.fragment,a),x(Yd.$$.fragment,a),x(dl.$$.fragment,a),x(Jd.$$.fragment,a),x(ml.$$.fragment,a),x(Kd.$$.fragment,a),x(hl.$$.fragment,a),x(Xd.$$.fragment,a),x(fl.$$.fragment,a),x(em.$$.fragment,a),x(tm.$$.fragment,a),x(gl.$$.fragment,a),x(am.$$.fragment,a),x(_l.$$.fragment,a),x(nm.$$.fragment,a),x(bl.$$.fragment,a),x(rm.$$.fragment,a),x($l.$$.fragment,a),x(om.$$.fragment,a),x(xl.$$.fragment,a),x(lm.$$.fragment,a),x(vl.$$.fragment,a),x(im.$$.fragment,a),x(yl.$$.fragment,a),x(cm.$$.fragment,a),x(jl.$$.fragment,a),x(dm.$$.fragment,a),x(wl.$$.fragment,a),x(hm.$$.fragment,a),x(Dl.$$.fragment,a),x(fm.$$.fragment,a),x(kl.$$.fragment,a),x(El.$$.fragment,a),x(gm.$$.fragment,a),x(ql.$$.fragment,a),x(_m.$$.fragment,a),x(Il.$$.fragment,a),x(bm.$$.fragment,a),x(Tl.$$.fragment,a),x($m.$$.fragment,a),x(Nl.$$.fragment,a),x(xm.$$.fragment,a),x(Pl.$$.fragment,a),x(vm.$$.fragment,a),x(ym.$$.fragment,a),x(jm.$$.fragment,a),x(wm.$$.fragment,a),x(Ll.$$.fragment,a),x(Dm.$$.fragment,a),x(Sl.$$.fragment,a),x(km.$$.fragment,a),x(Ol.$$.fragment,a),x(Em.$$.fragment,a),x(qm.$$.fragment,a),x(Cl.$$.fragment,a),x(Tm.$$.fragment,a),x(zl.$$.fragment,a),x(Nm.$$.fragment,a),x(Vl.$$.fragment,a),x(Pm.$$.fragment,a),x(Ul.$$.fragment,a),x(Am.$$.fragment,a),x(Ml.$$.fragment,a),x(Sm.$$.fragment,a),x(Rl.$$.fragment,a),x(Cm.$$.fragment,a),x(zm.$$.fragment,a),x(Vm.$$.fragment,a),x(Um.$$.fragment,a),x(Mm.$$.fragment,a),x(Rm.$$.fragment,a),x(Bm.$$.fragment,a),x(Hm.$$.fragment,a),x(Gm.$$.fragment,a),x(Wm.$$.fragment,a),x(Ym.$$.fragment,a),x(Jm.$$.fragment,a),x(Km.$$.fragment,a),x(Zm.$$.fragment,a),x(Xm.$$.fragment,a),x(Qm.$$.fragment,a),x(eh.$$.fragment,a),x(th.$$.fragment,a),x(Yl.$$.fragment,a),x(ah.$$.fragment,a),x(Jl.$$.fragment,a),x(nh.$$.fragment,a),x(Kl.$$.fragment,a),x(oh.$$.fragment,a),x(Zl.$$.fragment,a),x(lh.$$.fragment,a),x(Xl.$$.fragment,a),x(ih.$$.fragment,a),x(Ql.$$.fragment,a),x(ph.$$.fragment,a),x(ei.$$.fragment,a),x(ch.$$.fragment,a),x(ti.$$.fragment,a),x(dh.$$.fragment,a),x(si.$$.fragment,a),x(mh.$$.fragment,a),x(hh.$$.fragment,a),x(ni.$$.fragment,a),x($h.$$.fragment,a),x(oi.$$.fragment,a),x(xh.$$.fragment,a),x(vh.$$.fragment,a),x(yh.$$.fragment,a),x(jh.$$.fragment,a),x(wh.$$.fragment,a),x(Dh.$$.fragment,a),x(mi.$$.fragment,a),x(kh.$$.fragment,a),x(Eh.$$.fragment,a),x(fi.$$.fragment,a),x(qh.$$.fragment,a),x(ui.$$.fragment,a),x(Ih.$$.fragment,a),x(gi.$$.fragment,a),x(Th.$$.fragment,a),x(_i.$$.fragment,a),x(Ph.$$.fragment,a),x(bi.$$.fragment,a),x(Fh.$$.fragment,a),x($i.$$.fragment,a),x(Ah.$$.fragment,a),x(xi.$$.fragment,a),x(Lh.$$.fragment,a),x(vi.$$.fragment,a),x(Oh.$$.fragment,a),x(Ch.$$.fragment,a),x(ji.$$.fragment,a),x(zh.$$.fragment,a),x(Vh.$$.fragment,a),x(Di.$$.fragment,a),x(Uh.$$.fragment,a),x(ki.$$.fragment,a),x(Mh.$$.fragment,a),x(Ei.$$.fragment,a),x(Rh.$$.fragment,a),x(qi.$$.fragment,a),x(Bh.$$.fragment,a),x(Ii.$$.fragment,a),x(Jh.$$.fragment,a),x(Kh.$$.fragment,a),x(Zh.$$.fragment,a),x(Xh.$$.fragment,a),x(Qh.$$.fragment,a),x(ef.$$.fragment,a),x(Ai.$$.fragment,a),x(of.$$.fragment,a),x(lf.$$.fragment,a),x(pf.$$.fragment,a),x(cf.$$.fragment,a),x(df.$$.fragment,a),x(mf.$$.fragment,a),x(hf.$$.fragment,a),x(ff.$$.fragment,a),x(Vi.$$.fragment,a),x(gf.$$.fragment,a),x(Ui.$$.fragment,a),x(_f.$$.fragment,a),x(bf.$$.fragment,a),x($f.$$.fragment,a),x(Ri.$$.fragment,a),x(xf.$$.fragment,a),x(Bi.$$.fragment,a),x(vf.$$.fragment,a),x(Hi.$$.fragment,a),x(yf.$$.fragment,a),x(jf.$$.fragment,a),x(wf.$$.fragment,a),x(Ji.$$.fragment,a),x(Ki.$$.fragment,a),x(Zi.$$.fragment,a),x(Xi.$$.fragment,a),x(Qi.$$.fragment,a),x(kf.$$.fragment,a),x(Ef.$$.fragment,a),x(qf.$$.fragment,a),x(If.$$.fragment,a),X7=!0)},o(a){v(t.$$.fragment,a),v(fs.$$.fragment,a),v(Pp.$$.fragment,a),v(Fp.$$.fragment,a),v(Pr.$$.fragment,a),v(Lp.$$.fragment,a),v(Fr.$$.fragment,a),v(Sp.$$.fragment,a),v(Op.$$.fragment,a),v(Cp.$$.fragment,a),v(Sr.$$.fragment,a),v(zp.$$.fragment,a),v(Or.$$.fragment,a),v(Vp.$$.fragment,a),v(Up.$$.fragment,a),v(Mp.$$.fragment,a),v(Vr.$$.fragment,a),v(Hp.$$.fragment,a),v(Gp.$$.fragment,a),v(Mr.$$.fragment,a),v(Wp.$$.fragment,a),v(Rr.$$.fragment,a),v(Yp.$$.fragment,a),v(Br.$$.fragment,a),v(Jp.$$.fragment,a),v(Gr.$$.fragment,a),v(Zp.$$.fragment,a),v(Wr.$$.fragment,a),v(Xp.$$.fragment,a),v(Yr.$$.fragment,a),v(Qp.$$.fragment,a),v(Jr.$$.fragment,a),v(ec.$$.fragment,a),v(Kr.$$.fragment,a),v(tc.$$.fragment,a),v(Zr.$$.fragment,a),v(sc.$$.fragment,a),v(Xr.$$.fragment,a),v(ac.$$.fragment,a),v(Qr.$$.fragment,a),v(nc.$$.fragment,a),v(eo.$$.fragment,a),v(rc.$$.fragment,a),v(to.$$.fragment,a),v(oc.$$.fragment,a),v(so.$$.fragment,a),v(ic.$$.fragment,a),v(ao.$$.fragment,a),v(pc.$$.fragment,a),v(dc.$$.fragment,a),v(mc.$$.fragment,a),v(ro.$$.fragment,a),v(hc.$$.fragment,a),v(oo.$$.fragment,a),v(fc.$$.fragment,a),v(lo.$$.fragment,a),v(gc.$$.fragment,a),v(io.$$.fragment,a),v(bc.$$.fragment,a),v(po.$$.fragment,a),v($c.$$.fragment,a),v(xc.$$.fragment,a),v(mo.$$.fragment,a),v(vc.$$.fragment,a),v(ho.$$.fragment,a),v(jc.$$.fragment,a),v(fo.$$.fragment,a),v(wc.$$.fragment,a),v(uo.$$.fragment,a),v(Dc.$$.fragment,a),v(go.$$.fragment,a),v(kc.$$.fragment,a),v(_o.$$.fragment,a),v(Ec.$$.fragment,a),v(bo.$$.fragment,a),v(Ic.$$.fragment,a),v($o.$$.fragment,a),v(Nc.$$.fragment,a),v(xo.$$.fragment,a),v(Pc.$$.fragment,a),v(vo.$$.fragment,a),v(Fc.$$.fragment,a),v(yo.$$.fragment,a),v(jo.$$.fragment,a),v(wo.$$.fragment,a),v(Lc.$$.fragment,a),v(Do.$$.fragment,a),v(Sc.$$.fragment,a),v(Oc.$$.fragment,a),v(Eo.$$.fragment,a),v(Cc.$$.fragment,a),v(qo.$$.fragment,a),v(Vc.$$.fragment,a),v(Io.$$.fragment,a),v(Uc.$$.fragment,a),v(To.$$.fragment,a),v(Mc.$$.fragment,a),v(No.$$.fragment,a),v(Rc.$$.fragment,a),v(Po.$$.fragment,a),v(Hc.$$.fragment,a),v(Wc.$$.fragment,a),v(Yc.$$.fragment,a),v(Kc.$$.fragment,a),v(Ao.$$.fragment,a),v(Zc.$$.fragment,a),v(Lo.$$.fragment,a),v(Xc.$$.fragment,a),v(Qc.$$.fragment,a),v(ed.$$.fragment,a),v(td.$$.fragment,a),v(sd.$$.fragment,a),v(ad.$$.fragment,a),v(nd.$$.fragment,a),v(rd.$$.fragment,a),v(od.$$.fragment,a),v(ld.$$.fragment,a),v(id.$$.fragment,a),v(pd.$$.fragment,a),v(cd.$$.fragment,a),v(dd.$$.fragment,a),v(md.$$.fragment,a),v(hd.$$.fragment,a),v(fd.$$.fragment,a),v(ud.$$.fragment,a),v(gd.$$.fragment,a),v(_d.$$.fragment,a),v(bd.$$.fragment,a),v($d.$$.fragment,a),v(xd.$$.fragment,a),v(Ho.$$.fragment,a),v(vd.$$.fragment,a),v(Go.$$.fragment,a),v(yd.$$.fragment,a),v(Wo.$$.fragment,a),v(jd.$$.fragment,a),v(Yo.$$.fragment,a),v(wd.$$.fragment,a),v(Dd.$$.fragment,a),v(Jo.$$.fragment,a),v(Ed.$$.fragment,a),v(Ko.$$.fragment,a),v(qd.$$.fragment,a),v(Zo.$$.fragment,a),v(Id.$$.fragment,a),v(Nd.$$.fragment,a),v(Fd.$$.fragment,a),v(Ld.$$.fragment,a),v(Sd.$$.fragment,a),v(Od.$$.fragment,a),v(el.$$.fragment,a),v(Cd.$$.fragment,a),v(tl.$$.fragment,a),v(zd.$$.fragment,a),v(sl.$$.fragment,a),v(Vd.$$.fragment,a),v(nl.$$.fragment,a),v(Md.$$.fragment,a),v(rl.$$.fragment,a),v(Rd.$$.fragment,a),v(ol.$$.fragment,a),v(Bd.$$.fragment,a),v(ll.$$.fragment,a),v(Hd.$$.fragment,a),v(il.$$.fragment,a),v(Gd.$$.fragment,a),v(pl.$$.fragment,a),v(Wd.$$.fragment,a),v(cl.$$.fragment,a),v(Yd.$$.fragment,a),v(dl.$$.fragment,a),v(Jd.$$.fragment,a),v(ml.$$.fragment,a),v(Kd.$$.fragment,a),v(hl.$$.fragment,a),v(Xd.$$.fragment,a),v(fl.$$.fragment,a),v(em.$$.fragment,a),v(tm.$$.fragment,a),v(gl.$$.fragment,a),v(am.$$.fragment,a),v(_l.$$.fragment,a),v(nm.$$.fragment,a),v(bl.$$.fragment,a),v(rm.$$.fragment,a),v($l.$$.fragment,a),v(om.$$.fragment,a),v(xl.$$.fragment,a),v(lm.$$.fragment,a),v(vl.$$.fragment,a),v(im.$$.fragment,a),v(yl.$$.fragment,a),v(cm.$$.fragment,a),v(jl.$$.fragment,a),v(dm.$$.fragment,a),v(wl.$$.fragment,a),v(hm.$$.fragment,a),v(Dl.$$.fragment,a),v(fm.$$.fragment,a),v(kl.$$.fragment,a),v(El.$$.fragment,a),v(gm.$$.fragment,a),v(ql.$$.fragment,a),v(_m.$$.fragment,a),v(Il.$$.fragment,a),v(bm.$$.fragment,a),v(Tl.$$.fragment,a),v($m.$$.fragment,a),v(Nl.$$.fragment,a),v(xm.$$.fragment,a),v(Pl.$$.fragment,a),v(vm.$$.fragment,a),v(ym.$$.fragment,a),v(jm.$$.fragment,a),v(wm.$$.fragment,a),v(Ll.$$.fragment,a),v(Dm.$$.fragment,a),v(Sl.$$.fragment,a),v(km.$$.fragment,a),v(Ol.$$.fragment,a),v(Em.$$.fragment,a),v(qm.$$.fragment,a),v(Cl.$$.fragment,a),v(Tm.$$.fragment,a),v(zl.$$.fragment,a),v(Nm.$$.fragment,a),v(Vl.$$.fragment,a),v(Pm.$$.fragment,a),v(Ul.$$.fragment,a),v(Am.$$.fragment,a),v(Ml.$$.fragment,a),v(Sm.$$.fragment,a),v(Rl.$$.fragment,a),v(Cm.$$.fragment,a),v(zm.$$.fragment,a),v(Vm.$$.fragment,a),v(Um.$$.fragment,a),v(Mm.$$.fragment,a),v(Rm.$$.fragment,a),v(Bm.$$.fragment,a),v(Hm.$$.fragment,a),v(Gm.$$.fragment,a),v(Wm.$$.fragment,a),v(Ym.$$.fragment,a),v(Jm.$$.fragment,a),v(Km.$$.fragment,a),v(Zm.$$.fragment,a),v(Xm.$$.fragment,a),v(Qm.$$.fragment,a),v(eh.$$.fragment,a),v(th.$$.fragment,a),v(Yl.$$.fragment,a),v(ah.$$.fragment,a),v(Jl.$$.fragment,a),v(nh.$$.fragment,a),v(Kl.$$.fragment,a),v(oh.$$.fragment,a),v(Zl.$$.fragment,a),v(lh.$$.fragment,a),v(Xl.$$.fragment,a),v(ih.$$.fragment,a),v(Ql.$$.fragment,a),v(ph.$$.fragment,a),v(ei.$$.fragment,a),v(ch.$$.fragment,a),v(ti.$$.fragment,a),v(dh.$$.fragment,a),v(si.$$.fragment,a),v(mh.$$.fragment,a),v(hh.$$.fragment,a),v(ni.$$.fragment,a),v($h.$$.fragment,a),v(oi.$$.fragment,a),v(xh.$$.fragment,a),v(vh.$$.fragment,a),v(yh.$$.fragment,a),v(jh.$$.fragment,a),v(wh.$$.fragment,a),v(Dh.$$.fragment,a),v(mi.$$.fragment,a),v(kh.$$.fragment,a),v(Eh.$$.fragment,a),v(fi.$$.fragment,a),v(qh.$$.fragment,a),v(ui.$$.fragment,a),v(Ih.$$.fragment,a),v(gi.$$.fragment,a),v(Th.$$.fragment,a),v(_i.$$.fragment,a),v(Ph.$$.fragment,a),v(bi.$$.fragment,a),v(Fh.$$.fragment,a),v($i.$$.fragment,a),v(Ah.$$.fragment,a),v(xi.$$.fragment,a),v(Lh.$$.fragment,a),v(vi.$$.fragment,a),v(Oh.$$.fragment,a),v(Ch.$$.fragment,a),v(ji.$$.fragment,a),v(zh.$$.fragment,a),v(Vh.$$.fragment,a),v(Di.$$.fragment,a),v(Uh.$$.fragment,a),v(ki.$$.fragment,a),v(Mh.$$.fragment,a),v(Ei.$$.fragment,a),v(Rh.$$.fragment,a),v(qi.$$.fragment,a),v(Bh.$$.fragment,a),v(Ii.$$.fragment,a),v(Jh.$$.fragment,a),v(Kh.$$.fragment,a),v(Zh.$$.fragment,a),v(Xh.$$.fragment,a),v(Qh.$$.fragment,a),v(ef.$$.fragment,a),v(Ai.$$.fragment,a),v(of.$$.fragment,a),v(lf.$$.fragment,a),v(pf.$$.fragment,a),v(cf.$$.fragment,a),v(df.$$.fragment,a),v(mf.$$.fragment,a),v(hf.$$.fragment,a),v(ff.$$.fragment,a),v(Vi.$$.fragment,a),v(gf.$$.fragment,a),v(Ui.$$.fragment,a),v(_f.$$.fragment,a),v(bf.$$.fragment,a),v($f.$$.fragment,a),v(Ri.$$.fragment,a),v(xf.$$.fragment,a),v(Bi.$$.fragment,a),v(vf.$$.fragment,a),v(Hi.$$.fragment,a),v(yf.$$.fragment,a),v(jf.$$.fragment,a),v(wf.$$.fragment,a),v(Ji.$$.fragment,a),v(Ki.$$.fragment,a),v(Zi.$$.fragment,a),v(Xi.$$.fragment,a),v(Qi.$$.fragment,a),v(kf.$$.fragment,a),v(Ef.$$.fragment,a),v(qf.$$.fragment,a),v(If.$$.fragment,a),X7=!1},d(a){s(c),a&&s(g),a&&s(f),y(t),a&&s(Tr),a&&s(Se),y(fs),a&&s(p7),a&&s(Z),y(Pp),y(Fp),y(Pr),y(Lp),y(Fr),a&&s(c7),a&&s(mn),y(Sp),a&&s(d7),a&&s(Lr),a&&s(m7),a&&s(q),y(Op),y(Cp),y(Sr),y(zp),y(Or),y(Vp),y(Up),y(Mp),y(Vr),y(Hp),y(Gp),y(Mr),y(Wp),y(Rr),y(Yp),y(Br),y(Jp),y(Gr),y(Zp),y(Wr),y(Xp),y(Yr),y(Qp),y(Jr),y(ec),y(Kr),y(tc),y(Zr),y(sc),y(Xr),y(ac),y(Qr),y(nc),y(eo),y(rc),y(to),y(oc),y(so),y(ic),y(ao),y(pc),y(dc),y(mc),y(ro),y(hc),y(oo),y(fc),y(lo),y(gc),y(io),y(bc),y(po),y($c),y(xc),y(mo),y(vc),y(ho),y(jc),y(fo),y(wc),y(uo),y(Dc),y(go),y(kc),y(_o),y(Ec),y(bo),y(Ic),y($o),y(Nc),y(xo),y(Pc),y(vo),y(Fc),y(yo),y(jo),y(wo),y(Lc),y(Do),y(Sc),y(Oc),y(Eo),y(Cc),y(qo),y(Vc),y(Io),y(Uc),y(To),y(Mc),y(No),y(Rc),y(Po),y(Hc),y(Wc),y(Yc),y(Kc),y(Ao),y(Zc),y(Lo),y(Xc),y(Qc),y(ed),y(td),y(sd),y(ad),y(nd),y(rd),y(od),y(ld),y(id),y(pd),y(cd),y(dd),y(md),y(hd),y(fd),y(ud),y(gd),y(_d),y(bd),y($d),y(xd),y(Ho),y(vd),y(Go),y(yd),y(Wo),y(jd),y(Yo),y(wd),y(Dd),y(Jo),a&&s(h7),a&&s(Ct),y(Ed),y(Ko),a&&s(f7),a&&s(X),y(qd),y(Zo),a&&s(u7),a&&s(de),y(Id),a&&s(g7),a&&s(me),y(Nd),a&&s(_7),a&&s(he),y(Fd),a&&s(b7),a&&s(qn),y(Ld),a&&s($7),a&&s(Qo),a&&s(x7),a&&s(F),y(Sd),y(Od),y(el),y(Cd),y(tl),y(zd),y(sl),y(Vd),y(nl),y(Md),y(rl),y(Rd),y(ol),y(Bd),y(ll),y(Hd),y(il),y(Gd),y(pl),y(Wd),y(cl),y(Yd),y(dl),y(Jd),y(ml),y(Kd),y(hl),y(Xd),y(fl),y(em),y(tm),y(gl),y(am),y(_l),y(nm),y(bl),y(rm),y($l),y(om),y(xl),y(lm),y(vl),y(im),y(yl),y(cm),y(jl),y(dm),y(wl),y(hm),y(Dl),y(fm),y(kl),y(El),y(gm),y(ql),y(_m),y(Il),y(bm),y(Tl),y($m),y(Nl),y(xm),y(Pl),y(vm),a&&s(v7),a&&s(mg),a&&s(y7),a&&s(Un),y(ym),a&&s(j7),a&&s(Al),a&&s(w7),a&&s(L),y(jm),y(wm),y(Ll),y(Dm),y(Sl),y(km),y(Ol),y(Em),y(qm),y(Cl),y(Tm),y(zl),y(Nm),y(Vl),y(Pm),y(Ul),y(Am),y(Ml),y(Sm),y(Rl),y(Cm),y(zm),y(Vm),y(Um),y(Mm),y(Rm),y(Bm),y(Hm),y(Gm),y(Wm),y(Ym),y(Jm),y(Km),y(Zm),y(Xm),a&&s(D7),a&&s(Bn),y(Qm),a&&s(k7),a&&s(Wl),a&&s(E7),a&&s(U),y(eh),y(th),y(Yl),y(ah),y(Jl),y(nh),y(Kl),y(oh),y(Zl),y(lh),y(Xl),y(ih),y(Ql),y(ph),y(ei),y(ch),y(ti),y(dh),y(si),a&&s(q7),a&&s(Wn),y(mh),a&&s(I7),a&&s(O),y(hh),y(ni),y($h),y(oi),y(xh),y(vh),y(yh),y(jh),y(wh),y(Dh),y(mi),y(kh),y(Eh),y(fi),y(qh),y(ui),a&&s(T7),a&&s(Yt),y(Ih),y(gi),a&&s(N7),a&&s(J),y(Th),y(_i),y(Ph),y(bi),y(Fh),y($i),a&&s(P7),a&&s(Ge),y(Ah),y(xi),a&&s(F7),a&&s(Q),y(Lh),y(vi),y(Oh),a&&s(A7),a&&s(ee),y(Ch),y(ji),y(zh),a&&s(L7),a&&s(Jt),y(Vh),y(Di),a&&s(S7),a&&s(Kt),y(Uh),y(ki),a&&s(O7),a&&s(Zt),y(Mh),y(Ei),a&&s(C7),a&&s(Xt),y(Rh),y(qi),a&&s(z7),a&&s(M),y(Bh),y(Ii),y(Jh),y(Kh),y(Zh),y(Xh),y(Qh),a&&s(V7),a&&s(R),y(ef),y(Ai),y(of),y(lf),y(pf),y(cf),y(df),a&&s(U7),a&&s(er),y(mf),a&&s(M7),a&&s(te),y(hf),y(ff),y(Vi),y(gf),y(Ui),a&&s(R7),a&&s(tr),y(_f),a&&s(B7),a&&s(Oa),a&&s(H7),a&&s(se),y(bf),y($f),y(Ri),y(xf),y(Bi),y(vf),y(Hi),y(yf),a&&s(G7),a&&s(sr),y(jf),a&&s(W7),a&&s(C),y(wf),y(Ji),y(Ki),y(Zi),y(Xi),y(Qi),a&&s(Y7),a&&s(or),y(kf),a&&s(J7),a&&s(ir),y(Ef),a&&s(K7),a&&s(pr),y(qf),a&&s(Z7),a&&s(cr),y(If)}}}const ire={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function pre(k){return Sse(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gre extends Pse{constructor(c){super();Fse(this,c,pre,lre,Ase,{})}}export{gre as default,ire as metadata};
