import{S as Di,i as Ai,s as Ii,e as t,k as c,w as _,t as n,M as Ti,c as l,d as s,m as f,a as p,x as j,h as r,b as h,N as Ei,G as a,g as i,y as v,q as b,o as $,B as x,v as Pi,L as qi}from"../chunks/vendor-hf-doc-builder.js";import{T as ut}from"../chunks/Tip-hf-doc-builder.js";import{I as C}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as I}from"../chunks/CodeBlock-hf-doc-builder.js";import{F as Si,M as zi}from"../chunks/Markdown-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function Ci(q){let d,w,m,y,k,g,E,u;return{c(){d=t("p"),w=n("An "),m=t("a"),y=n("IterableDataset"),k=n(" is useful for iterative jobs like training a model. You shouldn\u2019t use a "),g=t("a"),E=n("IterableDataset"),u=n(" for jobs that require random access to examples because you have to iterate all over it using a for loop. Getting the last example in an iterable dataset would require you to iterate over all the previous examples."),this.h()},l(D){d=l(D,"P",{});var A=p(d);w=r(A,"An "),m=l(A,"A",{href:!0});var T=p(m);y=r(T,"IterableDataset"),T.forEach(s),k=r(A," is useful for iterative jobs like training a model. You shouldn\u2019t use a "),g=l(A,"A",{href:!0});var N=p(g);E=r(N,"IterableDataset"),N.forEach(s),u=r(A," for jobs that require random access to examples because you have to iterate all over it using a for loop. Getting the last example in an iterable dataset would require you to iterate over all the previous examples."),A.forEach(s),this.h()},h(){h(m,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset"),h(g,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset")},m(D,A){i(D,d,A),a(d,w),a(d,m),a(m,y),a(d,k),a(d,g),a(g,E),a(d,u)},d(D){D&&s(d)}}}function Ni(q){let d,w,m,y;return{c(){d=t("p"),w=t("a"),m=n("IterableDataset.shuffle()"),y=n(" will also shuffle the order of the shards if the dataset is sharded into multiple sets."),this.h()},l(k){d=l(k,"P",{});var g=p(d);w=l(g,"A",{href:!0});var E=p(w);m=r(E,"IterableDataset.shuffle()"),E.forEach(s),y=r(g," will also shuffle the order of the shards if the dataset is sharded into multiple sets."),g.forEach(s),this.h()},h(){h(w,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.shuffle")},m(k,g){i(k,d,g),a(d,w),a(w,m),a(d,y)},d(k){k&&s(d)}}}function Mi(q){let d,w,m,y,k,g,E,u,D,A,T,N,he;return{c(){d=t("p"),w=t("code"),m=n("take"),y=n(" and "),k=t("code"),g=n("skip"),E=n(" prevent future calls to "),u=t("code"),D=n("shuffle"),A=n(" because they lock in the order of the shards. You should "),T=t("code"),N=n("shuffle"),he=n(" your dataset before splitting it.")},l(z){d=l(z,"P",{});var P=p(d);w=l(P,"CODE",{});var Ds=p(w);m=r(Ds,"take"),Ds.forEach(s),y=r(P," and "),k=l(P,"CODE",{});var As=p(k);g=r(As,"skip"),As.forEach(s),E=r(P," prevent future calls to "),u=l(P,"CODE",{});var ce=p(u);D=r(ce,"shuffle"),ce.forEach(s),A=r(P," because they lock in the order of the shards. You should "),T=l(P,"CODE",{});var Is=p(T);N=r(Is,"shuffle"),Is.forEach(s),he=r(P," your dataset before splitting it."),P.forEach(s)},m(z,P){i(z,d,P),a(d,w),a(w,m),a(d,y),a(d,k),a(k,g),a(d,E),a(d,u),a(u,D),a(d,A),a(d,T),a(T,N),a(d,he)},d(z){z&&s(d)}}}function Li(q){let d,w,m,y,k,g,E,u;return{c(){d=t("p"),w=n("Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),m=t("code"),y=n("Value('int32')"),k=n(" to "),g=t("code"),E=n("Value('bool')"),u=n(" if the original column only contains ones and zeros.")},l(D){d=l(D,"P",{});var A=p(d);w=r(A,"Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),m=l(A,"CODE",{});var T=p(m);y=r(T,"Value('int32')"),T.forEach(s),k=r(A," to "),g=l(A,"CODE",{});var N=p(g);E=r(N,"Value('bool')"),N.forEach(s),u=r(A," if the original column only contains ones and zeros."),A.forEach(s)},m(D,A){i(D,d,A),a(d,w),a(d,m),a(m,y),a(d,k),a(d,g),a(g,E),a(d,u)},d(D){D&&s(d)}}}function Oi(q){let d,w,m,y,k;return{c(){d=t("p"),w=n("See other examples of batch processing in the "),m=t("a"),y=n("batched map processing"),k=n(" documentation. They work the same for iterable datasets."),this.h()},l(g){d=l(g,"P",{});var E=p(d);w=r(E,"See other examples of batch processing in the "),m=l(E,"A",{href:!0});var u=p(m);y=r(u,"batched map processing"),u.forEach(s),k=r(E," documentation. They work the same for iterable datasets."),E.forEach(s),this.h()},h(){h(m,"href","./process#batch-processing")},m(g,E){i(g,d,E),a(d,w),a(d,m),a(m,y),a(d,k)},d(g){g&&s(d)}}}function Vi(q){let d,w,m,y,k,g,E;return d=new I({props:{code:`seed, buffer_size = 42, 10_000
dataset = dataset.shuffle(seed, buffer_size=buffer_size)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>seed, buffer_size = <span class="hljs-number">42</span>, <span class="hljs-number">10_000</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.shuffle(seed, buffer_size=buffer_size)`}}),g=new I({props:{code:`import torch
from torch.utils.data import DataLoader
from transformers import AutoModelForMaskedLM, DataCollatorForLanguageModeling
from tqdm import tqdm
dataset = dataset.with_format("torch")
dataloader = DataLoader(dataset, collate_fn=DataCollatorForLanguageModeling(tokenizer))
device = 'cuda' if torch.cuda.is_available() else 'cpu' 
model = AutoModelForMaskedLM.from_pretrained("distilbert-base-uncased")
model.train().to(device)
optimizer = torch.optim.AdamW(params=model.parameters(), lr=1e-5)
for epoch in range(3):
    dataset.set_epoch(epoch)
    for i, batch in enumerate(tqdm(dataloader, total=5)):
        if i == 5:
            break
        batch = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**batch)
        loss = outputs[0]
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()
        if i % 10 == 0:
            print(f"loss: {loss}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForMaskedLM, DataCollatorForLanguageModeling
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-string">&quot;torch&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = DataLoader(dataset, collate_fn=DataCollatorForLanguageModeling(tokenizer))
<span class="hljs-meta">&gt;&gt;&gt; </span>device = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span> 
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.train().to(device)
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer = torch.optim.AdamW(params=model.parameters(), lr=<span class="hljs-number">1e-5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):
<span class="hljs-meta">... </span>    dataset.set_epoch(epoch)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tqdm(dataloader, total=<span class="hljs-number">5</span>)):
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">5</span>:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">break</span>
<span class="hljs-meta">... </span>        batch = {k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items()}
<span class="hljs-meta">... </span>        outputs = model(**batch)
<span class="hljs-meta">... </span>        loss = outputs[<span class="hljs-number">0</span>]
<span class="hljs-meta">... </span>        loss.backward()
<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loss: <span class="hljs-subst">{loss}</span>&quot;</span>)`}}),{c(){_(d.$$.fragment),w=c(),m=t("p"),y=n("Lastly, create a simple training loop and start training:"),k=c(),_(g.$$.fragment)},l(u){j(d.$$.fragment,u),w=f(u),m=l(u,"P",{});var D=p(m);y=r(D,"Lastly, create a simple training loop and start training:"),D.forEach(s),k=f(u),j(g.$$.fragment,u)},m(u,D){v(d,u,D),i(u,w,D),i(u,m,D),a(m,y),i(u,k,D),v(g,u,D),E=!0},p:qi,i(u){E||(b(d.$$.fragment,u),b(g.$$.fragment,u),E=!0)},o(u){$(d.$$.fragment,u),$(g.$$.fragment,u),E=!1},d(u){x(d,u),u&&s(w),u&&s(m),u&&s(k),x(g,u)}}}function Fi(q){let d,w;return d=new zi({props:{$$slots:{default:[Vi]},$$scope:{ctx:q}}}),{c(){_(d.$$.fragment)},l(m){j(d.$$.fragment,m)},m(m,y){v(d,m,y),w=!0},p(m,y){const k={};y&2&&(k.$$scope={dirty:y,ctx:m}),d.$set(k)},i(m){w||(b(d.$$.fragment,m),w=!0)},o(m){$(d.$$.fragment,m),w=!1},d(m){x(d,m)}}}function Ri(q){let d,w,m,y,k,g,E,u,D,A,T,N,he,z,P,Ds,As,ce,Is,gt,J,Ts,Mp,Zl,Ps,Lp,_t,L,en,Be,sn,an,_a,tn,ln,qs,nn,rn,jt,Je,vt,H,pn,Ss,on,hn,zs,cn,fn,bt,fe,$t,W,de,ja,We,dn,va,mn,xt,O,un,Cs,gn,_n,Ns,jn,vn,Ms,bn,$n,wt,V,xn,ba,wn,yn,$a,kn,En,Ls,Dn,An,yt,Ge,kt,me,Et,G,ue,xa,Ke,In,wa,Tn,Dt,ge,Pn,ya,qn,Sn,At,_e,zn,ka,Cn,Nn,It,Qe,Tt,K,je,Ea,Xe,Mn,Da,Ln,Pt,Os,On,qt,Vs,ve,Fs,Vn,Fn,Aa,Rn,Hn,St,Ze,zt,Rs,be,Hs,Yn,Un,Ia,Bn,Jn,Ct,es,Nt,$e,Mt,Ys,Lt,Q,xe,Ta,ss,Wn,Pa,Gn,Ot,X,Us,Kn,Qn,Bs,Xn,Zn,Vt,as,Ft,we,er,qa,sr,ar,Rt,ts,Ht,Y,tr,Sa,lr,nr,za,rr,pr,Yt,Z,ye,Ca,ls,or,Na,ir,Ut,Js,hr,Bt,ee,ke,Ma,ns,cr,La,fr,Jt,Ee,dr,Ws,mr,ur,Wt,De,gr,Gs,_r,jr,Gt,rs,Kt,se,Ae,Oa,ps,vr,Va,br,Qt,Ie,$r,Ks,xr,wr,Xt,os,Zt,ae,Te,Fa,is,yr,Ra,kr,el,M,Qs,Er,Dr,Ha,Ar,Ir,Ya,Tr,Pr,Ua,qr,Sr,sl,hs,al,Pe,tl,qe,zr,Xs,Cr,Nr,ll,cs,nl,te,Se,Ba,fs,Mr,Ja,Lr,rl,S,Or,Zs,Vr,Fr,ea,Rr,Hr,sa,Yr,Ur,aa,Br,Jr,ta,Wr,Gr,pl,la,Kr,ol,U,Qr,na,Xr,Zr,Wa,ep,sp,il,ds,hl,ze,ap,ra,tp,lp,cl,ms,fl,Ce,np,pa,rp,pp,dl,B,op,Ga,ip,hp,oa,cp,fp,ml,us,ul,le,Ne,Ka,gs,dp,Qa,mp,gl,R,ia,up,gp,Xa,_p,jp,Za,vp,bp,_l,ne,Me,et,_s,$p,st,xp,jl,js,vl,Le,bl,re,Oe,at,vs,wp,tt,yp,$l,Ve,kp,ha,Ep,Dp,xl,bs,wl,pe,ca,Ap,Ip,lt,Tp,Pp,yl,$s,kl,oe,Fe,nt,xs,qp,rt,Sp,El,ws,fa,zp,Cp,Dl,Re,Al;return g=new C({}),Je=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
print(next(iter(dataset)))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataset)))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision of Chief Napoleon Dzombe, which he shared with John Blanchard during his first visit to Malawi. Chief Napoleon conveyed the desperate need for a program to intervene and care for the orphans and vulnerable children (OVC) in Malawi, and John committed to help...</span>`}}),fe=new ut({props:{$$slots:{default:[Ci]},$$scope:{ctx:q}}}),We=new C({}),Ge=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
shuffled_dataset = dataset.shuffle(seed=42, buffer_size=10_000)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = dataset.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">10_000</span>)`}}),me=new ut({props:{$$slots:{default:[Ni]},$$scope:{ctx:q}}}),Ke=new C({}),Qe=new I({props:{code:`for epoch in range(epochs):
    shuffled_dataset.set_epoch(epoch)
    for example in shuffled_dataset:
        ...`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):
<span class="hljs-meta">... </span>    shuffled_dataset.set_epoch(epoch)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> shuffled_dataset:
<span class="hljs-meta">... </span>        ...`}}),Xe=new C({}),Ze=new I({props:{code:`dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
dataset_head = dataset.take(2)
list(dataset_head)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_head = dataset.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(dataset_head)
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was...&#x27;</span>}, {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Lily James cannot fight the music...&#x27;</span>}]`}}),es=new I({props:{code:"train_dataset = shuffled_dataset.skip(1000)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_dataset = shuffled_dataset.skip(<span class="hljs-number">1000</span>)'}}),$e=new ut({props:{warning:!0,$$slots:{default:[Mi]},$$scope:{ctx:q}}}),ss=new C({}),as=new I({props:{code:`from datasets import interleave_datasets
en_dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
fr_dataset = load_dataset('oscar', "unshuffled_deduplicated_fr", split='train', streaming=True)

multilingual_dataset = interleave_datasets([en_dataset, fr_dataset])
list(multilingual_dataset.take(2))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>en_dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>fr_dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>multilingual_dataset = interleave_datasets([en_dataset, fr_dataset])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(multilingual_dataset.take(<span class="hljs-number">2</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...&#x27;</span>}, {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;M\xE9dia de d\xE9bat d&#x27;id\xE9es, de culture et de litt\xE9rature...&quot;</span>}]`}}),ts=new I({props:{code:`multilingual_dataset_with_oversampling = interleave_datasets([en_dataset, fr_dataset], probabilities=[0.8, 0.2], seed=42)
list(multilingual_dataset_with_oversampling.take(2))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>multilingual_dataset_with_oversampling = interleave_datasets([en_dataset, fr_dataset], probabilities=[<span class="hljs-number">0.8</span>, <span class="hljs-number">0.2</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(multilingual_dataset_with_oversampling.take(<span class="hljs-number">2</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...&#x27;</span>}, {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Lily James cannot fight the music...&#x27;</span>}]`}}),ls=new C({}),ns=new C({}),rs=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('mc4', 'en', streaming=True, split='train')
dataset = dataset.rename_column("text", "content")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;mc4&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>)`}}),ps=new C({}),os=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('mc4', 'en', streaming=True, split='train')
dataset = dataset.remove_columns('timestamp')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;mc4&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&#x27;timestamp&#x27;</span>)`}}),is=new C({}),hs=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('glue', 'mrpc', split='train')features

from datasets import ClassLabel, Value
new_features = dataset.features.copy()
new_features["label"] = ClassLabel(names=['negative', 'positive'])
new_features["idx"] = Value('int64')
dataset = dataset.cast(new_features)
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&#x27;int64&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Pe=new ut({props:{$$slots:{default:[Li]},$$scope:{ctx:q}}}),cs=new I({props:{code:`dataset.features

dataset = dataset.cast_column("audio", Audio(sampling_rate=16000))
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),fs=new C({}),ds=new I({props:{code:`def add_prefix(example):
    example['text'] = 'My text: ' + example['text']
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&#x27;text&#x27;</span>] = <span class="hljs-string">&#x27;My text: &#x27;</span> + example[<span class="hljs-string">&#x27;text&#x27;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`}}),ms=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', 'unshuffled_deduplicated_en', streaming=True, split='train')
updated_dataset = dataset.map(add_prefix)
list(updated_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&#x27;unshuffled_deduplicated_en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(updated_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Mtendere Village was inspired by...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Lily James cannot fight the music...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: &quot;I\\&#x27;d love to help kickstart...&#x27;</span>}]`}}),us=new I({props:{code:`updated_dataset = dataset.map(add_prefix, remove_columns=["id"])
list(updated_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(add_prefix, remove_columns=[<span class="hljs-string">&quot;id&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(updated_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Mtendere Village was inspired by...&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Lily James cannot fight the music...&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: &quot;I\\&#x27;d love to help kickstart...&#x27;</span>}]`}}),gs=new C({}),_s=new C({}),js=new I({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
dataset = load_dataset("mc4", "en", streaming=True, split="train")
tokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased')
def encode(examples):
    return tokenizer(examples['text'], truncation=True, padding='max_length')
dataset = dataset.map(encode, batched=True, remove_columns=["text", "timestamp", "url"])
next(iter(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;mc4&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;distilbert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataset))
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-number">8466</span>, <span class="hljs-number">1018</span>, <span class="hljs-number">1010</span>, <span class="hljs-number">4029</span>, <span class="hljs-number">2475</span>, <span class="hljs-number">2062</span>, <span class="hljs-number">18558</span>, <span class="hljs-number">3100</span>, <span class="hljs-number">2061</span>, ...,<span class="hljs-number">1106</span>, <span class="hljs-number">3739</span>, <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, ..., <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),Le=new ut({props:{$$slots:{default:[Oi]},$$scope:{ctx:q}}}),vs=new C({}),bs=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', 'unshuffled_deduplicated_en', streaming=True, split='train')
start_with_ar = dataset.filter(lambda example: example['text'].startswith('Ar'))
next(iter(start_with_ar))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&#x27;unshuffled_deduplicated_en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&#x27;text&#x27;</span>].startswith(<span class="hljs-string">&#x27;Ar&#x27;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(start_with_ar))
{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Are you looking for Number the Stars (Essential Modern Classics)?...&#x27;</span>}`}}),$s=new I({props:{code:`even_dataset = dataset.filter(lambda example, idx: idx % 2 == 0, with_indices=True)
list(even_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(even_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision of Chief Napoleon Dzombe, ...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;&quot;I\\&#x27;d love to help kickstart continued development! And 0 EUR/month...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Are you looking for Number the Stars (Essential Modern Classics)? Normally, ...&#x27;</span>}]`}}),xs=new C({}),Re=new Si({props:{pytorch:!0,tensorflow:!1,jax:!1,$$slots:{pytorch:[Fi]},$$scope:{ctx:q}}}),{c(){d=t("meta"),w=c(),m=t("h1"),y=t("a"),k=t("span"),_(g.$$.fragment),E=c(),u=t("span"),D=n("Stream"),A=c(),T=t("p"),N=n("Dataset streaming lets you get started with a dataset without waiting for the entire dataset to download. The data is downloaded progressively as you iterate over the dataset. This is especially helpful when:"),he=c(),z=t("ul"),P=t("li"),Ds=n("You don\u2019t want to wait for an extremely large dataset to download."),As=c(),ce=t("li"),Is=n("The dataset size exceeds the amount of disk space on your computer."),gt=c(),J=t("div"),Ts=t("img"),Zl=c(),Ps=t("img"),_t=c(),L=t("p"),en=n("For example, the English split of the "),Be=t("a"),sn=n("OSCAR"),an=n(" dataset is 1.2 terabytes, but you can use it instantly with streaming. Stream a dataset by setting "),_a=t("code"),tn=n("streaming=True"),ln=n(" in "),qs=t("a"),nn=n("load_dataset()"),rn=n(" as shown below:"),jt=c(),_(Je.$$.fragment),vt=c(),H=t("p"),pn=n("Loading a dataset in streaming mode creates a new dataset type instance (instead of the classic "),Ss=t("a"),on=n("Dataset"),hn=n(" object), known as an "),zs=t("a"),cn=n("IterableDataset"),fn=n(". This special type of dataset has its own set of processing methods shown below."),bt=c(),_(fe.$$.fragment),$t=c(),W=t("h2"),de=t("a"),ja=t("span"),_(We.$$.fragment),dn=c(),va=t("span"),mn=n("Shuffle"),xt=c(),O=t("p"),un=n("Like a regular "),Cs=t("a"),gn=n("Dataset"),_n=n(" object, you can also shuffle a "),Ns=t("a"),jn=n("IterableDataset"),vn=n(" with "),Ms=t("a"),bn=n("IterableDataset.shuffle()"),$n=n("."),wt=c(),V=t("p"),xn=n("The "),ba=t("code"),wn=n("buffer_size"),yn=n(" argument controls the size of the buffer to randomly sample examples from. Let\u2019s say your dataset has one million examples, and you set the "),$a=t("code"),kn=n("buffer_size"),En=n(" to ten thousand. "),Ls=t("a"),Dn=n("IterableDataset.shuffle()"),An=n(" will randomly select examples from the first ten thousand examples in the buffer. Selected examples in the buffer are replaced with new examples. By default, the buffer size is 1,000."),yt=c(),_(Ge.$$.fragment),kt=c(),_(me.$$.fragment),Et=c(),G=t("h2"),ue=t("a"),xa=t("span"),_(Ke.$$.fragment),In=c(),wa=t("span"),Tn=n("Reshuffle"),Dt=c(),ge=t("p"),Pn=n("Sometimes you may want to reshuffle the dataset after each epoch. This will require you to set a different seed for each epoch. Use "),ya=t("code"),qn=n("IterableDataset.set_epoch()"),Sn=n(" in between epochs to tell the dataset what epoch you\u2019re on."),At=c(),_e=t("p"),zn=n("Your seed effectively becomes: "),ka=t("code"),Cn=n("initial seed + current epoch"),Nn=n("."),It=c(),_(Qe.$$.fragment),Tt=c(),K=t("h2"),je=t("a"),Ea=t("span"),_(Xe.$$.fragment),Mn=c(),Da=t("span"),Ln=n("Split dataset"),Pt=c(),Os=t("p"),On=n("You can split your dataset one of two ways:"),qt=c(),Vs=t("ul"),ve=t("li"),Fs=t("a"),Vn=n("IterableDataset.take()"),Fn=n(" returns the first "),Aa=t("code"),Rn=n("n"),Hn=n(" examples in a dataset:"),St=c(),_(Ze.$$.fragment),zt=c(),Rs=t("ul"),be=t("li"),Hs=t("a"),Yn=n("IterableDataset.skip()"),Un=n(" omits the first "),Ia=t("code"),Bn=n("n"),Jn=n(" examples in a dataset and returns the remaining examples:"),Ct=c(),_(es.$$.fragment),Nt=c(),_($e.$$.fragment),Mt=c(),Ys=t("a"),Lt=c(),Q=t("h2"),xe=t("a"),Ta=t("span"),_(ss.$$.fragment),Wn=c(),Pa=t("span"),Gn=n("Interleave"),Ot=c(),X=t("p"),Us=t("a"),Kn=n("interleave_datasets()"),Qn=n(" can combine an "),Bs=t("a"),Xn=n("IterableDataset"),Zn=n(" with other datasets. The combined dataset returns alternating examples from each of the original datasets."),Vt=c(),_(as.$$.fragment),Ft=c(),we=t("p"),er=n("Define sampling probabilities from each of the original datasets for more control over how each of them are sampled and combined. Set the "),qa=t("code"),sr=n("probabilities"),ar=n(" argument with your desired sampling probabilities:"),Rt=c(),_(ts.$$.fragment),Ht=c(),Y=t("p"),tr=n("Around 80% of the final dataset is made of the "),Sa=t("code"),lr=n("en_dataset"),nr=n(", and 20% of the "),za=t("code"),rr=n("fr_dataset"),pr=n("."),Yt=c(),Z=t("h2"),ye=t("a"),Ca=t("span"),_(ls.$$.fragment),or=c(),Na=t("span"),ir=n("Rename, remove, and cast"),Ut=c(),Js=t("p"),hr=n("The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns and changing columns to a new set of features."),Bt=c(),ee=t("h3"),ke=t("a"),Ma=t("span"),_(ns.$$.fragment),cr=c(),La=t("span"),fr=n("Rename"),Jt=c(),Ee=t("p"),dr=n("Use "),Ws=t("a"),mr=n("IterableDataset.rename_column()"),ur=n(" when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Wt=c(),De=t("p"),gr=n("Provide "),Gs=t("a"),_r=n("IterableDataset.rename_column()"),jr=n(" with the name of the original column, and the new column name:"),Gt=c(),_(rs.$$.fragment),Kt=c(),se=t("h3"),Ae=t("a"),Oa=t("span"),_(ps.$$.fragment),vr=c(),Va=t("span"),br=n("Remove"),Qt=c(),Ie=t("p"),$r=n("When you need to remove one or more columns, give "),Ks=t("a"),xr=n("IterableDataset.remove_columns()"),wr=n(" the name of the column to remove. Remove more than one column by providing a list of column names:"),Xt=c(),_(os.$$.fragment),Zt=c(),ae=t("h3"),Te=t("a"),Fa=t("span"),_(is.$$.fragment),yr=c(),Ra=t("span"),kr=n("Cast"),el=c(),M=t("p"),Qs=t("a"),Er=n("IterableDataset.cast()"),Dr=n(" changes the feature type of one or more columns. This method takes your new "),Ha=t("code"),Ar=n("Features"),Ir=n(" as its argument. The following sample code shows how to change the feature types of "),Ya=t("code"),Tr=n("ClassLabel"),Pr=n(" and "),Ua=t("code"),qr=n("Value"),Sr=n(":"),sl=c(),_(hs.$$.fragment),al=c(),_(Pe.$$.fragment),tl=c(),qe=t("p"),zr=n("Use "),Xs=t("a"),Cr=n("IterableDataset.cast_column()"),Nr=n(" to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),ll=c(),_(cs.$$.fragment),nl=c(),te=t("h2"),Se=t("a"),Ba=t("span"),_(fs.$$.fragment),Mr=c(),Ja=t("span"),Lr=n("Map"),rl=c(),S=t("p"),Or=n("Similar to the "),Zs=t("a"),Vr=n("Dataset.map()"),Fr=n(" function for a regular "),ea=t("a"),Rr=n("Dataset"),Hr=n(", \u{1F917}  Datasets features "),sa=t("a"),Yr=n("IterableDataset.map()"),Ur=n(" for processing an "),aa=t("a"),Br=n("IterableDataset"),Jr=n(`.
`),ta=t("a"),Wr=n("IterableDataset.map()"),Gr=n(" applies processing on-the-fly when examples are streamed."),pl=c(),la=t("p"),Kr=n("It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),ol=c(),U=t("p"),Qr=n("The following example demonstrates how to tokenize a "),na=t("a"),Xr=n("IterableDataset"),Zr=n(". The function needs to accept and output a "),Wa=t("code"),ep=n("dict"),sp=n(":"),il=c(),_(ds.$$.fragment),hl=c(),ze=t("p"),ap=n("Next, apply this function to the dataset with "),ra=t("a"),tp=n("IterableDataset.map()"),lp=n(":"),cl=c(),_(ms.$$.fragment),fl=c(),Ce=t("p"),np=n("Let\u2019s take a look at another example, except this time, you will remove a column with "),pa=t("a"),rp=n("IterableDataset.map()"),pp=n(". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),dl=c(),B=t("p"),op=n("Specify the column to remove with the "),Ga=t("code"),ip=n("remove_columns"),hp=n(" argument in "),oa=t("a"),cp=n("IterableDataset.map()"),fp=n(":"),ml=c(),_(us.$$.fragment),ul=c(),le=t("h3"),Ne=t("a"),Ka=t("span"),_(gs.$$.fragment),dp=c(),Qa=t("span"),mp=n("Batch processing"),gl=c(),R=t("p"),ia=t("a"),up=n("IterableDataset.map()"),gp=n(" also supports working with batches of examples. Operate on batches by setting "),Xa=t("code"),_p=n("batched=True"),jp=n(". The default batch size is 1000, but you can adjust it with the "),Za=t("code"),vp=n("batch_size"),bp=n(" argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),_l=c(),ne=t("h4"),Me=t("a"),et=t("span"),_(_s.$$.fragment),$p=c(),st=t("span"),xp=n("Tokenization"),jl=c(),_(js.$$.fragment),vl=c(),_(Le.$$.fragment),bl=c(),re=t("h3"),Oe=t("a"),at=t("span"),_(vs.$$.fragment),wp=c(),tt=t("span"),yp=n("Filter"),$l=c(),Ve=t("p"),kp=n("You can filter rows in the dataset based on a predicate function using "),ha=t("a"),Ep=n("Dataset.filter()"),Dp=n(". It returns rows that match a specified condition:"),xl=c(),_(bs.$$.fragment),wl=c(),pe=t("p"),ca=t("a"),Ap=n("Dataset.filter()"),Ip=n(" can also filter by indices if you set "),lt=t("code"),Tp=n("with_indices=True"),Pp=n(":"),yl=c(),_($s.$$.fragment),kl=c(),oe=t("h2"),Fe=t("a"),nt=t("span"),_(xs.$$.fragment),qp=c(),rt=t("span"),Sp=n("Stream in a training loop"),El=c(),ws=t("p"),fa=t("a"),zp=n("IterableDataset"),Cp=n(" can be integrated into a training loop. First, shuffle the dataset:"),Dl=c(),_(Re.$$.fragment),this.h()},l(e){const o=Ti('[data-svelte="svelte-1phssyn"]',document.head);d=l(o,"META",{name:!0,content:!0}),o.forEach(s),w=f(e),m=l(e,"H1",{class:!0});var ys=p(m);y=l(ys,"A",{id:!0,class:!0,href:!0});var pt=p(y);k=l(pt,"SPAN",{});var ot=p(k);j(g.$$.fragment,ot),ot.forEach(s),pt.forEach(s),E=f(ys),u=l(ys,"SPAN",{});var it=p(u);D=r(it,"Stream"),it.forEach(s),ys.forEach(s),A=f(e),T=l(e,"P",{});var ht=p(T);N=r(ht,"Dataset streaming lets you get started with a dataset without waiting for the entire dataset to download. The data is downloaded progressively as you iterate over the dataset. This is especially helpful when:"),ht.forEach(s),he=f(e),z=l(e,"UL",{});var ks=p(z);P=l(ks,"LI",{});var Op=p(P);Ds=r(Op,"You don\u2019t want to wait for an extremely large dataset to download."),Op.forEach(s),As=f(ks),ce=l(ks,"LI",{});var Vp=p(ce);Is=r(Vp,"The dataset size exceeds the amount of disk space on your computer."),Vp.forEach(s),ks.forEach(s),gt=f(e),J=l(e,"DIV",{class:!0});var Il=p(J);Ts=l(Il,"IMG",{class:!0,src:!0}),Zl=f(Il),Ps=l(Il,"IMG",{class:!0,src:!0}),Il.forEach(s),_t=f(e),L=l(e,"P",{});var He=p(L);en=r(He,"For example, the English split of the "),Be=l(He,"A",{href:!0,rel:!0});var Fp=p(Be);sn=r(Fp,"OSCAR"),Fp.forEach(s),an=r(He," dataset is 1.2 terabytes, but you can use it instantly with streaming. Stream a dataset by setting "),_a=l(He,"CODE",{});var Rp=p(_a);tn=r(Rp,"streaming=True"),Rp.forEach(s),ln=r(He," in "),qs=l(He,"A",{href:!0});var Hp=p(qs);nn=r(Hp,"load_dataset()"),Hp.forEach(s),rn=r(He," as shown below:"),He.forEach(s),jt=f(e),j(Je.$$.fragment,e),vt=f(e),H=l(e,"P",{});var da=p(H);pn=r(da,"Loading a dataset in streaming mode creates a new dataset type instance (instead of the classic "),Ss=l(da,"A",{href:!0});var Yp=p(Ss);on=r(Yp,"Dataset"),Yp.forEach(s),hn=r(da," object), known as an "),zs=l(da,"A",{href:!0});var Up=p(zs);cn=r(Up,"IterableDataset"),Up.forEach(s),fn=r(da,". This special type of dataset has its own set of processing methods shown below."),da.forEach(s),bt=f(e),j(fe.$$.fragment,e),$t=f(e),W=l(e,"H2",{class:!0});var Tl=p(W);de=l(Tl,"A",{id:!0,class:!0,href:!0});var Bp=p(de);ja=l(Bp,"SPAN",{});var Jp=p(ja);j(We.$$.fragment,Jp),Jp.forEach(s),Bp.forEach(s),dn=f(Tl),va=l(Tl,"SPAN",{});var Wp=p(va);mn=r(Wp,"Shuffle"),Wp.forEach(s),Tl.forEach(s),xt=f(e),O=l(e,"P",{});var Ye=p(O);un=r(Ye,"Like a regular "),Cs=l(Ye,"A",{href:!0});var Gp=p(Cs);gn=r(Gp,"Dataset"),Gp.forEach(s),_n=r(Ye," object, you can also shuffle a "),Ns=l(Ye,"A",{href:!0});var Kp=p(Ns);jn=r(Kp,"IterableDataset"),Kp.forEach(s),vn=r(Ye," with "),Ms=l(Ye,"A",{href:!0});var Qp=p(Ms);bn=r(Qp,"IterableDataset.shuffle()"),Qp.forEach(s),$n=r(Ye,"."),Ye.forEach(s),wt=f(e),V=l(e,"P",{});var Ue=p(V);xn=r(Ue,"The "),ba=l(Ue,"CODE",{});var Xp=p(ba);wn=r(Xp,"buffer_size"),Xp.forEach(s),yn=r(Ue," argument controls the size of the buffer to randomly sample examples from. Let\u2019s say your dataset has one million examples, and you set the "),$a=l(Ue,"CODE",{});var Zp=p($a);kn=r(Zp,"buffer_size"),Zp.forEach(s),En=r(Ue," to ten thousand. "),Ls=l(Ue,"A",{href:!0});var eo=p(Ls);Dn=r(eo,"IterableDataset.shuffle()"),eo.forEach(s),An=r(Ue," will randomly select examples from the first ten thousand examples in the buffer. Selected examples in the buffer are replaced with new examples. By default, the buffer size is 1,000."),Ue.forEach(s),yt=f(e),j(Ge.$$.fragment,e),kt=f(e),j(me.$$.fragment,e),Et=f(e),G=l(e,"H2",{class:!0});var Pl=p(G);ue=l(Pl,"A",{id:!0,class:!0,href:!0});var so=p(ue);xa=l(so,"SPAN",{});var ao=p(xa);j(Ke.$$.fragment,ao),ao.forEach(s),so.forEach(s),In=f(Pl),wa=l(Pl,"SPAN",{});var to=p(wa);Tn=r(to,"Reshuffle"),to.forEach(s),Pl.forEach(s),Dt=f(e),ge=l(e,"P",{});var ql=p(ge);Pn=r(ql,"Sometimes you may want to reshuffle the dataset after each epoch. This will require you to set a different seed for each epoch. Use "),ya=l(ql,"CODE",{});var lo=p(ya);qn=r(lo,"IterableDataset.set_epoch()"),lo.forEach(s),Sn=r(ql," in between epochs to tell the dataset what epoch you\u2019re on."),ql.forEach(s),At=f(e),_e=l(e,"P",{});var Sl=p(_e);zn=r(Sl,"Your seed effectively becomes: "),ka=l(Sl,"CODE",{});var no=p(ka);Cn=r(no,"initial seed + current epoch"),no.forEach(s),Nn=r(Sl,"."),Sl.forEach(s),It=f(e),j(Qe.$$.fragment,e),Tt=f(e),K=l(e,"H2",{class:!0});var zl=p(K);je=l(zl,"A",{id:!0,class:!0,href:!0});var ro=p(je);Ea=l(ro,"SPAN",{});var po=p(Ea);j(Xe.$$.fragment,po),po.forEach(s),ro.forEach(s),Mn=f(zl),Da=l(zl,"SPAN",{});var oo=p(Da);Ln=r(oo,"Split dataset"),oo.forEach(s),zl.forEach(s),Pt=f(e),Os=l(e,"P",{});var io=p(Os);On=r(io,"You can split your dataset one of two ways:"),io.forEach(s),qt=f(e),Vs=l(e,"UL",{});var ho=p(Vs);ve=l(ho,"LI",{});var ct=p(ve);Fs=l(ct,"A",{href:!0});var co=p(Fs);Vn=r(co,"IterableDataset.take()"),co.forEach(s),Fn=r(ct," returns the first "),Aa=l(ct,"CODE",{});var fo=p(Aa);Rn=r(fo,"n"),fo.forEach(s),Hn=r(ct," examples in a dataset:"),ct.forEach(s),ho.forEach(s),St=f(e),j(Ze.$$.fragment,e),zt=f(e),Rs=l(e,"UL",{});var mo=p(Rs);be=l(mo,"LI",{});var ft=p(be);Hs=l(ft,"A",{href:!0});var uo=p(Hs);Yn=r(uo,"IterableDataset.skip()"),uo.forEach(s),Un=r(ft," omits the first "),Ia=l(ft,"CODE",{});var go=p(Ia);Bn=r(go,"n"),go.forEach(s),Jn=r(ft," examples in a dataset and returns the remaining examples:"),ft.forEach(s),mo.forEach(s),Ct=f(e),j(es.$$.fragment,e),Nt=f(e),j($e.$$.fragment,e),Mt=f(e),Ys=l(e,"A",{id:!0}),p(Ys).forEach(s),Lt=f(e),Q=l(e,"H2",{class:!0});var Cl=p(Q);xe=l(Cl,"A",{id:!0,class:!0,href:!0});var _o=p(xe);Ta=l(_o,"SPAN",{});var jo=p(Ta);j(ss.$$.fragment,jo),jo.forEach(s),_o.forEach(s),Wn=f(Cl),Pa=l(Cl,"SPAN",{});var vo=p(Pa);Gn=r(vo,"Interleave"),vo.forEach(s),Cl.forEach(s),Ot=f(e),X=l(e,"P",{});var dt=p(X);Us=l(dt,"A",{href:!0});var bo=p(Us);Kn=r(bo,"interleave_datasets()"),bo.forEach(s),Qn=r(dt," can combine an "),Bs=l(dt,"A",{href:!0});var $o=p(Bs);Xn=r($o,"IterableDataset"),$o.forEach(s),Zn=r(dt," with other datasets. The combined dataset returns alternating examples from each of the original datasets."),dt.forEach(s),Vt=f(e),j(as.$$.fragment,e),Ft=f(e),we=l(e,"P",{});var Nl=p(we);er=r(Nl,"Define sampling probabilities from each of the original datasets for more control over how each of them are sampled and combined. Set the "),qa=l(Nl,"CODE",{});var xo=p(qa);sr=r(xo,"probabilities"),xo.forEach(s),ar=r(Nl," argument with your desired sampling probabilities:"),Nl.forEach(s),Rt=f(e),j(ts.$$.fragment,e),Ht=f(e),Y=l(e,"P",{});var ma=p(Y);tr=r(ma,"Around 80% of the final dataset is made of the "),Sa=l(ma,"CODE",{});var wo=p(Sa);lr=r(wo,"en_dataset"),wo.forEach(s),nr=r(ma,", and 20% of the "),za=l(ma,"CODE",{});var yo=p(za);rr=r(yo,"fr_dataset"),yo.forEach(s),pr=r(ma,"."),ma.forEach(s),Yt=f(e),Z=l(e,"H2",{class:!0});var Ml=p(Z);ye=l(Ml,"A",{id:!0,class:!0,href:!0});var ko=p(ye);Ca=l(ko,"SPAN",{});var Eo=p(Ca);j(ls.$$.fragment,Eo),Eo.forEach(s),ko.forEach(s),or=f(Ml),Na=l(Ml,"SPAN",{});var Do=p(Na);ir=r(Do,"Rename, remove, and cast"),Do.forEach(s),Ml.forEach(s),Ut=f(e),Js=l(e,"P",{});var Ao=p(Js);hr=r(Ao,"The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns and changing columns to a new set of features."),Ao.forEach(s),Bt=f(e),ee=l(e,"H3",{class:!0});var Ll=p(ee);ke=l(Ll,"A",{id:!0,class:!0,href:!0});var Io=p(ke);Ma=l(Io,"SPAN",{});var To=p(Ma);j(ns.$$.fragment,To),To.forEach(s),Io.forEach(s),cr=f(Ll),La=l(Ll,"SPAN",{});var Po=p(La);fr=r(Po,"Rename"),Po.forEach(s),Ll.forEach(s),Jt=f(e),Ee=l(e,"P",{});var Ol=p(Ee);dr=r(Ol,"Use "),Ws=l(Ol,"A",{href:!0});var qo=p(Ws);mr=r(qo,"IterableDataset.rename_column()"),qo.forEach(s),ur=r(Ol," when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Ol.forEach(s),Wt=f(e),De=l(e,"P",{});var Vl=p(De);gr=r(Vl,"Provide "),Gs=l(Vl,"A",{href:!0});var So=p(Gs);_r=r(So,"IterableDataset.rename_column()"),So.forEach(s),jr=r(Vl," with the name of the original column, and the new column name:"),Vl.forEach(s),Gt=f(e),j(rs.$$.fragment,e),Kt=f(e),se=l(e,"H3",{class:!0});var Fl=p(se);Ae=l(Fl,"A",{id:!0,class:!0,href:!0});var zo=p(Ae);Oa=l(zo,"SPAN",{});var Co=p(Oa);j(ps.$$.fragment,Co),Co.forEach(s),zo.forEach(s),vr=f(Fl),Va=l(Fl,"SPAN",{});var No=p(Va);br=r(No,"Remove"),No.forEach(s),Fl.forEach(s),Qt=f(e),Ie=l(e,"P",{});var Rl=p(Ie);$r=r(Rl,"When you need to remove one or more columns, give "),Ks=l(Rl,"A",{href:!0});var Mo=p(Ks);xr=r(Mo,"IterableDataset.remove_columns()"),Mo.forEach(s),wr=r(Rl," the name of the column to remove. Remove more than one column by providing a list of column names:"),Rl.forEach(s),Xt=f(e),j(os.$$.fragment,e),Zt=f(e),ae=l(e,"H3",{class:!0});var Hl=p(ae);Te=l(Hl,"A",{id:!0,class:!0,href:!0});var Lo=p(Te);Fa=l(Lo,"SPAN",{});var Oo=p(Fa);j(is.$$.fragment,Oo),Oo.forEach(s),Lo.forEach(s),yr=f(Hl),Ra=l(Hl,"SPAN",{});var Vo=p(Ra);kr=r(Vo,"Cast"),Vo.forEach(s),Hl.forEach(s),el=f(e),M=l(e,"P",{});var ie=p(M);Qs=l(ie,"A",{href:!0});var Fo=p(Qs);Er=r(Fo,"IterableDataset.cast()"),Fo.forEach(s),Dr=r(ie," changes the feature type of one or more columns. This method takes your new "),Ha=l(ie,"CODE",{});var Ro=p(Ha);Ar=r(Ro,"Features"),Ro.forEach(s),Ir=r(ie," as its argument. The following sample code shows how to change the feature types of "),Ya=l(ie,"CODE",{});var Ho=p(Ya);Tr=r(Ho,"ClassLabel"),Ho.forEach(s),Pr=r(ie," and "),Ua=l(ie,"CODE",{});var Yo=p(Ua);qr=r(Yo,"Value"),Yo.forEach(s),Sr=r(ie,":"),ie.forEach(s),sl=f(e),j(hs.$$.fragment,e),al=f(e),j(Pe.$$.fragment,e),tl=f(e),qe=l(e,"P",{});var Yl=p(qe);zr=r(Yl,"Use "),Xs=l(Yl,"A",{href:!0});var Uo=p(Xs);Cr=r(Uo,"IterableDataset.cast_column()"),Uo.forEach(s),Nr=r(Yl," to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),Yl.forEach(s),ll=f(e),j(cs.$$.fragment,e),nl=f(e),te=l(e,"H2",{class:!0});var Ul=p(te);Se=l(Ul,"A",{id:!0,class:!0,href:!0});var Bo=p(Se);Ba=l(Bo,"SPAN",{});var Jo=p(Ba);j(fs.$$.fragment,Jo),Jo.forEach(s),Bo.forEach(s),Mr=f(Ul),Ja=l(Ul,"SPAN",{});var Wo=p(Ja);Lr=r(Wo,"Map"),Wo.forEach(s),Ul.forEach(s),rl=f(e),S=l(e,"P",{});var F=p(S);Or=r(F,"Similar to the "),Zs=l(F,"A",{href:!0});var Go=p(Zs);Vr=r(Go,"Dataset.map()"),Go.forEach(s),Fr=r(F," function for a regular "),ea=l(F,"A",{href:!0});var Ko=p(ea);Rr=r(Ko,"Dataset"),Ko.forEach(s),Hr=r(F,", \u{1F917}  Datasets features "),sa=l(F,"A",{href:!0});var Qo=p(sa);Yr=r(Qo,"IterableDataset.map()"),Qo.forEach(s),Ur=r(F," for processing an "),aa=l(F,"A",{href:!0});var Xo=p(aa);Br=r(Xo,"IterableDataset"),Xo.forEach(s),Jr=r(F,`.
`),ta=l(F,"A",{href:!0});var Zo=p(ta);Wr=r(Zo,"IterableDataset.map()"),Zo.forEach(s),Gr=r(F," applies processing on-the-fly when examples are streamed."),F.forEach(s),pl=f(e),la=l(e,"P",{});var ei=p(la);Kr=r(ei,"It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),ei.forEach(s),ol=f(e),U=l(e,"P",{});var ua=p(U);Qr=r(ua,"The following example demonstrates how to tokenize a "),na=l(ua,"A",{href:!0});var si=p(na);Xr=r(si,"IterableDataset"),si.forEach(s),Zr=r(ua,". The function needs to accept and output a "),Wa=l(ua,"CODE",{});var ai=p(Wa);ep=r(ai,"dict"),ai.forEach(s),sp=r(ua,":"),ua.forEach(s),il=f(e),j(ds.$$.fragment,e),hl=f(e),ze=l(e,"P",{});var Bl=p(ze);ap=r(Bl,"Next, apply this function to the dataset with "),ra=l(Bl,"A",{href:!0});var ti=p(ra);tp=r(ti,"IterableDataset.map()"),ti.forEach(s),lp=r(Bl,":"),Bl.forEach(s),cl=f(e),j(ms.$$.fragment,e),fl=f(e),Ce=l(e,"P",{});var Jl=p(Ce);np=r(Jl,"Let\u2019s take a look at another example, except this time, you will remove a column with "),pa=l(Jl,"A",{href:!0});var li=p(pa);rp=r(li,"IterableDataset.map()"),li.forEach(s),pp=r(Jl,". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Jl.forEach(s),dl=f(e),B=l(e,"P",{});var ga=p(B);op=r(ga,"Specify the column to remove with the "),Ga=l(ga,"CODE",{});var ni=p(Ga);ip=r(ni,"remove_columns"),ni.forEach(s),hp=r(ga," argument in "),oa=l(ga,"A",{href:!0});var ri=p(oa);cp=r(ri,"IterableDataset.map()"),ri.forEach(s),fp=r(ga,":"),ga.forEach(s),ml=f(e),j(us.$$.fragment,e),ul=f(e),le=l(e,"H3",{class:!0});var Wl=p(le);Ne=l(Wl,"A",{id:!0,class:!0,href:!0});var pi=p(Ne);Ka=l(pi,"SPAN",{});var oi=p(Ka);j(gs.$$.fragment,oi),oi.forEach(s),pi.forEach(s),dp=f(Wl),Qa=l(Wl,"SPAN",{});var ii=p(Qa);mp=r(ii,"Batch processing"),ii.forEach(s),Wl.forEach(s),gl=f(e),R=l(e,"P",{});var Es=p(R);ia=l(Es,"A",{href:!0});var hi=p(ia);up=r(hi,"IterableDataset.map()"),hi.forEach(s),gp=r(Es," also supports working with batches of examples. Operate on batches by setting "),Xa=l(Es,"CODE",{});var ci=p(Xa);_p=r(ci,"batched=True"),ci.forEach(s),jp=r(Es,". The default batch size is 1000, but you can adjust it with the "),Za=l(Es,"CODE",{});var fi=p(Za);vp=r(fi,"batch_size"),fi.forEach(s),bp=r(Es," argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),Es.forEach(s),_l=f(e),ne=l(e,"H4",{class:!0});var Gl=p(ne);Me=l(Gl,"A",{id:!0,class:!0,href:!0});var di=p(Me);et=l(di,"SPAN",{});var mi=p(et);j(_s.$$.fragment,mi),mi.forEach(s),di.forEach(s),$p=f(Gl),st=l(Gl,"SPAN",{});var ui=p(st);xp=r(ui,"Tokenization"),ui.forEach(s),Gl.forEach(s),jl=f(e),j(js.$$.fragment,e),vl=f(e),j(Le.$$.fragment,e),bl=f(e),re=l(e,"H3",{class:!0});var Kl=p(re);Oe=l(Kl,"A",{id:!0,class:!0,href:!0});var gi=p(Oe);at=l(gi,"SPAN",{});var _i=p(at);j(vs.$$.fragment,_i),_i.forEach(s),gi.forEach(s),wp=f(Kl),tt=l(Kl,"SPAN",{});var ji=p(tt);yp=r(ji,"Filter"),ji.forEach(s),Kl.forEach(s),$l=f(e),Ve=l(e,"P",{});var Ql=p(Ve);kp=r(Ql,"You can filter rows in the dataset based on a predicate function using "),ha=l(Ql,"A",{href:!0});var vi=p(ha);Ep=r(vi,"Dataset.filter()"),vi.forEach(s),Dp=r(Ql,". It returns rows that match a specified condition:"),Ql.forEach(s),xl=f(e),j(bs.$$.fragment,e),wl=f(e),pe=l(e,"P",{});var mt=p(pe);ca=l(mt,"A",{href:!0});var bi=p(ca);Ap=r(bi,"Dataset.filter()"),bi.forEach(s),Ip=r(mt," can also filter by indices if you set "),lt=l(mt,"CODE",{});var $i=p(lt);Tp=r($i,"with_indices=True"),$i.forEach(s),Pp=r(mt,":"),mt.forEach(s),yl=f(e),j($s.$$.fragment,e),kl=f(e),oe=l(e,"H2",{class:!0});var Xl=p(oe);Fe=l(Xl,"A",{id:!0,class:!0,href:!0});var xi=p(Fe);nt=l(xi,"SPAN",{});var wi=p(nt);j(xs.$$.fragment,wi),wi.forEach(s),xi.forEach(s),qp=f(Xl),rt=l(Xl,"SPAN",{});var yi=p(rt);Sp=r(yi,"Stream in a training loop"),yi.forEach(s),Xl.forEach(s),El=f(e),ws=l(e,"P",{});var Np=p(ws);fa=l(Np,"A",{href:!0});var ki=p(fa);zp=r(ki,"IterableDataset"),ki.forEach(s),Cp=r(Np," can be integrated into a training loop. First, shuffle the dataset:"),Np.forEach(s),Dl=f(e),j(Re.$$.fragment,e),this.h()},h(){h(d,"name","hf:doc:metadata"),h(d,"content",JSON.stringify(Hi)),h(y,"id","stream"),h(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(y,"href","#stream"),h(m,"class","relative group"),h(Ts,"class","block dark:hidden"),Ei(Ts.src,Mp="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/datasets/streaming.gif")||h(Ts,"src",Mp),h(Ps,"class","hidden dark:block"),Ei(Ps.src,Lp="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/datasets/streaming-dark.gif")||h(Ps,"src",Lp),h(J,"class","flex justify-center"),h(Be,"href","https://huggingface.co/datasets/oscar"),h(Be,"rel","nofollow"),h(qs,"href","/docs/datasets/pr_4393/en/package_reference/loading_methods#datasets.load_dataset"),h(Ss,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.Dataset"),h(zs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset"),h(de,"id","shuffle"),h(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(de,"href","#shuffle"),h(W,"class","relative group"),h(Cs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.Dataset"),h(Ns,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset"),h(Ms,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.shuffle"),h(Ls,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.shuffle"),h(ue,"id","reshuffle"),h(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ue,"href","#reshuffle"),h(G,"class","relative group"),h(je,"id","split-dataset"),h(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(je,"href","#split-dataset"),h(K,"class","relative group"),h(Fs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.take"),h(Hs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.skip"),h(Ys,"id","interleave_datasets"),h(xe,"id","interleave"),h(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(xe,"href","#interleave"),h(Q,"class","relative group"),h(Us,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.interleave_datasets"),h(Bs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset"),h(ye,"id","rename-remove-and-cast"),h(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ye,"href","#rename-remove-and-cast"),h(Z,"class","relative group"),h(ke,"id","rename"),h(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ke,"href","#rename"),h(ee,"class","relative group"),h(Ws,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.rename_column"),h(Gs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.rename_column"),h(Ae,"id","remove"),h(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ae,"href","#remove"),h(se,"class","relative group"),h(Ks,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.remove_columns"),h(Te,"id","cast"),h(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Te,"href","#cast"),h(ae,"class","relative group"),h(Qs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.cast"),h(Xs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.cast_column"),h(Se,"id","map"),h(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Se,"href","#map"),h(te,"class","relative group"),h(Zs,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.Dataset.map"),h(ea,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.Dataset"),h(sa,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.map"),h(aa,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset"),h(ta,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.map"),h(na,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset"),h(ra,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.map"),h(pa,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.map"),h(oa,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Ne,"id","batch-processing"),h(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ne,"href","#batch-processing"),h(le,"class","relative group"),h(ia,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Me,"id","tokenization"),h(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Me,"href","#tokenization"),h(ne,"class","relative group"),h(Oe,"id","filter"),h(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Oe,"href","#filter"),h(re,"class","relative group"),h(ha,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.Dataset.filter"),h(ca,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.Dataset.filter"),h(Fe,"id","stream-in-a-training-loop"),h(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Fe,"href","#stream-in-a-training-loop"),h(oe,"class","relative group"),h(fa,"href","/docs/datasets/pr_4393/en/package_reference/main_classes#datasets.IterableDataset")},m(e,o){a(document.head,d),i(e,w,o),i(e,m,o),a(m,y),a(y,k),v(g,k,null),a(m,E),a(m,u),a(u,D),i(e,A,o),i(e,T,o),a(T,N),i(e,he,o),i(e,z,o),a(z,P),a(P,Ds),a(z,As),a(z,ce),a(ce,Is),i(e,gt,o),i(e,J,o),a(J,Ts),a(J,Zl),a(J,Ps),i(e,_t,o),i(e,L,o),a(L,en),a(L,Be),a(Be,sn),a(L,an),a(L,_a),a(_a,tn),a(L,ln),a(L,qs),a(qs,nn),a(L,rn),i(e,jt,o),v(Je,e,o),i(e,vt,o),i(e,H,o),a(H,pn),a(H,Ss),a(Ss,on),a(H,hn),a(H,zs),a(zs,cn),a(H,fn),i(e,bt,o),v(fe,e,o),i(e,$t,o),i(e,W,o),a(W,de),a(de,ja),v(We,ja,null),a(W,dn),a(W,va),a(va,mn),i(e,xt,o),i(e,O,o),a(O,un),a(O,Cs),a(Cs,gn),a(O,_n),a(O,Ns),a(Ns,jn),a(O,vn),a(O,Ms),a(Ms,bn),a(O,$n),i(e,wt,o),i(e,V,o),a(V,xn),a(V,ba),a(ba,wn),a(V,yn),a(V,$a),a($a,kn),a(V,En),a(V,Ls),a(Ls,Dn),a(V,An),i(e,yt,o),v(Ge,e,o),i(e,kt,o),v(me,e,o),i(e,Et,o),i(e,G,o),a(G,ue),a(ue,xa),v(Ke,xa,null),a(G,In),a(G,wa),a(wa,Tn),i(e,Dt,o),i(e,ge,o),a(ge,Pn),a(ge,ya),a(ya,qn),a(ge,Sn),i(e,At,o),i(e,_e,o),a(_e,zn),a(_e,ka),a(ka,Cn),a(_e,Nn),i(e,It,o),v(Qe,e,o),i(e,Tt,o),i(e,K,o),a(K,je),a(je,Ea),v(Xe,Ea,null),a(K,Mn),a(K,Da),a(Da,Ln),i(e,Pt,o),i(e,Os,o),a(Os,On),i(e,qt,o),i(e,Vs,o),a(Vs,ve),a(ve,Fs),a(Fs,Vn),a(ve,Fn),a(ve,Aa),a(Aa,Rn),a(ve,Hn),i(e,St,o),v(Ze,e,o),i(e,zt,o),i(e,Rs,o),a(Rs,be),a(be,Hs),a(Hs,Yn),a(be,Un),a(be,Ia),a(Ia,Bn),a(be,Jn),i(e,Ct,o),v(es,e,o),i(e,Nt,o),v($e,e,o),i(e,Mt,o),i(e,Ys,o),i(e,Lt,o),i(e,Q,o),a(Q,xe),a(xe,Ta),v(ss,Ta,null),a(Q,Wn),a(Q,Pa),a(Pa,Gn),i(e,Ot,o),i(e,X,o),a(X,Us),a(Us,Kn),a(X,Qn),a(X,Bs),a(Bs,Xn),a(X,Zn),i(e,Vt,o),v(as,e,o),i(e,Ft,o),i(e,we,o),a(we,er),a(we,qa),a(qa,sr),a(we,ar),i(e,Rt,o),v(ts,e,o),i(e,Ht,o),i(e,Y,o),a(Y,tr),a(Y,Sa),a(Sa,lr),a(Y,nr),a(Y,za),a(za,rr),a(Y,pr),i(e,Yt,o),i(e,Z,o),a(Z,ye),a(ye,Ca),v(ls,Ca,null),a(Z,or),a(Z,Na),a(Na,ir),i(e,Ut,o),i(e,Js,o),a(Js,hr),i(e,Bt,o),i(e,ee,o),a(ee,ke),a(ke,Ma),v(ns,Ma,null),a(ee,cr),a(ee,La),a(La,fr),i(e,Jt,o),i(e,Ee,o),a(Ee,dr),a(Ee,Ws),a(Ws,mr),a(Ee,ur),i(e,Wt,o),i(e,De,o),a(De,gr),a(De,Gs),a(Gs,_r),a(De,jr),i(e,Gt,o),v(rs,e,o),i(e,Kt,o),i(e,se,o),a(se,Ae),a(Ae,Oa),v(ps,Oa,null),a(se,vr),a(se,Va),a(Va,br),i(e,Qt,o),i(e,Ie,o),a(Ie,$r),a(Ie,Ks),a(Ks,xr),a(Ie,wr),i(e,Xt,o),v(os,e,o),i(e,Zt,o),i(e,ae,o),a(ae,Te),a(Te,Fa),v(is,Fa,null),a(ae,yr),a(ae,Ra),a(Ra,kr),i(e,el,o),i(e,M,o),a(M,Qs),a(Qs,Er),a(M,Dr),a(M,Ha),a(Ha,Ar),a(M,Ir),a(M,Ya),a(Ya,Tr),a(M,Pr),a(M,Ua),a(Ua,qr),a(M,Sr),i(e,sl,o),v(hs,e,o),i(e,al,o),v(Pe,e,o),i(e,tl,o),i(e,qe,o),a(qe,zr),a(qe,Xs),a(Xs,Cr),a(qe,Nr),i(e,ll,o),v(cs,e,o),i(e,nl,o),i(e,te,o),a(te,Se),a(Se,Ba),v(fs,Ba,null),a(te,Mr),a(te,Ja),a(Ja,Lr),i(e,rl,o),i(e,S,o),a(S,Or),a(S,Zs),a(Zs,Vr),a(S,Fr),a(S,ea),a(ea,Rr),a(S,Hr),a(S,sa),a(sa,Yr),a(S,Ur),a(S,aa),a(aa,Br),a(S,Jr),a(S,ta),a(ta,Wr),a(S,Gr),i(e,pl,o),i(e,la,o),a(la,Kr),i(e,ol,o),i(e,U,o),a(U,Qr),a(U,na),a(na,Xr),a(U,Zr),a(U,Wa),a(Wa,ep),a(U,sp),i(e,il,o),v(ds,e,o),i(e,hl,o),i(e,ze,o),a(ze,ap),a(ze,ra),a(ra,tp),a(ze,lp),i(e,cl,o),v(ms,e,o),i(e,fl,o),i(e,Ce,o),a(Ce,np),a(Ce,pa),a(pa,rp),a(Ce,pp),i(e,dl,o),i(e,B,o),a(B,op),a(B,Ga),a(Ga,ip),a(B,hp),a(B,oa),a(oa,cp),a(B,fp),i(e,ml,o),v(us,e,o),i(e,ul,o),i(e,le,o),a(le,Ne),a(Ne,Ka),v(gs,Ka,null),a(le,dp),a(le,Qa),a(Qa,mp),i(e,gl,o),i(e,R,o),a(R,ia),a(ia,up),a(R,gp),a(R,Xa),a(Xa,_p),a(R,jp),a(R,Za),a(Za,vp),a(R,bp),i(e,_l,o),i(e,ne,o),a(ne,Me),a(Me,et),v(_s,et,null),a(ne,$p),a(ne,st),a(st,xp),i(e,jl,o),v(js,e,o),i(e,vl,o),v(Le,e,o),i(e,bl,o),i(e,re,o),a(re,Oe),a(Oe,at),v(vs,at,null),a(re,wp),a(re,tt),a(tt,yp),i(e,$l,o),i(e,Ve,o),a(Ve,kp),a(Ve,ha),a(ha,Ep),a(Ve,Dp),i(e,xl,o),v(bs,e,o),i(e,wl,o),i(e,pe,o),a(pe,ca),a(ca,Ap),a(pe,Ip),a(pe,lt),a(lt,Tp),a(pe,Pp),i(e,yl,o),v($s,e,o),i(e,kl,o),i(e,oe,o),a(oe,Fe),a(Fe,nt),v(xs,nt,null),a(oe,qp),a(oe,rt),a(rt,Sp),i(e,El,o),i(e,ws,o),a(ws,fa),a(fa,zp),a(ws,Cp),i(e,Dl,o),v(Re,e,o),Al=!0},p(e,[o]){const ys={};o&2&&(ys.$$scope={dirty:o,ctx:e}),fe.$set(ys);const pt={};o&2&&(pt.$$scope={dirty:o,ctx:e}),me.$set(pt);const ot={};o&2&&(ot.$$scope={dirty:o,ctx:e}),$e.$set(ot);const it={};o&2&&(it.$$scope={dirty:o,ctx:e}),Pe.$set(it);const ht={};o&2&&(ht.$$scope={dirty:o,ctx:e}),Le.$set(ht);const ks={};o&2&&(ks.$$scope={dirty:o,ctx:e}),Re.$set(ks)},i(e){Al||(b(g.$$.fragment,e),b(Je.$$.fragment,e),b(fe.$$.fragment,e),b(We.$$.fragment,e),b(Ge.$$.fragment,e),b(me.$$.fragment,e),b(Ke.$$.fragment,e),b(Qe.$$.fragment,e),b(Xe.$$.fragment,e),b(Ze.$$.fragment,e),b(es.$$.fragment,e),b($e.$$.fragment,e),b(ss.$$.fragment,e),b(as.$$.fragment,e),b(ts.$$.fragment,e),b(ls.$$.fragment,e),b(ns.$$.fragment,e),b(rs.$$.fragment,e),b(ps.$$.fragment,e),b(os.$$.fragment,e),b(is.$$.fragment,e),b(hs.$$.fragment,e),b(Pe.$$.fragment,e),b(cs.$$.fragment,e),b(fs.$$.fragment,e),b(ds.$$.fragment,e),b(ms.$$.fragment,e),b(us.$$.fragment,e),b(gs.$$.fragment,e),b(_s.$$.fragment,e),b(js.$$.fragment,e),b(Le.$$.fragment,e),b(vs.$$.fragment,e),b(bs.$$.fragment,e),b($s.$$.fragment,e),b(xs.$$.fragment,e),b(Re.$$.fragment,e),Al=!0)},o(e){$(g.$$.fragment,e),$(Je.$$.fragment,e),$(fe.$$.fragment,e),$(We.$$.fragment,e),$(Ge.$$.fragment,e),$(me.$$.fragment,e),$(Ke.$$.fragment,e),$(Qe.$$.fragment,e),$(Xe.$$.fragment,e),$(Ze.$$.fragment,e),$(es.$$.fragment,e),$($e.$$.fragment,e),$(ss.$$.fragment,e),$(as.$$.fragment,e),$(ts.$$.fragment,e),$(ls.$$.fragment,e),$(ns.$$.fragment,e),$(rs.$$.fragment,e),$(ps.$$.fragment,e),$(os.$$.fragment,e),$(is.$$.fragment,e),$(hs.$$.fragment,e),$(Pe.$$.fragment,e),$(cs.$$.fragment,e),$(fs.$$.fragment,e),$(ds.$$.fragment,e),$(ms.$$.fragment,e),$(us.$$.fragment,e),$(gs.$$.fragment,e),$(_s.$$.fragment,e),$(js.$$.fragment,e),$(Le.$$.fragment,e),$(vs.$$.fragment,e),$(bs.$$.fragment,e),$($s.$$.fragment,e),$(xs.$$.fragment,e),$(Re.$$.fragment,e),Al=!1},d(e){s(d),e&&s(w),e&&s(m),x(g),e&&s(A),e&&s(T),e&&s(he),e&&s(z),e&&s(gt),e&&s(J),e&&s(_t),e&&s(L),e&&s(jt),x(Je,e),e&&s(vt),e&&s(H),e&&s(bt),x(fe,e),e&&s($t),e&&s(W),x(We),e&&s(xt),e&&s(O),e&&s(wt),e&&s(V),e&&s(yt),x(Ge,e),e&&s(kt),x(me,e),e&&s(Et),e&&s(G),x(Ke),e&&s(Dt),e&&s(ge),e&&s(At),e&&s(_e),e&&s(It),x(Qe,e),e&&s(Tt),e&&s(K),x(Xe),e&&s(Pt),e&&s(Os),e&&s(qt),e&&s(Vs),e&&s(St),x(Ze,e),e&&s(zt),e&&s(Rs),e&&s(Ct),x(es,e),e&&s(Nt),x($e,e),e&&s(Mt),e&&s(Ys),e&&s(Lt),e&&s(Q),x(ss),e&&s(Ot),e&&s(X),e&&s(Vt),x(as,e),e&&s(Ft),e&&s(we),e&&s(Rt),x(ts,e),e&&s(Ht),e&&s(Y),e&&s(Yt),e&&s(Z),x(ls),e&&s(Ut),e&&s(Js),e&&s(Bt),e&&s(ee),x(ns),e&&s(Jt),e&&s(Ee),e&&s(Wt),e&&s(De),e&&s(Gt),x(rs,e),e&&s(Kt),e&&s(se),x(ps),e&&s(Qt),e&&s(Ie),e&&s(Xt),x(os,e),e&&s(Zt),e&&s(ae),x(is),e&&s(el),e&&s(M),e&&s(sl),x(hs,e),e&&s(al),x(Pe,e),e&&s(tl),e&&s(qe),e&&s(ll),x(cs,e),e&&s(nl),e&&s(te),x(fs),e&&s(rl),e&&s(S),e&&s(pl),e&&s(la),e&&s(ol),e&&s(U),e&&s(il),x(ds,e),e&&s(hl),e&&s(ze),e&&s(cl),x(ms,e),e&&s(fl),e&&s(Ce),e&&s(dl),e&&s(B),e&&s(ml),x(us,e),e&&s(ul),e&&s(le),x(gs),e&&s(gl),e&&s(R),e&&s(_l),e&&s(ne),x(_s),e&&s(jl),x(js,e),e&&s(vl),x(Le,e),e&&s(bl),e&&s(re),x(vs),e&&s($l),e&&s(Ve),e&&s(xl),x(bs,e),e&&s(wl),e&&s(pe),e&&s(yl),x($s,e),e&&s(kl),e&&s(oe),x(xs),e&&s(El),e&&s(ws),e&&s(Dl),x(Re,e)}}}const Hi={local:"stream",sections:[{local:"shuffle",title:"Shuffle"},{local:"reshuffle",title:"Reshuffle"},{local:"split-dataset",title:"Split dataset"},{local:"interleave",title:"Interleave"},{local:"rename-remove-and-cast",sections:[{local:"rename",title:"Rename"},{local:"remove",title:"Remove"},{local:"cast",title:"Cast"}],title:"Rename, remove, and cast"},{local:"map",sections:[{local:"batch-processing",sections:[{local:"tokenization",title:"Tokenization"}],title:"Batch processing"},{local:"filter",title:"Filter"}],title:"Map"},{local:"stream-in-a-training-loop",title:"Stream in a training loop"}],title:"Stream"};function Yi(q){return Pi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Qi extends Di{constructor(d){super();Ai(this,d,Yi,Ri,Ii,{})}}export{Qi as default,Hi as metadata};
