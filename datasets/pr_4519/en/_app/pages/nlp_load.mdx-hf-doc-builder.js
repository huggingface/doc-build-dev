import{S as it,i as mt,s as dt,e as n,k as o,w as P,t as q,M as ft,c as p,d as a,m as r,a as d,x as T,h as y,b,G as l,g as e,y as L,L as ut,q as S,o as C,B as A,v as ct}from"../chunks/vendor-hf-doc-builder.js";import{I as _t}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as J}from"../chunks/CodeBlock-hf-doc-builder.js";function ht(at){let i,B,m,f,w,c,F,k,K,N,$,Q,D,_,H,u,V,E,W,X,M,h,R,j,Z,U,g,z,v,tt,I,x,O;return c=new _t({}),_=new J({props:{code:`from datasets import load_dataset
dataset = load_dataset("text", data_files={"train": ["my_text_1.txt", "my_text_2.txt"], "test": "my_test_file.txt"})

dataset = load_dataset("text", data_dir="path/to/text/dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;text&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;my_text_1.txt&quot;</span>, <span class="hljs-string">&quot;my_text_2.txt&quot;</span>], <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.txt&quot;</span>})

<span class="hljs-comment"># Load from a directory</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;text&quot;</span>, data_dir=<span class="hljs-string">&quot;path/to/text/dataset&quot;</span>)`}}),h=new J({props:{code:`dataset = load_dataset("text", data_files={"train": "my_train_file.txt", "test": "my_test_file.txt"}, sample_by="paragraph")

dataset = load_dataset("text", data_files={"train": "my_train_file.txt", "test": "my_test_file.txt"}, sample_by="document")`,highlighted:`<span class="hljs-comment"># Sample by paragraph</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;text&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;my_train_file.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.txt&quot;</span>}, sample_by=<span class="hljs-string">&quot;paragraph&quot;</span>)

<span class="hljs-comment"># Sample by document</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;text&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;my_train_file.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.txt&quot;</span>}, sample_by=<span class="hljs-string">&quot;document&quot;</span>)`}}),g=new J({props:{code:`from datasets import load_dataset
c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)`}}),x=new J({props:{code:'dataset = load_dataset("text", data_files="https://huggingface.co/datasets/lhoestq/test/resolve/main/some_text.txt")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;text&quot;</span>, data_files=<span class="hljs-string">&quot;https://huggingface.co/datasets/lhoestq/test/resolve/main/some_text.txt&quot;</span>)'}}),{c(){i=n("meta"),B=o(),m=n("h1"),f=n("a"),w=n("span"),P(c.$$.fragment),F=o(),k=n("span"),K=q("Load text data"),N=o(),$=n("p"),Q=q("Text files are one of the most common file types for storing a dataset. By default, \u{1F917} Datasets samples a text file line by line to build the dataset."),D=o(),P(_.$$.fragment),H=o(),u=n("p"),V=q("To sample a text file by paragraph or even an entire document, use the "),E=n("code"),W=q("sample_by"),X=q(" parameter:"),M=o(),P(h.$$.fragment),R=o(),j=n("p"),Z=q("You can also use grep patterns to load specific files:"),U=o(),P(g.$$.fragment),z=o(),v=n("p"),tt=q("To load remote text files via HTTP, pass the URLs instead:"),I=o(),P(x.$$.fragment),this.h()},l(t){const s=ft('[data-svelte="svelte-1phssyn"]',document.head);i=p(s,"META",{name:!0,content:!0}),s.forEach(a),B=r(t),m=p(t,"H1",{class:!0});var Y=d(m);f=p(Y,"A",{id:!0,class:!0,href:!0});var st=d(f);w=p(st,"SPAN",{});var et=d(w);T(c.$$.fragment,et),et.forEach(a),st.forEach(a),F=r(Y),k=p(Y,"SPAN",{});var lt=d(k);K=y(lt,"Load text data"),lt.forEach(a),Y.forEach(a),N=r(t),$=p(t,"P",{});var nt=d($);Q=y(nt,"Text files are one of the most common file types for storing a dataset. By default, \u{1F917} Datasets samples a text file line by line to build the dataset."),nt.forEach(a),D=r(t),T(_.$$.fragment,t),H=r(t),u=p(t,"P",{});var G=d(u);V=y(G,"To sample a text file by paragraph or even an entire document, use the "),E=p(G,"CODE",{});var ot=d(E);W=y(ot,"sample_by"),ot.forEach(a),X=y(G," parameter:"),G.forEach(a),M=r(t),T(h.$$.fragment,t),R=r(t),j=p(t,"P",{});var pt=d(j);Z=y(pt,"You can also use grep patterns to load specific files:"),pt.forEach(a),U=r(t),T(g.$$.fragment,t),z=r(t),v=p(t,"P",{});var rt=d(v);tt=y(rt,"To load remote text files via HTTP, pass the URLs instead:"),rt.forEach(a),I=r(t),T(x.$$.fragment,t),this.h()},h(){b(i,"name","hf:doc:metadata"),b(i,"content",JSON.stringify(gt)),b(f,"id","load-text-data"),b(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(f,"href","#load-text-data"),b(m,"class","relative group")},m(t,s){l(document.head,i),e(t,B,s),e(t,m,s),l(m,f),l(f,w),L(c,w,null),l(m,F),l(m,k),l(k,K),e(t,N,s),e(t,$,s),l($,Q),e(t,D,s),L(_,t,s),e(t,H,s),e(t,u,s),l(u,V),l(u,E),l(E,W),l(u,X),e(t,M,s),L(h,t,s),e(t,R,s),e(t,j,s),l(j,Z),e(t,U,s),L(g,t,s),e(t,z,s),e(t,v,s),l(v,tt),e(t,I,s),L(x,t,s),O=!0},p:ut,i(t){O||(S(c.$$.fragment,t),S(_.$$.fragment,t),S(h.$$.fragment,t),S(g.$$.fragment,t),S(x.$$.fragment,t),O=!0)},o(t){C(c.$$.fragment,t),C(_.$$.fragment,t),C(h.$$.fragment,t),C(g.$$.fragment,t),C(x.$$.fragment,t),O=!1},d(t){a(i),t&&a(B),t&&a(m),A(c),t&&a(N),t&&a($),t&&a(D),A(_,t),t&&a(H),t&&a(u),t&&a(M),A(h,t),t&&a(R),t&&a(j),t&&a(U),A(g,t),t&&a(z),t&&a(v),t&&a(I),A(x,t)}}}const gt={local:"load-text-data",title:"Load text data"};function xt(at){return ct(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jt extends it{constructor(i){super();mt(this,i,xt,ht,dt,{})}}export{jt as default,gt as metadata};
