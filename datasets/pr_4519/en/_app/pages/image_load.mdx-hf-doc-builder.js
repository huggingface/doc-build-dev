import{S as fl,i as gl,s as ul,e as n,k as d,w as _,t as s,M as _l,c as i,d as e,m as c,a as r,x as $,h as l,b as m,G as t,g as p,y as j,q as v,o as b,B as q,v as $l}from"../chunks/vendor-hf-doc-builder.js";import{T as hl}from"../chunks/Tip-hf-doc-builder.js";import{I as Sa}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C}from"../chunks/CodeBlock-hf-doc-builder.js";function jl(qa){let h,P,g,w,x,u,A,I;return{c(){h=n("p"),P=s("To work with image datasets, you need to have the "),g=n("code"),w=s("vision"),x=s(" dependency installed. Check out the "),u=n("a"),A=s("installation"),I=s(" guide to learn how to install it."),this.h()},l(E){h=i(E,"P",{});var f=r(h);P=l(f,"To work with image datasets, you need to have the "),g=i(f,"CODE",{});var y=r(g);w=l(y,"vision"),y.forEach(e),x=l(f," dependency installed. Check out the "),u=i(f,"A",{href:!0});var H=r(u);A=l(H,"installation"),H.forEach(e),I=l(f," guide to learn how to install it."),f.forEach(e),this.h()},h(){m(u,"href","./installation#vision")},m(E,f){p(E,h,f),t(h,P),t(h,g),t(g,w),t(h,x),t(h,u),t(u,A),t(h,I)},d(E){E&&e(h)}}}function vl(qa){let h,P,g,w,x,u,A,I;return{c(){h=n("p"),P=s("Index into an image dataset using the row index first and then the "),g=n("code"),w=s("image"),x=s(" column - "),u=n("code"),A=s('dataset[0]["image"]'),I=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(E){h=i(E,"P",{});var f=r(h);P=l(f,"Index into an image dataset using the row index first and then the "),g=i(f,"CODE",{});var y=r(g);w=l(y,"image"),y.forEach(e),x=l(f," column - "),u=i(f,"CODE",{});var H=r(u);A=l(H,'dataset[0]["image"]'),H.forEach(e),I=l(f," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),f.forEach(e)},m(E,f){p(E,h,f),t(h,P),t(h,g),t(g,w),t(h,x),t(h,u),t(u,A),t(h,I)},d(E){E&&e(h)}}}function bl(qa){let h,P,g,w,x,u,A,I,E,f,y,H,Na,le,oe,gt,W,ut,D,ne,Ba,ie,re,wa,pe,de,_t,la,$t,J,jt,Y,K,Ta,oa,ce,Ma,me,vt,F,he,Ea,fe,ge,ka,ue,_e,bt,na,qt,L,$e,Ha,je,ve,ya,be,qe,wt,ia,Et,R,Q,Ya,ra,we,Ra,Ee,kt,V,ke,Ua,ye,xe,yt,pa,xt,S,Ie,za,Pe,Ce,Ga,Ae,Oe,It,da,Pt,X,De,Wa,Fe,Le,Ct,ca,At,k,Ja,Se,Ne,Ka,Be,Te,Qa,Me,He,Va,Ye,Re,xa,Ue,ze,Ot,U,Z,Xa,ma,Ge,Za,We,Dt,N,Je,at,Ke,Qe,tt,Ve,Xe,Ft,ha,Lt,B,Ze,et,as,ts,st,es,ss,St,fa,Nt,z,aa,lt,ga,ls,ot,os,Bt,ta,ns,nt,is,rs,Tt,ua,Mt,T,ps,it,ds,cs,rt,ms,hs,Ht,_a,Yt,G,ea,pt,$a,fs,dt,gs,Rt,sa,us,ct,_s,$s,Ut,ja,zt,M,js,mt,vs,bs,ht,qs,ws,Gt,va,Wt;return u=new Sa({}),W=new hl({props:{$$slots:{default:[jl]},$$scope:{ctx:qa}}}),la=new C({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),J=new hl({props:{warning:!0,$$slots:{default:[vl]},$$scope:{ctx:qa}}}),oa=new Sa({}),na=new C({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),ia=new C({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),ra=new Sa({}),pa=new C({props:{code:"",highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),da=new C({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),ca=new C({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ma=new Sa({}),ha=new C({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),fa=new C({props:{code:'dataset = load_dataset("imagefolder", data_dir="/path/to/folder", file_path="/path/to/folder/train/metadata.jsonl", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, file_path=<span class="hljs-string">&quot;/path/to/folder/train/metadata.jsonl&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ga=new Sa({}),ua=new C({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),_a=new C({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),$a=new Sa({}),ja=new C({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),va=new C({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){h=n("meta"),P=d(),g=n("h1"),w=n("a"),x=n("span"),_(u.$$.fragment),A=d(),I=n("span"),E=s("Load image data"),f=d(),y=n("p"),H=s("Image datasets are loaded from the "),Na=n("code"),le=s("image"),oe=s(" column, which contains a PIL object."),gt=d(),_(W.$$.fragment),ut=d(),D=n("p"),ne=s("When you load an image dataset and call the "),Ba=n("code"),ie=s("image"),re=s(" column, the "),wa=n("a"),pe=s("Image"),de=s(" feature automatically decodes the PIL object into an image:"),_t=d(),_(la.$$.fragment),$t=d(),_(J.$$.fragment),jt=d(),Y=n("h2"),K=n("a"),Ta=n("span"),_(oa.$$.fragment),ce=d(),Ma=n("span"),me=s("Local files"),vt=d(),F=n("p"),he=s("You can load a dataset from the image path. Use the "),Ea=n("a"),fe=s("cast_column()"),ge=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),ka=n("a"),ue=s("Image"),_e=s(" feature:"),bt=d(),_(na.$$.fragment),qt=d(),L=n("p"),$e=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ha=n("code"),je=s("decode=False"),ve=s(" in the "),ya=n("a"),be=s("Image"),qe=s(" feature:"),wt=d(),_(ia.$$.fragment),Et=d(),R=n("h2"),Q=n("a"),Ya=n("span"),_(ra.$$.fragment),we=d(),Ra=n("span"),Ee=s("ImageFolder"),kt=d(),V=n("p"),ke=s("You can also load a dataset with a "),Ua=n("code"),ye=s("ImageFolder"),xe=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),yt=d(),_(pa.$$.fragment),xt=d(),S=n("p"),Ie=s("Load your dataset by specifying "),za=n("code"),Pe=s("imagefolder"),Ce=s(" and the directory of your dataset in "),Ga=n("code"),Ae=s("data_dir"),Oe=s(":"),It=d(),_(da.$$.fragment),Pt=d(),X=n("p"),De=s("Load remote datasets from their URLs with the "),Wa=n("code"),Fe=s("data_files"),Le=s(" parameter:"),Ct=d(),_(ca.$$.fragment),At=d(),k=n("p"),Ja=n("code"),Se=s("ImageFolder"),Ne=s(" creates a "),Ka=n("code"),Be=s("label"),Te=s(" column, and the label name is based on the directory name. To ignore the "),Qa=n("code"),Me=s("label"),He=s(" column, set "),Va=n("code"),Ye=s("drop_labels=False"),Re=s(" as defined in "),xa=n("a"),Ue=s("ImageFolderConfig"),ze=s("."),Ot=d(),U=n("h2"),Z=n("a"),Xa=n("span"),_(ma.$$.fragment),Ge=d(),Za=n("span"),We=s("ImageFolder with metadata"),Dt=d(),N=n("p"),Je=s("Metadata associated with your dataset can also be loaded, extending the utility of "),at=n("code"),Ke=s("ImageFolder"),Qe=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),tt=n("code"),Ve=s("metadata.jsonl"),Xe=s(" file:"),Ft=d(),_(ha.$$.fragment),Lt=d(),B=n("p"),Ze=s("Link the metadata in "),et=n("code"),as=s("metadata.jsonl"),ts=s(" file to the images using the "),st=n("code"),es=s("file_path"),ss=s(" parameter:"),St=d(),_(fa.$$.fragment),Nt=d(),z=n("h3"),aa=n("a"),lt=n("span"),_(ga.$$.fragment),ls=d(),ot=n("span"),os=s("Image captioning"),Bt=d(),ta=n("p"),ns=s("Image captioning datasets have text describing an image. An example "),nt=n("code"),is=s("metadata.jsonl"),rs=s(" may look like:"),Tt=d(),_(ua.$$.fragment),Mt=d(),T=n("p"),ps=s("Load the dataset with "),it=n("code"),ds=s("ImageFolder"),cs=s(", and it will create a "),rt=n("code"),ms=s("text"),hs=s(" column for the image captions:"),Ht=d(),_(_a.$$.fragment),Yt=d(),G=n("h3"),ea=n("a"),pt=n("span"),_($a.$$.fragment),fs=d(),dt=n("span"),gs=s("Object detection"),Rt=d(),sa=n("p"),us=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ct=n("code"),_s=s("metadata.jsonl"),$s=s(" may look like:"),Ut=d(),_(ja.$$.fragment),zt=d(),M=n("p"),js=s("Load the dataset with "),mt=n("code"),vs=s("ImageFolder"),bs=s(", and it will create a "),ht=n("code"),qs=s("objects"),ws=s(" column with the bounding boxes and the categories:"),Gt=d(),_(va.$$.fragment),this.h()},l(a){const o=_l('[data-svelte="svelte-1phssyn"]',document.head);h=i(o,"META",{name:!0,content:!0}),o.forEach(e),P=c(a),g=i(a,"H1",{class:!0});var ba=r(g);w=i(ba,"A",{id:!0,class:!0,href:!0});var ft=r(w);x=i(ft,"SPAN",{});var Es=r(x);$(u.$$.fragment,Es),Es.forEach(e),ft.forEach(e),A=c(ba),I=i(ba,"SPAN",{});var ks=r(I);E=l(ks,"Load image data"),ks.forEach(e),ba.forEach(e),f=c(a),y=i(a,"P",{});var Jt=r(y);H=l(Jt,"Image datasets are loaded from the "),Na=i(Jt,"CODE",{});var ys=r(Na);le=l(ys,"image"),ys.forEach(e),oe=l(Jt," column, which contains a PIL object."),Jt.forEach(e),gt=c(a),$(W.$$.fragment,a),ut=c(a),D=i(a,"P",{});var Ia=r(D);ne=l(Ia,"When you load an image dataset and call the "),Ba=i(Ia,"CODE",{});var xs=r(Ba);ie=l(xs,"image"),xs.forEach(e),re=l(Ia," column, the "),wa=i(Ia,"A",{href:!0});var Is=r(wa);pe=l(Is,"Image"),Is.forEach(e),de=l(Ia," feature automatically decodes the PIL object into an image:"),Ia.forEach(e),_t=c(a),$(la.$$.fragment,a),$t=c(a),$(J.$$.fragment,a),jt=c(a),Y=i(a,"H2",{class:!0});var Kt=r(Y);K=i(Kt,"A",{id:!0,class:!0,href:!0});var Ps=r(K);Ta=i(Ps,"SPAN",{});var Cs=r(Ta);$(oa.$$.fragment,Cs),Cs.forEach(e),Ps.forEach(e),ce=c(Kt),Ma=i(Kt,"SPAN",{});var As=r(Ma);me=l(As,"Local files"),As.forEach(e),Kt.forEach(e),vt=c(a),F=i(a,"P",{});var Pa=r(F);he=l(Pa,"You can load a dataset from the image path. Use the "),Ea=i(Pa,"A",{href:!0});var Os=r(Ea);fe=l(Os,"cast_column()"),Os.forEach(e),ge=l(Pa," function to accept a column of image file paths, and decode it into a PIL image with the "),ka=i(Pa,"A",{href:!0});var Ds=r(ka);ue=l(Ds,"Image"),Ds.forEach(e),_e=l(Pa," feature:"),Pa.forEach(e),bt=c(a),$(na.$$.fragment,a),qt=c(a),L=i(a,"P",{});var Ca=r(L);$e=l(Ca,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ha=i(Ca,"CODE",{});var Fs=r(Ha);je=l(Fs,"decode=False"),Fs.forEach(e),ve=l(Ca," in the "),ya=i(Ca,"A",{href:!0});var Ls=r(ya);be=l(Ls,"Image"),Ls.forEach(e),qe=l(Ca," feature:"),Ca.forEach(e),wt=c(a),$(ia.$$.fragment,a),Et=c(a),R=i(a,"H2",{class:!0});var Qt=r(R);Q=i(Qt,"A",{id:!0,class:!0,href:!0});var Ss=r(Q);Ya=i(Ss,"SPAN",{});var Ns=r(Ya);$(ra.$$.fragment,Ns),Ns.forEach(e),Ss.forEach(e),we=c(Qt),Ra=i(Qt,"SPAN",{});var Bs=r(Ra);Ee=l(Bs,"ImageFolder"),Bs.forEach(e),Qt.forEach(e),kt=c(a),V=i(a,"P",{});var Vt=r(V);ke=l(Vt,"You can also load a dataset with a "),Ua=i(Vt,"CODE",{});var Ts=r(Ua);ye=l(Ts,"ImageFolder"),Ts.forEach(e),xe=l(Vt," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Vt.forEach(e),yt=c(a),$(pa.$$.fragment,a),xt=c(a),S=i(a,"P",{});var Aa=r(S);Ie=l(Aa,"Load your dataset by specifying "),za=i(Aa,"CODE",{});var Ms=r(za);Pe=l(Ms,"imagefolder"),Ms.forEach(e),Ce=l(Aa," and the directory of your dataset in "),Ga=i(Aa,"CODE",{});var Hs=r(Ga);Ae=l(Hs,"data_dir"),Hs.forEach(e),Oe=l(Aa,":"),Aa.forEach(e),It=c(a),$(da.$$.fragment,a),Pt=c(a),X=i(a,"P",{});var Xt=r(X);De=l(Xt,"Load remote datasets from their URLs with the "),Wa=i(Xt,"CODE",{});var Ys=r(Wa);Fe=l(Ys,"data_files"),Ys.forEach(e),Le=l(Xt," parameter:"),Xt.forEach(e),Ct=c(a),$(ca.$$.fragment,a),At=c(a),k=i(a,"P",{});var O=r(k);Ja=i(O,"CODE",{});var Rs=r(Ja);Se=l(Rs,"ImageFolder"),Rs.forEach(e),Ne=l(O," creates a "),Ka=i(O,"CODE",{});var Us=r(Ka);Be=l(Us,"label"),Us.forEach(e),Te=l(O," column, and the label name is based on the directory name. To ignore the "),Qa=i(O,"CODE",{});var zs=r(Qa);Me=l(zs,"label"),zs.forEach(e),He=l(O," column, set "),Va=i(O,"CODE",{});var Gs=r(Va);Ye=l(Gs,"drop_labels=False"),Gs.forEach(e),Re=l(O," as defined in "),xa=i(O,"A",{href:!0});var Ws=r(xa);Ue=l(Ws,"ImageFolderConfig"),Ws.forEach(e),ze=l(O,"."),O.forEach(e),Ot=c(a),U=i(a,"H2",{class:!0});var Zt=r(U);Z=i(Zt,"A",{id:!0,class:!0,href:!0});var Js=r(Z);Xa=i(Js,"SPAN",{});var Ks=r(Xa);$(ma.$$.fragment,Ks),Ks.forEach(e),Js.forEach(e),Ge=c(Zt),Za=i(Zt,"SPAN",{});var Qs=r(Za);We=l(Qs,"ImageFolder with metadata"),Qs.forEach(e),Zt.forEach(e),Dt=c(a),N=i(a,"P",{});var Oa=r(N);Je=l(Oa,"Metadata associated with your dataset can also be loaded, extending the utility of "),at=i(Oa,"CODE",{});var Vs=r(at);Ke=l(Vs,"ImageFolder"),Vs.forEach(e),Qe=l(Oa," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),tt=i(Oa,"CODE",{});var Xs=r(tt);Ve=l(Xs,"metadata.jsonl"),Xs.forEach(e),Xe=l(Oa," file:"),Oa.forEach(e),Ft=c(a),$(ha.$$.fragment,a),Lt=c(a),B=i(a,"P",{});var Da=r(B);Ze=l(Da,"Link the metadata in "),et=i(Da,"CODE",{});var Zs=r(et);as=l(Zs,"metadata.jsonl"),Zs.forEach(e),ts=l(Da," file to the images using the "),st=i(Da,"CODE",{});var al=r(st);es=l(al,"file_path"),al.forEach(e),ss=l(Da," parameter:"),Da.forEach(e),St=c(a),$(fa.$$.fragment,a),Nt=c(a),z=i(a,"H3",{class:!0});var ae=r(z);aa=i(ae,"A",{id:!0,class:!0,href:!0});var tl=r(aa);lt=i(tl,"SPAN",{});var el=r(lt);$(ga.$$.fragment,el),el.forEach(e),tl.forEach(e),ls=c(ae),ot=i(ae,"SPAN",{});var sl=r(ot);os=l(sl,"Image captioning"),sl.forEach(e),ae.forEach(e),Bt=c(a),ta=i(a,"P",{});var te=r(ta);ns=l(te,"Image captioning datasets have text describing an image. An example "),nt=i(te,"CODE",{});var ll=r(nt);is=l(ll,"metadata.jsonl"),ll.forEach(e),rs=l(te," may look like:"),te.forEach(e),Tt=c(a),$(ua.$$.fragment,a),Mt=c(a),T=i(a,"P",{});var Fa=r(T);ps=l(Fa,"Load the dataset with "),it=i(Fa,"CODE",{});var ol=r(it);ds=l(ol,"ImageFolder"),ol.forEach(e),cs=l(Fa,", and it will create a "),rt=i(Fa,"CODE",{});var nl=r(rt);ms=l(nl,"text"),nl.forEach(e),hs=l(Fa," column for the image captions:"),Fa.forEach(e),Ht=c(a),$(_a.$$.fragment,a),Yt=c(a),G=i(a,"H3",{class:!0});var ee=r(G);ea=i(ee,"A",{id:!0,class:!0,href:!0});var il=r(ea);pt=i(il,"SPAN",{});var rl=r(pt);$($a.$$.fragment,rl),rl.forEach(e),il.forEach(e),fs=c(ee),dt=i(ee,"SPAN",{});var pl=r(dt);gs=l(pl,"Object detection"),pl.forEach(e),ee.forEach(e),Rt=c(a),sa=i(a,"P",{});var se=r(sa);us=l(se,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ct=i(se,"CODE",{});var dl=r(ct);_s=l(dl,"metadata.jsonl"),dl.forEach(e),$s=l(se," may look like:"),se.forEach(e),Ut=c(a),$(ja.$$.fragment,a),zt=c(a),M=i(a,"P",{});var La=r(M);js=l(La,"Load the dataset with "),mt=i(La,"CODE",{});var cl=r(mt);vs=l(cl,"ImageFolder"),cl.forEach(e),bs=l(La,", and it will create a "),ht=i(La,"CODE",{});var ml=r(ht);qs=l(ml,"objects"),ml.forEach(e),ws=l(La," column with the bounding boxes and the categories:"),La.forEach(e),Gt=c(a),$(va.$$.fragment,a),this.h()},h(){m(h,"name","hf:doc:metadata"),m(h,"content",JSON.stringify(ql)),m(w,"id","load-image-data"),m(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(w,"href","#load-image-data"),m(g,"class","relative group"),m(wa,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Image"),m(K,"id","local-files"),m(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(K,"href","#local-files"),m(Y,"class","relative group"),m(Ea,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Dataset.cast_column"),m(ka,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Image"),m(ya,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Image"),m(Q,"id","imagefolder"),m(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Q,"href","#imagefolder"),m(R,"class","relative group"),m(xa,"href","/docs/datasets/pr_4519/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),m(Z,"id","imagefolder-with-metadata"),m(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Z,"href","#imagefolder-with-metadata"),m(U,"class","relative group"),m(aa,"id","image-captioning"),m(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(aa,"href","#image-captioning"),m(z,"class","relative group"),m(ea,"id","object-detection"),m(ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ea,"href","#object-detection"),m(G,"class","relative group")},m(a,o){t(document.head,h),p(a,P,o),p(a,g,o),t(g,w),t(w,x),j(u,x,null),t(g,A),t(g,I),t(I,E),p(a,f,o),p(a,y,o),t(y,H),t(y,Na),t(Na,le),t(y,oe),p(a,gt,o),j(W,a,o),p(a,ut,o),p(a,D,o),t(D,ne),t(D,Ba),t(Ba,ie),t(D,re),t(D,wa),t(wa,pe),t(D,de),p(a,_t,o),j(la,a,o),p(a,$t,o),j(J,a,o),p(a,jt,o),p(a,Y,o),t(Y,K),t(K,Ta),j(oa,Ta,null),t(Y,ce),t(Y,Ma),t(Ma,me),p(a,vt,o),p(a,F,o),t(F,he),t(F,Ea),t(Ea,fe),t(F,ge),t(F,ka),t(ka,ue),t(F,_e),p(a,bt,o),j(na,a,o),p(a,qt,o),p(a,L,o),t(L,$e),t(L,Ha),t(Ha,je),t(L,ve),t(L,ya),t(ya,be),t(L,qe),p(a,wt,o),j(ia,a,o),p(a,Et,o),p(a,R,o),t(R,Q),t(Q,Ya),j(ra,Ya,null),t(R,we),t(R,Ra),t(Ra,Ee),p(a,kt,o),p(a,V,o),t(V,ke),t(V,Ua),t(Ua,ye),t(V,xe),p(a,yt,o),j(pa,a,o),p(a,xt,o),p(a,S,o),t(S,Ie),t(S,za),t(za,Pe),t(S,Ce),t(S,Ga),t(Ga,Ae),t(S,Oe),p(a,It,o),j(da,a,o),p(a,Pt,o),p(a,X,o),t(X,De),t(X,Wa),t(Wa,Fe),t(X,Le),p(a,Ct,o),j(ca,a,o),p(a,At,o),p(a,k,o),t(k,Ja),t(Ja,Se),t(k,Ne),t(k,Ka),t(Ka,Be),t(k,Te),t(k,Qa),t(Qa,Me),t(k,He),t(k,Va),t(Va,Ye),t(k,Re),t(k,xa),t(xa,Ue),t(k,ze),p(a,Ot,o),p(a,U,o),t(U,Z),t(Z,Xa),j(ma,Xa,null),t(U,Ge),t(U,Za),t(Za,We),p(a,Dt,o),p(a,N,o),t(N,Je),t(N,at),t(at,Ke),t(N,Qe),t(N,tt),t(tt,Ve),t(N,Xe),p(a,Ft,o),j(ha,a,o),p(a,Lt,o),p(a,B,o),t(B,Ze),t(B,et),t(et,as),t(B,ts),t(B,st),t(st,es),t(B,ss),p(a,St,o),j(fa,a,o),p(a,Nt,o),p(a,z,o),t(z,aa),t(aa,lt),j(ga,lt,null),t(z,ls),t(z,ot),t(ot,os),p(a,Bt,o),p(a,ta,o),t(ta,ns),t(ta,nt),t(nt,is),t(ta,rs),p(a,Tt,o),j(ua,a,o),p(a,Mt,o),p(a,T,o),t(T,ps),t(T,it),t(it,ds),t(T,cs),t(T,rt),t(rt,ms),t(T,hs),p(a,Ht,o),j(_a,a,o),p(a,Yt,o),p(a,G,o),t(G,ea),t(ea,pt),j($a,pt,null),t(G,fs),t(G,dt),t(dt,gs),p(a,Rt,o),p(a,sa,o),t(sa,us),t(sa,ct),t(ct,_s),t(sa,$s),p(a,Ut,o),j(ja,a,o),p(a,zt,o),p(a,M,o),t(M,js),t(M,mt),t(mt,vs),t(M,bs),t(M,ht),t(ht,qs),t(M,ws),p(a,Gt,o),j(va,a,o),Wt=!0},p(a,[o]){const ba={};o&2&&(ba.$$scope={dirty:o,ctx:a}),W.$set(ba);const ft={};o&2&&(ft.$$scope={dirty:o,ctx:a}),J.$set(ft)},i(a){Wt||(v(u.$$.fragment,a),v(W.$$.fragment,a),v(la.$$.fragment,a),v(J.$$.fragment,a),v(oa.$$.fragment,a),v(na.$$.fragment,a),v(ia.$$.fragment,a),v(ra.$$.fragment,a),v(pa.$$.fragment,a),v(da.$$.fragment,a),v(ca.$$.fragment,a),v(ma.$$.fragment,a),v(ha.$$.fragment,a),v(fa.$$.fragment,a),v(ga.$$.fragment,a),v(ua.$$.fragment,a),v(_a.$$.fragment,a),v($a.$$.fragment,a),v(ja.$$.fragment,a),v(va.$$.fragment,a),Wt=!0)},o(a){b(u.$$.fragment,a),b(W.$$.fragment,a),b(la.$$.fragment,a),b(J.$$.fragment,a),b(oa.$$.fragment,a),b(na.$$.fragment,a),b(ia.$$.fragment,a),b(ra.$$.fragment,a),b(pa.$$.fragment,a),b(da.$$.fragment,a),b(ca.$$.fragment,a),b(ma.$$.fragment,a),b(ha.$$.fragment,a),b(fa.$$.fragment,a),b(ga.$$.fragment,a),b(ua.$$.fragment,a),b(_a.$$.fragment,a),b($a.$$.fragment,a),b(ja.$$.fragment,a),b(va.$$.fragment,a),Wt=!1},d(a){e(h),a&&e(P),a&&e(g),q(u),a&&e(f),a&&e(y),a&&e(gt),q(W,a),a&&e(ut),a&&e(D),a&&e(_t),q(la,a),a&&e($t),q(J,a),a&&e(jt),a&&e(Y),q(oa),a&&e(vt),a&&e(F),a&&e(bt),q(na,a),a&&e(qt),a&&e(L),a&&e(wt),q(ia,a),a&&e(Et),a&&e(R),q(ra),a&&e(kt),a&&e(V),a&&e(yt),q(pa,a),a&&e(xt),a&&e(S),a&&e(It),q(da,a),a&&e(Pt),a&&e(X),a&&e(Ct),q(ca,a),a&&e(At),a&&e(k),a&&e(Ot),a&&e(U),q(ma),a&&e(Dt),a&&e(N),a&&e(Ft),q(ha,a),a&&e(Lt),a&&e(B),a&&e(St),q(fa,a),a&&e(Nt),a&&e(z),q(ga),a&&e(Bt),a&&e(ta),a&&e(Tt),q(ua,a),a&&e(Mt),a&&e(T),a&&e(Ht),q(_a,a),a&&e(Yt),a&&e(G),q($a),a&&e(Rt),a&&e(sa),a&&e(Ut),q(ja,a),a&&e(zt),a&&e(M),a&&e(Gt),q(va,a)}}}const ql={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function wl(qa){return $l(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Il extends fl{constructor(h){super();gl(this,h,wl,bl,ul,{})}}export{Il as default,ql as metadata};
