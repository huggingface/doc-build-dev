import{S as il,i as rl,s as pl,e as n,k as d,w as f,t as s,M as dl,c as i,d as e,m as c,a as r,x as g,h as l,b as m,G as t,g as p,y as u,q as _,o as j,B as $,v as cl}from"../chunks/vendor-hf-doc-builder.js";import{T as ml}from"../chunks/Tip-hf-doc-builder.js";import{I as Da}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as y}from"../chunks/CodeBlock-hf-doc-builder.js";function hl(ct){let h,R,v,k,L,w,ta,S;return{c(){h=n("p"),R=s("Index into an image dataset using the row index first and then the "),v=n("code"),k=s("image"),L=s(" column - "),w=n("code"),ta=s('dataset[0]["image"]'),S=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(N){h=i(N,"P",{});var E=r(h);R=l(E,"Index into an image dataset using the row index first and then the "),v=i(E,"CODE",{});var b=r(v);k=l(b,"image"),b.forEach(e),L=l(E," column - "),w=i(E,"CODE",{});var va=r(w);ta=l(va,'dataset[0]["image"]'),va.forEach(e),S=l(E," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),E.forEach(e)},m(N,E){p(N,h,E),t(h,R),t(h,v),t(v,k),t(h,L),t(h,w),t(w,ta),t(h,S)},d(N){N&&e(h)}}}function fl(ct){let h,R,v,k,L,w,ta,S,N,E,b,va,Fa,Xt,Zt,La,ae,te,ba,ee,se,mt,ea,ht,U,ft,B,z,Sa,sa,le,Na,oe,gt,I,ne,qa,ie,re,wa,pe,de,ut,la,_t,P,ce,Ba,me,he,Ea,fe,ge,jt,oa,$t,T,G,Ta,na,ue,Ma,_e,vt,W,je,Ha,$e,ve,bt,ia,qt,A,be,Ya,qe,we,Ra,Ee,ke,wt,ra,Et,J,ye,Ua,xe,Ie,kt,pa,yt,q,za,Pe,Ae,Ga,Ce,Oe,Wa,De,Fe,Ja,Le,Se,ka,Ne,Be,xt,M,K,Ka,da,Te,Qa,Me,It,C,He,Va,Ye,Re,Xa,Ue,ze,Pt,ca,At,O,Ge,Za,We,Je,at,Ke,Qe,Ct,ma,Ot,H,Q,tt,ha,Ve,et,Xe,Dt,V,Ze,st,as,ts,Ft,fa,Lt,D,es,lt,ss,ls,ot,os,ns,St,ga,Nt,Y,X,nt,ua,is,it,rs,Bt,Z,ps,rt,ds,cs,Tt,_a,Mt,F,ms,pt,hs,fs,dt,gs,us,Ht,ja,Yt;return w=new Da({}),ea=new y({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),U=new ml({props:{warning:!0,$$slots:{default:[hl]},$$scope:{ctx:ct}}}),sa=new Da({}),la=new y({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),oa=new y({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),na=new Da({}),ia=new y({props:{code:"",highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ra=new y({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),pa=new y({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),da=new Da({}),ca=new y({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),ma=new y({props:{code:'dataset = load_dataset("imagefolder", data_dir="/path/to/folder", file_path="/path/to/folder/train/metadata.jsonl", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, file_path=<span class="hljs-string">&quot;/path/to/folder/train/metadata.jsonl&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ha=new Da({}),fa=new y({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),ga=new y({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),ua=new Da({}),_a=new y({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),ja=new y({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){h=n("meta"),R=d(),v=n("h1"),k=n("a"),L=n("span"),f(w.$$.fragment),ta=d(),S=n("span"),N=s("Load image data"),E=d(),b=n("p"),va=s("Image datasets are loaded from the "),Fa=n("code"),Xt=s("image"),Zt=s(" column, which contains a PIL object. When you load an image dataset and call the "),La=n("code"),ae=s("image"),te=s(" column, the "),ba=n("a"),ee=s("Image"),se=s(" feature automatically decodes the PIL object into an image:"),mt=d(),f(ea.$$.fragment),ht=d(),f(U.$$.fragment),ft=d(),B=n("h2"),z=n("a"),Sa=n("span"),f(sa.$$.fragment),le=d(),Na=n("span"),oe=s("Local files"),gt=d(),I=n("p"),ne=s("You can load a dataset from the image path. Use the "),qa=n("a"),ie=s("cast_column()"),re=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),wa=n("a"),pe=s("Image"),de=s(" feature:"),ut=d(),f(la.$$.fragment),_t=d(),P=n("p"),ce=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ba=n("code"),me=s("decode=False"),he=s(" in the "),Ea=n("a"),fe=s("Image"),ge=s(" feature:"),jt=d(),f(oa.$$.fragment),$t=d(),T=n("h2"),G=n("a"),Ta=n("span"),f(na.$$.fragment),ue=d(),Ma=n("span"),_e=s("ImageFolder"),vt=d(),W=n("p"),je=s("You can also load a dataset with a "),Ha=n("code"),$e=s("ImageFolder"),ve=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),bt=d(),f(ia.$$.fragment),qt=d(),A=n("p"),be=s("Load your dataset by specifying "),Ya=n("code"),qe=s("imagefolder"),we=s(" and the directory of your dataset in "),Ra=n("code"),Ee=s("data_dir"),ke=s(":"),wt=d(),f(ra.$$.fragment),Et=d(),J=n("p"),ye=s("Load remote datasets from their URLs with the "),Ua=n("code"),xe=s("data_files"),Ie=s(" parameter:"),kt=d(),f(pa.$$.fragment),yt=d(),q=n("p"),za=n("code"),Pe=s("ImageFolder"),Ae=s(" creates a "),Ga=n("code"),Ce=s("label"),Oe=s(" column, and the label name is based on the directory name. To ignore the "),Wa=n("code"),De=s("label"),Fe=s(" column, set "),Ja=n("code"),Le=s("drop_labels=False"),Se=s(" as defined in "),ka=n("a"),Ne=s("ImageFolderConfig"),Be=s("."),xt=d(),M=n("h2"),K=n("a"),Ka=n("span"),f(da.$$.fragment),Te=d(),Qa=n("span"),Me=s("ImageFolder with metadata"),It=d(),C=n("p"),He=s("Metadata associated with your dataset can also be loaded, extending the utility of "),Va=n("code"),Ye=s("ImageFolder"),Re=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),Xa=n("code"),Ue=s("metadata.jsonl"),ze=s(" file:"),Pt=d(),f(ca.$$.fragment),At=d(),O=n("p"),Ge=s("Link the metadata in "),Za=n("code"),We=s("metadata.jsonl"),Je=s(" file to the images using the "),at=n("code"),Ke=s("file_path"),Qe=s(" parameter:"),Ct=d(),f(ma.$$.fragment),Ot=d(),H=n("h3"),Q=n("a"),tt=n("span"),f(ha.$$.fragment),Ve=d(),et=n("span"),Xe=s("Image captioning"),Dt=d(),V=n("p"),Ze=s("Image captioning datasets have text describing an image. An example "),st=n("code"),as=s("metadata.jsonl"),ts=s(" may look like:"),Ft=d(),f(fa.$$.fragment),Lt=d(),D=n("p"),es=s("Load the dataset with "),lt=n("code"),ss=s("ImageFolder"),ls=s(", and it will create a "),ot=n("code"),os=s("text"),ns=s(" column for the image captions:"),St=d(),f(ga.$$.fragment),Nt=d(),Y=n("h3"),X=n("a"),nt=n("span"),f(ua.$$.fragment),is=d(),it=n("span"),rs=s("Object detection"),Bt=d(),Z=n("p"),ps=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),rt=n("code"),ds=s("metadata.jsonl"),cs=s(" may look like:"),Tt=d(),f(_a.$$.fragment),Mt=d(),F=n("p"),ms=s("Load the dataset with "),pt=n("code"),hs=s("ImageFolder"),fs=s(", and it will create a "),dt=n("code"),gs=s("objects"),us=s(" column with the bounding boxes and the categories:"),Ht=d(),f(ja.$$.fragment),this.h()},l(a){const o=dl('[data-svelte="svelte-1phssyn"]',document.head);h=i(o,"META",{name:!0,content:!0}),o.forEach(e),R=c(a),v=i(a,"H1",{class:!0});var $a=r(v);k=i($a,"A",{id:!0,class:!0,href:!0});var _s=r(k);L=i(_s,"SPAN",{});var js=r(L);g(w.$$.fragment,js),js.forEach(e),_s.forEach(e),ta=c($a),S=i($a,"SPAN",{});var $s=r(S);N=l($s,"Load image data"),$s.forEach(e),$a.forEach(e),E=c(a),b=i(a,"P",{});var aa=r(b);va=l(aa,"Image datasets are loaded from the "),Fa=i(aa,"CODE",{});var vs=r(Fa);Xt=l(vs,"image"),vs.forEach(e),Zt=l(aa," column, which contains a PIL object. When you load an image dataset and call the "),La=i(aa,"CODE",{});var bs=r(La);ae=l(bs,"image"),bs.forEach(e),te=l(aa," column, the "),ba=i(aa,"A",{href:!0});var qs=r(ba);ee=l(qs,"Image"),qs.forEach(e),se=l(aa," feature automatically decodes the PIL object into an image:"),aa.forEach(e),mt=c(a),g(ea.$$.fragment,a),ht=c(a),g(U.$$.fragment,a),ft=c(a),B=i(a,"H2",{class:!0});var Rt=r(B);z=i(Rt,"A",{id:!0,class:!0,href:!0});var ws=r(z);Sa=i(ws,"SPAN",{});var Es=r(Sa);g(sa.$$.fragment,Es),Es.forEach(e),ws.forEach(e),le=c(Rt),Na=i(Rt,"SPAN",{});var ks=r(Na);oe=l(ks,"Local files"),ks.forEach(e),Rt.forEach(e),gt=c(a),I=i(a,"P",{});var ya=r(I);ne=l(ya,"You can load a dataset from the image path. Use the "),qa=i(ya,"A",{href:!0});var ys=r(qa);ie=l(ys,"cast_column()"),ys.forEach(e),re=l(ya," function to accept a column of image file paths, and decode it into a PIL image with the "),wa=i(ya,"A",{href:!0});var xs=r(wa);pe=l(xs,"Image"),xs.forEach(e),de=l(ya," feature:"),ya.forEach(e),ut=c(a),g(la.$$.fragment,a),_t=c(a),P=i(a,"P",{});var xa=r(P);ce=l(xa,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ba=i(xa,"CODE",{});var Is=r(Ba);me=l(Is,"decode=False"),Is.forEach(e),he=l(xa," in the "),Ea=i(xa,"A",{href:!0});var Ps=r(Ea);fe=l(Ps,"Image"),Ps.forEach(e),ge=l(xa," feature:"),xa.forEach(e),jt=c(a),g(oa.$$.fragment,a),$t=c(a),T=i(a,"H2",{class:!0});var Ut=r(T);G=i(Ut,"A",{id:!0,class:!0,href:!0});var As=r(G);Ta=i(As,"SPAN",{});var Cs=r(Ta);g(na.$$.fragment,Cs),Cs.forEach(e),As.forEach(e),ue=c(Ut),Ma=i(Ut,"SPAN",{});var Os=r(Ma);_e=l(Os,"ImageFolder"),Os.forEach(e),Ut.forEach(e),vt=c(a),W=i(a,"P",{});var zt=r(W);je=l(zt,"You can also load a dataset with a "),Ha=i(zt,"CODE",{});var Ds=r(Ha);$e=l(Ds,"ImageFolder"),Ds.forEach(e),ve=l(zt," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),zt.forEach(e),bt=c(a),g(ia.$$.fragment,a),qt=c(a),A=i(a,"P",{});var Ia=r(A);be=l(Ia,"Load your dataset by specifying "),Ya=i(Ia,"CODE",{});var Fs=r(Ya);qe=l(Fs,"imagefolder"),Fs.forEach(e),we=l(Ia," and the directory of your dataset in "),Ra=i(Ia,"CODE",{});var Ls=r(Ra);Ee=l(Ls,"data_dir"),Ls.forEach(e),ke=l(Ia,":"),Ia.forEach(e),wt=c(a),g(ra.$$.fragment,a),Et=c(a),J=i(a,"P",{});var Gt=r(J);ye=l(Gt,"Load remote datasets from their URLs with the "),Ua=i(Gt,"CODE",{});var Ss=r(Ua);xe=l(Ss,"data_files"),Ss.forEach(e),Ie=l(Gt," parameter:"),Gt.forEach(e),kt=c(a),g(pa.$$.fragment,a),yt=c(a),q=i(a,"P",{});var x=r(q);za=i(x,"CODE",{});var Ns=r(za);Pe=l(Ns,"ImageFolder"),Ns.forEach(e),Ae=l(x," creates a "),Ga=i(x,"CODE",{});var Bs=r(Ga);Ce=l(Bs,"label"),Bs.forEach(e),Oe=l(x," column, and the label name is based on the directory name. To ignore the "),Wa=i(x,"CODE",{});var Ts=r(Wa);De=l(Ts,"label"),Ts.forEach(e),Fe=l(x," column, set "),Ja=i(x,"CODE",{});var Ms=r(Ja);Le=l(Ms,"drop_labels=False"),Ms.forEach(e),Se=l(x," as defined in "),ka=i(x,"A",{href:!0});var Hs=r(ka);Ne=l(Hs,"ImageFolderConfig"),Hs.forEach(e),Be=l(x,"."),x.forEach(e),xt=c(a),M=i(a,"H2",{class:!0});var Wt=r(M);K=i(Wt,"A",{id:!0,class:!0,href:!0});var Ys=r(K);Ka=i(Ys,"SPAN",{});var Rs=r(Ka);g(da.$$.fragment,Rs),Rs.forEach(e),Ys.forEach(e),Te=c(Wt),Qa=i(Wt,"SPAN",{});var Us=r(Qa);Me=l(Us,"ImageFolder with metadata"),Us.forEach(e),Wt.forEach(e),It=c(a),C=i(a,"P",{});var Pa=r(C);He=l(Pa,"Metadata associated with your dataset can also be loaded, extending the utility of "),Va=i(Pa,"CODE",{});var zs=r(Va);Ye=l(zs,"ImageFolder"),zs.forEach(e),Re=l(Pa," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),Xa=i(Pa,"CODE",{});var Gs=r(Xa);Ue=l(Gs,"metadata.jsonl"),Gs.forEach(e),ze=l(Pa," file:"),Pa.forEach(e),Pt=c(a),g(ca.$$.fragment,a),At=c(a),O=i(a,"P",{});var Aa=r(O);Ge=l(Aa,"Link the metadata in "),Za=i(Aa,"CODE",{});var Ws=r(Za);We=l(Ws,"metadata.jsonl"),Ws.forEach(e),Je=l(Aa," file to the images using the "),at=i(Aa,"CODE",{});var Js=r(at);Ke=l(Js,"file_path"),Js.forEach(e),Qe=l(Aa," parameter:"),Aa.forEach(e),Ct=c(a),g(ma.$$.fragment,a),Ot=c(a),H=i(a,"H3",{class:!0});var Jt=r(H);Q=i(Jt,"A",{id:!0,class:!0,href:!0});var Ks=r(Q);tt=i(Ks,"SPAN",{});var Qs=r(tt);g(ha.$$.fragment,Qs),Qs.forEach(e),Ks.forEach(e),Ve=c(Jt),et=i(Jt,"SPAN",{});var Vs=r(et);Xe=l(Vs,"Image captioning"),Vs.forEach(e),Jt.forEach(e),Dt=c(a),V=i(a,"P",{});var Kt=r(V);Ze=l(Kt,"Image captioning datasets have text describing an image. An example "),st=i(Kt,"CODE",{});var Xs=r(st);as=l(Xs,"metadata.jsonl"),Xs.forEach(e),ts=l(Kt," may look like:"),Kt.forEach(e),Ft=c(a),g(fa.$$.fragment,a),Lt=c(a),D=i(a,"P",{});var Ca=r(D);es=l(Ca,"Load the dataset with "),lt=i(Ca,"CODE",{});var Zs=r(lt);ss=l(Zs,"ImageFolder"),Zs.forEach(e),ls=l(Ca,", and it will create a "),ot=i(Ca,"CODE",{});var al=r(ot);os=l(al,"text"),al.forEach(e),ns=l(Ca," column for the image captions:"),Ca.forEach(e),St=c(a),g(ga.$$.fragment,a),Nt=c(a),Y=i(a,"H3",{class:!0});var Qt=r(Y);X=i(Qt,"A",{id:!0,class:!0,href:!0});var tl=r(X);nt=i(tl,"SPAN",{});var el=r(nt);g(ua.$$.fragment,el),el.forEach(e),tl.forEach(e),is=c(Qt),it=i(Qt,"SPAN",{});var sl=r(it);rs=l(sl,"Object detection"),sl.forEach(e),Qt.forEach(e),Bt=c(a),Z=i(a,"P",{});var Vt=r(Z);ps=l(Vt,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),rt=i(Vt,"CODE",{});var ll=r(rt);ds=l(ll,"metadata.jsonl"),ll.forEach(e),cs=l(Vt," may look like:"),Vt.forEach(e),Tt=c(a),g(_a.$$.fragment,a),Mt=c(a),F=i(a,"P",{});var Oa=r(F);ms=l(Oa,"Load the dataset with "),pt=i(Oa,"CODE",{});var ol=r(pt);hs=l(ol,"ImageFolder"),ol.forEach(e),fs=l(Oa,", and it will create a "),dt=i(Oa,"CODE",{});var nl=r(dt);gs=l(nl,"objects"),nl.forEach(e),us=l(Oa," column with the bounding boxes and the categories:"),Oa.forEach(e),Ht=c(a),g(ja.$$.fragment,a),this.h()},h(){m(h,"name","hf:doc:metadata"),m(h,"content",JSON.stringify(gl)),m(k,"id","load-image-data"),m(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(k,"href","#load-image-data"),m(v,"class","relative group"),m(ba,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Image"),m(z,"id","local-files"),m(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(z,"href","#local-files"),m(B,"class","relative group"),m(qa,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Dataset.cast_column"),m(wa,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Image"),m(Ea,"href","/docs/datasets/pr_4519/en/package_reference/main_classes#datasets.Image"),m(G,"id","imagefolder"),m(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(G,"href","#imagefolder"),m(T,"class","relative group"),m(ka,"href","/docs/datasets/pr_4519/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),m(K,"id","imagefolder-with-metadata"),m(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(K,"href","#imagefolder-with-metadata"),m(M,"class","relative group"),m(Q,"id","image-captioning"),m(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Q,"href","#image-captioning"),m(H,"class","relative group"),m(X,"id","object-detection"),m(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(X,"href","#object-detection"),m(Y,"class","relative group")},m(a,o){t(document.head,h),p(a,R,o),p(a,v,o),t(v,k),t(k,L),u(w,L,null),t(v,ta),t(v,S),t(S,N),p(a,E,o),p(a,b,o),t(b,va),t(b,Fa),t(Fa,Xt),t(b,Zt),t(b,La),t(La,ae),t(b,te),t(b,ba),t(ba,ee),t(b,se),p(a,mt,o),u(ea,a,o),p(a,ht,o),u(U,a,o),p(a,ft,o),p(a,B,o),t(B,z),t(z,Sa),u(sa,Sa,null),t(B,le),t(B,Na),t(Na,oe),p(a,gt,o),p(a,I,o),t(I,ne),t(I,qa),t(qa,ie),t(I,re),t(I,wa),t(wa,pe),t(I,de),p(a,ut,o),u(la,a,o),p(a,_t,o),p(a,P,o),t(P,ce),t(P,Ba),t(Ba,me),t(P,he),t(P,Ea),t(Ea,fe),t(P,ge),p(a,jt,o),u(oa,a,o),p(a,$t,o),p(a,T,o),t(T,G),t(G,Ta),u(na,Ta,null),t(T,ue),t(T,Ma),t(Ma,_e),p(a,vt,o),p(a,W,o),t(W,je),t(W,Ha),t(Ha,$e),t(W,ve),p(a,bt,o),u(ia,a,o),p(a,qt,o),p(a,A,o),t(A,be),t(A,Ya),t(Ya,qe),t(A,we),t(A,Ra),t(Ra,Ee),t(A,ke),p(a,wt,o),u(ra,a,o),p(a,Et,o),p(a,J,o),t(J,ye),t(J,Ua),t(Ua,xe),t(J,Ie),p(a,kt,o),u(pa,a,o),p(a,yt,o),p(a,q,o),t(q,za),t(za,Pe),t(q,Ae),t(q,Ga),t(Ga,Ce),t(q,Oe),t(q,Wa),t(Wa,De),t(q,Fe),t(q,Ja),t(Ja,Le),t(q,Se),t(q,ka),t(ka,Ne),t(q,Be),p(a,xt,o),p(a,M,o),t(M,K),t(K,Ka),u(da,Ka,null),t(M,Te),t(M,Qa),t(Qa,Me),p(a,It,o),p(a,C,o),t(C,He),t(C,Va),t(Va,Ye),t(C,Re),t(C,Xa),t(Xa,Ue),t(C,ze),p(a,Pt,o),u(ca,a,o),p(a,At,o),p(a,O,o),t(O,Ge),t(O,Za),t(Za,We),t(O,Je),t(O,at),t(at,Ke),t(O,Qe),p(a,Ct,o),u(ma,a,o),p(a,Ot,o),p(a,H,o),t(H,Q),t(Q,tt),u(ha,tt,null),t(H,Ve),t(H,et),t(et,Xe),p(a,Dt,o),p(a,V,o),t(V,Ze),t(V,st),t(st,as),t(V,ts),p(a,Ft,o),u(fa,a,o),p(a,Lt,o),p(a,D,o),t(D,es),t(D,lt),t(lt,ss),t(D,ls),t(D,ot),t(ot,os),t(D,ns),p(a,St,o),u(ga,a,o),p(a,Nt,o),p(a,Y,o),t(Y,X),t(X,nt),u(ua,nt,null),t(Y,is),t(Y,it),t(it,rs),p(a,Bt,o),p(a,Z,o),t(Z,ps),t(Z,rt),t(rt,ds),t(Z,cs),p(a,Tt,o),u(_a,a,o),p(a,Mt,o),p(a,F,o),t(F,ms),t(F,pt),t(pt,hs),t(F,fs),t(F,dt),t(dt,gs),t(F,us),p(a,Ht,o),u(ja,a,o),Yt=!0},p(a,[o]){const $a={};o&2&&($a.$$scope={dirty:o,ctx:a}),U.$set($a)},i(a){Yt||(_(w.$$.fragment,a),_(ea.$$.fragment,a),_(U.$$.fragment,a),_(sa.$$.fragment,a),_(la.$$.fragment,a),_(oa.$$.fragment,a),_(na.$$.fragment,a),_(ia.$$.fragment,a),_(ra.$$.fragment,a),_(pa.$$.fragment,a),_(da.$$.fragment,a),_(ca.$$.fragment,a),_(ma.$$.fragment,a),_(ha.$$.fragment,a),_(fa.$$.fragment,a),_(ga.$$.fragment,a),_(ua.$$.fragment,a),_(_a.$$.fragment,a),_(ja.$$.fragment,a),Yt=!0)},o(a){j(w.$$.fragment,a),j(ea.$$.fragment,a),j(U.$$.fragment,a),j(sa.$$.fragment,a),j(la.$$.fragment,a),j(oa.$$.fragment,a),j(na.$$.fragment,a),j(ia.$$.fragment,a),j(ra.$$.fragment,a),j(pa.$$.fragment,a),j(da.$$.fragment,a),j(ca.$$.fragment,a),j(ma.$$.fragment,a),j(ha.$$.fragment,a),j(fa.$$.fragment,a),j(ga.$$.fragment,a),j(ua.$$.fragment,a),j(_a.$$.fragment,a),j(ja.$$.fragment,a),Yt=!1},d(a){e(h),a&&e(R),a&&e(v),$(w),a&&e(E),a&&e(b),a&&e(mt),$(ea,a),a&&e(ht),$(U,a),a&&e(ft),a&&e(B),$(sa),a&&e(gt),a&&e(I),a&&e(ut),$(la,a),a&&e(_t),a&&e(P),a&&e(jt),$(oa,a),a&&e($t),a&&e(T),$(na),a&&e(vt),a&&e(W),a&&e(bt),$(ia,a),a&&e(qt),a&&e(A),a&&e(wt),$(ra,a),a&&e(Et),a&&e(J),a&&e(kt),$(pa,a),a&&e(yt),a&&e(q),a&&e(xt),a&&e(M),$(da),a&&e(It),a&&e(C),a&&e(Pt),$(ca,a),a&&e(At),a&&e(O),a&&e(Ct),$(ma,a),a&&e(Ot),a&&e(H),$(ha),a&&e(Dt),a&&e(V),a&&e(Ft),$(fa,a),a&&e(Lt),a&&e(D),a&&e(St),$(ga,a),a&&e(Nt),a&&e(Y),$(ua),a&&e(Bt),a&&e(Z),a&&e(Tt),$(_a,a),a&&e(Mt),a&&e(F),a&&e(Ht),$(ja,a)}}}const gl={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function ul(ct){return cl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bl extends il{constructor(h){super();rl(this,h,ul,fl,pl,{})}}export{bl as default,gl as metadata};
