import{S as Fu,i as Ru,s as Mu,e as l,k as d,w as h,t as r,M as Vu,c as o,d as a,m as c,a as n,x as m,h as i,b as f,G as s,g as p,y as _,q as g,o as v,B as $,v as zu}from"../chunks/vendor-hf-doc-builder.js";import{T as xs}from"../chunks/Tip-hf-doc-builder.js";import{I as S}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";import{C as Wl}from"../chunks/CodeBlockFw-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function Ju(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("Refer to the "),y=l("a"),b=r("Upload a dataset to the Hub"),q=r(" tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"Refer to the "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"Upload a dataset to the Hub"),x.forEach(a),q=i(j," tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),j.forEach(a),this.h()},h(){f(y,"href","./upload_dataset")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Uu(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("If you don\u2019t specify which data files to use, "),y=l("a"),b=r("load_dataset()"),q=r(" will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"If you don\u2019t specify which data files to use, "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"load_dataset()"),x.forEach(a),q=i(j," will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),j.forEach(a),this.h()},h(){f(y,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_dataset")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Bu(D){let u,k,y,b,q,w,j,x,tt,wt,J,at,jt,U,B,bt,A,M,_a,ga,V,va,$a,O,ya,wa;return{c(){u=l("p"),k=r("An object data type in "),y=l("a"),b=r("pandas.Series"),q=r(" doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=l("code"),j=r("0"),x=r(" or the Series only contains "),tt=l("code"),wt=r("None/NaN"),J=r(" objects, the type is set to "),at=l("code"),jt=r("null"),U=r(". Avoid potential errors by constructing an explicit schema with "),B=l("a"),bt=r("Features"),A=r(" using the "),M=l("code"),_a=r("from_dict"),ga=r(" or "),V=l("code"),va=r("from_pandas"),$a=r(" methods. See the "),O=l("a"),ya=r("troubleshoot"),wa=r(" section for more details on how to explicitly specify your own features."),this.h()},l(z){u=o(z,"P",{});var P=n(u);k=i(P,"An object data type in "),y=o(P,"A",{href:!0,rel:!0});var Ps=n(y);b=i(Ps,"pandas.Series"),Ps.forEach(a),q=i(P," doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=o(P,"CODE",{});var qt=n(w);j=i(qt,"0"),qt.forEach(a),x=i(P," or the Series only contains "),tt=o(P,"CODE",{});var As=n(tt);wt=i(As,"None/NaN"),As.forEach(a),J=i(P," objects, the type is set to "),at=o(P,"CODE",{});var Ss=n(at);jt=i(Ss,"null"),Ss.forEach(a),U=i(P,". Avoid potential errors by constructing an explicit schema with "),B=o(P,"A",{href:!0});var kt=n(B);bt=i(kt,"Features"),kt.forEach(a),A=i(P," using the "),M=o(P,"CODE",{});var Ds=n(M);_a=i(Ds,"from_dict"),Ds.forEach(a),ga=i(P," or "),V=o(P,"CODE",{});var ja=n(V);va=i(ja,"from_pandas"),ja.forEach(a),$a=i(P," methods. See the "),O=o(P,"A",{href:!0});var I=n(O);ya=i(I,"troubleshoot"),I.forEach(a),wa=i(P," section for more details on how to explicitly specify your own features."),P.forEach(a),this.h()},h(){f(y,"href","https://pandas.pydata.org/docs/reference/api/pandas.Series.html"),f(y,"rel","nofollow"),f(B,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.Features"),f(O,"href","./loading#specify-features")},m(z,P){p(z,u,P),s(u,k),s(u,y),s(y,b),s(u,q),s(u,w),s(w,j),s(u,x),s(u,tt),s(tt,wt),s(u,J),s(u,at),s(at,jt),s(u,U),s(u,B),s(B,bt),s(u,A),s(u,M),s(M,_a),s(u,ga),s(u,V),s(V,va),s(u,$a),s(u,O),s(O,ya),s(u,wa)},d(z){z&&a(u)}}}function Yu(D){let u,k,y,b;return{c(){u=l("p"),k=l("code"),y=r("pct1_dropremainder"),b=r(" rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100.")},l(q){u=o(q,"P",{});var w=n(u);k=o(w,"CODE",{});var j=n(k);y=i(j,"pct1_dropremainder"),j.forEach(a),b=i(w," rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100."),w.forEach(a)},m(q,w){p(q,u,w),s(u,k),s(k,y),s(u,b)},d(q){q&&a(u)}}}function Wu(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("Metrics will soon be deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at our newest library \u{1F917} "),y=l("a"),b=r("Evaluate"),q=r("! In addition to metrics, we\u2019ve also added more tools for evaluating models and datasets."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"Metrics will soon be deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at our newest library \u{1F917} "),y=o(j,"A",{href:!0,rel:!0});var x=n(y);b=i(x,"Evaluate"),x.forEach(a),q=i(j,"! In addition to metrics, we\u2019ve also added more tools for evaluating models and datasets."),j.forEach(a),this.h()},h(){f(y,"href","https://huggingface.co/docs/evaluate/index"),f(y,"rel","nofollow")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Gu(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("See the "),y=l("a"),b=r("Metrics"),q=r(" guide for more details on how to write your own metric loading script."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"See the "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"Metrics"),x.forEach(a),q=i(j," guide for more details on how to write your own metric loading script."),j.forEach(a),this.h()},h(){f(y,"href","./how_to_metrics#custom-metric-loading-script")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Qu(D){let u,k,y,b,q;return{c(){u=l("p"),k=r("Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=l("a"),b=r("Metric.compute()"),q=r(" gathers all the predictions and references from the nodes, and computes the final metric."),this.h()},l(w){u=o(w,"P",{});var j=n(u);k=i(j,"Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=o(j,"A",{href:!0});var x=n(y);b=i(x,"Metric.compute()"),x.forEach(a),q=i(j," gathers all the predictions and references from the nodes, and computes the final metric."),j.forEach(a),this.h()},h(){f(y,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.Metric.compute")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Ku(D){let u,k,y,b,q,w,j,x,tt,wt,J,at,jt,U,B,bt,A,M,_a,ga,V,va,$a,O,ya,wa,z,P,Ps,qt,As,Ss,kt,Ds,ja,I,Cr,Ts,Or,Lr,Ns,Hr,Fr,Is,Rr,Mr,Gl,Cs,Ql,st,Et,Ae,ba,Vr,Se,zr,Kl,Y,Jr,Os,Ur,Br,Ls,Yr,Wr,Xl,xt,Gr,qa,Qr,Kr,Zl,ka,to,Pt,Xr,De,Zr,ti,ao,Ea,so,At,eo,T,ai,Te,si,ei,Ne,li,oi,Ie,ni,ri,Ce,ii,pi,Oe,di,ci,lo,xa,oo,St,no,Dt,fi,Le,ui,hi,ro,Pa,io,Tt,mi,He,_i,gi,po,Aa,co,et,Nt,Fe,Sa,vi,Re,$i,fo,It,yi,Hs,wi,ji,uo,Ct,Me,bi,qi,Ve,ki,ho,Da,mo,lt,Ot,ze,Ta,Ei,Je,xi,_o,N,Pi,Ue,Ai,Si,Be,Di,Ti,Ye,Ni,Ii,We,Ci,Oi,Fs,Li,Hi,go,ot,Lt,Ge,Na,Fi,Qe,Ri,vo,Rs,Mi,$o,Ia,yo,Ms,Vi,wo,Ca,jo,Vs,zi,bo,Oa,qo,zs,Ji,ko,La,Eo,Js,Ui,xo,Ha,Po,nt,Ht,Ke,Fa,Bi,Xe,Yi,Ao,Ft,Wi,Us,Gi,Qi,So,Ra,Do,Bs,Ki,To,Ma,No,Rt,Xi,Ze,Zi,tp,Io,Va,Co,Ys,ap,Oo,za,Lo,Ws,sp,Ho,rt,Mt,tl,Ja,ep,al,lp,Fo,Gs,op,Ro,Qs,np,Mo,Ua,Vo,Ks,rp,zo,Ba,Jo,it,Vt,sl,Ya,ip,el,pp,Uo,zt,dp,Xs,cp,fp,Bo,pt,Jt,ll,Wa,up,ol,hp,Yo,Ut,mp,Zs,_p,gp,Wo,Ga,Go,dt,Bt,nl,Qa,vp,rl,$p,Qo,Yt,yp,te,wp,jp,Ko,Ka,Xo,Wt,Zo,ct,Gt,il,Xa,bp,pl,qp,tn,ae,kp,an,W,Ep,dl,xp,Pp,cl,Ap,Sp,sn,ft,Qt,fl,Za,Dp,ul,Tp,en,G,Np,se,Ip,Cp,ee,Op,Lp,ln,Q,Hp,hl,Fp,Rp,ml,Mp,Vp,on,ts,nn,Kt,zp,_l,Jp,Up,rn,as,pn,le,Bp,dn,ss,cn,oe,Yp,fn,es,un,ne,Wp,hn,ls,mn,ut,Xt,gl,os,Gp,vl,Qp,_n,re,Kp,gn,ns,vn,Zt,Xp,$l,Zp,td,$n,rs,yn,ta,wn,ie,jn,ht,aa,yl,is,ad,wl,sd,bn,pe,ed,qn,mt,sa,jl,ps,ld,bl,od,kn,L,nd,de,rd,id,ql,pd,dd,kl,cd,fd,En,ea,ud,ds,hd,md,xn,cs,Pn,_t,la,El,fs,_d,xl,gd,An,H,vd,ce,$d,yd,us,wd,jd,fe,bd,qd,Sn,oa,kd,ue,Ed,xd,Dn,hs,Tn,K,Pd,Pl,Ad,Sd,he,Dd,Td,Nn,ms,In,me,Nd,Cn,_s,On,gt,na,Al,gs,Id,Sl,Cd,Ln,ra,Hn,_e,Od,Fn,vs,Rn,ia,Mn,vt,pa,Dl,$s,Ld,Tl,Hd,Vn,X,Fd,Nl,Rd,Md,ge,Vd,zd,zn,ys,Jn,$t,da,Il,ws,Jd,Cl,Ud,Un,ve,Bd,Bn,$e,Yd,Yn,Z,Ol,js,Wd,Ll,Gd,Qd,Kd,Hl,yt,Xd,Fl,Zd,tc,Rl,ac,sc,ec,Ml,bs,lc,ye,oc,nc,Wn,qs,Gn,ca,Qn,fa,rc,Vl,ic,pc,Kn,ks,Xn;return w=new S({}),ba=new S({}),ka=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("lhoestq/demo1")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;lhoestq/demo1&quot;</span>)`}}),Ea=new E({props:{code:`dataset = load_dataset(
  "lhoestq/custom_squad",
  revision="main"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;lhoestq/custom_squad&quot;</span>,
<span class="hljs-meta">... </span>  revision=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),At=new xs({props:{$$slots:{default:[Ju]},$$scope:{ctx:D}}}),xa=new E({props:{code:`data_files = {"train": "train.csv", "test": "test.csv"}
dataset = load_dataset("namespace/your_dataset_name", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;train.csv&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;test.csv&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;namespace/your_dataset_name&quot;</span>, data_files=data_files)`}}),St=new xs({props:{warning:!0,$$slots:{default:[Uu]},$$scope:{ctx:D}}}),Pa=new E({props:{code:`from datasets import load_dataset
c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)`}}),Aa=new E({props:{code:`data_files = {"validation": "en/c4-validation.*.json.gz"}
c4_validation = load_dataset("allenai/c4", data_files=data_files, split="validation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;en/c4-validation.*.json.gz&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_validation = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;validation&quot;</span>)`}}),Sa=new S({}),Da=new E({props:{code:`dataset = load_dataset("path/to/local/loading_script/loading_script.py", split="train")
dataset = load_dataset("path/to/local/loading_script", split="train")  # equivalent because the file has the same name as the directory`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)  <span class="hljs-comment"># equivalent because the file has the same name as the directory</span>`}}),Ta=new S({}),Na=new S({}),Ia=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("csv", data_files="my_file.csv")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`}}),Ca=new E({props:{code:'dataset = load_dataset("csv", data_files=["my_file_1.csv", "my_file_2.csv", "my_file_3.csv"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=[<span class="hljs-string">&quot;my_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_file_2.csv&quot;</span>, <span class="hljs-string">&quot;my_file_3.csv&quot;</span>])'}}),Oa=new E({props:{code:'dataset = load_dataset("csv", data_files={"train": ["my_train_file_1.csv", "my_train_file_2.csv"], "test": "my_test_file.csv"})',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;my_train_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_train_file_2.csv&quot;</span>], <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.csv&quot;</span>})'}}),La=new E({props:{code:`base_url = "https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/"
dataset = load_dataset('csv', data_files={'train': base_url + 'train.csv', 'test': base_url + 'test.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: base_url + <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: base_url + <span class="hljs-string">&#x27;test.csv&#x27;</span>})`}}),Ha=new E({props:{code:`url = "https://domain.org/train_data.zip"
data_files = {"train": url}
dataset = load_dataset("csv", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;https://domain.org/train_data.zip&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: url}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=data_files)`}}),Fa=new S({}),Ra=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>)`}}),Ma=new E({props:{code:`{"a": 1, "b": 2.0, "c": "foo", "d": false}
{"a": 4, "b": -5.5, "c": null, "d": true}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-5.5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>`}}),Va=new E({props:{code:`
from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json", field="data")`,highlighted:`{<span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,
 <span class="hljs-string">&quot;data&quot;</span>: [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2.0</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>: false},
          {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;b&quot;</span>: -<span class="hljs-number">5.5</span>, <span class="hljs-string">&quot;c&quot;</span>: null, <span class="hljs-string">&quot;d&quot;</span>: true}]
}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),za=new E({props:{code:`base_url = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
dataset = load_dataset("json", data_files={"train": base_url + "train-v1.1.json", "validation": base_url + "dev-v1.1.json"}, field="data")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>, <span class="hljs-string">&quot;validation&quot;</span>: base_url + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>}, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),Ja=new S({}),Ua=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("parquet", data_files={'train': 'train.parquet', 'test': 'test.parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.parquet&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.parquet&#x27;</span>})`}}),Ba=new E({props:{code:`base_url = "https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/"
data_files = {"train": base_url + "wikipedia-train.parquet"}
wiki = load_dataset("parquet", data_files=data_files, split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;wikipedia-train.parquet&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Ya=new S({}),Wa=new S({}),Ga=new E({props:{code:`from datasets import Dataset
my_dict = {"a": [1, 2, 3]}
dataset = Dataset.from_dict(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_dict = {<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict(my_dict)`}}),Qa=new S({}),Ka=new E({props:{code:`from datasets import Dataset
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3]})
dataset = Dataset.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_pandas(df)`}}),Wt=new xs({props:{warning:!0,$$slots:{default:[Bu]},$$scope:{ctx:D}}}),Xa=new S({}),Za=new S({}),ts=new Wl({props:{group1:{id:"stringapi",code:'train_test_ds = datasets.load_dataset("bookcorpus", split="train+test")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train+test&quot;</span>)'},group2:{id:"readinstruction",code:`ri = datasets.ReadInstruction("train") + datasets.ReadInstruction("test")
train_test_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;test&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),as=new Wl({props:{group1:{id:"stringapi",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split="train[10:20]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[10:20]&quot;</span>)'},group2:{id:"readinstruction",code:`train_10_20_ds = datasets.load_dataset("bookcorpu"', split=datasets.ReadInstruction("train", from_=10, to=20, unit="abs"))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpu&quot;</span><span class="hljs-string">&#x27;, split=datasets.ReadInstruction(&quot;train&quot;, from_=10, to=20, unit=&quot;abs&quot;))</span>'}}}),ss=new Wl({props:{group1:{id:"stringapi",code:'train_10pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]&quot;</span>)'},group2:{id:"readinstruction",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", to=10, unit="%"))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))'}}}),es=new Wl({props:{group1:{id:"stringapi",code:'train_10_80pct_ds = datasets.load_dataset("bookcorpus", split="tr"in[:10%]+train[-80%:]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;tr&quot;</span><span class="hljs-keyword">in</span>[:<span class="hljs-number">10</span>%]+train[-<span class="hljs-number">80</span>%:]<span class="hljs-string">&quot;)</span>'},group2:{id:"readinstruction",code:`ri = (datasets.ReadInstruction("train", to=10, unit="%") + datasets.ReadInstruction("train", from_=-80, unit="%"))
train_10_80pct_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = (datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=-<span class="hljs-number">80</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),ls=new Wl({props:{group1:{id:"stringapi",code:`val_ds = datasets.load_dataset("bookcorpus", split=[f"train[{k}%:{k+10}%]" for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", split=[f"train[:{k}%]+train[{k+10}%:]" for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[<span class="hljs-subst">{k}</span>%:<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[:<span class="hljs-subst">{k}</span>%]+train[<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%:]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`},group2:{id:"readinstruction",code:`val_ds = datasets.load_dataset("bookcorpus", [datasets.ReadInstruction("train", from_=k, to=k+10, unit="%") for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", [(datasets.ReadInstruction("train", to=k, unit="%") + datasets.ReadInstruction("train", from_=k+10, unit="%")) for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [(datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=k, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>)) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}}),os=new S({}),ns=new E({props:{code:`train_50_52_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%]")
train_52_54_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%]")`,highlighted:`<span class="hljs-comment"># 19 records, from 500 (included) to 519 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%]&quot;</span>)
<span class="hljs-comment"># 20 records, from 519 (included) to 539 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%]&quot;</span>)`}}),rs=new E({props:{code:`train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", from_=50, to=52, unit="%", rounding="pct1_dropremainder"))
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train",from_=52, to=54, unit="%", rounding="pct1_dropremainder"))
train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%](pct1_dropremainder)")
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%](pct1_dropremainder)")`,highlighted:`<span class="hljs-comment"># 18 records, from 450 (included) to 468 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=<span class="hljs-number">50</span>, to=<span class="hljs-number">52</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># 18 records, from 468 (included) to 486 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>,from_=<span class="hljs-number">52</span>, to=<span class="hljs-number">54</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># Or equivalently:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%](pct1_dropremainder)&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%](pct1_dropremainder)&quot;</span>)`}}),ta=new xs({props:{warning:!0,$$slots:{default:[Yu]},$$scope:{ctx:D}}}),is=new S({}),ps=new S({}),cs=new E({props:{code:'dataset = load_dataset("matinf", "summarization")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;matinf&quot;</span>, <span class="hljs-string">&quot;summarization&quot;</span>)
Downloading <span class="hljs-keyword">and</span> preparing dataset matinf/summarization (download: Unknown size, generated: <span class="hljs-number">246.89</span> MiB, post-processed: Unknown size, total: <span class="hljs-number">246.89</span> MiB) to /root/.cache/huggingface/datasets/matinf/summarization/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/82eee5e71c3ceaf20d909bca36ff237452b4e4ab195d3be7ee1c78b53e6f540e...
AssertionError: The dataset matinf <span class="hljs-keyword">with</span> config summarization requires manual data. 
Please follow the manual download instructions: To use MATINF you have to download it manually. Please fill this google form (https://forms.gle/nkH4LVE4iNQeDzsc9). You will receive a download link <span class="hljs-keyword">and</span> a password once you complete the form. Please extract <span class="hljs-built_in">all</span> files <span class="hljs-keyword">in</span> one folder <span class="hljs-keyword">and</span> load the dataset <span class="hljs-keyword">with</span>: *datasets.load_dataset(<span class="hljs-string">&#x27;matinf&#x27;</span>, data_dir=<span class="hljs-string">&#x27;path/to/folder/folder_name&#x27;</span>)*. 
Manual data can be loaded <span class="hljs-keyword">with</span> \`datasets.load_dataset(matinf, data_dir=<span class="hljs-string">&#x27;&lt;path/to/manual/data&gt;&#x27;</span>) `}}),fs=new S({}),hs=new E({props:{code:`class_names = ["sadness", "joy", "love", "anger", "fear", "surprise"]
emotion_features = Features({'text': Value('string'), 'label': ClassLabel(names=class_names)})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>class_names = [<span class="hljs-string">&quot;sadness&quot;</span>, <span class="hljs-string">&quot;joy&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;anger&quot;</span>, <span class="hljs-string">&quot;fear&quot;</span>, <span class="hljs-string">&quot;surprise&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>emotion_features = Features({<span class="hljs-string">&#x27;text&#x27;</span>: Value(<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=class_names)})`}}),ms=new E({props:{code:"dataset = load_dataset('csv', data_files=file_dict, delimiter=';', column_names=['text', 'label'], features=emotion_features)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=file_dict, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>, column_names=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>], features=emotion_features)'}}),_s=new E({props:{code:"dataset['train'].features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].features
{<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">6</span>, names=[<span class="hljs-string">&#x27;sadness&#x27;</span>, <span class="hljs-string">&#x27;joy&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;anger&#x27;</span>, <span class="hljs-string">&#x27;fear&#x27;</span>, <span class="hljs-string">&#x27;surprise&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),gs=new S({}),ra=new xs({props:{warning:!0,$$slots:{default:[Wu]},$$scope:{ctx:D}}}),vs=new E({props:{code:`from datasets import load_metric
metric = load_metric('PATH/TO/MY/METRIC/SCRIPT')

# Example of typical usage
for batch in dataset:
    inputs, references = batch
    predictions = model(inputs)
    metric.add_batch(predictions=predictions, references=references)
score = metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;PATH/TO/MY/METRIC/SCRIPT&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Example of typical usage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> dataset:
<span class="hljs-meta">... </span>    inputs, references = batch
<span class="hljs-meta">... </span>    predictions = model(inputs)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=references)
<span class="hljs-meta">&gt;&gt;&gt; </span>score = metric.compute()`}}),ia=new xs({props:{$$slots:{default:[Gu]},$$scope:{ctx:D}}}),$s=new S({}),ys=new E({props:{code:`from datasets import load_metric
metric = load_metric('bleurt', name='bleurt-base-128')
metric = load_metric('bleurt', name='bleurt-base-512')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-128&#x27;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-512&#x27;</span>)</span>`}}),ws=new S({}),qs=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=rank)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=rank)`}}),ca=new xs({props:{$$slots:{default:[Qu]},$$scope:{ctx:D}}}),ks=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=process_id, experiment_id="My_experiment_10")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=process_id, experiment_id=<span class="hljs-string">&quot;My_experiment_10&quot;</span>)`}}),{c(){u=l("meta"),k=d(),y=l("h1"),b=l("a"),q=l("span"),h(w.$$.fragment),j=d(),x=l("span"),tt=r("Load"),wt=d(),J=l("p"),at=r("Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),jt=d(),U=l("p"),B=r("This guide will show you how to load a dataset from:"),bt=d(),A=l("ul"),M=l("li"),_a=r("The Hub without a dataset loading script"),ga=d(),V=l("li"),va=r("Local loading script"),$a=d(),O=l("li"),ya=r("Local files"),wa=d(),z=l("li"),P=r("In-memory data"),Ps=d(),qt=l("li"),As=r("Offline"),Ss=d(),kt=l("li"),Ds=r("A specific slice of a split"),ja=d(),I=l("p"),Cr=r("For more details specific to loading other dataset modalities, take a look at the "),Ts=l("a"),Or=r("load audio dataset guide"),Lr=r(", the "),Ns=l("a"),Hr=r("load image dataset guide"),Fr=r(", or the "),Is=l("a"),Rr=r("load text dataset guide"),Mr=r("."),Gl=d(),Cs=l("a"),Ql=d(),st=l("h2"),Et=l("a"),Ae=l("span"),h(ba.$$.fragment),Vr=d(),Se=l("span"),zr=r("Hugging Face Hub"),Kl=d(),Y=l("p"),Jr=r("Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Os=l("a"),Ur=r("creating a dataset repository"),Br=r(" and upload your data files. Now you can use the "),Ls=l("a"),Yr=r("load_dataset()"),Wr=r(" function to load the dataset."),Xl=d(),xt=l("p"),Gr=r("For example, try loading the files from this "),qa=l("a"),Qr=r("demo repository"),Kr=r(" by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),Zl=d(),h(ka.$$.fragment),to=d(),Pt=l("p"),Xr=r("Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),De=l("code"),Zr=r("revision"),ti=r(" parameter to specify the dataset version you want to load:"),ao=d(),h(Ea.$$.fragment),so=d(),h(At.$$.fragment),eo=d(),T=l("p"),ai=r("A dataset without a loading script by default loads all the data into the "),Te=l("code"),si=r("train"),ei=r(" split. Use the "),Ne=l("code"),li=r("data_files"),oi=r(" parameter to map data files to splits like "),Ie=l("code"),ni=r("train"),ri=r(", "),Ce=l("code"),ii=r("validation"),pi=r(" and "),Oe=l("code"),di=r("test"),ci=r(":"),lo=d(),h(xa.$$.fragment),oo=d(),h(St.$$.fragment),no=d(),Dt=l("p"),fi=r("You can also load a specific subset of the files with the "),Le=l("code"),ui=r("data_files"),hi=r(" parameter. The example below only loads files that match the grep pattern:"),ro=d(),h(Pa.$$.fragment),io=d(),Tt=l("p"),mi=r("The "),He=l("code"),_i=r("split"),gi=r(" parameter can also map a data file to a specific split:"),po=d(),h(Aa.$$.fragment),co=d(),et=l("h2"),Nt=l("a"),Fe=l("span"),h(Sa.$$.fragment),vi=d(),Re=l("span"),$i=r("Local loading script"),fo=d(),It=l("p"),yi=r("You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),Hs=l("a"),wi=r("load_dataset()"),ji=r(":"),uo=d(),Ct=l("ul"),Me=l("li"),bi=r("The local path to the loading script file."),qi=d(),Ve=l("li"),ki=r("The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),ho=d(),h(Da.$$.fragment),mo=d(),lt=l("h2"),Ot=l("a"),ze=l("span"),h(Ta.$$.fragment),Ei=d(),Je=l("span"),xi=r("Local and remote files"),_o=d(),N=l("p"),Pi=r("Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),Ue=l("code"),Ai=r("csv"),Si=r(", "),Be=l("code"),Di=r("json"),Ti=r(", "),Ye=l("code"),Ni=r("txt"),Ii=r(" or "),We=l("code"),Ci=r("parquet"),Oi=r(" file. The "),Fs=l("a"),Li=r("load_dataset()"),Hi=r(" function can load each of these file types."),go=d(),ot=l("h3"),Lt=l("a"),Ge=l("span"),h(Na.$$.fragment),Fi=d(),Qe=l("span"),Ri=r("CSV"),vo=d(),Rs=l("p"),Mi=r("\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),$o=d(),h(Ia.$$.fragment),yo=d(),Ms=l("p"),Vi=r("If you have more than one CSV file:"),wo=d(),h(Ca.$$.fragment),jo=d(),Vs=l("p"),zi=r("You can also map the training and test splits to specific CSV files:"),bo=d(),h(Oa.$$.fragment),qo=d(),zs=l("p"),Ji=r("To load remote CSV files via HTTP, pass the URLs instead:"),ko=d(),h(La.$$.fragment),Eo=d(),Js=l("p"),Ui=r("To load zipped CSV files:"),xo=d(),h(Ha.$$.fragment),Po=d(),nt=l("h3"),Ht=l("a"),Ke=l("span"),h(Fa.$$.fragment),Bi=d(),Xe=l("span"),Yi=r("JSON"),Ao=d(),Ft=l("p"),Wi=r("JSON files are loaded directly with "),Us=l("a"),Gi=r("load_dataset()"),Qi=r(" as shown below:"),So=d(),h(Ra.$$.fragment),Do=d(),Bs=l("p"),Ki=r("JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),To=d(),h(Ma.$$.fragment),No=d(),Rt=l("p"),Xi=r("Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),Ze=l("code"),Zi=r("field"),tp=r(" argument as shown in the following:"),Io=d(),h(Va.$$.fragment),Co=d(),Ys=l("p"),ap=r("To load remote JSON files via HTTP, pass the URLs instead:"),Oo=d(),h(za.$$.fragment),Lo=d(),Ws=l("p"),sp=r("While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),Ho=d(),rt=l("h3"),Mt=l("a"),tl=l("span"),h(Ja.$$.fragment),ep=d(),al=l("span"),lp=r("Parquet"),Fo=d(),Gs=l("p"),op=r("Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),Ro=d(),Qs=l("p"),np=r("To load a Parquet file:"),Mo=d(),h(Ua.$$.fragment),Vo=d(),Ks=l("p"),rp=r("To load remote Parquet files via HTTP, pass the URLs instead:"),zo=d(),h(Ba.$$.fragment),Jo=d(),it=l("h2"),Vt=l("a"),sl=l("span"),h(Ya.$$.fragment),ip=d(),el=l("span"),pp=r("In-memory data"),Uo=d(),zt=l("p"),dp=r("\u{1F917} Datasets will also allow you to create a "),Xs=l("a"),cp=r("Dataset"),fp=r(" directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),Bo=d(),pt=l("h3"),Jt=l("a"),ll=l("span"),h(Wa.$$.fragment),up=d(),ol=l("span"),hp=r("Python dictionary"),Yo=d(),Ut=l("p"),mp=r("Load Python dictionaries with "),Zs=l("a"),_p=r("from_dict()"),gp=r(":"),Wo=d(),h(Ga.$$.fragment),Go=d(),dt=l("h3"),Bt=l("a"),nl=l("span"),h(Qa.$$.fragment),vp=d(),rl=l("span"),$p=r("Pandas DataFrame"),Qo=d(),Yt=l("p"),yp=r("Load Pandas DataFrames with "),te=l("a"),wp=r("from_pandas()"),jp=r(":"),Ko=d(),h(Ka.$$.fragment),Xo=d(),h(Wt.$$.fragment),Zo=d(),ct=l("h2"),Gt=l("a"),il=l("span"),h(Xa.$$.fragment),bp=d(),pl=l("span"),qp=r("Offline"),tn=d(),ae=l("p"),kp=r("Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),an=d(),W=l("p"),Ep=r("If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),dl=l("code"),xp=r("HF_DATASETS_OFFLINE"),Pp=r(" to "),cl=l("code"),Ap=r("1"),Sp=r(" to enable full offline mode."),sn=d(),ft=l("h2"),Qt=l("a"),fl=l("span"),h(Za.$$.fragment),Dp=d(),ul=l("span"),Tp=r("Slice splits"),en=d(),G=l("p"),Np=r("You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),se=l("a"),Ip=r("ReadInstruction"),Cp=r(" API. Strings are more compact and readable for simple cases, while "),ee=l("a"),Op=r("ReadInstruction"),Lp=r(" is easier to use with variable slicing parameters."),ln=d(),Q=l("p"),Hp=r("Concatenate a "),hl=l("code"),Fp=r("train"),Rp=r(" and "),ml=l("code"),Mp=r("test"),Vp=r(" split by:"),on=d(),h(ts.$$.fragment),nn=d(),Kt=l("p"),zp=r("Select specific rows of the "),_l=l("code"),Jp=r("train"),Up=r(" split:"),rn=d(),h(as.$$.fragment),pn=d(),le=l("p"),Bp=r("Or select a percentage of a split with:"),dn=d(),h(ss.$$.fragment),cn=d(),oe=l("p"),Yp=r("Select a combination of percentages from each split:"),fn=d(),h(es.$$.fragment),un=d(),ne=l("p"),Wp=r("Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),hn=d(),h(ls.$$.fragment),mn=d(),ut=l("h3"),Xt=l("a"),gl=l("span"),h(os.$$.fragment),Gp=d(),vl=l("span"),Qp=r("Percent slicing and rounding"),_n=d(),re=l("p"),Kp=r("The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),gn=d(),h(ns.$$.fragment),vn=d(),Zt=l("p"),Xp=r("If you want equal sized splits, use "),$l=l("code"),Zp=r("pct1_dropremainder"),td=r(" rounding instead. This treats the specified percentage boundaries as multiples of 1%."),$n=d(),h(rs.$$.fragment),yn=d(),h(ta.$$.fragment),wn=d(),ie=l("a"),jn=d(),ht=l("h2"),aa=l("a"),yl=l("span"),h(is.$$.fragment),ad=d(),wl=l("span"),sd=r("Troubleshooting"),bn=d(),pe=l("p"),ed=r("Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),qn=d(),mt=l("h3"),sa=l("a"),jl=l("span"),h(ps.$$.fragment),ld=d(),bl=l("span"),od=r("Manual download"),kn=d(),L=l("p"),nd=r("Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),de=l("a"),rd=r("load_dataset()"),id=r(" to throw an "),ql=l("code"),pd=r("AssertionError"),dd=r(". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),kl=l("code"),cd=r("data_dir"),fd=r(" argument to specify the path to the files you just downloaded."),En=d(),ea=l("p"),ud=r("For example, if you try to download a configuration from the "),ds=l("a"),hd=r("MATINF"),md=r(" dataset:"),xn=d(),h(cs.$$.fragment),Pn=d(),_t=l("h3"),la=l("a"),El=l("span"),h(fs.$$.fragment),_d=d(),xl=l("span"),gd=r("Specify features"),An=d(),H=l("p"),vd=r("When you create a dataset from local files, the "),ce=l("a"),$d=r("Features"),yd=r(" are automatically inferred by "),us=l("a"),wd=r("Apache Arrow"),jd=r(". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),fe=l("a"),bd=r("ClassLabel"),qd=r(" feature."),Sn=d(),oa=l("p"),kd=r("Start by defining your own labels with the "),ue=l("a"),Ed=r("Features"),xd=r(" class:"),Dn=d(),h(hs.$$.fragment),Tn=d(),K=l("p"),Pd=r("Next, specify the "),Pl=l("code"),Ad=r("features"),Sd=r(" parameter in "),he=l("a"),Dd=r("load_dataset()"),Td=r(" with the features you just created:"),Nn=d(),h(ms.$$.fragment),In=d(),me=l("p"),Nd=r("Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Cn=d(),h(_s.$$.fragment),On=d(),gt=l("h2"),na=l("a"),Al=l("span"),h(gs.$$.fragment),Id=d(),Sl=l("span"),Cd=r("Metrics"),Ln=d(),h(ra.$$.fragment),Hn=d(),_e=l("p"),Od=r("When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),Fn=d(),h(vs.$$.fragment),Rn=d(),h(ia.$$.fragment),Mn=d(),vt=l("h3"),pa=l("a"),Dl=l("span"),h($s.$$.fragment),Ld=d(),Tl=l("span"),Hd=r("Load configurations"),Vn=d(),X=l("p"),Fd=r("It is possible for a metric to have different configurations. The configurations are stored in the "),Nl=l("code"),Rd=r("config_name"),Md=r(" parameter in "),ge=l("a"),Vd=r("MetricInfo"),zd=r(" attribute. When you load a metric, provide the configuration name as shown in the following:"),zn=d(),h(ys.$$.fragment),Jn=d(),$t=l("h3"),da=l("a"),Il=l("span"),h(ws.$$.fragment),Jd=d(),Cl=l("span"),Ud=r("Distributed setup"),Un=d(),ve=l("p"),Bd=r("When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),Bn=d(),$e=l("p"),Yd=r("For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),Yn=d(),Z=l("ol"),Ol=l("li"),js=l("p"),Wd=r("Define the total number of processes with the "),Ll=l("code"),Gd=r("num_process"),Qd=r(" argument."),Kd=d(),Hl=l("li"),yt=l("p"),Xd=r("Set the process "),Fl=l("code"),Zd=r("rank"),tc=r(" as an integer between zero and "),Rl=l("code"),ac=r("num_process - 1"),sc=r("."),ec=d(),Ml=l("li"),bs=l("p"),lc=r("Load your metric with "),ye=l("a"),oc=r("load_metric()"),nc=r(" with these arguments:"),Wn=d(),h(qs.$$.fragment),Gn=d(),h(ca.$$.fragment),Qn=d(),fa=l("p"),rc=r("In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Vl=l("code"),ic=r("experiment_id"),pc=r(" to distinguish the separate evaluations:"),Kn=d(),h(ks.$$.fragment),this.h()},l(t){const e=Vu('[data-svelte="svelte-1phssyn"]',document.head);u=o(e,"META",{name:!0,content:!0}),e.forEach(a),k=c(t),y=o(t,"H1",{class:!0});var Es=n(y);b=o(Es,"A",{id:!0,class:!0,href:!0});var zl=n(b);q=o(zl,"SPAN",{});var Jl=n(q);m(w.$$.fragment,Jl),Jl.forEach(a),zl.forEach(a),j=c(Es),x=o(Es,"SPAN",{});var Ul=n(x);tt=i(Ul,"Load"),Ul.forEach(a),Es.forEach(a),wt=c(t),J=o(t,"P",{});var Bl=n(J);at=i(Bl,"Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),Bl.forEach(a),jt=c(t),U=o(t,"P",{});var Yl=n(U);B=i(Yl,"This guide will show you how to load a dataset from:"),Yl.forEach(a),bt=c(t),A=o(t,"UL",{});var C=n(A);M=o(C,"LI",{});var dc=n(M);_a=i(dc,"The Hub without a dataset loading script"),dc.forEach(a),ga=c(C),V=o(C,"LI",{});var cc=n(V);va=i(cc,"Local loading script"),cc.forEach(a),$a=c(C),O=o(C,"LI",{});var fc=n(O);ya=i(fc,"Local files"),fc.forEach(a),wa=c(C),z=o(C,"LI",{});var uc=n(z);P=i(uc,"In-memory data"),uc.forEach(a),Ps=c(C),qt=o(C,"LI",{});var hc=n(qt);As=i(hc,"Offline"),hc.forEach(a),Ss=c(C),kt=o(C,"LI",{});var mc=n(kt);Ds=i(mc,"A specific slice of a split"),mc.forEach(a),C.forEach(a),ja=c(t),I=o(t,"P",{});var ua=n(I);Cr=i(ua,"For more details specific to loading other dataset modalities, take a look at the "),Ts=o(ua,"A",{href:!0});var _c=n(Ts);Or=i(_c,"load audio dataset guide"),_c.forEach(a),Lr=i(ua,", the "),Ns=o(ua,"A",{href:!0});var gc=n(Ns);Hr=i(gc,"load image dataset guide"),gc.forEach(a),Fr=i(ua,", or the "),Is=o(ua,"A",{href:!0});var vc=n(Is);Rr=i(vc,"load text dataset guide"),vc.forEach(a),Mr=i(ua,"."),ua.forEach(a),Gl=c(t),Cs=o(t,"A",{id:!0}),n(Cs).forEach(a),Ql=c(t),st=o(t,"H2",{class:!0});var Zn=n(st);Et=o(Zn,"A",{id:!0,class:!0,href:!0});var $c=n(Et);Ae=o($c,"SPAN",{});var yc=n(Ae);m(ba.$$.fragment,yc),yc.forEach(a),$c.forEach(a),Vr=c(Zn),Se=o(Zn,"SPAN",{});var wc=n(Se);zr=i(wc,"Hugging Face Hub"),wc.forEach(a),Zn.forEach(a),Kl=c(t),Y=o(t,"P",{});var we=n(Y);Jr=i(we,"Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Os=o(we,"A",{href:!0});var jc=n(Os);Ur=i(jc,"creating a dataset repository"),jc.forEach(a),Br=i(we," and upload your data files. Now you can use the "),Ls=o(we,"A",{href:!0});var bc=n(Ls);Yr=i(bc,"load_dataset()"),bc.forEach(a),Wr=i(we," function to load the dataset."),we.forEach(a),Xl=c(t),xt=o(t,"P",{});var tr=n(xt);Gr=i(tr,"For example, try loading the files from this "),qa=o(tr,"A",{href:!0,rel:!0});var qc=n(qa);Qr=i(qc,"demo repository"),qc.forEach(a),Kr=i(tr," by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),tr.forEach(a),Zl=c(t),m(ka.$$.fragment,t),to=c(t),Pt=o(t,"P",{});var ar=n(Pt);Xr=i(ar,"Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),De=o(ar,"CODE",{});var kc=n(De);Zr=i(kc,"revision"),kc.forEach(a),ti=i(ar," parameter to specify the dataset version you want to load:"),ar.forEach(a),ao=c(t),m(Ea.$$.fragment,t),so=c(t),m(At.$$.fragment,t),eo=c(t),T=o(t,"P",{});var F=n(T);ai=i(F,"A dataset without a loading script by default loads all the data into the "),Te=o(F,"CODE",{});var Ec=n(Te);si=i(Ec,"train"),Ec.forEach(a),ei=i(F," split. Use the "),Ne=o(F,"CODE",{});var xc=n(Ne);li=i(xc,"data_files"),xc.forEach(a),oi=i(F," parameter to map data files to splits like "),Ie=o(F,"CODE",{});var Pc=n(Ie);ni=i(Pc,"train"),Pc.forEach(a),ri=i(F,", "),Ce=o(F,"CODE",{});var Ac=n(Ce);ii=i(Ac,"validation"),Ac.forEach(a),pi=i(F," and "),Oe=o(F,"CODE",{});var Sc=n(Oe);di=i(Sc,"test"),Sc.forEach(a),ci=i(F,":"),F.forEach(a),lo=c(t),m(xa.$$.fragment,t),oo=c(t),m(St.$$.fragment,t),no=c(t),Dt=o(t,"P",{});var sr=n(Dt);fi=i(sr,"You can also load a specific subset of the files with the "),Le=o(sr,"CODE",{});var Dc=n(Le);ui=i(Dc,"data_files"),Dc.forEach(a),hi=i(sr," parameter. The example below only loads files that match the grep pattern:"),sr.forEach(a),ro=c(t),m(Pa.$$.fragment,t),io=c(t),Tt=o(t,"P",{});var er=n(Tt);mi=i(er,"The "),He=o(er,"CODE",{});var Tc=n(He);_i=i(Tc,"split"),Tc.forEach(a),gi=i(er," parameter can also map a data file to a specific split:"),er.forEach(a),po=c(t),m(Aa.$$.fragment,t),co=c(t),et=o(t,"H2",{class:!0});var lr=n(et);Nt=o(lr,"A",{id:!0,class:!0,href:!0});var Nc=n(Nt);Fe=o(Nc,"SPAN",{});var Ic=n(Fe);m(Sa.$$.fragment,Ic),Ic.forEach(a),Nc.forEach(a),vi=c(lr),Re=o(lr,"SPAN",{});var Cc=n(Re);$i=i(Cc,"Local loading script"),Cc.forEach(a),lr.forEach(a),fo=c(t),It=o(t,"P",{});var or=n(It);yi=i(or,"You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),Hs=o(or,"A",{href:!0});var Oc=n(Hs);wi=i(Oc,"load_dataset()"),Oc.forEach(a),ji=i(or,":"),or.forEach(a),uo=c(t),Ct=o(t,"UL",{});var nr=n(Ct);Me=o(nr,"LI",{});var Lc=n(Me);bi=i(Lc,"The local path to the loading script file."),Lc.forEach(a),qi=c(nr),Ve=o(nr,"LI",{});var Hc=n(Ve);ki=i(Hc,"The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),Hc.forEach(a),nr.forEach(a),ho=c(t),m(Da.$$.fragment,t),mo=c(t),lt=o(t,"H2",{class:!0});var rr=n(lt);Ot=o(rr,"A",{id:!0,class:!0,href:!0});var Fc=n(Ot);ze=o(Fc,"SPAN",{});var Rc=n(ze);m(Ta.$$.fragment,Rc),Rc.forEach(a),Fc.forEach(a),Ei=c(rr),Je=o(rr,"SPAN",{});var Mc=n(Je);xi=i(Mc,"Local and remote files"),Mc.forEach(a),rr.forEach(a),_o=c(t),N=o(t,"P",{});var R=n(N);Pi=i(R,"Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),Ue=o(R,"CODE",{});var Vc=n(Ue);Ai=i(Vc,"csv"),Vc.forEach(a),Si=i(R,", "),Be=o(R,"CODE",{});var zc=n(Be);Di=i(zc,"json"),zc.forEach(a),Ti=i(R,", "),Ye=o(R,"CODE",{});var Jc=n(Ye);Ni=i(Jc,"txt"),Jc.forEach(a),Ii=i(R," or "),We=o(R,"CODE",{});var Uc=n(We);Ci=i(Uc,"parquet"),Uc.forEach(a),Oi=i(R," file. The "),Fs=o(R,"A",{href:!0});var Bc=n(Fs);Li=i(Bc,"load_dataset()"),Bc.forEach(a),Hi=i(R," function can load each of these file types."),R.forEach(a),go=c(t),ot=o(t,"H3",{class:!0});var ir=n(ot);Lt=o(ir,"A",{id:!0,class:!0,href:!0});var Yc=n(Lt);Ge=o(Yc,"SPAN",{});var Wc=n(Ge);m(Na.$$.fragment,Wc),Wc.forEach(a),Yc.forEach(a),Fi=c(ir),Qe=o(ir,"SPAN",{});var Gc=n(Qe);Ri=i(Gc,"CSV"),Gc.forEach(a),ir.forEach(a),vo=c(t),Rs=o(t,"P",{});var Qc=n(Rs);Mi=i(Qc,"\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),Qc.forEach(a),$o=c(t),m(Ia.$$.fragment,t),yo=c(t),Ms=o(t,"P",{});var Kc=n(Ms);Vi=i(Kc,"If you have more than one CSV file:"),Kc.forEach(a),wo=c(t),m(Ca.$$.fragment,t),jo=c(t),Vs=o(t,"P",{});var Xc=n(Vs);zi=i(Xc,"You can also map the training and test splits to specific CSV files:"),Xc.forEach(a),bo=c(t),m(Oa.$$.fragment,t),qo=c(t),zs=o(t,"P",{});var Zc=n(zs);Ji=i(Zc,"To load remote CSV files via HTTP, pass the URLs instead:"),Zc.forEach(a),ko=c(t),m(La.$$.fragment,t),Eo=c(t),Js=o(t,"P",{});var tf=n(Js);Ui=i(tf,"To load zipped CSV files:"),tf.forEach(a),xo=c(t),m(Ha.$$.fragment,t),Po=c(t),nt=o(t,"H3",{class:!0});var pr=n(nt);Ht=o(pr,"A",{id:!0,class:!0,href:!0});var af=n(Ht);Ke=o(af,"SPAN",{});var sf=n(Ke);m(Fa.$$.fragment,sf),sf.forEach(a),af.forEach(a),Bi=c(pr),Xe=o(pr,"SPAN",{});var ef=n(Xe);Yi=i(ef,"JSON"),ef.forEach(a),pr.forEach(a),Ao=c(t),Ft=o(t,"P",{});var dr=n(Ft);Wi=i(dr,"JSON files are loaded directly with "),Us=o(dr,"A",{href:!0});var lf=n(Us);Gi=i(lf,"load_dataset()"),lf.forEach(a),Qi=i(dr," as shown below:"),dr.forEach(a),So=c(t),m(Ra.$$.fragment,t),Do=c(t),Bs=o(t,"P",{});var of=n(Bs);Ki=i(of,"JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),of.forEach(a),To=c(t),m(Ma.$$.fragment,t),No=c(t),Rt=o(t,"P",{});var cr=n(Rt);Xi=i(cr,"Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),Ze=o(cr,"CODE",{});var nf=n(Ze);Zi=i(nf,"field"),nf.forEach(a),tp=i(cr," argument as shown in the following:"),cr.forEach(a),Io=c(t),m(Va.$$.fragment,t),Co=c(t),Ys=o(t,"P",{});var rf=n(Ys);ap=i(rf,"To load remote JSON files via HTTP, pass the URLs instead:"),rf.forEach(a),Oo=c(t),m(za.$$.fragment,t),Lo=c(t),Ws=o(t,"P",{});var pf=n(Ws);sp=i(pf,"While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),pf.forEach(a),Ho=c(t),rt=o(t,"H3",{class:!0});var fr=n(rt);Mt=o(fr,"A",{id:!0,class:!0,href:!0});var df=n(Mt);tl=o(df,"SPAN",{});var cf=n(tl);m(Ja.$$.fragment,cf),cf.forEach(a),df.forEach(a),ep=c(fr),al=o(fr,"SPAN",{});var ff=n(al);lp=i(ff,"Parquet"),ff.forEach(a),fr.forEach(a),Fo=c(t),Gs=o(t,"P",{});var uf=n(Gs);op=i(uf,"Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),uf.forEach(a),Ro=c(t),Qs=o(t,"P",{});var hf=n(Qs);np=i(hf,"To load a Parquet file:"),hf.forEach(a),Mo=c(t),m(Ua.$$.fragment,t),Vo=c(t),Ks=o(t,"P",{});var mf=n(Ks);rp=i(mf,"To load remote Parquet files via HTTP, pass the URLs instead:"),mf.forEach(a),zo=c(t),m(Ba.$$.fragment,t),Jo=c(t),it=o(t,"H2",{class:!0});var ur=n(it);Vt=o(ur,"A",{id:!0,class:!0,href:!0});var _f=n(Vt);sl=o(_f,"SPAN",{});var gf=n(sl);m(Ya.$$.fragment,gf),gf.forEach(a),_f.forEach(a),ip=c(ur),el=o(ur,"SPAN",{});var vf=n(el);pp=i(vf,"In-memory data"),vf.forEach(a),ur.forEach(a),Uo=c(t),zt=o(t,"P",{});var hr=n(zt);dp=i(hr,"\u{1F917} Datasets will also allow you to create a "),Xs=o(hr,"A",{href:!0});var $f=n(Xs);cp=i($f,"Dataset"),$f.forEach(a),fp=i(hr," directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),hr.forEach(a),Bo=c(t),pt=o(t,"H3",{class:!0});var mr=n(pt);Jt=o(mr,"A",{id:!0,class:!0,href:!0});var yf=n(Jt);ll=o(yf,"SPAN",{});var wf=n(ll);m(Wa.$$.fragment,wf),wf.forEach(a),yf.forEach(a),up=c(mr),ol=o(mr,"SPAN",{});var jf=n(ol);hp=i(jf,"Python dictionary"),jf.forEach(a),mr.forEach(a),Yo=c(t),Ut=o(t,"P",{});var _r=n(Ut);mp=i(_r,"Load Python dictionaries with "),Zs=o(_r,"A",{href:!0});var bf=n(Zs);_p=i(bf,"from_dict()"),bf.forEach(a),gp=i(_r,":"),_r.forEach(a),Wo=c(t),m(Ga.$$.fragment,t),Go=c(t),dt=o(t,"H3",{class:!0});var gr=n(dt);Bt=o(gr,"A",{id:!0,class:!0,href:!0});var qf=n(Bt);nl=o(qf,"SPAN",{});var kf=n(nl);m(Qa.$$.fragment,kf),kf.forEach(a),qf.forEach(a),vp=c(gr),rl=o(gr,"SPAN",{});var Ef=n(rl);$p=i(Ef,"Pandas DataFrame"),Ef.forEach(a),gr.forEach(a),Qo=c(t),Yt=o(t,"P",{});var vr=n(Yt);yp=i(vr,"Load Pandas DataFrames with "),te=o(vr,"A",{href:!0});var xf=n(te);wp=i(xf,"from_pandas()"),xf.forEach(a),jp=i(vr,":"),vr.forEach(a),Ko=c(t),m(Ka.$$.fragment,t),Xo=c(t),m(Wt.$$.fragment,t),Zo=c(t),ct=o(t,"H2",{class:!0});var $r=n(ct);Gt=o($r,"A",{id:!0,class:!0,href:!0});var Pf=n(Gt);il=o(Pf,"SPAN",{});var Af=n(il);m(Xa.$$.fragment,Af),Af.forEach(a),Pf.forEach(a),bp=c($r),pl=o($r,"SPAN",{});var Sf=n(pl);qp=i(Sf,"Offline"),Sf.forEach(a),$r.forEach(a),tn=c(t),ae=o(t,"P",{});var Df=n(ae);kp=i(Df,"Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),Df.forEach(a),an=c(t),W=o(t,"P",{});var je=n(W);Ep=i(je,"If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),dl=o(je,"CODE",{});var Tf=n(dl);xp=i(Tf,"HF_DATASETS_OFFLINE"),Tf.forEach(a),Pp=i(je," to "),cl=o(je,"CODE",{});var Nf=n(cl);Ap=i(Nf,"1"),Nf.forEach(a),Sp=i(je," to enable full offline mode."),je.forEach(a),sn=c(t),ft=o(t,"H2",{class:!0});var yr=n(ft);Qt=o(yr,"A",{id:!0,class:!0,href:!0});var If=n(Qt);fl=o(If,"SPAN",{});var Cf=n(fl);m(Za.$$.fragment,Cf),Cf.forEach(a),If.forEach(a),Dp=c(yr),ul=o(yr,"SPAN",{});var Of=n(ul);Tp=i(Of,"Slice splits"),Of.forEach(a),yr.forEach(a),en=c(t),G=o(t,"P",{});var be=n(G);Np=i(be,"You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),se=o(be,"A",{href:!0});var Lf=n(se);Ip=i(Lf,"ReadInstruction"),Lf.forEach(a),Cp=i(be," API. Strings are more compact and readable for simple cases, while "),ee=o(be,"A",{href:!0});var Hf=n(ee);Op=i(Hf,"ReadInstruction"),Hf.forEach(a),Lp=i(be," is easier to use with variable slicing parameters."),be.forEach(a),ln=c(t),Q=o(t,"P",{});var qe=n(Q);Hp=i(qe,"Concatenate a "),hl=o(qe,"CODE",{});var Ff=n(hl);Fp=i(Ff,"train"),Ff.forEach(a),Rp=i(qe," and "),ml=o(qe,"CODE",{});var Rf=n(ml);Mp=i(Rf,"test"),Rf.forEach(a),Vp=i(qe," split by:"),qe.forEach(a),on=c(t),m(ts.$$.fragment,t),nn=c(t),Kt=o(t,"P",{});var wr=n(Kt);zp=i(wr,"Select specific rows of the "),_l=o(wr,"CODE",{});var Mf=n(_l);Jp=i(Mf,"train"),Mf.forEach(a),Up=i(wr," split:"),wr.forEach(a),rn=c(t),m(as.$$.fragment,t),pn=c(t),le=o(t,"P",{});var Vf=n(le);Bp=i(Vf,"Or select a percentage of a split with:"),Vf.forEach(a),dn=c(t),m(ss.$$.fragment,t),cn=c(t),oe=o(t,"P",{});var zf=n(oe);Yp=i(zf,"Select a combination of percentages from each split:"),zf.forEach(a),fn=c(t),m(es.$$.fragment,t),un=c(t),ne=o(t,"P",{});var Jf=n(ne);Wp=i(Jf,"Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),Jf.forEach(a),hn=c(t),m(ls.$$.fragment,t),mn=c(t),ut=o(t,"H3",{class:!0});var jr=n(ut);Xt=o(jr,"A",{id:!0,class:!0,href:!0});var Uf=n(Xt);gl=o(Uf,"SPAN",{});var Bf=n(gl);m(os.$$.fragment,Bf),Bf.forEach(a),Uf.forEach(a),Gp=c(jr),vl=o(jr,"SPAN",{});var Yf=n(vl);Qp=i(Yf,"Percent slicing and rounding"),Yf.forEach(a),jr.forEach(a),_n=c(t),re=o(t,"P",{});var Wf=n(re);Kp=i(Wf,"The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),Wf.forEach(a),gn=c(t),m(ns.$$.fragment,t),vn=c(t),Zt=o(t,"P",{});var br=n(Zt);Xp=i(br,"If you want equal sized splits, use "),$l=o(br,"CODE",{});var Gf=n($l);Zp=i(Gf,"pct1_dropremainder"),Gf.forEach(a),td=i(br," rounding instead. This treats the specified percentage boundaries as multiples of 1%."),br.forEach(a),$n=c(t),m(rs.$$.fragment,t),yn=c(t),m(ta.$$.fragment,t),wn=c(t),ie=o(t,"A",{id:!0}),n(ie).forEach(a),jn=c(t),ht=o(t,"H2",{class:!0});var qr=n(ht);aa=o(qr,"A",{id:!0,class:!0,href:!0});var Qf=n(aa);yl=o(Qf,"SPAN",{});var Kf=n(yl);m(is.$$.fragment,Kf),Kf.forEach(a),Qf.forEach(a),ad=c(qr),wl=o(qr,"SPAN",{});var Xf=n(wl);sd=i(Xf,"Troubleshooting"),Xf.forEach(a),qr.forEach(a),bn=c(t),pe=o(t,"P",{});var Zf=n(pe);ed=i(Zf,"Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Zf.forEach(a),qn=c(t),mt=o(t,"H3",{class:!0});var kr=n(mt);sa=o(kr,"A",{id:!0,class:!0,href:!0});var tu=n(sa);jl=o(tu,"SPAN",{});var au=n(jl);m(ps.$$.fragment,au),au.forEach(a),tu.forEach(a),ld=c(kr),bl=o(kr,"SPAN",{});var su=n(bl);od=i(su,"Manual download"),su.forEach(a),kr.forEach(a),kn=c(t),L=o(t,"P",{});var ha=n(L);nd=i(ha,"Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),de=o(ha,"A",{href:!0});var eu=n(de);rd=i(eu,"load_dataset()"),eu.forEach(a),id=i(ha," to throw an "),ql=o(ha,"CODE",{});var lu=n(ql);pd=i(lu,"AssertionError"),lu.forEach(a),dd=i(ha,". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),kl=o(ha,"CODE",{});var ou=n(kl);cd=i(ou,"data_dir"),ou.forEach(a),fd=i(ha," argument to specify the path to the files you just downloaded."),ha.forEach(a),En=c(t),ea=o(t,"P",{});var Er=n(ea);ud=i(Er,"For example, if you try to download a configuration from the "),ds=o(Er,"A",{href:!0,rel:!0});var nu=n(ds);hd=i(nu,"MATINF"),nu.forEach(a),md=i(Er," dataset:"),Er.forEach(a),xn=c(t),m(cs.$$.fragment,t),Pn=c(t),_t=o(t,"H3",{class:!0});var xr=n(_t);la=o(xr,"A",{id:!0,class:!0,href:!0});var ru=n(la);El=o(ru,"SPAN",{});var iu=n(El);m(fs.$$.fragment,iu),iu.forEach(a),ru.forEach(a),_d=c(xr),xl=o(xr,"SPAN",{});var pu=n(xl);gd=i(pu,"Specify features"),pu.forEach(a),xr.forEach(a),An=c(t),H=o(t,"P",{});var ma=n(H);vd=i(ma,"When you create a dataset from local files, the "),ce=o(ma,"A",{href:!0});var du=n(ce);$d=i(du,"Features"),du.forEach(a),yd=i(ma," are automatically inferred by "),us=o(ma,"A",{href:!0,rel:!0});var cu=n(us);wd=i(cu,"Apache Arrow"),cu.forEach(a),jd=i(ma,". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),fe=o(ma,"A",{href:!0});var fu=n(fe);bd=i(fu,"ClassLabel"),fu.forEach(a),qd=i(ma," feature."),ma.forEach(a),Sn=c(t),oa=o(t,"P",{});var Pr=n(oa);kd=i(Pr,"Start by defining your own labels with the "),ue=o(Pr,"A",{href:!0});var uu=n(ue);Ed=i(uu,"Features"),uu.forEach(a),xd=i(Pr," class:"),Pr.forEach(a),Dn=c(t),m(hs.$$.fragment,t),Tn=c(t),K=o(t,"P",{});var ke=n(K);Pd=i(ke,"Next, specify the "),Pl=o(ke,"CODE",{});var hu=n(Pl);Ad=i(hu,"features"),hu.forEach(a),Sd=i(ke," parameter in "),he=o(ke,"A",{href:!0});var mu=n(he);Dd=i(mu,"load_dataset()"),mu.forEach(a),Td=i(ke," with the features you just created:"),ke.forEach(a),Nn=c(t),m(ms.$$.fragment,t),In=c(t),me=o(t,"P",{});var _u=n(me);Nd=i(_u,"Now when you look at your dataset features, you can see it uses the custom labels you defined:"),_u.forEach(a),Cn=c(t),m(_s.$$.fragment,t),On=c(t),gt=o(t,"H2",{class:!0});var Ar=n(gt);na=o(Ar,"A",{id:!0,class:!0,href:!0});var gu=n(na);Al=o(gu,"SPAN",{});var vu=n(Al);m(gs.$$.fragment,vu),vu.forEach(a),gu.forEach(a),Id=c(Ar),Sl=o(Ar,"SPAN",{});var $u=n(Sl);Cd=i($u,"Metrics"),$u.forEach(a),Ar.forEach(a),Ln=c(t),m(ra.$$.fragment,t),Hn=c(t),_e=o(t,"P",{});var yu=n(_e);Od=i(yu,"When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),yu.forEach(a),Fn=c(t),m(vs.$$.fragment,t),Rn=c(t),m(ia.$$.fragment,t),Mn=c(t),vt=o(t,"H3",{class:!0});var Sr=n(vt);pa=o(Sr,"A",{id:!0,class:!0,href:!0});var wu=n(pa);Dl=o(wu,"SPAN",{});var ju=n(Dl);m($s.$$.fragment,ju),ju.forEach(a),wu.forEach(a),Ld=c(Sr),Tl=o(Sr,"SPAN",{});var bu=n(Tl);Hd=i(bu,"Load configurations"),bu.forEach(a),Sr.forEach(a),Vn=c(t),X=o(t,"P",{});var Ee=n(X);Fd=i(Ee,"It is possible for a metric to have different configurations. The configurations are stored in the "),Nl=o(Ee,"CODE",{});var qu=n(Nl);Rd=i(qu,"config_name"),qu.forEach(a),Md=i(Ee," parameter in "),ge=o(Ee,"A",{href:!0});var ku=n(ge);Vd=i(ku,"MetricInfo"),ku.forEach(a),zd=i(Ee," attribute. When you load a metric, provide the configuration name as shown in the following:"),Ee.forEach(a),zn=c(t),m(ys.$$.fragment,t),Jn=c(t),$t=o(t,"H3",{class:!0});var Dr=n($t);da=o(Dr,"A",{id:!0,class:!0,href:!0});var Eu=n(da);Il=o(Eu,"SPAN",{});var xu=n(Il);m(ws.$$.fragment,xu),xu.forEach(a),Eu.forEach(a),Jd=c(Dr),Cl=o(Dr,"SPAN",{});var Pu=n(Cl);Ud=i(Pu,"Distributed setup"),Pu.forEach(a),Dr.forEach(a),Un=c(t),ve=o(t,"P",{});var Au=n(ve);Bd=i(Au,"When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),Au.forEach(a),Bn=c(t),$e=o(t,"P",{});var Su=n($e);Yd=i(Su,"For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),Su.forEach(a),Yn=c(t),Z=o(t,"OL",{});var xe=n(Z);Ol=o(xe,"LI",{});var Du=n(Ol);js=o(Du,"P",{});var Tr=n(js);Wd=i(Tr,"Define the total number of processes with the "),Ll=o(Tr,"CODE",{});var Tu=n(Ll);Gd=i(Tu,"num_process"),Tu.forEach(a),Qd=i(Tr," argument."),Tr.forEach(a),Du.forEach(a),Kd=c(xe),Hl=o(xe,"LI",{});var Nu=n(Hl);yt=o(Nu,"P",{});var Pe=n(yt);Xd=i(Pe,"Set the process "),Fl=o(Pe,"CODE",{});var Iu=n(Fl);Zd=i(Iu,"rank"),Iu.forEach(a),tc=i(Pe," as an integer between zero and "),Rl=o(Pe,"CODE",{});var Cu=n(Rl);ac=i(Cu,"num_process - 1"),Cu.forEach(a),sc=i(Pe,"."),Pe.forEach(a),Nu.forEach(a),ec=c(xe),Ml=o(xe,"LI",{});var Ou=n(Ml);bs=o(Ou,"P",{});var Nr=n(bs);lc=i(Nr,"Load your metric with "),ye=o(Nr,"A",{href:!0});var Lu=n(ye);oc=i(Lu,"load_metric()"),Lu.forEach(a),nc=i(Nr," with these arguments:"),Nr.forEach(a),Ou.forEach(a),xe.forEach(a),Wn=c(t),m(qs.$$.fragment,t),Gn=c(t),m(ca.$$.fragment,t),Qn=c(t),fa=o(t,"P",{});var Ir=n(fa);rc=i(Ir,"In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Vl=o(Ir,"CODE",{});var Hu=n(Vl);ic=i(Hu,"experiment_id"),Hu.forEach(a),pc=i(Ir," to distinguish the separate evaluations:"),Ir.forEach(a),Kn=c(t),m(ks.$$.fragment,t),this.h()},h(){f(u,"name","hf:doc:metadata"),f(u,"content",JSON.stringify(Xu)),f(b,"id","load"),f(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(b,"href","#load"),f(y,"class","relative group"),f(Ts,"href","./audio_load"),f(Ns,"href","./image_load"),f(Is,"href","./nlp_load"),f(Cs,"id","load-from-the-hub"),f(Et,"id","hugging-face-hub"),f(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Et,"href","#hugging-face-hub"),f(st,"class","relative group"),f(Os,"href","share#create-the-repository"),f(Ls,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_dataset"),f(qa,"href","https://huggingface.co/datasets/lhoestq/demo1"),f(qa,"rel","nofollow"),f(Nt,"id","local-loading-script"),f(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Nt,"href","#local-loading-script"),f(et,"class","relative group"),f(Hs,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_dataset"),f(Ot,"id","local-and-remote-files"),f(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ot,"href","#local-and-remote-files"),f(lt,"class","relative group"),f(Fs,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_dataset"),f(Lt,"id","csv"),f(Lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Lt,"href","#csv"),f(ot,"class","relative group"),f(Ht,"id","json"),f(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ht,"href","#json"),f(nt,"class","relative group"),f(Us,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_dataset"),f(Mt,"id","parquet"),f(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Mt,"href","#parquet"),f(rt,"class","relative group"),f(Vt,"id","inmemory-data"),f(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Vt,"href","#inmemory-data"),f(it,"class","relative group"),f(Xs,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.Dataset"),f(Jt,"id","python-dictionary"),f(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Jt,"href","#python-dictionary"),f(pt,"class","relative group"),f(Zs,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.Dataset.from_dict"),f(Bt,"id","pandas-dataframe"),f(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Bt,"href","#pandas-dataframe"),f(dt,"class","relative group"),f(te,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.Dataset.from_pandas"),f(Gt,"id","offline"),f(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Gt,"href","#offline"),f(ct,"class","relative group"),f(Qt,"id","slice-splits"),f(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Qt,"href","#slice-splits"),f(ft,"class","relative group"),f(se,"href","/docs/datasets/pr_4672/en/package_reference/builder_classes#datasets.ReadInstruction"),f(ee,"href","/docs/datasets/pr_4672/en/package_reference/builder_classes#datasets.ReadInstruction"),f(Xt,"id","percent-slicing-and-rounding"),f(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Xt,"href","#percent-slicing-and-rounding"),f(ut,"class","relative group"),f(ie,"id","troubleshoot"),f(aa,"id","troubleshooting"),f(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(aa,"href","#troubleshooting"),f(ht,"class","relative group"),f(sa,"id","manual-download"),f(sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(sa,"href","#manual-download"),f(mt,"class","relative group"),f(de,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_dataset"),f(ds,"href","https://huggingface.co/datasets/matinf"),f(ds,"rel","nofollow"),f(la,"id","specify-features"),f(la,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(la,"href","#specify-features"),f(_t,"class","relative group"),f(ce,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.Features"),f(us,"href","https://arrow.apache.org/docs/"),f(us,"rel","nofollow"),f(fe,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.ClassLabel"),f(ue,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.Features"),f(he,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_dataset"),f(na,"id","metrics"),f(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(na,"href","#metrics"),f(gt,"class","relative group"),f(pa,"id","load-configurations"),f(pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(pa,"href","#load-configurations"),f(vt,"class","relative group"),f(ge,"href","/docs/datasets/pr_4672/en/package_reference/main_classes#datasets.MetricInfo"),f(da,"id","distributed-setup"),f(da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(da,"href","#distributed-setup"),f($t,"class","relative group"),f(ye,"href","/docs/datasets/pr_4672/en/package_reference/loading_methods#datasets.load_metric")},m(t,e){s(document.head,u),p(t,k,e),p(t,y,e),s(y,b),s(b,q),_(w,q,null),s(y,j),s(y,x),s(x,tt),p(t,wt,e),p(t,J,e),s(J,at),p(t,jt,e),p(t,U,e),s(U,B),p(t,bt,e),p(t,A,e),s(A,M),s(M,_a),s(A,ga),s(A,V),s(V,va),s(A,$a),s(A,O),s(O,ya),s(A,wa),s(A,z),s(z,P),s(A,Ps),s(A,qt),s(qt,As),s(A,Ss),s(A,kt),s(kt,Ds),p(t,ja,e),p(t,I,e),s(I,Cr),s(I,Ts),s(Ts,Or),s(I,Lr),s(I,Ns),s(Ns,Hr),s(I,Fr),s(I,Is),s(Is,Rr),s(I,Mr),p(t,Gl,e),p(t,Cs,e),p(t,Ql,e),p(t,st,e),s(st,Et),s(Et,Ae),_(ba,Ae,null),s(st,Vr),s(st,Se),s(Se,zr),p(t,Kl,e),p(t,Y,e),s(Y,Jr),s(Y,Os),s(Os,Ur),s(Y,Br),s(Y,Ls),s(Ls,Yr),s(Y,Wr),p(t,Xl,e),p(t,xt,e),s(xt,Gr),s(xt,qa),s(qa,Qr),s(xt,Kr),p(t,Zl,e),_(ka,t,e),p(t,to,e),p(t,Pt,e),s(Pt,Xr),s(Pt,De),s(De,Zr),s(Pt,ti),p(t,ao,e),_(Ea,t,e),p(t,so,e),_(At,t,e),p(t,eo,e),p(t,T,e),s(T,ai),s(T,Te),s(Te,si),s(T,ei),s(T,Ne),s(Ne,li),s(T,oi),s(T,Ie),s(Ie,ni),s(T,ri),s(T,Ce),s(Ce,ii),s(T,pi),s(T,Oe),s(Oe,di),s(T,ci),p(t,lo,e),_(xa,t,e),p(t,oo,e),_(St,t,e),p(t,no,e),p(t,Dt,e),s(Dt,fi),s(Dt,Le),s(Le,ui),s(Dt,hi),p(t,ro,e),_(Pa,t,e),p(t,io,e),p(t,Tt,e),s(Tt,mi),s(Tt,He),s(He,_i),s(Tt,gi),p(t,po,e),_(Aa,t,e),p(t,co,e),p(t,et,e),s(et,Nt),s(Nt,Fe),_(Sa,Fe,null),s(et,vi),s(et,Re),s(Re,$i),p(t,fo,e),p(t,It,e),s(It,yi),s(It,Hs),s(Hs,wi),s(It,ji),p(t,uo,e),p(t,Ct,e),s(Ct,Me),s(Me,bi),s(Ct,qi),s(Ct,Ve),s(Ve,ki),p(t,ho,e),_(Da,t,e),p(t,mo,e),p(t,lt,e),s(lt,Ot),s(Ot,ze),_(Ta,ze,null),s(lt,Ei),s(lt,Je),s(Je,xi),p(t,_o,e),p(t,N,e),s(N,Pi),s(N,Ue),s(Ue,Ai),s(N,Si),s(N,Be),s(Be,Di),s(N,Ti),s(N,Ye),s(Ye,Ni),s(N,Ii),s(N,We),s(We,Ci),s(N,Oi),s(N,Fs),s(Fs,Li),s(N,Hi),p(t,go,e),p(t,ot,e),s(ot,Lt),s(Lt,Ge),_(Na,Ge,null),s(ot,Fi),s(ot,Qe),s(Qe,Ri),p(t,vo,e),p(t,Rs,e),s(Rs,Mi),p(t,$o,e),_(Ia,t,e),p(t,yo,e),p(t,Ms,e),s(Ms,Vi),p(t,wo,e),_(Ca,t,e),p(t,jo,e),p(t,Vs,e),s(Vs,zi),p(t,bo,e),_(Oa,t,e),p(t,qo,e),p(t,zs,e),s(zs,Ji),p(t,ko,e),_(La,t,e),p(t,Eo,e),p(t,Js,e),s(Js,Ui),p(t,xo,e),_(Ha,t,e),p(t,Po,e),p(t,nt,e),s(nt,Ht),s(Ht,Ke),_(Fa,Ke,null),s(nt,Bi),s(nt,Xe),s(Xe,Yi),p(t,Ao,e),p(t,Ft,e),s(Ft,Wi),s(Ft,Us),s(Us,Gi),s(Ft,Qi),p(t,So,e),_(Ra,t,e),p(t,Do,e),p(t,Bs,e),s(Bs,Ki),p(t,To,e),_(Ma,t,e),p(t,No,e),p(t,Rt,e),s(Rt,Xi),s(Rt,Ze),s(Ze,Zi),s(Rt,tp),p(t,Io,e),_(Va,t,e),p(t,Co,e),p(t,Ys,e),s(Ys,ap),p(t,Oo,e),_(za,t,e),p(t,Lo,e),p(t,Ws,e),s(Ws,sp),p(t,Ho,e),p(t,rt,e),s(rt,Mt),s(Mt,tl),_(Ja,tl,null),s(rt,ep),s(rt,al),s(al,lp),p(t,Fo,e),p(t,Gs,e),s(Gs,op),p(t,Ro,e),p(t,Qs,e),s(Qs,np),p(t,Mo,e),_(Ua,t,e),p(t,Vo,e),p(t,Ks,e),s(Ks,rp),p(t,zo,e),_(Ba,t,e),p(t,Jo,e),p(t,it,e),s(it,Vt),s(Vt,sl),_(Ya,sl,null),s(it,ip),s(it,el),s(el,pp),p(t,Uo,e),p(t,zt,e),s(zt,dp),s(zt,Xs),s(Xs,cp),s(zt,fp),p(t,Bo,e),p(t,pt,e),s(pt,Jt),s(Jt,ll),_(Wa,ll,null),s(pt,up),s(pt,ol),s(ol,hp),p(t,Yo,e),p(t,Ut,e),s(Ut,mp),s(Ut,Zs),s(Zs,_p),s(Ut,gp),p(t,Wo,e),_(Ga,t,e),p(t,Go,e),p(t,dt,e),s(dt,Bt),s(Bt,nl),_(Qa,nl,null),s(dt,vp),s(dt,rl),s(rl,$p),p(t,Qo,e),p(t,Yt,e),s(Yt,yp),s(Yt,te),s(te,wp),s(Yt,jp),p(t,Ko,e),_(Ka,t,e),p(t,Xo,e),_(Wt,t,e),p(t,Zo,e),p(t,ct,e),s(ct,Gt),s(Gt,il),_(Xa,il,null),s(ct,bp),s(ct,pl),s(pl,qp),p(t,tn,e),p(t,ae,e),s(ae,kp),p(t,an,e),p(t,W,e),s(W,Ep),s(W,dl),s(dl,xp),s(W,Pp),s(W,cl),s(cl,Ap),s(W,Sp),p(t,sn,e),p(t,ft,e),s(ft,Qt),s(Qt,fl),_(Za,fl,null),s(ft,Dp),s(ft,ul),s(ul,Tp),p(t,en,e),p(t,G,e),s(G,Np),s(G,se),s(se,Ip),s(G,Cp),s(G,ee),s(ee,Op),s(G,Lp),p(t,ln,e),p(t,Q,e),s(Q,Hp),s(Q,hl),s(hl,Fp),s(Q,Rp),s(Q,ml),s(ml,Mp),s(Q,Vp),p(t,on,e),_(ts,t,e),p(t,nn,e),p(t,Kt,e),s(Kt,zp),s(Kt,_l),s(_l,Jp),s(Kt,Up),p(t,rn,e),_(as,t,e),p(t,pn,e),p(t,le,e),s(le,Bp),p(t,dn,e),_(ss,t,e),p(t,cn,e),p(t,oe,e),s(oe,Yp),p(t,fn,e),_(es,t,e),p(t,un,e),p(t,ne,e),s(ne,Wp),p(t,hn,e),_(ls,t,e),p(t,mn,e),p(t,ut,e),s(ut,Xt),s(Xt,gl),_(os,gl,null),s(ut,Gp),s(ut,vl),s(vl,Qp),p(t,_n,e),p(t,re,e),s(re,Kp),p(t,gn,e),_(ns,t,e),p(t,vn,e),p(t,Zt,e),s(Zt,Xp),s(Zt,$l),s($l,Zp),s(Zt,td),p(t,$n,e),_(rs,t,e),p(t,yn,e),_(ta,t,e),p(t,wn,e),p(t,ie,e),p(t,jn,e),p(t,ht,e),s(ht,aa),s(aa,yl),_(is,yl,null),s(ht,ad),s(ht,wl),s(wl,sd),p(t,bn,e),p(t,pe,e),s(pe,ed),p(t,qn,e),p(t,mt,e),s(mt,sa),s(sa,jl),_(ps,jl,null),s(mt,ld),s(mt,bl),s(bl,od),p(t,kn,e),p(t,L,e),s(L,nd),s(L,de),s(de,rd),s(L,id),s(L,ql),s(ql,pd),s(L,dd),s(L,kl),s(kl,cd),s(L,fd),p(t,En,e),p(t,ea,e),s(ea,ud),s(ea,ds),s(ds,hd),s(ea,md),p(t,xn,e),_(cs,t,e),p(t,Pn,e),p(t,_t,e),s(_t,la),s(la,El),_(fs,El,null),s(_t,_d),s(_t,xl),s(xl,gd),p(t,An,e),p(t,H,e),s(H,vd),s(H,ce),s(ce,$d),s(H,yd),s(H,us),s(us,wd),s(H,jd),s(H,fe),s(fe,bd),s(H,qd),p(t,Sn,e),p(t,oa,e),s(oa,kd),s(oa,ue),s(ue,Ed),s(oa,xd),p(t,Dn,e),_(hs,t,e),p(t,Tn,e),p(t,K,e),s(K,Pd),s(K,Pl),s(Pl,Ad),s(K,Sd),s(K,he),s(he,Dd),s(K,Td),p(t,Nn,e),_(ms,t,e),p(t,In,e),p(t,me,e),s(me,Nd),p(t,Cn,e),_(_s,t,e),p(t,On,e),p(t,gt,e),s(gt,na),s(na,Al),_(gs,Al,null),s(gt,Id),s(gt,Sl),s(Sl,Cd),p(t,Ln,e),_(ra,t,e),p(t,Hn,e),p(t,_e,e),s(_e,Od),p(t,Fn,e),_(vs,t,e),p(t,Rn,e),_(ia,t,e),p(t,Mn,e),p(t,vt,e),s(vt,pa),s(pa,Dl),_($s,Dl,null),s(vt,Ld),s(vt,Tl),s(Tl,Hd),p(t,Vn,e),p(t,X,e),s(X,Fd),s(X,Nl),s(Nl,Rd),s(X,Md),s(X,ge),s(ge,Vd),s(X,zd),p(t,zn,e),_(ys,t,e),p(t,Jn,e),p(t,$t,e),s($t,da),s(da,Il),_(ws,Il,null),s($t,Jd),s($t,Cl),s(Cl,Ud),p(t,Un,e),p(t,ve,e),s(ve,Bd),p(t,Bn,e),p(t,$e,e),s($e,Yd),p(t,Yn,e),p(t,Z,e),s(Z,Ol),s(Ol,js),s(js,Wd),s(js,Ll),s(Ll,Gd),s(js,Qd),s(Z,Kd),s(Z,Hl),s(Hl,yt),s(yt,Xd),s(yt,Fl),s(Fl,Zd),s(yt,tc),s(yt,Rl),s(Rl,ac),s(yt,sc),s(Z,ec),s(Z,Ml),s(Ml,bs),s(bs,lc),s(bs,ye),s(ye,oc),s(bs,nc),p(t,Wn,e),_(qs,t,e),p(t,Gn,e),_(ca,t,e),p(t,Qn,e),p(t,fa,e),s(fa,rc),s(fa,Vl),s(Vl,ic),s(fa,pc),p(t,Kn,e),_(ks,t,e),Xn=!0},p(t,[e]){const Es={};e&2&&(Es.$$scope={dirty:e,ctx:t}),At.$set(Es);const zl={};e&2&&(zl.$$scope={dirty:e,ctx:t}),St.$set(zl);const Jl={};e&2&&(Jl.$$scope={dirty:e,ctx:t}),Wt.$set(Jl);const Ul={};e&2&&(Ul.$$scope={dirty:e,ctx:t}),ta.$set(Ul);const Bl={};e&2&&(Bl.$$scope={dirty:e,ctx:t}),ra.$set(Bl);const Yl={};e&2&&(Yl.$$scope={dirty:e,ctx:t}),ia.$set(Yl);const C={};e&2&&(C.$$scope={dirty:e,ctx:t}),ca.$set(C)},i(t){Xn||(g(w.$$.fragment,t),g(ba.$$.fragment,t),g(ka.$$.fragment,t),g(Ea.$$.fragment,t),g(At.$$.fragment,t),g(xa.$$.fragment,t),g(St.$$.fragment,t),g(Pa.$$.fragment,t),g(Aa.$$.fragment,t),g(Sa.$$.fragment,t),g(Da.$$.fragment,t),g(Ta.$$.fragment,t),g(Na.$$.fragment,t),g(Ia.$$.fragment,t),g(Ca.$$.fragment,t),g(Oa.$$.fragment,t),g(La.$$.fragment,t),g(Ha.$$.fragment,t),g(Fa.$$.fragment,t),g(Ra.$$.fragment,t),g(Ma.$$.fragment,t),g(Va.$$.fragment,t),g(za.$$.fragment,t),g(Ja.$$.fragment,t),g(Ua.$$.fragment,t),g(Ba.$$.fragment,t),g(Ya.$$.fragment,t),g(Wa.$$.fragment,t),g(Ga.$$.fragment,t),g(Qa.$$.fragment,t),g(Ka.$$.fragment,t),g(Wt.$$.fragment,t),g(Xa.$$.fragment,t),g(Za.$$.fragment,t),g(ts.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(es.$$.fragment,t),g(ls.$$.fragment,t),g(os.$$.fragment,t),g(ns.$$.fragment,t),g(rs.$$.fragment,t),g(ta.$$.fragment,t),g(is.$$.fragment,t),g(ps.$$.fragment,t),g(cs.$$.fragment,t),g(fs.$$.fragment,t),g(hs.$$.fragment,t),g(ms.$$.fragment,t),g(_s.$$.fragment,t),g(gs.$$.fragment,t),g(ra.$$.fragment,t),g(vs.$$.fragment,t),g(ia.$$.fragment,t),g($s.$$.fragment,t),g(ys.$$.fragment,t),g(ws.$$.fragment,t),g(qs.$$.fragment,t),g(ca.$$.fragment,t),g(ks.$$.fragment,t),Xn=!0)},o(t){v(w.$$.fragment,t),v(ba.$$.fragment,t),v(ka.$$.fragment,t),v(Ea.$$.fragment,t),v(At.$$.fragment,t),v(xa.$$.fragment,t),v(St.$$.fragment,t),v(Pa.$$.fragment,t),v(Aa.$$.fragment,t),v(Sa.$$.fragment,t),v(Da.$$.fragment,t),v(Ta.$$.fragment,t),v(Na.$$.fragment,t),v(Ia.$$.fragment,t),v(Ca.$$.fragment,t),v(Oa.$$.fragment,t),v(La.$$.fragment,t),v(Ha.$$.fragment,t),v(Fa.$$.fragment,t),v(Ra.$$.fragment,t),v(Ma.$$.fragment,t),v(Va.$$.fragment,t),v(za.$$.fragment,t),v(Ja.$$.fragment,t),v(Ua.$$.fragment,t),v(Ba.$$.fragment,t),v(Ya.$$.fragment,t),v(Wa.$$.fragment,t),v(Ga.$$.fragment,t),v(Qa.$$.fragment,t),v(Ka.$$.fragment,t),v(Wt.$$.fragment,t),v(Xa.$$.fragment,t),v(Za.$$.fragment,t),v(ts.$$.fragment,t),v(as.$$.fragment,t),v(ss.$$.fragment,t),v(es.$$.fragment,t),v(ls.$$.fragment,t),v(os.$$.fragment,t),v(ns.$$.fragment,t),v(rs.$$.fragment,t),v(ta.$$.fragment,t),v(is.$$.fragment,t),v(ps.$$.fragment,t),v(cs.$$.fragment,t),v(fs.$$.fragment,t),v(hs.$$.fragment,t),v(ms.$$.fragment,t),v(_s.$$.fragment,t),v(gs.$$.fragment,t),v(ra.$$.fragment,t),v(vs.$$.fragment,t),v(ia.$$.fragment,t),v($s.$$.fragment,t),v(ys.$$.fragment,t),v(ws.$$.fragment,t),v(qs.$$.fragment,t),v(ca.$$.fragment,t),v(ks.$$.fragment,t),Xn=!1},d(t){a(u),t&&a(k),t&&a(y),$(w),t&&a(wt),t&&a(J),t&&a(jt),t&&a(U),t&&a(bt),t&&a(A),t&&a(ja),t&&a(I),t&&a(Gl),t&&a(Cs),t&&a(Ql),t&&a(st),$(ba),t&&a(Kl),t&&a(Y),t&&a(Xl),t&&a(xt),t&&a(Zl),$(ka,t),t&&a(to),t&&a(Pt),t&&a(ao),$(Ea,t),t&&a(so),$(At,t),t&&a(eo),t&&a(T),t&&a(lo),$(xa,t),t&&a(oo),$(St,t),t&&a(no),t&&a(Dt),t&&a(ro),$(Pa,t),t&&a(io),t&&a(Tt),t&&a(po),$(Aa,t),t&&a(co),t&&a(et),$(Sa),t&&a(fo),t&&a(It),t&&a(uo),t&&a(Ct),t&&a(ho),$(Da,t),t&&a(mo),t&&a(lt),$(Ta),t&&a(_o),t&&a(N),t&&a(go),t&&a(ot),$(Na),t&&a(vo),t&&a(Rs),t&&a($o),$(Ia,t),t&&a(yo),t&&a(Ms),t&&a(wo),$(Ca,t),t&&a(jo),t&&a(Vs),t&&a(bo),$(Oa,t),t&&a(qo),t&&a(zs),t&&a(ko),$(La,t),t&&a(Eo),t&&a(Js),t&&a(xo),$(Ha,t),t&&a(Po),t&&a(nt),$(Fa),t&&a(Ao),t&&a(Ft),t&&a(So),$(Ra,t),t&&a(Do),t&&a(Bs),t&&a(To),$(Ma,t),t&&a(No),t&&a(Rt),t&&a(Io),$(Va,t),t&&a(Co),t&&a(Ys),t&&a(Oo),$(za,t),t&&a(Lo),t&&a(Ws),t&&a(Ho),t&&a(rt),$(Ja),t&&a(Fo),t&&a(Gs),t&&a(Ro),t&&a(Qs),t&&a(Mo),$(Ua,t),t&&a(Vo),t&&a(Ks),t&&a(zo),$(Ba,t),t&&a(Jo),t&&a(it),$(Ya),t&&a(Uo),t&&a(zt),t&&a(Bo),t&&a(pt),$(Wa),t&&a(Yo),t&&a(Ut),t&&a(Wo),$(Ga,t),t&&a(Go),t&&a(dt),$(Qa),t&&a(Qo),t&&a(Yt),t&&a(Ko),$(Ka,t),t&&a(Xo),$(Wt,t),t&&a(Zo),t&&a(ct),$(Xa),t&&a(tn),t&&a(ae),t&&a(an),t&&a(W),t&&a(sn),t&&a(ft),$(Za),t&&a(en),t&&a(G),t&&a(ln),t&&a(Q),t&&a(on),$(ts,t),t&&a(nn),t&&a(Kt),t&&a(rn),$(as,t),t&&a(pn),t&&a(le),t&&a(dn),$(ss,t),t&&a(cn),t&&a(oe),t&&a(fn),$(es,t),t&&a(un),t&&a(ne),t&&a(hn),$(ls,t),t&&a(mn),t&&a(ut),$(os),t&&a(_n),t&&a(re),t&&a(gn),$(ns,t),t&&a(vn),t&&a(Zt),t&&a($n),$(rs,t),t&&a(yn),$(ta,t),t&&a(wn),t&&a(ie),t&&a(jn),t&&a(ht),$(is),t&&a(bn),t&&a(pe),t&&a(qn),t&&a(mt),$(ps),t&&a(kn),t&&a(L),t&&a(En),t&&a(ea),t&&a(xn),$(cs,t),t&&a(Pn),t&&a(_t),$(fs),t&&a(An),t&&a(H),t&&a(Sn),t&&a(oa),t&&a(Dn),$(hs,t),t&&a(Tn),t&&a(K),t&&a(Nn),$(ms,t),t&&a(In),t&&a(me),t&&a(Cn),$(_s,t),t&&a(On),t&&a(gt),$(gs),t&&a(Ln),$(ra,t),t&&a(Hn),t&&a(_e),t&&a(Fn),$(vs,t),t&&a(Rn),$(ia,t),t&&a(Mn),t&&a(vt),$($s),t&&a(Vn),t&&a(X),t&&a(zn),$(ys,t),t&&a(Jn),t&&a($t),$(ws),t&&a(Un),t&&a(ve),t&&a(Bn),t&&a($e),t&&a(Yn),t&&a(Z),t&&a(Wn),$(qs,t),t&&a(Gn),$(ca,t),t&&a(Qn),t&&a(fa),t&&a(Kn),$(ks,t)}}}const Xu={local:"load",sections:[{local:"hugging-face-hub",title:"Hugging Face Hub"},{local:"local-loading-script",title:"Local loading script"},{local:"local-and-remote-files",sections:[{local:"csv",title:"CSV"},{local:"json",title:"JSON"},{local:"parquet",title:"Parquet"}],title:"Local and remote files"},{local:"inmemory-data",sections:[{local:"python-dictionary",title:"Python dictionary"},{local:"pandas-dataframe",title:"Pandas DataFrame"}],title:"In-memory data"},{local:"offline",title:"Offline"},{local:"slice-splits",sections:[{local:"percent-slicing-and-rounding",title:"Percent slicing and rounding"}],title:"Slice splits"},{local:"troubleshooting",sections:[{local:"manual-download",title:"Manual download"},{local:"specify-features",title:"Specify features"}],title:"Troubleshooting"},{local:"metrics",sections:[{local:"load-configurations",title:"Load configurations"},{local:"distributed-setup",title:"Distributed setup"}],title:"Metrics"}],title:"Load"};function Zu(D){return zu(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nh extends Fu{constructor(u){super();Ru(this,u,Zu,Ku,Mu,{})}}export{nh as default,Xu as metadata};
