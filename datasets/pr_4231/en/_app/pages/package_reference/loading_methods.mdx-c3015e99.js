import{S as Co,i as To,s as Ho,e as s,k as d,w as u,t as i,M as Oo,c as o,d as a,m as l,a as n,x as _,h as r,b as c,F as e,g as h,y,L as Lo,q as v,o as b,B as w,v as Po}from"../../chunks/vendor-8138ceec.js";import{D as $}from"../../chunks/Docstring-6fa3bd37.js";import{I as Hs}from"../../chunks/IconCopyLink-2dd3a6ac.js";function Ao(Os){let E,ht,N,R,Ee,X,Xt,Ne,jt,ft,be,Wt,mt,S,B,Se,j,Zt,Ie,Kt,gt,I,W,Qt,Fe,ea,ut,f,Z,ta,qe,aa,sa,F,oa,K,na,ia,Ce,ra,da,la,Te,ca,pa,Q,He,ha,fa,Oe,ma,ga,Le,ua,_a,Pe,ya,va,q,x,ee,ba,Ae,wa,Da,xa,Me,ka,$a,Ue,Ea,Na,Y,Sa,te,Ia,Fa,ae,qa,Ca,se,Ve,Ta,Ha,oe,Re,Be,Oa,La,ne,Ye,Pa,Aa,ze,Ma,Ua,Je,ie,Va,Ge,Ra,Ba,Ya,Xe,za,_t,C,re,Ja,k,Ga,we,Xa,ja,De,Wa,Za,je,Ka,Qa,yt,g,de,es,We,ts,as,T,ss,le,os,ns,Ze,is,rs,ds,Ke,ls,cs,ce,Qe,ps,hs,et,fs,ms,tt,gs,vt,H,pe,us,at,_s,bt,O,he,ys,st,vs,wt,L,fe,bs,ot,ws,Dt,P,me,Ds,nt,xs,xt,A,z,it,ge,ks,rt,$s,kt,M,ue,Es,dt,Ns,$t,U,_e,Ss,ye,Is,lt,Fs,qs,Et,V,ve,Cs,ct,Ts,Nt;return X=new Hs({}),j=new Hs({}),W=new $({props:{name:"datasets.list_datasets",anchor:"datasets.list_datasets",parameters:[{name:"with_community_datasets",val:" = True"},{name:"with_details",val:" = False"}],parametersDescription:[{anchor:"datasets.list_datasets.with_community_datasets",description:"<strong>with_community_datasets</strong> (<code>bool</code>, optional, default <code>True</code>) &#x2014; Include the community provided datasets.",name:"with_community_datasets"},{anchor:"datasets.list_datasets.with_details",description:"<strong>with_details</strong> (<code>bool</code>, optional, default <code>False</code>) &#x2014; Return the full details on the datasets instead of only the short name.",name:"with_details"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/inspect.py#L44"}}),Z=new $({props:{name:"datasets.load_dataset",anchor:"datasets.load_dataset",parameters:[{name:"path",val:": str"},{name:"name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"split",val:": typing.Union[str, datasets.splits.Split, NoneType] = None"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.utils.download_manager.DownloadMode] = None"},{name:"ignore_verifications",val:": bool = False"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"},{name:"save_infos",val:": bool = False"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate, NoneType] = None"},{name:"streaming",val:": bool = False"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_dataset.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; Path or name of the dataset.
Depending on <code>path</code>, the dataset builder that is used comes from a generic dataset script (JSON, CSV, Parquet, text etc.) or from the dataset script (a python file) inside the dataset directory.</p>
<p>For local datasets:</p>
<ul>
<li>if <code>path</code> is a local directory (containing data files only)
-&gt; load a generic dataset builder (csv, json, text etc.) based on the content of the directory
e.g. <code>&apos;./path/to/directory/with/my/csv/data&apos;</code>.</li>
<li>if <code>path</code> is a local dataset script or a directory containing a local dataset script (if the script has the same name as the directory):
-&gt; load the dataset builder from the dataset script
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
</ul>
<p>For datasets on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)</p>
<ul>
<li>if <code>path</code> is a dataset repository on the HF hub (containing data files only)
-&gt; load a generic dataset builder (csv, text etc.) based on the content of the repository
e.g. <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing your data files.</li>
<li>if <code>path</code> is a dataset repository on the HF hub with a dataset script (if the script has the same name as the directory)
-&gt; load the dataset builder from the dataset script in the dataset repository
e.g. <code>glue</code>, <code>squad</code>, <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing a dataset script <em>&#x2018;dataset_name.py&#x2019;</em>.</li>
</ul>`,name:"path"},{anchor:"datasets.load_dataset.name",description:"<strong>name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"name"},{anchor:"datasets.load_dataset.data_dir",description:`<strong>data_dir</strong> (<code>str</code>, optional) &#x2014; Defining the data_dir of the dataset configuration. If specified for the generic builders (csv, text etc.) or the Hub datasets and <em>data_files</em> is None,
the behavior is equal to passing <em>os.path.join(data_dir, **)</em> as <em>data_files</em> to reference all the files in a directory.`,name:"data_dir"},{anchor:"datasets.load_dataset.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.load_dataset.split",description:`<strong>split</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.Split">Split</a> or <code>str</code>) &#x2014; Which split of the data to load.
If None, will return a <em>dict</em> with all splits (typically <em>datasets.Split.TRAIN</em> and <em>datasets.Split.TEST</em>).
If given, will return a single Dataset.
Splits can be combined and specified like in tensorflow-datasets.`,name:"split"},{anchor:"datasets.load_dataset.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional) &#x2014; Directory to read/write data. Defaults to &#x201D;~/.cache/huggingface/datasets&#x201D;.",name:"cache_dir"},{anchor:"datasets.load_dataset.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Set the features type to use for this dataset.',name:"features"},{anchor:"datasets.load_dataset.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.load_dataset.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_dataset.ignore_verifications",description:"<strong>ignore_verifications</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Ignore the verifications of the downloaded/processed dataset information (checksums/size/splits/&#x2026;).",name:"ignore_verifications"},{anchor:"datasets.load_dataset.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the dataset
will not be copied in-memory unless explicitly enabled by setting <em>datasets.config.IN_MEMORY_MAX_SIZE</em> to
nonzero. See more details in the <a href="/docs/datasets/pr_4231/en/package_reference/loading_methods#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"},{anchor:"datasets.load_dataset.save_infos",description:"<strong>save_infos</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Save the dataset information (checksums/size/splits/&#x2026;).",name:"save_infos"},{anchor:"datasets.load_dataset.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load:</p>
<ul>
<li>For datasets in the <em>huggingface/datasets</em> library on GitHub like &#x201C;squad&#x201D;, the default version of the module is the local version of the lib.
You can specify a different version from your local version of the lib (e.g. &#x201C;master&#x201D; or &#x201C;1.2.0&#x201D;) but it might cause compatibility issues.</li>
<li>For community datasets like &#x201C;lhoestq/squad&#x201D; that have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to the &#x201C;main&#x201D; branch.
You can specify a different version that the default &#x201C;main&#x201D; by using a commit sha or a git tag of the dataset repository.</li>
</ul>`,name:"revision"},{anchor:"datasets.load_dataset.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.load_dataset.task",description:'<strong>task</strong> (<code>str</code>) &#x2014; The task to prepare the dataset for during training and evaluation. Casts the dataset&#x2019;s <a href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.',name:"task"},{anchor:"datasets.load_dataset.streaming",description:`<strong>streaming</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If set to True, don&#x2019;t download the data files. Instead, it streams the data progressively while
iterating on the dataset. An IterableDataset or IterableDatasetDict is returned instead in this case.</p>
<p>Note that streaming works for datasets that use data formats that support being iterated over like txt, csv, jsonl for example.
Json files may be downloaded completely. Also streaming from remote zip or gzip files is supported but other compressed formats
like rar and xz are not yet supported. The tgz format doesn&#x2019;t allow streaming.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"streaming"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/load.py#L1531",returnDescription:`
<ul>
<li>if <em>split</em> is not None: the dataset requested,</li>
<li>if <em>split</em> is None, a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
<p>or <a
  href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a> or <a
  href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a>: if streaming=True</p>
<ul>
<li>if <em>split</em> is not None: the dataset requested,</li>
<li>if <em>split</em> is None, a <code>datasets.streaming.IterableDatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),re=new $({props:{name:"datasets.load_from_disk",anchor:"datasets.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3://my-bucket/dataset/train&#x201D;</em>) of the Dataset or DatasetDict directory where the dataset will be
loaded from.`,name:"dataset_path"},{anchor:"datasets.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the dataset
will not be copied in-memory unless explicitly enabled by setting <em>datasets.config.IN_MEMORY_MAX_SIZE</em> to
nonzero. See more details in the <a href="/docs/datasets/pr_4231/en/package_reference/loading_methods#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/load.py#L1713",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),de=new $({props:{name:"datasets.load_dataset_builder",anchor:"datasets.load_dataset_builder",parameters:[{name:"path",val:": str"},{name:"name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.utils.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_dataset_builder.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; Path or name of the dataset.
Depending on <code>path</code>, the dataset builder that is used comes from a generic dataset script (JSON, CSV, Parquet, text etc.) or from the dataset script (a python file) inside the dataset directory.</p>
<p>For local datasets:</p>
<ul>
<li>if <code>path</code> is a local directory (containing data files only)
-&gt; load a generic dataset builder (csv, json, text etc.) based on the content of the directory
e.g. <code>&apos;./path/to/directory/with/my/csv/data&apos;</code>.</li>
<li>if <code>path</code> is a local dataset script or a directory containing a local dataset script (if the script has the same name as the directory):
-&gt; load the dataset builder from the dataset script
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
</ul>
<p>For datasets on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)</p>
<ul>
<li>if <code>path</code> is a dataset repository on the HF hub (containing data files only)
-&gt; load a generic dataset builder (csv, text etc.) based on the content of the repository
e.g. <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing your data files.</li>
<li>if <code>path</code> is a dataset repository on the HF hub with a dataset script (if the script has the same name as the directory)
-&gt; load the dataset builder from the dataset script in the dataset repository
e.g. <code>glue</code>, <code>squad</code>, <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing a dataset script <em>&#x2018;dataset_name.py&#x2019;</em>.</li>
</ul>`,name:"path"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/load.py#L1416",returnType:`
<p><a
  href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DatasetBuilder"
>DatasetBuilder</a></p>
`}}),pe=new $({props:{name:"datasets.get_dataset_config_names",anchor:"datasets.get_dataset_config_names",parameters:[{name:"path",val:": str"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.utils.download_manager.DownloadMode] = None"},{name:"force_local_path",val:": typing.Optional[str] = None"},{name:"dynamic_modules_path",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.List, typing.Dict, NoneType] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_config_names.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_config_names.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014;
If specified, the dataset module will be loaded from the datasets repository at this version.
By default:</p>
<ul>
<li>it is set to the local version of the lib.</li>
<li>it will also try to load it from the master branch if it&#x2019;s not available at the local version of the lib.
Specifying a version that is different from your local version of the lib might cause compatibility issues.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_config_names.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_config_names.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_config_names.force_local_path",description:`<strong>force_local_path</strong> (Optional str) &#x2014; Optional path to a local path to download and prepare the script to.
Used to inspect or modify the script folder.`,name:"force_local_path"},{anchor:"datasets.get_dataset_config_names.dynamic_modules_path",description:`<strong>dynamic_modules_path</strong> (Optional str, defaults to HF_MODULES_CACHE / &#x201C;datasets_modules&#x201D;, i.e. ~/.cache/huggingface/modules/datasets_modules) &#x2014;
Optional path to the directory in which the dynamic modules are saved. It must have been initialized with <code>init_dynamic_modules</code>.
By default the datasets and metrics are stored inside the <em>datasets_modules</em> module.`,name:"dynamic_modules_path"},{anchor:"datasets.get_dataset_config_names.data_files",description:`<strong>data_files</strong> (<code>Union[Dict, List, str]</code>, optional) &#x2014; Defining the data_files of the dataset configuration.
download_kwargs &#x2014; optional attributes for DownloadConfig() which will override the attributes in download_config if supplied,
for example <code>use_auth_token</code>`,name:"data_files"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/inspect.py#L177"}}),he=new $({props:{name:"datasets.get_dataset_infos",anchor:"datasets.get_dataset_infos",parameters:[{name:"path",val:": str"},{name:"data_files",val:": typing.Union[str, typing.List, typing.Dict, NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.utils.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_infos.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_infos.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014;
If specified, the dataset module will be loaded from the datasets repository at this version.
By default:</p>
<ul>
<li>it is set to the local version of the lib.</li>
<li>it will also try to load it from the master branch if it&#x2019;s not available at the local version of the lib.
Specifying a version that is different from your local version of the lib might cause compatibility issues.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_infos.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_infos.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_infos.data_files",description:"<strong>data_files</strong> (<code>Union[Dict, List, str]</code>, optional) &#x2014; Defining the data_files of the dataset configuration.",name:"data_files"},{anchor:"datasets.get_dataset_infos.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.
config_kwargs &#x2014; optional attributes for builder class which will override the attributes if supplied.`,name:"use_auth_token"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/inspect.py#L124"}}),fe=new $({props:{name:"datasets.get_dataset_split_names",anchor:"datasets.get_dataset_split_names",parameters:[{name:"path",val:": str"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.utils.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_split_names.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_split_names.config_name",description:"<strong>config_name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"config_name"},{anchor:"datasets.get_dataset_split_names.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.get_dataset_split_names.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_split_names.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_split_names.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load:</p>
<ul>
<li>For datasets in the <em>huggingface/datasets</em> library on GitHub like &#x201C;squad&#x201D;, the default version of the module is the local version of the lib.
You can specify a different version from your local version of the lib (e.g. &#x201C;master&#x201D; or &#x201C;1.2.0&#x201D;) but it might cause compatibility issues.</li>
<li>For community datasets like &#x201C;lhoestq/squad&#x201D; that have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to the &#x201C;main&#x201D; branch.
You can specify a different version that the default &#x201C;main&#x201D; by using a commit sha or a git tag of the dataset repository.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_split_names.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.
config_kwargs &#x2014; optional attributes for builder class which will override the attributes if supplied.`,name:"use_auth_token"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/inspect.py#L289"}}),me=new $({props:{name:"datasets.inspect_dataset",anchor:"datasets.inspect_dataset",parameters:[{name:"path",val:": str"},{name:"local_path",val:": str"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.inspect_dataset.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.inspect_dataset.local_path",description:"<strong>local_path</strong> (<code>str</code>) &#x2014; path to the local folder to copy the datset script to.",name:"local_path"},{anchor:"datasets.inspect_dataset.download_config",description:`<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code> &#x2014; specific download configuration parameters.
**download_kwargs &#x2014; optional attributes for DownloadConfig() which will override the attributes in download_config if supplied.`,name:"download_config"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/inspect.py#L74"}}),ge=new Hs({}),ue=new $({props:{name:"datasets.list_metrics",anchor:"datasets.list_metrics",parameters:[{name:"with_community_metrics",val:" = True"},{name:"with_details",val:" = False"}],parametersDescription:[{anchor:"datasets.list_metrics.with_community_metrics",description:"<strong>with_community_metrics</strong> (<code>bool</code>, optional, default <code>True</code>) &#x2014; Include the community provided metrics.",name:"with_community_metrics"},{anchor:"datasets.list_metrics.with_details",description:"<strong>with_details</strong> (<code>bool</code>, optional, default <code>False</code>) &#x2014; Return the full details on the metrics instead of only the short name.",name:"with_details"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/inspect.py#L59"}}),_e=new $({props:{name:"datasets.load_metric",anchor:"datasets.load_metric",parameters:[{name:"path",val:": str"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"process_id",val:": int = 0"},{name:"num_process",val:": int = 1"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.utils.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"**metric_init_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_metric.path",description:`<strong>path</strong> (<code>str</code>) &#x2014;
path to the metric processing script with the metric builder. Can be either:<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./metrics/rouge&apos;</code> or <code>&apos;./metrics/rogue/rouge.py&apos;</code></li>
<li>a metric identifier on the HuggingFace datasets repo (list all available metrics with <code>datasets.list_metrics()</code>)
e.g. <code>&apos;rouge&apos;</code> or <code>&apos;bleu&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.load_metric.config_name",description:"<strong>config_name</strong> (<code>str</code>, optional) &#x2014; selecting a configuration for the metric (e.g. the GLUE metric has a configuration for each subset)",name:"config_name"},{anchor:"datasets.load_metric.process_id",description:"<strong>process_id</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: id of the process",name:"process_id"},{anchor:"datasets.load_metric.num_process",description:"<strong>num_process</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: total number of processes",name:"num_process"},{anchor:"datasets.load_metric.cache_dir",description:"<strong>cache_dir</strong> (Optional str) &#x2014; path to store the temporary predictions and references (default to <em>~/.cache/huggingface/metrics/</em>)",name:"cache_dir"},{anchor:"datasets.load_metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.load_metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool) &#x2014; Whether to store the temporary results in memory (defaults to False)",name:"keep_in_memory"},{anchor:"datasets.load_metric.download_config",description:"<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code> &#x2014; specific download configuration parameters.",name:"download_config"},{anchor:"datasets.load_metric.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/pr_4231/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_metric.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014; if specified, the module will be loaded from the datasets repository
at this version. By default it is set to the local version of the lib. Specifying a version that is different from
your local version of the lib might cause compatibility issues.`,name:"revision"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/load.py#L1356",returnDescription:`
<p><em>datasets.Metric</em></p>
`}}),ve=new $({props:{name:"datasets.inspect_metric",anchor:"datasets.inspect_metric",parameters:[{name:"path",val:": str"},{name:"local_path",val:": str"},{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.inspect_metric.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.inspect_metric.local_path",description:"<strong>local_path</strong> (<code>str</code>) &#x2014; path to the local folder to copy the datset script to.",name:"local_path"},{anchor:"datasets.inspect_metric.download_config",description:`<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code> &#x2014; specific download configuration parameters.
**download_kwargs &#x2014; optional attributes for DownloadConfig() which will override the attributes in download_config if supplied.`,name:"download_config"}],source:"https://github.com/huggingface/datasets/blob/r_4231/src/datasets/inspect.py#L99"}}),{c(){E=s("meta"),ht=d(),N=s("h1"),R=s("a"),Ee=s("span"),u(X.$$.fragment),Xt=d(),Ne=s("span"),jt=i("Loading methods"),ft=d(),be=s("p"),Wt=i("Methods for listing and loading datasets and metrics:"),mt=d(),S=s("h2"),B=s("a"),Se=s("span"),u(j.$$.fragment),Zt=d(),Ie=s("span"),Kt=i("Datasets"),gt=d(),I=s("div"),u(W.$$.fragment),Qt=d(),Fe=s("p"),ea=i("List all the datasets scripts available on the Hugging Face Hub."),ut=d(),f=s("div"),u(Z.$$.fragment),ta=d(),qe=s("p"),aa=i("Load a dataset from the Hugging Face Hub, or a local dataset."),sa=d(),F=s("p"),oa=i("You can find the list of datasets on the Hub at "),K=s("a"),na=i("https://huggingface.co/datasets"),ia=i(" or with "),Ce=s("code"),ra=i("datasets.list_datasets()"),da=i("."),la=d(),Te=s("p"),ca=i("A dataset is a directory that contains:"),pa=d(),Q=s("ul"),He=s("li"),ha=i("some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),fa=d(),Oe=s("li"),ma=i("and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),ga=d(),Le=s("p"),ua=i("Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),_a=d(),Pe=s("p"),ya=i("This function does the following under the hood:"),va=d(),q=s("ol"),x=s("li"),ee=s("p"),ba=i("Download and import in the library the dataset script from "),Ae=s("code"),wa=i("path"),Da=i(" if it\u2019s not already cached inside the library."),xa=d(),Me=s("p"),ka=i("If the dataset has no dataset script, then a generic dataset script is imported instead (JSON, CSV, Parquet, text, etc.)"),$a=d(),Ue=s("p"),Ea=i(`Dataset scripts are small python scripts that define dataset builders. They define the citation, info and format of the dataset,
contain the path or URL to the original data files and the code to load examples from the original data files.`),Na=d(),Y=s("p"),Sa=i("You can find some of the scripts here: "),te=s("a"),Ia=i("https://github.com/huggingface/datasets/tree/master/datasets"),Fa=i(`
You can find the complete list of datasets in the Datasets Hub at `),ae=s("a"),qa=i("https://huggingface.co/datasets"),Ca=d(),se=s("li"),Ve=s("p"),Ta=i("Run the dataset script which will:"),Ha=d(),oe=s("ul"),Re=s("li"),Be=s("p"),Oa=i("Download the dataset file from the original URL (see the script) if it\u2019s not already available locally or cached."),La=d(),ne=s("li"),Ye=s("p"),Pa=i("Process and cache the dataset in typed Arrow tables for caching."),Aa=d(),ze=s("p"),Ma=i(`Arrow table are arbitrarily long, typed tables which can store nested objects and be mapped to numpy/pandas/python generic types.
They can be directly accessed from disk, loaded in RAM or even streamed over the web.`),Ua=d(),Je=s("li"),ie=s("p"),Va=i("Return a dataset built from the requested splits in "),Ge=s("code"),Ra=i("split"),Ba=i(" (default: all)."),Ya=d(),Xe=s("p"),za=i(`It also allows to load a dataset from a local directory or a dataset repository on the Hugging Face Hub without dataset script.
In this case, it automatically loads all the data files from the directory or the dataset repository.`),_t=d(),C=s("div"),u(re.$$.fragment),Ja=d(),k=s("p"),Ga=i("Loads a dataset that was previously saved using "),we=s("a"),Xa=i("Dataset.save_to_disk()"),ja=i(` from a dataset directory, or
from a filesystem using either `),De=s("a"),Wa=i("datasets.filesystems.S3FileSystem"),Za=i(` or any implementation of
`),je=s("code"),Ka=i("fsspec.spec.AbstractFileSystem"),Qa=i("."),yt=d(),g=s("div"),u(de.$$.fragment),es=d(),We=s("p"),ts=i(`Load a dataset builder from the Hugging Face Hub, or a local dataset. A dataset builder can be used to inspect general information that is required to build a dataset (cache directory, config, dataset info, etc.)
without downloading the dataset itself.`),as=d(),T=s("p"),ss=i("You can find the list of datasets on the Hub at "),le=s("a"),os=i("https://huggingface.co/datasets"),ns=i(" or with "),Ze=s("code"),is=i("datasets.list_datasets()"),rs=i("."),ds=d(),Ke=s("p"),ls=i("A dataset is a directory that contains:"),cs=d(),ce=s("ul"),Qe=s("li"),ps=i("some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),hs=d(),et=s("li"),fs=i("and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),ms=d(),tt=s("p"),gs=i("Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),vt=d(),H=s("div"),u(pe.$$.fragment),us=d(),at=s("p"),_s=i("Get the list of available config names for a particular dataset."),bt=d(),O=s("div"),u(he.$$.fragment),ys=d(),st=s("p"),vs=i("Get the meta information about a dataset, returned as a dict mapping config name to DatasetInfoDict."),wt=d(),L=s("div"),u(fe.$$.fragment),bs=d(),ot=s("p"),ws=i("Get the list of available splits for a particular config and dataset."),Dt=d(),P=s("div"),u(me.$$.fragment),Ds=d(),nt=s("p"),xs=i("Allow inspection/modification of a dataset script by copying on local drive at local_path."),xt=d(),A=s("h2"),z=s("a"),it=s("span"),u(ge.$$.fragment),ks=d(),rt=s("span"),$s=i("Metrics"),kt=d(),M=s("div"),u(ue.$$.fragment),Es=d(),dt=s("p"),Ns=i("List all the metrics script available on the Hugging Face Hub."),$t=d(),U=s("div"),u(_e.$$.fragment),Ss=d(),ye=s("p"),Is=i("Load a "),lt=s("em"),Fs=i("datasets.Metric"),qs=i("."),Et=d(),V=s("div"),u(ve.$$.fragment),Cs=d(),ct=s("p"),Ts=i("Allow inspection/modification of a metric script by copying it on local drive at local_path."),this.h()},l(t){const p=Oo('[data-svelte="svelte-1phssyn"]',document.head);E=o(p,"META",{name:!0,content:!0}),p.forEach(a),ht=l(t),N=o(t,"H1",{class:!0});var St=n(N);R=o(St,"A",{id:!0,class:!0,href:!0});var Ls=n(R);Ee=o(Ls,"SPAN",{});var Ps=n(Ee);_(X.$$.fragment,Ps),Ps.forEach(a),Ls.forEach(a),Xt=l(St),Ne=o(St,"SPAN",{});var As=n(Ne);jt=r(As,"Loading methods"),As.forEach(a),St.forEach(a),ft=l(t),be=o(t,"P",{});var Ms=n(be);Wt=r(Ms,"Methods for listing and loading datasets and metrics:"),Ms.forEach(a),mt=l(t),S=o(t,"H2",{class:!0});var It=n(S);B=o(It,"A",{id:!0,class:!0,href:!0});var Us=n(B);Se=o(Us,"SPAN",{});var Vs=n(Se);_(j.$$.fragment,Vs),Vs.forEach(a),Us.forEach(a),Zt=l(It),Ie=o(It,"SPAN",{});var Rs=n(Ie);Kt=r(Rs,"Datasets"),Rs.forEach(a),It.forEach(a),gt=l(t),I=o(t,"DIV",{class:!0});var Ft=n(I);_(W.$$.fragment,Ft),Qt=l(Ft),Fe=o(Ft,"P",{});var Bs=n(Fe);ea=r(Bs,"List all the datasets scripts available on the Hugging Face Hub."),Bs.forEach(a),Ft.forEach(a),ut=l(t),f=o(t,"DIV",{class:!0});var m=n(f);_(Z.$$.fragment,m),ta=l(m),qe=o(m,"P",{});var Ys=n(qe);aa=r(Ys,"Load a dataset from the Hugging Face Hub, or a local dataset."),Ys.forEach(a),sa=l(m),F=o(m,"P",{});var xe=n(F);oa=r(xe,"You can find the list of datasets on the Hub at "),K=o(xe,"A",{href:!0,rel:!0});var zs=n(K);na=r(zs,"https://huggingface.co/datasets"),zs.forEach(a),ia=r(xe," or with "),Ce=o(xe,"CODE",{});var Js=n(Ce);ra=r(Js,"datasets.list_datasets()"),Js.forEach(a),da=r(xe,"."),xe.forEach(a),la=l(m),Te=o(m,"P",{});var Gs=n(Te);ca=r(Gs,"A dataset is a directory that contains:"),Gs.forEach(a),pa=l(m),Q=o(m,"UL",{});var qt=n(Q);He=o(qt,"LI",{});var Xs=n(He);ha=r(Xs,"some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),Xs.forEach(a),fa=l(qt),Oe=o(qt,"LI",{});var js=n(Oe);ma=r(js,"and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),js.forEach(a),qt.forEach(a),ga=l(m),Le=o(m,"P",{});var Ws=n(Le);ua=r(Ws,"Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),Ws.forEach(a),_a=l(m),Pe=o(m,"P",{});var Zs=n(Pe);ya=r(Zs,"This function does the following under the hood:"),Zs.forEach(a),va=l(m),q=o(m,"OL",{});var ke=n(q);x=o(ke,"LI",{});var J=n(x);ee=o(J,"P",{});var Ct=n(ee);ba=r(Ct,"Download and import in the library the dataset script from "),Ae=o(Ct,"CODE",{});var Ks=n(Ae);wa=r(Ks,"path"),Ks.forEach(a),Da=r(Ct," if it\u2019s not already cached inside the library."),Ct.forEach(a),xa=l(J),Me=o(J,"P",{});var Qs=n(Me);ka=r(Qs,"If the dataset has no dataset script, then a generic dataset script is imported instead (JSON, CSV, Parquet, text, etc.)"),Qs.forEach(a),$a=l(J),Ue=o(J,"P",{});var eo=n(Ue);Ea=r(eo,`Dataset scripts are small python scripts that define dataset builders. They define the citation, info and format of the dataset,
contain the path or URL to the original data files and the code to load examples from the original data files.`),eo.forEach(a),Na=l(J),Y=o(J,"P",{});var pt=n(Y);Sa=r(pt,"You can find some of the scripts here: "),te=o(pt,"A",{href:!0,rel:!0});var to=n(te);Ia=r(to,"https://github.com/huggingface/datasets/tree/master/datasets"),to.forEach(a),Fa=r(pt,`
You can find the complete list of datasets in the Datasets Hub at `),ae=o(pt,"A",{href:!0,rel:!0});var ao=n(ae);qa=r(ao,"https://huggingface.co/datasets"),ao.forEach(a),pt.forEach(a),J.forEach(a),Ca=l(ke),se=o(ke,"LI",{});var Tt=n(se);Ve=o(Tt,"P",{});var so=n(Ve);Ta=r(so,"Run the dataset script which will:"),so.forEach(a),Ha=l(Tt),oe=o(Tt,"UL",{});var Ht=n(oe);Re=o(Ht,"LI",{});var oo=n(Re);Be=o(oo,"P",{});var no=n(Be);Oa=r(no,"Download the dataset file from the original URL (see the script) if it\u2019s not already available locally or cached."),no.forEach(a),oo.forEach(a),La=l(Ht),ne=o(Ht,"LI",{});var Ot=n(ne);Ye=o(Ot,"P",{});var io=n(Ye);Pa=r(io,"Process and cache the dataset in typed Arrow tables for caching."),io.forEach(a),Aa=l(Ot),ze=o(Ot,"P",{});var ro=n(ze);Ma=r(ro,`Arrow table are arbitrarily long, typed tables which can store nested objects and be mapped to numpy/pandas/python generic types.
They can be directly accessed from disk, loaded in RAM or even streamed over the web.`),ro.forEach(a),Ot.forEach(a),Ht.forEach(a),Tt.forEach(a),Ua=l(ke),Je=o(ke,"LI",{});var lo=n(Je);ie=o(lo,"P",{});var Lt=n(ie);Va=r(Lt,"Return a dataset built from the requested splits in "),Ge=o(Lt,"CODE",{});var co=n(Ge);Ra=r(co,"split"),co.forEach(a),Ba=r(Lt," (default: all)."),Lt.forEach(a),lo.forEach(a),ke.forEach(a),Ya=l(m),Xe=o(m,"P",{});var po=n(Xe);za=r(po,`It also allows to load a dataset from a local directory or a dataset repository on the Hugging Face Hub without dataset script.
In this case, it automatically loads all the data files from the directory or the dataset repository.`),po.forEach(a),m.forEach(a),_t=l(t),C=o(t,"DIV",{class:!0});var Pt=n(C);_(re.$$.fragment,Pt),Ja=l(Pt),k=o(Pt,"P",{});var G=n(k);Ga=r(G,"Loads a dataset that was previously saved using "),we=o(G,"A",{href:!0});var ho=n(we);Xa=r(ho,"Dataset.save_to_disk()"),ho.forEach(a),ja=r(G,` from a dataset directory, or
from a filesystem using either `),De=o(G,"A",{href:!0});var fo=n(De);Wa=r(fo,"datasets.filesystems.S3FileSystem"),fo.forEach(a),Za=r(G,` or any implementation of
`),je=o(G,"CODE",{});var mo=n(je);Ka=r(mo,"fsspec.spec.AbstractFileSystem"),mo.forEach(a),Qa=r(G,"."),G.forEach(a),Pt.forEach(a),yt=l(t),g=o(t,"DIV",{class:!0});var D=n(g);_(de.$$.fragment,D),es=l(D),We=o(D,"P",{});var go=n(We);ts=r(go,`Load a dataset builder from the Hugging Face Hub, or a local dataset. A dataset builder can be used to inspect general information that is required to build a dataset (cache directory, config, dataset info, etc.)
without downloading the dataset itself.`),go.forEach(a),as=l(D),T=o(D,"P",{});var $e=n(T);ss=r($e,"You can find the list of datasets on the Hub at "),le=o($e,"A",{href:!0,rel:!0});var uo=n(le);os=r(uo,"https://huggingface.co/datasets"),uo.forEach(a),ns=r($e," or with "),Ze=o($e,"CODE",{});var _o=n(Ze);is=r(_o,"datasets.list_datasets()"),_o.forEach(a),rs=r($e,"."),$e.forEach(a),ds=l(D),Ke=o(D,"P",{});var yo=n(Ke);ls=r(yo,"A dataset is a directory that contains:"),yo.forEach(a),cs=l(D),ce=o(D,"UL",{});var At=n(ce);Qe=o(At,"LI",{});var vo=n(Qe);ps=r(vo,"some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),vo.forEach(a),hs=l(At),et=o(At,"LI",{});var bo=n(et);fs=r(bo,"and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),bo.forEach(a),At.forEach(a),ms=l(D),tt=o(D,"P",{});var wo=n(tt);gs=r(wo,"Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),wo.forEach(a),D.forEach(a),vt=l(t),H=o(t,"DIV",{class:!0});var Mt=n(H);_(pe.$$.fragment,Mt),us=l(Mt),at=o(Mt,"P",{});var Do=n(at);_s=r(Do,"Get the list of available config names for a particular dataset."),Do.forEach(a),Mt.forEach(a),bt=l(t),O=o(t,"DIV",{class:!0});var Ut=n(O);_(he.$$.fragment,Ut),ys=l(Ut),st=o(Ut,"P",{});var xo=n(st);vs=r(xo,"Get the meta information about a dataset, returned as a dict mapping config name to DatasetInfoDict."),xo.forEach(a),Ut.forEach(a),wt=l(t),L=o(t,"DIV",{class:!0});var Vt=n(L);_(fe.$$.fragment,Vt),bs=l(Vt),ot=o(Vt,"P",{});var ko=n(ot);ws=r(ko,"Get the list of available splits for a particular config and dataset."),ko.forEach(a),Vt.forEach(a),Dt=l(t),P=o(t,"DIV",{class:!0});var Rt=n(P);_(me.$$.fragment,Rt),Ds=l(Rt),nt=o(Rt,"P",{});var $o=n(nt);xs=r($o,"Allow inspection/modification of a dataset script by copying on local drive at local_path."),$o.forEach(a),Rt.forEach(a),xt=l(t),A=o(t,"H2",{class:!0});var Bt=n(A);z=o(Bt,"A",{id:!0,class:!0,href:!0});var Eo=n(z);it=o(Eo,"SPAN",{});var No=n(it);_(ge.$$.fragment,No),No.forEach(a),Eo.forEach(a),ks=l(Bt),rt=o(Bt,"SPAN",{});var So=n(rt);$s=r(So,"Metrics"),So.forEach(a),Bt.forEach(a),kt=l(t),M=o(t,"DIV",{class:!0});var Yt=n(M);_(ue.$$.fragment,Yt),Es=l(Yt),dt=o(Yt,"P",{});var Io=n(dt);Ns=r(Io,"List all the metrics script available on the Hugging Face Hub."),Io.forEach(a),Yt.forEach(a),$t=l(t),U=o(t,"DIV",{class:!0});var zt=n(U);_(_e.$$.fragment,zt),Ss=l(zt),ye=o(zt,"P",{});var Jt=n(ye);Is=r(Jt,"Load a "),lt=o(Jt,"EM",{});var Fo=n(lt);Fs=r(Fo,"datasets.Metric"),Fo.forEach(a),qs=r(Jt,"."),Jt.forEach(a),zt.forEach(a),Et=l(t),V=o(t,"DIV",{class:!0});var Gt=n(V);_(ve.$$.fragment,Gt),Cs=l(Gt),ct=o(Gt,"P",{});var qo=n(ct);Ts=r(qo,"Allow inspection/modification of a metric script by copying it on local drive at local_path."),qo.forEach(a),Gt.forEach(a),this.h()},h(){c(E,"name","hf:doc:metadata"),c(E,"content",JSON.stringify(Mo)),c(R,"id","loading-methods"),c(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R,"href","#loading-methods"),c(N,"class","relative group"),c(B,"id","datasets.list_datasets"),c(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B,"href","#datasets.list_datasets"),c(S,"class","relative group"),c(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K,"href","https://huggingface.co/datasets"),c(K,"rel","nofollow"),c(te,"href","https://github.com/huggingface/datasets/tree/master/datasets"),c(te,"rel","nofollow"),c(ae,"href","https://huggingface.co/datasets"),c(ae,"rel","nofollow"),c(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(we,"href","/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(De,"href","/docs/datasets/pr_4231/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(le,"href","https://huggingface.co/datasets"),c(le,"rel","nofollow"),c(g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z,"id","datasets.list_metrics"),c(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z,"href","#datasets.list_metrics"),c(A,"class","relative group"),c(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,E),h(t,ht,p),h(t,N,p),e(N,R),e(R,Ee),y(X,Ee,null),e(N,Xt),e(N,Ne),e(Ne,jt),h(t,ft,p),h(t,be,p),e(be,Wt),h(t,mt,p),h(t,S,p),e(S,B),e(B,Se),y(j,Se,null),e(S,Zt),e(S,Ie),e(Ie,Kt),h(t,gt,p),h(t,I,p),y(W,I,null),e(I,Qt),e(I,Fe),e(Fe,ea),h(t,ut,p),h(t,f,p),y(Z,f,null),e(f,ta),e(f,qe),e(qe,aa),e(f,sa),e(f,F),e(F,oa),e(F,K),e(K,na),e(F,ia),e(F,Ce),e(Ce,ra),e(F,da),e(f,la),e(f,Te),e(Te,ca),e(f,pa),e(f,Q),e(Q,He),e(He,ha),e(Q,fa),e(Q,Oe),e(Oe,ma),e(f,ga),e(f,Le),e(Le,ua),e(f,_a),e(f,Pe),e(Pe,ya),e(f,va),e(f,q),e(q,x),e(x,ee),e(ee,ba),e(ee,Ae),e(Ae,wa),e(ee,Da),e(x,xa),e(x,Me),e(Me,ka),e(x,$a),e(x,Ue),e(Ue,Ea),e(x,Na),e(x,Y),e(Y,Sa),e(Y,te),e(te,Ia),e(Y,Fa),e(Y,ae),e(ae,qa),e(q,Ca),e(q,se),e(se,Ve),e(Ve,Ta),e(se,Ha),e(se,oe),e(oe,Re),e(Re,Be),e(Be,Oa),e(oe,La),e(oe,ne),e(ne,Ye),e(Ye,Pa),e(ne,Aa),e(ne,ze),e(ze,Ma),e(q,Ua),e(q,Je),e(Je,ie),e(ie,Va),e(ie,Ge),e(Ge,Ra),e(ie,Ba),e(f,Ya),e(f,Xe),e(Xe,za),h(t,_t,p),h(t,C,p),y(re,C,null),e(C,Ja),e(C,k),e(k,Ga),e(k,we),e(we,Xa),e(k,ja),e(k,De),e(De,Wa),e(k,Za),e(k,je),e(je,Ka),e(k,Qa),h(t,yt,p),h(t,g,p),y(de,g,null),e(g,es),e(g,We),e(We,ts),e(g,as),e(g,T),e(T,ss),e(T,le),e(le,os),e(T,ns),e(T,Ze),e(Ze,is),e(T,rs),e(g,ds),e(g,Ke),e(Ke,ls),e(g,cs),e(g,ce),e(ce,Qe),e(Qe,ps),e(ce,hs),e(ce,et),e(et,fs),e(g,ms),e(g,tt),e(tt,gs),h(t,vt,p),h(t,H,p),y(pe,H,null),e(H,us),e(H,at),e(at,_s),h(t,bt,p),h(t,O,p),y(he,O,null),e(O,ys),e(O,st),e(st,vs),h(t,wt,p),h(t,L,p),y(fe,L,null),e(L,bs),e(L,ot),e(ot,ws),h(t,Dt,p),h(t,P,p),y(me,P,null),e(P,Ds),e(P,nt),e(nt,xs),h(t,xt,p),h(t,A,p),e(A,z),e(z,it),y(ge,it,null),e(A,ks),e(A,rt),e(rt,$s),h(t,kt,p),h(t,M,p),y(ue,M,null),e(M,Es),e(M,dt),e(dt,Ns),h(t,$t,p),h(t,U,p),y(_e,U,null),e(U,Ss),e(U,ye),e(ye,Is),e(ye,lt),e(lt,Fs),e(ye,qs),h(t,Et,p),h(t,V,p),y(ve,V,null),e(V,Cs),e(V,ct),e(ct,Ts),Nt=!0},p:Lo,i(t){Nt||(v(X.$$.fragment,t),v(j.$$.fragment,t),v(W.$$.fragment,t),v(Z.$$.fragment,t),v(re.$$.fragment,t),v(de.$$.fragment,t),v(pe.$$.fragment,t),v(he.$$.fragment,t),v(fe.$$.fragment,t),v(me.$$.fragment,t),v(ge.$$.fragment,t),v(ue.$$.fragment,t),v(_e.$$.fragment,t),v(ve.$$.fragment,t),Nt=!0)},o(t){b(X.$$.fragment,t),b(j.$$.fragment,t),b(W.$$.fragment,t),b(Z.$$.fragment,t),b(re.$$.fragment,t),b(de.$$.fragment,t),b(pe.$$.fragment,t),b(he.$$.fragment,t),b(fe.$$.fragment,t),b(me.$$.fragment,t),b(ge.$$.fragment,t),b(ue.$$.fragment,t),b(_e.$$.fragment,t),b(ve.$$.fragment,t),Nt=!1},d(t){a(E),t&&a(ht),t&&a(N),w(X),t&&a(ft),t&&a(be),t&&a(mt),t&&a(S),w(j),t&&a(gt),t&&a(I),w(W),t&&a(ut),t&&a(f),w(Z),t&&a(_t),t&&a(C),w(re),t&&a(yt),t&&a(g),w(de),t&&a(vt),t&&a(H),w(pe),t&&a(bt),t&&a(O),w(he),t&&a(wt),t&&a(L),w(fe),t&&a(Dt),t&&a(P),w(me),t&&a(xt),t&&a(A),w(ge),t&&a(kt),t&&a(M),w(ue),t&&a($t),t&&a(U),w(_e),t&&a(Et),t&&a(V),w(ve)}}}const Mo={local:"loading-methods",sections:[{local:"datasets.list_datasets",title:"Datasets"},{local:"datasets.list_metrics",title:"Metrics"}],title:"Loading methods"};function Uo(Os){return Po(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Yo extends Co{constructor(E){super();To(this,E,Uo,Ao,Ho,{})}}export{Yo as default,Mo as metadata};
