import{S as ql,i as wl,s as El,e as n,k as d,w as _,t as s,M as kl,c as i,d as e,m as c,a as r,x as $,h as l,b as m,G as t,g as p,y as j,q as v,o as b,B as q,v as yl}from"../chunks/vendor-hf-doc-builder.js";import{T as bl}from"../chunks/Tip-hf-doc-builder.js";import{I as Ba}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C}from"../chunks/CodeBlock-hf-doc-builder.js";function xl(wa){let h,P,g,w,x,u,A,I;return{c(){h=n("p"),P=s("To work with image datasets, you need to have the "),g=n("code"),w=s("vision"),x=s(" dependency installed. Check out the "),u=n("a"),A=s("installation"),I=s(" guide to learn how to install it."),this.h()},l(E){h=i(E,"P",{});var f=r(h);P=l(f,"To work with image datasets, you need to have the "),g=i(f,"CODE",{});var y=r(g);w=l(y,"vision"),y.forEach(e),x=l(f," dependency installed. Check out the "),u=i(f,"A",{href:!0});var H=r(u);A=l(H,"installation"),H.forEach(e),I=l(f," guide to learn how to install it."),f.forEach(e),this.h()},h(){m(u,"href","./installation#vision")},m(E,f){p(E,h,f),t(h,P),t(h,g),t(g,w),t(h,x),t(h,u),t(u,A),t(h,I)},d(E){E&&e(h)}}}function Il(wa){let h,P,g,w,x,u,A,I;return{c(){h=n("p"),P=s("Index into an image dataset using the row index first and then the "),g=n("code"),w=s("image"),x=s(" column - "),u=n("code"),A=s('dataset[0]["image"]'),I=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(E){h=i(E,"P",{});var f=r(h);P=l(f,"Index into an image dataset using the row index first and then the "),g=i(f,"CODE",{});var y=r(g);w=l(y,"image"),y.forEach(e),x=l(f," column - "),u=i(f,"CODE",{});var H=r(u);A=l(H,'dataset[0]["image"]'),H.forEach(e),I=l(f," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),f.forEach(e)},m(E,f){p(E,h,f),t(h,P),t(h,g),t(g,w),t(h,x),t(h,u),t(u,A),t(h,I)},d(E){E&&e(h)}}}function Pl(wa){let h,P,g,w,x,u,A,I,E,f,y,H,Ta,re,pe,_t,W,$t,D,de,Ma,ce,me,Ea,he,fe,jt,oa,vt,J,bt,K,ge,ka,ue,_e,qt,Y,Q,Ha,na,$e,Ya,je,wt,F,ve,ya,be,qe,xa,we,Ee,Et,ia,kt,L,ke,Ra,ye,xe,Ia,Ie,Pe,yt,ra,xt,R,V,Ua,pa,Ce,za,Ae,It,X,Oe,Ga,De,Fe,Pt,da,Ct,S,Le,Wa,Se,Ne,Ja,Be,Te,At,ca,Ot,Z,Me,Ka,He,Ye,Dt,ma,Ft,k,Qa,Re,Ue,Va,ze,Ge,Xa,We,Je,Za,Ke,Qe,Pa,Ve,Xe,Lt,U,aa,at,ha,Ze,tt,as,St,N,ts,et,es,ss,st,ls,os,Nt,fa,Bt,B,ns,lt,is,rs,ot,ps,ds,Tt,ga,Mt,z,ta,nt,ua,cs,it,ms,Ht,ea,hs,rt,fs,gs,Yt,_a,Rt,T,us,pt,_s,$s,dt,js,vs,Ut,$a,zt,G,sa,ct,ja,bs,mt,qs,Gt,la,ws,ht,Es,ks,Wt,va,Jt,M,ys,ft,xs,Is,gt,Ps,Cs,Kt,ba,Qt;return u=new Ba({}),W=new bl({props:{$$slots:{default:[xl]},$$scope:{ctx:wa}}}),oa=new C({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),J=new bl({props:{warning:!0,$$slots:{default:[Il]},$$scope:{ctx:wa}}}),na=new Ba({}),ia=new C({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),ra=new C({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),pa=new Ba({}),da=new C({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ca=new C({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),ma=new C({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ha=new Ba({}),fa=new C({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),ga=new C({props:{code:'dataset = load_dataset("imagefolder", data_dir="/path/to/folder", file_path="/path/to/folder/train/metadata.jsonl", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, file_path=<span class="hljs-string">&quot;/path/to/folder/train/metadata.jsonl&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ua=new Ba({}),_a=new C({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),$a=new C({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),ja=new Ba({}),va=new C({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),ba=new C({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){h=n("meta"),P=d(),g=n("h1"),w=n("a"),x=n("span"),_(u.$$.fragment),A=d(),I=n("span"),E=s("Load image data"),f=d(),y=n("p"),H=s("Image datasets are loaded from the "),Ta=n("code"),re=s("image"),pe=s(" column, which contains a PIL object."),_t=d(),_(W.$$.fragment),$t=d(),D=n("p"),de=s("When you load an image dataset and call the "),Ma=n("code"),ce=s("image"),me=s(" column, the "),Ea=n("a"),he=s("Image"),fe=s(" feature automatically decodes the PIL object into an image:"),jt=d(),_(oa.$$.fragment),vt=d(),_(J.$$.fragment),bt=d(),K=n("p"),ge=s("For a guide on how to load any type of dataset, take a look at the "),ka=n("a"),ue=s("general loading guide"),_e=s("."),qt=d(),Y=n("h2"),Q=n("a"),Ha=n("span"),_(na.$$.fragment),$e=d(),Ya=n("span"),je=s("Local files"),wt=d(),F=n("p"),ve=s("You can load a dataset from the image path. Use the "),ya=n("a"),be=s("cast_column()"),qe=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),xa=n("a"),we=s("Image"),Ee=s(" feature:"),Et=d(),_(ia.$$.fragment),kt=d(),L=n("p"),ke=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ra=n("code"),ye=s("decode=False"),xe=s(" in the "),Ia=n("a"),Ie=s("Image"),Pe=s(" feature:"),yt=d(),_(ra.$$.fragment),xt=d(),R=n("h2"),V=n("a"),Ua=n("span"),_(pa.$$.fragment),Ce=d(),za=n("span"),Ae=s("ImageFolder"),It=d(),X=n("p"),Oe=s("You can also load a dataset with a "),Ga=n("code"),De=s("ImageFolder"),Fe=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Pt=d(),_(da.$$.fragment),Ct=d(),S=n("p"),Le=s("Load your dataset by specifying "),Wa=n("code"),Se=s("imagefolder"),Ne=s(" and the directory of your dataset in "),Ja=n("code"),Be=s("data_dir"),Te=s(":"),At=d(),_(ca.$$.fragment),Ot=d(),Z=n("p"),Me=s("Load remote datasets from their URLs with the "),Ka=n("code"),He=s("data_files"),Ye=s(" parameter:"),Dt=d(),_(ma.$$.fragment),Ft=d(),k=n("p"),Qa=n("code"),Re=s("ImageFolder"),Ue=s(" creates a "),Va=n("code"),ze=s("label"),Ge=s(" column, and the label name is based on the directory name. To ignore the "),Xa=n("code"),We=s("label"),Je=s(" column, set "),Za=n("code"),Ke=s("drop_labels=False"),Qe=s(" as defined in "),Pa=n("a"),Ve=s("ImageFolderConfig"),Xe=s("."),Lt=d(),U=n("h2"),aa=n("a"),at=n("span"),_(ha.$$.fragment),Ze=d(),tt=n("span"),as=s("ImageFolder with metadata"),St=d(),N=n("p"),ts=s("Metadata associated with your dataset can also be loaded, extending the utility of "),et=n("code"),es=s("ImageFolder"),ss=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),st=n("code"),ls=s("metadata.jsonl"),os=s(" file:"),Nt=d(),_(fa.$$.fragment),Bt=d(),B=n("p"),ns=s("Link the metadata in "),lt=n("code"),is=s("metadata.jsonl"),rs=s(" file to the images using the "),ot=n("code"),ps=s("file_path"),ds=s(" parameter:"),Tt=d(),_(ga.$$.fragment),Mt=d(),z=n("h3"),ta=n("a"),nt=n("span"),_(ua.$$.fragment),cs=d(),it=n("span"),ms=s("Image captioning"),Ht=d(),ea=n("p"),hs=s("Image captioning datasets have text describing an image. An example "),rt=n("code"),fs=s("metadata.jsonl"),gs=s(" may look like:"),Yt=d(),_(_a.$$.fragment),Rt=d(),T=n("p"),us=s("Load the dataset with "),pt=n("code"),_s=s("ImageFolder"),$s=s(", and it will create a "),dt=n("code"),js=s("text"),vs=s(" column for the image captions:"),Ut=d(),_($a.$$.fragment),zt=d(),G=n("h3"),sa=n("a"),ct=n("span"),_(ja.$$.fragment),bs=d(),mt=n("span"),qs=s("Object detection"),Gt=d(),la=n("p"),ws=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ht=n("code"),Es=s("metadata.jsonl"),ks=s(" may look like:"),Wt=d(),_(va.$$.fragment),Jt=d(),M=n("p"),ys=s("Load the dataset with "),ft=n("code"),xs=s("ImageFolder"),Is=s(", and it will create a "),gt=n("code"),Ps=s("objects"),Cs=s(" column with the bounding boxes and the categories:"),Kt=d(),_(ba.$$.fragment),this.h()},l(a){const o=kl('[data-svelte="svelte-1phssyn"]',document.head);h=i(o,"META",{name:!0,content:!0}),o.forEach(e),P=c(a),g=i(a,"H1",{class:!0});var qa=r(g);w=i(qa,"A",{id:!0,class:!0,href:!0});var ut=r(w);x=i(ut,"SPAN",{});var As=r(x);$(u.$$.fragment,As),As.forEach(e),ut.forEach(e),A=c(qa),I=i(qa,"SPAN",{});var Os=r(I);E=l(Os,"Load image data"),Os.forEach(e),qa.forEach(e),f=c(a),y=i(a,"P",{});var Vt=r(y);H=l(Vt,"Image datasets are loaded from the "),Ta=i(Vt,"CODE",{});var Ds=r(Ta);re=l(Ds,"image"),Ds.forEach(e),pe=l(Vt," column, which contains a PIL object."),Vt.forEach(e),_t=c(a),$(W.$$.fragment,a),$t=c(a),D=i(a,"P",{});var Ca=r(D);de=l(Ca,"When you load an image dataset and call the "),Ma=i(Ca,"CODE",{});var Fs=r(Ma);ce=l(Fs,"image"),Fs.forEach(e),me=l(Ca," column, the "),Ea=i(Ca,"A",{href:!0});var Ls=r(Ea);he=l(Ls,"Image"),Ls.forEach(e),fe=l(Ca," feature automatically decodes the PIL object into an image:"),Ca.forEach(e),jt=c(a),$(oa.$$.fragment,a),vt=c(a),$(J.$$.fragment,a),bt=c(a),K=i(a,"P",{});var Xt=r(K);ge=l(Xt,"For a guide on how to load any type of dataset, take a look at the "),ka=i(Xt,"A",{href:!0});var Ss=r(ka);ue=l(Ss,"general loading guide"),Ss.forEach(e),_e=l(Xt,"."),Xt.forEach(e),qt=c(a),Y=i(a,"H2",{class:!0});var Zt=r(Y);Q=i(Zt,"A",{id:!0,class:!0,href:!0});var Ns=r(Q);Ha=i(Ns,"SPAN",{});var Bs=r(Ha);$(na.$$.fragment,Bs),Bs.forEach(e),Ns.forEach(e),$e=c(Zt),Ya=i(Zt,"SPAN",{});var Ts=r(Ya);je=l(Ts,"Local files"),Ts.forEach(e),Zt.forEach(e),wt=c(a),F=i(a,"P",{});var Aa=r(F);ve=l(Aa,"You can load a dataset from the image path. Use the "),ya=i(Aa,"A",{href:!0});var Ms=r(ya);be=l(Ms,"cast_column()"),Ms.forEach(e),qe=l(Aa," function to accept a column of image file paths, and decode it into a PIL image with the "),xa=i(Aa,"A",{href:!0});var Hs=r(xa);we=l(Hs,"Image"),Hs.forEach(e),Ee=l(Aa," feature:"),Aa.forEach(e),Et=c(a),$(ia.$$.fragment,a),kt=c(a),L=i(a,"P",{});var Oa=r(L);ke=l(Oa,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ra=i(Oa,"CODE",{});var Ys=r(Ra);ye=l(Ys,"decode=False"),Ys.forEach(e),xe=l(Oa," in the "),Ia=i(Oa,"A",{href:!0});var Rs=r(Ia);Ie=l(Rs,"Image"),Rs.forEach(e),Pe=l(Oa," feature:"),Oa.forEach(e),yt=c(a),$(ra.$$.fragment,a),xt=c(a),R=i(a,"H2",{class:!0});var ae=r(R);V=i(ae,"A",{id:!0,class:!0,href:!0});var Us=r(V);Ua=i(Us,"SPAN",{});var zs=r(Ua);$(pa.$$.fragment,zs),zs.forEach(e),Us.forEach(e),Ce=c(ae),za=i(ae,"SPAN",{});var Gs=r(za);Ae=l(Gs,"ImageFolder"),Gs.forEach(e),ae.forEach(e),It=c(a),X=i(a,"P",{});var te=r(X);Oe=l(te,"You can also load a dataset with a "),Ga=i(te,"CODE",{});var Ws=r(Ga);De=l(Ws,"ImageFolder"),Ws.forEach(e),Fe=l(te," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),te.forEach(e),Pt=c(a),$(da.$$.fragment,a),Ct=c(a),S=i(a,"P",{});var Da=r(S);Le=l(Da,"Load your dataset by specifying "),Wa=i(Da,"CODE",{});var Js=r(Wa);Se=l(Js,"imagefolder"),Js.forEach(e),Ne=l(Da," and the directory of your dataset in "),Ja=i(Da,"CODE",{});var Ks=r(Ja);Be=l(Ks,"data_dir"),Ks.forEach(e),Te=l(Da,":"),Da.forEach(e),At=c(a),$(ca.$$.fragment,a),Ot=c(a),Z=i(a,"P",{});var ee=r(Z);Me=l(ee,"Load remote datasets from their URLs with the "),Ka=i(ee,"CODE",{});var Qs=r(Ka);He=l(Qs,"data_files"),Qs.forEach(e),Ye=l(ee," parameter:"),ee.forEach(e),Dt=c(a),$(ma.$$.fragment,a),Ft=c(a),k=i(a,"P",{});var O=r(k);Qa=i(O,"CODE",{});var Vs=r(Qa);Re=l(Vs,"ImageFolder"),Vs.forEach(e),Ue=l(O," creates a "),Va=i(O,"CODE",{});var Xs=r(Va);ze=l(Xs,"label"),Xs.forEach(e),Ge=l(O," column, and the label name is based on the directory name. To ignore the "),Xa=i(O,"CODE",{});var Zs=r(Xa);We=l(Zs,"label"),Zs.forEach(e),Je=l(O," column, set "),Za=i(O,"CODE",{});var al=r(Za);Ke=l(al,"drop_labels=False"),al.forEach(e),Qe=l(O," as defined in "),Pa=i(O,"A",{href:!0});var tl=r(Pa);Ve=l(tl,"ImageFolderConfig"),tl.forEach(e),Xe=l(O,"."),O.forEach(e),Lt=c(a),U=i(a,"H2",{class:!0});var se=r(U);aa=i(se,"A",{id:!0,class:!0,href:!0});var el=r(aa);at=i(el,"SPAN",{});var sl=r(at);$(ha.$$.fragment,sl),sl.forEach(e),el.forEach(e),Ze=c(se),tt=i(se,"SPAN",{});var ll=r(tt);as=l(ll,"ImageFolder with metadata"),ll.forEach(e),se.forEach(e),St=c(a),N=i(a,"P",{});var Fa=r(N);ts=l(Fa,"Metadata associated with your dataset can also be loaded, extending the utility of "),et=i(Fa,"CODE",{});var ol=r(et);es=l(ol,"ImageFolder"),ol.forEach(e),ss=l(Fa," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),st=i(Fa,"CODE",{});var nl=r(st);ls=l(nl,"metadata.jsonl"),nl.forEach(e),os=l(Fa," file:"),Fa.forEach(e),Nt=c(a),$(fa.$$.fragment,a),Bt=c(a),B=i(a,"P",{});var La=r(B);ns=l(La,"Link the metadata in "),lt=i(La,"CODE",{});var il=r(lt);is=l(il,"metadata.jsonl"),il.forEach(e),rs=l(La," file to the images using the "),ot=i(La,"CODE",{});var rl=r(ot);ps=l(rl,"file_path"),rl.forEach(e),ds=l(La," parameter:"),La.forEach(e),Tt=c(a),$(ga.$$.fragment,a),Mt=c(a),z=i(a,"H3",{class:!0});var le=r(z);ta=i(le,"A",{id:!0,class:!0,href:!0});var pl=r(ta);nt=i(pl,"SPAN",{});var dl=r(nt);$(ua.$$.fragment,dl),dl.forEach(e),pl.forEach(e),cs=c(le),it=i(le,"SPAN",{});var cl=r(it);ms=l(cl,"Image captioning"),cl.forEach(e),le.forEach(e),Ht=c(a),ea=i(a,"P",{});var oe=r(ea);hs=l(oe,"Image captioning datasets have text describing an image. An example "),rt=i(oe,"CODE",{});var ml=r(rt);fs=l(ml,"metadata.jsonl"),ml.forEach(e),gs=l(oe," may look like:"),oe.forEach(e),Yt=c(a),$(_a.$$.fragment,a),Rt=c(a),T=i(a,"P",{});var Sa=r(T);us=l(Sa,"Load the dataset with "),pt=i(Sa,"CODE",{});var hl=r(pt);_s=l(hl,"ImageFolder"),hl.forEach(e),$s=l(Sa,", and it will create a "),dt=i(Sa,"CODE",{});var fl=r(dt);js=l(fl,"text"),fl.forEach(e),vs=l(Sa," column for the image captions:"),Sa.forEach(e),Ut=c(a),$($a.$$.fragment,a),zt=c(a),G=i(a,"H3",{class:!0});var ne=r(G);sa=i(ne,"A",{id:!0,class:!0,href:!0});var gl=r(sa);ct=i(gl,"SPAN",{});var ul=r(ct);$(ja.$$.fragment,ul),ul.forEach(e),gl.forEach(e),bs=c(ne),mt=i(ne,"SPAN",{});var _l=r(mt);qs=l(_l,"Object detection"),_l.forEach(e),ne.forEach(e),Gt=c(a),la=i(a,"P",{});var ie=r(la);ws=l(ie,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ht=i(ie,"CODE",{});var $l=r(ht);Es=l($l,"metadata.jsonl"),$l.forEach(e),ks=l(ie," may look like:"),ie.forEach(e),Wt=c(a),$(va.$$.fragment,a),Jt=c(a),M=i(a,"P",{});var Na=r(M);ys=l(Na,"Load the dataset with "),ft=i(Na,"CODE",{});var jl=r(ft);xs=l(jl,"ImageFolder"),jl.forEach(e),Is=l(Na,", and it will create a "),gt=i(Na,"CODE",{});var vl=r(gt);Ps=l(vl,"objects"),vl.forEach(e),Cs=l(Na," column with the bounding boxes and the categories:"),Na.forEach(e),Kt=c(a),$(ba.$$.fragment,a),this.h()},h(){m(h,"name","hf:doc:metadata"),m(h,"content",JSON.stringify(Cl)),m(w,"id","load-image-data"),m(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(w,"href","#load-image-data"),m(g,"class","relative group"),m(Ea,"href","/docs/datasets/pr_4512/en/package_reference/main_classes#datasets.Image"),m(ka,"href","./loading"),m(Q,"id","local-files"),m(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Q,"href","#local-files"),m(Y,"class","relative group"),m(ya,"href","/docs/datasets/pr_4512/en/package_reference/main_classes#datasets.Dataset.cast_column"),m(xa,"href","/docs/datasets/pr_4512/en/package_reference/main_classes#datasets.Image"),m(Ia,"href","/docs/datasets/pr_4512/en/package_reference/main_classes#datasets.Image"),m(V,"id","imagefolder"),m(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(V,"href","#imagefolder"),m(R,"class","relative group"),m(Pa,"href","/docs/datasets/pr_4512/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),m(aa,"id","imagefolder-with-metadata"),m(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(aa,"href","#imagefolder-with-metadata"),m(U,"class","relative group"),m(ta,"id","image-captioning"),m(ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ta,"href","#image-captioning"),m(z,"class","relative group"),m(sa,"id","object-detection"),m(sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(sa,"href","#object-detection"),m(G,"class","relative group")},m(a,o){t(document.head,h),p(a,P,o),p(a,g,o),t(g,w),t(w,x),j(u,x,null),t(g,A),t(g,I),t(I,E),p(a,f,o),p(a,y,o),t(y,H),t(y,Ta),t(Ta,re),t(y,pe),p(a,_t,o),j(W,a,o),p(a,$t,o),p(a,D,o),t(D,de),t(D,Ma),t(Ma,ce),t(D,me),t(D,Ea),t(Ea,he),t(D,fe),p(a,jt,o),j(oa,a,o),p(a,vt,o),j(J,a,o),p(a,bt,o),p(a,K,o),t(K,ge),t(K,ka),t(ka,ue),t(K,_e),p(a,qt,o),p(a,Y,o),t(Y,Q),t(Q,Ha),j(na,Ha,null),t(Y,$e),t(Y,Ya),t(Ya,je),p(a,wt,o),p(a,F,o),t(F,ve),t(F,ya),t(ya,be),t(F,qe),t(F,xa),t(xa,we),t(F,Ee),p(a,Et,o),j(ia,a,o),p(a,kt,o),p(a,L,o),t(L,ke),t(L,Ra),t(Ra,ye),t(L,xe),t(L,Ia),t(Ia,Ie),t(L,Pe),p(a,yt,o),j(ra,a,o),p(a,xt,o),p(a,R,o),t(R,V),t(V,Ua),j(pa,Ua,null),t(R,Ce),t(R,za),t(za,Ae),p(a,It,o),p(a,X,o),t(X,Oe),t(X,Ga),t(Ga,De),t(X,Fe),p(a,Pt,o),j(da,a,o),p(a,Ct,o),p(a,S,o),t(S,Le),t(S,Wa),t(Wa,Se),t(S,Ne),t(S,Ja),t(Ja,Be),t(S,Te),p(a,At,o),j(ca,a,o),p(a,Ot,o),p(a,Z,o),t(Z,Me),t(Z,Ka),t(Ka,He),t(Z,Ye),p(a,Dt,o),j(ma,a,o),p(a,Ft,o),p(a,k,o),t(k,Qa),t(Qa,Re),t(k,Ue),t(k,Va),t(Va,ze),t(k,Ge),t(k,Xa),t(Xa,We),t(k,Je),t(k,Za),t(Za,Ke),t(k,Qe),t(k,Pa),t(Pa,Ve),t(k,Xe),p(a,Lt,o),p(a,U,o),t(U,aa),t(aa,at),j(ha,at,null),t(U,Ze),t(U,tt),t(tt,as),p(a,St,o),p(a,N,o),t(N,ts),t(N,et),t(et,es),t(N,ss),t(N,st),t(st,ls),t(N,os),p(a,Nt,o),j(fa,a,o),p(a,Bt,o),p(a,B,o),t(B,ns),t(B,lt),t(lt,is),t(B,rs),t(B,ot),t(ot,ps),t(B,ds),p(a,Tt,o),j(ga,a,o),p(a,Mt,o),p(a,z,o),t(z,ta),t(ta,nt),j(ua,nt,null),t(z,cs),t(z,it),t(it,ms),p(a,Ht,o),p(a,ea,o),t(ea,hs),t(ea,rt),t(rt,fs),t(ea,gs),p(a,Yt,o),j(_a,a,o),p(a,Rt,o),p(a,T,o),t(T,us),t(T,pt),t(pt,_s),t(T,$s),t(T,dt),t(dt,js),t(T,vs),p(a,Ut,o),j($a,a,o),p(a,zt,o),p(a,G,o),t(G,sa),t(sa,ct),j(ja,ct,null),t(G,bs),t(G,mt),t(mt,qs),p(a,Gt,o),p(a,la,o),t(la,ws),t(la,ht),t(ht,Es),t(la,ks),p(a,Wt,o),j(va,a,o),p(a,Jt,o),p(a,M,o),t(M,ys),t(M,ft),t(ft,xs),t(M,Is),t(M,gt),t(gt,Ps),t(M,Cs),p(a,Kt,o),j(ba,a,o),Qt=!0},p(a,[o]){const qa={};o&2&&(qa.$$scope={dirty:o,ctx:a}),W.$set(qa);const ut={};o&2&&(ut.$$scope={dirty:o,ctx:a}),J.$set(ut)},i(a){Qt||(v(u.$$.fragment,a),v(W.$$.fragment,a),v(oa.$$.fragment,a),v(J.$$.fragment,a),v(na.$$.fragment,a),v(ia.$$.fragment,a),v(ra.$$.fragment,a),v(pa.$$.fragment,a),v(da.$$.fragment,a),v(ca.$$.fragment,a),v(ma.$$.fragment,a),v(ha.$$.fragment,a),v(fa.$$.fragment,a),v(ga.$$.fragment,a),v(ua.$$.fragment,a),v(_a.$$.fragment,a),v($a.$$.fragment,a),v(ja.$$.fragment,a),v(va.$$.fragment,a),v(ba.$$.fragment,a),Qt=!0)},o(a){b(u.$$.fragment,a),b(W.$$.fragment,a),b(oa.$$.fragment,a),b(J.$$.fragment,a),b(na.$$.fragment,a),b(ia.$$.fragment,a),b(ra.$$.fragment,a),b(pa.$$.fragment,a),b(da.$$.fragment,a),b(ca.$$.fragment,a),b(ma.$$.fragment,a),b(ha.$$.fragment,a),b(fa.$$.fragment,a),b(ga.$$.fragment,a),b(ua.$$.fragment,a),b(_a.$$.fragment,a),b($a.$$.fragment,a),b(ja.$$.fragment,a),b(va.$$.fragment,a),b(ba.$$.fragment,a),Qt=!1},d(a){e(h),a&&e(P),a&&e(g),q(u),a&&e(f),a&&e(y),a&&e(_t),q(W,a),a&&e($t),a&&e(D),a&&e(jt),q(oa,a),a&&e(vt),q(J,a),a&&e(bt),a&&e(K),a&&e(qt),a&&e(Y),q(na),a&&e(wt),a&&e(F),a&&e(Et),q(ia,a),a&&e(kt),a&&e(L),a&&e(yt),q(ra,a),a&&e(xt),a&&e(R),q(pa),a&&e(It),a&&e(X),a&&e(Pt),q(da,a),a&&e(Ct),a&&e(S),a&&e(At),q(ca,a),a&&e(Ot),a&&e(Z),a&&e(Dt),q(ma,a),a&&e(Ft),a&&e(k),a&&e(Lt),a&&e(U),q(ha),a&&e(St),a&&e(N),a&&e(Nt),q(fa,a),a&&e(Bt),a&&e(B),a&&e(Tt),q(ga,a),a&&e(Mt),a&&e(z),q(ua),a&&e(Ht),a&&e(ea),a&&e(Yt),q(_a,a),a&&e(Rt),a&&e(T),a&&e(Ut),q($a,a),a&&e(zt),a&&e(G),q(ja),a&&e(Gt),a&&e(la),a&&e(Wt),q(va,a),a&&e(Jt),a&&e(M),a&&e(Kt),q(ba,a)}}}const Cl={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function Al(wa){return yl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Sl extends ql{constructor(h){super();wl(this,h,Al,Pl,El,{})}}export{Sl as default,Cl as metadata};
