import{S as oae,i as lae,s as iae,e as r,k as m,w as _,t as i,M as pae,c as o,d as s,m as h,a as l,x as b,h as p,b as w,G as e,g as D,y as $,q as x,o as v,B as y,v as cae,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as dae}from"../../chunks/Tip-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as hs}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as T}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{D as mae}from"../../chunks/Deprecated-hf-doc-builder.js";function hae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function fae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function uae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function gae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function _ae(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function bae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function $ae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function xae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function vae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function yae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function jae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function wae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Dae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Eae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Iae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Aae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Fae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Lae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Sae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Oae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Cae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function zae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Uae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)

ds = load_dataset("imdb",split="train")
ds = ds.train_test_split(test_size=0.2, stratify_by_column="label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)

<span class="hljs-comment"># stratified split</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>,split=<span class="hljs-string">&quot;train&quot;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, stratify_by_column=<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">20000</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Hae(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Gae(k){let c,g,f,n,u;return n=new P({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Wae(k){let c,g,f,n,u;return n=new P({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Yae(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Jae(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Kae(k){let c,g,f,n,u;return n=new P({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Zae(k){let c,g,f,n,u;return n=new P({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Xae(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Qae(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ene(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function tne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function sne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ane(k){let c,g,f,n,u;return n=new P({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function nne(k){let c,g,f,n,u;return n=new P({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function rne(k){let c,g,f,n,u;return n=new P({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){c=r("p"),g=i("Default config is:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Default config is:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function one(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function lne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ine(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function pne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function cne(k){let c,g,f,n,u;return n=new P({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function dne(k){let c,g,f,n,u;return n=new P({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function mne(k){let c,g,f,n,u;return n=new P({props:{code:`
from datasets import Dataset, interleave_datasets
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12]})
d3 = Dataset.from_dict({"a": [20, 21, 22]})
dataset = interleave_datasets([d1, d2, d3])
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
dataset["a"]


from datasets import load_dataset, interleave_datasets
d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
dataset = interleave_datasets([d1, d2])
iterator = iter(dataset)
next(iterator)
next(iterator)`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function hne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function fne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function une(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function gne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function _ne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function bne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function $ne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function xne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function vne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function yne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function jne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function wne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Dne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ene(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ine(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ane(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Fne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Lne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Sne(k){let c,g,f,n,u;return n=new P({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function One(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Cne(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function zne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Vne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Une(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Mne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Rne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Bne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Hne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Gne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Wne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Yne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Jne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Kne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Zne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
ds = ds.skip(1)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Xne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Qne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ere(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function tre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function sre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function are(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function nre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function rre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.remove_columns("label")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ore(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function lre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ire(k){let c,g,f,n,u,t,d,dn,fs,Pr,Oe;return{c(){c=r("p"),g=i("A "),f=r("a"),n=i("datasets.Sequence"),u=i(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r("code"),d=i("list"),dn=i(` instead of the
`),fs=r("a"),Pr=i("datasets.Sequence"),Oe=i("."),this.h()},l(be){c=o(be,"P",{});var ne=l(c);g=p(ne,"A "),f=o(ne,"A",{href:!0});var us=l(f);n=p(us,"datasets.Sequence"),us.forEach(s),u=p(ne,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=o(ne,"CODE",{});var eu=l(t);d=p(eu,"list"),eu.forEach(s),dn=p(ne,` instead of the
`),fs=o(ne,"A",{href:!0});var Ar=l(fs);Pr=p(Ar,"datasets.Sequence"),Ar.forEach(s),Oe=p(ne,"."),ne.forEach(s),this.h()},h(){w(f,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Sequence"),w(fs,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Sequence")},m(be,ne){D(be,c,ne),e(c,g),e(c,f),e(f,n),e(c,u),e(c,t),e(t,d),e(c,dn),e(c,fs),e(fs,Pr),e(c,Oe)},d(be){be&&s(c)}}}function pre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
copy_of_features = ds.features.copy()
copy_of_features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function cre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features.flatten()
{<span class="hljs-string">&#x27;answers.answer_start&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;answers.text&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function dre(k){let c,g,f,n,u;return n=new P({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function mre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function hre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value, ClassLabel
features = Features({'post': Sequence(feature={'text': Value(dtype='string'), 'upvotes': Value(dtype='int32'), 'label': ClassLabel(num_classes=2, names=['hot', 'cold'])})})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>])})})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function fre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets Features
features = Features({'label': ClassLabel(num_classes=3, names=['bad', 'ok', 'good'])})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function ure(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].int2str(0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].int2str(<span class="hljs-number">0</span>)
<span class="hljs-string">&#x27;neg&#x27;</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function gre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].str2int('neg')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].str2int(<span class="hljs-string">&#x27;neg&#x27;</span>)
<span class="hljs-number">0</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function _re(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'stars': Value(dtype='int32')})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function bre(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function $re(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.TranslationVariableLanguages(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.TranslationVariableLanguages(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function xre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array2D(shape=(1, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array2D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function vre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array3D(shape=(1, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array3D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function yre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array4D(shape=(1, 2, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array4D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function jre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array5D(shape=(1, 2, 2, 3, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array5D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function wre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train")
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">2.3443763e-05</span>,  <span class="hljs-number">2.1729663e-04</span>,  <span class="hljs-number">2.2145823e-04</span>, ...,
     <span class="hljs-number">3.8356509e-05</span>, -<span class="hljs-number">7.3497440e-06</span>, -<span class="hljs-number">2.1754686e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Dre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Image
ds = load_dataset("beans", split="train")
ds.features["image"]
ds[0]["image"]
ds = ds.cast_column('image', Image(decode=False))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;image&quot;</span>]
Image(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x500 at <span class="hljs-number">0x15E52E7F0</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/healthy/healthy_train.85.jpg&#x27;</span>}`}}),{c(){c=r("p"),g=i("Examples:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Examples:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function kre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import MetricInfo
metric_info = MetricInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> MetricInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>metric_info = MetricInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Ere(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function qre(k){let c,g,f,n;return{c(){c=r("p"),g=i("Use our new library \u{1F917} Evaluate instead: "),f=r("a"),n=i("https://huggingface.co/docs/evaluate"),this.h()},l(u){c=o(u,"P",{});var t=l(c);g=p(t,"Use our new library \u{1F917} Evaluate instead: "),f=o(t,"A",{href:!0,rel:!0});var d=l(f);n=p(d,"https://huggingface.co/docs/evaluate"),d.forEach(s),t.forEach(s),this.h()},h(){w(f,"href","https://huggingface.co/docs/evaluate"),w(f,"rel","nofollow")},m(u,t){D(u,c,t),e(c,g),e(c,f),e(f,n)},d(u){u&&s(c)}}}function Ire(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add(predictions=model_predictions, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add(predictions=model_predictions, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Tre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add_batch(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add_batch(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Nre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
accuracy = metric.compute(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = metric.compute(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(c),t&&s(f),y(n,t)}}}function Pre(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)
s3.ls('public-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Are(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
s3.ls('my-private-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Fre(k){let c,g;return c=new P({props:{code:`import botocore
from datasets.filesystems import S3Filesystem

s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Lre(k){let c,g;return c=new P({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem

s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset = load_from_disk('s3://my-private-datasets/imdb/train', fs=s3)
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Sre(k){let c,g;return c=new P({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem

dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset.save_to_disk('s3://my-private-datasets/imdb/train', fs=s3)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Ore(k){let c,g,f,n,u,t,d,dn,fs,Pr,Oe,be,ne,us,eu,Ar,RD,$w,Q,Sp,BD,h$,HD,GD,tu,f$,WD,YD,JD,u$,KD,ZD,$e,Op,XD,Cp,QD,g$,ek,tk,sk,_$,ak,nk,b$,rk,ok,Fr,lk,gs,zp,ik,mn,pk,$$,ck,dk,x$,mk,hk,fk,Lr,xw,hn,Sr,v$,Vp,uk,y$,gk,vw,Or,_k,su,bk,$k,yw,q,Up,xk,j$,vk,yk,tt,Mp,jk,w$,wk,Dk,D$,k$,kk,Ek,Cr,qk,st,Rp,Ik,E$,Tk,Nk,q$,I$,Pk,Ak,zr,Fk,Vr,Bp,Lk,T$,Sk,Ok,Ur,Hp,Ck,N$,zk,Vk,xe,Gp,Uk,At,Mk,P$,Rk,Bk,A$,Hk,Gk,au,Wk,Yk,Jk,Wp,Kk,F$,Zk,Xk,Qk,Yp,e3,L$,t3,s3,a3,Mr,n3,Rr,Jp,r3,Ft,o3,S$,l3,i3,O$,p3,c3,nu,d3,m3,h3,_s,Kp,f3,C$,u3,g3,Br,_3,bs,Zp,b3,z$,$3,x3,Hr,v3,$s,Xp,y3,V$,j3,w3,Gr,D3,xs,Qp,k3,ec,E3,Wr,q3,U$,I3,T3,N3,P3,Yr,A3,vs,tc,F3,M$,L3,S3,Jr,O3,ys,sc,C3,R$,z3,V3,Kr,U3,at,ac,M3,B$,R3,B3,H$,H3,G3,Zr,W3,js,nc,Y3,G$,J3,K3,Xr,Z3,ws,rc,X3,W$,Q3,eE,Qr,tE,Ds,oc,sE,Y$,aE,nE,eo,rE,nt,lc,oE,J$,lE,iE,fn,pE,ru,cE,dE,K$,mE,hE,fE,to,uE,ks,ic,gE,Z$,_E,bE,so,$E,Es,pc,xE,X$,vE,yE,ao,jE,qs,cc,wE,dc,DE,Q$,kE,EE,qE,no,IE,Is,mc,TE,e2,NE,PE,ro,AE,Ts,hc,FE,t2,LE,SE,fc,OE,ou,CE,zE,VE,oo,uc,UE,un,ME,s2,RE,BE,a2,HE,GE,WE,ve,gc,YE,Ce,JE,n2,KE,ZE,r2,XE,QE,o2,e9,t9,lu,s9,a9,n9,ze,r9,l2,o9,l9,i2,i9,p9,p2,c9,d9,c2,m9,h9,f9,d2,u9,g9,lo,_9,Ns,_c,b9,rt,$9,m2,x9,v9,h2,y9,j9,iu,w9,D9,pu,k9,E9,io,q9,ot,bc,I9,$c,T9,f2,N9,P9,A9,cu,F9,u2,L9,S9,po,O9,ye,xc,C9,Lt,z9,g2,V9,U9,_2,M9,R9,b2,B9,H9,G9,vc,W9,du,Y9,J9,K9,gn,Z9,mu,X9,Q9,$2,e5,t5,s5,co,a5,je,yc,n5,_n,r5,x2,o5,l5,v2,i5,p5,c5,bn,d5,hu,m5,h5,fu,f5,u5,g5,$n,_5,uu,b5,$5,y2,x5,v5,y5,mo,j5,ho,jc,w5,j2,D5,k5,lt,wc,E5,w2,q5,I5,D2,T5,N5,fo,P5,we,Dc,A5,k2,F5,L5,kc,S5,E2,O5,C5,z5,xn,q2,V5,U5,I2,M5,R5,de,B5,T2,H5,G5,N2,W5,Y5,P2,J5,K5,A2,Z5,X5,F2,Q5,e6,t6,uo,s6,Ps,Ec,a6,L2,n6,r6,go,o6,As,qc,l6,S2,i6,p6,_o,c6,it,Ic,d6,O2,m6,h6,C2,f6,u6,bo,g6,pt,Tc,_6,z2,b6,$6,V2,x6,v6,$o,y6,ct,Nc,j6,Y,w6,U2,D6,k6,M2,E6,q6,R2,I6,T6,B2,N6,P6,H2,A6,F6,G2,L6,S6,W2,O6,C6,z6,Pc,V6,Y2,U6,M6,R6,xo,B6,re,Ac,H6,vn,G6,J2,W6,Y6,K2,J6,K6,Z6,Z2,X6,Q6,Fc,e8,X2,t8,s8,a8,Q2,n8,r8,vo,o8,Fs,Lc,l8,ex,i8,p8,yo,c8,dt,Sc,d8,tx,m8,h8,St,f8,gu,u8,g8,_u,_8,b8,sx,$8,x8,v8,jo,y8,Z,Oc,j8,yn,w8,bu,D8,k8,ax,E8,q8,I8,jn,T8,$u,N8,P8,xu,A8,F8,L8,Cc,S8,nx,O8,C8,z8,wo,V8,Do,U8,ko,M8,Ls,zc,R8,Ot,B8,rx,H8,G8,vu,W8,Y8,ox,J8,K8,Z8,Eo,X8,qo,Vc,Q8,lx,eq,tq,Ss,Uc,sq,ix,aq,nq,Io,rq,Os,Mc,oq,Rc,lq,px,iq,pq,cq,To,dq,Cs,Bc,mq,cx,hq,fq,No,uq,zs,Hc,gq,dx,_q,bq,Po,$q,Vs,Gc,xq,mx,vq,yq,Ao,jq,mt,Wc,wq,wn,Dq,hx,kq,Eq,fx,qq,Iq,Tq,ux,yu,Nq,Yc,Pq,Aq,Fo,Fq,Us,Jc,Lq,Ct,Sq,gx,Oq,Cq,_x,zq,Vq,bx,Uq,Mq,Rq,$x,ju,Bq,Kc,Hq,Gq,Lo,Zc,Wq,xx,Yq,Jq,Ms,Xc,Kq,vx,Zq,Xq,Qc,Qq,yx,eI,tI,sI,Rs,ed,aI,jx,nI,rI,So,oI,Bs,td,lI,wx,iI,pI,Oo,cI,Co,sd,dI,Dx,mI,hI,zo,ad,fI,kx,uI,gI,Vo,nd,_I,Ex,bI,$I,Uo,rd,xI,qx,vI,yI,Mo,od,jI,Ix,wI,DI,Ro,ld,kI,Tx,EI,qI,Bo,id,II,Nx,TI,NI,Ho,pd,PI,wu,Du,AI,FI,LI,Go,cd,SI,ku,Eu,OI,CI,zI,qu,dd,VI,Iu,md,UI,Tu,hd,MI,Nu,fd,RI,Pu,ud,BI,Au,gd,HI,Fu,_d,GI,Lu,bd,WI,Su,$d,YI,Ou,xd,JI,Cu,vd,KI,zu,yd,ZI,Vu,jd,XI,Hs,wd,QI,Px,eT,tT,Wo,sT,Gs,Dd,aT,Ax,nT,rT,Yo,oT,Ws,kd,lT,Fx,iT,pT,Jo,cT,Ys,Ed,dT,Lx,mT,hT,Ko,fT,Js,qd,uT,Dn,gT,Uu,_T,bT,Mu,$T,xT,vT,kn,yT,Sx,jT,wT,Ox,DT,kT,ET,Ks,Id,qT,Td,IT,Cx,TT,NT,PT,Zo,jw,zt,Nd,AT,En,FT,Ru,LT,ST,Bu,OT,CT,zT,Xo,ww,ee,Pd,VT,zx,UT,MT,qn,RT,Hu,BT,HT,Gu,GT,WT,YT,Ve,JT,Vx,KT,ZT,Ux,XT,QT,Mx,eN,tN,Rx,sN,aN,nN,Bx,rN,oN,Qo,Dw,me,Ad,lN,Hx,iN,pN,Gx,cN,dN,Wx,mN,hN,Ue,Yx,fN,uN,Jx,gN,_N,Kx,bN,$N,Fd,xN,Wu,vN,yN,jN,Vt,wN,Yu,DN,kN,Zx,EN,qN,Ju,IN,TN,kw,he,Ld,NN,Xx,PN,AN,Qx,FN,LN,e1,SN,ON,Me,t1,CN,zN,s1,VN,UN,a1,MN,RN,Sd,BN,Ku,HN,GN,WN,Ut,YN,Zu,JN,KN,n1,ZN,XN,Xu,QN,eP,Ew,fe,Od,tP,r1,sP,aP,o1,nP,rP,l1,oP,lP,Re,i1,iP,pP,p1,cP,dP,c1,mP,hP,Cd,fP,Qu,uP,gP,_P,Mt,bP,eg,$P,xP,d1,vP,yP,tg,jP,wP,qw,In,el,m1,zd,DP,h1,kP,Iw,tl,EP,f1,qP,IP,Tw,A,Vd,TP,u1,NP,PP,Zs,Ud,AP,g1,FP,LP,sl,SP,Xs,Md,OP,_1,CP,zP,al,VP,Qs,Rd,UP,b1,MP,RP,nl,BP,ea,Bd,HP,Hd,GP,rl,WP,$1,YP,JP,KP,ZP,ol,XP,ta,Gd,QP,x1,eA,tA,ll,sA,sa,Wd,aA,v1,nA,rA,il,oA,ht,Yd,lA,y1,iA,pA,j1,cA,dA,pl,mA,aa,Jd,hA,w1,fA,uA,cl,gA,na,Kd,_A,D1,bA,$A,dl,xA,ra,Zd,vA,k1,yA,jA,ml,wA,ft,Xd,DA,E1,kA,EA,q1,qA,IA,hl,TA,De,Qd,NA,I1,PA,AA,T1,FA,LA,N1,SA,OA,fl,CA,ke,em,zA,tm,VA,P1,UA,MA,RA,Be,BA,A1,HA,GA,F1,WA,YA,L1,JA,KA,S1,ZA,XA,QA,O1,eF,tF,ul,sF,ut,sm,aF,am,nF,C1,rF,oF,lF,sg,iF,z1,pF,cF,gl,dF,_l,nm,mF,Tn,hF,V1,fF,uF,U1,gF,_F,bF,Ee,rm,$F,Rt,xF,M1,vF,yF,R1,jF,wF,B1,DF,kF,EF,om,qF,ag,IF,TF,NF,Nn,PF,ng,AF,FF,H1,LF,SF,OF,bl,CF,qe,lm,zF,Pn,VF,G1,UF,MF,W1,RF,BF,HF,An,GF,rg,WF,YF,og,JF,KF,ZF,Fn,XF,Y1,QF,eL,J1,tL,sL,aL,$l,nL,oa,im,rL,K1,oL,lL,xl,iL,gt,pm,pL,Z1,cL,dL,Bt,mL,lg,hL,fL,X1,uL,gL,Q1,_L,bL,$L,vl,xL,la,cm,vL,ev,yL,jL,yl,wL,Ie,dm,DL,tv,kL,EL,sv,qL,IL,Ln,TL,ig,NL,PL,av,AL,FL,LL,jl,SL,Te,mm,OL,nv,CL,zL,Sn,VL,pg,UL,ML,rv,RL,BL,HL,hm,ov,GL,WL,lv,YL,JL,wl,KL,ia,fm,ZL,iv,XL,QL,Dl,eS,pa,um,tS,gm,sS,pv,aS,nS,rS,kl,oS,Ne,_m,lS,On,iS,cv,pS,cS,dv,dS,mS,hS,mv,fS,uS,Ht,gS,cg,_S,bS,dg,$S,xS,hv,vS,yS,jS,El,wS,oe,bm,DS,Cn,kS,mg,ES,qS,fv,IS,TS,NS,zn,PS,hg,AS,FS,fg,LS,SS,OS,$m,CS,uv,zS,VS,US,ql,MS,Il,RS,ca,xm,BS,Gt,HS,gv,GS,WS,ug,YS,JS,_v,KS,ZS,XS,Tl,QS,da,vm,eO,bv,tO,sO,Nl,aO,ma,ym,nO,$v,rO,oO,Pl,lO,ha,jm,iO,xv,pO,cO,Al,dO,fa,wm,mO,vv,hO,fO,Fl,uO,ua,Dm,gO,Vn,_O,gg,bO,$O,_g,xO,vO,yO,Un,jO,yv,wO,DO,jv,kO,EO,Nw,bg,Pw,Mn,Ll,wv,km,qO,Dv,IO,Aw,Sl,TO,$g,NO,PO,Fw,L,Em,AO,kv,FO,LO,ga,qm,SO,Ev,OO,CO,Ol,zO,_a,Im,VO,qv,UO,MO,Cl,RO,ba,Tm,BO,Iv,HO,GO,zl,WO,xg,Nm,YO,Pe,Pm,JO,Tv,KO,ZO,Am,XO,Nv,QO,eC,tC,Rn,Pv,sC,aC,Av,nC,rC,ue,oC,Fv,lC,iC,Lv,pC,cC,Sv,dC,mC,Ov,hC,fC,Cv,uC,gC,_C,Vl,bC,$a,Fm,$C,zv,xC,vC,Ul,yC,xa,Lm,jC,Vv,wC,DC,Ml,kC,le,Sm,EC,Uv,qC,IC,Mv,TC,NC,Om,PC,Rv,AC,FC,LC,Bn,SC,vg,OC,CC,yg,zC,VC,UC,Rl,MC,va,Cm,RC,zm,BC,Bv,HC,GC,WC,Bl,YC,ya,Vm,JC,Um,KC,Hv,ZC,XC,QC,Hl,ez,Gl,Mm,tz,jg,wg,sz,az,nz,Wl,Rm,rz,Dg,kg,oz,lz,iz,Eg,Bm,pz,qg,Hm,cz,Ig,Gm,dz,Tg,Wm,mz,Ng,Ym,hz,Pg,Jm,fz,Ag,Km,uz,Fg,Zm,gz,Lg,Xm,_z,Sg,Qm,bz,Og,eh,$z,Cg,th,xz,zg,sh,Lw,Hn,Yl,Gv,ah,vz,Wv,yz,Sw,Jl,jz,Yv,wz,Dz,Ow,U,nh,kz,Ae,rh,Ez,Jv,qz,Iz,oh,Tz,Kv,Nz,Pz,Az,Gn,Zv,Fz,Lz,Xv,Sz,Oz,ge,Cz,Qv,zz,Vz,ey,Uz,Mz,ty,Rz,Bz,sy,Hz,Gz,ay,Wz,Yz,Jz,Kl,Kz,ja,lh,Zz,ny,Xz,Qz,Zl,eV,ie,ih,tV,ry,sV,aV,oy,nV,rV,ph,oV,ly,lV,iV,pV,Wn,cV,Vg,dV,mV,Ug,hV,fV,uV,Xl,gV,wa,ch,_V,iy,bV,$V,Ql,xV,Da,dh,vV,py,yV,jV,ei,wV,ka,mh,DV,cy,kV,EV,ti,qV,Ea,hh,IV,dy,TV,NV,si,PV,qa,fh,AV,my,FV,LV,ai,SV,Ia,uh,OV,hy,CV,zV,ni,Cw,Yn,ri,fy,gh,VV,uy,UV,zw,O,_h,MV,gy,RV,BV,bh,HV,_y,GV,WV,YV,Mg,by,JV,KV,ZV,J,$y,Ta,XV,Rg,QV,eU,xy,tU,sU,vy,aU,nU,yy,$h,rU,Bg,oU,lU,iU,jy,xh,pU,wy,cU,dU,mU,vh,He,hU,Dy,fU,uU,Hg,gU,_U,ky,bU,$U,Gg,xU,vU,yU,oi,jU,Ey,Ge,wU,Wg,DU,kU,Yg,EU,qU,Jg,IU,TU,Kg,NU,PU,AU,qy,yh,FU,Zg,LU,SU,OU,Iy,Wt,CU,Xg,zU,VU,Ty,UU,MU,Ny,RU,BU,HU,Py,li,Qg,GU,WU,e_,YU,JU,KU,Na,jh,ZU,Ay,XU,QU,ii,eM,pi,wh,tM,Fy,sM,aM,ci,Dh,nM,Ly,rM,oM,di,kh,lM,Sy,iM,pM,mi,Eh,cM,Oy,dM,mM,hi,qh,hM,Cy,fM,uM,_t,Ih,gM,zy,_M,bM,Vy,$M,xM,fi,vM,ui,Th,yM,Uy,jM,wM,Fe,Nh,DM,My,kM,EM,Ry,qM,IM,Yt,TM,t_,NM,PM,s_,AM,FM,a_,LM,SM,OM,gi,CM,bt,Ph,zM,By,VM,UM,Hy,MM,RM,_i,Vw,Jt,Ah,BM,Gy,HM,GM,bi,Uw,B,Fh,WM,Wy,YM,JM,Lh,KM,Yy,ZM,XM,QM,Jn,n_,Jy,eR,tR,sR,r_,Ky,aR,nR,rR,o_,Zy,oR,lR,iR,Xy,pR,cR,$i,dR,Pa,Sh,mR,Qy,hR,fR,Oh,ej,uR,gR,tj,_R,bR,$t,Ch,$R,sj,xR,vR,aj,yR,jR,xi,wR,Aa,zh,DR,nj,kR,ER,vi,Mw,We,Vh,qR,rj,IR,TR,oj,NR,PR,yi,Rw,te,Uh,AR,l_,lj,FR,LR,SR,ij,OR,CR,Mh,zR,pj,VR,UR,MR,ji,RR,wi,Rh,BR,cj,HR,Bw,se,Bh,GR,i_,dj,WR,YR,JR,mj,KR,ZR,hj,XR,QR,Di,eB,ki,Hh,tB,fj,sB,Hw,Kt,Gh,aB,uj,nB,rB,Ei,Gw,Zt,Wh,oB,gj,lB,iB,qi,Ww,Xt,Yh,pB,_j,cB,dB,Ii,Yw,Qt,Jh,mB,bj,hB,fB,Ti,Jw,M,Kh,uB,$j,gB,_B,xj,bB,$B,Kn,vj,Zh,xB,yj,vB,yB,jB,Zn,Xh,wB,jj,DB,kB,EB,Qh,wj,qB,IB,Dj,TB,NB,kj,PB,AB,Xn,ef,FB,Ej,LB,SB,OB,Qn,qj,CB,zB,Ij,VB,UB,Tj,MB,RB,Nj,BB,HB,Ni,GB,Fa,tf,WB,Pj,YB,JB,es,Aj,KB,ZB,Fj,XB,QB,Lj,eH,tH,Sj,sH,aH,Pi,sf,nH,Oj,rH,oH,Ai,af,lH,Cj,iH,pH,Fi,nf,cH,zj,dH,mH,Li,rf,hH,Vj,fH,Kw,R,of,uH,Uj,gH,_H,Mj,bH,$H,ts,Rj,lf,xH,Bj,vH,yH,jH,er,pf,wH,Hj,DH,kH,EH,cf,Gj,qH,IH,Wj,TH,NH,Yj,PH,AH,Jj,df,FH,Kj,LH,SH,OH,Zj,mf,CH,Xj,zH,VH,UH,Si,MH,La,hf,RH,Qj,BH,HH,Ye,e7,GH,WH,t7,YH,JH,s7,KH,ZH,a7,XH,QH,n7,eG,tG,Oi,ff,sG,r7,aG,nG,Ci,uf,rG,o7,oG,lG,zi,gf,iG,l7,pG,cG,Vi,_f,dG,i7,mG,Zw,tr,Ui,p7,bf,hG,c7,fG,Xw,ae,$f,uG,d7,gG,_G,p_,m7,bG,$G,xG,h7,vG,yG,Sa,xf,jG,vf,wG,f7,DG,kG,EG,Mi,qG,Oa,yf,IG,ss,TG,u7,NG,PG,g7,AG,FG,_7,LG,SG,OG,Ri,Qw,sr,Bi,b7,jf,CG,$7,zG,e4,Ca,VG,x7,UG,MG,c_,RG,BG,t4,K,wf,HG,v7,GG,WG,Hi,YG,za,Df,JG,y7,KG,ZG,Gi,XG,Va,kf,QG,j7,eW,tW,Wi,sW,xt,Ef,aW,w7,nW,rW,D7,oW,lW,Yi,iW,Ji,qf,pW,k7,cW,s4,ar,Ki,E7,If,dW,q7,mW,a4,C,Tf,hW,Zi,I7,fW,uW,Nf,T7,gW,_W,bW,as,$W,N7,xW,vW,P7,yW,jW,A7,wW,DW,kW,F7,EW,qW,L7,IW,TW,Xi,NW,nr,PW,S7,AW,FW,O7,LW,SW,OW,Qi,CW,ns,zW,C7,VW,UW,z7,MW,RW,V7,BW,HW,GW,ep,WW,rr,YW,U7,JW,KW,d_,ZW,XW,QW,tp,eY,or,tY,M7,sY,aY,m_,nY,rY,oY,sp,n4,lr,Pf,lY,ir,iY,R7,pY,cY,B7,dY,mY,r4,pr,Af,hY,H7,fY,o4,cr,ap,G7,Ff,uY,W7,gY,l4,dr,Lf,_Y,Y7,bY,i4;return t=new hs({}),us=new hs({}),Sp=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:'<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.',name:"task_templates"},{anchor:"datasets.DatasetInfo.*config_kwargs",description:'*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.',name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/info.py#L87"}}),Op=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/info.py#L241"}}),Fr=new T({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[hae]},$$scope:{ctx:k}}}),zp=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/info.py#L182"}}),Lr=new T({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[fae]},$$scope:{ctx:k}}}),Vp=new hs({}),Up=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L650"}}),Mp=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L4364",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Cr=new T({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[uae]},$$scope:{ctx:k}}}),Rp=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L4603",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),zr=new T({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[gae]},$$scope:{ctx:k}}}),Bp=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L716",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Hp=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L751",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Gp=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L779",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Mr=new T({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[_ae]},$$scope:{ctx:k}}}),Jp=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L836",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Kp=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1235"}}),Br=new T({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[bae]},$$scope:{ctx:k}}}),Zp=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1255"}}),Hr=new T({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[$ae]},$$scope:{ctx:k}}}),Xp=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1273"}}),Gr=new T({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[xae]},$$scope:{ctx:k}}}),Qp=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1288"}}),Yr=new T({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[vae]},$$scope:{ctx:k}}}),tc=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1305"}}),Jr=new T({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[yae]},$$scope:{ctx:k}}}),sc=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1320"}}),Kr=new T({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[jae]},$$scope:{ctx:k}}}),ac=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1337",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Zr=new T({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[wae]},$$scope:{ctx:k}}}),nc=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"max_depth",val:" = 16"}],parametersDescription:[{anchor:"datasets.Dataset.flatten.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1441",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Xr=new T({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[Dae]},$$scope:{ctx:k}}}),rc=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1484",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Qr=new T({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[kae]},$$scope:{ctx:k}}}),oc=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"},{anchor:"datasets.Dataset.cast_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1560",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),eo=new T({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[Eae]},$$scope:{ctx:k}}}),lc=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1599",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),to=new T({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[qae]},$$scope:{ctx:k}}}),ic=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1648",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),so=new T({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[Iae]},$$scope:{ctx:k}}}),pc=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"},{anchor:"datasets.Dataset.rename_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1712",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ao=new T({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[Tae]},$$scope:{ctx:k}}}),cc=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1367"}}),no=new T({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[Nae]},$$scope:{ctx:k}}}),mc=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1778"}}),ro=new T({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[Pae]},$$scope:{ctx:k}}}),hc=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1807"}}),uc=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1827"}}),gc=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1855"}}),lo=new T({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[Aae]},$$scope:{ctx:k}}}),_c=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1956"}}),io=new T({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[Fae]},$$scope:{ctx:k}}}),bc=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1927"}}),po=new T({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[Lae]},$$scope:{ctx:k}}}),xc=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1996"}}),co=new T({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[Sae]},$$scope:{ctx:k}}}),yc=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2044"}}),mo=new T({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[Oae]},$$scope:{ctx:k}}}),jc=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2163"}}),wc=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2169",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),fo=new T({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[Cae]},$$scope:{ctx:k}}}),Dc=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2216"}}),uo=new T({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[zae]},$$scope:{ctx:k}}}),Ec=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2824"}}),go=new T({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[Vae]},$$scope:{ctx:k}}}),qc=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:`<strong>indices</strong> (range, list, iterable, ndarray or Series) &#x2014; Range, list or 1D-array of integer indices for indexing.
If the indices correspond to a contiguous range, the Arrow table is simply sliced.
However passing a list of indices that are not contiguous creates indices mapping, which is much less efficient,
but still faster than recreating an Arrow table made of the requested rows.`,name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2998"}}),_o=new T({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[Uae]},$$scope:{ctx:k}}}),Ic=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3239"}}),bo=new T({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[Mae]},$$scope:{ctx:k}}}),Tc=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3333"}}),$o=new T({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[Rae]},$$scope:{ctx:k}}}),Nc=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"stratify_by_column",val:": typing.Optional[str] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.stratify_by_column",description:"<strong>stratify_by_column</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The column name of labels to be used to perform stratified split of data.",name:"stratify_by_column"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3425"}}),xo=new T({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[Bae]},$$scope:{ctx:k}}}),Ac=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3693"}}),vo=new T({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[Hae]},$$scope:{ctx:k}}}),Lc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"batch_size",val:": int"},{name:"columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"shuffle",val:": bool = False"},{name:"collate_fn",val:": typing.Optional[typing.Callable] = None"},{name:"drop_remainder",val:": bool = False"},{name:"collate_fn_args",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:"<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.",name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>, optional) &#x2014; Dataset column(s) to load in the tf.data.Dataset. Column
names that are created by the <em>collate_fn</em> and that do not exist in the original dataset can be used.`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.shuffle(bool,",description:`<strong>shuffle(<code>bool</code>,</strong> default to <em>False</em>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"shuffle(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>False</code>) &#x2014; Drop the last incomplete batch when loading. Ensures
that all batches yielded by the dataset will have the same length on the batch dimension.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn(Callable,",description:`<strong>collate_fn(<code>Callable</code>,</strong> optional) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"collate_fn(Callable,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case
passing the labels here is optional, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L320",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),yo=new T({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[Gae]},$$scope:{ctx:k}}}),Sc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L4242"}}),jo=new T({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[Wae]},$$scope:{ctx:k}}}),Oc=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1046"}}),wo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[Yae]},$$scope:{ctx:k}}}),Do=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[Jae]},$$scope:{ctx:k}}}),ko=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[Kae]},$$scope:{ctx:k}}}),zc=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L1168",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Eo=new T({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[Zae]},$$scope:{ctx:k}}}),Vc=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2929"}}),Uc=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_csv.*to_csv_kwargs",description:"*<strong>*to_csv_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>",name:"*to_csv_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3849",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Io=new T({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[Xae]},$$scope:{ctx:k}}}),Mc=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3962",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),To=new T({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[Qae]},$$scope:{ctx:k}}}),Bc=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3882",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),No=new T({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[ene]},$$scope:{ctx:k}}}),Hc=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code></li>
</ul>`,name:"lines"},{anchor:"datasets.Dataset.to_json.*to_json_kwargs",description:'*<strong>*to_json_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.',name:"*to_json_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3917",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Po=new T({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[tne]},$$scope:{ctx:k}}}),Gc=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_parquet.*parquet_writer_kwargs",description:"*<strong>*parquet_writer_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>",name:"*parquet_writer_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L3999",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Ao=new T({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[sne]},$$scope:{ctx:k}}}),Wc=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.batch_size",description:"<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.",name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L4402"}}),Fo=new T({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[ane]},$$scope:{ctx:k}}}),Jc=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.batch_size",description:"<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.",name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L4478"}}),Zc=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L521"}}),Xc=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L534"}}),ed=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L4533"}}),So=new T({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[nne]},$$scope:{ctx:k}}}),td=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L612"}}),Oo=new T({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[rne]},$$scope:{ctx:k}}}),sd=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L426"}}),ad=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L430",returnType:`
<p><code>BaseIndex</code></p>
`}}),nd=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L656"}}),rd=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L664",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),od=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L679",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),ld=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L694",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),id=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/search.py#L713",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),pd=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L150"}}),cd=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L155"}}),dd=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L160"}}),md=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L164"}}),hd=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L168"}}),fd=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L172"}}),ud=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L176"}}),gd=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L180"}}),_d=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L184"}}),bd=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L188"}}),$d=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L192"}}),xd=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L196"}}),vd=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L200"}}),yd=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L204"}}),jd=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L212"}}),wd=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L875",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Wo=new T({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[one]},$$scope:{ctx:k}}}),Dd=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:"<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.",name:"field"},{anchor:"datasets.Dataset.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L910",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Yo=new T({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[lne]},$$scope:{ctx:k}}}),kd=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.Dataset.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L953",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Jo=new T({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[ine]},$$scope:{ctx:k}}}),Ed=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L998",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ko=new T({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[pne]},$$scope:{ctx:k}}}),qd=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L2089"}}),Id=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L4654"}}),Zo=new T({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[cne]},$$scope:{ctx:k}}}),Nd=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/combine.py#L94"}}),Xo=new T({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[dne]},$$scope:{ctx:k}}}),Pd=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:"<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.",name:"seed"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/combine.py#L16",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Qo=new T({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[mne]},$$scope:{ctx:k}}}),Ad=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/fingerprint.py#L96"}}),Ld=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/fingerprint.py#L117"}}),Od=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/fingerprint.py#L162"}}),zd=new hs({}),Vd=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L32"}}),Ud=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L62"}}),sl=new T({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[hne]},$$scope:{ctx:k}}}),Md=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L77"}}),al=new T({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[fne]},$$scope:{ctx:k}}}),Rd=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L95"}}),nl=new T({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[une]},$$scope:{ctx:k}}}),Bd=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L111"}}),ol=new T({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[gne]},$$scope:{ctx:k}}}),Gd=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L127"}}),ll=new T({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[_ne]},$$scope:{ctx:k}}}),Wd=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L145"}}),il=new T({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[bne]},$$scope:{ctx:k}}}),Yd=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L193",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),pl=new T({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[$ne]},$$scope:{ctx:k}}}),Jd=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L217",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),cl=new T({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[xne]},$$scope:{ctx:k}}}),Kd=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L682"}}),dl=new T({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[vne]},$$scope:{ctx:k}}}),Zd=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L794"}}),ml=new T({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[yne]},$$scope:{ctx:k}}}),Xd=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L884"}}),hl=new T({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[jne]},$$scope:{ctx:k}}}),Qd=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (a <em>ValueError</em> is raised if both are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L952"}}),fl=new T({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[wne]},$$scope:{ctx:k}}}),em=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L484"}}),ul=new T({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[Dne]},$$scope:{ctx:k}}}),sm=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L526"}}),gl=new T({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[kne]},$$scope:{ctx:k}}}),nm=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L451"}}),rm=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L582"}}),bl=new T({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[Ene]},$$scope:{ctx:k}}}),lm=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L631"}}),$l=new T({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[qne]},$$scope:{ctx:k}}}),im=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L161"}}),xl=new T({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[Ine]},$$scope:{ctx:k}}}),pm=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L241"}}),vl=new T({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[Tne]},$$scope:{ctx:k}}}),cm=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L275",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),yl=new T({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[Nne]},$$scope:{ctx:k}}}),dm=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L302"}}),jl=new T({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[Pne]},$$scope:{ctx:k}}}),mm=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L340"}}),wl=new T({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[Ane]},$$scope:{ctx:k}}}),fm=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L383",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Dl=new T({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[Fne]},$$scope:{ctx:k}}}),um=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L420"}}),kl=new T({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[Lne]},$$scope:{ctx:k}}}),_m=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1283"}}),El=new T({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[Sne]},$$scope:{ctx:k}}}),bm=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1028"}}),ql=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[One]},$$scope:{ctx:k}}}),Il=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[Cne]},$$scope:{ctx:k}}}),xm=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1076",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Tl=new T({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[zne]},$$scope:{ctx:k}}}),vm=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1123",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Nl=new T({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[Vne]},$$scope:{ctx:k}}}),ym=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1157",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Pl=new T({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[Une]},$$scope:{ctx:k}}}),jm=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.DatasetDict.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1191",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Al=new T({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[Mne]},$$scope:{ctx:k}}}),wm=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1234",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Fl=new T({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[Rne]},$$scope:{ctx:k}}}),Dm=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1268"}}),km=new hs({}),Em=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L664"}}),qm=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L1132",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ol=new T({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[Bne]},$$scope:{ctx:k}}}),Im=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L1158",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Cl=new T({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[Hne]},$$scope:{ctx:k}}}),Tm=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L1206",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),zl=new T({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[Gne]},$$scope:{ctx:k}}}),Nm=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L717"}}),Pm=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L752"}}),Vl=new T({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[Wne]},$$scope:{ctx:k}}}),Fm=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L1064",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ul=new T({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[Yne]},$$scope:{ctx:k}}}),Lm=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L846"}}),Ml=new T({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[Jne]},$$scope:{ctx:k}}}),Sm=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L913"}}),Rl=new T({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[Kne]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L979"}}),Bl=new T({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[Zne]},$$scope:{ctx:k}}}),Vm=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/iterable_dataset.py#L1016"}}),Hl=new T({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[Xne]},$$scope:{ctx:k}}}),Mm=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L150"}}),Rm=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L155"}}),Bm=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L160"}}),Hm=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L164"}}),Gm=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L168"}}),Wm=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L172"}}),Ym=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L176"}}),Jm=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L180"}}),Km=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L184"}}),Zm=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L188"}}),Xm=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L192"}}),Qm=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L196"}}),eh=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L200"}}),th=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L204"}}),sh=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/arrow_dataset.py#L212"}}),ah=new hs({}),nh=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1384"}}),rh=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1414"}}),Kl=new T({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[Qne]},$$scope:{ctx:k}}}),lh=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1492"}}),Zl=new T({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[ere]},$$scope:{ctx:k}}}),ih=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1546"}}),Xl=new T({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[tre]},$$scope:{ctx:k}}}),ch=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1385"}}),Ql=new T({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[sre]},$$scope:{ctx:k}}}),dh=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1713",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ei=new T({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[are]},$$scope:{ctx:k}}}),mh=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1684",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ti=new T({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[nre]},$$scope:{ctx:k}}}),hh=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1659",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),si=new T({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[rre]},$$scope:{ctx:k}}}),fh=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1601",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ai=new T({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[ore]},$$scope:{ctx:k}}}),uh=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/dataset_dict.py#L1632",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ni=new T({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[lre]},$$scope:{ctx:k}}}),gh=new hs({}),_h=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1481"}}),oi=new dae({props:{$$slots:{default:[ire]},$$scope:{ctx:k}}}),jh=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1690",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ii=new T({props:{anchor:"datasets.Features.copy.example",$$slots:{default:[pre]},$$scope:{ctx:k}}}),wh=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1672",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Dh=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1656",returnDescription:`
<p><code>list[Any]</code></p>
`}}),kh=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1634",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Eh=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1616",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),qh=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1603",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Ih=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1771",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),fi=new T({props:{anchor:"datasets.Features.flatten.example",$$slots:{default:[cre]},$$scope:{ctx:k}}}),Th=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1552",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Nh=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1572",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),gi=new T({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[dre]},$$scope:{ctx:k}}}),Ph=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1710",returnType:`
<p><a
  href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),_i=new T({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[mre]},$$scope:{ctx:k}}}),Ah=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Sequence.length",description:"<strong>length</strong> (<code>int</code>) &#x2014; Length of the sequence.",name:"length"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1053"}}),bi=new T({props:{anchor:"datasets.Sequence.example",$$slots:{default:[hre]},$$scope:{ctx:k}}}),Fh=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L862"}}),$i=new T({props:{anchor:"datasets.ClassLabel.example",$$slots:{default:[fre]},$$scope:{ctx:k}}}),Sh=new E({props:{name:"cast_storage",anchor:"datasets.ClassLabel.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.IntegerArray]"}],parametersDescription:[{anchor:"datasets.ClassLabel.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.IntegerArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L1021",returnDescription:`
<p>Array in the ClassLabel arrow storage type</p>
`,returnType:`
<p>pa.Int64Array</p>
`}}),Ch=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L975"}}),xi=new T({props:{anchor:"datasets.ClassLabel.int2str.example",$$slots:{default:[ure]},$$scope:{ctx:k}}}),zh=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L930"}}),vi=new T({props:{anchor:"datasets.ClassLabel.str2int.example",$$slots:{default:[gre]},$$scope:{ctx:k}}}),Vh=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L418"}}),yi=new T({props:{anchor:"datasets.Value.example",$$slots:{default:[_re]},$$scope:{ctx:k}}}),Uh=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/translation.py#L12"}}),ji=new T({props:{anchor:"datasets.Translation.example",$$slots:{default:[bre]},$$scope:{ctx:k}}}),Rh=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/translation.py#L46"}}),Bh=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/translation.py#L54"}}),Di=new T({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[$re]},$$scope:{ctx:k}}}),Hh=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/translation.py#L123"}}),Gh=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array2D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array2D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L503"}}),Ei=new T({props:{anchor:"datasets.Array2D.example",$$slots:{default:[xre]},$$scope:{ctx:k}}}),Wh=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array3D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array3D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L526"}}),qi=new T({props:{anchor:"datasets.Array3D.example",$$slots:{default:[vre]},$$scope:{ctx:k}}}),Yh=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array4D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array4D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L549"}}),Ii=new T({props:{anchor:"datasets.Array4D.example",$$slots:{default:[yre]},$$scope:{ctx:k}}}),Jh=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array5D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array5D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/features.py#L572"}}),Ti=new T({props:{anchor:"datasets.Array5D.example",$$slots:{default:[jre]},$$scope:{ctx:k}}}),Kh=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/audio.py#L21"}}),Ni=new T({props:{anchor:"datasets.Audio.example",$$slots:{default:[wre]},$$scope:{ctx:k}}}),tf=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/audio.py#L170",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),sf=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/audio.py#L120",returnDescription:`
<p>dict</p>
`}}),af=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/audio.py#L203",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),nf=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/audio.py#L74",returnType:`
<p><code>dict</code></p>
`}}),rf=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/audio.py#L159"}}),of=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/image.py#L26"}}),Si=new T({props:{anchor:"datasets.Image.example",$$slots:{default:[Dre]},$$scope:{ctx:k}}}),hf=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/image.py#L166",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),ff=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/image.py#L104",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),uf=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/image.py#L215",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),gf=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/image.py#L70",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),_f=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/features/image.py#L153"}}),bf=new hs({}),$f=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/info.py#L317"}}),xf=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/info.py#L372"}}),Mi=new T({props:{anchor:"datasets.MetricInfo.from_directory.example",$$slots:{default:[kre]},$$scope:{ctx:k}}}),yf=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/info.py#L352"}}),Ri=new T({props:{anchor:"datasets.MetricInfo.write_to_directory.example",$$slots:{default:[Ere]},$$scope:{ctx:k}}}),jf=new hs({}),wf=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/metric.py#L146"}}),Hi=new mae({props:{version:"2.4.0",$$slots:{default:[qre]},$$scope:{ctx:k}}}),Df=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/metric.py#L521"}}),Gi=new T({props:{anchor:"datasets.Metric.add.example",$$slots:{default:[Ire]},$$scope:{ctx:k}}}),kf=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/metric.py#L474"}}),Wi=new T({props:{anchor:"datasets.Metric.add_batch.example",$$slots:{default:[Tre]},$$scope:{ctx:k}}}),Ef=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/metric.py#L403",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),Yi=new T({props:{anchor:"datasets.Metric.compute.example",$$slots:{default:[Nre]},$$scope:{ctx:k}}}),qf=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/metric.py#L604"}}),If=new hs({}),Tf=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.filesystems.S3FileSystem.anon",description:`<strong>anon</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to use anonymous connection (public buckets only). If False, uses the key/secret given,
or boto&#x2019;s credential resolver (client_kwargs, environment, variables, config files, EC2 IAM server, in that order).`,name:"anon"},{anchor:"datasets.filesystems.S3FileSystem.key",description:"<strong>key</strong> (<code>str</code>) &#x2014; If not anonymous, use this access key ID, if specified.",name:"key"},{anchor:"datasets.filesystems.S3FileSystem.secret",description:"<strong>secret</strong> (<code>str</code>) &#x2014; If not anonymous, use this secret access key, if specified.",name:"secret"},{anchor:"datasets.filesystems.S3FileSystem.token",description:"<strong>token</strong> (<code>str</code>) &#x2014; If not anonymous, use this security token, if specified.",name:"token"},{anchor:"datasets.filesystems.S3FileSystem.use_ssl",description:`<strong>use_ssl</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use SSL in connections to S3; may be faster without, but insecure. If <code>use_ssl</code> is
also set in <code>client_kwargs</code>, the value set in <code>client_kwargs</code> will take priority.`,name:"use_ssl"},{anchor:"datasets.filesystems.S3FileSystem.s3_additional_kwargs",description:`<strong>s3_additional_kwargs</strong> (<code>dict</code>) &#x2014; Parameters that are used when calling S3 API methods. Typically used for things
like ServerSideEncryption.`,name:"s3_additional_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.client_kwargs",description:"<strong>client_kwargs</strong> (<code>dict</code>) &#x2014; Parameters for the botocore client.",name:"client_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.requester_pays",description:"<strong>requester_pays</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether RequesterPays buckets are supported.",name:"requester_pays"},{anchor:"datasets.filesystems.S3FileSystem.default_block_size",description:`<strong>default_block_size</strong> (<code>int</code>) &#x2014; If given, the default block size value used for <code>open()</code>, if no specific value is given at all time.
The built-in default is 5MB.`,name:"default_block_size"},{anchor:"datasets.filesystems.S3FileSystem.default_fill_cache",description:"<strong>default_fill_cache</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use cache filling with open by default. Refer to <code>S3File.open</code>.",name:"default_fill_cache"},{anchor:"datasets.filesystems.S3FileSystem.default_cache_type",description:`<strong>default_cache_type</strong> (<code>str</code>, default to <code>bytes</code>) &#x2014; If given, the default cache_type value used for <code>open()</code>. Set to <code>none</code> if no
caching is desired. See fsspec&#x2019;s documentation for other available cache_type values.`,name:"default_cache_type"},{anchor:"datasets.filesystems.S3FileSystem.version_aware",description:`<strong>version_aware</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to support bucket versioning. If enable this will require the user to have
the necessary IAM permissions for dealing with versioned objects.`,name:"version_aware"},{anchor:"datasets.filesystems.S3FileSystem.cache_regions",description:`<strong>cache_regions</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to cache bucket regions. Whenever a new bucket is used, it will
first find out which region it belongs to and then use the client for that region.`,name:"cache_regions"},{anchor:"datasets.filesystems.S3FileSystem.asynchronous",description:"<strong>asynchronous</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether this instance is to be used from inside coroutines.",name:"asynchronous"},{anchor:"datasets.filesystems.S3FileSystem.config_kwargs",description:`<strong>config_kwargs</strong> (<code>dict</code>) &#x2014; Parameters passed to <code>botocore.client.Config</code>.
kwargs &#x2014; Other parameters for core session.`,name:"config_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.session",description:`<strong>session</strong> (<code>aiobotocore.session.AioSession</code>) &#x2014; Session to be used for all connections. This session will be used inplace of creating
a new session inside S3FileSystem. For example: <code>aiobotocore.session.AioSession(profile=&apos;test_user&apos;)</code>.`,name:"session"},{anchor:"datasets.filesystems.S3FileSystem.skip_instance_cache",description:"<strong>skip_instance_cache</strong> (<code>bool</code>) &#x2014; Control reuse of instances. Passed on to <code>fsspec</code>.",name:"skip_instance_cache"},{anchor:"datasets.filesystems.S3FileSystem.use_listings_cache",description:"<strong>use_listings_cache</strong> (<code>bool</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"use_listings_cache"},{anchor:"datasets.filesystems.S3FileSystem.listings_expiry_time",description:"<strong>listings_expiry_time</strong> (<code>int</code> or <code>float</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"listings_expiry_time"},{anchor:"datasets.filesystems.S3FileSystem.max_paths",description:"<strong>max_paths</strong> (<code>int</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"max_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/filesystems/s3filesystem.py#L4"}}),Xi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[Pre]},$$scope:{ctx:k}}}),Qi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[Are]},$$scope:{ctx:k}}}),ep=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[Fre]},$$scope:{ctx:k}}}),tp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[Lre]},$$scope:{ctx:k}}}),sp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[Sre]},$$scope:{ctx:k}}}),Pf=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/filesystems/__init__.py#L28"}}),Af=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/filesystems/__init__.py#L40"}}),Ff=new hs({}),Lf=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4739/src/datasets/fingerprint.py#L212"}}),{c(){c=r("meta"),g=m(),f=r("h1"),n=r("a"),u=r("span"),_(t.$$.fragment),d=m(),dn=r("span"),fs=i("Main classes"),Pr=m(),Oe=r("h2"),be=r("a"),ne=r("span"),_(us.$$.fragment),eu=m(),Ar=r("span"),RD=i("DatasetInfo"),$w=m(),Q=r("div"),_(Sp.$$.fragment),BD=m(),h$=r("p"),HD=i("Information about a dataset."),GD=m(),tu=r("p"),f$=r("em"),WD=i("DatasetInfo"),YD=i(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),JD=m(),u$=r("p"),KD=i("Note: Not all fields are known on construction and may be updated later."),ZD=m(),$e=r("div"),_(Op.$$.fragment),XD=m(),Cp=r("p"),QD=i("Create DatasetInfo from the JSON file in "),g$=r("code"),ek=i("dataset_info_dir"),tk=i("."),sk=m(),_$=r("p"),ak=i(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),nk=m(),b$=r("p"),rk=i("This will overwrite all previous metadata."),ok=m(),_(Fr.$$.fragment),lk=m(),gs=r("div"),_(zp.$$.fragment),ik=m(),mn=r("p"),pk=i("Write "),$$=r("em"),ck=i("DatasetInfo"),dk=i(" and license (if present) as JSON files to "),x$=r("em"),mk=i("dataset_info_dir"),hk=i("."),fk=m(),_(Lr.$$.fragment),xw=m(),hn=r("h2"),Sr=r("a"),v$=r("span"),_(Vp.$$.fragment),uk=m(),y$=r("span"),gk=i("Dataset"),vw=m(),Or=r("p"),_k=i("The base class "),su=r("a"),bk=i("Dataset"),$k=i(" implements a Dataset backed by an Apache Arrow table."),yw=m(),q=r("div"),_(Up.$$.fragment),xk=m(),j$=r("p"),vk=i("A Dataset backed by an Arrow table."),yk=m(),tt=r("div"),_(Mp.$$.fragment),jk=m(),w$=r("p"),wk=i("Add column to Dataset."),Dk=m(),D$=r("p"),k$=r("em"),kk=i("New in version 1.7."),Ek=m(),_(Cr.$$.fragment),qk=m(),st=r("div"),_(Rp.$$.fragment),Ik=m(),E$=r("p"),Tk=i("Add item to Dataset."),Nk=m(),q$=r("p"),I$=r("em"),Pk=i("New in version 1.7."),Ak=m(),_(zr.$$.fragment),Fk=m(),Vr=r("div"),_(Bp.$$.fragment),Lk=m(),T$=r("p"),Sk=i("Instantiate a Dataset backed by an Arrow table at filename."),Ok=m(),Ur=r("div"),_(Hp.$$.fragment),Ck=m(),N$=r("p"),zk=i("Instantiate a Dataset backed by an Arrow buffer."),Vk=m(),xe=r("div"),_(Gp.$$.fragment),Uk=m(),At=r("p"),Mk=i("Convert "),P$=r("code"),Rk=i("pandas.DataFrame"),Bk=i(" to a "),A$=r("code"),Hk=i("pyarrow.Table"),Gk=i(" to create a "),au=r("a"),Wk=i("Dataset"),Yk=i("."),Jk=m(),Wp=r("p"),Kk=i(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),F$=r("em"),Zk=i("object"),Xk=i(", we need to guess the datatype by looking at the Python objects in this Series."),Qk=m(),Yp=r("p"),e3=i("Be aware that Series of the "),L$=r("em"),t3=i("object"),s3=i(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),a3=m(),_(Mr.$$.fragment),n3=m(),Rr=r("div"),_(Jp.$$.fragment),r3=m(),Ft=r("p"),o3=i("Convert "),S$=r("code"),l3=i("dict"),i3=i(" to a "),O$=r("code"),p3=i("pyarrow.Table"),c3=i(" to create a "),nu=r("a"),d3=i("Dataset"),m3=i("."),h3=m(),_s=r("div"),_(Kp.$$.fragment),f3=m(),C$=r("p"),u3=i("The Apache Arrow table backing the dataset."),g3=m(),_(Br.$$.fragment),_3=m(),bs=r("div"),_(Zp.$$.fragment),b3=m(),z$=r("p"),$3=i("The cache files containing the Apache Arrow table backing the dataset."),x3=m(),_(Hr.$$.fragment),v3=m(),$s=r("div"),_(Xp.$$.fragment),y3=m(),V$=r("p"),j3=i("Number of columns in the dataset."),w3=m(),_(Gr.$$.fragment),D3=m(),xs=r("div"),_(Qp.$$.fragment),k3=m(),ec=r("p"),E3=i("Number of rows in the dataset (same as "),Wr=r("a"),q3=i("Dataset."),U$=r("strong"),I3=i("len"),T3=i("()"),N3=i(")."),P3=m(),_(Yr.$$.fragment),A3=m(),vs=r("div"),_(tc.$$.fragment),F3=m(),M$=r("p"),L3=i("Names of the columns in the dataset."),S3=m(),_(Jr.$$.fragment),O3=m(),ys=r("div"),_(sc.$$.fragment),C3=m(),R$=r("p"),z3=i("Shape of the dataset (number of columns, number of rows)."),V3=m(),_(Kr.$$.fragment),U3=m(),at=r("div"),_(ac.$$.fragment),M3=m(),B$=r("p"),R3=i("Return a list of the unique elements in a column."),B3=m(),H$=r("p"),H3=i("This is implemented in the low-level backend and as such, very fast."),G3=m(),_(Zr.$$.fragment),W3=m(),js=r("div"),_(nc.$$.fragment),Y3=m(),G$=r("p"),J3=i(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),K3=m(),_(Xr.$$.fragment),Z3=m(),ws=r("div"),_(rc.$$.fragment),X3=m(),W$=r("p"),Q3=i("Cast the dataset to a new set of features."),eE=m(),_(Qr.$$.fragment),tE=m(),Ds=r("div"),_(oc.$$.fragment),sE=m(),Y$=r("p"),aE=i("Cast column to feature for decoding."),nE=m(),_(eo.$$.fragment),rE=m(),nt=r("div"),_(lc.$$.fragment),oE=m(),J$=r("p"),lE=i("Remove one or several column(s) in the dataset and the features associated to them."),iE=m(),fn=r("p"),pE=i("You can also remove a column using "),ru=r("a"),cE=i("Dataset.map()"),dE=i(" with "),K$=r("em"),mE=i("remove_columns"),hE=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),fE=m(),_(to.$$.fragment),uE=m(),ks=r("div"),_(ic.$$.fragment),gE=m(),Z$=r("p"),_E=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),bE=m(),_(so.$$.fragment),$E=m(),Es=r("div"),_(pc.$$.fragment),xE=m(),X$=r("p"),vE=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),yE=m(),_(ao.$$.fragment),jE=m(),qs=r("div"),_(cc.$$.fragment),wE=m(),dc=r("p"),DE=i("Casts the given column as :obj:"),Q$=r("code"),kE=i("datasets.features.ClassLabel"),EE=i(" and updates the table."),qE=m(),_(no.$$.fragment),IE=m(),Is=r("div"),_(mc.$$.fragment),TE=m(),e2=r("p"),NE=i("Number of rows in the dataset."),PE=m(),_(ro.$$.fragment),AE=m(),Ts=r("div"),_(hc.$$.fragment),FE=m(),t2=r("p"),LE=i("Iterate through the examples."),SE=m(),fc=r("p"),OE=i("If a formatting is set with "),ou=r("a"),CE=i("Dataset.set_format()"),zE=i(` rows will be returned with the
selected format.`),VE=m(),oo=r("div"),_(uc.$$.fragment),UE=m(),un=r("p"),ME=i("To be used in a "),s2=r("code"),RE=i("with"),BE=i(" statement. Set "),a2=r("code"),HE=i("__getitem__"),GE=i(" return format (type and columns)."),WE=m(),ve=r("div"),_(gc.$$.fragment),YE=m(),Ce=r("p"),JE=i("Set "),n2=r("strong"),KE=i("getitem"),ZE=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),r2=r("code"),XE=i("type"),QE=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),o2=r("strong"),e9=i("getitem"),t9=i(`.
It\u2019s also possible to use custom transforms for formatting using `),lu=r("a"),s9=i("datasets.Dataset.set_transform()"),a9=i("."),n9=m(),ze=r("p"),r9=i("It is possible to call "),l2=r("code"),o9=i("map"),l9=i(" after calling "),i2=r("code"),i9=i("set_format"),p9=i(". Since "),p2=r("code"),c9=i("map"),d9=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),c2=r("code"),m9=i("map"),h9=i(" on a dataset to add a new column, then this column will be formatted:"),f9=m(),d2=r("p"),u9=i("new formatted columns = (all columns - previously unformatted columns)"),g9=m(),_(lo.$$.fragment),_9=m(),Ns=r("div"),_(_c.$$.fragment),b9=m(),rt=r("p"),$9=i("Set "),m2=r("strong"),x9=i("getitem"),v9=i(" return format using this transform. The transform is applied on-the-fly on batches when "),h2=r("strong"),y9=i("getitem"),j9=i(` is called.
As `),iu=r("a"),w9=i("datasets.Dataset.set_format()"),D9=i(", this can be reset using "),pu=r("a"),k9=i("datasets.Dataset.reset_format()"),E9=m(),_(io.$$.fragment),q9=m(),ot=r("div"),_(bc.$$.fragment),I9=m(),$c=r("p"),T9=i("Reset "),f2=r("strong"),N9=i("getitem"),P9=i(" return format to python objects and all columns."),A9=m(),cu=r("p"),F9=i("Same as "),u2=r("code"),L9=i("self.set_format()"),S9=m(),_(po.$$.fragment),O9=m(),ye=r("div"),_(xc.$$.fragment),C9=m(),Lt=r("p"),z9=i("Set "),g2=r("strong"),V9=i("getitem"),U9=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),_2=r("code"),M9=i("type"),R9=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),b2=r("strong"),B9=i("getitem"),H9=i("."),G9=m(),vc=r("p"),W9=i("It\u2019s also possible to use custom transforms for formatting using "),du=r("a"),Y9=i("datasets.Dataset.with_transform()"),J9=i("."),K9=m(),gn=r("p"),Z9=i("Contrary to "),mu=r("a"),X9=i("datasets.Dataset.set_format()"),Q9=i(", "),$2=r("code"),e5=i("with_format"),t5=i(" returns a new Dataset object."),s5=m(),_(co.$$.fragment),a5=m(),je=r("div"),_(yc.$$.fragment),n5=m(),_n=r("p"),r5=i("Set "),x2=r("strong"),o5=i("getitem"),l5=i(" return format using this transform. The transform is applied on-the-fly on batches when "),v2=r("strong"),i5=i("getitem"),p5=i(" is called."),c5=m(),bn=r("p"),d5=i("As "),hu=r("a"),m5=i("datasets.Dataset.set_format()"),h5=i(", this can be reset using "),fu=r("a"),f5=i("datasets.Dataset.reset_format()"),u5=i("."),g5=m(),$n=r("p"),_5=i("Contrary to "),uu=r("a"),b5=i("datasets.Dataset.set_transform()"),$5=i(", "),y2=r("code"),x5=i("with_transform"),v5=i(" returns a new Dataset object."),y5=m(),_(mo.$$.fragment),j5=m(),ho=r("div"),_(jc.$$.fragment),w5=m(),j2=r("p"),D5=i("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),k5=m(),lt=r("div"),_(wc.$$.fragment),E5=m(),w2=r("p"),q5=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),I5=m(),D2=r("p"),T5=i("Be careful when running this command that no other process is currently using other cache files."),N5=m(),_(fo.$$.fragment),P5=m(),we=r("div"),_(Dc.$$.fragment),A5=m(),k2=r("p"),F5=i(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),L5=m(),kc=r("p"),S5=i("You can specify whether the function should be batched or not with the "),E2=r("code"),O5=i("batched"),C5=i(" parameter:"),z5=m(),xn=r("ul"),q2=r("li"),V5=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),U5=m(),I2=r("li"),M5=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),R5=m(),de=r("li"),B5=i("If batched is True and batch_size is "),T2=r("code"),H5=i("n"),G5=i(" > 1, then the function takes a batch of "),N2=r("code"),W5=i("n"),Y5=i(" examples as input and can return a batch with "),P2=r("code"),J5=i("n"),K5=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),A2=r("code"),Z5=i("n"),X5=i(` examples.
A batch is a dictionary, e.g. a batch of `),F2=r("code"),Q5=i("n"),e6=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),t6=m(),_(uo.$$.fragment),s6=m(),Ps=r("div"),_(Ec.$$.fragment),a6=m(),L2=r("p"),n6=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),r6=m(),_(go.$$.fragment),o6=m(),As=r("div"),_(qc.$$.fragment),l6=m(),S2=r("p"),i6=i("Create a new dataset with rows selected following the list/array of indices."),p6=m(),_(_o.$$.fragment),c6=m(),it=r("div"),_(Ic.$$.fragment),d6=m(),O2=r("p"),m6=i("Create a new dataset sorted according to a column."),h6=m(),C2=r("p"),f6=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),u6=m(),_(bo.$$.fragment),g6=m(),pt=r("div"),_(Tc.$$.fragment),_6=m(),z2=r("p"),b6=i("Create a new Dataset where the rows are shuffled."),$6=m(),V2=r("p"),x6=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),v6=m(),_($o.$$.fragment),y6=m(),ct=r("div"),_(Nc.$$.fragment),j6=m(),Y=r("p"),w6=i("Return a dictionary ("),U2=r("code"),D6=i("datasets.DatasetDict"),k6=i(") with two random train and test subsets ("),M2=r("em"),E6=i("train"),q6=i(" and "),R2=r("em"),I6=i("test"),T6=m(),B2=r("code"),N6=i("Dataset"),P6=i(` splits).
Splits are created from the dataset according to `),H2=r("em"),A6=i("test_size"),F6=i(", "),G2=r("em"),L6=i("train_size"),S6=i(" and "),W2=r("em"),O6=i("shuffle"),C6=i("."),z6=m(),Pc=r("p"),V6=i("This method is similar to scikit-learn "),Y2=r("em"),U6=i("train_test_split"),M6=i(" with the omission of the stratified options."),R6=m(),_(xo.$$.fragment),B6=m(),re=r("div"),_(Ac.$$.fragment),H6=m(),vn=r("p"),G6=i("Return the "),J2=r("em"),W6=i("index"),Y6=i("-nth shard from dataset split into "),K2=r("em"),J6=i("num_shards"),K6=i(" pieces."),Z6=m(),Z2=r("p"),X6=i(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),Q6=m(),Fc=r("p"),e8=i(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),X2=r("em"),t8=i("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),s8=i(` will return
a dataset with the same order as the original.`),a8=m(),Q2=r("p"),n8=i(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),r8=m(),_(vo.$$.fragment),o8=m(),Fs=r("div"),_(Lc.$$.fragment),l8=m(),ex=r("p"),i8=i(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),p8=m(),_(yo.$$.fragment),c8=m(),dt=r("div"),_(Sc.$$.fragment),d8=m(),tx=r("p"),m8=i(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),h8=m(),St=r("p"),f8=i("The resulting Parquet files are self-contained by default: if your dataset contains "),gu=r("a"),u8=i("Image"),g8=i(" or "),_u=r("a"),_8=i("Audio"),b8=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),sx=r("em"),$8=i("embed_external_files"),x8=i(" to False."),v8=m(),_(jo.$$.fragment),y8=m(),Z=r("div"),_(Oc.$$.fragment),j8=m(),yn=r("p"),w8=i("Saves a dataset to a dataset directory, or in a filesystem using either "),bu=r("a"),D8=i("S3FileSystem"),k8=i(` or
any implementation of `),ax=r("code"),E8=i("fsspec.spec.AbstractFileSystem"),q8=i("."),I8=m(),jn=r("p"),T8=i("For "),$u=r("a"),N8=i("Image"),P8=i(" and "),xu=r("a"),A8=i("Audio"),F8=i(" data:"),L8=m(),Cc=r("p"),S8=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),nx=r("em"),O8=i("read()"),C8=i(" those files first."),z8=m(),_(wo.$$.fragment),V8=m(),_(Do.$$.fragment),U8=m(),_(ko.$$.fragment),M8=m(),Ls=r("div"),_(zc.$$.fragment),R8=m(),Ot=r("p"),B8=i("Loads a dataset that was previously saved using "),rx=r("code"),H8=i("save_to_disk"),G8=i(` from a dataset directory, or from a
filesystem using either `),vu=r("a"),W8=i("S3FileSystem"),Y8=i(` or any implementation of
`),ox=r("code"),J8=i("fsspec.spec.AbstractFileSystem"),K8=i("."),Z8=m(),_(Eo.$$.fragment),X8=m(),qo=r("div"),_(Vc.$$.fragment),Q8=m(),lx=r("p"),eq=i("Create and cache a new Dataset by flattening the indices mapping."),tq=m(),Ss=r("div"),_(Uc.$$.fragment),sq=m(),ix=r("p"),aq=i("Exports the dataset to csv"),nq=m(),_(Io.$$.fragment),rq=m(),Os=r("div"),_(Mc.$$.fragment),oq=m(),Rc=r("p"),lq=i("Returns the dataset as a "),px=r("code"),iq=i("pandas.DataFrame"),pq=i(". Can also return a generator for large datasets."),cq=m(),_(To.$$.fragment),dq=m(),Cs=r("div"),_(Bc.$$.fragment),mq=m(),cx=r("p"),hq=i("Returns the dataset as a Python dict. Can also return a generator for large datasets."),fq=m(),_(No.$$.fragment),uq=m(),zs=r("div"),_(Hc.$$.fragment),gq=m(),dx=r("p"),_q=i("Export the dataset to JSON Lines or JSON."),bq=m(),_(Po.$$.fragment),$q=m(),Vs=r("div"),_(Gc.$$.fragment),xq=m(),mx=r("p"),vq=i("Exports the dataset to parquet"),yq=m(),_(Ao.$$.fragment),jq=m(),mt=r("div"),_(Wc.$$.fragment),wq=m(),wn=r("p"),Dq=i(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),hx=r("code"),kq=i("device"),Eq=i(" if you want to run it on GPU ("),fx=r("code"),qq=i("device"),Iq=i(` must be the GPU index).
You can find more information about Faiss here:`),Tq=m(),ux=r("ul"),yu=r("li"),Nq=i("For "),Yc=r("a"),Pq=i("string factory"),Aq=m(),_(Fo.$$.fragment),Fq=m(),Us=r("div"),_(Jc.$$.fragment),Lq=m(),Ct=r("p"),Sq=i(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),gx=r("em"),Oq=i("external_arrays"),Cq=i(`.
You can specify `),_x=r("em"),zq=i("device"),Vq=i(" if you want to run it on GPU ("),bx=r("em"),Uq=i("device"),Mq=i(` must be the GPU index).
You can find more information about Faiss here:`),Rq=m(),$x=r("ul"),ju=r("li"),Bq=i("For "),Kc=r("a"),Hq=i("string factory"),Gq=m(),Lo=r("div"),_(Zc.$$.fragment),Wq=m(),xx=r("p"),Yq=i("Save a FaissIndex on disk."),Jq=m(),Ms=r("div"),_(Xc.$$.fragment),Kq=m(),vx=r("p"),Zq=i("Load a FaissIndex from disk."),Xq=m(),Qc=r("p"),Qq=i(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),yx=r("em"),eI=i(".get_index(index_name).faiss_index"),tI=i(" to make it fit your needs."),sI=m(),Rs=r("div"),_(ed.$$.fragment),aI=m(),jx=r("p"),nI=i("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),rI=m(),_(So.$$.fragment),oI=m(),Bs=r("div"),_(td.$$.fragment),lI=m(),wx=r("p"),iI=i("Load an existing text index using ElasticSearch for fast retrieval."),pI=m(),_(Oo.$$.fragment),cI=m(),Co=r("div"),_(sd.$$.fragment),dI=m(),Dx=r("p"),mI=i("List the colindex_nameumns/identifiers of all the attached indexes."),hI=m(),zo=r("div"),_(ad.$$.fragment),fI=m(),kx=r("p"),uI=i("List the index_name/identifiers of all the attached indexes."),gI=m(),Vo=r("div"),_(nd.$$.fragment),_I=m(),Ex=r("p"),bI=i("Drop the index with the specified column."),$I=m(),Uo=r("div"),_(rd.$$.fragment),xI=m(),qx=r("p"),vI=i("Find the nearest examples indices in the dataset to the query."),yI=m(),Mo=r("div"),_(od.$$.fragment),jI=m(),Ix=r("p"),wI=i("Find the nearest examples indices in the dataset to the query."),DI=m(),Ro=r("div"),_(ld.$$.fragment),kI=m(),Tx=r("p"),EI=i("Find the nearest examples in the dataset to the query."),qI=m(),Bo=r("div"),_(id.$$.fragment),II=m(),Nx=r("p"),TI=i("Find the nearest examples in the dataset to the query."),NI=m(),Ho=r("div"),_(pd.$$.fragment),PI=m(),wu=r("p"),Du=r("a"),AI=i("datasets.DatasetInfo"),FI=i(" object containing all the metadata in the dataset."),LI=m(),Go=r("div"),_(cd.$$.fragment),SI=m(),ku=r("p"),Eu=r("a"),OI=i("datasets.NamedSplit"),CI=i(" object corresponding to a named dataset split."),zI=m(),qu=r("div"),_(dd.$$.fragment),VI=m(),Iu=r("div"),_(md.$$.fragment),UI=m(),Tu=r("div"),_(hd.$$.fragment),MI=m(),Nu=r("div"),_(fd.$$.fragment),RI=m(),Pu=r("div"),_(ud.$$.fragment),BI=m(),Au=r("div"),_(gd.$$.fragment),HI=m(),Fu=r("div"),_(_d.$$.fragment),GI=m(),Lu=r("div"),_(bd.$$.fragment),WI=m(),Su=r("div"),_($d.$$.fragment),YI=m(),Ou=r("div"),_(xd.$$.fragment),JI=m(),Cu=r("div"),_(vd.$$.fragment),KI=m(),zu=r("div"),_(yd.$$.fragment),ZI=m(),Vu=r("div"),_(jd.$$.fragment),XI=m(),Hs=r("div"),_(wd.$$.fragment),QI=m(),Px=r("p"),eT=i("Create Dataset from CSV file(s)."),tT=m(),_(Wo.$$.fragment),sT=m(),Gs=r("div"),_(Dd.$$.fragment),aT=m(),Ax=r("p"),nT=i("Create Dataset from JSON or JSON Lines file(s)."),rT=m(),_(Yo.$$.fragment),oT=m(),Ws=r("div"),_(kd.$$.fragment),lT=m(),Fx=r("p"),iT=i("Create Dataset from Parquet file(s)."),pT=m(),_(Jo.$$.fragment),cT=m(),Ys=r("div"),_(Ed.$$.fragment),dT=m(),Lx=r("p"),mT=i("Create Dataset from text file(s)."),hT=m(),_(Ko.$$.fragment),fT=m(),Js=r("div"),_(qd.$$.fragment),uT=m(),Dn=r("p"),gT=i("Prepare a dataset for the given task by casting the dataset\u2019s "),Uu=r("a"),_T=i("Features"),bT=i(" to standardized column names and types as detailed in "),Mu=r("a"),$T=i("datasets.tasks"),xT=i("."),vT=m(),kn=r("p"),yT=i("Casts "),Sx=r("code"),jT=i("datasets.DatasetInfo.features"),wT=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Ox=r("code"),DT=i("datasets.DatasetInfo.task_templates"),kT=i(" after casting."),ET=m(),Ks=r("div"),_(Id.$$.fragment),qT=m(),Td=r("p"),IT=i("Align the dataset\u2019s label ID and label name mapping to match an input "),Cx=r("code"),TT=i("label2id"),NT=i(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),PT=m(),_(Zo.$$.fragment),jw=m(),zt=r("div"),_(Nd.$$.fragment),AT=m(),En=r("p"),FT=i("Converts a list of "),Ru=r("a"),LT=i("Dataset"),ST=i(" with the same schema into a single "),Bu=r("a"),OT=i("Dataset"),CT=i("."),zT=m(),_(Xo.$$.fragment),ww=m(),ee=r("div"),_(Pd.$$.fragment),VT=m(),zx=r("p"),UT=i(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),MT=m(),qn=r("p"),RT=i("You can use this function on a list of "),Hu=r("a"),BT=i("Dataset"),HT=i(" objects, or on a list of "),Gu=r("a"),GT=i("IterableDataset"),WT=i(" objects."),YT=m(),Ve=r("p"),JT=i("If "),Vx=r("code"),KT=i("probabilities"),ZT=i(" is "),Ux=r("code"),XT=i("None"),QT=i(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Mx=r("code"),eN=i("probabilities"),tN=i(" is not "),Rx=r("code"),sN=i("None"),aN=i(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),nN=m(),Bx=r("p"),rN=i("The resulting dataset ends when one of the source datasets runs out of examples."),oN=m(),_(Qo.$$.fragment),Dw=m(),me=r("div"),_(Ad.$$.fragment),lN=m(),Hx=r("p"),iN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),pN=m(),Gx=r("p"),cN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),dN=m(),Wx=r("p"),mN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),hN=m(),Ue=r("ul"),Yx=r("li"),fN=i("cache files are always recreated"),uN=m(),Jx=r("li"),gN=i("cache files are written to a temporary directory that is deleted when session closes"),_N=m(),Kx=r("li"),bN=i("cache files are named using a random hash instead of the dataset fingerprint"),$N=m(),Fd=r("li"),xN=i("use "),Wu=r("a"),vN=i("datasets.Dataset.save_to_disk()"),yN=i(" to save a transformed dataset or it will be deleted when session closes"),jN=m(),Vt=r("li"),wN=i("caching doesn\u2019t affect "),Yu=r("a"),DN=i("datasets.load_dataset()"),kN=i(`. If you want to regenerate a dataset from scratch you should use
the `),Zx=r("code"),EN=i("download_mode"),qN=i(" parameter in "),Ju=r("a"),IN=i("datasets.load_dataset()"),TN=i("."),kw=m(),he=r("div"),_(Ld.$$.fragment),NN=m(),Xx=r("p"),PN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),AN=m(),Qx=r("p"),FN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),LN=m(),e1=r("p"),SN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),ON=m(),Me=r("ul"),t1=r("li"),CN=i("cache files are always recreated"),zN=m(),s1=r("li"),VN=i("cache files are written to a temporary directory that is deleted when session closes"),UN=m(),a1=r("li"),MN=i("cache files are named using a random hash instead of the dataset fingerprint"),RN=m(),Sd=r("li"),BN=i("use "),Ku=r("a"),HN=i("datasets.Dataset.save_to_disk()"),GN=i(" to save a transformed dataset or it will be deleted when session closes"),WN=m(),Ut=r("li"),YN=i("caching doesn\u2019t affect "),Zu=r("a"),JN=i("datasets.load_dataset()"),KN=i(`. If you want to regenerate a dataset from scratch you should use
the `),n1=r("code"),ZN=i("download_mode"),XN=i(" parameter in "),Xu=r("a"),QN=i("datasets.load_dataset()"),eP=i("."),Ew=m(),fe=r("div"),_(Od.$$.fragment),tP=m(),r1=r("p"),sP=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),aP=m(),o1=r("p"),nP=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),rP=m(),l1=r("p"),oP=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),lP=m(),Re=r("ul"),i1=r("li"),iP=i("cache files are always recreated"),pP=m(),p1=r("li"),cP=i("cache files are written to a temporary directory that is deleted when session closes"),dP=m(),c1=r("li"),mP=i("cache files are named using a random hash instead of the dataset fingerprint"),hP=m(),Cd=r("li"),fP=i("use "),Qu=r("a"),uP=i("datasets.Dataset.save_to_disk()"),gP=i(" to save a transformed dataset or it will be deleted when session closes"),_P=m(),Mt=r("li"),bP=i("caching doesn\u2019t affect "),eg=r("a"),$P=i("datasets.load_dataset()"),xP=i(`. If you want to regenerate a dataset from scratch you should use
the `),d1=r("code"),vP=i("download_mode"),yP=i(" parameter in "),tg=r("a"),jP=i("datasets.load_dataset()"),wP=i("."),qw=m(),In=r("h2"),el=r("a"),m1=r("span"),_(zd.$$.fragment),DP=m(),h1=r("span"),kP=i("DatasetDict"),Iw=m(),tl=r("p"),EP=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),f1=r("code"),qP=i("Dataset"),IP=i(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),Tw=m(),A=r("div"),_(Vd.$$.fragment),TP=m(),u1=r("p"),NP=i("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),PP=m(),Zs=r("div"),_(Ud.$$.fragment),AP=m(),g1=r("p"),FP=i("The Apache Arrow tables backing each split."),LP=m(),_(sl.$$.fragment),SP=m(),Xs=r("div"),_(Md.$$.fragment),OP=m(),_1=r("p"),CP=i("The cache files containing the Apache Arrow table backing each split."),zP=m(),_(al.$$.fragment),VP=m(),Qs=r("div"),_(Rd.$$.fragment),UP=m(),b1=r("p"),MP=i("Number of columns in each split of the dataset."),RP=m(),_(nl.$$.fragment),BP=m(),ea=r("div"),_(Bd.$$.fragment),HP=m(),Hd=r("p"),GP=i("Number of rows in each split of the dataset (same as "),rl=r("a"),WP=i("datasets.Dataset."),$1=r("strong"),YP=i("len"),JP=i("()"),KP=i(")."),ZP=m(),_(ol.$$.fragment),XP=m(),ta=r("div"),_(Gd.$$.fragment),QP=m(),x1=r("p"),eA=i("Names of the columns in each split of the dataset."),tA=m(),_(ll.$$.fragment),sA=m(),sa=r("div"),_(Wd.$$.fragment),aA=m(),v1=r("p"),nA=i("Shape of each split of the dataset (number of columns, number of rows)."),rA=m(),_(il.$$.fragment),oA=m(),ht=r("div"),_(Yd.$$.fragment),lA=m(),y1=r("p"),iA=i("Return a list of the unique elements in a column for each split."),pA=m(),j1=r("p"),cA=i("This is implemented in the low-level backend and as such, very fast."),dA=m(),_(pl.$$.fragment),mA=m(),aa=r("div"),_(Jd.$$.fragment),hA=m(),w1=r("p"),fA=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),uA=m(),_(cl.$$.fragment),gA=m(),na=r("div"),_(Kd.$$.fragment),_A=m(),D1=r("p"),bA=i(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),$A=m(),_(dl.$$.fragment),xA=m(),ra=r("div"),_(Zd.$$.fragment),vA=m(),k1=r("p"),yA=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),jA=m(),_(ml.$$.fragment),wA=m(),ft=r("div"),_(Xd.$$.fragment),DA=m(),E1=r("p"),kA=i(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),EA=m(),q1=r("p"),qA=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),IA=m(),_(hl.$$.fragment),TA=m(),De=r("div"),_(Qd.$$.fragment),NA=m(),I1=r("p"),PA=i("Create a new Dataset where the rows are shuffled."),AA=m(),T1=r("p"),FA=i("The transformation is applied to all the datasets of the dataset dictionary."),LA=m(),N1=r("p"),SA=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),OA=m(),_(fl.$$.fragment),CA=m(),ke=r("div"),_(em.$$.fragment),zA=m(),tm=r("p"),VA=i("Set "),P1=r("code"),UA=i("__getitem__"),MA=i(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),RA=m(),Be=r("p"),BA=i("It is possible to call "),A1=r("code"),HA=i("map"),GA=i(" after calling "),F1=r("code"),WA=i("set_format"),YA=i(". Since "),L1=r("code"),JA=i("map"),KA=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),S1=r("code"),ZA=i("map"),XA=i(" on a dataset to add a new column, then this column will be formatted:"),QA=m(),O1=r("p"),eF=i("new formatted columns = (all columns - previously unformatted columns)"),tF=m(),_(ul.$$.fragment),sF=m(),ut=r("div"),_(sm.$$.fragment),aF=m(),am=r("p"),nF=i("Reset "),C1=r("code"),rF=i("__getitem__"),oF=i(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),lF=m(),sg=r("p"),iF=i("Same as "),z1=r("code"),pF=i("self.set_format()"),cF=m(),_(gl.$$.fragment),dF=m(),_l=r("div"),_(nm.$$.fragment),mF=m(),Tn=r("p"),hF=i("To be used in a "),V1=r("em"),fF=i("with"),uF=i(" statement. Set "),U1=r("code"),gF=i("__getitem__"),_F=i(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),bF=m(),Ee=r("div"),_(rm.$$.fragment),$F=m(),Rt=r("p"),xF=i("Set "),M1=r("code"),vF=i("__getitem__"),yF=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),R1=r("code"),jF=i("type"),wF=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),B1=r("code"),DF=i("__getitem__"),kF=i(`.
The format is set for every dataset in the dataset dictionary`),EF=m(),om=r("p"),qF=i("It\u2019s also possible to use custom transforms for formatting using "),ag=r("a"),IF=i("datasets.Dataset.with_transform()"),TF=i("."),NF=m(),Nn=r("p"),PF=i("Contrary to "),ng=r("a"),AF=i("datasets.DatasetDict.set_format()"),FF=i(", "),H1=r("code"),LF=i("with_format"),SF=i(" returns a new DatasetDict object with new Dataset objects."),OF=m(),_(bl.$$.fragment),CF=m(),qe=r("div"),_(lm.$$.fragment),zF=m(),Pn=r("p"),VF=i("Set "),G1=r("code"),UF=i("__getitem__"),MF=i(" return format using this transform. The transform is applied on-the-fly on batches when "),W1=r("code"),RF=i("__getitem__"),BF=i(` is called.
The transform is set for every dataset in the dataset dictionary`),HF=m(),An=r("p"),GF=i("As "),rg=r("a"),WF=i("datasets.Dataset.set_format()"),YF=i(", this can be reset using "),og=r("a"),JF=i("datasets.Dataset.reset_format()"),KF=i("."),ZF=m(),Fn=r("p"),XF=i("Contrary to "),Y1=r("code"),QF=i("datasets.DatasetDict.set_transform()"),eL=i(", "),J1=r("code"),tL=i("with_transform"),sL=i(" returns a new DatasetDict object with new Dataset objects."),aL=m(),_($l.$$.fragment),nL=m(),oa=r("div"),_(im.$$.fragment),rL=m(),K1=r("p"),oL=i(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),lL=m(),_(xl.$$.fragment),iL=m(),gt=r("div"),_(pm.$$.fragment),pL=m(),Z1=r("p"),cL=i(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),dL=m(),Bt=r("p"),mL=i("You can also remove a column using "),lg=r("a"),hL=i("Dataset.map()"),fL=i(" with "),X1=r("em"),uL=i("feature"),gL=i(" but "),Q1=r("code"),_L=i("cast_"),bL=i(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),$L=m(),_(vl.$$.fragment),xL=m(),la=r("div"),_(cm.$$.fragment),vL=m(),ev=r("p"),yL=i("Cast column to feature for decoding."),jL=m(),_(yl.$$.fragment),wL=m(),Ie=r("div"),_(dm.$$.fragment),DL=m(),tv=r("p"),kL=i(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),EL=m(),sv=r("p"),qL=i("The transformation is applied to all the splits of the dataset dictionary."),IL=m(),Ln=r("p"),TL=i("You can also remove a column using "),ig=r("a"),NL=i("Dataset.map()"),PL=i(" with "),av=r("em"),AL=i("remove_columns"),FL=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),LL=m(),_(jl.$$.fragment),SL=m(),Te=r("div"),_(mm.$$.fragment),OL=m(),nv=r("p"),CL=i(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),zL=m(),Sn=r("p"),VL=i("You can also rename a column using "),pg=r("a"),UL=i("Dataset.map()"),ML=i(" with "),rv=r("em"),RL=i("remove_columns"),BL=i(" but the present method:"),HL=m(),hm=r("ul"),ov=r("li"),GL=i("takes care of moving the original features under the new column name."),WL=m(),lv=r("li"),YL=i("doesn\u2019t copy the data to a new dataset and is thus much faster."),JL=m(),_(wl.$$.fragment),KL=m(),ia=r("div"),_(fm.$$.fragment),ZL=m(),iv=r("p"),XL=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),QL=m(),_(Dl.$$.fragment),eS=m(),pa=r("div"),_(um.$$.fragment),tS=m(),gm=r("p"),sS=i("Casts the given column as :obj:"),pv=r("code"),aS=i("datasets.features.ClassLabel"),nS=i(" and updates the tables."),rS=m(),_(kl.$$.fragment),oS=m(),Ne=r("div"),_(_m.$$.fragment),lS=m(),On=r("p"),iS=i("Pushes the "),cv=r("code"),pS=i("DatasetDict"),cS=i(` to the hub as a Parquet dataset.
The `),dv=r("code"),dS=i("DatasetDict"),mS=i(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),hS=m(),mv=r("p"),fS=i("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),uS=m(),Ht=r("p"),gS=i("The resulting Parquet files are self-contained by default: if your dataset contains "),cg=r("a"),_S=i("Image"),bS=i(" or "),dg=r("a"),$S=i("Audio"),xS=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),hv=r("em"),vS=i("embed_external_files"),yS=i(" to False."),jS=m(),_(El.$$.fragment),wS=m(),oe=r("div"),_(bm.$$.fragment),DS=m(),Cn=r("p"),kS=i("Saves a dataset dict to a filesystem using either "),mg=r("a"),ES=i("S3FileSystem"),qS=i(` or
`),fv=r("code"),IS=i("fsspec.spec.AbstractFileSystem"),TS=i("."),NS=m(),zn=r("p"),PS=i("For "),hg=r("a"),AS=i("Image"),FS=i(" and "),fg=r("a"),LS=i("Audio"),SS=i(" data:"),OS=m(),$m=r("p"),CS=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),uv=r("em"),zS=i("read()"),VS=i(" those files first."),US=m(),_(ql.$$.fragment),MS=m(),_(Il.$$.fragment),RS=m(),ca=r("div"),_(xm.$$.fragment),BS=m(),Gt=r("p"),HS=i("Load a dataset that was previously saved using "),gv=r("code"),GS=i("save_to_disk"),WS=i(` from a filesystem using either
`),ug=r("a"),YS=i("S3FileSystem"),JS=i(" or "),_v=r("code"),KS=i("fsspec.spec.AbstractFileSystem"),ZS=i("."),XS=m(),_(Tl.$$.fragment),QS=m(),da=r("div"),_(vm.$$.fragment),eO=m(),bv=r("p"),tO=i("Create DatasetDict from CSV file(s)."),sO=m(),_(Nl.$$.fragment),aO=m(),ma=r("div"),_(ym.$$.fragment),nO=m(),$v=r("p"),rO=i("Create DatasetDict from JSON Lines file(s)."),oO=m(),_(Pl.$$.fragment),lO=m(),ha=r("div"),_(jm.$$.fragment),iO=m(),xv=r("p"),pO=i("Create DatasetDict from Parquet file(s)."),cO=m(),_(Al.$$.fragment),dO=m(),fa=r("div"),_(wm.$$.fragment),mO=m(),vv=r("p"),hO=i("Create DatasetDict from text file(s)."),fO=m(),_(Fl.$$.fragment),uO=m(),ua=r("div"),_(Dm.$$.fragment),gO=m(),Vn=r("p"),_O=i("Prepare a dataset for the given task by casting the dataset\u2019s "),gg=r("a"),bO=i("Features"),$O=i(" to standardized column names and types as detailed in "),_g=r("a"),xO=i("datasets.tasks"),vO=i("."),yO=m(),Un=r("p"),jO=i("Casts "),yv=r("code"),wO=i("datasets.DatasetInfo.features"),DO=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),jv=r("code"),kO=i("datasets.DatasetInfo.task_templates"),EO=i(" after casting."),Nw=m(),bg=r("a"),Pw=m(),Mn=r("h2"),Ll=r("a"),wv=r("span"),_(km.$$.fragment),qO=m(),Dv=r("span"),IO=i("IterableDataset"),Aw=m(),Sl=r("p"),TO=i("The base class "),$g=r("a"),NO=i("IterableDataset"),PO=i(" implements an iterable Dataset backed by python generators."),Fw=m(),L=r("div"),_(Em.$$.fragment),AO=m(),kv=r("p"),FO=i("A Dataset backed by an iterable."),LO=m(),ga=r("div"),_(qm.$$.fragment),SO=m(),Ev=r("p"),OO=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),CO=m(),_(Ol.$$.fragment),zO=m(),_a=r("div"),_(Im.$$.fragment),VO=m(),qv=r("p"),UO=i("Cast column to feature for decoding."),MO=m(),_(Cl.$$.fragment),RO=m(),ba=r("div"),_(Tm.$$.fragment),BO=m(),Iv=r("p"),HO=i("Cast the dataset to a new set of features."),GO=m(),_(zl.$$.fragment),WO=m(),xg=r("div"),_(Nm.$$.fragment),YO=m(),Pe=r("div"),_(Pm.$$.fragment),JO=m(),Tv=r("p"),KO=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),ZO=m(),Am=r("p"),XO=i("You can specify whether the function should be batched or not with the "),Nv=r("code"),QO=i("batched"),eC=i(" parameter:"),tC=m(),Rn=r("ul"),Pv=r("li"),sC=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),aC=m(),Av=r("li"),nC=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),rC=m(),ue=r("li"),oC=i("If batched is True and batch_size is "),Fv=r("code"),lC=i("n"),iC=i(" > 1, then the function takes a batch of "),Lv=r("code"),pC=i("n"),cC=i(" examples as input and can return a batch with "),Sv=r("code"),dC=i("n"),mC=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ov=r("code"),hC=i("n"),fC=i(` examples.
A batch is a dictionary, e.g. a batch of `),Cv=r("code"),uC=i("n"),gC=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),_C=m(),_(Vl.$$.fragment),bC=m(),$a=r("div"),_(Fm.$$.fragment),$C=m(),zv=r("p"),xC=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),vC=m(),_(Ul.$$.fragment),yC=m(),xa=r("div"),_(Lm.$$.fragment),jC=m(),Vv=r("p"),wC=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),DC=m(),_(Ml.$$.fragment),kC=m(),le=r("div"),_(Sm.$$.fragment),EC=m(),Uv=r("p"),qC=i("Randomly shuffles the elements of this dataset."),IC=m(),Mv=r("p"),TC=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),NC=m(),Om=r("p"),PC=i("For instance, if your dataset contains 10,000 elements but "),Rv=r("code"),AC=i("buffer_size"),FC=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),LC=m(),Bn=r("p"),SC=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),vg=r("a"),OC=i("datasets.IterableDataset.skip()"),CC=i(" or "),yg=r("a"),zC=i("datasets.IterableDataset.take()"),VC=i(`
then the order of the shards is kept unchanged.`),UC=m(),_(Rl.$$.fragment),MC=m(),va=r("div"),_(Cm.$$.fragment),RC=m(),zm=r("p"),BC=i("Create a new IterableDataset that skips the first "),Bv=r("code"),HC=i("n"),GC=i(" elements."),WC=m(),_(Bl.$$.fragment),YC=m(),ya=r("div"),_(Vm.$$.fragment),JC=m(),Um=r("p"),KC=i("Create a new IterableDataset with only the first "),Hv=r("code"),ZC=i("n"),XC=i(" elements."),QC=m(),_(Hl.$$.fragment),ez=m(),Gl=r("div"),_(Mm.$$.fragment),tz=m(),jg=r("p"),wg=r("a"),sz=i("datasets.DatasetInfo"),az=i(" object containing all the metadata in the dataset."),nz=m(),Wl=r("div"),_(Rm.$$.fragment),rz=m(),Dg=r("p"),kg=r("a"),oz=i("datasets.NamedSplit"),lz=i(" object corresponding to a named dataset split."),iz=m(),Eg=r("div"),_(Bm.$$.fragment),pz=m(),qg=r("div"),_(Hm.$$.fragment),cz=m(),Ig=r("div"),_(Gm.$$.fragment),dz=m(),Tg=r("div"),_(Wm.$$.fragment),mz=m(),Ng=r("div"),_(Ym.$$.fragment),hz=m(),Pg=r("div"),_(Jm.$$.fragment),fz=m(),Ag=r("div"),_(Km.$$.fragment),uz=m(),Fg=r("div"),_(Zm.$$.fragment),gz=m(),Lg=r("div"),_(Xm.$$.fragment),_z=m(),Sg=r("div"),_(Qm.$$.fragment),bz=m(),Og=r("div"),_(eh.$$.fragment),$z=m(),Cg=r("div"),_(th.$$.fragment),xz=m(),zg=r("div"),_(sh.$$.fragment),Lw=m(),Hn=r("h2"),Yl=r("a"),Gv=r("span"),_(ah.$$.fragment),vz=m(),Wv=r("span"),yz=i("IterableDatasetDict"),Sw=m(),Jl=r("p"),jz=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Yv=r("code"),wz=i("IterableDataset"),Dz=i(" objects as values."),Ow=m(),U=r("div"),_(nh.$$.fragment),kz=m(),Ae=r("div"),_(rh.$$.fragment),Ez=m(),Jv=r("p"),qz=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),Iz=m(),oh=r("p"),Tz=i("You can specify whether the function should be batched or not with the "),Kv=r("code"),Nz=i("batched"),Pz=i(" parameter:"),Az=m(),Gn=r("ul"),Zv=r("li"),Fz=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),Lz=m(),Xv=r("li"),Sz=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),Oz=m(),ge=r("li"),Cz=i("If batched is True and batch_size is "),Qv=r("code"),zz=i("n"),Vz=i(" > 1, then the function takes a batch of "),ey=r("code"),Uz=i("n"),Mz=i(" examples as input and can return a batch with "),ty=r("code"),Rz=i("n"),Bz=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),sy=r("code"),Hz=i("n"),Gz=i(` examples.
A batch is a dictionary, e.g. a batch of `),ay=r("code"),Wz=i("n"),Yz=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Jz=m(),_(Kl.$$.fragment),Kz=m(),ja=r("div"),_(lh.$$.fragment),Zz=m(),ny=r("p"),Xz=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),Qz=m(),_(Zl.$$.fragment),eV=m(),ie=r("div"),_(ih.$$.fragment),tV=m(),ry=r("p"),sV=i(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),aV=m(),oy=r("p"),nV=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),rV=m(),ph=r("p"),oV=i("For instance, if your dataset contains 10,000 elements but "),ly=r("code"),lV=i("buffer_size"),iV=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),pV=m(),Wn=r("p"),cV=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Vg=r("a"),dV=i("datasets.IterableDataset.skip()"),mV=i(" or "),Ug=r("a"),hV=i("datasets.IterableDataset.take()"),fV=i(`
then the order of the shards is kept unchanged.`),uV=m(),_(Xl.$$.fragment),gV=m(),wa=r("div"),_(ch.$$.fragment),_V=m(),iy=r("p"),bV=i(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),$V=m(),_(Ql.$$.fragment),xV=m(),Da=r("div"),_(dh.$$.fragment),vV=m(),py=r("p"),yV=i(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),jV=m(),_(ei.$$.fragment),wV=m(),ka=r("div"),_(mh.$$.fragment),DV=m(),cy=r("p"),kV=i(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),EV=m(),_(ti.$$.fragment),qV=m(),Ea=r("div"),_(hh.$$.fragment),IV=m(),dy=r("p"),TV=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),NV=m(),_(si.$$.fragment),PV=m(),qa=r("div"),_(fh.$$.fragment),AV=m(),my=r("p"),FV=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),LV=m(),_(ai.$$.fragment),SV=m(),Ia=r("div"),_(uh.$$.fragment),OV=m(),hy=r("p"),CV=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),zV=m(),_(ni.$$.fragment),Cw=m(),Yn=r("h2"),ri=r("a"),fy=r("span"),_(gh.$$.fragment),VV=m(),uy=r("span"),UV=i("Features"),zw=m(),O=r("div"),_(_h.$$.fragment),MV=m(),gy=r("p"),RV=i("A special dictionary that defines the internal structure of a dataset."),BV=m(),bh=r("p"),HV=i("Instantiated with a dictionary of type "),_y=r("code"),GV=i("dict[str, FieldType]"),WV=i(`, where keys are the desired column names,
and values are the type of that column.`),YV=m(),Mg=r("p"),by=r("code"),JV=i("FieldType"),KV=i(" can be one of the following:"),ZV=m(),J=r("ul"),$y=r("li"),Ta=r("p"),XV=i("a "),Rg=r("a"),QV=i("datasets.Value"),eU=i(" feature specifies a single typed value, e.g. "),xy=r("code"),tU=i("int64"),sU=i(" or "),vy=r("code"),aU=i("string"),nU=m(),yy=r("li"),$h=r("p"),rU=i("a "),Bg=r("a"),oU=i("datasets.ClassLabel"),lU=i(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),iU=m(),jy=r("li"),xh=r("p"),pU=i("a python "),wy=r("code"),cU=i("dict"),dU=i(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),mU=m(),vh=r("li"),He=r("p"),hU=i("a python "),Dy=r("code"),fU=i("list"),uU=i(" or a "),Hg=r("a"),gU=i("datasets.Sequence"),_U=i(` specifies that the field contains a list of objects. The python
`),ky=r("code"),bU=i("list"),$U=i(" or "),Gg=r("a"),xU=i("datasets.Sequence"),vU=i(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),yU=m(),_(oi.$$.fragment),jU=m(),Ey=r("li"),Ge=r("p"),wU=i("a "),Wg=r("a"),DU=i("Array2D"),kU=i(", "),Yg=r("a"),EU=i("Array3D"),qU=i(", "),Jg=r("a"),IU=i("Array4D"),TU=i(" or "),Kg=r("a"),NU=i("Array5D"),PU=i(" feature for multidimensional arrays"),AU=m(),qy=r("li"),yh=r("p"),FU=i("an "),Zg=r("a"),LU=i("Audio"),SU=i(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),OU=m(),Iy=r("li"),Wt=r("p"),CU=i("an "),Xg=r("a"),zU=i("Image"),VU=i(" feature to store the absolute path to an image file, an "),Ty=r("code"),UU=i("np.ndarray"),MU=i(" object, a "),Ny=r("code"),RU=i("PIL.Image.Image"),BU=i(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),HU=m(),Py=r("li"),li=r("p"),Qg=r("a"),GU=i("datasets.Translation"),WU=i(" and "),e_=r("a"),YU=i("datasets.TranslationVariableLanguages"),JU=i(", the two features specific to Machine Translation"),KU=m(),Na=r("div"),_(jh.$$.fragment),ZU=m(),Ay=r("p"),XU=i("Make a deep copy of Features."),QU=m(),_(ii.$$.fragment),eM=m(),pi=r("div"),_(wh.$$.fragment),tM=m(),Fy=r("p"),sM=i("Decode batch with custom feature decoding."),aM=m(),ci=r("div"),_(Dh.$$.fragment),nM=m(),Ly=r("p"),rM=i("Decode column with custom feature decoding."),oM=m(),di=r("div"),_(kh.$$.fragment),lM=m(),Sy=r("p"),iM=i("Decode example with custom feature decoding."),pM=m(),mi=r("div"),_(Eh.$$.fragment),cM=m(),Oy=r("p"),dM=i("Encode batch into a format for Arrow."),mM=m(),hi=r("div"),_(qh.$$.fragment),hM=m(),Cy=r("p"),fM=i("Encode example into a format for Arrow."),uM=m(),_t=r("div"),_(Ih.$$.fragment),gM=m(),zy=r("p"),_M=i(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),bM=m(),Vy=r("p"),$M=i(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),xM=m(),_(fi.$$.fragment),vM=m(),ui=r("div"),_(Th.$$.fragment),yM=m(),Uy=r("p"),jM=i(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),wM=m(),Fe=r("div"),_(Nh.$$.fragment),DM=m(),My=r("p"),kM=i("Construct Features from dict."),EM=m(),Ry=r("p"),qM=i(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),IM=m(),Yt=r("p"),TM=i(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),t_=r("a"),NM=i("DatasetInfo"),PM=i(` that was dumped to a JSON object. This acts as an analogue to
`),s_=r("a"),AM=i("Features.from_arrow_schema()"),FM=i(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),a_=r("a"),LM=i("Value"),SM=i(" automatically performs."),OM=m(),_(gi.$$.fragment),CM=m(),bt=r("div"),_(Ph.$$.fragment),zM=m(),By=r("p"),VM=i("Reorder Features fields to match the field order of other Features."),UM=m(),Hy=r("p"),MM=i(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),RM=m(),_(_i.$$.fragment),Vw=m(),Jt=r("div"),_(Ah.$$.fragment),BM=m(),Gy=r("p"),HM=i(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),GM=m(),_(bi.$$.fragment),Uw=m(),B=r("div"),_(Fh.$$.fragment),WM=m(),Wy=r("p"),YM=i("Feature type for integer class labels."),JM=m(),Lh=r("p"),KM=i("There are 3 ways to define a "),Yy=r("em"),ZM=i("ClassLabel"),XM=i(", which correspond to the 3 arguments:"),QM=m(),Jn=r("ul"),n_=r("li"),Jy=r("em"),eR=i("num_classes"),tR=i(": Create 0 to (num_classes-1) labels."),sR=m(),r_=r("li"),Ky=r("em"),aR=i("names"),nR=i(": List of label strings."),rR=m(),o_=r("li"),Zy=r("em"),oR=i("names_file"),lR=i(": File containing the list of labels."),iR=m(),Xy=r("p"),pR=i(`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),cR=m(),_($i.$$.fragment),dR=m(),Pa=r("div"),_(Sh.$$.fragment),mR=m(),Qy=r("p"),hR=i(`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),fR=m(),Oh=r("ul"),ej=r("li"),uR=i("pa.string()"),gR=m(),tj=r("li"),_R=i("pa.int()"),bR=m(),$t=r("div"),_(Ch.$$.fragment),$R=m(),sj=r("p"),xR=i("Conversion integer => class name string."),vR=m(),aj=r("p"),yR=i("Regarding unknown/missing labels: passing negative integers raises ValueError."),jR=m(),_(xi.$$.fragment),wR=m(),Aa=r("div"),_(zh.$$.fragment),DR=m(),nj=r("p"),kR=i("Conversion class name string => integer."),ER=m(),_(vi.$$.fragment),Mw=m(),We=r("div"),_(Vh.$$.fragment),qR=m(),rj=r("p"),IR=i("The Value dtypes are as follows:"),TR=m(),oj=r("p"),NR=i(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),PR=m(),_(yi.$$.fragment),Rw=m(),te=r("div"),_(Uh.$$.fragment),AR=m(),l_=r("p"),lj=r("code"),FR=i("FeatureConnector"),LR=i(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),SR=m(),ij=r("p"),OR=i(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),CR=m(),Mh=r("p"),zR=i("Output: A dictionary mapping string language codes to translations as "),pj=r("code"),VR=i("Text"),UR=i(`
features.`),MR=m(),_(ji.$$.fragment),RR=m(),wi=r("div"),_(Rh.$$.fragment),BR=m(),cj=r("p"),HR=i("Flatten the Translation feature into a dictionary."),Bw=m(),se=r("div"),_(Bh.$$.fragment),GR=m(),i_=r("p"),dj=r("code"),WR=i("FeatureConnector"),YR=i(` for translations with variable languages per example.
Here for compatiblity with tfds.`),JR=m(),mj=r("p"),KR=i(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),ZR=m(),hj=r("p"),XR=i(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),QR=m(),_(Di.$$.fragment),eB=m(),ki=r("div"),_(Hh.$$.fragment),tB=m(),fj=r("p"),sB=i("Flatten the TranslationVariableLanguages feature into a dictionary."),Hw=m(),Kt=r("div"),_(Gh.$$.fragment),aB=m(),uj=r("p"),nB=i("Create a two-dimensional array."),rB=m(),_(Ei.$$.fragment),Gw=m(),Zt=r("div"),_(Wh.$$.fragment),oB=m(),gj=r("p"),lB=i("Create a three-dimensional array."),iB=m(),_(qi.$$.fragment),Ww=m(),Xt=r("div"),_(Yh.$$.fragment),pB=m(),_j=r("p"),cB=i("Create a four-dimensional array."),dB=m(),_(Ii.$$.fragment),Yw=m(),Qt=r("div"),_(Jh.$$.fragment),mB=m(),bj=r("p"),hB=i("Create a five-dimensional array."),fB=m(),_(Ti.$$.fragment),Jw=m(),M=r("div"),_(Kh.$$.fragment),uB=m(),$j=r("p"),gB=i("Audio Feature to extract audio data from an audio file."),_B=m(),xj=r("p"),bB=i("Input: The Audio feature accepts as input:"),$B=m(),Kn=r("ul"),vj=r("li"),Zh=r("p"),xB=i("A "),yj=r("code"),vB=i("str"),yB=i(": Absolute path to the audio file (i.e. random access is allowed)."),jB=m(),Zn=r("li"),Xh=r("p"),wB=i("A "),jj=r("code"),DB=i("dict"),kB=i(" with the keys:"),EB=m(),Qh=r("ul"),wj=r("li"),qB=i("path: String with relative path of the audio file to the archive file."),IB=m(),Dj=r("li"),TB=i("bytes: Bytes content of the audio file."),NB=m(),kj=r("p"),PB=i("This is useful for archived files with sequential access."),AB=m(),Xn=r("li"),ef=r("p"),FB=i("A "),Ej=r("code"),LB=i("dict"),SB=i(" with the keys:"),OB=m(),Qn=r("ul"),qj=r("li"),CB=i("path: String with relative path of the audio file to the archive file."),zB=m(),Ij=r("li"),VB=i("array: Array containing the audio sample"),UB=m(),Tj=r("li"),MB=i("sampling_rate: Integer corresponding to the samping rate of the audio sample."),RB=m(),Nj=r("p"),BB=i("This is useful for archived files with sequential access."),HB=m(),_(Ni.$$.fragment),GB=m(),Fa=r("div"),_(tf.$$.fragment),WB=m(),Pj=r("p"),YB=i(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),JB=m(),es=r("ul"),Aj=r("li"),KB=i("pa.string() - it must contain the \u201Cpath\u201D data"),ZB=m(),Fj=r("li"),XB=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),QB=m(),Lj=r("li"),eH=i("pa.struct({\u201Cpath\u201D: pa.string()})"),tH=m(),Sj=r("li"),sH=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),aH=m(),Pi=r("div"),_(sf.$$.fragment),nH=m(),Oj=r("p"),rH=i("Decode example audio file into audio data."),oH=m(),Ai=r("div"),_(af.$$.fragment),lH=m(),Cj=r("p"),iH=i("Embed audio files into the Arrow array."),pH=m(),Fi=r("div"),_(nf.$$.fragment),cH=m(),zj=r("p"),dH=i("Encode example into a format for Arrow."),mH=m(),Li=r("div"),_(rf.$$.fragment),hH=m(),Vj=r("p"),fH=i("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),Kw=m(),R=r("div"),_(of.$$.fragment),uH=m(),Uj=r("p"),gH=i("Image feature to read image data from an image file."),_H=m(),Mj=r("p"),bH=i("Input: The Image feature accepts as input:"),$H=m(),ts=r("ul"),Rj=r("li"),lf=r("p"),xH=i("A "),Bj=r("code"),vH=i("str"),yH=i(": Absolute path to the image file (i.e. random access is allowed)."),jH=m(),er=r("li"),pf=r("p"),wH=i("A "),Hj=r("code"),DH=i("dict"),kH=i(" with the keys:"),EH=m(),cf=r("ul"),Gj=r("li"),qH=i("path: String with relative path of the image file to the archive file."),IH=m(),Wj=r("li"),TH=i("bytes: Bytes of the image file."),NH=m(),Yj=r("p"),PH=i("This is useful for archived files with sequential access."),AH=m(),Jj=r("li"),df=r("p"),FH=i("An "),Kj=r("code"),LH=i("np.ndarray"),SH=i(": NumPy array representing an image."),OH=m(),Zj=r("li"),mf=r("p"),CH=i("A "),Xj=r("code"),zH=i("PIL.Image.Image"),VH=i(": PIL image object."),UH=m(),_(Si.$$.fragment),MH=m(),La=r("div"),_(hf.$$.fragment),RH=m(),Qj=r("p"),BH=i(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),HH=m(),Ye=r("ul"),e7=r("li"),GH=i("pa.string() - it must contain the \u201Cpath\u201D data"),WH=m(),t7=r("li"),YH=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),JH=m(),s7=r("li"),KH=i("pa.struct({\u201Cpath\u201D: pa.string()})"),ZH=m(),a7=r("li"),XH=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),QH=m(),n7=r("li"),eG=i("pa.list(*) - it must contain the image array data"),tG=m(),Oi=r("div"),_(ff.$$.fragment),sG=m(),r7=r("p"),aG=i("Decode example image file into image data."),nG=m(),Ci=r("div"),_(uf.$$.fragment),rG=m(),o7=r("p"),oG=i("Embed image files into the Arrow array."),lG=m(),zi=r("div"),_(gf.$$.fragment),iG=m(),l7=r("p"),pG=i("Encode example into a format for Arrow."),cG=m(),Vi=r("div"),_(_f.$$.fragment),dG=m(),i7=r("p"),mG=i("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),Zw=m(),tr=r("h2"),Ui=r("a"),p7=r("span"),_(bf.$$.fragment),hG=m(),c7=r("span"),fG=i("MetricInfo"),Xw=m(),ae=r("div"),_($f.$$.fragment),uG=m(),d7=r("p"),gG=i("Information about a metric."),_G=m(),p_=r("p"),m7=r("code"),bG=i("MetricInfo"),$G=i(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),xG=m(),h7=r("p"),vG=i("Note: Not all fields are known on construction and may be updated later."),yG=m(),Sa=r("div"),_(xf.$$.fragment),jG=m(),vf=r("p"),wG=i("Create MetricInfo from the JSON file in "),f7=r("code"),DG=i("metric_info_dir"),kG=i("."),EG=m(),_(Mi.$$.fragment),qG=m(),Oa=r("div"),_(yf.$$.fragment),IG=m(),ss=r("p"),TG=i("Write "),u7=r("code"),NG=i("MetricInfo"),PG=i(" as JSON to "),g7=r("code"),AG=i("metric_info_dir"),FG=i(`.
Also save the license separately in LICENCE.
If `),_7=r("code"),LG=i("pretty_print"),SG=i(" is True, the JSON will be pretty-printed with the indent level of 4."),OG=m(),_(Ri.$$.fragment),Qw=m(),sr=r("h2"),Bi=r("a"),b7=r("span"),_(jf.$$.fragment),CG=m(),$7=r("span"),zG=i("Metric"),e4=m(),Ca=r("p"),VG=i("The base class "),x7=r("code"),UG=i("Metric"),MG=i(" implements a Metric backed by one or several "),c_=r("a"),RG=i("Dataset"),BG=i("."),t4=m(),K=r("div"),_(wf.$$.fragment),HG=m(),v7=r("p"),GG=i("A Metric is the base class and common API for all metrics."),WG=m(),_(Hi.$$.fragment),YG=m(),za=r("div"),_(Df.$$.fragment),JG=m(),y7=r("p"),KG=i("Add one prediction and reference for the metric\u2019s stack."),ZG=m(),_(Gi.$$.fragment),XG=m(),Va=r("div"),_(kf.$$.fragment),QG=m(),j7=r("p"),eW=i("Add a batch of predictions and references for the metric\u2019s stack."),tW=m(),_(Wi.$$.fragment),sW=m(),xt=r("div"),_(Ef.$$.fragment),aW=m(),w7=r("p"),nW=i("Compute the metrics."),rW=m(),D7=r("p"),oW=i("Usage of positional arguments is not allowed to prevent mistakes."),lW=m(),_(Yi.$$.fragment),iW=m(),Ji=r("div"),_(qf.$$.fragment),pW=m(),k7=r("p"),cW=i("Downloads and prepares dataset for reading."),s4=m(),ar=r("h2"),Ki=r("a"),E7=r("span"),_(If.$$.fragment),dW=m(),q7=r("span"),mW=i("Filesystems"),a4=m(),C=r("div"),_(Tf.$$.fragment),hW=m(),Zi=r("p"),I7=r("code"),fW=i("datasets.filesystems.S3FileSystem"),uW=i(" is a subclass of "),Nf=r("a"),T7=r("code"),gW=i("s3fs.S3FileSystem"),_W=i("."),bW=m(),as=r("p"),$W=i("Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),N7=r("code"),xW=i("key="),vW=i(", "),P7=r("code"),yW=i("secret="),jW=i(") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),A7=r("code"),wW=i("anon=True"),DW=i("."),kW=m(),F7=r("p"),EW=i("Examples:"),qW=m(),L7=r("p"),IW=i("Listing files from public S3 bucket."),TW=m(),_(Xi.$$.fragment),NW=m(),nr=r("p"),PW=i("Listing files from private S3 bucket using "),S7=r("code"),AW=i("aws_access_key_id"),FW=i(" and "),O7=r("code"),LW=i("aws_secret_access_key"),SW=i("."),OW=m(),_(Qi.$$.fragment),CW=m(),ns=r("p"),zW=i("Using "),C7=r("code"),VW=i("S3Filesystem"),UW=i(" with "),z7=r("code"),MW=i("botocore.session.Session"),RW=i(" and custom "),V7=r("code"),BW=i("aws_profile"),HW=i("."),GW=m(),_(ep.$$.fragment),WW=m(),rr=r("p"),YW=i("Loading dataset from S3 using "),U7=r("code"),JW=i("S3Filesystem"),KW=i(" and "),d_=r("a"),ZW=i("load_from_disk()"),XW=i("."),QW=m(),_(tp.$$.fragment),eY=m(),or=r("p"),tY=i("Saving dataset to S3 using "),M7=r("code"),sY=i("S3Filesystem"),aY=i(" and "),m_=r("a"),nY=i("Dataset.save_to_disk()"),rY=i("."),oY=m(),_(sp.$$.fragment),n4=m(),lr=r("div"),_(Pf.$$.fragment),lY=m(),ir=r("p"),iY=i("preprocesses "),R7=r("em"),pY=i("dataset_path"),cY=i(" and removes remote filesystem (e.g. removing "),B7=r("code"),dY=i("s3://"),mY=i(")"),r4=m(),pr=r("div"),_(Af.$$.fragment),hY=m(),H7=r("p"),fY=i("Validates if filesystem has remote protocol."),o4=m(),cr=r("h2"),ap=r("a"),G7=r("span"),_(Ff.$$.fragment),uY=m(),W7=r("span"),gY=i("Fingerprint"),l4=m(),dr=r("div"),_(Lf.$$.fragment),_Y=m(),Y7=r("p"),bY=i("Hasher that accepts python objects as inputs."),this.h()},l(a){const j=pae('[data-svelte="svelte-1phssyn"]',document.head);c=o(j,"META",{name:!0,content:!0}),j.forEach(s),g=h(a),f=o(a,"H1",{class:!0});var Sf=l(f);n=o(Sf,"A",{id:!0,class:!0,href:!0});var J7=l(n);u=o(J7,"SPAN",{});var K7=l(u);b(t.$$.fragment,K7),K7.forEach(s),J7.forEach(s),d=h(Sf),dn=o(Sf,"SPAN",{});var Z7=l(dn);fs=p(Z7,"Main classes"),Z7.forEach(s),Sf.forEach(s),Pr=h(a),Oe=o(a,"H2",{class:!0});var Of=l(Oe);be=o(Of,"A",{id:!0,class:!0,href:!0});var X7=l(be);ne=o(X7,"SPAN",{});var Q7=l(ne);b(us.$$.fragment,Q7),Q7.forEach(s),X7.forEach(s),eu=h(Of),Ar=o(Of,"SPAN",{});var e0=l(Ar);RD=p(e0,"DatasetInfo"),e0.forEach(s),Of.forEach(s),$w=h(a),Q=o(a,"DIV",{class:!0});var _e=l(Q);b(Sp.$$.fragment,_e),BD=h(_e),h$=o(_e,"P",{});var t0=l(h$);HD=p(t0,"Information about a dataset."),t0.forEach(s),GD=h(_e),tu=o(_e,"P",{});var h_=l(tu);f$=o(h_,"EM",{});var s0=l(f$);WD=p(s0,"DatasetInfo"),s0.forEach(s),YD=p(h_,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),h_.forEach(s),JD=h(_e),u$=o(_e,"P",{});var a0=l(u$);KD=p(a0,"Note: Not all fields are known on construction and may be updated later."),a0.forEach(s),ZD=h(_e),$e=o(_e,"DIV",{class:!0});var Je=l($e);b(Op.$$.fragment,Je),XD=h(Je),Cp=o(Je,"P",{});var Cf=l(Cp);QD=p(Cf,"Create DatasetInfo from the JSON file in "),g$=o(Cf,"CODE",{});var n0=l(g$);ek=p(n0,"dataset_info_dir"),n0.forEach(s),tk=p(Cf,"."),Cf.forEach(s),sk=h(Je),_$=o(Je,"P",{});var r0=l(_$);ak=p(r0,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),r0.forEach(s),nk=h(Je),b$=o(Je,"P",{});var o0=l(b$);rk=p(o0,"This will overwrite all previous metadata."),o0.forEach(s),ok=h(Je),b(Fr.$$.fragment,Je),Je.forEach(s),lk=h(_e),gs=o(_e,"DIV",{class:!0});var mr=l(gs);b(zp.$$.fragment,mr),ik=h(mr),mn=o(mr,"P",{});var hr=l(mn);pk=p(hr,"Write "),$$=o(hr,"EM",{});var l0=l($$);ck=p(l0,"DatasetInfo"),l0.forEach(s),dk=p(hr," and license (if present) as JSON files to "),x$=o(hr,"EM",{});var i0=l(x$);mk=p(i0,"dataset_info_dir"),i0.forEach(s),hk=p(hr,"."),hr.forEach(s),fk=h(mr),b(Lr.$$.fragment,mr),mr.forEach(s),_e.forEach(s),xw=h(a),hn=o(a,"H2",{class:!0});var zf=l(hn);Sr=o(zf,"A",{id:!0,class:!0,href:!0});var p0=l(Sr);v$=o(p0,"SPAN",{});var c0=l(v$);b(Vp.$$.fragment,c0),c0.forEach(s),p0.forEach(s),uk=h(zf),y$=o(zf,"SPAN",{});var d0=l(y$);gk=p(d0,"Dataset"),d0.forEach(s),zf.forEach(s),vw=h(a),Or=o(a,"P",{});var Vf=l(Or);_k=p(Vf,"The base class "),su=o(Vf,"A",{href:!0});var m0=l(su);bk=p(m0,"Dataset"),m0.forEach(s),$k=p(Vf," implements a Dataset backed by an Apache Arrow table."),Vf.forEach(s),yw=h(a),q=o(a,"DIV",{class:!0});var I=l(q);b(Up.$$.fragment,I),xk=h(I),j$=o(I,"P",{});var h0=l(j$);vk=p(h0,"A Dataset backed by an Arrow table."),h0.forEach(s),yk=h(I),tt=o(I,"DIV",{class:!0});var rs=l(tt);b(Mp.$$.fragment,rs),jk=h(rs),w$=o(rs,"P",{});var f0=l(w$);wk=p(f0,"Add column to Dataset."),f0.forEach(s),Dk=h(rs),D$=o(rs,"P",{});var u0=l(D$);k$=o(u0,"EM",{});var g0=l(k$);kk=p(g0,"New in version 1.7."),g0.forEach(s),u0.forEach(s),Ek=h(rs),b(Cr.$$.fragment,rs),rs.forEach(s),qk=h(I),st=o(I,"DIV",{class:!0});var os=l(st);b(Rp.$$.fragment,os),Ik=h(os),E$=o(os,"P",{});var _0=l(E$);Tk=p(_0,"Add item to Dataset."),_0.forEach(s),Nk=h(os),q$=o(os,"P",{});var b0=l(q$);I$=o(b0,"EM",{});var $0=l(I$);Pk=p($0,"New in version 1.7."),$0.forEach(s),b0.forEach(s),Ak=h(os),b(zr.$$.fragment,os),os.forEach(s),Fk=h(I),Vr=o(I,"DIV",{class:!0});var Uf=l(Vr);b(Bp.$$.fragment,Uf),Lk=h(Uf),T$=o(Uf,"P",{});var x0=l(T$);Sk=p(x0,"Instantiate a Dataset backed by an Arrow table at filename."),x0.forEach(s),Uf.forEach(s),Ok=h(I),Ur=o(I,"DIV",{class:!0});var Mf=l(Ur);b(Hp.$$.fragment,Mf),Ck=h(Mf),N$=o(Mf,"P",{});var v0=l(N$);zk=p(v0,"Instantiate a Dataset backed by an Arrow buffer."),v0.forEach(s),Mf.forEach(s),Vk=h(I),xe=o(I,"DIV",{class:!0});var Ke=l(xe);b(Gp.$$.fragment,Ke),Uk=h(Ke),At=o(Ke,"P",{});var ls=l(At);Mk=p(ls,"Convert "),P$=o(ls,"CODE",{});var y0=l(P$);Rk=p(y0,"pandas.DataFrame"),y0.forEach(s),Bk=p(ls," to a "),A$=o(ls,"CODE",{});var j0=l(A$);Hk=p(j0,"pyarrow.Table"),j0.forEach(s),Gk=p(ls," to create a "),au=o(ls,"A",{href:!0});var w0=l(au);Wk=p(w0,"Dataset"),w0.forEach(s),Yk=p(ls,"."),ls.forEach(s),Jk=h(Ke),Wp=o(Ke,"P",{});var Rf=l(Wp);Kk=p(Rf,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),F$=o(Rf,"EM",{});var D0=l(F$);Zk=p(D0,"object"),D0.forEach(s),Xk=p(Rf,", we need to guess the datatype by looking at the Python objects in this Series."),Rf.forEach(s),Qk=h(Ke),Yp=o(Ke,"P",{});var Bf=l(Yp);e3=p(Bf,"Be aware that Series of the "),L$=o(Bf,"EM",{});var k0=l(L$);t3=p(k0,"object"),k0.forEach(s),s3=p(Bf,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Bf.forEach(s),a3=h(Ke),b(Mr.$$.fragment,Ke),Ke.forEach(s),n3=h(I),Rr=o(I,"DIV",{class:!0});var Hf=l(Rr);b(Jp.$$.fragment,Hf),r3=h(Hf),Ft=o(Hf,"P",{});var is=l(Ft);o3=p(is,"Convert "),S$=o(is,"CODE",{});var E0=l(S$);l3=p(E0,"dict"),E0.forEach(s),i3=p(is," to a "),O$=o(is,"CODE",{});var q0=l(O$);p3=p(q0,"pyarrow.Table"),q0.forEach(s),c3=p(is," to create a "),nu=o(is,"A",{href:!0});var I0=l(nu);d3=p(I0,"Dataset"),I0.forEach(s),m3=p(is,"."),is.forEach(s),Hf.forEach(s),h3=h(I),_s=o(I,"DIV",{class:!0});var fr=l(_s);b(Kp.$$.fragment,fr),f3=h(fr),C$=o(fr,"P",{});var T0=l(C$);u3=p(T0,"The Apache Arrow table backing the dataset."),T0.forEach(s),g3=h(fr),b(Br.$$.fragment,fr),fr.forEach(s),_3=h(I),bs=o(I,"DIV",{class:!0});var ur=l(bs);b(Zp.$$.fragment,ur),b3=h(ur),z$=o(ur,"P",{});var N0=l(z$);$3=p(N0,"The cache files containing the Apache Arrow table backing the dataset."),N0.forEach(s),x3=h(ur),b(Hr.$$.fragment,ur),ur.forEach(s),v3=h(I),$s=o(I,"DIV",{class:!0});var gr=l($s);b(Xp.$$.fragment,gr),y3=h(gr),V$=o(gr,"P",{});var P0=l(V$);j3=p(P0,"Number of columns in the dataset."),P0.forEach(s),w3=h(gr),b(Gr.$$.fragment,gr),gr.forEach(s),D3=h(I),xs=o(I,"DIV",{class:!0});var _r=l(xs);b(Qp.$$.fragment,_r),k3=h(_r),ec=o(_r,"P",{});var Gf=l(ec);E3=p(Gf,"Number of rows in the dataset (same as "),Wr=o(Gf,"A",{href:!0});var Wf=l(Wr);q3=p(Wf,"Dataset."),U$=o(Wf,"STRONG",{});var A0=l(U$);I3=p(A0,"len"),A0.forEach(s),T3=p(Wf,"()"),Wf.forEach(s),N3=p(Gf,")."),Gf.forEach(s),P3=h(_r),b(Yr.$$.fragment,_r),_r.forEach(s),A3=h(I),vs=o(I,"DIV",{class:!0});var br=l(vs);b(tc.$$.fragment,br),F3=h(br),M$=o(br,"P",{});var F0=l(M$);L3=p(F0,"Names of the columns in the dataset."),F0.forEach(s),S3=h(br),b(Jr.$$.fragment,br),br.forEach(s),O3=h(I),ys=o(I,"DIV",{class:!0});var $r=l(ys);b(sc.$$.fragment,$r),C3=h($r),R$=o($r,"P",{});var L0=l(R$);z3=p(L0,"Shape of the dataset (number of columns, number of rows)."),L0.forEach(s),V3=h($r),b(Kr.$$.fragment,$r),$r.forEach(s),U3=h(I),at=o(I,"DIV",{class:!0});var ps=l(at);b(ac.$$.fragment,ps),M3=h(ps),B$=o(ps,"P",{});var S0=l(B$);R3=p(S0,"Return a list of the unique elements in a column."),S0.forEach(s),B3=h(ps),H$=o(ps,"P",{});var O0=l(H$);H3=p(O0,"This is implemented in the low-level backend and as such, very fast."),O0.forEach(s),G3=h(ps),b(Zr.$$.fragment,ps),ps.forEach(s),W3=h(I),js=o(I,"DIV",{class:!0});var xr=l(js);b(nc.$$.fragment,xr),Y3=h(xr),G$=o(xr,"P",{});var C0=l(G$);J3=p(C0,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),C0.forEach(s),K3=h(xr),b(Xr.$$.fragment,xr),xr.forEach(s),Z3=h(I),ws=o(I,"DIV",{class:!0});var vr=l(ws);b(rc.$$.fragment,vr),X3=h(vr),W$=o(vr,"P",{});var z0=l(W$);Q3=p(z0,"Cast the dataset to a new set of features."),z0.forEach(s),eE=h(vr),b(Qr.$$.fragment,vr),vr.forEach(s),tE=h(I),Ds=o(I,"DIV",{class:!0});var yr=l(Ds);b(oc.$$.fragment,yr),sE=h(yr),Y$=o(yr,"P",{});var V0=l(Y$);aE=p(V0,"Cast column to feature for decoding."),V0.forEach(s),nE=h(yr),b(eo.$$.fragment,yr),yr.forEach(s),rE=h(I),nt=o(I,"DIV",{class:!0});var cs=l(nt);b(lc.$$.fragment,cs),oE=h(cs),J$=o(cs,"P",{});var U0=l(J$);lE=p(U0,"Remove one or several column(s) in the dataset and the features associated to them."),U0.forEach(s),iE=h(cs),fn=o(cs,"P",{});var jr=l(fn);pE=p(jr,"You can also remove a column using "),ru=o(jr,"A",{href:!0});var M0=l(ru);cE=p(M0,"Dataset.map()"),M0.forEach(s),dE=p(jr," with "),K$=o(jr,"EM",{});var R0=l(K$);mE=p(R0,"remove_columns"),R0.forEach(s),hE=p(jr,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),jr.forEach(s),fE=h(cs),b(to.$$.fragment,cs),cs.forEach(s),uE=h(I),ks=o(I,"DIV",{class:!0});var wr=l(ks);b(ic.$$.fragment,wr),gE=h(wr),Z$=o(wr,"P",{});var B0=l(Z$);_E=p(B0,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),B0.forEach(s),bE=h(wr),b(so.$$.fragment,wr),wr.forEach(s),$E=h(I),Es=o(I,"DIV",{class:!0});var Dr=l(Es);b(pc.$$.fragment,Dr),xE=h(Dr),X$=o(Dr,"P",{});var H0=l(X$);vE=p(H0,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),H0.forEach(s),yE=h(Dr),b(ao.$$.fragment,Dr),Dr.forEach(s),jE=h(I),qs=o(I,"DIV",{class:!0});var kr=l(qs);b(cc.$$.fragment,kr),wE=h(kr),dc=o(kr,"P",{});var Yf=l(dc);DE=p(Yf,"Casts the given column as :obj:"),Q$=o(Yf,"CODE",{});var G0=l(Q$);kE=p(G0,"datasets.features.ClassLabel"),G0.forEach(s),EE=p(Yf," and updates the table."),Yf.forEach(s),qE=h(kr),b(no.$$.fragment,kr),kr.forEach(s),IE=h(I),Is=o(I,"DIV",{class:!0});var Er=l(Is);b(mc.$$.fragment,Er),TE=h(Er),e2=o(Er,"P",{});var W0=l(e2);NE=p(W0,"Number of rows in the dataset."),W0.forEach(s),PE=h(Er),b(ro.$$.fragment,Er),Er.forEach(s),AE=h(I),Ts=o(I,"DIV",{class:!0});var qr=l(Ts);b(hc.$$.fragment,qr),FE=h(qr),t2=o(qr,"P",{});var Y0=l(t2);LE=p(Y0,"Iterate through the examples."),Y0.forEach(s),SE=h(qr),fc=o(qr,"P",{});var Jf=l(fc);OE=p(Jf,"If a formatting is set with "),ou=o(Jf,"A",{href:!0});var J0=l(ou);CE=p(J0,"Dataset.set_format()"),J0.forEach(s),zE=p(Jf,` rows will be returned with the
selected format.`),Jf.forEach(s),qr.forEach(s),VE=h(I),oo=o(I,"DIV",{class:!0});var Kf=l(oo);b(uc.$$.fragment,Kf),UE=h(Kf),un=o(Kf,"P",{});var Ir=l(un);ME=p(Ir,"To be used in a "),s2=o(Ir,"CODE",{});var K0=l(s2);RE=p(K0,"with"),K0.forEach(s),BE=p(Ir," statement. Set "),a2=o(Ir,"CODE",{});var Z0=l(a2);HE=p(Z0,"__getitem__"),Z0.forEach(s),GE=p(Ir," return format (type and columns)."),Ir.forEach(s),Kf.forEach(s),WE=h(I),ve=o(I,"DIV",{class:!0});var Ze=l(ve);b(gc.$$.fragment,Ze),YE=h(Ze),Ce=o(Ze,"P",{});var Xe=l(Ce);JE=p(Xe,"Set "),n2=o(Xe,"STRONG",{});var X0=l(n2);KE=p(X0,"getitem"),X0.forEach(s),ZE=p(Xe,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),r2=o(Xe,"CODE",{});var Q0=l(r2);XE=p(Q0,"type"),Q0.forEach(s),QE=p(Xe," (for example \u201Cnumpy\u201D) is used to format batches when using "),o2=o(Xe,"STRONG",{});var ew=l(o2);e9=p(ew,"getitem"),ew.forEach(s),t9=p(Xe,`.
It\u2019s also possible to use custom transforms for formatting using `),lu=o(Xe,"A",{href:!0});var tw=l(lu);s9=p(tw,"datasets.Dataset.set_transform()"),tw.forEach(s),a9=p(Xe,"."),Xe.forEach(s),n9=h(Ze),ze=o(Ze,"P",{});var Qe=l(ze);r9=p(Qe,"It is possible to call "),l2=o(Qe,"CODE",{});var sw=l(l2);o9=p(sw,"map"),sw.forEach(s),l9=p(Qe," after calling "),i2=o(Qe,"CODE",{});var aw=l(i2);i9=p(aw,"set_format"),aw.forEach(s),p9=p(Qe,". Since "),p2=o(Qe,"CODE",{});var nw=l(p2);c9=p(nw,"map"),nw.forEach(s),d9=p(Qe,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),c2=o(Qe,"CODE",{});var rw=l(c2);m9=p(rw,"map"),rw.forEach(s),h9=p(Qe," on a dataset to add a new column, then this column will be formatted:"),Qe.forEach(s),f9=h(Ze),d2=o(Ze,"P",{});var ow=l(d2);u9=p(ow,"new formatted columns = (all columns - previously unformatted columns)"),ow.forEach(s),g9=h(Ze),b(lo.$$.fragment,Ze),Ze.forEach(s),_9=h(I),Ns=o(I,"DIV",{class:!0});var Tr=l(Ns);b(_c.$$.fragment,Tr),b9=h(Tr),rt=o(Tr,"P",{});var vt=l(rt);$9=p(vt,"Set "),m2=o(vt,"STRONG",{});var lw=l(m2);x9=p(lw,"getitem"),lw.forEach(s),v9=p(vt," return format using this transform. The transform is applied on-the-fly on batches when "),h2=o(vt,"STRONG",{});var iw=l(h2);y9=p(iw,"getitem"),iw.forEach(s),j9=p(vt,` is called.
As `),iu=o(vt,"A",{href:!0});var pw=l(iu);w9=p(pw,"datasets.Dataset.set_format()"),pw.forEach(s),D9=p(vt,", this can be reset using "),pu=o(vt,"A",{href:!0});var cw=l(pu);k9=p(cw,"datasets.Dataset.reset_format()"),cw.forEach(s),vt.forEach(s),E9=h(Tr),b(io.$$.fragment,Tr),Tr.forEach(s),q9=h(I),ot=o(I,"DIV",{class:!0});var ds=l(ot);b(bc.$$.fragment,ds),I9=h(ds),$c=o(ds,"P",{});var Zf=l($c);T9=p(Zf,"Reset "),f2=o(Zf,"STRONG",{});var dw=l(f2);N9=p(dw,"getitem"),dw.forEach(s),P9=p(Zf," return format to python objects and all columns."),Zf.forEach(s),A9=h(ds),cu=o(ds,"P",{});var f_=l(cu);F9=p(f_,"Same as "),u2=o(f_,"CODE",{});var mw=l(u2);L9=p(mw,"self.set_format()"),mw.forEach(s),f_.forEach(s),S9=h(ds),b(po.$$.fragment,ds),ds.forEach(s),O9=h(I),ye=o(I,"DIV",{class:!0});var et=l(ye);b(xc.$$.fragment,et),C9=h(et),Lt=o(et,"P",{});var ms=l(Lt);z9=p(ms,"Set "),g2=o(ms,"STRONG",{});var hw=l(g2);V9=p(hw,"getitem"),hw.forEach(s),U9=p(ms,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),_2=o(ms,"CODE",{});var fw=l(_2);M9=p(fw,"type"),fw.forEach(s),R9=p(ms," (for example \u201Cnumpy\u201D) is used to format batches when using "),b2=o(ms,"STRONG",{});var uw=l(b2);B9=p(uw,"getitem"),uw.forEach(s),H9=p(ms,"."),ms.forEach(s),G9=h(et),vc=o(et,"P",{});var Xf=l(vc);W9=p(Xf,"It\u2019s also possible to use custom transforms for formatting using "),du=o(Xf,"A",{href:!0});var gw=l(du);Y9=p(gw,"datasets.Dataset.with_transform()"),gw.forEach(s),J9=p(Xf,"."),Xf.forEach(s),K9=h(et),gn=o(et,"P",{});var Nr=l(gn);Z9=p(Nr,"Contrary to "),mu=o(Nr,"A",{href:!0});var AY=l(mu);X9=p(AY,"datasets.Dataset.set_format()"),AY.forEach(s),Q9=p(Nr,", "),$2=o(Nr,"CODE",{});var FY=l($2);e5=p(FY,"with_format"),FY.forEach(s),t5=p(Nr," returns a new Dataset object."),Nr.forEach(s),s5=h(et),b(co.$$.fragment,et),et.forEach(s),a5=h(I),je=o(I,"DIV",{class:!0});var Ua=l(je);b(yc.$$.fragment,Ua),n5=h(Ua),_n=o(Ua,"P",{});var u_=l(_n);r5=p(u_,"Set "),x2=o(u_,"STRONG",{});var LY=l(x2);o5=p(LY,"getitem"),LY.forEach(s),l5=p(u_," return format using this transform. The transform is applied on-the-fly on batches when "),v2=o(u_,"STRONG",{});var SY=l(v2);i5=p(SY,"getitem"),SY.forEach(s),p5=p(u_," is called."),u_.forEach(s),c5=h(Ua),bn=o(Ua,"P",{});var g_=l(bn);d5=p(g_,"As "),hu=o(g_,"A",{href:!0});var OY=l(hu);m5=p(OY,"datasets.Dataset.set_format()"),OY.forEach(s),h5=p(g_,", this can be reset using "),fu=o(g_,"A",{href:!0});var CY=l(fu);f5=p(CY,"datasets.Dataset.reset_format()"),CY.forEach(s),u5=p(g_,"."),g_.forEach(s),g5=h(Ua),$n=o(Ua,"P",{});var __=l($n);_5=p(__,"Contrary to "),uu=o(__,"A",{href:!0});var zY=l(uu);b5=p(zY,"datasets.Dataset.set_transform()"),zY.forEach(s),$5=p(__,", "),y2=o(__,"CODE",{});var VY=l(y2);x5=p(VY,"with_transform"),VY.forEach(s),v5=p(__," returns a new Dataset object."),__.forEach(s),y5=h(Ua),b(mo.$$.fragment,Ua),Ua.forEach(s),j5=h(I),ho=o(I,"DIV",{class:!0});var p4=l(ho);b(jc.$$.fragment,p4),w5=h(p4),j2=o(p4,"P",{});var UY=l(j2);D5=p(UY,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),UY.forEach(s),p4.forEach(s),k5=h(I),lt=o(I,"DIV",{class:!0});var np=l(lt);b(wc.$$.fragment,np),E5=h(np),w2=o(np,"P",{});var MY=l(w2);q5=p(MY,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),MY.forEach(s),I5=h(np),D2=o(np,"P",{});var RY=l(D2);T5=p(RY,"Be careful when running this command that no other process is currently using other cache files."),RY.forEach(s),N5=h(np),b(fo.$$.fragment,np),np.forEach(s),P5=h(I),we=o(I,"DIV",{class:!0});var Ma=l(we);b(Dc.$$.fragment,Ma),A5=h(Ma),k2=o(Ma,"P",{});var BY=l(k2);F5=p(BY,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),BY.forEach(s),L5=h(Ma),kc=o(Ma,"P",{});var c4=l(kc);S5=p(c4,"You can specify whether the function should be batched or not with the "),E2=o(c4,"CODE",{});var HY=l(E2);O5=p(HY,"batched"),HY.forEach(s),C5=p(c4," parameter:"),c4.forEach(s),z5=h(Ma),xn=o(Ma,"UL",{});var b_=l(xn);q2=o(b_,"LI",{});var GY=l(q2);V5=p(GY,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),GY.forEach(s),U5=h(b_),I2=o(b_,"LI",{});var WY=l(I2);M5=p(WY,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),WY.forEach(s),R5=h(b_),de=o(b_,"LI",{});var yt=l(de);B5=p(yt,"If batched is True and batch_size is "),T2=o(yt,"CODE",{});var YY=l(T2);H5=p(YY,"n"),YY.forEach(s),G5=p(yt," > 1, then the function takes a batch of "),N2=o(yt,"CODE",{});var JY=l(N2);W5=p(JY,"n"),JY.forEach(s),Y5=p(yt," examples as input and can return a batch with "),P2=o(yt,"CODE",{});var KY=l(P2);J5=p(KY,"n"),KY.forEach(s),K5=p(yt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),A2=o(yt,"CODE",{});var ZY=l(A2);Z5=p(ZY,"n"),ZY.forEach(s),X5=p(yt,` examples.
A batch is a dictionary, e.g. a batch of `),F2=o(yt,"CODE",{});var XY=l(F2);Q5=p(XY,"n"),XY.forEach(s),e6=p(yt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),yt.forEach(s),b_.forEach(s),t6=h(Ma),b(uo.$$.fragment,Ma),Ma.forEach(s),s6=h(I),Ps=o(I,"DIV",{class:!0});var $_=l(Ps);b(Ec.$$.fragment,$_),a6=h($_),L2=o($_,"P",{});var QY=l(L2);n6=p(QY,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),QY.forEach(s),r6=h($_),b(go.$$.fragment,$_),$_.forEach(s),o6=h(I),As=o(I,"DIV",{class:!0});var x_=l(As);b(qc.$$.fragment,x_),l6=h(x_),S2=o(x_,"P",{});var eJ=l(S2);i6=p(eJ,"Create a new dataset with rows selected following the list/array of indices."),eJ.forEach(s),p6=h(x_),b(_o.$$.fragment,x_),x_.forEach(s),c6=h(I),it=o(I,"DIV",{class:!0});var rp=l(it);b(Ic.$$.fragment,rp),d6=h(rp),O2=o(rp,"P",{});var tJ=l(O2);m6=p(tJ,"Create a new dataset sorted according to a column."),tJ.forEach(s),h6=h(rp),C2=o(rp,"P",{});var sJ=l(C2);f6=p(sJ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),sJ.forEach(s),u6=h(rp),b(bo.$$.fragment,rp),rp.forEach(s),g6=h(I),pt=o(I,"DIV",{class:!0});var op=l(pt);b(Tc.$$.fragment,op),_6=h(op),z2=o(op,"P",{});var aJ=l(z2);b6=p(aJ,"Create a new Dataset where the rows are shuffled."),aJ.forEach(s),$6=h(op),V2=o(op,"P",{});var nJ=l(V2);x6=p(nJ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),nJ.forEach(s),v6=h(op),b($o.$$.fragment,op),op.forEach(s),y6=h(I),ct=o(I,"DIV",{class:!0});var lp=l(ct);b(Nc.$$.fragment,lp),j6=h(lp),Y=o(lp,"P",{});var pe=l(Y);w6=p(pe,"Return a dictionary ("),U2=o(pe,"CODE",{});var rJ=l(U2);D6=p(rJ,"datasets.DatasetDict"),rJ.forEach(s),k6=p(pe,") with two random train and test subsets ("),M2=o(pe,"EM",{});var oJ=l(M2);E6=p(oJ,"train"),oJ.forEach(s),q6=p(pe," and "),R2=o(pe,"EM",{});var lJ=l(R2);I6=p(lJ,"test"),lJ.forEach(s),T6=h(pe),B2=o(pe,"CODE",{});var iJ=l(B2);N6=p(iJ,"Dataset"),iJ.forEach(s),P6=p(pe,` splits).
Splits are created from the dataset according to `),H2=o(pe,"EM",{});var pJ=l(H2);A6=p(pJ,"test_size"),pJ.forEach(s),F6=p(pe,", "),G2=o(pe,"EM",{});var cJ=l(G2);L6=p(cJ,"train_size"),cJ.forEach(s),S6=p(pe," and "),W2=o(pe,"EM",{});var dJ=l(W2);O6=p(dJ,"shuffle"),dJ.forEach(s),C6=p(pe,"."),pe.forEach(s),z6=h(lp),Pc=o(lp,"P",{});var d4=l(Pc);V6=p(d4,"This method is similar to scikit-learn "),Y2=o(d4,"EM",{});var mJ=l(Y2);U6=p(mJ,"train_test_split"),mJ.forEach(s),M6=p(d4," with the omission of the stratified options."),d4.forEach(s),R6=h(lp),b(xo.$$.fragment,lp),lp.forEach(s),B6=h(I),re=o(I,"DIV",{class:!0});var jt=l(re);b(Ac.$$.fragment,jt),H6=h(jt),vn=o(jt,"P",{});var v_=l(vn);G6=p(v_,"Return the "),J2=o(v_,"EM",{});var hJ=l(J2);W6=p(hJ,"index"),hJ.forEach(s),Y6=p(v_,"-nth shard from dataset split into "),K2=o(v_,"EM",{});var fJ=l(K2);J6=p(fJ,"num_shards"),fJ.forEach(s),K6=p(v_," pieces."),v_.forEach(s),Z6=h(jt),Z2=o(jt,"P",{});var uJ=l(Z2);X6=p(uJ,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),uJ.forEach(s),Q6=h(jt),Fc=o(jt,"P",{});var m4=l(Fc);e8=p(m4,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),X2=o(m4,"EM",{});var gJ=l(X2);t8=p(gJ,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),gJ.forEach(s),s8=p(m4,` will return
a dataset with the same order as the original.`),m4.forEach(s),a8=h(jt),Q2=o(jt,"P",{});var _J=l(Q2);n8=p(_J,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),_J.forEach(s),r8=h(jt),b(vo.$$.fragment,jt),jt.forEach(s),o8=h(I),Fs=o(I,"DIV",{class:!0});var y_=l(Fs);b(Lc.$$.fragment,y_),l8=h(y_),ex=o(y_,"P",{});var bJ=l(ex);i8=p(bJ,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),bJ.forEach(s),p8=h(y_),b(yo.$$.fragment,y_),y_.forEach(s),c8=h(I),dt=o(I,"DIV",{class:!0});var ip=l(dt);b(Sc.$$.fragment,ip),d8=h(ip),tx=o(ip,"P",{});var $J=l(tx);m8=p($J,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),$J.forEach(s),h8=h(ip),St=o(ip,"P",{});var pp=l(St);f8=p(pp,"The resulting Parquet files are self-contained by default: if your dataset contains "),gu=o(pp,"A",{href:!0});var xJ=l(gu);u8=p(xJ,"Image"),xJ.forEach(s),g8=p(pp," or "),_u=o(pp,"A",{href:!0});var vJ=l(_u);_8=p(vJ,"Audio"),vJ.forEach(s),b8=p(pp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),sx=o(pp,"EM",{});var yJ=l(sx);$8=p(yJ,"embed_external_files"),yJ.forEach(s),x8=p(pp," to False."),pp.forEach(s),v8=h(ip),b(jo.$$.fragment,ip),ip.forEach(s),y8=h(I),Z=o(I,"DIV",{class:!0});var Le=l(Z);b(Oc.$$.fragment,Le),j8=h(Le),yn=o(Le,"P",{});var j_=l(yn);w8=p(j_,"Saves a dataset to a dataset directory, or in a filesystem using either "),bu=o(j_,"A",{href:!0});var jJ=l(bu);D8=p(jJ,"S3FileSystem"),jJ.forEach(s),k8=p(j_,` or
any implementation of `),ax=o(j_,"CODE",{});var wJ=l(ax);E8=p(wJ,"fsspec.spec.AbstractFileSystem"),wJ.forEach(s),q8=p(j_,"."),j_.forEach(s),I8=h(Le),jn=o(Le,"P",{});var w_=l(jn);T8=p(w_,"For "),$u=o(w_,"A",{href:!0});var DJ=l($u);N8=p(DJ,"Image"),DJ.forEach(s),P8=p(w_," and "),xu=o(w_,"A",{href:!0});var kJ=l(xu);A8=p(kJ,"Audio"),kJ.forEach(s),F8=p(w_," data:"),w_.forEach(s),L8=h(Le),Cc=o(Le,"P",{});var h4=l(Cc);S8=p(h4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),nx=o(h4,"EM",{});var EJ=l(nx);O8=p(EJ,"read()"),EJ.forEach(s),C8=p(h4," those files first."),h4.forEach(s),z8=h(Le),b(wo.$$.fragment,Le),V8=h(Le),b(Do.$$.fragment,Le),U8=h(Le),b(ko.$$.fragment,Le),Le.forEach(s),M8=h(I),Ls=o(I,"DIV",{class:!0});var D_=l(Ls);b(zc.$$.fragment,D_),R8=h(D_),Ot=o(D_,"P",{});var cp=l(Ot);B8=p(cp,"Loads a dataset that was previously saved using "),rx=o(cp,"CODE",{});var qJ=l(rx);H8=p(qJ,"save_to_disk"),qJ.forEach(s),G8=p(cp,` from a dataset directory, or from a
filesystem using either `),vu=o(cp,"A",{href:!0});var IJ=l(vu);W8=p(IJ,"S3FileSystem"),IJ.forEach(s),Y8=p(cp,` or any implementation of
`),ox=o(cp,"CODE",{});var TJ=l(ox);J8=p(TJ,"fsspec.spec.AbstractFileSystem"),TJ.forEach(s),K8=p(cp,"."),cp.forEach(s),Z8=h(D_),b(Eo.$$.fragment,D_),D_.forEach(s),X8=h(I),qo=o(I,"DIV",{class:!0});var f4=l(qo);b(Vc.$$.fragment,f4),Q8=h(f4),lx=o(f4,"P",{});var NJ=l(lx);eq=p(NJ,"Create and cache a new Dataset by flattening the indices mapping."),NJ.forEach(s),f4.forEach(s),tq=h(I),Ss=o(I,"DIV",{class:!0});var k_=l(Ss);b(Uc.$$.fragment,k_),sq=h(k_),ix=o(k_,"P",{});var PJ=l(ix);aq=p(PJ,"Exports the dataset to csv"),PJ.forEach(s),nq=h(k_),b(Io.$$.fragment,k_),k_.forEach(s),rq=h(I),Os=o(I,"DIV",{class:!0});var E_=l(Os);b(Mc.$$.fragment,E_),oq=h(E_),Rc=o(E_,"P",{});var u4=l(Rc);lq=p(u4,"Returns the dataset as a "),px=o(u4,"CODE",{});var AJ=l(px);iq=p(AJ,"pandas.DataFrame"),AJ.forEach(s),pq=p(u4,". Can also return a generator for large datasets."),u4.forEach(s),cq=h(E_),b(To.$$.fragment,E_),E_.forEach(s),dq=h(I),Cs=o(I,"DIV",{class:!0});var q_=l(Cs);b(Bc.$$.fragment,q_),mq=h(q_),cx=o(q_,"P",{});var FJ=l(cx);hq=p(FJ,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),FJ.forEach(s),fq=h(q_),b(No.$$.fragment,q_),q_.forEach(s),uq=h(I),zs=o(I,"DIV",{class:!0});var I_=l(zs);b(Hc.$$.fragment,I_),gq=h(I_),dx=o(I_,"P",{});var LJ=l(dx);_q=p(LJ,"Export the dataset to JSON Lines or JSON."),LJ.forEach(s),bq=h(I_),b(Po.$$.fragment,I_),I_.forEach(s),$q=h(I),Vs=o(I,"DIV",{class:!0});var T_=l(Vs);b(Gc.$$.fragment,T_),xq=h(T_),mx=o(T_,"P",{});var SJ=l(mx);vq=p(SJ,"Exports the dataset to parquet"),SJ.forEach(s),yq=h(T_),b(Ao.$$.fragment,T_),T_.forEach(s),jq=h(I),mt=o(I,"DIV",{class:!0});var dp=l(mt);b(Wc.$$.fragment,dp),wq=h(dp),wn=o(dp,"P",{});var N_=l(wn);Dq=p(N_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),hx=o(N_,"CODE",{});var OJ=l(hx);kq=p(OJ,"device"),OJ.forEach(s),Eq=p(N_," if you want to run it on GPU ("),fx=o(N_,"CODE",{});var CJ=l(fx);qq=p(CJ,"device"),CJ.forEach(s),Iq=p(N_,` must be the GPU index).
You can find more information about Faiss here:`),N_.forEach(s),Tq=h(dp),ux=o(dp,"UL",{});var zJ=l(ux);yu=o(zJ,"LI",{});var $Y=l(yu);Nq=p($Y,"For "),Yc=o($Y,"A",{href:!0,rel:!0});var VJ=l(Yc);Pq=p(VJ,"string factory"),VJ.forEach(s),$Y.forEach(s),zJ.forEach(s),Aq=h(dp),b(Fo.$$.fragment,dp),dp.forEach(s),Fq=h(I),Us=o(I,"DIV",{class:!0});var P_=l(Us);b(Jc.$$.fragment,P_),Lq=h(P_),Ct=o(P_,"P",{});var mp=l(Ct);Sq=p(mp,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),gx=o(mp,"EM",{});var UJ=l(gx);Oq=p(UJ,"external_arrays"),UJ.forEach(s),Cq=p(mp,`.
You can specify `),_x=o(mp,"EM",{});var MJ=l(_x);zq=p(MJ,"device"),MJ.forEach(s),Vq=p(mp," if you want to run it on GPU ("),bx=o(mp,"EM",{});var RJ=l(bx);Uq=p(RJ,"device"),RJ.forEach(s),Mq=p(mp,` must be the GPU index).
You can find more information about Faiss here:`),mp.forEach(s),Rq=h(P_),$x=o(P_,"UL",{});var BJ=l($x);ju=o(BJ,"LI",{});var xY=l(ju);Bq=p(xY,"For "),Kc=o(xY,"A",{href:!0,rel:!0});var HJ=l(Kc);Hq=p(HJ,"string factory"),HJ.forEach(s),xY.forEach(s),BJ.forEach(s),P_.forEach(s),Gq=h(I),Lo=o(I,"DIV",{class:!0});var g4=l(Lo);b(Zc.$$.fragment,g4),Wq=h(g4),xx=o(g4,"P",{});var GJ=l(xx);Yq=p(GJ,"Save a FaissIndex on disk."),GJ.forEach(s),g4.forEach(s),Jq=h(I),Ms=o(I,"DIV",{class:!0});var A_=l(Ms);b(Xc.$$.fragment,A_),Kq=h(A_),vx=o(A_,"P",{});var WJ=l(vx);Zq=p(WJ,"Load a FaissIndex from disk."),WJ.forEach(s),Xq=h(A_),Qc=o(A_,"P",{});var _4=l(Qc);Qq=p(_4,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),yx=o(_4,"EM",{});var YJ=l(yx);eI=p(YJ,".get_index(index_name).faiss_index"),YJ.forEach(s),tI=p(_4," to make it fit your needs."),_4.forEach(s),A_.forEach(s),sI=h(I),Rs=o(I,"DIV",{class:!0});var F_=l(Rs);b(ed.$$.fragment,F_),aI=h(F_),jx=o(F_,"P",{});var JJ=l(jx);nI=p(JJ,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),JJ.forEach(s),rI=h(F_),b(So.$$.fragment,F_),F_.forEach(s),oI=h(I),Bs=o(I,"DIV",{class:!0});var L_=l(Bs);b(td.$$.fragment,L_),lI=h(L_),wx=o(L_,"P",{});var KJ=l(wx);iI=p(KJ,"Load an existing text index using ElasticSearch for fast retrieval."),KJ.forEach(s),pI=h(L_),b(Oo.$$.fragment,L_),L_.forEach(s),cI=h(I),Co=o(I,"DIV",{class:!0});var b4=l(Co);b(sd.$$.fragment,b4),dI=h(b4),Dx=o(b4,"P",{});var ZJ=l(Dx);mI=p(ZJ,"List the colindex_nameumns/identifiers of all the attached indexes."),ZJ.forEach(s),b4.forEach(s),hI=h(I),zo=o(I,"DIV",{class:!0});var $4=l(zo);b(ad.$$.fragment,$4),fI=h($4),kx=o($4,"P",{});var XJ=l(kx);uI=p(XJ,"List the index_name/identifiers of all the attached indexes."),XJ.forEach(s),$4.forEach(s),gI=h(I),Vo=o(I,"DIV",{class:!0});var x4=l(Vo);b(nd.$$.fragment,x4),_I=h(x4),Ex=o(x4,"P",{});var QJ=l(Ex);bI=p(QJ,"Drop the index with the specified column."),QJ.forEach(s),x4.forEach(s),$I=h(I),Uo=o(I,"DIV",{class:!0});var v4=l(Uo);b(rd.$$.fragment,v4),xI=h(v4),qx=o(v4,"P",{});var eK=l(qx);vI=p(eK,"Find the nearest examples indices in the dataset to the query."),eK.forEach(s),v4.forEach(s),yI=h(I),Mo=o(I,"DIV",{class:!0});var y4=l(Mo);b(od.$$.fragment,y4),jI=h(y4),Ix=o(y4,"P",{});var tK=l(Ix);wI=p(tK,"Find the nearest examples indices in the dataset to the query."),tK.forEach(s),y4.forEach(s),DI=h(I),Ro=o(I,"DIV",{class:!0});var j4=l(Ro);b(ld.$$.fragment,j4),kI=h(j4),Tx=o(j4,"P",{});var sK=l(Tx);EI=p(sK,"Find the nearest examples in the dataset to the query."),sK.forEach(s),j4.forEach(s),qI=h(I),Bo=o(I,"DIV",{class:!0});var w4=l(Bo);b(id.$$.fragment,w4),II=h(w4),Nx=o(w4,"P",{});var aK=l(Nx);TI=p(aK,"Find the nearest examples in the dataset to the query."),aK.forEach(s),w4.forEach(s),NI=h(I),Ho=o(I,"DIV",{class:!0});var D4=l(Ho);b(pd.$$.fragment,D4),PI=h(D4),wu=o(D4,"P",{});var vY=l(wu);Du=o(vY,"A",{href:!0});var nK=l(Du);AI=p(nK,"datasets.DatasetInfo"),nK.forEach(s),FI=p(vY," object containing all the metadata in the dataset."),vY.forEach(s),D4.forEach(s),LI=h(I),Go=o(I,"DIV",{class:!0});var k4=l(Go);b(cd.$$.fragment,k4),SI=h(k4),ku=o(k4,"P",{});var yY=l(ku);Eu=o(yY,"A",{href:!0});var rK=l(Eu);OI=p(rK,"datasets.NamedSplit"),rK.forEach(s),CI=p(yY," object corresponding to a named dataset split."),yY.forEach(s),k4.forEach(s),zI=h(I),qu=o(I,"DIV",{class:!0});var oK=l(qu);b(dd.$$.fragment,oK),oK.forEach(s),VI=h(I),Iu=o(I,"DIV",{class:!0});var lK=l(Iu);b(md.$$.fragment,lK),lK.forEach(s),UI=h(I),Tu=o(I,"DIV",{class:!0});var iK=l(Tu);b(hd.$$.fragment,iK),iK.forEach(s),MI=h(I),Nu=o(I,"DIV",{class:!0});var pK=l(Nu);b(fd.$$.fragment,pK),pK.forEach(s),RI=h(I),Pu=o(I,"DIV",{class:!0});var cK=l(Pu);b(ud.$$.fragment,cK),cK.forEach(s),BI=h(I),Au=o(I,"DIV",{class:!0});var dK=l(Au);b(gd.$$.fragment,dK),dK.forEach(s),HI=h(I),Fu=o(I,"DIV",{class:!0});var mK=l(Fu);b(_d.$$.fragment,mK),mK.forEach(s),GI=h(I),Lu=o(I,"DIV",{class:!0});var hK=l(Lu);b(bd.$$.fragment,hK),hK.forEach(s),WI=h(I),Su=o(I,"DIV",{class:!0});var fK=l(Su);b($d.$$.fragment,fK),fK.forEach(s),YI=h(I),Ou=o(I,"DIV",{class:!0});var uK=l(Ou);b(xd.$$.fragment,uK),uK.forEach(s),JI=h(I),Cu=o(I,"DIV",{class:!0});var gK=l(Cu);b(vd.$$.fragment,gK),gK.forEach(s),KI=h(I),zu=o(I,"DIV",{class:!0});var _K=l(zu);b(yd.$$.fragment,_K),_K.forEach(s),ZI=h(I),Vu=o(I,"DIV",{class:!0});var bK=l(Vu);b(jd.$$.fragment,bK),bK.forEach(s),XI=h(I),Hs=o(I,"DIV",{class:!0});var S_=l(Hs);b(wd.$$.fragment,S_),QI=h(S_),Px=o(S_,"P",{});var $K=l(Px);eT=p($K,"Create Dataset from CSV file(s)."),$K.forEach(s),tT=h(S_),b(Wo.$$.fragment,S_),S_.forEach(s),sT=h(I),Gs=o(I,"DIV",{class:!0});var O_=l(Gs);b(Dd.$$.fragment,O_),aT=h(O_),Ax=o(O_,"P",{});var xK=l(Ax);nT=p(xK,"Create Dataset from JSON or JSON Lines file(s)."),xK.forEach(s),rT=h(O_),b(Yo.$$.fragment,O_),O_.forEach(s),oT=h(I),Ws=o(I,"DIV",{class:!0});var C_=l(Ws);b(kd.$$.fragment,C_),lT=h(C_),Fx=o(C_,"P",{});var vK=l(Fx);iT=p(vK,"Create Dataset from Parquet file(s)."),vK.forEach(s),pT=h(C_),b(Jo.$$.fragment,C_),C_.forEach(s),cT=h(I),Ys=o(I,"DIV",{class:!0});var z_=l(Ys);b(Ed.$$.fragment,z_),dT=h(z_),Lx=o(z_,"P",{});var yK=l(Lx);mT=p(yK,"Create Dataset from text file(s)."),yK.forEach(s),hT=h(z_),b(Ko.$$.fragment,z_),z_.forEach(s),fT=h(I),Js=o(I,"DIV",{class:!0});var V_=l(Js);b(qd.$$.fragment,V_),uT=h(V_),Dn=o(V_,"P",{});var U_=l(Dn);gT=p(U_,"Prepare a dataset for the given task by casting the dataset\u2019s "),Uu=o(U_,"A",{href:!0});var jK=l(Uu);_T=p(jK,"Features"),jK.forEach(s),bT=p(U_," to standardized column names and types as detailed in "),Mu=o(U_,"A",{href:!0});var wK=l(Mu);$T=p(wK,"datasets.tasks"),wK.forEach(s),xT=p(U_,"."),U_.forEach(s),vT=h(V_),kn=o(V_,"P",{});var M_=l(kn);yT=p(M_,"Casts "),Sx=o(M_,"CODE",{});var DK=l(Sx);jT=p(DK,"datasets.DatasetInfo.features"),DK.forEach(s),wT=p(M_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Ox=o(M_,"CODE",{});var kK=l(Ox);DT=p(kK,"datasets.DatasetInfo.task_templates"),kK.forEach(s),kT=p(M_," after casting."),M_.forEach(s),V_.forEach(s),ET=h(I),Ks=o(I,"DIV",{class:!0});var R_=l(Ks);b(Id.$$.fragment,R_),qT=h(R_),Td=o(R_,"P",{});var E4=l(Td);IT=p(E4,"Align the dataset\u2019s label ID and label name mapping to match an input "),Cx=o(E4,"CODE",{});var EK=l(Cx);TT=p(EK,"label2id"),EK.forEach(s),NT=p(E4,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),E4.forEach(s),PT=h(R_),b(Zo.$$.fragment,R_),R_.forEach(s),I.forEach(s),jw=h(a),zt=o(a,"DIV",{class:!0});var B_=l(zt);b(Nd.$$.fragment,B_),AT=h(B_),En=o(B_,"P",{});var H_=l(En);FT=p(H_,"Converts a list of "),Ru=o(H_,"A",{href:!0});var qK=l(Ru);LT=p(qK,"Dataset"),qK.forEach(s),ST=p(H_," with the same schema into a single "),Bu=o(H_,"A",{href:!0});var IK=l(Bu);OT=p(IK,"Dataset"),IK.forEach(s),CT=p(H_,"."),H_.forEach(s),zT=h(B_),b(Xo.$$.fragment,B_),B_.forEach(s),ww=h(a),ee=o(a,"DIV",{class:!0});var wt=l(ee);b(Pd.$$.fragment,wt),VT=h(wt),zx=o(wt,"P",{});var TK=l(zx);UT=p(TK,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),TK.forEach(s),MT=h(wt),qn=o(wt,"P",{});var G_=l(qn);RT=p(G_,"You can use this function on a list of "),Hu=o(G_,"A",{href:!0});var NK=l(Hu);BT=p(NK,"Dataset"),NK.forEach(s),HT=p(G_," objects, or on a list of "),Gu=o(G_,"A",{href:!0});var PK=l(Gu);GT=p(PK,"IterableDataset"),PK.forEach(s),WT=p(G_," objects."),G_.forEach(s),YT=h(wt),Ve=o(wt,"P",{});var Ra=l(Ve);JT=p(Ra,"If "),Vx=o(Ra,"CODE",{});var AK=l(Vx);KT=p(AK,"probabilities"),AK.forEach(s),ZT=p(Ra," is "),Ux=o(Ra,"CODE",{});var FK=l(Ux);XT=p(FK,"None"),FK.forEach(s),QT=p(Ra,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Mx=o(Ra,"CODE",{});var LK=l(Mx);eN=p(LK,"probabilities"),LK.forEach(s),tN=p(Ra," is not "),Rx=o(Ra,"CODE",{});var SK=l(Rx);sN=p(SK,"None"),SK.forEach(s),aN=p(Ra,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Ra.forEach(s),nN=h(wt),Bx=o(wt,"P",{});var OK=l(Bx);rN=p(OK,"The resulting dataset ends when one of the source datasets runs out of examples."),OK.forEach(s),oN=h(wt),b(Qo.$$.fragment,wt),wt.forEach(s),Dw=h(a),me=o(a,"DIV",{class:!0});var Ba=l(me);b(Ad.$$.fragment,Ba),lN=h(Ba),Hx=o(Ba,"P",{});var CK=l(Hx);iN=p(CK,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),CK.forEach(s),pN=h(Ba),Gx=o(Ba,"P",{});var zK=l(Gx);cN=p(zK,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),zK.forEach(s),dN=h(Ba),Wx=o(Ba,"P",{});var VK=l(Wx);mN=p(VK,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),VK.forEach(s),hN=h(Ba),Ue=o(Ba,"UL",{});var Ha=l(Ue);Yx=o(Ha,"LI",{});var UK=l(Yx);fN=p(UK,"cache files are always recreated"),UK.forEach(s),uN=h(Ha),Jx=o(Ha,"LI",{});var MK=l(Jx);gN=p(MK,"cache files are written to a temporary directory that is deleted when session closes"),MK.forEach(s),_N=h(Ha),Kx=o(Ha,"LI",{});var RK=l(Kx);bN=p(RK,"cache files are named using a random hash instead of the dataset fingerprint"),RK.forEach(s),$N=h(Ha),Fd=o(Ha,"LI",{});var q4=l(Fd);xN=p(q4,"use "),Wu=o(q4,"A",{href:!0});var BK=l(Wu);vN=p(BK,"datasets.Dataset.save_to_disk()"),BK.forEach(s),yN=p(q4," to save a transformed dataset or it will be deleted when session closes"),q4.forEach(s),jN=h(Ha),Vt=o(Ha,"LI",{});var hp=l(Vt);wN=p(hp,"caching doesn\u2019t affect "),Yu=o(hp,"A",{href:!0});var HK=l(Yu);DN=p(HK,"datasets.load_dataset()"),HK.forEach(s),kN=p(hp,`. If you want to regenerate a dataset from scratch you should use
the `),Zx=o(hp,"CODE",{});var GK=l(Zx);EN=p(GK,"download_mode"),GK.forEach(s),qN=p(hp," parameter in "),Ju=o(hp,"A",{href:!0});var WK=l(Ju);IN=p(WK,"datasets.load_dataset()"),WK.forEach(s),TN=p(hp,"."),hp.forEach(s),Ha.forEach(s),Ba.forEach(s),kw=h(a),he=o(a,"DIV",{class:!0});var Ga=l(he);b(Ld.$$.fragment,Ga),NN=h(Ga),Xx=o(Ga,"P",{});var YK=l(Xx);PN=p(YK,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),YK.forEach(s),AN=h(Ga),Qx=o(Ga,"P",{});var JK=l(Qx);FN=p(JK,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),JK.forEach(s),LN=h(Ga),e1=o(Ga,"P",{});var KK=l(e1);SN=p(KK,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),KK.forEach(s),ON=h(Ga),Me=o(Ga,"UL",{});var Wa=l(Me);t1=o(Wa,"LI",{});var ZK=l(t1);CN=p(ZK,"cache files are always recreated"),ZK.forEach(s),zN=h(Wa),s1=o(Wa,"LI",{});var XK=l(s1);VN=p(XK,"cache files are written to a temporary directory that is deleted when session closes"),XK.forEach(s),UN=h(Wa),a1=o(Wa,"LI",{});var QK=l(a1);MN=p(QK,"cache files are named using a random hash instead of the dataset fingerprint"),QK.forEach(s),RN=h(Wa),Sd=o(Wa,"LI",{});var I4=l(Sd);BN=p(I4,"use "),Ku=o(I4,"A",{href:!0});var eZ=l(Ku);HN=p(eZ,"datasets.Dataset.save_to_disk()"),eZ.forEach(s),GN=p(I4," to save a transformed dataset or it will be deleted when session closes"),I4.forEach(s),WN=h(Wa),Ut=o(Wa,"LI",{});var fp=l(Ut);YN=p(fp,"caching doesn\u2019t affect "),Zu=o(fp,"A",{href:!0});var tZ=l(Zu);JN=p(tZ,"datasets.load_dataset()"),tZ.forEach(s),KN=p(fp,`. If you want to regenerate a dataset from scratch you should use
the `),n1=o(fp,"CODE",{});var sZ=l(n1);ZN=p(sZ,"download_mode"),sZ.forEach(s),XN=p(fp," parameter in "),Xu=o(fp,"A",{href:!0});var aZ=l(Xu);QN=p(aZ,"datasets.load_dataset()"),aZ.forEach(s),eP=p(fp,"."),fp.forEach(s),Wa.forEach(s),Ga.forEach(s),Ew=h(a),fe=o(a,"DIV",{class:!0});var Ya=l(fe);b(Od.$$.fragment,Ya),tP=h(Ya),r1=o(Ya,"P",{});var nZ=l(r1);sP=p(nZ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),nZ.forEach(s),aP=h(Ya),o1=o(Ya,"P",{});var rZ=l(o1);nP=p(rZ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),rZ.forEach(s),rP=h(Ya),l1=o(Ya,"P",{});var oZ=l(l1);oP=p(oZ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),oZ.forEach(s),lP=h(Ya),Re=o(Ya,"UL",{});var Ja=l(Re);i1=o(Ja,"LI",{});var lZ=l(i1);iP=p(lZ,"cache files are always recreated"),lZ.forEach(s),pP=h(Ja),p1=o(Ja,"LI",{});var iZ=l(p1);cP=p(iZ,"cache files are written to a temporary directory that is deleted when session closes"),iZ.forEach(s),dP=h(Ja),c1=o(Ja,"LI",{});var pZ=l(c1);mP=p(pZ,"cache files are named using a random hash instead of the dataset fingerprint"),pZ.forEach(s),hP=h(Ja),Cd=o(Ja,"LI",{});var T4=l(Cd);fP=p(T4,"use "),Qu=o(T4,"A",{href:!0});var cZ=l(Qu);uP=p(cZ,"datasets.Dataset.save_to_disk()"),cZ.forEach(s),gP=p(T4," to save a transformed dataset or it will be deleted when session closes"),T4.forEach(s),_P=h(Ja),Mt=o(Ja,"LI",{});var up=l(Mt);bP=p(up,"caching doesn\u2019t affect "),eg=o(up,"A",{href:!0});var dZ=l(eg);$P=p(dZ,"datasets.load_dataset()"),dZ.forEach(s),xP=p(up,`. If you want to regenerate a dataset from scratch you should use
the `),d1=o(up,"CODE",{});var mZ=l(d1);vP=p(mZ,"download_mode"),mZ.forEach(s),yP=p(up," parameter in "),tg=o(up,"A",{href:!0});var hZ=l(tg);jP=p(hZ,"datasets.load_dataset()"),hZ.forEach(s),wP=p(up,"."),up.forEach(s),Ja.forEach(s),Ya.forEach(s),qw=h(a),In=o(a,"H2",{class:!0});var N4=l(In);el=o(N4,"A",{id:!0,class:!0,href:!0});var fZ=l(el);m1=o(fZ,"SPAN",{});var uZ=l(m1);b(zd.$$.fragment,uZ),uZ.forEach(s),fZ.forEach(s),DP=h(N4),h1=o(N4,"SPAN",{});var gZ=l(h1);kP=p(gZ,"DatasetDict"),gZ.forEach(s),N4.forEach(s),Iw=h(a),tl=o(a,"P",{});var P4=l(tl);EP=p(P4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),f1=o(P4,"CODE",{});var _Z=l(f1);qP=p(_Z,"Dataset"),_Z.forEach(s),IP=p(P4,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),P4.forEach(s),Tw=h(a),A=o(a,"DIV",{class:!0});var F=l(A);b(Vd.$$.fragment,F),TP=h(F),u1=o(F,"P",{});var bZ=l(u1);NP=p(bZ,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),bZ.forEach(s),PP=h(F),Zs=o(F,"DIV",{class:!0});var W_=l(Zs);b(Ud.$$.fragment,W_),AP=h(W_),g1=o(W_,"P",{});var $Z=l(g1);FP=p($Z,"The Apache Arrow tables backing each split."),$Z.forEach(s),LP=h(W_),b(sl.$$.fragment,W_),W_.forEach(s),SP=h(F),Xs=o(F,"DIV",{class:!0});var Y_=l(Xs);b(Md.$$.fragment,Y_),OP=h(Y_),_1=o(Y_,"P",{});var xZ=l(_1);CP=p(xZ,"The cache files containing the Apache Arrow table backing each split."),xZ.forEach(s),zP=h(Y_),b(al.$$.fragment,Y_),Y_.forEach(s),VP=h(F),Qs=o(F,"DIV",{class:!0});var J_=l(Qs);b(Rd.$$.fragment,J_),UP=h(J_),b1=o(J_,"P",{});var vZ=l(b1);MP=p(vZ,"Number of columns in each split of the dataset."),vZ.forEach(s),RP=h(J_),b(nl.$$.fragment,J_),J_.forEach(s),BP=h(F),ea=o(F,"DIV",{class:!0});var K_=l(ea);b(Bd.$$.fragment,K_),HP=h(K_),Hd=o(K_,"P",{});var A4=l(Hd);GP=p(A4,"Number of rows in each split of the dataset (same as "),rl=o(A4,"A",{href:!0});var F4=l(rl);WP=p(F4,"datasets.Dataset."),$1=o(F4,"STRONG",{});var yZ=l($1);YP=p(yZ,"len"),yZ.forEach(s),JP=p(F4,"()"),F4.forEach(s),KP=p(A4,")."),A4.forEach(s),ZP=h(K_),b(ol.$$.fragment,K_),K_.forEach(s),XP=h(F),ta=o(F,"DIV",{class:!0});var Z_=l(ta);b(Gd.$$.fragment,Z_),QP=h(Z_),x1=o(Z_,"P",{});var jZ=l(x1);eA=p(jZ,"Names of the columns in each split of the dataset."),jZ.forEach(s),tA=h(Z_),b(ll.$$.fragment,Z_),Z_.forEach(s),sA=h(F),sa=o(F,"DIV",{class:!0});var X_=l(sa);b(Wd.$$.fragment,X_),aA=h(X_),v1=o(X_,"P",{});var wZ=l(v1);nA=p(wZ,"Shape of each split of the dataset (number of columns, number of rows)."),wZ.forEach(s),rA=h(X_),b(il.$$.fragment,X_),X_.forEach(s),oA=h(F),ht=o(F,"DIV",{class:!0});var gp=l(ht);b(Yd.$$.fragment,gp),lA=h(gp),y1=o(gp,"P",{});var DZ=l(y1);iA=p(DZ,"Return a list of the unique elements in a column for each split."),DZ.forEach(s),pA=h(gp),j1=o(gp,"P",{});var kZ=l(j1);cA=p(kZ,"This is implemented in the low-level backend and as such, very fast."),kZ.forEach(s),dA=h(gp),b(pl.$$.fragment,gp),gp.forEach(s),mA=h(F),aa=o(F,"DIV",{class:!0});var Q_=l(aa);b(Jd.$$.fragment,Q_),hA=h(Q_),w1=o(Q_,"P",{});var EZ=l(w1);fA=p(EZ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),EZ.forEach(s),uA=h(Q_),b(cl.$$.fragment,Q_),Q_.forEach(s),gA=h(F),na=o(F,"DIV",{class:!0});var eb=l(na);b(Kd.$$.fragment,eb),_A=h(eb),D1=o(eb,"P",{});var qZ=l(D1);bA=p(qZ,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),qZ.forEach(s),$A=h(eb),b(dl.$$.fragment,eb),eb.forEach(s),xA=h(F),ra=o(F,"DIV",{class:!0});var tb=l(ra);b(Zd.$$.fragment,tb),vA=h(tb),k1=o(tb,"P",{});var IZ=l(k1);yA=p(IZ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),IZ.forEach(s),jA=h(tb),b(ml.$$.fragment,tb),tb.forEach(s),wA=h(F),ft=o(F,"DIV",{class:!0});var _p=l(ft);b(Xd.$$.fragment,_p),DA=h(_p),E1=o(_p,"P",{});var TZ=l(E1);kA=p(TZ,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),TZ.forEach(s),EA=h(_p),q1=o(_p,"P",{});var NZ=l(q1);qA=p(NZ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),NZ.forEach(s),IA=h(_p),b(hl.$$.fragment,_p),_p.forEach(s),TA=h(F),De=o(F,"DIV",{class:!0});var Ka=l(De);b(Qd.$$.fragment,Ka),NA=h(Ka),I1=o(Ka,"P",{});var PZ=l(I1);PA=p(PZ,"Create a new Dataset where the rows are shuffled."),PZ.forEach(s),AA=h(Ka),T1=o(Ka,"P",{});var AZ=l(T1);FA=p(AZ,"The transformation is applied to all the datasets of the dataset dictionary."),AZ.forEach(s),LA=h(Ka),N1=o(Ka,"P",{});var FZ=l(N1);SA=p(FZ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),FZ.forEach(s),OA=h(Ka),b(fl.$$.fragment,Ka),Ka.forEach(s),CA=h(F),ke=o(F,"DIV",{class:!0});var Za=l(ke);b(em.$$.fragment,Za),zA=h(Za),tm=o(Za,"P",{});var L4=l(tm);VA=p(L4,"Set "),P1=o(L4,"CODE",{});var LZ=l(P1);UA=p(LZ,"__getitem__"),LZ.forEach(s),MA=p(L4,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),L4.forEach(s),RA=h(Za),Be=o(Za,"P",{});var Xa=l(Be);BA=p(Xa,"It is possible to call "),A1=o(Xa,"CODE",{});var SZ=l(A1);HA=p(SZ,"map"),SZ.forEach(s),GA=p(Xa," after calling "),F1=o(Xa,"CODE",{});var OZ=l(F1);WA=p(OZ,"set_format"),OZ.forEach(s),YA=p(Xa,". Since "),L1=o(Xa,"CODE",{});var CZ=l(L1);JA=p(CZ,"map"),CZ.forEach(s),KA=p(Xa,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),S1=o(Xa,"CODE",{});var zZ=l(S1);ZA=p(zZ,"map"),zZ.forEach(s),XA=p(Xa," on a dataset to add a new column, then this column will be formatted:"),Xa.forEach(s),QA=h(Za),O1=o(Za,"P",{});var VZ=l(O1);eF=p(VZ,"new formatted columns = (all columns - previously unformatted columns)"),VZ.forEach(s),tF=h(Za),b(ul.$$.fragment,Za),Za.forEach(s),sF=h(F),ut=o(F,"DIV",{class:!0});var bp=l(ut);b(sm.$$.fragment,bp),aF=h(bp),am=o(bp,"P",{});var S4=l(am);nF=p(S4,"Reset "),C1=o(S4,"CODE",{});var UZ=l(C1);rF=p(UZ,"__getitem__"),UZ.forEach(s),oF=p(S4,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),S4.forEach(s),lF=h(bp),sg=o(bp,"P",{});var jY=l(sg);iF=p(jY,"Same as "),z1=o(jY,"CODE",{});var MZ=l(z1);pF=p(MZ,"self.set_format()"),MZ.forEach(s),jY.forEach(s),cF=h(bp),b(gl.$$.fragment,bp),bp.forEach(s),dF=h(F),_l=o(F,"DIV",{class:!0});var O4=l(_l);b(nm.$$.fragment,O4),mF=h(O4),Tn=o(O4,"P",{});var sb=l(Tn);hF=p(sb,"To be used in a "),V1=o(sb,"EM",{});var RZ=l(V1);fF=p(RZ,"with"),RZ.forEach(s),uF=p(sb," statement. Set "),U1=o(sb,"CODE",{});var BZ=l(U1);gF=p(BZ,"__getitem__"),BZ.forEach(s),_F=p(sb,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),sb.forEach(s),O4.forEach(s),bF=h(F),Ee=o(F,"DIV",{class:!0});var Qa=l(Ee);b(rm.$$.fragment,Qa),$F=h(Qa),Rt=o(Qa,"P",{});var $p=l(Rt);xF=p($p,"Set "),M1=o($p,"CODE",{});var HZ=l(M1);vF=p(HZ,"__getitem__"),HZ.forEach(s),yF=p($p,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),R1=o($p,"CODE",{});var GZ=l(R1);jF=p(GZ,"type"),GZ.forEach(s),wF=p($p," (for example \u201Cnumpy\u201D) is used to format batches when using "),B1=o($p,"CODE",{});var WZ=l(B1);DF=p(WZ,"__getitem__"),WZ.forEach(s),kF=p($p,`.
The format is set for every dataset in the dataset dictionary`),$p.forEach(s),EF=h(Qa),om=o(Qa,"P",{});var C4=l(om);qF=p(C4,"It\u2019s also possible to use custom transforms for formatting using "),ag=o(C4,"A",{href:!0});var YZ=l(ag);IF=p(YZ,"datasets.Dataset.with_transform()"),YZ.forEach(s),TF=p(C4,"."),C4.forEach(s),NF=h(Qa),Nn=o(Qa,"P",{});var ab=l(Nn);PF=p(ab,"Contrary to "),ng=o(ab,"A",{href:!0});var JZ=l(ng);AF=p(JZ,"datasets.DatasetDict.set_format()"),JZ.forEach(s),FF=p(ab,", "),H1=o(ab,"CODE",{});var KZ=l(H1);LF=p(KZ,"with_format"),KZ.forEach(s),SF=p(ab," returns a new DatasetDict object with new Dataset objects."),ab.forEach(s),OF=h(Qa),b(bl.$$.fragment,Qa),Qa.forEach(s),CF=h(F),qe=o(F,"DIV",{class:!0});var en=l(qe);b(lm.$$.fragment,en),zF=h(en),Pn=o(en,"P",{});var nb=l(Pn);VF=p(nb,"Set "),G1=o(nb,"CODE",{});var ZZ=l(G1);UF=p(ZZ,"__getitem__"),ZZ.forEach(s),MF=p(nb," return format using this transform. The transform is applied on-the-fly on batches when "),W1=o(nb,"CODE",{});var XZ=l(W1);RF=p(XZ,"__getitem__"),XZ.forEach(s),BF=p(nb,` is called.
The transform is set for every dataset in the dataset dictionary`),nb.forEach(s),HF=h(en),An=o(en,"P",{});var rb=l(An);GF=p(rb,"As "),rg=o(rb,"A",{href:!0});var QZ=l(rg);WF=p(QZ,"datasets.Dataset.set_format()"),QZ.forEach(s),YF=p(rb,", this can be reset using "),og=o(rb,"A",{href:!0});var eX=l(og);JF=p(eX,"datasets.Dataset.reset_format()"),eX.forEach(s),KF=p(rb,"."),rb.forEach(s),ZF=h(en),Fn=o(en,"P",{});var ob=l(Fn);XF=p(ob,"Contrary to "),Y1=o(ob,"CODE",{});var tX=l(Y1);QF=p(tX,"datasets.DatasetDict.set_transform()"),tX.forEach(s),eL=p(ob,", "),J1=o(ob,"CODE",{});var sX=l(J1);tL=p(sX,"with_transform"),sX.forEach(s),sL=p(ob," returns a new DatasetDict object with new Dataset objects."),ob.forEach(s),aL=h(en),b($l.$$.fragment,en),en.forEach(s),nL=h(F),oa=o(F,"DIV",{class:!0});var lb=l(oa);b(im.$$.fragment,lb),rL=h(lb),K1=o(lb,"P",{});var aX=l(K1);oL=p(aX,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),aX.forEach(s),lL=h(lb),b(xl.$$.fragment,lb),lb.forEach(s),iL=h(F),gt=o(F,"DIV",{class:!0});var xp=l(gt);b(pm.$$.fragment,xp),pL=h(xp),Z1=o(xp,"P",{});var nX=l(Z1);cL=p(nX,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),nX.forEach(s),dL=h(xp),Bt=o(xp,"P",{});var vp=l(Bt);mL=p(vp,"You can also remove a column using "),lg=o(vp,"A",{href:!0});var rX=l(lg);hL=p(rX,"Dataset.map()"),rX.forEach(s),fL=p(vp," with "),X1=o(vp,"EM",{});var oX=l(X1);uL=p(oX,"feature"),oX.forEach(s),gL=p(vp," but "),Q1=o(vp,"CODE",{});var lX=l(Q1);_L=p(lX,"cast_"),lX.forEach(s),bL=p(vp,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),vp.forEach(s),$L=h(xp),b(vl.$$.fragment,xp),xp.forEach(s),xL=h(F),la=o(F,"DIV",{class:!0});var ib=l(la);b(cm.$$.fragment,ib),vL=h(ib),ev=o(ib,"P",{});var iX=l(ev);yL=p(iX,"Cast column to feature for decoding."),iX.forEach(s),jL=h(ib),b(yl.$$.fragment,ib),ib.forEach(s),wL=h(F),Ie=o(F,"DIV",{class:!0});var tn=l(Ie);b(dm.$$.fragment,tn),DL=h(tn),tv=o(tn,"P",{});var pX=l(tv);kL=p(pX,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),pX.forEach(s),EL=h(tn),sv=o(tn,"P",{});var cX=l(sv);qL=p(cX,"The transformation is applied to all the splits of the dataset dictionary."),cX.forEach(s),IL=h(tn),Ln=o(tn,"P",{});var pb=l(Ln);TL=p(pb,"You can also remove a column using "),ig=o(pb,"A",{href:!0});var dX=l(ig);NL=p(dX,"Dataset.map()"),dX.forEach(s),PL=p(pb," with "),av=o(pb,"EM",{});var mX=l(av);AL=p(mX,"remove_columns"),mX.forEach(s),FL=p(pb,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),pb.forEach(s),LL=h(tn),b(jl.$$.fragment,tn),tn.forEach(s),SL=h(F),Te=o(F,"DIV",{class:!0});var sn=l(Te);b(mm.$$.fragment,sn),OL=h(sn),nv=o(sn,"P",{});var hX=l(nv);CL=p(hX,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),hX.forEach(s),zL=h(sn),Sn=o(sn,"P",{});var cb=l(Sn);VL=p(cb,"You can also rename a column using "),pg=o(cb,"A",{href:!0});var fX=l(pg);UL=p(fX,"Dataset.map()"),fX.forEach(s),ML=p(cb," with "),rv=o(cb,"EM",{});var uX=l(rv);RL=p(uX,"remove_columns"),uX.forEach(s),BL=p(cb," but the present method:"),cb.forEach(s),HL=h(sn),hm=o(sn,"UL",{});var z4=l(hm);ov=o(z4,"LI",{});var gX=l(ov);GL=p(gX,"takes care of moving the original features under the new column name."),gX.forEach(s),WL=h(z4),lv=o(z4,"LI",{});var _X=l(lv);YL=p(_X,"doesn\u2019t copy the data to a new dataset and is thus much faster."),_X.forEach(s),z4.forEach(s),JL=h(sn),b(wl.$$.fragment,sn),sn.forEach(s),KL=h(F),ia=o(F,"DIV",{class:!0});var db=l(ia);b(fm.$$.fragment,db),ZL=h(db),iv=o(db,"P",{});var bX=l(iv);XL=p(bX,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),bX.forEach(s),QL=h(db),b(Dl.$$.fragment,db),db.forEach(s),eS=h(F),pa=o(F,"DIV",{class:!0});var mb=l(pa);b(um.$$.fragment,mb),tS=h(mb),gm=o(mb,"P",{});var V4=l(gm);sS=p(V4,"Casts the given column as :obj:"),pv=o(V4,"CODE",{});var $X=l(pv);aS=p($X,"datasets.features.ClassLabel"),$X.forEach(s),nS=p(V4," and updates the tables."),V4.forEach(s),rS=h(mb),b(kl.$$.fragment,mb),mb.forEach(s),oS=h(F),Ne=o(F,"DIV",{class:!0});var an=l(Ne);b(_m.$$.fragment,an),lS=h(an),On=o(an,"P",{});var hb=l(On);iS=p(hb,"Pushes the "),cv=o(hb,"CODE",{});var xX=l(cv);pS=p(xX,"DatasetDict"),xX.forEach(s),cS=p(hb,` to the hub as a Parquet dataset.
The `),dv=o(hb,"CODE",{});var vX=l(dv);dS=p(vX,"DatasetDict"),vX.forEach(s),mS=p(hb," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),hb.forEach(s),hS=h(an),mv=o(an,"P",{});var yX=l(mv);fS=p(yX,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),yX.forEach(s),uS=h(an),Ht=o(an,"P",{});var yp=l(Ht);gS=p(yp,"The resulting Parquet files are self-contained by default: if your dataset contains "),cg=o(yp,"A",{href:!0});var jX=l(cg);_S=p(jX,"Image"),jX.forEach(s),bS=p(yp," or "),dg=o(yp,"A",{href:!0});var wX=l(dg);$S=p(wX,"Audio"),wX.forEach(s),xS=p(yp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),hv=o(yp,"EM",{});var DX=l(hv);vS=p(DX,"embed_external_files"),DX.forEach(s),yS=p(yp," to False."),yp.forEach(s),jS=h(an),b(El.$$.fragment,an),an.forEach(s),wS=h(F),oe=o(F,"DIV",{class:!0});var Dt=l(oe);b(bm.$$.fragment,Dt),DS=h(Dt),Cn=o(Dt,"P",{});var fb=l(Cn);kS=p(fb,"Saves a dataset dict to a filesystem using either "),mg=o(fb,"A",{href:!0});var kX=l(mg);ES=p(kX,"S3FileSystem"),kX.forEach(s),qS=p(fb,` or
`),fv=o(fb,"CODE",{});var EX=l(fv);IS=p(EX,"fsspec.spec.AbstractFileSystem"),EX.forEach(s),TS=p(fb,"."),fb.forEach(s),NS=h(Dt),zn=o(Dt,"P",{});var ub=l(zn);PS=p(ub,"For "),hg=o(ub,"A",{href:!0});var qX=l(hg);AS=p(qX,"Image"),qX.forEach(s),FS=p(ub," and "),fg=o(ub,"A",{href:!0});var IX=l(fg);LS=p(IX,"Audio"),IX.forEach(s),SS=p(ub," data:"),ub.forEach(s),OS=h(Dt),$m=o(Dt,"P",{});var U4=l($m);CS=p(U4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),uv=o(U4,"EM",{});var TX=l(uv);zS=p(TX,"read()"),TX.forEach(s),VS=p(U4," those files first."),U4.forEach(s),US=h(Dt),b(ql.$$.fragment,Dt),MS=h(Dt),b(Il.$$.fragment,Dt),Dt.forEach(s),RS=h(F),ca=o(F,"DIV",{class:!0});var gb=l(ca);b(xm.$$.fragment,gb),BS=h(gb),Gt=o(gb,"P",{});var jp=l(Gt);HS=p(jp,"Load a dataset that was previously saved using "),gv=o(jp,"CODE",{});var NX=l(gv);GS=p(NX,"save_to_disk"),NX.forEach(s),WS=p(jp,` from a filesystem using either
`),ug=o(jp,"A",{href:!0});var PX=l(ug);YS=p(PX,"S3FileSystem"),PX.forEach(s),JS=p(jp," or "),_v=o(jp,"CODE",{});var AX=l(_v);KS=p(AX,"fsspec.spec.AbstractFileSystem"),AX.forEach(s),ZS=p(jp,"."),jp.forEach(s),XS=h(gb),b(Tl.$$.fragment,gb),gb.forEach(s),QS=h(F),da=o(F,"DIV",{class:!0});var _b=l(da);b(vm.$$.fragment,_b),eO=h(_b),bv=o(_b,"P",{});var FX=l(bv);tO=p(FX,"Create DatasetDict from CSV file(s)."),FX.forEach(s),sO=h(_b),b(Nl.$$.fragment,_b),_b.forEach(s),aO=h(F),ma=o(F,"DIV",{class:!0});var bb=l(ma);b(ym.$$.fragment,bb),nO=h(bb),$v=o(bb,"P",{});var LX=l($v);rO=p(LX,"Create DatasetDict from JSON Lines file(s)."),LX.forEach(s),oO=h(bb),b(Pl.$$.fragment,bb),bb.forEach(s),lO=h(F),ha=o(F,"DIV",{class:!0});var $b=l(ha);b(jm.$$.fragment,$b),iO=h($b),xv=o($b,"P",{});var SX=l(xv);pO=p(SX,"Create DatasetDict from Parquet file(s)."),SX.forEach(s),cO=h($b),b(Al.$$.fragment,$b),$b.forEach(s),dO=h(F),fa=o(F,"DIV",{class:!0});var xb=l(fa);b(wm.$$.fragment,xb),mO=h(xb),vv=o(xb,"P",{});var OX=l(vv);hO=p(OX,"Create DatasetDict from text file(s)."),OX.forEach(s),fO=h(xb),b(Fl.$$.fragment,xb),xb.forEach(s),uO=h(F),ua=o(F,"DIV",{class:!0});var vb=l(ua);b(Dm.$$.fragment,vb),gO=h(vb),Vn=o(vb,"P",{});var yb=l(Vn);_O=p(yb,"Prepare a dataset for the given task by casting the dataset\u2019s "),gg=o(yb,"A",{href:!0});var CX=l(gg);bO=p(CX,"Features"),CX.forEach(s),$O=p(yb," to standardized column names and types as detailed in "),_g=o(yb,"A",{href:!0});var zX=l(_g);xO=p(zX,"datasets.tasks"),zX.forEach(s),vO=p(yb,"."),yb.forEach(s),yO=h(vb),Un=o(vb,"P",{});var jb=l(Un);jO=p(jb,"Casts "),yv=o(jb,"CODE",{});var VX=l(yv);wO=p(VX,"datasets.DatasetInfo.features"),VX.forEach(s),DO=p(jb," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),jv=o(jb,"CODE",{});var UX=l(jv);kO=p(UX,"datasets.DatasetInfo.task_templates"),UX.forEach(s),EO=p(jb," after casting."),jb.forEach(s),vb.forEach(s),F.forEach(s),Nw=h(a),bg=o(a,"A",{id:!0}),l(bg).forEach(s),Pw=h(a),Mn=o(a,"H2",{class:!0});var M4=l(Mn);Ll=o(M4,"A",{id:!0,class:!0,href:!0});var MX=l(Ll);wv=o(MX,"SPAN",{});var RX=l(wv);b(km.$$.fragment,RX),RX.forEach(s),MX.forEach(s),qO=h(M4),Dv=o(M4,"SPAN",{});var BX=l(Dv);IO=p(BX,"IterableDataset"),BX.forEach(s),M4.forEach(s),Aw=h(a),Sl=o(a,"P",{});var R4=l(Sl);TO=p(R4,"The base class "),$g=o(R4,"A",{href:!0});var HX=l($g);NO=p(HX,"IterableDataset"),HX.forEach(s),PO=p(R4," implements an iterable Dataset backed by python generators."),R4.forEach(s),Fw=h(a),L=o(a,"DIV",{class:!0});var S=l(L);b(Em.$$.fragment,S),AO=h(S),kv=o(S,"P",{});var GX=l(kv);FO=p(GX,"A Dataset backed by an iterable."),GX.forEach(s),LO=h(S),ga=o(S,"DIV",{class:!0});var wb=l(ga);b(qm.$$.fragment,wb),SO=h(wb),Ev=o(wb,"P",{});var WX=l(Ev);OO=p(WX,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),WX.forEach(s),CO=h(wb),b(Ol.$$.fragment,wb),wb.forEach(s),zO=h(S),_a=o(S,"DIV",{class:!0});var Db=l(_a);b(Im.$$.fragment,Db),VO=h(Db),qv=o(Db,"P",{});var YX=l(qv);UO=p(YX,"Cast column to feature for decoding."),YX.forEach(s),MO=h(Db),b(Cl.$$.fragment,Db),Db.forEach(s),RO=h(S),ba=o(S,"DIV",{class:!0});var kb=l(ba);b(Tm.$$.fragment,kb),BO=h(kb),Iv=o(kb,"P",{});var JX=l(Iv);HO=p(JX,"Cast the dataset to a new set of features."),JX.forEach(s),GO=h(kb),b(zl.$$.fragment,kb),kb.forEach(s),WO=h(S),xg=o(S,"DIV",{class:!0});var KX=l(xg);b(Nm.$$.fragment,KX),KX.forEach(s),YO=h(S),Pe=o(S,"DIV",{class:!0});var nn=l(Pe);b(Pm.$$.fragment,nn),JO=h(nn),Tv=o(nn,"P",{});var ZX=l(Tv);KO=p(ZX,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),ZX.forEach(s),ZO=h(nn),Am=o(nn,"P",{});var B4=l(Am);XO=p(B4,"You can specify whether the function should be batched or not with the "),Nv=o(B4,"CODE",{});var XX=l(Nv);QO=p(XX,"batched"),XX.forEach(s),eC=p(B4," parameter:"),B4.forEach(s),tC=h(nn),Rn=o(nn,"UL",{});var Eb=l(Rn);Pv=o(Eb,"LI",{});var QX=l(Pv);sC=p(QX,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),QX.forEach(s),aC=h(Eb),Av=o(Eb,"LI",{});var eQ=l(Av);nC=p(eQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),eQ.forEach(s),rC=h(Eb),ue=o(Eb,"LI",{});var kt=l(ue);oC=p(kt,"If batched is True and batch_size is "),Fv=o(kt,"CODE",{});var tQ=l(Fv);lC=p(tQ,"n"),tQ.forEach(s),iC=p(kt," > 1, then the function takes a batch of "),Lv=o(kt,"CODE",{});var sQ=l(Lv);pC=p(sQ,"n"),sQ.forEach(s),cC=p(kt," examples as input and can return a batch with "),Sv=o(kt,"CODE",{});var aQ=l(Sv);dC=p(aQ,"n"),aQ.forEach(s),mC=p(kt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ov=o(kt,"CODE",{});var nQ=l(Ov);hC=p(nQ,"n"),nQ.forEach(s),fC=p(kt,` examples.
A batch is a dictionary, e.g. a batch of `),Cv=o(kt,"CODE",{});var rQ=l(Cv);uC=p(rQ,"n"),rQ.forEach(s),gC=p(kt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),kt.forEach(s),Eb.forEach(s),_C=h(nn),b(Vl.$$.fragment,nn),nn.forEach(s),bC=h(S),$a=o(S,"DIV",{class:!0});var qb=l($a);b(Fm.$$.fragment,qb),$C=h(qb),zv=o(qb,"P",{});var oQ=l(zv);xC=p(oQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),oQ.forEach(s),vC=h(qb),b(Ul.$$.fragment,qb),qb.forEach(s),yC=h(S),xa=o(S,"DIV",{class:!0});var Ib=l(xa);b(Lm.$$.fragment,Ib),jC=h(Ib),Vv=o(Ib,"P",{});var lQ=l(Vv);wC=p(lQ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),lQ.forEach(s),DC=h(Ib),b(Ml.$$.fragment,Ib),Ib.forEach(s),kC=h(S),le=o(S,"DIV",{class:!0});var Et=l(le);b(Sm.$$.fragment,Et),EC=h(Et),Uv=o(Et,"P",{});var iQ=l(Uv);qC=p(iQ,"Randomly shuffles the elements of this dataset."),iQ.forEach(s),IC=h(Et),Mv=o(Et,"P",{});var pQ=l(Mv);TC=p(pQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),pQ.forEach(s),NC=h(Et),Om=o(Et,"P",{});var H4=l(Om);PC=p(H4,"For instance, if your dataset contains 10,000 elements but "),Rv=o(H4,"CODE",{});var cQ=l(Rv);AC=p(cQ,"buffer_size"),cQ.forEach(s),FC=p(H4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),H4.forEach(s),LC=h(Et),Bn=o(Et,"P",{});var Tb=l(Bn);SC=p(Tb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),vg=o(Tb,"A",{href:!0});var dQ=l(vg);OC=p(dQ,"datasets.IterableDataset.skip()"),dQ.forEach(s),CC=p(Tb," or "),yg=o(Tb,"A",{href:!0});var mQ=l(yg);zC=p(mQ,"datasets.IterableDataset.take()"),mQ.forEach(s),VC=p(Tb,`
then the order of the shards is kept unchanged.`),Tb.forEach(s),UC=h(Et),b(Rl.$$.fragment,Et),Et.forEach(s),MC=h(S),va=o(S,"DIV",{class:!0});var Nb=l(va);b(Cm.$$.fragment,Nb),RC=h(Nb),zm=o(Nb,"P",{});var G4=l(zm);BC=p(G4,"Create a new IterableDataset that skips the first "),Bv=o(G4,"CODE",{});var hQ=l(Bv);HC=p(hQ,"n"),hQ.forEach(s),GC=p(G4," elements."),G4.forEach(s),WC=h(Nb),b(Bl.$$.fragment,Nb),Nb.forEach(s),YC=h(S),ya=o(S,"DIV",{class:!0});var Pb=l(ya);b(Vm.$$.fragment,Pb),JC=h(Pb),Um=o(Pb,"P",{});var W4=l(Um);KC=p(W4,"Create a new IterableDataset with only the first "),Hv=o(W4,"CODE",{});var fQ=l(Hv);ZC=p(fQ,"n"),fQ.forEach(s),XC=p(W4," elements."),W4.forEach(s),QC=h(Pb),b(Hl.$$.fragment,Pb),Pb.forEach(s),ez=h(S),Gl=o(S,"DIV",{class:!0});var Y4=l(Gl);b(Mm.$$.fragment,Y4),tz=h(Y4),jg=o(Y4,"P",{});var wY=l(jg);wg=o(wY,"A",{href:!0});var uQ=l(wg);sz=p(uQ,"datasets.DatasetInfo"),uQ.forEach(s),az=p(wY," object containing all the metadata in the dataset."),wY.forEach(s),Y4.forEach(s),nz=h(S),Wl=o(S,"DIV",{class:!0});var J4=l(Wl);b(Rm.$$.fragment,J4),rz=h(J4),Dg=o(J4,"P",{});var DY=l(Dg);kg=o(DY,"A",{href:!0});var gQ=l(kg);oz=p(gQ,"datasets.NamedSplit"),gQ.forEach(s),lz=p(DY," object corresponding to a named dataset split."),DY.forEach(s),J4.forEach(s),iz=h(S),Eg=o(S,"DIV",{class:!0});var _Q=l(Eg);b(Bm.$$.fragment,_Q),_Q.forEach(s),pz=h(S),qg=o(S,"DIV",{class:!0});var bQ=l(qg);b(Hm.$$.fragment,bQ),bQ.forEach(s),cz=h(S),Ig=o(S,"DIV",{class:!0});var $Q=l(Ig);b(Gm.$$.fragment,$Q),$Q.forEach(s),dz=h(S),Tg=o(S,"DIV",{class:!0});var xQ=l(Tg);b(Wm.$$.fragment,xQ),xQ.forEach(s),mz=h(S),Ng=o(S,"DIV",{class:!0});var vQ=l(Ng);b(Ym.$$.fragment,vQ),vQ.forEach(s),hz=h(S),Pg=o(S,"DIV",{class:!0});var yQ=l(Pg);b(Jm.$$.fragment,yQ),yQ.forEach(s),fz=h(S),Ag=o(S,"DIV",{class:!0});var jQ=l(Ag);b(Km.$$.fragment,jQ),jQ.forEach(s),uz=h(S),Fg=o(S,"DIV",{class:!0});var wQ=l(Fg);b(Zm.$$.fragment,wQ),wQ.forEach(s),gz=h(S),Lg=o(S,"DIV",{class:!0});var DQ=l(Lg);b(Xm.$$.fragment,DQ),DQ.forEach(s),_z=h(S),Sg=o(S,"DIV",{class:!0});var kQ=l(Sg);b(Qm.$$.fragment,kQ),kQ.forEach(s),bz=h(S),Og=o(S,"DIV",{class:!0});var EQ=l(Og);b(eh.$$.fragment,EQ),EQ.forEach(s),$z=h(S),Cg=o(S,"DIV",{class:!0});var qQ=l(Cg);b(th.$$.fragment,qQ),qQ.forEach(s),xz=h(S),zg=o(S,"DIV",{class:!0});var IQ=l(zg);b(sh.$$.fragment,IQ),IQ.forEach(s),S.forEach(s),Lw=h(a),Hn=o(a,"H2",{class:!0});var K4=l(Hn);Yl=o(K4,"A",{id:!0,class:!0,href:!0});var TQ=l(Yl);Gv=o(TQ,"SPAN",{});var NQ=l(Gv);b(ah.$$.fragment,NQ),NQ.forEach(s),TQ.forEach(s),vz=h(K4),Wv=o(K4,"SPAN",{});var PQ=l(Wv);yz=p(PQ,"IterableDatasetDict"),PQ.forEach(s),K4.forEach(s),Sw=h(a),Jl=o(a,"P",{});var Z4=l(Jl);jz=p(Z4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Yv=o(Z4,"CODE",{});var AQ=l(Yv);wz=p(AQ,"IterableDataset"),AQ.forEach(s),Dz=p(Z4," objects as values."),Z4.forEach(s),Ow=h(a),U=o(a,"DIV",{class:!0});var H=l(U);b(nh.$$.fragment,H),kz=h(H),Ae=o(H,"DIV",{class:!0});var rn=l(Ae);b(rh.$$.fragment,rn),Ez=h(rn),Jv=o(rn,"P",{});var FQ=l(Jv);qz=p(FQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),FQ.forEach(s),Iz=h(rn),oh=o(rn,"P",{});var X4=l(oh);Tz=p(X4,"You can specify whether the function should be batched or not with the "),Kv=o(X4,"CODE",{});var LQ=l(Kv);Nz=p(LQ,"batched"),LQ.forEach(s),Pz=p(X4," parameter:"),X4.forEach(s),Az=h(rn),Gn=o(rn,"UL",{});var Ab=l(Gn);Zv=o(Ab,"LI",{});var SQ=l(Zv);Fz=p(SQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),SQ.forEach(s),Lz=h(Ab),Xv=o(Ab,"LI",{});var OQ=l(Xv);Sz=p(OQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),OQ.forEach(s),Oz=h(Ab),ge=o(Ab,"LI",{});var qt=l(ge);Cz=p(qt,"If batched is True and batch_size is "),Qv=o(qt,"CODE",{});var CQ=l(Qv);zz=p(CQ,"n"),CQ.forEach(s),Vz=p(qt," > 1, then the function takes a batch of "),ey=o(qt,"CODE",{});var zQ=l(ey);Uz=p(zQ,"n"),zQ.forEach(s),Mz=p(qt," examples as input and can return a batch with "),ty=o(qt,"CODE",{});var VQ=l(ty);Rz=p(VQ,"n"),VQ.forEach(s),Bz=p(qt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),sy=o(qt,"CODE",{});var UQ=l(sy);Hz=p(UQ,"n"),UQ.forEach(s),Gz=p(qt,` examples.
A batch is a dictionary, e.g. a batch of `),ay=o(qt,"CODE",{});var MQ=l(ay);Wz=p(MQ,"n"),MQ.forEach(s),Yz=p(qt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),qt.forEach(s),Ab.forEach(s),Jz=h(rn),b(Kl.$$.fragment,rn),rn.forEach(s),Kz=h(H),ja=o(H,"DIV",{class:!0});var Fb=l(ja);b(lh.$$.fragment,Fb),Zz=h(Fb),ny=o(Fb,"P",{});var RQ=l(ny);Xz=p(RQ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),RQ.forEach(s),Qz=h(Fb),b(Zl.$$.fragment,Fb),Fb.forEach(s),eV=h(H),ie=o(H,"DIV",{class:!0});var It=l(ie);b(ih.$$.fragment,It),tV=h(It),ry=o(It,"P",{});var BQ=l(ry);sV=p(BQ,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),BQ.forEach(s),aV=h(It),oy=o(It,"P",{});var HQ=l(oy);nV=p(HQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),HQ.forEach(s),rV=h(It),ph=o(It,"P",{});var Q4=l(ph);oV=p(Q4,"For instance, if your dataset contains 10,000 elements but "),ly=o(Q4,"CODE",{});var GQ=l(ly);lV=p(GQ,"buffer_size"),GQ.forEach(s),iV=p(Q4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Q4.forEach(s),pV=h(It),Wn=o(It,"P",{});var Lb=l(Wn);cV=p(Lb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Vg=o(Lb,"A",{href:!0});var WQ=l(Vg);dV=p(WQ,"datasets.IterableDataset.skip()"),WQ.forEach(s),mV=p(Lb," or "),Ug=o(Lb,"A",{href:!0});var YQ=l(Ug);hV=p(YQ,"datasets.IterableDataset.take()"),YQ.forEach(s),fV=p(Lb,`
then the order of the shards is kept unchanged.`),Lb.forEach(s),uV=h(It),b(Xl.$$.fragment,It),It.forEach(s),gV=h(H),wa=o(H,"DIV",{class:!0});var Sb=l(wa);b(ch.$$.fragment,Sb),_V=h(Sb),iy=o(Sb,"P",{});var JQ=l(iy);bV=p(JQ,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),JQ.forEach(s),$V=h(Sb),b(Ql.$$.fragment,Sb),Sb.forEach(s),xV=h(H),Da=o(H,"DIV",{class:!0});var Ob=l(Da);b(dh.$$.fragment,Ob),vV=h(Ob),py=o(Ob,"P",{});var KQ=l(py);yV=p(KQ,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),KQ.forEach(s),jV=h(Ob),b(ei.$$.fragment,Ob),Ob.forEach(s),wV=h(H),ka=o(H,"DIV",{class:!0});var Cb=l(ka);b(mh.$$.fragment,Cb),DV=h(Cb),cy=o(Cb,"P",{});var ZQ=l(cy);kV=p(ZQ,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),ZQ.forEach(s),EV=h(Cb),b(ti.$$.fragment,Cb),Cb.forEach(s),qV=h(H),Ea=o(H,"DIV",{class:!0});var zb=l(Ea);b(hh.$$.fragment,zb),IV=h(zb),dy=o(zb,"P",{});var XQ=l(dy);TV=p(XQ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),XQ.forEach(s),NV=h(zb),b(si.$$.fragment,zb),zb.forEach(s),PV=h(H),qa=o(H,"DIV",{class:!0});var Vb=l(qa);b(fh.$$.fragment,Vb),AV=h(Vb),my=o(Vb,"P",{});var QQ=l(my);FV=p(QQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),QQ.forEach(s),LV=h(Vb),b(ai.$$.fragment,Vb),Vb.forEach(s),SV=h(H),Ia=o(H,"DIV",{class:!0});var Ub=l(Ia);b(uh.$$.fragment,Ub),OV=h(Ub),hy=o(Ub,"P",{});var eee=l(hy);CV=p(eee,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),eee.forEach(s),zV=h(Ub),b(ni.$$.fragment,Ub),Ub.forEach(s),H.forEach(s),Cw=h(a),Yn=o(a,"H2",{class:!0});var eD=l(Yn);ri=o(eD,"A",{id:!0,class:!0,href:!0});var tee=l(ri);fy=o(tee,"SPAN",{});var see=l(fy);b(gh.$$.fragment,see),see.forEach(s),tee.forEach(s),VV=h(eD),uy=o(eD,"SPAN",{});var aee=l(uy);UV=p(aee,"Features"),aee.forEach(s),eD.forEach(s),zw=h(a),O=o(a,"DIV",{class:!0});var z=l(O);b(_h.$$.fragment,z),MV=h(z),gy=o(z,"P",{});var nee=l(gy);RV=p(nee,"A special dictionary that defines the internal structure of a dataset."),nee.forEach(s),BV=h(z),bh=o(z,"P",{});var tD=l(bh);HV=p(tD,"Instantiated with a dictionary of type "),_y=o(tD,"CODE",{});var ree=l(_y);GV=p(ree,"dict[str, FieldType]"),ree.forEach(s),WV=p(tD,`, where keys are the desired column names,
and values are the type of that column.`),tD.forEach(s),YV=h(z),Mg=o(z,"P",{});var kY=l(Mg);by=o(kY,"CODE",{});var oee=l(by);JV=p(oee,"FieldType"),oee.forEach(s),KV=p(kY," can be one of the following:"),kY.forEach(s),ZV=h(z),J=o(z,"UL",{});var ce=l(J);$y=o(ce,"LI",{});var lee=l($y);Ta=o(lee,"P",{});var Qf=l(Ta);XV=p(Qf,"a "),Rg=o(Qf,"A",{href:!0});var iee=l(Rg);QV=p(iee,"datasets.Value"),iee.forEach(s),eU=p(Qf," feature specifies a single typed value, e.g. "),xy=o(Qf,"CODE",{});var pee=l(xy);tU=p(pee,"int64"),pee.forEach(s),sU=p(Qf," or "),vy=o(Qf,"CODE",{});var cee=l(vy);aU=p(cee,"string"),cee.forEach(s),Qf.forEach(s),lee.forEach(s),nU=h(ce),yy=o(ce,"LI",{});var dee=l(yy);$h=o(dee,"P",{});var sD=l($h);rU=p(sD,"a "),Bg=o(sD,"A",{href:!0});var mee=l(Bg);oU=p(mee,"datasets.ClassLabel"),mee.forEach(s),lU=p(sD,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),sD.forEach(s),dee.forEach(s),iU=h(ce),jy=o(ce,"LI",{});var hee=l(jy);xh=o(hee,"P",{});var aD=l(xh);pU=p(aD,"a python "),wy=o(aD,"CODE",{});var fee=l(wy);cU=p(fee,"dict"),fee.forEach(s),dU=p(aD,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),aD.forEach(s),hee.forEach(s),mU=h(ce),vh=o(ce,"LI",{});var nD=l(vh);He=o(nD,"P",{});var on=l(He);hU=p(on,"a python "),Dy=o(on,"CODE",{});var uee=l(Dy);fU=p(uee,"list"),uee.forEach(s),uU=p(on," or a "),Hg=o(on,"A",{href:!0});var gee=l(Hg);gU=p(gee,"datasets.Sequence"),gee.forEach(s),_U=p(on,` specifies that the field contains a list of objects. The python
`),ky=o(on,"CODE",{});var _ee=l(ky);bU=p(_ee,"list"),_ee.forEach(s),$U=p(on," or "),Gg=o(on,"A",{href:!0});var bee=l(Gg);xU=p(bee,"datasets.Sequence"),bee.forEach(s),vU=p(on,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),on.forEach(s),yU=h(nD),b(oi.$$.fragment,nD),nD.forEach(s),jU=h(ce),Ey=o(ce,"LI",{});var $ee=l(Ey);Ge=o($ee,"P",{});var ln=l(Ge);wU=p(ln,"a "),Wg=o(ln,"A",{href:!0});var xee=l(Wg);DU=p(xee,"Array2D"),xee.forEach(s),kU=p(ln,", "),Yg=o(ln,"A",{href:!0});var vee=l(Yg);EU=p(vee,"Array3D"),vee.forEach(s),qU=p(ln,", "),Jg=o(ln,"A",{href:!0});var yee=l(Jg);IU=p(yee,"Array4D"),yee.forEach(s),TU=p(ln," or "),Kg=o(ln,"A",{href:!0});var jee=l(Kg);NU=p(jee,"Array5D"),jee.forEach(s),PU=p(ln," feature for multidimensional arrays"),ln.forEach(s),$ee.forEach(s),AU=h(ce),qy=o(ce,"LI",{});var wee=l(qy);yh=o(wee,"P",{});var rD=l(yh);FU=p(rD,"an "),Zg=o(rD,"A",{href:!0});var Dee=l(Zg);LU=p(Dee,"Audio"),Dee.forEach(s),SU=p(rD,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),rD.forEach(s),wee.forEach(s),OU=h(ce),Iy=o(ce,"LI",{});var kee=l(Iy);Wt=o(kee,"P",{});var wp=l(Wt);CU=p(wp,"an "),Xg=o(wp,"A",{href:!0});var Eee=l(Xg);zU=p(Eee,"Image"),Eee.forEach(s),VU=p(wp," feature to store the absolute path to an image file, an "),Ty=o(wp,"CODE",{});var qee=l(Ty);UU=p(qee,"np.ndarray"),qee.forEach(s),MU=p(wp," object, a "),Ny=o(wp,"CODE",{});var Iee=l(Ny);RU=p(Iee,"PIL.Image.Image"),Iee.forEach(s),BU=p(wp,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),wp.forEach(s),kee.forEach(s),HU=h(ce),Py=o(ce,"LI",{});var Tee=l(Py);li=o(Tee,"P",{});var _w=l(li);Qg=o(_w,"A",{href:!0});var Nee=l(Qg);GU=p(Nee,"datasets.Translation"),Nee.forEach(s),WU=p(_w," and "),e_=o(_w,"A",{href:!0});var Pee=l(e_);YU=p(Pee,"datasets.TranslationVariableLanguages"),Pee.forEach(s),JU=p(_w,", the two features specific to Machine Translation"),_w.forEach(s),Tee.forEach(s),ce.forEach(s),KU=h(z),Na=o(z,"DIV",{class:!0});var Mb=l(Na);b(jh.$$.fragment,Mb),ZU=h(Mb),Ay=o(Mb,"P",{});var Aee=l(Ay);XU=p(Aee,"Make a deep copy of Features."),Aee.forEach(s),QU=h(Mb),b(ii.$$.fragment,Mb),Mb.forEach(s),eM=h(z),pi=o(z,"DIV",{class:!0});var oD=l(pi);b(wh.$$.fragment,oD),tM=h(oD),Fy=o(oD,"P",{});var Fee=l(Fy);sM=p(Fee,"Decode batch with custom feature decoding."),Fee.forEach(s),oD.forEach(s),aM=h(z),ci=o(z,"DIV",{class:!0});var lD=l(ci);b(Dh.$$.fragment,lD),nM=h(lD),Ly=o(lD,"P",{});var Lee=l(Ly);rM=p(Lee,"Decode column with custom feature decoding."),Lee.forEach(s),lD.forEach(s),oM=h(z),di=o(z,"DIV",{class:!0});var iD=l(di);b(kh.$$.fragment,iD),lM=h(iD),Sy=o(iD,"P",{});var See=l(Sy);iM=p(See,"Decode example with custom feature decoding."),See.forEach(s),iD.forEach(s),pM=h(z),mi=o(z,"DIV",{class:!0});var pD=l(mi);b(Eh.$$.fragment,pD),cM=h(pD),Oy=o(pD,"P",{});var Oee=l(Oy);dM=p(Oee,"Encode batch into a format for Arrow."),Oee.forEach(s),pD.forEach(s),mM=h(z),hi=o(z,"DIV",{class:!0});var cD=l(hi);b(qh.$$.fragment,cD),hM=h(cD),Cy=o(cD,"P",{});var Cee=l(Cy);fM=p(Cee,"Encode example into a format for Arrow."),Cee.forEach(s),cD.forEach(s),uM=h(z),_t=o(z,"DIV",{class:!0});var Dp=l(_t);b(Ih.$$.fragment,Dp),gM=h(Dp),zy=o(Dp,"P",{});var zee=l(zy);_M=p(zee,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),zee.forEach(s),bM=h(Dp),Vy=o(Dp,"P",{});var Vee=l(Vy);$M=p(Vee,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),Vee.forEach(s),xM=h(Dp),b(fi.$$.fragment,Dp),Dp.forEach(s),vM=h(z),ui=o(z,"DIV",{class:!0});var dD=l(ui);b(Th.$$.fragment,dD),yM=h(dD),Uy=o(dD,"P",{});var Uee=l(Uy);jM=p(Uee,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),Uee.forEach(s),dD.forEach(s),wM=h(z),Fe=o(z,"DIV",{class:!0});var pn=l(Fe);b(Nh.$$.fragment,pn),DM=h(pn),My=o(pn,"P",{});var Mee=l(My);kM=p(Mee,"Construct Features from dict."),Mee.forEach(s),EM=h(pn),Ry=o(pn,"P",{});var Ree=l(Ry);qM=p(Ree,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),Ree.forEach(s),IM=h(pn),Yt=o(pn,"P",{});var kp=l(Yt);TM=p(kp,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),t_=o(kp,"A",{href:!0});var Bee=l(t_);NM=p(Bee,"DatasetInfo"),Bee.forEach(s),PM=p(kp,` that was dumped to a JSON object. This acts as an analogue to
`),s_=o(kp,"A",{href:!0});var Hee=l(s_);AM=p(Hee,"Features.from_arrow_schema()"),Hee.forEach(s),FM=p(kp,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),a_=o(kp,"A",{href:!0});var Gee=l(a_);LM=p(Gee,"Value"),Gee.forEach(s),SM=p(kp," automatically performs."),kp.forEach(s),OM=h(pn),b(gi.$$.fragment,pn),pn.forEach(s),CM=h(z),bt=o(z,"DIV",{class:!0});var Ep=l(bt);b(Ph.$$.fragment,Ep),zM=h(Ep),By=o(Ep,"P",{});var Wee=l(By);VM=p(Wee,"Reorder Features fields to match the field order of other Features."),Wee.forEach(s),UM=h(Ep),Hy=o(Ep,"P",{});var Yee=l(Hy);MM=p(Yee,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),Yee.forEach(s),RM=h(Ep),b(_i.$$.fragment,Ep),Ep.forEach(s),z.forEach(s),Vw=h(a),Jt=o(a,"DIV",{class:!0});var Rb=l(Jt);b(Ah.$$.fragment,Rb),BM=h(Rb),Gy=o(Rb,"P",{});var Jee=l(Gy);HM=p(Jee,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),Jee.forEach(s),GM=h(Rb),b(bi.$$.fragment,Rb),Rb.forEach(s),Uw=h(a),B=o(a,"DIV",{class:!0});var X=l(B);b(Fh.$$.fragment,X),WM=h(X),Wy=o(X,"P",{});var Kee=l(Wy);YM=p(Kee,"Feature type for integer class labels."),Kee.forEach(s),JM=h(X),Lh=o(X,"P",{});var mD=l(Lh);KM=p(mD,"There are 3 ways to define a "),Yy=o(mD,"EM",{});var Zee=l(Yy);ZM=p(Zee,"ClassLabel"),Zee.forEach(s),XM=p(mD,", which correspond to the 3 arguments:"),mD.forEach(s),QM=h(X),Jn=o(X,"UL",{});var Bb=l(Jn);n_=o(Bb,"LI",{});var EY=l(n_);Jy=o(EY,"EM",{});var Xee=l(Jy);eR=p(Xee,"num_classes"),Xee.forEach(s),tR=p(EY,": Create 0 to (num_classes-1) labels."),EY.forEach(s),sR=h(Bb),r_=o(Bb,"LI",{});var qY=l(r_);Ky=o(qY,"EM",{});var Qee=l(Ky);aR=p(Qee,"names"),Qee.forEach(s),nR=p(qY,": List of label strings."),qY.forEach(s),rR=h(Bb),o_=o(Bb,"LI",{});var IY=l(o_);Zy=o(IY,"EM",{});var ete=l(Zy);oR=p(ete,"names_file"),ete.forEach(s),lR=p(IY,": File containing the list of labels."),IY.forEach(s),Bb.forEach(s),iR=h(X),Xy=o(X,"P",{});var tte=l(Xy);pR=p(tte,`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),tte.forEach(s),cR=h(X),b($i.$$.fragment,X),dR=h(X),Pa=o(X,"DIV",{class:!0});var Hb=l(Pa);b(Sh.$$.fragment,Hb),mR=h(Hb),Qy=o(Hb,"P",{});var ste=l(Qy);hR=p(ste,`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),ste.forEach(s),fR=h(Hb),Oh=o(Hb,"UL",{});var hD=l(Oh);ej=o(hD,"LI",{});var ate=l(ej);uR=p(ate,"pa.string()"),ate.forEach(s),gR=h(hD),tj=o(hD,"LI",{});var nte=l(tj);_R=p(nte,"pa.int()"),nte.forEach(s),hD.forEach(s),Hb.forEach(s),bR=h(X),$t=o(X,"DIV",{class:!0});var qp=l($t);b(Ch.$$.fragment,qp),$R=h(qp),sj=o(qp,"P",{});var rte=l(sj);xR=p(rte,"Conversion integer => class name string."),rte.forEach(s),vR=h(qp),aj=o(qp,"P",{});var ote=l(aj);yR=p(ote,"Regarding unknown/missing labels: passing negative integers raises ValueError."),ote.forEach(s),jR=h(qp),b(xi.$$.fragment,qp),qp.forEach(s),wR=h(X),Aa=o(X,"DIV",{class:!0});var Gb=l(Aa);b(zh.$$.fragment,Gb),DR=h(Gb),nj=o(Gb,"P",{});var lte=l(nj);kR=p(lte,"Conversion class name string => integer."),lte.forEach(s),ER=h(Gb),b(vi.$$.fragment,Gb),Gb.forEach(s),X.forEach(s),Mw=h(a),We=o(a,"DIV",{class:!0});var Ip=l(We);b(Vh.$$.fragment,Ip),qR=h(Ip),rj=o(Ip,"P",{});var ite=l(rj);IR=p(ite,"The Value dtypes are as follows:"),ite.forEach(s),TR=h(Ip),oj=o(Ip,"P",{});var pte=l(oj);NR=p(pte,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),pte.forEach(s),PR=h(Ip),b(yi.$$.fragment,Ip),Ip.forEach(s),Rw=h(a),te=o(a,"DIV",{class:!0});var Tt=l(te);b(Uh.$$.fragment,Tt),AR=h(Tt),l_=o(Tt,"P",{});var TY=l(l_);lj=o(TY,"CODE",{});var cte=l(lj);FR=p(cte,"FeatureConnector"),cte.forEach(s),LR=p(TY,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),TY.forEach(s),SR=h(Tt),ij=o(Tt,"P",{});var dte=l(ij);OR=p(dte,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),dte.forEach(s),CR=h(Tt),Mh=o(Tt,"P",{});var fD=l(Mh);zR=p(fD,"Output: A dictionary mapping string language codes to translations as "),pj=o(fD,"CODE",{});var mte=l(pj);VR=p(mte,"Text"),mte.forEach(s),UR=p(fD,`
features.`),fD.forEach(s),MR=h(Tt),b(ji.$$.fragment,Tt),RR=h(Tt),wi=o(Tt,"DIV",{class:!0});var uD=l(wi);b(Rh.$$.fragment,uD),BR=h(uD),cj=o(uD,"P",{});var hte=l(cj);HR=p(hte,"Flatten the Translation feature into a dictionary."),hte.forEach(s),uD.forEach(s),Tt.forEach(s),Bw=h(a),se=o(a,"DIV",{class:!0});var Nt=l(se);b(Bh.$$.fragment,Nt),GR=h(Nt),i_=o(Nt,"P",{});var NY=l(i_);dj=o(NY,"CODE",{});var fte=l(dj);WR=p(fte,"FeatureConnector"),fte.forEach(s),YR=p(NY,` for translations with variable languages per example.
Here for compatiblity with tfds.`),NY.forEach(s),JR=h(Nt),mj=o(Nt,"P",{});var ute=l(mj);KR=p(ute,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),ute.forEach(s),ZR=h(Nt),hj=o(Nt,"P",{});var gte=l(hj);XR=p(gte,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),gte.forEach(s),QR=h(Nt),b(Di.$$.fragment,Nt),eB=h(Nt),ki=o(Nt,"DIV",{class:!0});var gD=l(ki);b(Hh.$$.fragment,gD),tB=h(gD),fj=o(gD,"P",{});var _te=l(fj);sB=p(_te,"Flatten the TranslationVariableLanguages feature into a dictionary."),_te.forEach(s),gD.forEach(s),Nt.forEach(s),Hw=h(a),Kt=o(a,"DIV",{class:!0});var Wb=l(Kt);b(Gh.$$.fragment,Wb),aB=h(Wb),uj=o(Wb,"P",{});var bte=l(uj);nB=p(bte,"Create a two-dimensional array."),bte.forEach(s),rB=h(Wb),b(Ei.$$.fragment,Wb),Wb.forEach(s),Gw=h(a),Zt=o(a,"DIV",{class:!0});var Yb=l(Zt);b(Wh.$$.fragment,Yb),oB=h(Yb),gj=o(Yb,"P",{});var $te=l(gj);lB=p($te,"Create a three-dimensional array."),$te.forEach(s),iB=h(Yb),b(qi.$$.fragment,Yb),Yb.forEach(s),Ww=h(a),Xt=o(a,"DIV",{class:!0});var Jb=l(Xt);b(Yh.$$.fragment,Jb),pB=h(Jb),_j=o(Jb,"P",{});var xte=l(_j);cB=p(xte,"Create a four-dimensional array."),xte.forEach(s),dB=h(Jb),b(Ii.$$.fragment,Jb),Jb.forEach(s),Yw=h(a),Qt=o(a,"DIV",{class:!0});var Kb=l(Qt);b(Jh.$$.fragment,Kb),mB=h(Kb),bj=o(Kb,"P",{});var vte=l(bj);hB=p(vte,"Create a five-dimensional array."),vte.forEach(s),fB=h(Kb),b(Ti.$$.fragment,Kb),Kb.forEach(s),Jw=h(a),M=o(a,"DIV",{class:!0});var G=l(M);b(Kh.$$.fragment,G),uB=h(G),$j=o(G,"P",{});var yte=l($j);gB=p(yte,"Audio Feature to extract audio data from an audio file."),yte.forEach(s),_B=h(G),xj=o(G,"P",{});var jte=l(xj);bB=p(jte,"Input: The Audio feature accepts as input:"),jte.forEach(s),$B=h(G),Kn=o(G,"UL",{});var Zb=l(Kn);vj=o(Zb,"LI",{});var wte=l(vj);Zh=o(wte,"P",{});var _D=l(Zh);xB=p(_D,"A "),yj=o(_D,"CODE",{});var Dte=l(yj);vB=p(Dte,"str"),Dte.forEach(s),yB=p(_D,": Absolute path to the audio file (i.e. random access is allowed)."),_D.forEach(s),wte.forEach(s),jB=h(Zb),Zn=o(Zb,"LI",{});var Xb=l(Zn);Xh=o(Xb,"P",{});var bD=l(Xh);wB=p(bD,"A "),jj=o(bD,"CODE",{});var kte=l(jj);DB=p(kte,"dict"),kte.forEach(s),kB=p(bD," with the keys:"),bD.forEach(s),EB=h(Xb),Qh=o(Xb,"UL",{});var $D=l(Qh);wj=o($D,"LI",{});var Ete=l(wj);qB=p(Ete,"path: String with relative path of the audio file to the archive file."),Ete.forEach(s),IB=h($D),Dj=o($D,"LI",{});var qte=l(Dj);TB=p(qte,"bytes: Bytes content of the audio file."),qte.forEach(s),$D.forEach(s),NB=h(Xb),kj=o(Xb,"P",{});var Ite=l(kj);PB=p(Ite,"This is useful for archived files with sequential access."),Ite.forEach(s),Xb.forEach(s),AB=h(Zb),Xn=o(Zb,"LI",{});var Qb=l(Xn);ef=o(Qb,"P",{});var xD=l(ef);FB=p(xD,"A "),Ej=o(xD,"CODE",{});var Tte=l(Ej);LB=p(Tte,"dict"),Tte.forEach(s),SB=p(xD," with the keys:"),xD.forEach(s),OB=h(Qb),Qn=o(Qb,"UL",{});var e$=l(Qn);qj=o(e$,"LI",{});var Nte=l(qj);CB=p(Nte,"path: String with relative path of the audio file to the archive file."),Nte.forEach(s),zB=h(e$),Ij=o(e$,"LI",{});var Pte=l(Ij);VB=p(Pte,"array: Array containing the audio sample"),Pte.forEach(s),UB=h(e$),Tj=o(e$,"LI",{});var Ate=l(Tj);MB=p(Ate,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),Ate.forEach(s),e$.forEach(s),RB=h(Qb),Nj=o(Qb,"P",{});var Fte=l(Nj);BB=p(Fte,"This is useful for archived files with sequential access."),Fte.forEach(s),Qb.forEach(s),Zb.forEach(s),HB=h(G),b(Ni.$$.fragment,G),GB=h(G),Fa=o(G,"DIV",{class:!0});var t$=l(Fa);b(tf.$$.fragment,t$),WB=h(t$),Pj=o(t$,"P",{});var Lte=l(Pj);YB=p(Lte,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),Lte.forEach(s),JB=h(t$),es=o(t$,"UL",{});var Tp=l(es);Aj=o(Tp,"LI",{});var Ste=l(Aj);KB=p(Ste,"pa.string() - it must contain the \u201Cpath\u201D data"),Ste.forEach(s),ZB=h(Tp),Fj=o(Tp,"LI",{});var Ote=l(Fj);XB=p(Ote,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Ote.forEach(s),QB=h(Tp),Lj=o(Tp,"LI",{});var Cte=l(Lj);eH=p(Cte,"pa.struct({\u201Cpath\u201D: pa.string()})"),Cte.forEach(s),tH=h(Tp),Sj=o(Tp,"LI",{});var zte=l(Sj);sH=p(zte,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),zte.forEach(s),Tp.forEach(s),t$.forEach(s),aH=h(G),Pi=o(G,"DIV",{class:!0});var vD=l(Pi);b(sf.$$.fragment,vD),nH=h(vD),Oj=o(vD,"P",{});var Vte=l(Oj);rH=p(Vte,"Decode example audio file into audio data."),Vte.forEach(s),vD.forEach(s),oH=h(G),Ai=o(G,"DIV",{class:!0});var yD=l(Ai);b(af.$$.fragment,yD),lH=h(yD),Cj=o(yD,"P",{});var Ute=l(Cj);iH=p(Ute,"Embed audio files into the Arrow array."),Ute.forEach(s),yD.forEach(s),pH=h(G),Fi=o(G,"DIV",{class:!0});var jD=l(Fi);b(nf.$$.fragment,jD),cH=h(jD),zj=o(jD,"P",{});var Mte=l(zj);dH=p(Mte,"Encode example into a format for Arrow."),Mte.forEach(s),jD.forEach(s),mH=h(G),Li=o(G,"DIV",{class:!0});var wD=l(Li);b(rf.$$.fragment,wD),hH=h(wD),Vj=o(wD,"P",{});var Rte=l(Vj);fH=p(Rte,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),Rte.forEach(s),wD.forEach(s),G.forEach(s),Kw=h(a),R=o(a,"DIV",{class:!0});var W=l(R);b(of.$$.fragment,W),uH=h(W),Uj=o(W,"P",{});var Bte=l(Uj);gH=p(Bte,"Image feature to read image data from an image file."),Bte.forEach(s),_H=h(W),Mj=o(W,"P",{});var Hte=l(Mj);bH=p(Hte,"Input: The Image feature accepts as input:"),Hte.forEach(s),$H=h(W),ts=o(W,"UL",{});var Np=l(ts);Rj=o(Np,"LI",{});var Gte=l(Rj);lf=o(Gte,"P",{});var DD=l(lf);xH=p(DD,"A "),Bj=o(DD,"CODE",{});var Wte=l(Bj);vH=p(Wte,"str"),Wte.forEach(s),yH=p(DD,": Absolute path to the image file (i.e. random access is allowed)."),DD.forEach(s),Gte.forEach(s),jH=h(Np),er=o(Np,"LI",{});var s$=l(er);pf=o(s$,"P",{});var kD=l(pf);wH=p(kD,"A "),Hj=o(kD,"CODE",{});var Yte=l(Hj);DH=p(Yte,"dict"),Yte.forEach(s),kH=p(kD," with the keys:"),kD.forEach(s),EH=h(s$),cf=o(s$,"UL",{});var ED=l(cf);Gj=o(ED,"LI",{});var Jte=l(Gj);qH=p(Jte,"path: String with relative path of the image file to the archive file."),Jte.forEach(s),IH=h(ED),Wj=o(ED,"LI",{});var Kte=l(Wj);TH=p(Kte,"bytes: Bytes of the image file."),Kte.forEach(s),ED.forEach(s),NH=h(s$),Yj=o(s$,"P",{});var Zte=l(Yj);PH=p(Zte,"This is useful for archived files with sequential access."),Zte.forEach(s),s$.forEach(s),AH=h(Np),Jj=o(Np,"LI",{});var Xte=l(Jj);df=o(Xte,"P",{});var qD=l(df);FH=p(qD,"An "),Kj=o(qD,"CODE",{});var Qte=l(Kj);LH=p(Qte,"np.ndarray"),Qte.forEach(s),SH=p(qD,": NumPy array representing an image."),qD.forEach(s),Xte.forEach(s),OH=h(Np),Zj=o(Np,"LI",{});var ese=l(Zj);mf=o(ese,"P",{});var ID=l(mf);CH=p(ID,"A "),Xj=o(ID,"CODE",{});var tse=l(Xj);zH=p(tse,"PIL.Image.Image"),tse.forEach(s),VH=p(ID,": PIL image object."),ID.forEach(s),ese.forEach(s),Np.forEach(s),UH=h(W),b(Si.$$.fragment,W),MH=h(W),La=o(W,"DIV",{class:!0});var a$=l(La);b(hf.$$.fragment,a$),RH=h(a$),Qj=o(a$,"P",{});var sse=l(Qj);BH=p(sse,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),sse.forEach(s),HH=h(a$),Ye=o(a$,"UL",{});var cn=l(Ye);e7=o(cn,"LI",{});var ase=l(e7);GH=p(ase,"pa.string() - it must contain the \u201Cpath\u201D data"),ase.forEach(s),WH=h(cn),t7=o(cn,"LI",{});var nse=l(t7);YH=p(nse,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),nse.forEach(s),JH=h(cn),s7=o(cn,"LI",{});var rse=l(s7);KH=p(rse,"pa.struct({\u201Cpath\u201D: pa.string()})"),rse.forEach(s),ZH=h(cn),a7=o(cn,"LI",{});var ose=l(a7);XH=p(ose,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),ose.forEach(s),QH=h(cn),n7=o(cn,"LI",{});var lse=l(n7);eG=p(lse,"pa.list(*) - it must contain the image array data"),lse.forEach(s),cn.forEach(s),a$.forEach(s),tG=h(W),Oi=o(W,"DIV",{class:!0});var TD=l(Oi);b(ff.$$.fragment,TD),sG=h(TD),r7=o(TD,"P",{});var ise=l(r7);aG=p(ise,"Decode example image file into image data."),ise.forEach(s),TD.forEach(s),nG=h(W),Ci=o(W,"DIV",{class:!0});var ND=l(Ci);b(uf.$$.fragment,ND),rG=h(ND),o7=o(ND,"P",{});var pse=l(o7);oG=p(pse,"Embed image files into the Arrow array."),pse.forEach(s),ND.forEach(s),lG=h(W),zi=o(W,"DIV",{class:!0});var PD=l(zi);b(gf.$$.fragment,PD),iG=h(PD),l7=o(PD,"P",{});var cse=l(l7);pG=p(cse,"Encode example into a format for Arrow."),cse.forEach(s),PD.forEach(s),cG=h(W),Vi=o(W,"DIV",{class:!0});var AD=l(Vi);b(_f.$$.fragment,AD),dG=h(AD),i7=o(AD,"P",{});var dse=l(i7);mG=p(dse,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),dse.forEach(s),AD.forEach(s),W.forEach(s),Zw=h(a),tr=o(a,"H2",{class:!0});var FD=l(tr);Ui=o(FD,"A",{id:!0,class:!0,href:!0});var mse=l(Ui);p7=o(mse,"SPAN",{});var hse=l(p7);b(bf.$$.fragment,hse),hse.forEach(s),mse.forEach(s),hG=h(FD),c7=o(FD,"SPAN",{});var fse=l(c7);fG=p(fse,"MetricInfo"),fse.forEach(s),FD.forEach(s),Xw=h(a),ae=o(a,"DIV",{class:!0});var Pt=l(ae);b($f.$$.fragment,Pt),uG=h(Pt),d7=o(Pt,"P",{});var use=l(d7);gG=p(use,"Information about a metric."),use.forEach(s),_G=h(Pt),p_=o(Pt,"P",{});var PY=l(p_);m7=o(PY,"CODE",{});var gse=l(m7);bG=p(gse,"MetricInfo"),gse.forEach(s),$G=p(PY,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),PY.forEach(s),xG=h(Pt),h7=o(Pt,"P",{});var _se=l(h7);vG=p(_se,"Note: Not all fields are known on construction and may be updated later."),_se.forEach(s),yG=h(Pt),Sa=o(Pt,"DIV",{class:!0});var n$=l(Sa);b(xf.$$.fragment,n$),jG=h(n$),vf=o(n$,"P",{});var LD=l(vf);wG=p(LD,"Create MetricInfo from the JSON file in "),f7=o(LD,"CODE",{});var bse=l(f7);DG=p(bse,"metric_info_dir"),bse.forEach(s),kG=p(LD,"."),LD.forEach(s),EG=h(n$),b(Mi.$$.fragment,n$),n$.forEach(s),qG=h(Pt),Oa=o(Pt,"DIV",{class:!0});var r$=l(Oa);b(yf.$$.fragment,r$),IG=h(r$),ss=o(r$,"P",{});var Pp=l(ss);TG=p(Pp,"Write "),u7=o(Pp,"CODE",{});var $se=l(u7);NG=p($se,"MetricInfo"),$se.forEach(s),PG=p(Pp," as JSON to "),g7=o(Pp,"CODE",{});var xse=l(g7);AG=p(xse,"metric_info_dir"),xse.forEach(s),FG=p(Pp,`.
Also save the license separately in LICENCE.
If `),_7=o(Pp,"CODE",{});var vse=l(_7);LG=p(vse,"pretty_print"),vse.forEach(s),SG=p(Pp," is True, the JSON will be pretty-printed with the indent level of 4."),Pp.forEach(s),OG=h(r$),b(Ri.$$.fragment,r$),r$.forEach(s),Pt.forEach(s),Qw=h(a),sr=o(a,"H2",{class:!0});var SD=l(sr);Bi=o(SD,"A",{id:!0,class:!0,href:!0});var yse=l(Bi);b7=o(yse,"SPAN",{});var jse=l(b7);b(jf.$$.fragment,jse),jse.forEach(s),yse.forEach(s),CG=h(SD),$7=o(SD,"SPAN",{});var wse=l($7);zG=p(wse,"Metric"),wse.forEach(s),SD.forEach(s),e4=h(a),Ca=o(a,"P",{});var o$=l(Ca);VG=p(o$,"The base class "),x7=o(o$,"CODE",{});var Dse=l(x7);UG=p(Dse,"Metric"),Dse.forEach(s),MG=p(o$," implements a Metric backed by one or several "),c_=o(o$,"A",{href:!0});var kse=l(c_);RG=p(kse,"Dataset"),kse.forEach(s),BG=p(o$,"."),o$.forEach(s),t4=h(a),K=o(a,"DIV",{class:!0});var Se=l(K);b(wf.$$.fragment,Se),HG=h(Se),v7=o(Se,"P",{});var Ese=l(v7);GG=p(Ese,"A Metric is the base class and common API for all metrics."),Ese.forEach(s),WG=h(Se),b(Hi.$$.fragment,Se),YG=h(Se),za=o(Se,"DIV",{class:!0});var l$=l(za);b(Df.$$.fragment,l$),JG=h(l$),y7=o(l$,"P",{});var qse=l(y7);KG=p(qse,"Add one prediction and reference for the metric\u2019s stack."),qse.forEach(s),ZG=h(l$),b(Gi.$$.fragment,l$),l$.forEach(s),XG=h(Se),Va=o(Se,"DIV",{class:!0});var i$=l(Va);b(kf.$$.fragment,i$),QG=h(i$),j7=o(i$,"P",{});var Ise=l(j7);eW=p(Ise,"Add a batch of predictions and references for the metric\u2019s stack."),Ise.forEach(s),tW=h(i$),b(Wi.$$.fragment,i$),i$.forEach(s),sW=h(Se),xt=o(Se,"DIV",{class:!0});var Ap=l(xt);b(Ef.$$.fragment,Ap),aW=h(Ap),w7=o(Ap,"P",{});var Tse=l(w7);nW=p(Tse,"Compute the metrics."),Tse.forEach(s),rW=h(Ap),D7=o(Ap,"P",{});var Nse=l(D7);oW=p(Nse,"Usage of positional arguments is not allowed to prevent mistakes."),Nse.forEach(s),lW=h(Ap),b(Yi.$$.fragment,Ap),Ap.forEach(s),iW=h(Se),Ji=o(Se,"DIV",{class:!0});var OD=l(Ji);b(qf.$$.fragment,OD),pW=h(OD),k7=o(OD,"P",{});var Pse=l(k7);cW=p(Pse,"Downloads and prepares dataset for reading."),Pse.forEach(s),OD.forEach(s),Se.forEach(s),s4=h(a),ar=o(a,"H2",{class:!0});var CD=l(ar);Ki=o(CD,"A",{id:!0,class:!0,href:!0});var Ase=l(Ki);E7=o(Ase,"SPAN",{});var Fse=l(E7);b(If.$$.fragment,Fse),Fse.forEach(s),Ase.forEach(s),dW=h(CD),q7=o(CD,"SPAN",{});var Lse=l(q7);mW=p(Lse,"Filesystems"),Lse.forEach(s),CD.forEach(s),a4=h(a),C=o(a,"DIV",{class:!0});var V=l(C);b(Tf.$$.fragment,V),hW=h(V),Zi=o(V,"P",{});var bw=l(Zi);I7=o(bw,"CODE",{});var Sse=l(I7);fW=p(Sse,"datasets.filesystems.S3FileSystem"),Sse.forEach(s),uW=p(bw," is a subclass of "),Nf=o(bw,"A",{href:!0,rel:!0});var Ose=l(Nf);T7=o(Ose,"CODE",{});var Cse=l(T7);gW=p(Cse,"s3fs.S3FileSystem"),Cse.forEach(s),Ose.forEach(s),_W=p(bw,"."),bw.forEach(s),bW=h(V),as=o(V,"P",{});var Fp=l(as);$W=p(Fp,"Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),N7=o(Fp,"CODE",{});var zse=l(N7);xW=p(zse,"key="),zse.forEach(s),vW=p(Fp,", "),P7=o(Fp,"CODE",{});var Vse=l(P7);yW=p(Vse,"secret="),Vse.forEach(s),jW=p(Fp,") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),A7=o(Fp,"CODE",{});var Use=l(A7);wW=p(Use,"anon=True"),Use.forEach(s),DW=p(Fp,"."),Fp.forEach(s),kW=h(V),F7=o(V,"P",{});var Mse=l(F7);EW=p(Mse,"Examples:"),Mse.forEach(s),qW=h(V),L7=o(V,"P",{});var Rse=l(L7);IW=p(Rse,"Listing files from public S3 bucket."),Rse.forEach(s),TW=h(V),b(Xi.$$.fragment,V),NW=h(V),nr=o(V,"P",{});var p$=l(nr);PW=p(p$,"Listing files from private S3 bucket using "),S7=o(p$,"CODE",{});var Bse=l(S7);AW=p(Bse,"aws_access_key_id"),Bse.forEach(s),FW=p(p$," and "),O7=o(p$,"CODE",{});var Hse=l(O7);LW=p(Hse,"aws_secret_access_key"),Hse.forEach(s),SW=p(p$,"."),p$.forEach(s),OW=h(V),b(Qi.$$.fragment,V),CW=h(V),ns=o(V,"P",{});var Lp=l(ns);zW=p(Lp,"Using "),C7=o(Lp,"CODE",{});var Gse=l(C7);VW=p(Gse,"S3Filesystem"),Gse.forEach(s),UW=p(Lp," with "),z7=o(Lp,"CODE",{});var Wse=l(z7);MW=p(Wse,"botocore.session.Session"),Wse.forEach(s),RW=p(Lp," and custom "),V7=o(Lp,"CODE",{});var Yse=l(V7);BW=p(Yse,"aws_profile"),Yse.forEach(s),HW=p(Lp,"."),Lp.forEach(s),GW=h(V),b(ep.$$.fragment,V),WW=h(V),rr=o(V,"P",{});var c$=l(rr);YW=p(c$,"Loading dataset from S3 using "),U7=o(c$,"CODE",{});var Jse=l(U7);JW=p(Jse,"S3Filesystem"),Jse.forEach(s),KW=p(c$," and "),d_=o(c$,"A",{href:!0});var Kse=l(d_);ZW=p(Kse,"load_from_disk()"),Kse.forEach(s),XW=p(c$,"."),c$.forEach(s),QW=h(V),b(tp.$$.fragment,V),eY=h(V),or=o(V,"P",{});var d$=l(or);tY=p(d$,"Saving dataset to S3 using "),M7=o(d$,"CODE",{});var Zse=l(M7);sY=p(Zse,"S3Filesystem"),Zse.forEach(s),aY=p(d$," and "),m_=o(d$,"A",{href:!0});var Xse=l(m_);nY=p(Xse,"Dataset.save_to_disk()"),Xse.forEach(s),rY=p(d$,"."),d$.forEach(s),oY=h(V),b(sp.$$.fragment,V),V.forEach(s),n4=h(a),lr=o(a,"DIV",{class:!0});var zD=l(lr);b(Pf.$$.fragment,zD),lY=h(zD),ir=o(zD,"P",{});var m$=l(ir);iY=p(m$,"preprocesses "),R7=o(m$,"EM",{});var Qse=l(R7);pY=p(Qse,"dataset_path"),Qse.forEach(s),cY=p(m$," and removes remote filesystem (e.g. removing "),B7=o(m$,"CODE",{});var eae=l(B7);dY=p(eae,"s3://"),eae.forEach(s),mY=p(m$,")"),m$.forEach(s),zD.forEach(s),r4=h(a),pr=o(a,"DIV",{class:!0});var VD=l(pr);b(Af.$$.fragment,VD),hY=h(VD),H7=o(VD,"P",{});var tae=l(H7);fY=p(tae,"Validates if filesystem has remote protocol."),tae.forEach(s),VD.forEach(s),o4=h(a),cr=o(a,"H2",{class:!0});var UD=l(cr);ap=o(UD,"A",{id:!0,class:!0,href:!0});var sae=l(ap);G7=o(sae,"SPAN",{});var aae=l(G7);b(Ff.$$.fragment,aae),aae.forEach(s),sae.forEach(s),uY=h(UD),W7=o(UD,"SPAN",{});var nae=l(W7);gY=p(nae,"Fingerprint"),nae.forEach(s),UD.forEach(s),l4=h(a),dr=o(a,"DIV",{class:!0});var MD=l(dr);b(Lf.$$.fragment,MD),_Y=h(MD),Y7=o(MD,"P",{});var rae=l(Y7);bY=p(rae,"Hasher that accepts python objects as inputs."),rae.forEach(s),MD.forEach(s),this.h()},h(){w(c,"name","hf:doc:metadata"),w(c,"content",JSON.stringify(Cre)),w(n,"id","main-classes"),w(n,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(n,"href","#main-classes"),w(f,"class","relative group"),w(be,"id","datasets.DatasetInfo"),w(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(be,"href","#datasets.DatasetInfo"),w(Oe,"class","relative group"),w($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Sr,"id","datasets.Dataset"),w(Sr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Sr,"href","#datasets.Dataset"),w(hn,"class","relative group"),w(su,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"),w(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(au,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"),w(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(nu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"),w(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wr,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.__len__"),w(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ru,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.map"),w(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ou,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format"),w(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(iu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format"),w(pu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(du,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(mu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format"),w(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format"),w(fu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(uu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Image"),w(_u,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Audio"),w(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w($u,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Image"),w(xu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Audio"),w(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(Yc,"rel","nofollow"),w(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(Kc,"rel","nofollow"),w(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Du,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo"),w(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eu,"href","/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit"),w(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Iu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Su,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ou,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features"),w(Mu,"href","/docs/datasets/package_reference/task_templates"),w(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ru,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"),w(Bu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"),w(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"),w(Gu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset"),w(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(Yu,"href","/docs/datasets/pr_4739/en/package_reference/loading_methods#datasets.load_dataset"),w(Ju,"href","/docs/datasets/pr_4739/en/package_reference/loading_methods#datasets.load_dataset"),w(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ku,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(Zu,"href","/docs/datasets/pr_4739/en/package_reference/loading_methods#datasets.load_dataset"),w(Xu,"href","/docs/datasets/pr_4739/en/package_reference/loading_methods#datasets.load_dataset"),w(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qu,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(eg,"href","/docs/datasets/pr_4739/en/package_reference/loading_methods#datasets.load_dataset"),w(tg,"href","/docs/datasets/pr_4739/en/package_reference/loading_methods#datasets.load_dataset"),w(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(el,"id","datasets.DatasetDict"),w(el,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(el,"href","#datasets.DatasetDict"),w(In,"class","relative group"),w(Zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(rl,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.__len__"),w(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_l,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ag,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(ng,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetDict.set_format"),w(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(rg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.set_format"),w(og,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.map"),w(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ig,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.map"),w(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.map"),w(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Image"),w(dg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Audio"),w(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(hg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Image"),w(fg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Audio"),w(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ug,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features"),w(_g,"href","/docs/datasets/package_reference/task_templates"),w(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bg,"id","package_reference_features"),w(Ll,"id","datasets.IterableDataset"),w(Ll,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ll,"href","#datasets.IterableDataset"),w(Mn,"class","relative group"),w($g,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset"),w(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(yg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset.take"),w(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo"),w(Gl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(kg,"href","/docs/datasets/pr_4739/en/package_reference/builder_classes#datasets.NamedSplit"),w(Wl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yl,"id","datasets.IterableDatasetDict"),w(Yl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Yl,"href","#datasets.IterableDatasetDict"),w(Hn,"class","relative group"),w(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(Ug,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.IterableDataset.take"),w(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ri,"id","datasets.Features"),w(ri,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ri,"href","#datasets.Features"),w(Yn,"class","relative group"),w(Rg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Value"),w(Bg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.ClassLabel"),w(Hg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Sequence"),w(Gg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Sequence"),w(Wg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Array2D"),w(Yg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Array3D"),w(Jg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Array4D"),w(Kg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Array5D"),w(Zg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Audio"),w(Xg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Image"),w(Qg,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Translation"),w(e_,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),w(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(t_,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.DatasetInfo"),w(s_,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),w(a_,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Value"),w(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ki,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ui,"id","datasets.MetricInfo"),w(Ui,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ui,"href","#datasets.MetricInfo"),w(tr,"class","relative group"),w(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bi,"id","datasets.Metric"),w(Bi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Bi,"href","#datasets.Metric"),w(sr,"class","relative group"),w(c_,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset"),w(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ji,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ki,"id","datasets.filesystems.S3FileSystem"),w(Ki,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Ki,"href","#datasets.filesystems.S3FileSystem"),w(ar,"class","relative group"),w(Nf,"href","https://s3fs.readthedocs.io/en/latest/api.html"),w(Nf,"rel","nofollow"),w(d_,"href","/docs/datasets/pr_4739/en/package_reference/loading_methods#datasets.load_from_disk"),w(m_,"href","/docs/datasets/pr_4739/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ap,"id","datasets.fingerprint.Hasher"),w(ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ap,"href","#datasets.fingerprint.Hasher"),w(cr,"class","relative group"),w(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(a,j){e(document.head,c),D(a,g,j),D(a,f,j),e(f,n),e(n,u),$(t,u,null),e(f,d),e(f,dn),e(dn,fs),D(a,Pr,j),D(a,Oe,j),e(Oe,be),e(be,ne),$(us,ne,null),e(Oe,eu),e(Oe,Ar),e(Ar,RD),D(a,$w,j),D(a,Q,j),$(Sp,Q,null),e(Q,BD),e(Q,h$),e(h$,HD),e(Q,GD),e(Q,tu),e(tu,f$),e(f$,WD),e(tu,YD),e(Q,JD),e(Q,u$),e(u$,KD),e(Q,ZD),e(Q,$e),$(Op,$e,null),e($e,XD),e($e,Cp),e(Cp,QD),e(Cp,g$),e(g$,ek),e(Cp,tk),e($e,sk),e($e,_$),e(_$,ak),e($e,nk),e($e,b$),e(b$,rk),e($e,ok),$(Fr,$e,null),e(Q,lk),e(Q,gs),$(zp,gs,null),e(gs,ik),e(gs,mn),e(mn,pk),e(mn,$$),e($$,ck),e(mn,dk),e(mn,x$),e(x$,mk),e(mn,hk),e(gs,fk),$(Lr,gs,null),D(a,xw,j),D(a,hn,j),e(hn,Sr),e(Sr,v$),$(Vp,v$,null),e(hn,uk),e(hn,y$),e(y$,gk),D(a,vw,j),D(a,Or,j),e(Or,_k),e(Or,su),e(su,bk),e(Or,$k),D(a,yw,j),D(a,q,j),$(Up,q,null),e(q,xk),e(q,j$),e(j$,vk),e(q,yk),e(q,tt),$(Mp,tt,null),e(tt,jk),e(tt,w$),e(w$,wk),e(tt,Dk),e(tt,D$),e(D$,k$),e(k$,kk),e(tt,Ek),$(Cr,tt,null),e(q,qk),e(q,st),$(Rp,st,null),e(st,Ik),e(st,E$),e(E$,Tk),e(st,Nk),e(st,q$),e(q$,I$),e(I$,Pk),e(st,Ak),$(zr,st,null),e(q,Fk),e(q,Vr),$(Bp,Vr,null),e(Vr,Lk),e(Vr,T$),e(T$,Sk),e(q,Ok),e(q,Ur),$(Hp,Ur,null),e(Ur,Ck),e(Ur,N$),e(N$,zk),e(q,Vk),e(q,xe),$(Gp,xe,null),e(xe,Uk),e(xe,At),e(At,Mk),e(At,P$),e(P$,Rk),e(At,Bk),e(At,A$),e(A$,Hk),e(At,Gk),e(At,au),e(au,Wk),e(At,Yk),e(xe,Jk),e(xe,Wp),e(Wp,Kk),e(Wp,F$),e(F$,Zk),e(Wp,Xk),e(xe,Qk),e(xe,Yp),e(Yp,e3),e(Yp,L$),e(L$,t3),e(Yp,s3),e(xe,a3),$(Mr,xe,null),e(q,n3),e(q,Rr),$(Jp,Rr,null),e(Rr,r3),e(Rr,Ft),e(Ft,o3),e(Ft,S$),e(S$,l3),e(Ft,i3),e(Ft,O$),e(O$,p3),e(Ft,c3),e(Ft,nu),e(nu,d3),e(Ft,m3),e(q,h3),e(q,_s),$(Kp,_s,null),e(_s,f3),e(_s,C$),e(C$,u3),e(_s,g3),$(Br,_s,null),e(q,_3),e(q,bs),$(Zp,bs,null),e(bs,b3),e(bs,z$),e(z$,$3),e(bs,x3),$(Hr,bs,null),e(q,v3),e(q,$s),$(Xp,$s,null),e($s,y3),e($s,V$),e(V$,j3),e($s,w3),$(Gr,$s,null),e(q,D3),e(q,xs),$(Qp,xs,null),e(xs,k3),e(xs,ec),e(ec,E3),e(ec,Wr),e(Wr,q3),e(Wr,U$),e(U$,I3),e(Wr,T3),e(ec,N3),e(xs,P3),$(Yr,xs,null),e(q,A3),e(q,vs),$(tc,vs,null),e(vs,F3),e(vs,M$),e(M$,L3),e(vs,S3),$(Jr,vs,null),e(q,O3),e(q,ys),$(sc,ys,null),e(ys,C3),e(ys,R$),e(R$,z3),e(ys,V3),$(Kr,ys,null),e(q,U3),e(q,at),$(ac,at,null),e(at,M3),e(at,B$),e(B$,R3),e(at,B3),e(at,H$),e(H$,H3),e(at,G3),$(Zr,at,null),e(q,W3),e(q,js),$(nc,js,null),e(js,Y3),e(js,G$),e(G$,J3),e(js,K3),$(Xr,js,null),e(q,Z3),e(q,ws),$(rc,ws,null),e(ws,X3),e(ws,W$),e(W$,Q3),e(ws,eE),$(Qr,ws,null),e(q,tE),e(q,Ds),$(oc,Ds,null),e(Ds,sE),e(Ds,Y$),e(Y$,aE),e(Ds,nE),$(eo,Ds,null),e(q,rE),e(q,nt),$(lc,nt,null),e(nt,oE),e(nt,J$),e(J$,lE),e(nt,iE),e(nt,fn),e(fn,pE),e(fn,ru),e(ru,cE),e(fn,dE),e(fn,K$),e(K$,mE),e(fn,hE),e(nt,fE),$(to,nt,null),e(q,uE),e(q,ks),$(ic,ks,null),e(ks,gE),e(ks,Z$),e(Z$,_E),e(ks,bE),$(so,ks,null),e(q,$E),e(q,Es),$(pc,Es,null),e(Es,xE),e(Es,X$),e(X$,vE),e(Es,yE),$(ao,Es,null),e(q,jE),e(q,qs),$(cc,qs,null),e(qs,wE),e(qs,dc),e(dc,DE),e(dc,Q$),e(Q$,kE),e(dc,EE),e(qs,qE),$(no,qs,null),e(q,IE),e(q,Is),$(mc,Is,null),e(Is,TE),e(Is,e2),e(e2,NE),e(Is,PE),$(ro,Is,null),e(q,AE),e(q,Ts),$(hc,Ts,null),e(Ts,FE),e(Ts,t2),e(t2,LE),e(Ts,SE),e(Ts,fc),e(fc,OE),e(fc,ou),e(ou,CE),e(fc,zE),e(q,VE),e(q,oo),$(uc,oo,null),e(oo,UE),e(oo,un),e(un,ME),e(un,s2),e(s2,RE),e(un,BE),e(un,a2),e(a2,HE),e(un,GE),e(q,WE),e(q,ve),$(gc,ve,null),e(ve,YE),e(ve,Ce),e(Ce,JE),e(Ce,n2),e(n2,KE),e(Ce,ZE),e(Ce,r2),e(r2,XE),e(Ce,QE),e(Ce,o2),e(o2,e9),e(Ce,t9),e(Ce,lu),e(lu,s9),e(Ce,a9),e(ve,n9),e(ve,ze),e(ze,r9),e(ze,l2),e(l2,o9),e(ze,l9),e(ze,i2),e(i2,i9),e(ze,p9),e(ze,p2),e(p2,c9),e(ze,d9),e(ze,c2),e(c2,m9),e(ze,h9),e(ve,f9),e(ve,d2),e(d2,u9),e(ve,g9),$(lo,ve,null),e(q,_9),e(q,Ns),$(_c,Ns,null),e(Ns,b9),e(Ns,rt),e(rt,$9),e(rt,m2),e(m2,x9),e(rt,v9),e(rt,h2),e(h2,y9),e(rt,j9),e(rt,iu),e(iu,w9),e(rt,D9),e(rt,pu),e(pu,k9),e(Ns,E9),$(io,Ns,null),e(q,q9),e(q,ot),$(bc,ot,null),e(ot,I9),e(ot,$c),e($c,T9),e($c,f2),e(f2,N9),e($c,P9),e(ot,A9),e(ot,cu),e(cu,F9),e(cu,u2),e(u2,L9),e(ot,S9),$(po,ot,null),e(q,O9),e(q,ye),$(xc,ye,null),e(ye,C9),e(ye,Lt),e(Lt,z9),e(Lt,g2),e(g2,V9),e(Lt,U9),e(Lt,_2),e(_2,M9),e(Lt,R9),e(Lt,b2),e(b2,B9),e(Lt,H9),e(ye,G9),e(ye,vc),e(vc,W9),e(vc,du),e(du,Y9),e(vc,J9),e(ye,K9),e(ye,gn),e(gn,Z9),e(gn,mu),e(mu,X9),e(gn,Q9),e(gn,$2),e($2,e5),e(gn,t5),e(ye,s5),$(co,ye,null),e(q,a5),e(q,je),$(yc,je,null),e(je,n5),e(je,_n),e(_n,r5),e(_n,x2),e(x2,o5),e(_n,l5),e(_n,v2),e(v2,i5),e(_n,p5),e(je,c5),e(je,bn),e(bn,d5),e(bn,hu),e(hu,m5),e(bn,h5),e(bn,fu),e(fu,f5),e(bn,u5),e(je,g5),e(je,$n),e($n,_5),e($n,uu),e(uu,b5),e($n,$5),e($n,y2),e(y2,x5),e($n,v5),e(je,y5),$(mo,je,null),e(q,j5),e(q,ho),$(jc,ho,null),e(ho,w5),e(ho,j2),e(j2,D5),e(q,k5),e(q,lt),$(wc,lt,null),e(lt,E5),e(lt,w2),e(w2,q5),e(lt,I5),e(lt,D2),e(D2,T5),e(lt,N5),$(fo,lt,null),e(q,P5),e(q,we),$(Dc,we,null),e(we,A5),e(we,k2),e(k2,F5),e(we,L5),e(we,kc),e(kc,S5),e(kc,E2),e(E2,O5),e(kc,C5),e(we,z5),e(we,xn),e(xn,q2),e(q2,V5),e(xn,U5),e(xn,I2),e(I2,M5),e(xn,R5),e(xn,de),e(de,B5),e(de,T2),e(T2,H5),e(de,G5),e(de,N2),e(N2,W5),e(de,Y5),e(de,P2),e(P2,J5),e(de,K5),e(de,A2),e(A2,Z5),e(de,X5),e(de,F2),e(F2,Q5),e(de,e6),e(we,t6),$(uo,we,null),e(q,s6),e(q,Ps),$(Ec,Ps,null),e(Ps,a6),e(Ps,L2),e(L2,n6),e(Ps,r6),$(go,Ps,null),e(q,o6),e(q,As),$(qc,As,null),e(As,l6),e(As,S2),e(S2,i6),e(As,p6),$(_o,As,null),e(q,c6),e(q,it),$(Ic,it,null),e(it,d6),e(it,O2),e(O2,m6),e(it,h6),e(it,C2),e(C2,f6),e(it,u6),$(bo,it,null),e(q,g6),e(q,pt),$(Tc,pt,null),e(pt,_6),e(pt,z2),e(z2,b6),e(pt,$6),e(pt,V2),e(V2,x6),e(pt,v6),$($o,pt,null),e(q,y6),e(q,ct),$(Nc,ct,null),e(ct,j6),e(ct,Y),e(Y,w6),e(Y,U2),e(U2,D6),e(Y,k6),e(Y,M2),e(M2,E6),e(Y,q6),e(Y,R2),e(R2,I6),e(Y,T6),e(Y,B2),e(B2,N6),e(Y,P6),e(Y,H2),e(H2,A6),e(Y,F6),e(Y,G2),e(G2,L6),e(Y,S6),e(Y,W2),e(W2,O6),e(Y,C6),e(ct,z6),e(ct,Pc),e(Pc,V6),e(Pc,Y2),e(Y2,U6),e(Pc,M6),e(ct,R6),$(xo,ct,null),e(q,B6),e(q,re),$(Ac,re,null),e(re,H6),e(re,vn),e(vn,G6),e(vn,J2),e(J2,W6),e(vn,Y6),e(vn,K2),e(K2,J6),e(vn,K6),e(re,Z6),e(re,Z2),e(Z2,X6),e(re,Q6),e(re,Fc),e(Fc,e8),e(Fc,X2),e(X2,t8),e(Fc,s8),e(re,a8),e(re,Q2),e(Q2,n8),e(re,r8),$(vo,re,null),e(q,o8),e(q,Fs),$(Lc,Fs,null),e(Fs,l8),e(Fs,ex),e(ex,i8),e(Fs,p8),$(yo,Fs,null),e(q,c8),e(q,dt),$(Sc,dt,null),e(dt,d8),e(dt,tx),e(tx,m8),e(dt,h8),e(dt,St),e(St,f8),e(St,gu),e(gu,u8),e(St,g8),e(St,_u),e(_u,_8),e(St,b8),e(St,sx),e(sx,$8),e(St,x8),e(dt,v8),$(jo,dt,null),e(q,y8),e(q,Z),$(Oc,Z,null),e(Z,j8),e(Z,yn),e(yn,w8),e(yn,bu),e(bu,D8),e(yn,k8),e(yn,ax),e(ax,E8),e(yn,q8),e(Z,I8),e(Z,jn),e(jn,T8),e(jn,$u),e($u,N8),e(jn,P8),e(jn,xu),e(xu,A8),e(jn,F8),e(Z,L8),e(Z,Cc),e(Cc,S8),e(Cc,nx),e(nx,O8),e(Cc,C8),e(Z,z8),$(wo,Z,null),e(Z,V8),$(Do,Z,null),e(Z,U8),$(ko,Z,null),e(q,M8),e(q,Ls),$(zc,Ls,null),e(Ls,R8),e(Ls,Ot),e(Ot,B8),e(Ot,rx),e(rx,H8),e(Ot,G8),e(Ot,vu),e(vu,W8),e(Ot,Y8),e(Ot,ox),e(ox,J8),e(Ot,K8),e(Ls,Z8),$(Eo,Ls,null),e(q,X8),e(q,qo),$(Vc,qo,null),e(qo,Q8),e(qo,lx),e(lx,eq),e(q,tq),e(q,Ss),$(Uc,Ss,null),e(Ss,sq),e(Ss,ix),e(ix,aq),e(Ss,nq),$(Io,Ss,null),e(q,rq),e(q,Os),$(Mc,Os,null),e(Os,oq),e(Os,Rc),e(Rc,lq),e(Rc,px),e(px,iq),e(Rc,pq),e(Os,cq),$(To,Os,null),e(q,dq),e(q,Cs),$(Bc,Cs,null),e(Cs,mq),e(Cs,cx),e(cx,hq),e(Cs,fq),$(No,Cs,null),e(q,uq),e(q,zs),$(Hc,zs,null),e(zs,gq),e(zs,dx),e(dx,_q),e(zs,bq),$(Po,zs,null),e(q,$q),e(q,Vs),$(Gc,Vs,null),e(Vs,xq),e(Vs,mx),e(mx,vq),e(Vs,yq),$(Ao,Vs,null),e(q,jq),e(q,mt),$(Wc,mt,null),e(mt,wq),e(mt,wn),e(wn,Dq),e(wn,hx),e(hx,kq),e(wn,Eq),e(wn,fx),e(fx,qq),e(wn,Iq),e(mt,Tq),e(mt,ux),e(ux,yu),e(yu,Nq),e(yu,Yc),e(Yc,Pq),e(mt,Aq),$(Fo,mt,null),e(q,Fq),e(q,Us),$(Jc,Us,null),e(Us,Lq),e(Us,Ct),e(Ct,Sq),e(Ct,gx),e(gx,Oq),e(Ct,Cq),e(Ct,_x),e(_x,zq),e(Ct,Vq),e(Ct,bx),e(bx,Uq),e(Ct,Mq),e(Us,Rq),e(Us,$x),e($x,ju),e(ju,Bq),e(ju,Kc),e(Kc,Hq),e(q,Gq),e(q,Lo),$(Zc,Lo,null),e(Lo,Wq),e(Lo,xx),e(xx,Yq),e(q,Jq),e(q,Ms),$(Xc,Ms,null),e(Ms,Kq),e(Ms,vx),e(vx,Zq),e(Ms,Xq),e(Ms,Qc),e(Qc,Qq),e(Qc,yx),e(yx,eI),e(Qc,tI),e(q,sI),e(q,Rs),$(ed,Rs,null),e(Rs,aI),e(Rs,jx),e(jx,nI),e(Rs,rI),$(So,Rs,null),e(q,oI),e(q,Bs),$(td,Bs,null),e(Bs,lI),e(Bs,wx),e(wx,iI),e(Bs,pI),$(Oo,Bs,null),e(q,cI),e(q,Co),$(sd,Co,null),e(Co,dI),e(Co,Dx),e(Dx,mI),e(q,hI),e(q,zo),$(ad,zo,null),e(zo,fI),e(zo,kx),e(kx,uI),e(q,gI),e(q,Vo),$(nd,Vo,null),e(Vo,_I),e(Vo,Ex),e(Ex,bI),e(q,$I),e(q,Uo),$(rd,Uo,null),e(Uo,xI),e(Uo,qx),e(qx,vI),e(q,yI),e(q,Mo),$(od,Mo,null),e(Mo,jI),e(Mo,Ix),e(Ix,wI),e(q,DI),e(q,Ro),$(ld,Ro,null),e(Ro,kI),e(Ro,Tx),e(Tx,EI),e(q,qI),e(q,Bo),$(id,Bo,null),e(Bo,II),e(Bo,Nx),e(Nx,TI),e(q,NI),e(q,Ho),$(pd,Ho,null),e(Ho,PI),e(Ho,wu),e(wu,Du),e(Du,AI),e(wu,FI),e(q,LI),e(q,Go),$(cd,Go,null),e(Go,SI),e(Go,ku),e(ku,Eu),e(Eu,OI),e(ku,CI),e(q,zI),e(q,qu),$(dd,qu,null),e(q,VI),e(q,Iu),$(md,Iu,null),e(q,UI),e(q,Tu),$(hd,Tu,null),e(q,MI),e(q,Nu),$(fd,Nu,null),e(q,RI),e(q,Pu),$(ud,Pu,null),e(q,BI),e(q,Au),$(gd,Au,null),e(q,HI),e(q,Fu),$(_d,Fu,null),e(q,GI),e(q,Lu),$(bd,Lu,null),e(q,WI),e(q,Su),$($d,Su,null),e(q,YI),e(q,Ou),$(xd,Ou,null),e(q,JI),e(q,Cu),$(vd,Cu,null),e(q,KI),e(q,zu),$(yd,zu,null),e(q,ZI),e(q,Vu),$(jd,Vu,null),e(q,XI),e(q,Hs),$(wd,Hs,null),e(Hs,QI),e(Hs,Px),e(Px,eT),e(Hs,tT),$(Wo,Hs,null),e(q,sT),e(q,Gs),$(Dd,Gs,null),e(Gs,aT),e(Gs,Ax),e(Ax,nT),e(Gs,rT),$(Yo,Gs,null),e(q,oT),e(q,Ws),$(kd,Ws,null),e(Ws,lT),e(Ws,Fx),e(Fx,iT),e(Ws,pT),$(Jo,Ws,null),e(q,cT),e(q,Ys),$(Ed,Ys,null),e(Ys,dT),e(Ys,Lx),e(Lx,mT),e(Ys,hT),$(Ko,Ys,null),e(q,fT),e(q,Js),$(qd,Js,null),e(Js,uT),e(Js,Dn),e(Dn,gT),e(Dn,Uu),e(Uu,_T),e(Dn,bT),e(Dn,Mu),e(Mu,$T),e(Dn,xT),e(Js,vT),e(Js,kn),e(kn,yT),e(kn,Sx),e(Sx,jT),e(kn,wT),e(kn,Ox),e(Ox,DT),e(kn,kT),e(q,ET),e(q,Ks),$(Id,Ks,null),e(Ks,qT),e(Ks,Td),e(Td,IT),e(Td,Cx),e(Cx,TT),e(Td,NT),e(Ks,PT),$(Zo,Ks,null),D(a,jw,j),D(a,zt,j),$(Nd,zt,null),e(zt,AT),e(zt,En),e(En,FT),e(En,Ru),e(Ru,LT),e(En,ST),e(En,Bu),e(Bu,OT),e(En,CT),e(zt,zT),$(Xo,zt,null),D(a,ww,j),D(a,ee,j),$(Pd,ee,null),e(ee,VT),e(ee,zx),e(zx,UT),e(ee,MT),e(ee,qn),e(qn,RT),e(qn,Hu),e(Hu,BT),e(qn,HT),e(qn,Gu),e(Gu,GT),e(qn,WT),e(ee,YT),e(ee,Ve),e(Ve,JT),e(Ve,Vx),e(Vx,KT),e(Ve,ZT),e(Ve,Ux),e(Ux,XT),e(Ve,QT),e(Ve,Mx),e(Mx,eN),e(Ve,tN),e(Ve,Rx),e(Rx,sN),e(Ve,aN),e(ee,nN),e(ee,Bx),e(Bx,rN),e(ee,oN),$(Qo,ee,null),D(a,Dw,j),D(a,me,j),$(Ad,me,null),e(me,lN),e(me,Hx),e(Hx,iN),e(me,pN),e(me,Gx),e(Gx,cN),e(me,dN),e(me,Wx),e(Wx,mN),e(me,hN),e(me,Ue),e(Ue,Yx),e(Yx,fN),e(Ue,uN),e(Ue,Jx),e(Jx,gN),e(Ue,_N),e(Ue,Kx),e(Kx,bN),e(Ue,$N),e(Ue,Fd),e(Fd,xN),e(Fd,Wu),e(Wu,vN),e(Fd,yN),e(Ue,jN),e(Ue,Vt),e(Vt,wN),e(Vt,Yu),e(Yu,DN),e(Vt,kN),e(Vt,Zx),e(Zx,EN),e(Vt,qN),e(Vt,Ju),e(Ju,IN),e(Vt,TN),D(a,kw,j),D(a,he,j),$(Ld,he,null),e(he,NN),e(he,Xx),e(Xx,PN),e(he,AN),e(he,Qx),e(Qx,FN),e(he,LN),e(he,e1),e(e1,SN),e(he,ON),e(he,Me),e(Me,t1),e(t1,CN),e(Me,zN),e(Me,s1),e(s1,VN),e(Me,UN),e(Me,a1),e(a1,MN),e(Me,RN),e(Me,Sd),e(Sd,BN),e(Sd,Ku),e(Ku,HN),e(Sd,GN),e(Me,WN),e(Me,Ut),e(Ut,YN),e(Ut,Zu),e(Zu,JN),e(Ut,KN),e(Ut,n1),e(n1,ZN),e(Ut,XN),e(Ut,Xu),e(Xu,QN),e(Ut,eP),D(a,Ew,j),D(a,fe,j),$(Od,fe,null),e(fe,tP),e(fe,r1),e(r1,sP),e(fe,aP),e(fe,o1),e(o1,nP),e(fe,rP),e(fe,l1),e(l1,oP),e(fe,lP),e(fe,Re),e(Re,i1),e(i1,iP),e(Re,pP),e(Re,p1),e(p1,cP),e(Re,dP),e(Re,c1),e(c1,mP),e(Re,hP),e(Re,Cd),e(Cd,fP),e(Cd,Qu),e(Qu,uP),e(Cd,gP),e(Re,_P),e(Re,Mt),e(Mt,bP),e(Mt,eg),e(eg,$P),e(Mt,xP),e(Mt,d1),e(d1,vP),e(Mt,yP),e(Mt,tg),e(tg,jP),e(Mt,wP),D(a,qw,j),D(a,In,j),e(In,el),e(el,m1),$(zd,m1,null),e(In,DP),e(In,h1),e(h1,kP),D(a,Iw,j),D(a,tl,j),e(tl,EP),e(tl,f1),e(f1,qP),e(tl,IP),D(a,Tw,j),D(a,A,j),$(Vd,A,null),e(A,TP),e(A,u1),e(u1,NP),e(A,PP),e(A,Zs),$(Ud,Zs,null),e(Zs,AP),e(Zs,g1),e(g1,FP),e(Zs,LP),$(sl,Zs,null),e(A,SP),e(A,Xs),$(Md,Xs,null),e(Xs,OP),e(Xs,_1),e(_1,CP),e(Xs,zP),$(al,Xs,null),e(A,VP),e(A,Qs),$(Rd,Qs,null),e(Qs,UP),e(Qs,b1),e(b1,MP),e(Qs,RP),$(nl,Qs,null),e(A,BP),e(A,ea),$(Bd,ea,null),e(ea,HP),e(ea,Hd),e(Hd,GP),e(Hd,rl),e(rl,WP),e(rl,$1),e($1,YP),e(rl,JP),e(Hd,KP),e(ea,ZP),$(ol,ea,null),e(A,XP),e(A,ta),$(Gd,ta,null),e(ta,QP),e(ta,x1),e(x1,eA),e(ta,tA),$(ll,ta,null),e(A,sA),e(A,sa),$(Wd,sa,null),e(sa,aA),e(sa,v1),e(v1,nA),e(sa,rA),$(il,sa,null),e(A,oA),e(A,ht),$(Yd,ht,null),e(ht,lA),e(ht,y1),e(y1,iA),e(ht,pA),e(ht,j1),e(j1,cA),e(ht,dA),$(pl,ht,null),e(A,mA),e(A,aa),$(Jd,aa,null),e(aa,hA),e(aa,w1),e(w1,fA),e(aa,uA),$(cl,aa,null),e(A,gA),e(A,na),$(Kd,na,null),e(na,_A),e(na,D1),e(D1,bA),e(na,$A),$(dl,na,null),e(A,xA),e(A,ra),$(Zd,ra,null),e(ra,vA),e(ra,k1),e(k1,yA),e(ra,jA),$(ml,ra,null),e(A,wA),e(A,ft),$(Xd,ft,null),e(ft,DA),e(ft,E1),e(E1,kA),e(ft,EA),e(ft,q1),e(q1,qA),e(ft,IA),$(hl,ft,null),e(A,TA),e(A,De),$(Qd,De,null),e(De,NA),e(De,I1),e(I1,PA),e(De,AA),e(De,T1),e(T1,FA),e(De,LA),e(De,N1),e(N1,SA),e(De,OA),$(fl,De,null),e(A,CA),e(A,ke),$(em,ke,null),e(ke,zA),e(ke,tm),e(tm,VA),e(tm,P1),e(P1,UA),e(tm,MA),e(ke,RA),e(ke,Be),e(Be,BA),e(Be,A1),e(A1,HA),e(Be,GA),e(Be,F1),e(F1,WA),e(Be,YA),e(Be,L1),e(L1,JA),e(Be,KA),e(Be,S1),e(S1,ZA),e(Be,XA),e(ke,QA),e(ke,O1),e(O1,eF),e(ke,tF),$(ul,ke,null),e(A,sF),e(A,ut),$(sm,ut,null),e(ut,aF),e(ut,am),e(am,nF),e(am,C1),e(C1,rF),e(am,oF),e(ut,lF),e(ut,sg),e(sg,iF),e(sg,z1),e(z1,pF),e(ut,cF),$(gl,ut,null),e(A,dF),e(A,_l),$(nm,_l,null),e(_l,mF),e(_l,Tn),e(Tn,hF),e(Tn,V1),e(V1,fF),e(Tn,uF),e(Tn,U1),e(U1,gF),e(Tn,_F),e(A,bF),e(A,Ee),$(rm,Ee,null),e(Ee,$F),e(Ee,Rt),e(Rt,xF),e(Rt,M1),e(M1,vF),e(Rt,yF),e(Rt,R1),e(R1,jF),e(Rt,wF),e(Rt,B1),e(B1,DF),e(Rt,kF),e(Ee,EF),e(Ee,om),e(om,qF),e(om,ag),e(ag,IF),e(om,TF),e(Ee,NF),e(Ee,Nn),e(Nn,PF),e(Nn,ng),e(ng,AF),e(Nn,FF),e(Nn,H1),e(H1,LF),e(Nn,SF),e(Ee,OF),$(bl,Ee,null),e(A,CF),e(A,qe),$(lm,qe,null),e(qe,zF),e(qe,Pn),e(Pn,VF),e(Pn,G1),e(G1,UF),e(Pn,MF),e(Pn,W1),e(W1,RF),e(Pn,BF),e(qe,HF),e(qe,An),e(An,GF),e(An,rg),e(rg,WF),e(An,YF),e(An,og),e(og,JF),e(An,KF),e(qe,ZF),e(qe,Fn),e(Fn,XF),e(Fn,Y1),e(Y1,QF),e(Fn,eL),e(Fn,J1),e(J1,tL),e(Fn,sL),e(qe,aL),$($l,qe,null),e(A,nL),e(A,oa),$(im,oa,null),e(oa,rL),e(oa,K1),e(K1,oL),e(oa,lL),$(xl,oa,null),e(A,iL),e(A,gt),$(pm,gt,null),e(gt,pL),e(gt,Z1),e(Z1,cL),e(gt,dL),e(gt,Bt),e(Bt,mL),e(Bt,lg),e(lg,hL),e(Bt,fL),e(Bt,X1),e(X1,uL),e(Bt,gL),e(Bt,Q1),e(Q1,_L),e(Bt,bL),e(gt,$L),$(vl,gt,null),e(A,xL),e(A,la),$(cm,la,null),e(la,vL),e(la,ev),e(ev,yL),e(la,jL),$(yl,la,null),e(A,wL),e(A,Ie),$(dm,Ie,null),e(Ie,DL),e(Ie,tv),e(tv,kL),e(Ie,EL),e(Ie,sv),e(sv,qL),e(Ie,IL),e(Ie,Ln),e(Ln,TL),e(Ln,ig),e(ig,NL),e(Ln,PL),e(Ln,av),e(av,AL),e(Ln,FL),e(Ie,LL),$(jl,Ie,null),e(A,SL),e(A,Te),$(mm,Te,null),e(Te,OL),e(Te,nv),e(nv,CL),e(Te,zL),e(Te,Sn),e(Sn,VL),e(Sn,pg),e(pg,UL),e(Sn,ML),e(Sn,rv),e(rv,RL),e(Sn,BL),e(Te,HL),e(Te,hm),e(hm,ov),e(ov,GL),e(hm,WL),e(hm,lv),e(lv,YL),e(Te,JL),$(wl,Te,null),e(A,KL),e(A,ia),$(fm,ia,null),e(ia,ZL),e(ia,iv),e(iv,XL),e(ia,QL),$(Dl,ia,null),e(A,eS),e(A,pa),$(um,pa,null),e(pa,tS),e(pa,gm),e(gm,sS),e(gm,pv),e(pv,aS),e(gm,nS),e(pa,rS),$(kl,pa,null),e(A,oS),e(A,Ne),$(_m,Ne,null),e(Ne,lS),e(Ne,On),e(On,iS),e(On,cv),e(cv,pS),e(On,cS),e(On,dv),e(dv,dS),e(On,mS),e(Ne,hS),e(Ne,mv),e(mv,fS),e(Ne,uS),e(Ne,Ht),e(Ht,gS),e(Ht,cg),e(cg,_S),e(Ht,bS),e(Ht,dg),e(dg,$S),e(Ht,xS),e(Ht,hv),e(hv,vS),e(Ht,yS),e(Ne,jS),$(El,Ne,null),e(A,wS),e(A,oe),$(bm,oe,null),e(oe,DS),e(oe,Cn),e(Cn,kS),e(Cn,mg),e(mg,ES),e(Cn,qS),e(Cn,fv),e(fv,IS),e(Cn,TS),e(oe,NS),e(oe,zn),e(zn,PS),e(zn,hg),e(hg,AS),e(zn,FS),e(zn,fg),e(fg,LS),e(zn,SS),e(oe,OS),e(oe,$m),e($m,CS),e($m,uv),e(uv,zS),e($m,VS),e(oe,US),$(ql,oe,null),e(oe,MS),$(Il,oe,null),e(A,RS),e(A,ca),$(xm,ca,null),e(ca,BS),e(ca,Gt),e(Gt,HS),e(Gt,gv),e(gv,GS),e(Gt,WS),e(Gt,ug),e(ug,YS),e(Gt,JS),e(Gt,_v),e(_v,KS),e(Gt,ZS),e(ca,XS),$(Tl,ca,null),e(A,QS),e(A,da),$(vm,da,null),e(da,eO),e(da,bv),e(bv,tO),e(da,sO),$(Nl,da,null),e(A,aO),e(A,ma),$(ym,ma,null),e(ma,nO),e(ma,$v),e($v,rO),e(ma,oO),$(Pl,ma,null),e(A,lO),e(A,ha),$(jm,ha,null),e(ha,iO),e(ha,xv),e(xv,pO),e(ha,cO),$(Al,ha,null),e(A,dO),e(A,fa),$(wm,fa,null),e(fa,mO),e(fa,vv),e(vv,hO),e(fa,fO),$(Fl,fa,null),e(A,uO),e(A,ua),$(Dm,ua,null),e(ua,gO),e(ua,Vn),e(Vn,_O),e(Vn,gg),e(gg,bO),e(Vn,$O),e(Vn,_g),e(_g,xO),e(Vn,vO),e(ua,yO),e(ua,Un),e(Un,jO),e(Un,yv),e(yv,wO),e(Un,DO),e(Un,jv),e(jv,kO),e(Un,EO),D(a,Nw,j),D(a,bg,j),D(a,Pw,j),D(a,Mn,j),e(Mn,Ll),e(Ll,wv),$(km,wv,null),e(Mn,qO),e(Mn,Dv),e(Dv,IO),D(a,Aw,j),D(a,Sl,j),e(Sl,TO),e(Sl,$g),e($g,NO),e(Sl,PO),D(a,Fw,j),D(a,L,j),$(Em,L,null),e(L,AO),e(L,kv),e(kv,FO),e(L,LO),e(L,ga),$(qm,ga,null),e(ga,SO),e(ga,Ev),e(Ev,OO),e(ga,CO),$(Ol,ga,null),e(L,zO),e(L,_a),$(Im,_a,null),e(_a,VO),e(_a,qv),e(qv,UO),e(_a,MO),$(Cl,_a,null),e(L,RO),e(L,ba),$(Tm,ba,null),e(ba,BO),e(ba,Iv),e(Iv,HO),e(ba,GO),$(zl,ba,null),e(L,WO),e(L,xg),$(Nm,xg,null),e(L,YO),e(L,Pe),$(Pm,Pe,null),e(Pe,JO),e(Pe,Tv),e(Tv,KO),e(Pe,ZO),e(Pe,Am),e(Am,XO),e(Am,Nv),e(Nv,QO),e(Am,eC),e(Pe,tC),e(Pe,Rn),e(Rn,Pv),e(Pv,sC),e(Rn,aC),e(Rn,Av),e(Av,nC),e(Rn,rC),e(Rn,ue),e(ue,oC),e(ue,Fv),e(Fv,lC),e(ue,iC),e(ue,Lv),e(Lv,pC),e(ue,cC),e(ue,Sv),e(Sv,dC),e(ue,mC),e(ue,Ov),e(Ov,hC),e(ue,fC),e(ue,Cv),e(Cv,uC),e(ue,gC),e(Pe,_C),$(Vl,Pe,null),e(L,bC),e(L,$a),$(Fm,$a,null),e($a,$C),e($a,zv),e(zv,xC),e($a,vC),$(Ul,$a,null),e(L,yC),e(L,xa),$(Lm,xa,null),e(xa,jC),e(xa,Vv),e(Vv,wC),e(xa,DC),$(Ml,xa,null),e(L,kC),e(L,le),$(Sm,le,null),e(le,EC),e(le,Uv),e(Uv,qC),e(le,IC),e(le,Mv),e(Mv,TC),e(le,NC),e(le,Om),e(Om,PC),e(Om,Rv),e(Rv,AC),e(Om,FC),e(le,LC),e(le,Bn),e(Bn,SC),e(Bn,vg),e(vg,OC),e(Bn,CC),e(Bn,yg),e(yg,zC),e(Bn,VC),e(le,UC),$(Rl,le,null),e(L,MC),e(L,va),$(Cm,va,null),e(va,RC),e(va,zm),e(zm,BC),e(zm,Bv),e(Bv,HC),e(zm,GC),e(va,WC),$(Bl,va,null),e(L,YC),e(L,ya),$(Vm,ya,null),e(ya,JC),e(ya,Um),e(Um,KC),e(Um,Hv),e(Hv,ZC),e(Um,XC),e(ya,QC),$(Hl,ya,null),e(L,ez),e(L,Gl),$(Mm,Gl,null),e(Gl,tz),e(Gl,jg),e(jg,wg),e(wg,sz),e(jg,az),e(L,nz),e(L,Wl),$(Rm,Wl,null),e(Wl,rz),e(Wl,Dg),e(Dg,kg),e(kg,oz),e(Dg,lz),e(L,iz),e(L,Eg),$(Bm,Eg,null),e(L,pz),e(L,qg),$(Hm,qg,null),e(L,cz),e(L,Ig),$(Gm,Ig,null),e(L,dz),e(L,Tg),$(Wm,Tg,null),e(L,mz),e(L,Ng),$(Ym,Ng,null),e(L,hz),e(L,Pg),$(Jm,Pg,null),e(L,fz),e(L,Ag),$(Km,Ag,null),e(L,uz),e(L,Fg),$(Zm,Fg,null),e(L,gz),e(L,Lg),$(Xm,Lg,null),e(L,_z),e(L,Sg),$(Qm,Sg,null),e(L,bz),e(L,Og),$(eh,Og,null),e(L,$z),e(L,Cg),$(th,Cg,null),e(L,xz),e(L,zg),$(sh,zg,null),D(a,Lw,j),D(a,Hn,j),e(Hn,Yl),e(Yl,Gv),$(ah,Gv,null),e(Hn,vz),e(Hn,Wv),e(Wv,yz),D(a,Sw,j),D(a,Jl,j),e(Jl,jz),e(Jl,Yv),e(Yv,wz),e(Jl,Dz),D(a,Ow,j),D(a,U,j),$(nh,U,null),e(U,kz),e(U,Ae),$(rh,Ae,null),e(Ae,Ez),e(Ae,Jv),e(Jv,qz),e(Ae,Iz),e(Ae,oh),e(oh,Tz),e(oh,Kv),e(Kv,Nz),e(oh,Pz),e(Ae,Az),e(Ae,Gn),e(Gn,Zv),e(Zv,Fz),e(Gn,Lz),e(Gn,Xv),e(Xv,Sz),e(Gn,Oz),e(Gn,ge),e(ge,Cz),e(ge,Qv),e(Qv,zz),e(ge,Vz),e(ge,ey),e(ey,Uz),e(ge,Mz),e(ge,ty),e(ty,Rz),e(ge,Bz),e(ge,sy),e(sy,Hz),e(ge,Gz),e(ge,ay),e(ay,Wz),e(ge,Yz),e(Ae,Jz),$(Kl,Ae,null),e(U,Kz),e(U,ja),$(lh,ja,null),e(ja,Zz),e(ja,ny),e(ny,Xz),e(ja,Qz),$(Zl,ja,null),e(U,eV),e(U,ie),$(ih,ie,null),e(ie,tV),e(ie,ry),e(ry,sV),e(ie,aV),e(ie,oy),e(oy,nV),e(ie,rV),e(ie,ph),e(ph,oV),e(ph,ly),e(ly,lV),e(ph,iV),e(ie,pV),e(ie,Wn),e(Wn,cV),e(Wn,Vg),e(Vg,dV),e(Wn,mV),e(Wn,Ug),e(Ug,hV),e(Wn,fV),e(ie,uV),$(Xl,ie,null),e(U,gV),e(U,wa),$(ch,wa,null),e(wa,_V),e(wa,iy),e(iy,bV),e(wa,$V),$(Ql,wa,null),e(U,xV),e(U,Da),$(dh,Da,null),e(Da,vV),e(Da,py),e(py,yV),e(Da,jV),$(ei,Da,null),e(U,wV),e(U,ka),$(mh,ka,null),e(ka,DV),e(ka,cy),e(cy,kV),e(ka,EV),$(ti,ka,null),e(U,qV),e(U,Ea),$(hh,Ea,null),e(Ea,IV),e(Ea,dy),e(dy,TV),e(Ea,NV),$(si,Ea,null),e(U,PV),e(U,qa),$(fh,qa,null),e(qa,AV),e(qa,my),e(my,FV),e(qa,LV),$(ai,qa,null),e(U,SV),e(U,Ia),$(uh,Ia,null),e(Ia,OV),e(Ia,hy),e(hy,CV),e(Ia,zV),$(ni,Ia,null),D(a,Cw,j),D(a,Yn,j),e(Yn,ri),e(ri,fy),$(gh,fy,null),e(Yn,VV),e(Yn,uy),e(uy,UV),D(a,zw,j),D(a,O,j),$(_h,O,null),e(O,MV),e(O,gy),e(gy,RV),e(O,BV),e(O,bh),e(bh,HV),e(bh,_y),e(_y,GV),e(bh,WV),e(O,YV),e(O,Mg),e(Mg,by),e(by,JV),e(Mg,KV),e(O,ZV),e(O,J),e(J,$y),e($y,Ta),e(Ta,XV),e(Ta,Rg),e(Rg,QV),e(Ta,eU),e(Ta,xy),e(xy,tU),e(Ta,sU),e(Ta,vy),e(vy,aU),e(J,nU),e(J,yy),e(yy,$h),e($h,rU),e($h,Bg),e(Bg,oU),e($h,lU),e(J,iU),e(J,jy),e(jy,xh),e(xh,pU),e(xh,wy),e(wy,cU),e(xh,dU),e(J,mU),e(J,vh),e(vh,He),e(He,hU),e(He,Dy),e(Dy,fU),e(He,uU),e(He,Hg),e(Hg,gU),e(He,_U),e(He,ky),e(ky,bU),e(He,$U),e(He,Gg),e(Gg,xU),e(He,vU),e(vh,yU),$(oi,vh,null),e(J,jU),e(J,Ey),e(Ey,Ge),e(Ge,wU),e(Ge,Wg),e(Wg,DU),e(Ge,kU),e(Ge,Yg),e(Yg,EU),e(Ge,qU),e(Ge,Jg),e(Jg,IU),e(Ge,TU),e(Ge,Kg),e(Kg,NU),e(Ge,PU),e(J,AU),e(J,qy),e(qy,yh),e(yh,FU),e(yh,Zg),e(Zg,LU),e(yh,SU),e(J,OU),e(J,Iy),e(Iy,Wt),e(Wt,CU),e(Wt,Xg),e(Xg,zU),e(Wt,VU),e(Wt,Ty),e(Ty,UU),e(Wt,MU),e(Wt,Ny),e(Ny,RU),e(Wt,BU),e(J,HU),e(J,Py),e(Py,li),e(li,Qg),e(Qg,GU),e(li,WU),e(li,e_),e(e_,YU),e(li,JU),e(O,KU),e(O,Na),$(jh,Na,null),e(Na,ZU),e(Na,Ay),e(Ay,XU),e(Na,QU),$(ii,Na,null),e(O,eM),e(O,pi),$(wh,pi,null),e(pi,tM),e(pi,Fy),e(Fy,sM),e(O,aM),e(O,ci),$(Dh,ci,null),e(ci,nM),e(ci,Ly),e(Ly,rM),e(O,oM),e(O,di),$(kh,di,null),e(di,lM),e(di,Sy),e(Sy,iM),e(O,pM),e(O,mi),$(Eh,mi,null),e(mi,cM),e(mi,Oy),e(Oy,dM),e(O,mM),e(O,hi),$(qh,hi,null),e(hi,hM),e(hi,Cy),e(Cy,fM),e(O,uM),e(O,_t),$(Ih,_t,null),e(_t,gM),e(_t,zy),e(zy,_M),e(_t,bM),e(_t,Vy),e(Vy,$M),e(_t,xM),$(fi,_t,null),e(O,vM),e(O,ui),$(Th,ui,null),e(ui,yM),e(ui,Uy),e(Uy,jM),e(O,wM),e(O,Fe),$(Nh,Fe,null),e(Fe,DM),e(Fe,My),e(My,kM),e(Fe,EM),e(Fe,Ry),e(Ry,qM),e(Fe,IM),e(Fe,Yt),e(Yt,TM),e(Yt,t_),e(t_,NM),e(Yt,PM),e(Yt,s_),e(s_,AM),e(Yt,FM),e(Yt,a_),e(a_,LM),e(Yt,SM),e(Fe,OM),$(gi,Fe,null),e(O,CM),e(O,bt),$(Ph,bt,null),e(bt,zM),e(bt,By),e(By,VM),e(bt,UM),e(bt,Hy),e(Hy,MM),e(bt,RM),$(_i,bt,null),D(a,Vw,j),D(a,Jt,j),$(Ah,Jt,null),e(Jt,BM),e(Jt,Gy),e(Gy,HM),e(Jt,GM),$(bi,Jt,null),D(a,Uw,j),D(a,B,j),$(Fh,B,null),e(B,WM),e(B,Wy),e(Wy,YM),e(B,JM),e(B,Lh),e(Lh,KM),e(Lh,Yy),e(Yy,ZM),e(Lh,XM),e(B,QM),e(B,Jn),e(Jn,n_),e(n_,Jy),e(Jy,eR),e(n_,tR),e(Jn,sR),e(Jn,r_),e(r_,Ky),e(Ky,aR),e(r_,nR),e(Jn,rR),e(Jn,o_),e(o_,Zy),e(Zy,oR),e(o_,lR),e(B,iR),e(B,Xy),e(Xy,pR),e(B,cR),$($i,B,null),e(B,dR),e(B,Pa),$(Sh,Pa,null),e(Pa,mR),e(Pa,Qy),e(Qy,hR),e(Pa,fR),e(Pa,Oh),e(Oh,ej),e(ej,uR),e(Oh,gR),e(Oh,tj),e(tj,_R),e(B,bR),e(B,$t),$(Ch,$t,null),e($t,$R),e($t,sj),e(sj,xR),e($t,vR),e($t,aj),e(aj,yR),e($t,jR),$(xi,$t,null),e(B,wR),e(B,Aa),$(zh,Aa,null),e(Aa,DR),e(Aa,nj),e(nj,kR),e(Aa,ER),$(vi,Aa,null),D(a,Mw,j),D(a,We,j),$(Vh,We,null),e(We,qR),e(We,rj),e(rj,IR),e(We,TR),e(We,oj),e(oj,NR),e(We,PR),$(yi,We,null),D(a,Rw,j),D(a,te,j),$(Uh,te,null),e(te,AR),e(te,l_),e(l_,lj),e(lj,FR),e(l_,LR),e(te,SR),e(te,ij),e(ij,OR),e(te,CR),e(te,Mh),e(Mh,zR),e(Mh,pj),e(pj,VR),e(Mh,UR),e(te,MR),$(ji,te,null),e(te,RR),e(te,wi),$(Rh,wi,null),e(wi,BR),e(wi,cj),e(cj,HR),D(a,Bw,j),D(a,se,j),$(Bh,se,null),e(se,GR),e(se,i_),e(i_,dj),e(dj,WR),e(i_,YR),e(se,JR),e(se,mj),e(mj,KR),e(se,ZR),e(se,hj),e(hj,XR),e(se,QR),$(Di,se,null),e(se,eB),e(se,ki),$(Hh,ki,null),e(ki,tB),e(ki,fj),e(fj,sB),D(a,Hw,j),D(a,Kt,j),$(Gh,Kt,null),e(Kt,aB),e(Kt,uj),e(uj,nB),e(Kt,rB),$(Ei,Kt,null),D(a,Gw,j),D(a,Zt,j),$(Wh,Zt,null),e(Zt,oB),e(Zt,gj),e(gj,lB),e(Zt,iB),$(qi,Zt,null),D(a,Ww,j),D(a,Xt,j),$(Yh,Xt,null),e(Xt,pB),e(Xt,_j),e(_j,cB),e(Xt,dB),$(Ii,Xt,null),D(a,Yw,j),D(a,Qt,j),$(Jh,Qt,null),e(Qt,mB),e(Qt,bj),e(bj,hB),e(Qt,fB),$(Ti,Qt,null),D(a,Jw,j),D(a,M,j),$(Kh,M,null),e(M,uB),e(M,$j),e($j,gB),e(M,_B),e(M,xj),e(xj,bB),e(M,$B),e(M,Kn),e(Kn,vj),e(vj,Zh),e(Zh,xB),e(Zh,yj),e(yj,vB),e(Zh,yB),e(Kn,jB),e(Kn,Zn),e(Zn,Xh),e(Xh,wB),e(Xh,jj),e(jj,DB),e(Xh,kB),e(Zn,EB),e(Zn,Qh),e(Qh,wj),e(wj,qB),e(Qh,IB),e(Qh,Dj),e(Dj,TB),e(Zn,NB),e(Zn,kj),e(kj,PB),e(Kn,AB),e(Kn,Xn),e(Xn,ef),e(ef,FB),e(ef,Ej),e(Ej,LB),e(ef,SB),e(Xn,OB),e(Xn,Qn),e(Qn,qj),e(qj,CB),e(Qn,zB),e(Qn,Ij),e(Ij,VB),e(Qn,UB),e(Qn,Tj),e(Tj,MB),e(Xn,RB),e(Xn,Nj),e(Nj,BB),e(M,HB),$(Ni,M,null),e(M,GB),e(M,Fa),$(tf,Fa,null),e(Fa,WB),e(Fa,Pj),e(Pj,YB),e(Fa,JB),e(Fa,es),e(es,Aj),e(Aj,KB),e(es,ZB),e(es,Fj),e(Fj,XB),e(es,QB),e(es,Lj),e(Lj,eH),e(es,tH),e(es,Sj),e(Sj,sH),e(M,aH),e(M,Pi),$(sf,Pi,null),e(Pi,nH),e(Pi,Oj),e(Oj,rH),e(M,oH),e(M,Ai),$(af,Ai,null),e(Ai,lH),e(Ai,Cj),e(Cj,iH),e(M,pH),e(M,Fi),$(nf,Fi,null),e(Fi,cH),e(Fi,zj),e(zj,dH),e(M,mH),e(M,Li),$(rf,Li,null),e(Li,hH),e(Li,Vj),e(Vj,fH),D(a,Kw,j),D(a,R,j),$(of,R,null),e(R,uH),e(R,Uj),e(Uj,gH),e(R,_H),e(R,Mj),e(Mj,bH),e(R,$H),e(R,ts),e(ts,Rj),e(Rj,lf),e(lf,xH),e(lf,Bj),e(Bj,vH),e(lf,yH),e(ts,jH),e(ts,er),e(er,pf),e(pf,wH),e(pf,Hj),e(Hj,DH),e(pf,kH),e(er,EH),e(er,cf),e(cf,Gj),e(Gj,qH),e(cf,IH),e(cf,Wj),e(Wj,TH),e(er,NH),e(er,Yj),e(Yj,PH),e(ts,AH),e(ts,Jj),e(Jj,df),e(df,FH),e(df,Kj),e(Kj,LH),e(df,SH),e(ts,OH),e(ts,Zj),e(Zj,mf),e(mf,CH),e(mf,Xj),e(Xj,zH),e(mf,VH),e(R,UH),$(Si,R,null),e(R,MH),e(R,La),$(hf,La,null),e(La,RH),e(La,Qj),e(Qj,BH),e(La,HH),e(La,Ye),e(Ye,e7),e(e7,GH),e(Ye,WH),e(Ye,t7),e(t7,YH),e(Ye,JH),e(Ye,s7),e(s7,KH),e(Ye,ZH),e(Ye,a7),e(a7,XH),e(Ye,QH),e(Ye,n7),e(n7,eG),e(R,tG),e(R,Oi),$(ff,Oi,null),e(Oi,sG),e(Oi,r7),e(r7,aG),e(R,nG),e(R,Ci),$(uf,Ci,null),e(Ci,rG),e(Ci,o7),e(o7,oG),e(R,lG),e(R,zi),$(gf,zi,null),e(zi,iG),e(zi,l7),e(l7,pG),e(R,cG),e(R,Vi),$(_f,Vi,null),e(Vi,dG),e(Vi,i7),e(i7,mG),D(a,Zw,j),D(a,tr,j),e(tr,Ui),e(Ui,p7),$(bf,p7,null),e(tr,hG),e(tr,c7),e(c7,fG),D(a,Xw,j),D(a,ae,j),$($f,ae,null),e(ae,uG),e(ae,d7),e(d7,gG),e(ae,_G),e(ae,p_),e(p_,m7),e(m7,bG),e(p_,$G),e(ae,xG),e(ae,h7),e(h7,vG),e(ae,yG),e(ae,Sa),$(xf,Sa,null),e(Sa,jG),e(Sa,vf),e(vf,wG),e(vf,f7),e(f7,DG),e(vf,kG),e(Sa,EG),$(Mi,Sa,null),e(ae,qG),e(ae,Oa),$(yf,Oa,null),e(Oa,IG),e(Oa,ss),e(ss,TG),e(ss,u7),e(u7,NG),e(ss,PG),e(ss,g7),e(g7,AG),e(ss,FG),e(ss,_7),e(_7,LG),e(ss,SG),e(Oa,OG),$(Ri,Oa,null),D(a,Qw,j),D(a,sr,j),e(sr,Bi),e(Bi,b7),$(jf,b7,null),e(sr,CG),e(sr,$7),e($7,zG),D(a,e4,j),D(a,Ca,j),e(Ca,VG),e(Ca,x7),e(x7,UG),e(Ca,MG),e(Ca,c_),e(c_,RG),e(Ca,BG),D(a,t4,j),D(a,K,j),$(wf,K,null),e(K,HG),e(K,v7),e(v7,GG),e(K,WG),$(Hi,K,null),e(K,YG),e(K,za),$(Df,za,null),e(za,JG),e(za,y7),e(y7,KG),e(za,ZG),$(Gi,za,null),e(K,XG),e(K,Va),$(kf,Va,null),e(Va,QG),e(Va,j7),e(j7,eW),e(Va,tW),$(Wi,Va,null),e(K,sW),e(K,xt),$(Ef,xt,null),e(xt,aW),e(xt,w7),e(w7,nW),e(xt,rW),e(xt,D7),e(D7,oW),e(xt,lW),$(Yi,xt,null),e(K,iW),e(K,Ji),$(qf,Ji,null),e(Ji,pW),e(Ji,k7),e(k7,cW),D(a,s4,j),D(a,ar,j),e(ar,Ki),e(Ki,E7),$(If,E7,null),e(ar,dW),e(ar,q7),e(q7,mW),D(a,a4,j),D(a,C,j),$(Tf,C,null),e(C,hW),e(C,Zi),e(Zi,I7),e(I7,fW),e(Zi,uW),e(Zi,Nf),e(Nf,T7),e(T7,gW),e(Zi,_W),e(C,bW),e(C,as),e(as,$W),e(as,N7),e(N7,xW),e(as,vW),e(as,P7),e(P7,yW),e(as,jW),e(as,A7),e(A7,wW),e(as,DW),e(C,kW),e(C,F7),e(F7,EW),e(C,qW),e(C,L7),e(L7,IW),e(C,TW),$(Xi,C,null),e(C,NW),e(C,nr),e(nr,PW),e(nr,S7),e(S7,AW),e(nr,FW),e(nr,O7),e(O7,LW),e(nr,SW),e(C,OW),$(Qi,C,null),e(C,CW),e(C,ns),e(ns,zW),e(ns,C7),e(C7,VW),e(ns,UW),e(ns,z7),e(z7,MW),e(ns,RW),e(ns,V7),e(V7,BW),e(ns,HW),e(C,GW),$(ep,C,null),e(C,WW),e(C,rr),e(rr,YW),e(rr,U7),e(U7,JW),e(rr,KW),e(rr,d_),e(d_,ZW),e(rr,XW),e(C,QW),$(tp,C,null),e(C,eY),e(C,or),e(or,tY),e(or,M7),e(M7,sY),e(or,aY),e(or,m_),e(m_,nY),e(or,rY),e(C,oY),$(sp,C,null),D(a,n4,j),D(a,lr,j),$(Pf,lr,null),e(lr,lY),e(lr,ir),e(ir,iY),e(ir,R7),e(R7,pY),e(ir,cY),e(ir,B7),e(B7,dY),e(ir,mY),D(a,r4,j),D(a,pr,j),$(Af,pr,null),e(pr,hY),e(pr,H7),e(H7,fY),D(a,o4,j),D(a,cr,j),e(cr,ap),e(ap,G7),$(Ff,G7,null),e(cr,uY),e(cr,W7),e(W7,gY),D(a,l4,j),D(a,dr,j),$(Lf,dr,null),e(dr,_Y),e(dr,Y7),e(Y7,bY),i4=!0},p(a,[j]){const Sf={};j&2&&(Sf.$$scope={dirty:j,ctx:a}),Fr.$set(Sf);const J7={};j&2&&(J7.$$scope={dirty:j,ctx:a}),Lr.$set(J7);const K7={};j&2&&(K7.$$scope={dirty:j,ctx:a}),Cr.$set(K7);const Z7={};j&2&&(Z7.$$scope={dirty:j,ctx:a}),zr.$set(Z7);const Of={};j&2&&(Of.$$scope={dirty:j,ctx:a}),Mr.$set(Of);const X7={};j&2&&(X7.$$scope={dirty:j,ctx:a}),Br.$set(X7);const Q7={};j&2&&(Q7.$$scope={dirty:j,ctx:a}),Hr.$set(Q7);const e0={};j&2&&(e0.$$scope={dirty:j,ctx:a}),Gr.$set(e0);const _e={};j&2&&(_e.$$scope={dirty:j,ctx:a}),Yr.$set(_e);const t0={};j&2&&(t0.$$scope={dirty:j,ctx:a}),Jr.$set(t0);const h_={};j&2&&(h_.$$scope={dirty:j,ctx:a}),Kr.$set(h_);const s0={};j&2&&(s0.$$scope={dirty:j,ctx:a}),Zr.$set(s0);const a0={};j&2&&(a0.$$scope={dirty:j,ctx:a}),Xr.$set(a0);const Je={};j&2&&(Je.$$scope={dirty:j,ctx:a}),Qr.$set(Je);const Cf={};j&2&&(Cf.$$scope={dirty:j,ctx:a}),eo.$set(Cf);const n0={};j&2&&(n0.$$scope={dirty:j,ctx:a}),to.$set(n0);const r0={};j&2&&(r0.$$scope={dirty:j,ctx:a}),so.$set(r0);const o0={};j&2&&(o0.$$scope={dirty:j,ctx:a}),ao.$set(o0);const mr={};j&2&&(mr.$$scope={dirty:j,ctx:a}),no.$set(mr);const hr={};j&2&&(hr.$$scope={dirty:j,ctx:a}),ro.$set(hr);const l0={};j&2&&(l0.$$scope={dirty:j,ctx:a}),lo.$set(l0);const i0={};j&2&&(i0.$$scope={dirty:j,ctx:a}),io.$set(i0);const zf={};j&2&&(zf.$$scope={dirty:j,ctx:a}),po.$set(zf);const p0={};j&2&&(p0.$$scope={dirty:j,ctx:a}),co.$set(p0);const c0={};j&2&&(c0.$$scope={dirty:j,ctx:a}),mo.$set(c0);const d0={};j&2&&(d0.$$scope={dirty:j,ctx:a}),fo.$set(d0);const Vf={};j&2&&(Vf.$$scope={dirty:j,ctx:a}),uo.$set(Vf);const m0={};j&2&&(m0.$$scope={dirty:j,ctx:a}),go.$set(m0);const I={};j&2&&(I.$$scope={dirty:j,ctx:a}),_o.$set(I);const h0={};j&2&&(h0.$$scope={dirty:j,ctx:a}),bo.$set(h0);const rs={};j&2&&(rs.$$scope={dirty:j,ctx:a}),$o.$set(rs);const f0={};j&2&&(f0.$$scope={dirty:j,ctx:a}),xo.$set(f0);const u0={};j&2&&(u0.$$scope={dirty:j,ctx:a}),vo.$set(u0);const g0={};j&2&&(g0.$$scope={dirty:j,ctx:a}),yo.$set(g0);const os={};j&2&&(os.$$scope={dirty:j,ctx:a}),jo.$set(os);const _0={};j&2&&(_0.$$scope={dirty:j,ctx:a}),wo.$set(_0);const b0={};j&2&&(b0.$$scope={dirty:j,ctx:a}),Do.$set(b0);const $0={};j&2&&($0.$$scope={dirty:j,ctx:a}),ko.$set($0);const Uf={};j&2&&(Uf.$$scope={dirty:j,ctx:a}),Eo.$set(Uf);const x0={};j&2&&(x0.$$scope={dirty:j,ctx:a}),Io.$set(x0);const Mf={};j&2&&(Mf.$$scope={dirty:j,ctx:a}),To.$set(Mf);const v0={};j&2&&(v0.$$scope={dirty:j,ctx:a}),No.$set(v0);const Ke={};j&2&&(Ke.$$scope={dirty:j,ctx:a}),Po.$set(Ke);const ls={};j&2&&(ls.$$scope={dirty:j,ctx:a}),Ao.$set(ls);const y0={};j&2&&(y0.$$scope={dirty:j,ctx:a}),Fo.$set(y0);const j0={};j&2&&(j0.$$scope={dirty:j,ctx:a}),So.$set(j0);const w0={};j&2&&(w0.$$scope={dirty:j,ctx:a}),Oo.$set(w0);const Rf={};j&2&&(Rf.$$scope={dirty:j,ctx:a}),Wo.$set(Rf);const D0={};j&2&&(D0.$$scope={dirty:j,ctx:a}),Yo.$set(D0);const Bf={};j&2&&(Bf.$$scope={dirty:j,ctx:a}),Jo.$set(Bf);const k0={};j&2&&(k0.$$scope={dirty:j,ctx:a}),Ko.$set(k0);const Hf={};j&2&&(Hf.$$scope={dirty:j,ctx:a}),Zo.$set(Hf);const is={};j&2&&(is.$$scope={dirty:j,ctx:a}),Xo.$set(is);const E0={};j&2&&(E0.$$scope={dirty:j,ctx:a}),Qo.$set(E0);const q0={};j&2&&(q0.$$scope={dirty:j,ctx:a}),sl.$set(q0);const I0={};j&2&&(I0.$$scope={dirty:j,ctx:a}),al.$set(I0);const fr={};j&2&&(fr.$$scope={dirty:j,ctx:a}),nl.$set(fr);const T0={};j&2&&(T0.$$scope={dirty:j,ctx:a}),ol.$set(T0);const ur={};j&2&&(ur.$$scope={dirty:j,ctx:a}),ll.$set(ur);const N0={};j&2&&(N0.$$scope={dirty:j,ctx:a}),il.$set(N0);const gr={};j&2&&(gr.$$scope={dirty:j,ctx:a}),pl.$set(gr);const P0={};j&2&&(P0.$$scope={dirty:j,ctx:a}),cl.$set(P0);const _r={};j&2&&(_r.$$scope={dirty:j,ctx:a}),dl.$set(_r);const Gf={};j&2&&(Gf.$$scope={dirty:j,ctx:a}),ml.$set(Gf);const Wf={};j&2&&(Wf.$$scope={dirty:j,ctx:a}),hl.$set(Wf);const A0={};j&2&&(A0.$$scope={dirty:j,ctx:a}),fl.$set(A0);const br={};j&2&&(br.$$scope={dirty:j,ctx:a}),ul.$set(br);const F0={};j&2&&(F0.$$scope={dirty:j,ctx:a}),gl.$set(F0);const $r={};j&2&&($r.$$scope={dirty:j,ctx:a}),bl.$set($r);const L0={};j&2&&(L0.$$scope={dirty:j,ctx:a}),$l.$set(L0);const ps={};j&2&&(ps.$$scope={dirty:j,ctx:a}),xl.$set(ps);const S0={};j&2&&(S0.$$scope={dirty:j,ctx:a}),vl.$set(S0);const O0={};j&2&&(O0.$$scope={dirty:j,ctx:a}),yl.$set(O0);const xr={};j&2&&(xr.$$scope={dirty:j,ctx:a}),jl.$set(xr);const C0={};j&2&&(C0.$$scope={dirty:j,ctx:a}),wl.$set(C0);const vr={};j&2&&(vr.$$scope={dirty:j,ctx:a}),Dl.$set(vr);const z0={};j&2&&(z0.$$scope={dirty:j,ctx:a}),kl.$set(z0);const yr={};j&2&&(yr.$$scope={dirty:j,ctx:a}),El.$set(yr);const V0={};j&2&&(V0.$$scope={dirty:j,ctx:a}),ql.$set(V0);const cs={};j&2&&(cs.$$scope={dirty:j,ctx:a}),Il.$set(cs);const U0={};j&2&&(U0.$$scope={dirty:j,ctx:a}),Tl.$set(U0);const jr={};j&2&&(jr.$$scope={dirty:j,ctx:a}),Nl.$set(jr);const M0={};j&2&&(M0.$$scope={dirty:j,ctx:a}),Pl.$set(M0);const R0={};j&2&&(R0.$$scope={dirty:j,ctx:a}),Al.$set(R0);const wr={};j&2&&(wr.$$scope={dirty:j,ctx:a}),Fl.$set(wr);const B0={};j&2&&(B0.$$scope={dirty:j,ctx:a}),Ol.$set(B0);const Dr={};j&2&&(Dr.$$scope={dirty:j,ctx:a}),Cl.$set(Dr);const H0={};j&2&&(H0.$$scope={dirty:j,ctx:a}),zl.$set(H0);const kr={};j&2&&(kr.$$scope={dirty:j,ctx:a}),Vl.$set(kr);const Yf={};j&2&&(Yf.$$scope={dirty:j,ctx:a}),Ul.$set(Yf);const G0={};j&2&&(G0.$$scope={dirty:j,ctx:a}),Ml.$set(G0);const Er={};j&2&&(Er.$$scope={dirty:j,ctx:a}),Rl.$set(Er);const W0={};j&2&&(W0.$$scope={dirty:j,ctx:a}),Bl.$set(W0);const qr={};j&2&&(qr.$$scope={dirty:j,ctx:a}),Hl.$set(qr);const Y0={};j&2&&(Y0.$$scope={dirty:j,ctx:a}),Kl.$set(Y0);const Jf={};j&2&&(Jf.$$scope={dirty:j,ctx:a}),Zl.$set(Jf);const J0={};j&2&&(J0.$$scope={dirty:j,ctx:a}),Xl.$set(J0);const Kf={};j&2&&(Kf.$$scope={dirty:j,ctx:a}),Ql.$set(Kf);const Ir={};j&2&&(Ir.$$scope={dirty:j,ctx:a}),ei.$set(Ir);const K0={};j&2&&(K0.$$scope={dirty:j,ctx:a}),ti.$set(K0);const Z0={};j&2&&(Z0.$$scope={dirty:j,ctx:a}),si.$set(Z0);const Ze={};j&2&&(Ze.$$scope={dirty:j,ctx:a}),ai.$set(Ze);const Xe={};j&2&&(Xe.$$scope={dirty:j,ctx:a}),ni.$set(Xe);const X0={};j&2&&(X0.$$scope={dirty:j,ctx:a}),oi.$set(X0);const Q0={};j&2&&(Q0.$$scope={dirty:j,ctx:a}),ii.$set(Q0);const ew={};j&2&&(ew.$$scope={dirty:j,ctx:a}),fi.$set(ew);const tw={};j&2&&(tw.$$scope={dirty:j,ctx:a}),gi.$set(tw);const Qe={};j&2&&(Qe.$$scope={dirty:j,ctx:a}),_i.$set(Qe);const sw={};j&2&&(sw.$$scope={dirty:j,ctx:a}),bi.$set(sw);const aw={};j&2&&(aw.$$scope={dirty:j,ctx:a}),$i.$set(aw);const nw={};j&2&&(nw.$$scope={dirty:j,ctx:a}),xi.$set(nw);const rw={};j&2&&(rw.$$scope={dirty:j,ctx:a}),vi.$set(rw);const ow={};j&2&&(ow.$$scope={dirty:j,ctx:a}),yi.$set(ow);const Tr={};j&2&&(Tr.$$scope={dirty:j,ctx:a}),ji.$set(Tr);const vt={};j&2&&(vt.$$scope={dirty:j,ctx:a}),Di.$set(vt);const lw={};j&2&&(lw.$$scope={dirty:j,ctx:a}),Ei.$set(lw);const iw={};j&2&&(iw.$$scope={dirty:j,ctx:a}),qi.$set(iw);const pw={};j&2&&(pw.$$scope={dirty:j,ctx:a}),Ii.$set(pw);const cw={};j&2&&(cw.$$scope={dirty:j,ctx:a}),Ti.$set(cw);const ds={};j&2&&(ds.$$scope={dirty:j,ctx:a}),Ni.$set(ds);const Zf={};j&2&&(Zf.$$scope={dirty:j,ctx:a}),Si.$set(Zf);const dw={};j&2&&(dw.$$scope={dirty:j,ctx:a}),Mi.$set(dw);const f_={};j&2&&(f_.$$scope={dirty:j,ctx:a}),Ri.$set(f_);const mw={};j&2&&(mw.$$scope={dirty:j,ctx:a}),Hi.$set(mw);const et={};j&2&&(et.$$scope={dirty:j,ctx:a}),Gi.$set(et);const ms={};j&2&&(ms.$$scope={dirty:j,ctx:a}),Wi.$set(ms);const hw={};j&2&&(hw.$$scope={dirty:j,ctx:a}),Yi.$set(hw);const fw={};j&2&&(fw.$$scope={dirty:j,ctx:a}),Xi.$set(fw);const uw={};j&2&&(uw.$$scope={dirty:j,ctx:a}),Qi.$set(uw);const Xf={};j&2&&(Xf.$$scope={dirty:j,ctx:a}),ep.$set(Xf);const gw={};j&2&&(gw.$$scope={dirty:j,ctx:a}),tp.$set(gw);const Nr={};j&2&&(Nr.$$scope={dirty:j,ctx:a}),sp.$set(Nr)},i(a){i4||(x(t.$$.fragment,a),x(us.$$.fragment,a),x(Sp.$$.fragment,a),x(Op.$$.fragment,a),x(Fr.$$.fragment,a),x(zp.$$.fragment,a),x(Lr.$$.fragment,a),x(Vp.$$.fragment,a),x(Up.$$.fragment,a),x(Mp.$$.fragment,a),x(Cr.$$.fragment,a),x(Rp.$$.fragment,a),x(zr.$$.fragment,a),x(Bp.$$.fragment,a),x(Hp.$$.fragment,a),x(Gp.$$.fragment,a),x(Mr.$$.fragment,a),x(Jp.$$.fragment,a),x(Kp.$$.fragment,a),x(Br.$$.fragment,a),x(Zp.$$.fragment,a),x(Hr.$$.fragment,a),x(Xp.$$.fragment,a),x(Gr.$$.fragment,a),x(Qp.$$.fragment,a),x(Yr.$$.fragment,a),x(tc.$$.fragment,a),x(Jr.$$.fragment,a),x(sc.$$.fragment,a),x(Kr.$$.fragment,a),x(ac.$$.fragment,a),x(Zr.$$.fragment,a),x(nc.$$.fragment,a),x(Xr.$$.fragment,a),x(rc.$$.fragment,a),x(Qr.$$.fragment,a),x(oc.$$.fragment,a),x(eo.$$.fragment,a),x(lc.$$.fragment,a),x(to.$$.fragment,a),x(ic.$$.fragment,a),x(so.$$.fragment,a),x(pc.$$.fragment,a),x(ao.$$.fragment,a),x(cc.$$.fragment,a),x(no.$$.fragment,a),x(mc.$$.fragment,a),x(ro.$$.fragment,a),x(hc.$$.fragment,a),x(uc.$$.fragment,a),x(gc.$$.fragment,a),x(lo.$$.fragment,a),x(_c.$$.fragment,a),x(io.$$.fragment,a),x(bc.$$.fragment,a),x(po.$$.fragment,a),x(xc.$$.fragment,a),x(co.$$.fragment,a),x(yc.$$.fragment,a),x(mo.$$.fragment,a),x(jc.$$.fragment,a),x(wc.$$.fragment,a),x(fo.$$.fragment,a),x(Dc.$$.fragment,a),x(uo.$$.fragment,a),x(Ec.$$.fragment,a),x(go.$$.fragment,a),x(qc.$$.fragment,a),x(_o.$$.fragment,a),x(Ic.$$.fragment,a),x(bo.$$.fragment,a),x(Tc.$$.fragment,a),x($o.$$.fragment,a),x(Nc.$$.fragment,a),x(xo.$$.fragment,a),x(Ac.$$.fragment,a),x(vo.$$.fragment,a),x(Lc.$$.fragment,a),x(yo.$$.fragment,a),x(Sc.$$.fragment,a),x(jo.$$.fragment,a),x(Oc.$$.fragment,a),x(wo.$$.fragment,a),x(Do.$$.fragment,a),x(ko.$$.fragment,a),x(zc.$$.fragment,a),x(Eo.$$.fragment,a),x(Vc.$$.fragment,a),x(Uc.$$.fragment,a),x(Io.$$.fragment,a),x(Mc.$$.fragment,a),x(To.$$.fragment,a),x(Bc.$$.fragment,a),x(No.$$.fragment,a),x(Hc.$$.fragment,a),x(Po.$$.fragment,a),x(Gc.$$.fragment,a),x(Ao.$$.fragment,a),x(Wc.$$.fragment,a),x(Fo.$$.fragment,a),x(Jc.$$.fragment,a),x(Zc.$$.fragment,a),x(Xc.$$.fragment,a),x(ed.$$.fragment,a),x(So.$$.fragment,a),x(td.$$.fragment,a),x(Oo.$$.fragment,a),x(sd.$$.fragment,a),x(ad.$$.fragment,a),x(nd.$$.fragment,a),x(rd.$$.fragment,a),x(od.$$.fragment,a),x(ld.$$.fragment,a),x(id.$$.fragment,a),x(pd.$$.fragment,a),x(cd.$$.fragment,a),x(dd.$$.fragment,a),x(md.$$.fragment,a),x(hd.$$.fragment,a),x(fd.$$.fragment,a),x(ud.$$.fragment,a),x(gd.$$.fragment,a),x(_d.$$.fragment,a),x(bd.$$.fragment,a),x($d.$$.fragment,a),x(xd.$$.fragment,a),x(vd.$$.fragment,a),x(yd.$$.fragment,a),x(jd.$$.fragment,a),x(wd.$$.fragment,a),x(Wo.$$.fragment,a),x(Dd.$$.fragment,a),x(Yo.$$.fragment,a),x(kd.$$.fragment,a),x(Jo.$$.fragment,a),x(Ed.$$.fragment,a),x(Ko.$$.fragment,a),x(qd.$$.fragment,a),x(Id.$$.fragment,a),x(Zo.$$.fragment,a),x(Nd.$$.fragment,a),x(Xo.$$.fragment,a),x(Pd.$$.fragment,a),x(Qo.$$.fragment,a),x(Ad.$$.fragment,a),x(Ld.$$.fragment,a),x(Od.$$.fragment,a),x(zd.$$.fragment,a),x(Vd.$$.fragment,a),x(Ud.$$.fragment,a),x(sl.$$.fragment,a),x(Md.$$.fragment,a),x(al.$$.fragment,a),x(Rd.$$.fragment,a),x(nl.$$.fragment,a),x(Bd.$$.fragment,a),x(ol.$$.fragment,a),x(Gd.$$.fragment,a),x(ll.$$.fragment,a),x(Wd.$$.fragment,a),x(il.$$.fragment,a),x(Yd.$$.fragment,a),x(pl.$$.fragment,a),x(Jd.$$.fragment,a),x(cl.$$.fragment,a),x(Kd.$$.fragment,a),x(dl.$$.fragment,a),x(Zd.$$.fragment,a),x(ml.$$.fragment,a),x(Xd.$$.fragment,a),x(hl.$$.fragment,a),x(Qd.$$.fragment,a),x(fl.$$.fragment,a),x(em.$$.fragment,a),x(ul.$$.fragment,a),x(sm.$$.fragment,a),x(gl.$$.fragment,a),x(nm.$$.fragment,a),x(rm.$$.fragment,a),x(bl.$$.fragment,a),x(lm.$$.fragment,a),x($l.$$.fragment,a),x(im.$$.fragment,a),x(xl.$$.fragment,a),x(pm.$$.fragment,a),x(vl.$$.fragment,a),x(cm.$$.fragment,a),x(yl.$$.fragment,a),x(dm.$$.fragment,a),x(jl.$$.fragment,a),x(mm.$$.fragment,a),x(wl.$$.fragment,a),x(fm.$$.fragment,a),x(Dl.$$.fragment,a),x(um.$$.fragment,a),x(kl.$$.fragment,a),x(_m.$$.fragment,a),x(El.$$.fragment,a),x(bm.$$.fragment,a),x(ql.$$.fragment,a),x(Il.$$.fragment,a),x(xm.$$.fragment,a),x(Tl.$$.fragment,a),x(vm.$$.fragment,a),x(Nl.$$.fragment,a),x(ym.$$.fragment,a),x(Pl.$$.fragment,a),x(jm.$$.fragment,a),x(Al.$$.fragment,a),x(wm.$$.fragment,a),x(Fl.$$.fragment,a),x(Dm.$$.fragment,a),x(km.$$.fragment,a),x(Em.$$.fragment,a),x(qm.$$.fragment,a),x(Ol.$$.fragment,a),x(Im.$$.fragment,a),x(Cl.$$.fragment,a),x(Tm.$$.fragment,a),x(zl.$$.fragment,a),x(Nm.$$.fragment,a),x(Pm.$$.fragment,a),x(Vl.$$.fragment,a),x(Fm.$$.fragment,a),x(Ul.$$.fragment,a),x(Lm.$$.fragment,a),x(Ml.$$.fragment,a),x(Sm.$$.fragment,a),x(Rl.$$.fragment,a),x(Cm.$$.fragment,a),x(Bl.$$.fragment,a),x(Vm.$$.fragment,a),x(Hl.$$.fragment,a),x(Mm.$$.fragment,a),x(Rm.$$.fragment,a),x(Bm.$$.fragment,a),x(Hm.$$.fragment,a),x(Gm.$$.fragment,a),x(Wm.$$.fragment,a),x(Ym.$$.fragment,a),x(Jm.$$.fragment,a),x(Km.$$.fragment,a),x(Zm.$$.fragment,a),x(Xm.$$.fragment,a),x(Qm.$$.fragment,a),x(eh.$$.fragment,a),x(th.$$.fragment,a),x(sh.$$.fragment,a),x(ah.$$.fragment,a),x(nh.$$.fragment,a),x(rh.$$.fragment,a),x(Kl.$$.fragment,a),x(lh.$$.fragment,a),x(Zl.$$.fragment,a),x(ih.$$.fragment,a),x(Xl.$$.fragment,a),x(ch.$$.fragment,a),x(Ql.$$.fragment,a),x(dh.$$.fragment,a),x(ei.$$.fragment,a),x(mh.$$.fragment,a),x(ti.$$.fragment,a),x(hh.$$.fragment,a),x(si.$$.fragment,a),x(fh.$$.fragment,a),x(ai.$$.fragment,a),x(uh.$$.fragment,a),x(ni.$$.fragment,a),x(gh.$$.fragment,a),x(_h.$$.fragment,a),x(oi.$$.fragment,a),x(jh.$$.fragment,a),x(ii.$$.fragment,a),x(wh.$$.fragment,a),x(Dh.$$.fragment,a),x(kh.$$.fragment,a),x(Eh.$$.fragment,a),x(qh.$$.fragment,a),x(Ih.$$.fragment,a),x(fi.$$.fragment,a),x(Th.$$.fragment,a),x(Nh.$$.fragment,a),x(gi.$$.fragment,a),x(Ph.$$.fragment,a),x(_i.$$.fragment,a),x(Ah.$$.fragment,a),x(bi.$$.fragment,a),x(Fh.$$.fragment,a),x($i.$$.fragment,a),x(Sh.$$.fragment,a),x(Ch.$$.fragment,a),x(xi.$$.fragment,a),x(zh.$$.fragment,a),x(vi.$$.fragment,a),x(Vh.$$.fragment,a),x(yi.$$.fragment,a),x(Uh.$$.fragment,a),x(ji.$$.fragment,a),x(Rh.$$.fragment,a),x(Bh.$$.fragment,a),x(Di.$$.fragment,a),x(Hh.$$.fragment,a),x(Gh.$$.fragment,a),x(Ei.$$.fragment,a),x(Wh.$$.fragment,a),x(qi.$$.fragment,a),x(Yh.$$.fragment,a),x(Ii.$$.fragment,a),x(Jh.$$.fragment,a),x(Ti.$$.fragment,a),x(Kh.$$.fragment,a),x(Ni.$$.fragment,a),x(tf.$$.fragment,a),x(sf.$$.fragment,a),x(af.$$.fragment,a),x(nf.$$.fragment,a),x(rf.$$.fragment,a),x(of.$$.fragment,a),x(Si.$$.fragment,a),x(hf.$$.fragment,a),x(ff.$$.fragment,a),x(uf.$$.fragment,a),x(gf.$$.fragment,a),x(_f.$$.fragment,a),x(bf.$$.fragment,a),x($f.$$.fragment,a),x(xf.$$.fragment,a),x(Mi.$$.fragment,a),x(yf.$$.fragment,a),x(Ri.$$.fragment,a),x(jf.$$.fragment,a),x(wf.$$.fragment,a),x(Hi.$$.fragment,a),x(Df.$$.fragment,a),x(Gi.$$.fragment,a),x(kf.$$.fragment,a),x(Wi.$$.fragment,a),x(Ef.$$.fragment,a),x(Yi.$$.fragment,a),x(qf.$$.fragment,a),x(If.$$.fragment,a),x(Tf.$$.fragment,a),x(Xi.$$.fragment,a),x(Qi.$$.fragment,a),x(ep.$$.fragment,a),x(tp.$$.fragment,a),x(sp.$$.fragment,a),x(Pf.$$.fragment,a),x(Af.$$.fragment,a),x(Ff.$$.fragment,a),x(Lf.$$.fragment,a),i4=!0)},o(a){v(t.$$.fragment,a),v(us.$$.fragment,a),v(Sp.$$.fragment,a),v(Op.$$.fragment,a),v(Fr.$$.fragment,a),v(zp.$$.fragment,a),v(Lr.$$.fragment,a),v(Vp.$$.fragment,a),v(Up.$$.fragment,a),v(Mp.$$.fragment,a),v(Cr.$$.fragment,a),v(Rp.$$.fragment,a),v(zr.$$.fragment,a),v(Bp.$$.fragment,a),v(Hp.$$.fragment,a),v(Gp.$$.fragment,a),v(Mr.$$.fragment,a),v(Jp.$$.fragment,a),v(Kp.$$.fragment,a),v(Br.$$.fragment,a),v(Zp.$$.fragment,a),v(Hr.$$.fragment,a),v(Xp.$$.fragment,a),v(Gr.$$.fragment,a),v(Qp.$$.fragment,a),v(Yr.$$.fragment,a),v(tc.$$.fragment,a),v(Jr.$$.fragment,a),v(sc.$$.fragment,a),v(Kr.$$.fragment,a),v(ac.$$.fragment,a),v(Zr.$$.fragment,a),v(nc.$$.fragment,a),v(Xr.$$.fragment,a),v(rc.$$.fragment,a),v(Qr.$$.fragment,a),v(oc.$$.fragment,a),v(eo.$$.fragment,a),v(lc.$$.fragment,a),v(to.$$.fragment,a),v(ic.$$.fragment,a),v(so.$$.fragment,a),v(pc.$$.fragment,a),v(ao.$$.fragment,a),v(cc.$$.fragment,a),v(no.$$.fragment,a),v(mc.$$.fragment,a),v(ro.$$.fragment,a),v(hc.$$.fragment,a),v(uc.$$.fragment,a),v(gc.$$.fragment,a),v(lo.$$.fragment,a),v(_c.$$.fragment,a),v(io.$$.fragment,a),v(bc.$$.fragment,a),v(po.$$.fragment,a),v(xc.$$.fragment,a),v(co.$$.fragment,a),v(yc.$$.fragment,a),v(mo.$$.fragment,a),v(jc.$$.fragment,a),v(wc.$$.fragment,a),v(fo.$$.fragment,a),v(Dc.$$.fragment,a),v(uo.$$.fragment,a),v(Ec.$$.fragment,a),v(go.$$.fragment,a),v(qc.$$.fragment,a),v(_o.$$.fragment,a),v(Ic.$$.fragment,a),v(bo.$$.fragment,a),v(Tc.$$.fragment,a),v($o.$$.fragment,a),v(Nc.$$.fragment,a),v(xo.$$.fragment,a),v(Ac.$$.fragment,a),v(vo.$$.fragment,a),v(Lc.$$.fragment,a),v(yo.$$.fragment,a),v(Sc.$$.fragment,a),v(jo.$$.fragment,a),v(Oc.$$.fragment,a),v(wo.$$.fragment,a),v(Do.$$.fragment,a),v(ko.$$.fragment,a),v(zc.$$.fragment,a),v(Eo.$$.fragment,a),v(Vc.$$.fragment,a),v(Uc.$$.fragment,a),v(Io.$$.fragment,a),v(Mc.$$.fragment,a),v(To.$$.fragment,a),v(Bc.$$.fragment,a),v(No.$$.fragment,a),v(Hc.$$.fragment,a),v(Po.$$.fragment,a),v(Gc.$$.fragment,a),v(Ao.$$.fragment,a),v(Wc.$$.fragment,a),v(Fo.$$.fragment,a),v(Jc.$$.fragment,a),v(Zc.$$.fragment,a),v(Xc.$$.fragment,a),v(ed.$$.fragment,a),v(So.$$.fragment,a),v(td.$$.fragment,a),v(Oo.$$.fragment,a),v(sd.$$.fragment,a),v(ad.$$.fragment,a),v(nd.$$.fragment,a),v(rd.$$.fragment,a),v(od.$$.fragment,a),v(ld.$$.fragment,a),v(id.$$.fragment,a),v(pd.$$.fragment,a),v(cd.$$.fragment,a),v(dd.$$.fragment,a),v(md.$$.fragment,a),v(hd.$$.fragment,a),v(fd.$$.fragment,a),v(ud.$$.fragment,a),v(gd.$$.fragment,a),v(_d.$$.fragment,a),v(bd.$$.fragment,a),v($d.$$.fragment,a),v(xd.$$.fragment,a),v(vd.$$.fragment,a),v(yd.$$.fragment,a),v(jd.$$.fragment,a),v(wd.$$.fragment,a),v(Wo.$$.fragment,a),v(Dd.$$.fragment,a),v(Yo.$$.fragment,a),v(kd.$$.fragment,a),v(Jo.$$.fragment,a),v(Ed.$$.fragment,a),v(Ko.$$.fragment,a),v(qd.$$.fragment,a),v(Id.$$.fragment,a),v(Zo.$$.fragment,a),v(Nd.$$.fragment,a),v(Xo.$$.fragment,a),v(Pd.$$.fragment,a),v(Qo.$$.fragment,a),v(Ad.$$.fragment,a),v(Ld.$$.fragment,a),v(Od.$$.fragment,a),v(zd.$$.fragment,a),v(Vd.$$.fragment,a),v(Ud.$$.fragment,a),v(sl.$$.fragment,a),v(Md.$$.fragment,a),v(al.$$.fragment,a),v(Rd.$$.fragment,a),v(nl.$$.fragment,a),v(Bd.$$.fragment,a),v(ol.$$.fragment,a),v(Gd.$$.fragment,a),v(ll.$$.fragment,a),v(Wd.$$.fragment,a),v(il.$$.fragment,a),v(Yd.$$.fragment,a),v(pl.$$.fragment,a),v(Jd.$$.fragment,a),v(cl.$$.fragment,a),v(Kd.$$.fragment,a),v(dl.$$.fragment,a),v(Zd.$$.fragment,a),v(ml.$$.fragment,a),v(Xd.$$.fragment,a),v(hl.$$.fragment,a),v(Qd.$$.fragment,a),v(fl.$$.fragment,a),v(em.$$.fragment,a),v(ul.$$.fragment,a),v(sm.$$.fragment,a),v(gl.$$.fragment,a),v(nm.$$.fragment,a),v(rm.$$.fragment,a),v(bl.$$.fragment,a),v(lm.$$.fragment,a),v($l.$$.fragment,a),v(im.$$.fragment,a),v(xl.$$.fragment,a),v(pm.$$.fragment,a),v(vl.$$.fragment,a),v(cm.$$.fragment,a),v(yl.$$.fragment,a),v(dm.$$.fragment,a),v(jl.$$.fragment,a),v(mm.$$.fragment,a),v(wl.$$.fragment,a),v(fm.$$.fragment,a),v(Dl.$$.fragment,a),v(um.$$.fragment,a),v(kl.$$.fragment,a),v(_m.$$.fragment,a),v(El.$$.fragment,a),v(bm.$$.fragment,a),v(ql.$$.fragment,a),v(Il.$$.fragment,a),v(xm.$$.fragment,a),v(Tl.$$.fragment,a),v(vm.$$.fragment,a),v(Nl.$$.fragment,a),v(ym.$$.fragment,a),v(Pl.$$.fragment,a),v(jm.$$.fragment,a),v(Al.$$.fragment,a),v(wm.$$.fragment,a),v(Fl.$$.fragment,a),v(Dm.$$.fragment,a),v(km.$$.fragment,a),v(Em.$$.fragment,a),v(qm.$$.fragment,a),v(Ol.$$.fragment,a),v(Im.$$.fragment,a),v(Cl.$$.fragment,a),v(Tm.$$.fragment,a),v(zl.$$.fragment,a),v(Nm.$$.fragment,a),v(Pm.$$.fragment,a),v(Vl.$$.fragment,a),v(Fm.$$.fragment,a),v(Ul.$$.fragment,a),v(Lm.$$.fragment,a),v(Ml.$$.fragment,a),v(Sm.$$.fragment,a),v(Rl.$$.fragment,a),v(Cm.$$.fragment,a),v(Bl.$$.fragment,a),v(Vm.$$.fragment,a),v(Hl.$$.fragment,a),v(Mm.$$.fragment,a),v(Rm.$$.fragment,a),v(Bm.$$.fragment,a),v(Hm.$$.fragment,a),v(Gm.$$.fragment,a),v(Wm.$$.fragment,a),v(Ym.$$.fragment,a),v(Jm.$$.fragment,a),v(Km.$$.fragment,a),v(Zm.$$.fragment,a),v(Xm.$$.fragment,a),v(Qm.$$.fragment,a),v(eh.$$.fragment,a),v(th.$$.fragment,a),v(sh.$$.fragment,a),v(ah.$$.fragment,a),v(nh.$$.fragment,a),v(rh.$$.fragment,a),v(Kl.$$.fragment,a),v(lh.$$.fragment,a),v(Zl.$$.fragment,a),v(ih.$$.fragment,a),v(Xl.$$.fragment,a),v(ch.$$.fragment,a),v(Ql.$$.fragment,a),v(dh.$$.fragment,a),v(ei.$$.fragment,a),v(mh.$$.fragment,a),v(ti.$$.fragment,a),v(hh.$$.fragment,a),v(si.$$.fragment,a),v(fh.$$.fragment,a),v(ai.$$.fragment,a),v(uh.$$.fragment,a),v(ni.$$.fragment,a),v(gh.$$.fragment,a),v(_h.$$.fragment,a),v(oi.$$.fragment,a),v(jh.$$.fragment,a),v(ii.$$.fragment,a),v(wh.$$.fragment,a),v(Dh.$$.fragment,a),v(kh.$$.fragment,a),v(Eh.$$.fragment,a),v(qh.$$.fragment,a),v(Ih.$$.fragment,a),v(fi.$$.fragment,a),v(Th.$$.fragment,a),v(Nh.$$.fragment,a),v(gi.$$.fragment,a),v(Ph.$$.fragment,a),v(_i.$$.fragment,a),v(Ah.$$.fragment,a),v(bi.$$.fragment,a),v(Fh.$$.fragment,a),v($i.$$.fragment,a),v(Sh.$$.fragment,a),v(Ch.$$.fragment,a),v(xi.$$.fragment,a),v(zh.$$.fragment,a),v(vi.$$.fragment,a),v(Vh.$$.fragment,a),v(yi.$$.fragment,a),v(Uh.$$.fragment,a),v(ji.$$.fragment,a),v(Rh.$$.fragment,a),v(Bh.$$.fragment,a),v(Di.$$.fragment,a),v(Hh.$$.fragment,a),v(Gh.$$.fragment,a),v(Ei.$$.fragment,a),v(Wh.$$.fragment,a),v(qi.$$.fragment,a),v(Yh.$$.fragment,a),v(Ii.$$.fragment,a),v(Jh.$$.fragment,a),v(Ti.$$.fragment,a),v(Kh.$$.fragment,a),v(Ni.$$.fragment,a),v(tf.$$.fragment,a),v(sf.$$.fragment,a),v(af.$$.fragment,a),v(nf.$$.fragment,a),v(rf.$$.fragment,a),v(of.$$.fragment,a),v(Si.$$.fragment,a),v(hf.$$.fragment,a),v(ff.$$.fragment,a),v(uf.$$.fragment,a),v(gf.$$.fragment,a),v(_f.$$.fragment,a),v(bf.$$.fragment,a),v($f.$$.fragment,a),v(xf.$$.fragment,a),v(Mi.$$.fragment,a),v(yf.$$.fragment,a),v(Ri.$$.fragment,a),v(jf.$$.fragment,a),v(wf.$$.fragment,a),v(Hi.$$.fragment,a),v(Df.$$.fragment,a),v(Gi.$$.fragment,a),v(kf.$$.fragment,a),v(Wi.$$.fragment,a),v(Ef.$$.fragment,a),v(Yi.$$.fragment,a),v(qf.$$.fragment,a),v(If.$$.fragment,a),v(Tf.$$.fragment,a),v(Xi.$$.fragment,a),v(Qi.$$.fragment,a),v(ep.$$.fragment,a),v(tp.$$.fragment,a),v(sp.$$.fragment,a),v(Pf.$$.fragment,a),v(Af.$$.fragment,a),v(Ff.$$.fragment,a),v(Lf.$$.fragment,a),i4=!1},d(a){s(c),a&&s(g),a&&s(f),y(t),a&&s(Pr),a&&s(Oe),y(us),a&&s($w),a&&s(Q),y(Sp),y(Op),y(Fr),y(zp),y(Lr),a&&s(xw),a&&s(hn),y(Vp),a&&s(vw),a&&s(Or),a&&s(yw),a&&s(q),y(Up),y(Mp),y(Cr),y(Rp),y(zr),y(Bp),y(Hp),y(Gp),y(Mr),y(Jp),y(Kp),y(Br),y(Zp),y(Hr),y(Xp),y(Gr),y(Qp),y(Yr),y(tc),y(Jr),y(sc),y(Kr),y(ac),y(Zr),y(nc),y(Xr),y(rc),y(Qr),y(oc),y(eo),y(lc),y(to),y(ic),y(so),y(pc),y(ao),y(cc),y(no),y(mc),y(ro),y(hc),y(uc),y(gc),y(lo),y(_c),y(io),y(bc),y(po),y(xc),y(co),y(yc),y(mo),y(jc),y(wc),y(fo),y(Dc),y(uo),y(Ec),y(go),y(qc),y(_o),y(Ic),y(bo),y(Tc),y($o),y(Nc),y(xo),y(Ac),y(vo),y(Lc),y(yo),y(Sc),y(jo),y(Oc),y(wo),y(Do),y(ko),y(zc),y(Eo),y(Vc),y(Uc),y(Io),y(Mc),y(To),y(Bc),y(No),y(Hc),y(Po),y(Gc),y(Ao),y(Wc),y(Fo),y(Jc),y(Zc),y(Xc),y(ed),y(So),y(td),y(Oo),y(sd),y(ad),y(nd),y(rd),y(od),y(ld),y(id),y(pd),y(cd),y(dd),y(md),y(hd),y(fd),y(ud),y(gd),y(_d),y(bd),y($d),y(xd),y(vd),y(yd),y(jd),y(wd),y(Wo),y(Dd),y(Yo),y(kd),y(Jo),y(Ed),y(Ko),y(qd),y(Id),y(Zo),a&&s(jw),a&&s(zt),y(Nd),y(Xo),a&&s(ww),a&&s(ee),y(Pd),y(Qo),a&&s(Dw),a&&s(me),y(Ad),a&&s(kw),a&&s(he),y(Ld),a&&s(Ew),a&&s(fe),y(Od),a&&s(qw),a&&s(In),y(zd),a&&s(Iw),a&&s(tl),a&&s(Tw),a&&s(A),y(Vd),y(Ud),y(sl),y(Md),y(al),y(Rd),y(nl),y(Bd),y(ol),y(Gd),y(ll),y(Wd),y(il),y(Yd),y(pl),y(Jd),y(cl),y(Kd),y(dl),y(Zd),y(ml),y(Xd),y(hl),y(Qd),y(fl),y(em),y(ul),y(sm),y(gl),y(nm),y(rm),y(bl),y(lm),y($l),y(im),y(xl),y(pm),y(vl),y(cm),y(yl),y(dm),y(jl),y(mm),y(wl),y(fm),y(Dl),y(um),y(kl),y(_m),y(El),y(bm),y(ql),y(Il),y(xm),y(Tl),y(vm),y(Nl),y(ym),y(Pl),y(jm),y(Al),y(wm),y(Fl),y(Dm),a&&s(Nw),a&&s(bg),a&&s(Pw),a&&s(Mn),y(km),a&&s(Aw),a&&s(Sl),a&&s(Fw),a&&s(L),y(Em),y(qm),y(Ol),y(Im),y(Cl),y(Tm),y(zl),y(Nm),y(Pm),y(Vl),y(Fm),y(Ul),y(Lm),y(Ml),y(Sm),y(Rl),y(Cm),y(Bl),y(Vm),y(Hl),y(Mm),y(Rm),y(Bm),y(Hm),y(Gm),y(Wm),y(Ym),y(Jm),y(Km),y(Zm),y(Xm),y(Qm),y(eh),y(th),y(sh),a&&s(Lw),a&&s(Hn),y(ah),a&&s(Sw),a&&s(Jl),a&&s(Ow),a&&s(U),y(nh),y(rh),y(Kl),y(lh),y(Zl),y(ih),y(Xl),y(ch),y(Ql),y(dh),y(ei),y(mh),y(ti),y(hh),y(si),y(fh),y(ai),y(uh),y(ni),a&&s(Cw),a&&s(Yn),y(gh),a&&s(zw),a&&s(O),y(_h),y(oi),y(jh),y(ii),y(wh),y(Dh),y(kh),y(Eh),y(qh),y(Ih),y(fi),y(Th),y(Nh),y(gi),y(Ph),y(_i),a&&s(Vw),a&&s(Jt),y(Ah),y(bi),a&&s(Uw),a&&s(B),y(Fh),y($i),y(Sh),y(Ch),y(xi),y(zh),y(vi),a&&s(Mw),a&&s(We),y(Vh),y(yi),a&&s(Rw),a&&s(te),y(Uh),y(ji),y(Rh),a&&s(Bw),a&&s(se),y(Bh),y(Di),y(Hh),a&&s(Hw),a&&s(Kt),y(Gh),y(Ei),a&&s(Gw),a&&s(Zt),y(Wh),y(qi),a&&s(Ww),a&&s(Xt),y(Yh),y(Ii),a&&s(Yw),a&&s(Qt),y(Jh),y(Ti),a&&s(Jw),a&&s(M),y(Kh),y(Ni),y(tf),y(sf),y(af),y(nf),y(rf),a&&s(Kw),a&&s(R),y(of),y(Si),y(hf),y(ff),y(uf),y(gf),y(_f),a&&s(Zw),a&&s(tr),y(bf),a&&s(Xw),a&&s(ae),y($f),y(xf),y(Mi),y(yf),y(Ri),a&&s(Qw),a&&s(sr),y(jf),a&&s(e4),a&&s(Ca),a&&s(t4),a&&s(K),y(wf),y(Hi),y(Df),y(Gi),y(kf),y(Wi),y(Ef),y(Yi),y(qf),a&&s(s4),a&&s(ar),y(If),a&&s(a4),a&&s(C),y(Tf),y(Xi),y(Qi),y(ep),y(tp),y(sp),a&&s(n4),a&&s(lr),y(Pf),a&&s(r4),a&&s(pr),y(Af),a&&s(o4),a&&s(cr),y(Ff),a&&s(l4),a&&s(dr),y(Lf)}}}const Cre={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function zre(k){return cae(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Wre extends oae{constructor(c){super();lae(this,c,zre,Ore,iae,{})}}export{Wre as default,Cre as metadata};
