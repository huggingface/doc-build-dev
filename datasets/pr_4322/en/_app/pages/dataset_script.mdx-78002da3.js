import{S as _p,i as gp,s as yp,e as s,k as p,w as m,t as n,M as wp,c as l,d as e,m as u,a as o,x as _,h as i,b as f,F as a,g as d,y as g,q as y,o as w,B as v,v as vp}from"../chunks/vendor-8138ceec.js";import{T as qs}from"../chunks/Tip-12722dfc.js";import{I as P}from"../chunks/IconCopyLink-2dd3a6ac.js";import{C as A}from"../chunks/CodeBlock-fc89709f.js";function $p(L){let h,q,c,$,k;return{c(){h=s("p"),q=n("To help you get started, try beginning with the dataset loading script "),c=s("a"),$=n("template"),k=n("!"),this.h()},l(E){h=l(E,"P",{});var j=o(h);q=i(j,"To help you get started, try beginning with the dataset loading script "),c=l(j,"A",{href:!0,rel:!0});var I=o(c);$=i(I,"template"),I.forEach(e),k=i(j,"!"),j.forEach(e),this.h()},h(){f(c,"href","https://github.com/huggingface/datasets/blob/master/templates/new_dataset_script.py"),f(c,"rel","nofollow")},m(E,j){d(E,h,j),a(h,q),a(h,c),a(c,$),a(h,k)},d(E){E&&e(h)}}}function Ep(L){let h,q;return{c(){h=s("p"),q=n("Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one.")},l(c){h=l(c,"P",{});var $=o(h);q=i($,"Only use a default configuration when it makes sense. Don\u2019t set one because it may be more convenient for the user to not specify a configuration when they load your dataset. For example, multi-lingual datasets often have a separate configuration for each language. An appropriate default may be an aggregated configuration that loads all the languages of the dataset if the user doesn\u2019t request a particular one."),$.forEach(e)},m(c,$){d(c,h,$),a(h,q)},d(c){c&&e(h)}}}function qp(L){let h,q;return{c(){h=s("p"),q=n("If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs.")},l(c){h=l(c,"P",{});var $=o(h);q=i($,"If the data files live in the same folder or repository of the dataset script, you can just pass the relative paths to the files instead of URLs."),$.forEach(e)},m(c,$){d(c,h,$),a(h,q)},d(c){c&&e(h)}}}function bp(L){let h,q,c,$,k,E,j,I;return{c(){h=s("p"),q=n("Make sure you run all of the following commands "),c=s("strong"),$=n("from the root"),k=n(" of your local "),E=s("code"),j=n("datasets"),I=n(" repository.")},l(D){h=l(D,"P",{});var b=o(h);q=i(b,"Make sure you run all of the following commands "),c=l(b,"STRONG",{});var C=o(c);$=i(C,"from the root"),C.forEach(e),k=i(b," of your local "),E=l(b,"CODE",{});var F=o(E);j=i(F,"datasets"),F.forEach(e),I=i(b," repository."),b.forEach(e)},m(D,b){d(D,h,b),a(h,q),a(h,c),a(c,$),a(h,k),a(h,E),a(E,j),a(h,I)},d(D){D&&e(h)}}}function jp(L){let h,q,c,$,k,E,j,I;return{c(){h=s("p"),q=n("Manually creating dummy data can be tricky. Make sure you follow the instructions from the command "),c=s("code"),$=n("datasets-cli dummy_data datasets/<your-dataset-folder>"),k=n(". If you are still unable to successfully generate dummy data, open a "),E=s("a"),j=n("Pull Request"),I=n(" and we will be happy to help you out!"),this.h()},l(D){h=l(D,"P",{});var b=o(h);q=i(b,"Manually creating dummy data can be tricky. Make sure you follow the instructions from the command "),c=l(b,"CODE",{});var C=o(c);$=i(C,"datasets-cli dummy_data datasets/<your-dataset-folder>"),C.forEach(e),k=i(b,". If you are still unable to successfully generate dummy data, open a "),E=l(b,"A",{href:!0,rel:!0});var F=o(E);j=i(F,"Pull Request"),F.forEach(e),I=i(b," and we will be happy to help you out!"),b.forEach(e),this.h()},h(){f(E,"href","https://github.com/huggingface/datasets/pulls"),f(E,"rel","nofollow")},m(D,b){d(D,h,b),a(h,q),a(h,c),a(c,$),a(h,k),a(h,E),a(E,j),a(h,I)},d(D){D&&e(h)}}}function kp(L){let h,q,c,$,k,E,j,I,D,b,C,F,bs,G,uo,We,fo,ho,Xe,co,mo,js,At,ks,ye,_o,Is,x,Je,go,yo,Ke,wo,vo,Ze,$o,Eo,ta,qo,bo,ea,jo,ko,aa,Io,xs,st,xo,Tt,So,Do,Ss,lt,Ds,M,ot,sa,Lt,Ao,la,To,As,rt,Lo,oa,Co,Oo,Ts,nt,ra,we,na,No,Po,Ro,ia,it,da,Go,Uo,ve,Bo,Vo,Ls,Ct,Cs,H,pa,$e,ua,zo,Fo,Mo,fa,Ee,ha,Ho,Qo,Os,qe,Yo,Ns,Ot,Ps,Q,dt,ca,Nt,Wo,ma,Xo,Rs,U,Jo,Pt,Ko,Zo,be,tr,er,Gs,pt,ar,Rt,sr,lr,Us,je,Gt,or,ke,rr,nr,Bs,Ut,Vs,Bt,Vt,ir,_a,dr,pr,zs,zt,Fs,Ft,Mt,ur,ga,fr,hr,Ms,Ht,Hs,Y,ut,ya,Qt,cr,wa,mr,Qs,B,_r,va,gr,yr,$a,wr,vr,Ys,Yt,Ws,ft,Xs,W,ht,Ea,Wt,$r,qa,Er,Js,Ie,qr,Ks,xe,ba,br,Zs,Xt,tl,ct,el,Jt,Kt,mt,Se,jr,kr,De,Ir,xr,Sr,Zt,ja,T,Dr,ka,Ar,Tr,Ia,Lr,Cr,xa,Or,Nr,Sa,Pr,Rr,Gr,Da,Ae,Aa,Ur,Br,al,_t,Vr,Ta,zr,Fr,sl,te,ll,X,gt,La,ee,Mr,Ca,Hr,ol,Te,Qr,rl,V,Oa,Yr,Wr,Na,Xr,Jr,Pa,Kr,nl,Le,Zr,il,yt,Ra,wt,Ga,tn,en,Ua,an,sn,ln,Ba,ae,on,Va,rn,nn,dl,se,pl,J,vt,za,le,dn,Fa,pn,ul,Ce,un,fl,$t,hl,K,Et,Ma,oe,fn,Ha,hn,cl,Oe,re,cn,Qa,mn,_n,ml,ne,_l,ie,R,gn,Ya,yn,wn,Wa,vn,$n,Xa,En,qn,gl,Z,qt,Ja,de,bn,Ka,jn,yl,Ne,kn,wl,tt,bt,Za,pe,In,ts,xn,vl,Pe,Sn,$l,S,es,Dn,An,as,Tn,Ln,ss,Cn,On,ls,Nn,Pn,os,Rn,Gn,rs,Un,El,Re,Bn,ql,ue,bl,et,jt,ns,fe,Vn,is,zn,jl,Ge,Fn,kl,he,Il,kt,xl,Ue,Mn,Sl,It,ds,Be,ps,Hn,Qn,Yn,us,Ve,fs,Wn,Xn,Dl,at,xt,hs,ce,Jn,cs,Kn,Al,St,Zn,ms,ti,ei,Tl,me,Ll,ze,ai,Cl,_e,Ol,Fe,si,Nl;return E=new P({}),At=new A({props:{code:`from datasets import load_dataset
load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),lt=new qs({props:{$$slots:{default:[$p]},$$scope:{ctx:L}}}),Lt=new P({}),Ct=new A({props:{code:`datasets.Features(
    {
        "id": datasets.Value("string"),
        "title": datasets.Value("string"),
        "context": datasets.Value("string"),
        "question": datasets.Value("string"),
        "answers": datasets.Sequence(
            {
                "text": datasets.Value("string"),
                "answer_start": datasets.Value("int32"),
            }
        ),
    }
)`,highlighted:`datasets.Features(
    {
        <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
        <span class="hljs-string">&quot;answers&quot;</span>: datasets.<span class="hljs-type">Sequence</span>(
            {
                <span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),
            }
        ),
    }
)`}}),Ot=new A({props:{code:`def _info(self):
    return datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                "id": datasets.Value("string"),
                "title": datasets.Value("string"),
                "context": datasets.Value("string"),
                "question": datasets.Value("string"),
                "answers": datasets.features.Sequence(
                    {"text": datasets.Value("string"), "answer_start": datasets.Value("int32"),}
                ),
            }
        ),
        # No default supervised_keys (as we have to pass both question
        # and context as input).
        supervised_keys=None,
        homepage="https://rajpurkar.github.io/SQuAD-explorer/",
        citation=_CITATION,
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                <span class="hljs-string">&quot;id&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;title&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;context&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;question&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>),
                <span class="hljs-string">&quot;answers&quot;</span>: datasets.features.<span class="hljs-type">Sequence</span>(
                    {<span class="hljs-string">&quot;text&quot;</span>: datasets.Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;answer_start&quot;</span>: datasets.Value(<span class="hljs-string">&quot;int32&quot;</span>),}
                ),
            }
        ),
        <span class="hljs-comment"># No default supervised_keys (as we have to pass both question</span>
        <span class="hljs-comment"># and context as input).</span>
        supervised_keys=<span class="hljs-literal">None</span>,
        homepage=<span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/&quot;</span>,
        citation=_CITATION,
    )`}}),Nt=new P({}),Ut=new A({props:{code:`class SuperGlueConfig(datasets.BuilderConfig):
    """BuilderConfig for SuperGLUE."""

    def __init__(self, features, data_url, citation, url, label_classes=("False", "True"), **kwargs):
        """BuilderConfig for SuperGLUE.

        Args:
        features: *list[string]*, list of the features that will appear in the
            feature dict. Should not include "label".
        data_url: *string*, url to download the zip file from.
        citation: *string*, citation for the data set.
        url: *string*, url for information about the data set.
        label_classes: *list[string]*, the list of classes for the label if the
            label is present as a string. Non-string labels will be cast to either
            'False' or 'True'.
        **kwargs: keyword arguments forwarded to super.
        """
        # Version history:
        # 1.0.2: Fixed non-nondeterminism in ReCoRD.
        # 1.0.1: Change from the pre-release trial version of SuperGLUE (v1.9) to
        #        the full release (v2.0).
        # 1.0.0: S3 (new shuffling, sharding and slicing mechanism).
        # 0.0.2: Initial version.
        super(SuperGlueConfig, self).__init__(version=datasets.Version("1.0.2"), **kwargs)
        self.features = features
        self.label_classes = label_classes
        self.data_url = data_url
        self.citation = citation
        self.url = url`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlueConfig</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, data_url, citation, url, label_classes=(<span class="hljs-params"><span class="hljs-string">&quot;False&quot;</span>, <span class="hljs-string">&quot;True&quot;</span></span>), **kwargs</span>):
        <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for SuperGLUE.

        Args:
        features: *list[string]*, list of the features that will appear in the
            feature dict. Should not include &quot;label&quot;.
        data_url: *string*, url to download the zip file from.
        citation: *string*, citation for the data set.
        url: *string*, url for information about the data set.
        label_classes: *list[string]*, the list of classes for the label if the
            label is present as a string. Non-string labels will be cast to either
            &#x27;False&#x27; or &#x27;True&#x27;.
        **kwargs: keyword arguments forwarded to super.
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># Version history:</span>
        <span class="hljs-comment"># 1.0.2: Fixed non-nondeterminism in ReCoRD.</span>
        <span class="hljs-comment"># 1.0.1: Change from the pre-release trial version of SuperGLUE (v1.9) to</span>
        <span class="hljs-comment">#        the full release (v2.0).</span>
        <span class="hljs-comment"># 1.0.0: S3 (new shuffling, sharding and slicing mechanism).</span>
        <span class="hljs-comment"># 0.0.2: Initial version.</span>
        <span class="hljs-built_in">super</span>(SuperGlueConfig, self).__init__(version=datasets.Version(<span class="hljs-string">&quot;1.0.2&quot;</span>), **kwargs)
        self.features = features
        self.label_classes = label_classes
        self.data_url = data_url
        self.citation = citation
        self.url = url`}}),zt=new A({props:{code:`class SuperGlue(datasets.GeneratorBasedBuilder):
    """The SuperGLUE benchmark."""

    BUILDER_CONFIGS = [
        SuperGlueConfig(
            name="boolq",
            description=_BOOLQ_DESCRIPTION,
            features=["question", "passage"],
            data_url="https://dl.fbaipublicfiles.com/glue/superglue/data/v2/BoolQ.zip",
            citation=_BOOLQ_CITATION,
            url="https://github.com/google-research-datasets/boolean-questions",
        ),
        ...
        ...
        SuperGlueConfig(
            name="axg",
            description=_AXG_DESCRIPTION,
            features=["premise", "hypothesis"],
            label_classes=["entailment", "not_entailment"],
            data_url="https://dl.fbaipublicfiles.com/glue/superglue/data/v2/AX-g.zip",
            citation=_AXG_CITATION,
            url="https://github.com/rudinger/winogender-schemas",
        ),`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperGlue</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;The SuperGLUE benchmark.&quot;&quot;&quot;</span>

    BUILDER_CONFIGS = [
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;boolq&quot;</span>,
            description=_BOOLQ_DESCRIPTION,
            features=[<span class="hljs-string">&quot;question&quot;</span>, <span class="hljs-string">&quot;passage&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/BoolQ.zip&quot;</span>,
            citation=_BOOLQ_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/google-research-datasets/boolean-questions&quot;</span>,
        ),
        ...
        ...
        SuperGlueConfig(
            name=<span class="hljs-string">&quot;axg&quot;</span>,
            description=_AXG_DESCRIPTION,
            features=[<span class="hljs-string">&quot;premise&quot;</span>, <span class="hljs-string">&quot;hypothesis&quot;</span>],
            label_classes=[<span class="hljs-string">&quot;entailment&quot;</span>, <span class="hljs-string">&quot;not_entailment&quot;</span>],
            data_url=<span class="hljs-string">&quot;https://dl.fbaipublicfiles.com/glue/superglue/data/v2/AX-g.zip&quot;</span>,
            citation=_AXG_CITATION,
            url=<span class="hljs-string">&quot;https://github.com/rudinger/winogender-schemas&quot;</span>,
        ),`}}),Ht=new A({props:{code:`from datasets import load_dataset
dataset = load_dataset('super_glue', 'boolq')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;super_glue&#x27;</span>, <span class="hljs-string">&#x27;boolq&#x27;</span>)`}}),Qt=new P({}),Yt=new A({props:{code:`class NewDataset(datasets.GeneratorBasedBuilder):

VERSION = datasets.Version("1.1.0")

BUILDER_CONFIGS = [
    datasets.BuilderConfig(name="first_domain", version=VERSION, description="This part of my dataset covers a first domain"),
    datasets.BuilderConfig(name="second_domain", version=VERSION, description="This part of my dataset covers a second domain"),
]

DEFAULT_CONFIG_NAME = "first_domain"`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">NewDataset</span>(datasets.GeneratorBasedBuilder):

VERSION = datasets.Version(<span class="hljs-string">&quot;1.1.0&quot;</span>)

BUILDER_CONFIGS = [
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;first_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a first domain&quot;</span>),
    datasets.BuilderConfig(name=<span class="hljs-string">&quot;second_domain&quot;</span>, version=VERSION, description=<span class="hljs-string">&quot;This part of my dataset covers a second domain&quot;</span>),
]

DEFAULT_CONFIG_NAME = <span class="hljs-string">&quot;first_domain&quot;</span>`}}),ft=new qs({props:{warning:!0,$$slots:{default:[Ep]},$$scope:{ctx:L}}}),Wt=new P({}),Xt=new A({props:{code:`_URL = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
_URLS = {
    "train": _URL + "train-v1.1.json",
    "dev": _URL + "dev-v1.1.json",
}`,highlighted:`_URL = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
_URLS = {
    <span class="hljs-string">&quot;train&quot;</span>: _URL + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>,
    <span class="hljs-string">&quot;dev&quot;</span>: _URL + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>,
}`}}),ct=new qs({props:{$$slots:{default:[qp]},$$scope:{ctx:L}}}),te=new A({props:{code:`def _split_generators(self, dl_manager: datasets.DownloadManager) -> List[datasets.SplitGenerator]:
    urls_to_download = self._URLS
    downloaded_files = dl_manager.download_and_extract(urls_to_download)

    return [
        datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={"filepath": downloaded_files["train"]}),
        datasets.SplitGenerator(name=datasets.Split.VALIDATION, gen_kwargs={"filepath": downloaded_files["dev"]}),
    ]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager: datasets.DownloadManager</span>) -&gt; <span class="hljs-type">List</span>[datasets.SplitGenerator]:
    urls_to_download = self._URLS
    downloaded_files = dl_manager.download_and_extract(urls_to_download)

    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;train&quot;</span>]}),
        datasets.SplitGenerator(name=datasets.Split.VALIDATION, gen_kwargs={<span class="hljs-string">&quot;filepath&quot;</span>: downloaded_files[<span class="hljs-string">&quot;dev&quot;</span>]}),
    ]`}}),ee=new P({}),se=new A({props:{code:`def _generate_examples(self, filepath):
    """This function returns the examples in the raw (text) form."""
    logger.info("generating examples from = %s", filepath)
    with open(filepath) as f:
        squad = json.load(f)
        for article in squad["data"]:
            title = article.get("title", "").strip()
            for paragraph in article["paragraphs"]:
                context = paragraph["context"].strip()
                for qa in paragraph["qas"]:
                    question = qa["question"].strip()
                    id_ = qa["id"]

                    answer_starts = [answer["answer_start"] for answer in qa["answers"]]
                    answers = [answer["text"].strip() for answer in qa["answers"]]

                    # Features currently used are "context", "question", and "answers".
                    # Others are extracted here for the ease of future expansions.
                    yield id_, {
                        "title": title,
                        "context": context,
                        "question": question,
                        "id": id_,
                        "answers": {"answer_start": answer_starts, "text": answers,},
                    }`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, filepath</span>):
    <span class="hljs-string">&quot;&quot;&quot;This function returns the examples in the raw (text) form.&quot;&quot;&quot;</span>
    logger.info(<span class="hljs-string">&quot;generating examples from = %s&quot;</span>, filepath)
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath) <span class="hljs-keyword">as</span> f:
        squad = json.load(f)
        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> squad[<span class="hljs-string">&quot;data&quot;</span>]:
            title = article.get(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip()
            <span class="hljs-keyword">for</span> paragraph <span class="hljs-keyword">in</span> article[<span class="hljs-string">&quot;paragraphs&quot;</span>]:
                context = paragraph[<span class="hljs-string">&quot;context&quot;</span>].strip()
                <span class="hljs-keyword">for</span> qa <span class="hljs-keyword">in</span> paragraph[<span class="hljs-string">&quot;qas&quot;</span>]:
                    question = qa[<span class="hljs-string">&quot;question&quot;</span>].strip()
                    id_ = qa[<span class="hljs-string">&quot;id&quot;</span>]

                    answer_starts = [answer[<span class="hljs-string">&quot;answer_start&quot;</span>] <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]
                    answers = [answer[<span class="hljs-string">&quot;text&quot;</span>].strip() <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> qa[<span class="hljs-string">&quot;answers&quot;</span>]]

                    <span class="hljs-comment"># Features currently used are &quot;context&quot;, &quot;question&quot;, and &quot;answers&quot;.</span>
                    <span class="hljs-comment"># Others are extracted here for the ease of future expansions.</span>
                    <span class="hljs-keyword">yield</span> id_, {
                        <span class="hljs-string">&quot;title&quot;</span>: title,
                        <span class="hljs-string">&quot;context&quot;</span>: context,
                        <span class="hljs-string">&quot;question&quot;</span>: question,
                        <span class="hljs-string">&quot;id&quot;</span>: id_,
                        <span class="hljs-string">&quot;answers&quot;</span>: {<span class="hljs-string">&quot;answer_start&quot;</span>: answer_starts, <span class="hljs-string">&quot;text&quot;</span>: answers,},
                    }`}}),le=new P({}),$t=new qs({props:{warning:!0,$$slots:{default:[bp]},$$scope:{ctx:L}}}),oe=new P({}),ne=new A({props:{code:"datasets-cli test datasets/<your-dataset-folder> --save_infos --all_configs",highlighted:'<span class="hljs-comment">datasets</span><span class="hljs-literal">-</span><span class="hljs-comment">cli</span> <span class="hljs-comment">test</span> <span class="hljs-comment">datasets/</span>&lt;<span class="hljs-comment">your</span><span class="hljs-literal">-</span><span class="hljs-comment">dataset</span><span class="hljs-literal">-</span><span class="hljs-comment">folder</span>&gt; --<span class="hljs-comment">save_infos</span> --<span class="hljs-comment">all_configs</span>'}}),de=new P({}),pe=new P({}),ue=new A({props:{code:"datasets-cli dummy_data datasets/<your-dataset-folder> --auto_generate",highlighted:'datasets-cli dummy_data datasets/&lt;your-dataset-<span class="hljs-built_in">folder</span>&gt; <span class="hljs-comment">--auto_generate</span>'}}),fe=new P({}),he=new A({props:{code:`datasets-cli dummy_data datasets/<your-dataset-folder>

==============================DUMMY DATA INSTRUCTIONS==============================
- In order to create the dummy data for my-dataset, please go into the folder './datasets/my-dataset/dummy/1.1.0' with *cd ./datasets/my-dataset/dummy/1.1.0* .

- Please create the following dummy data files 'dummy_data/TREC_10.label, dummy_data/train_5500.label' from the folder './datasets/my-dataset/dummy/1.1.0'

- For each of the splits 'train, test', make sure that one or more of the dummy data files provide at least one example

- If the method *_generate_examples(...)* includes multiple *open()* statements, you might have to create other files in addition to 'dummy_data/TREC_10.label, dummy_data/train_5500.label'. In this case please refer to the *_generate_examples(...)* method

- After all dummy data files are created, they should be zipped recursively to 'dummy_data.zip' with the command *zip -r dummy_data.zip dummy_data/*

- You can now delete the folder 'dummy_data' with the command *rm -r dummy_data*

- To get the folder 'dummy_data' back for further changes to the dummy data, simply unzip dummy_data.zip with the command *unzip dummy_data.zip*

- Make sure you have created the file 'dummy_data.zip' in './datasets/my-dataset/dummy/1.1.0'
===================================================================================`,highlighted:`datasets-cli dummy_data datasets/<span class="hljs-symbol">&lt;your-dataset-folder&gt;</span>

==============================DUMMY DATA INSTRUCTIONS==============================
- In order <span class="hljs-keyword">to</span> create the dummy data <span class="hljs-keyword">for</span> my-dataset, please <span class="hljs-keyword">go</span> into the folder <span class="hljs-string">&#x27;./datasets/my-dataset/dummy/1.1.0&#x27;</span> with *<span class="hljs-keyword">cd</span> ./datasets/my-dataset/dummy/<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span>* .

- Please create the following dummy data <span class="hljs-keyword">files</span> <span class="hljs-string">&#x27;dummy_data/TREC_10.label, dummy_data/train_5500.label&#x27;</span> from the folder <span class="hljs-string">&#x27;./datasets/my-dataset/dummy/1.1.0&#x27;</span>

- For each of the splits <span class="hljs-string">&#x27;train, test&#x27;</span>, <span class="hljs-keyword">make</span> sure that one <span class="hljs-built_in">or</span> more of the dummy data <span class="hljs-keyword">files</span> provide at least one example

- If the method *_generate_examples(...)* includes multiple *<span class="hljs-keyword">open</span>()* statements, you might have <span class="hljs-keyword">to</span> create other <span class="hljs-keyword">files</span> in addition <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;dummy_data/TREC_10.label, dummy_data/train_5500.label&#x27;</span>. In this case please refer <span class="hljs-keyword">to</span> the *_generate_examples(...)* method

- After <span class="hljs-keyword">all</span> dummy data <span class="hljs-keyword">files</span> are created, they should <span class="hljs-keyword">be</span> zipped recursively <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;dummy_data.zip&#x27;</span> with the <span class="hljs-keyword">command</span> *zip -r dummy_data.zip dummy_data/*

- You can now <span class="hljs-keyword">delete</span> the folder <span class="hljs-string">&#x27;dummy_data&#x27;</span> with the <span class="hljs-keyword">command</span> *rm -r dummy_data*

- To <span class="hljs-built_in">get</span> the folder <span class="hljs-string">&#x27;dummy_data&#x27;</span> back <span class="hljs-keyword">for</span> further <span class="hljs-keyword">changes</span> <span class="hljs-keyword">to</span> the dummy data, simply unzip dummy_data.zip with the <span class="hljs-keyword">command</span> *unzip dummy_data.zip*

- Make sure you have created the <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;dummy_data.zip&#x27;</span> in <span class="hljs-string">&#x27;./datasets/my-dataset/dummy/1.1.0&#x27;</span>
===================================================================================`}}),kt=new qs({props:{$$slots:{default:[jp]},$$scope:{ctx:L}}}),ce=new P({}),me=new A({props:{code:"RUN_SLOW=1 pytest tests/test_dataset_common.py::LocalDatasetTest::test_load_real_dataset_<your_dataset_name>",highlighted:'RUN_SLOW=<span class="hljs-number">1</span> pytest tests/test_dataset_common.py<span class="hljs-number">::</span>LocalDatasetTest<span class="hljs-number">::</span>test_load_real_dataset_&lt;your_dataset_name&gt;'}}),_e=new A({props:{code:"RUN_SLOW=1 pytest tests/test_dataset_common.py::LocalDatasetTest::test_load_dataset_all_configs_<your_dataset_name>",highlighted:'RUN_SLOW=<span class="hljs-number">1</span> pytest tests/test_dataset_common.py<span class="hljs-number">::</span>LocalDatasetTest<span class="hljs-number">::</span>test_load_dataset_all_configs_&lt;your_dataset_name&gt;'}}),{c(){h=s("meta"),q=p(),c=s("h1"),$=s("a"),k=s("span"),m(E.$$.fragment),j=p(),I=s("span"),D=n("Create a dataset loading script"),b=p(),C=s("p"),F=n("Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),bs=p(),G=s("p"),uo=n("Any dataset script, for example "),We=s("code"),fo=n("my_dataset.py"),ho=n(", can be placed in a folder or a repository named "),Xe=s("code"),co=n("my_dataset"),mo=n(" and be loaded with:"),js=p(),m(At.$$.fragment),ks=p(),ye=s("p"),_o=n("The following guide includes instructions for dataset scripts for how to:"),Is=p(),x=s("ul"),Je=s("li"),go=n("Add dataset metadata."),yo=p(),Ke=s("li"),wo=n("Download data files."),vo=p(),Ze=s("li"),$o=n("Generate samples."),Eo=p(),ta=s("li"),qo=n("Test if your dataset was generated correctly."),bo=p(),ea=s("li"),jo=n("Create a Dataset card."),ko=p(),aa=s("li"),Io=n("Upload a dataset to the Hugging Face Hub or GitHub."),xs=p(),st=s("p"),xo=n("Open the "),Tt=s("a"),So=n("SQuAD dataset loading script"),Do=n(" template to follow along on how to share a dataset."),Ss=p(),m(lt.$$.fragment),Ds=p(),M=s("h2"),ot=s("a"),sa=s("span"),m(Lt.$$.fragment),Ao=p(),la=s("span"),To=n("Add dataset attributes"),As=p(),rt=s("p"),Lo=n("The first step is to add some information, or attributes, about your dataset in "),oa=s("code"),Co=n("DatasetBuilder._info()"),Oo=n(". The most important attributes you should specify are:"),Ts=p(),nt=s("ol"),ra=s("li"),we=s("p"),na=s("code"),No=n("DatasetInfo.description"),Po=n(" provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),Ro=p(),ia=s("li"),it=s("p"),da=s("code"),Go=n("DatasetInfo.features"),Uo=n(" defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),ve=s("a"),Bo=n("Features"),Vo=n(" for a full list of feature types you can use."),Ls=p(),m(Ct.$$.fragment),Cs=p(),H=s("ol"),pa=s("li"),$e=s("p"),ua=s("code"),zo=n("DatasetInfo.homepage"),Fo=n(" contains the URL to the dataset homepage so users can find more details about the dataset."),Mo=p(),fa=s("li"),Ee=s("p"),ha=s("code"),Ho=n("DatasetInfo.citation"),Qo=n(" contains a BibTeX citation for the dataset."),Os=p(),qe=s("p"),Yo=n("After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),Ns=p(),m(Ot.$$.fragment),Ps=p(),Q=s("h3"),dt=s("a"),ca=s("span"),m(Nt.$$.fragment),Wo=p(),ma=s("span"),Xo=n("Multiple configurations"),Rs=p(),U=s("p"),Jo=n("In some cases, your dataset may have multiple configurations. For example, the "),Pt=s("a"),Ko=n("SuperGLUE"),Zo=n(" dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),be=s("a"),tr=n("BuilderConfig"),er=n(" which allows you to create different configurations for the user to select from."),Gs=p(),pt=s("p"),ar=n("Let\u2019s study the "),Rt=s("a"),sr=n("SuperGLUE loading script"),lr=n(" to see how you can define several configurations."),Us=p(),je=s("ol"),Gt=s("li"),or=n("Create a "),ke=s("a"),rr=n("BuilderConfig"),nr=n(" subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Bs=p(),m(Ut.$$.fragment),Vs=p(),Bt=s("ol"),Vt=s("li"),ir=n("Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),_a=s("code"),dr=n("DatasetBuilder.BUILDER_CONFIGS"),pr=n(":"),zs=p(),m(zt.$$.fragment),Fs=p(),Ft=s("ol"),Mt=s("li"),ur=n("Now, users can load a specific configuration of the dataset with the configuration "),ga=s("code"),fr=n("name"),hr=n(":"),Ms=p(),m(Ht.$$.fragment),Hs=p(),Y=s("h3"),ut=s("a"),ya=s("span"),m(Qt.$$.fragment),cr=p(),wa=s("span"),mr=n("Default configurations"),Qs=p(),B=s("p"),_r=n("Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),va=s("code"),gr=n("ValueError"),yr=n(", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),$a=s("code"),wr=n("DEFAULT_CONFIG_NAME"),vr=n(" attribute:"),Ys=p(),m(Yt.$$.fragment),Ws=p(),m(ft.$$.fragment),Xs=p(),W=s("h2"),ht=s("a"),Ea=s("span"),m(Wt.$$.fragment),$r=p(),qa=s("span"),Er=n("Download data files and organize splits"),Js=p(),Ie=s("p"),qr=n("After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),Ks=p(),xe=s("ol"),ba=s("li"),br=n("Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),Zs=p(),m(Xt.$$.fragment),tl=p(),m(ct.$$.fragment),el=p(),Jt=s("ol"),Kt=s("li"),mt=s("p"),Se=s("a"),jr=n("DownloadManager.download_and_extract()"),kr=n(" takes this dictionary and downloads the data files. Once the files are downloaded, use "),De=s("a"),Ir=n("SplitGenerator"),xr=n(" to organize each split in the dataset. This is a simple class that contains:"),Sr=p(),Zt=s("ul"),ja=s("li"),T=s("p"),Dr=n("The "),ka=s("code"),Ar=n("name"),Tr=n(" of each split. You should use the standard split names: "),Ia=s("code"),Lr=n("Split.TRAIN"),Cr=n(", "),xa=s("code"),Or=n("Split.TEST"),Nr=n(", and "),Sa=s("code"),Pr=n("Split.VALIDATION"),Rr=n("."),Gr=p(),Da=s("li"),Ae=s("p"),Aa=s("code"),Ur=n("gen_kwargs"),Br=n(" provides the file paths to the data files to load for each split."),al=p(),_t=s("p"),Vr=n("Your "),Ta=s("code"),zr=n("DatasetBuilder._split_generator()"),Fr=n(" should look like this now:"),sl=p(),m(te.$$.fragment),ll=p(),X=s("h2"),gt=s("a"),La=s("span"),m(ee.$$.fragment),Mr=p(),Ca=s("span"),Hr=n("Generate samples"),ol=p(),Te=s("p"),Qr=n("At this point, you have:"),rl=p(),V=s("ul"),Oa=s("li"),Yr=n("Added the dataset attributes."),Wr=p(),Na=s("li"),Xr=n("Provided instructions for how to download the data files."),Jr=p(),Pa=s("li"),Kr=n("Organized the splits."),nl=p(),Le=s("p"),Zr=n("The next step is to actually generate the samples in each split."),il=p(),yt=s("ol"),Ra=s("li"),wt=s("p"),Ga=s("code"),tn=n("DatasetBuilder._generate_examples"),en=n(" takes the file path provided by "),Ua=s("code"),an=n("gen_kwargs"),sn=n(" to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),ln=p(),Ba=s("li"),ae=s("p"),on=n("Your function should yield a tuple of an "),Va=s("code"),rn=n("id_"),nn=n(", and an example from the dataset."),dl=p(),m(se.$$.fragment),pl=p(),J=s("h2"),vt=s("a"),za=s("span"),m(le.$$.fragment),dn=p(),Fa=s("span"),pn=n("Testing data and checksum metadata"),ul=p(),Ce=s("p"),un=n(`We strongly recommend adding testing data and checksum metadata to your dataset to verify and test its behavior. This ensures the generated dataset matches your expectations.
Testing data and checksum metadata are mandatory for datasets stored in the GitHub repository of the \u{1F917} Datasets library.`),fl=p(),m($t.$$.fragment),hl=p(),K=s("h3"),Et=s("a"),Ma=s("span"),m(oe.$$.fragment),fn=p(),Ha=s("span"),hn=n("Dataset metadata"),cl=p(),Oe=s("ol"),re=s("li"),cn=n("Run the following command to create the metadata file, "),Qa=s("code"),mn=n("dataset_infos.json"),_n=n(". This will also test your new dataset loading script and make sure it works correctly."),ml=p(),m(ne.$$.fragment),_l=p(),ie=s("ol"),R=s("li"),gn=n("If your dataset loading script passed the test, you should now have a "),Ya=s("code"),yn=n("dataset_infos.json"),wn=n(" file in your dataset folder. This file contains information about the dataset, like its "),Wa=s("code"),vn=n("features"),$n=n(" and "),Xa=s("code"),En=n("download_size"),qn=n("."),gl=p(),Z=s("h3"),qt=s("a"),Ja=s("span"),m(de.$$.fragment),bn=p(),Ka=s("span"),jn=n("(Optional) Dummy data"),yl=p(),Ne=s("p"),kn=n("If you want to be able to test your dataset script without downloading the full dataset, you need to create some dummy data for automated testing. There are two methods for generating dummy data: automatically and manually."),wl=p(),tt=s("h4"),bt=s("a"),Za=s("span"),m(pe.$$.fragment),In=p(),ts=s("span"),xn=n("Automatic"),vl=p(),Pe=s("p"),Sn=n("If your data file is one of the following formats, then you can automatically generate the dummy data:"),$l=p(),S=s("ul"),es=s("li"),Dn=n("txt"),An=p(),as=s("li"),Tn=n("csv"),Ln=p(),ss=s("li"),Cn=n("tsv"),On=p(),ls=s("li"),Nn=n("jsonl"),Pn=p(),os=s("li"),Rn=n("json"),Gn=p(),rs=s("li"),Un=n("xml"),El=p(),Re=s("p"),Bn=n("Run the command below to generate the dummy data:"),ql=p(),m(ue.$$.fragment),bl=p(),et=s("h4"),jt=s("a"),ns=s("span"),m(fe.$$.fragment),Vn=p(),is=s("span"),zn=n("Manual"),jl=p(),Ge=s("p"),Fn=n("If your data files are not among the supported formats, you will need to generate your dummy data manually. Run the command below to output detailed instructions on how to create the dummy data:"),kl=p(),m(he.$$.fragment),Il=p(),m(kt.$$.fragment),xl=p(),Ue=s("p"),Mn=n("There should be two new files in your dataset folder:"),Sl=p(),It=s("ul"),ds=s("li"),Be=s("p"),ps=s("code"),Hn=n("dataset_infos.json"),Qn=n(" stores the dataset metadata including the data file checksums, and the number of examples required to confirm the dataset was generated properly."),Yn=p(),us=s("li"),Ve=s("p"),fs=s("code"),Wn=n("dummy_data.zip"),Xn=n(" is a file used to test the behavior of the loading script without having to download the full dataset."),Dl=p(),at=s("h4"),xt=s("a"),hs=s("span"),m(ce.$$.fragment),Jn=p(),cs=s("span"),Kn=n("Run the tests"),Al=p(),St=s("p"),Zn=n("The last step is to actually test dataset generation with the real and dummy data. Clone the "),ms=s("code"),ti=n("huggingface/datasets"),ei=n(" repository and run the following command to test the real data:"),Tl=p(),m(me.$$.fragment),Ll=p(),ze=s("p"),ai=n("Test the dummy data:"),Cl=p(),m(_e.$$.fragment),Ol=p(),Fe=s("p"),si=n("If both tests pass, your dataset was generated correctly!"),this.h()},l(t){const r=wp('[data-svelte="svelte-1phssyn"]',document.head);h=l(r,"META",{name:!0,content:!0}),r.forEach(e),q=u(t),c=l(t,"H1",{class:!0});var ge=o(c);$=l(ge,"A",{id:!0,class:!0,href:!0});var _s=o($);k=l(_s,"SPAN",{});var gs=o(k);_(E.$$.fragment,gs),gs.forEach(e),_s.forEach(e),j=u(ge),I=l(ge,"SPAN",{});var ys=o(I);D=i(ys,"Create a dataset loading script"),ys.forEach(e),ge.forEach(e),b=u(t),C=l(t,"P",{});var ws=o(C);F=i(ws,"Write a dataset script to load and share your own datasets. It is a Python file that defines the different configurations and splits of your dataset, as well as how to download and process the data."),ws.forEach(e),bs=u(t),G=l(t,"P",{});var Me=o(G);uo=i(Me,"Any dataset script, for example "),We=l(Me,"CODE",{});var pi=o(We);fo=i(pi,"my_dataset.py"),pi.forEach(e),ho=i(Me,", can be placed in a folder or a repository named "),Xe=l(Me,"CODE",{});var ui=o(Xe);co=i(ui,"my_dataset"),ui.forEach(e),mo=i(Me," and be loaded with:"),Me.forEach(e),js=u(t),_(At.$$.fragment,t),ks=u(t),ye=l(t,"P",{});var fi=o(ye);_o=i(fi,"The following guide includes instructions for dataset scripts for how to:"),fi.forEach(e),Is=u(t),x=l(t,"UL",{});var O=o(x);Je=l(O,"LI",{});var hi=o(Je);go=i(hi,"Add dataset metadata."),hi.forEach(e),yo=u(O),Ke=l(O,"LI",{});var ci=o(Ke);wo=i(ci,"Download data files."),ci.forEach(e),vo=u(O),Ze=l(O,"LI",{});var mi=o(Ze);$o=i(mi,"Generate samples."),mi.forEach(e),Eo=u(O),ta=l(O,"LI",{});var _i=o(ta);qo=i(_i,"Test if your dataset was generated correctly."),_i.forEach(e),bo=u(O),ea=l(O,"LI",{});var gi=o(ea);jo=i(gi,"Create a Dataset card."),gi.forEach(e),ko=u(O),aa=l(O,"LI",{});var yi=o(aa);Io=i(yi,"Upload a dataset to the Hugging Face Hub or GitHub."),yi.forEach(e),O.forEach(e),xs=u(t),st=l(t,"P",{});var Pl=o(st);xo=i(Pl,"Open the "),Tt=l(Pl,"A",{href:!0,rel:!0});var wi=o(Tt);So=i(wi,"SQuAD dataset loading script"),wi.forEach(e),Do=i(Pl," template to follow along on how to share a dataset."),Pl.forEach(e),Ss=u(t),_(lt.$$.fragment,t),Ds=u(t),M=l(t,"H2",{class:!0});var Rl=o(M);ot=l(Rl,"A",{id:!0,class:!0,href:!0});var vi=o(ot);sa=l(vi,"SPAN",{});var $i=o(sa);_(Lt.$$.fragment,$i),$i.forEach(e),vi.forEach(e),Ao=u(Rl),la=l(Rl,"SPAN",{});var Ei=o(la);To=i(Ei,"Add dataset attributes"),Ei.forEach(e),Rl.forEach(e),As=u(t),rt=l(t,"P",{});var Gl=o(rt);Lo=i(Gl,"The first step is to add some information, or attributes, about your dataset in "),oa=l(Gl,"CODE",{});var qi=o(oa);Co=i(qi,"DatasetBuilder._info()"),qi.forEach(e),Oo=i(Gl,". The most important attributes you should specify are:"),Gl.forEach(e),Ts=u(t),nt=l(t,"OL",{});var Ul=o(nt);ra=l(Ul,"LI",{});var bi=o(ra);we=l(bi,"P",{});var li=o(we);na=l(li,"CODE",{});var ji=o(na);No=i(ji,"DatasetInfo.description"),ji.forEach(e),Po=i(li," provides a concise description of your dataset. The description informs the user what\u2019s in the dataset, how it was collected, and how it can be used for a NLP task."),li.forEach(e),bi.forEach(e),Ro=u(Ul),ia=l(Ul,"LI",{});var ki=o(ia);it=l(ki,"P",{});var vs=o(it);da=l(vs,"CODE",{});var Ii=o(da);Go=i(Ii,"DatasetInfo.features"),Ii.forEach(e),Uo=i(vs," defines the name and type of each column in your dataset. This will also provide the structure for each example, so it is possible to create nested subfields in a column if you want. Take a look at "),ve=l(vs,"A",{href:!0});var xi=o(ve);Bo=i(xi,"Features"),xi.forEach(e),Vo=i(vs," for a full list of feature types you can use."),vs.forEach(e),ki.forEach(e),Ul.forEach(e),Ls=u(t),_(Ct.$$.fragment,t),Cs=u(t),H=l(t,"OL",{start:!0});var Bl=o(H);pa=l(Bl,"LI",{});var Si=o(pa);$e=l(Si,"P",{});var oi=o($e);ua=l(oi,"CODE",{});var Di=o(ua);zo=i(Di,"DatasetInfo.homepage"),Di.forEach(e),Fo=i(oi," contains the URL to the dataset homepage so users can find more details about the dataset."),oi.forEach(e),Si.forEach(e),Mo=u(Bl),fa=l(Bl,"LI",{});var Ai=o(fa);Ee=l(Ai,"P",{});var ri=o(Ee);ha=l(ri,"CODE",{});var Ti=o(ha);Ho=i(Ti,"DatasetInfo.citation"),Ti.forEach(e),Qo=i(ri," contains a BibTeX citation for the dataset."),ri.forEach(e),Ai.forEach(e),Bl.forEach(e),Os=u(t),qe=l(t,"P",{});var Li=o(qe);Yo=i(Li,"After you\u2019ve filled out all these fields in the template, it should look like the following example from the SQuAD loading script:"),Li.forEach(e),Ns=u(t),_(Ot.$$.fragment,t),Ps=u(t),Q=l(t,"H3",{class:!0});var Vl=o(Q);dt=l(Vl,"A",{id:!0,class:!0,href:!0});var Ci=o(dt);ca=l(Ci,"SPAN",{});var Oi=o(ca);_(Nt.$$.fragment,Oi),Oi.forEach(e),Ci.forEach(e),Wo=u(Vl),ma=l(Vl,"SPAN",{});var Ni=o(ma);Xo=i(Ni,"Multiple configurations"),Ni.forEach(e),Vl.forEach(e),Rs=u(t),U=l(t,"P",{});var He=o(U);Jo=i(He,"In some cases, your dataset may have multiple configurations. For example, the "),Pt=l(He,"A",{href:!0,rel:!0});var Pi=o(Pt);Ko=i(Pi,"SuperGLUE"),Pi.forEach(e),Zo=i(He," dataset is a collection of 5 datasets designed to evaluate language understanding tasks. \u{1F917} Datasets provides "),be=l(He,"A",{href:!0});var Ri=o(be);tr=i(Ri,"BuilderConfig"),Ri.forEach(e),er=i(He," which allows you to create different configurations for the user to select from."),He.forEach(e),Gs=u(t),pt=l(t,"P",{});var zl=o(pt);ar=i(zl,"Let\u2019s study the "),Rt=l(zl,"A",{href:!0,rel:!0});var Gi=o(Rt);sr=i(Gi,"SuperGLUE loading script"),Gi.forEach(e),lr=i(zl," to see how you can define several configurations."),zl.forEach(e),Us=u(t),je=l(t,"OL",{});var Ui=o(je);Gt=l(Ui,"LI",{});var Fl=o(Gt);or=i(Fl,"Create a "),ke=l(Fl,"A",{href:!0});var Bi=o(ke);rr=i(Bi,"BuilderConfig"),Bi.forEach(e),nr=i(Fl," subclass with attributes about your dataset. These attributes can be the features of your dataset, label classes, and a URL to the data files."),Fl.forEach(e),Ui.forEach(e),Bs=u(t),_(Ut.$$.fragment,t),Vs=u(t),Bt=l(t,"OL",{start:!0});var Vi=o(Bt);Vt=l(Vi,"LI",{});var Ml=o(Vt);ir=i(Ml,"Create instances of your config to specify the values of the attributes of each configuration. This gives you the flexibility to specify all the name and description of each configuration. These sub-class instances should be listed under "),_a=l(Ml,"CODE",{});var zi=o(_a);dr=i(zi,"DatasetBuilder.BUILDER_CONFIGS"),zi.forEach(e),pr=i(Ml,":"),Ml.forEach(e),Vi.forEach(e),zs=u(t),_(zt.$$.fragment,t),Fs=u(t),Ft=l(t,"OL",{start:!0});var Fi=o(Ft);Mt=l(Fi,"LI",{});var Hl=o(Mt);ur=i(Hl,"Now, users can load a specific configuration of the dataset with the configuration "),ga=l(Hl,"CODE",{});var Mi=o(ga);fr=i(Mi,"name"),Mi.forEach(e),hr=i(Hl,":"),Hl.forEach(e),Fi.forEach(e),Ms=u(t),_(Ht.$$.fragment,t),Hs=u(t),Y=l(t,"H3",{class:!0});var Ql=o(Y);ut=l(Ql,"A",{id:!0,class:!0,href:!0});var Hi=o(ut);ya=l(Hi,"SPAN",{});var Qi=o(ya);_(Qt.$$.fragment,Qi),Qi.forEach(e),Hi.forEach(e),cr=u(Ql),wa=l(Ql,"SPAN",{});var Yi=o(wa);mr=i(Yi,"Default configurations"),Yi.forEach(e),Ql.forEach(e),Qs=u(t),B=l(t,"P",{});var Qe=o(B);_r=i(Qe,"Users must specify a configuration name when they load a dataset with multiple configurations. Otherwise, \u{1F917} Datasets will raise a "),va=l(Qe,"CODE",{});var Wi=o(va);gr=i(Wi,"ValueError"),Wi.forEach(e),yr=i(Qe,", and prompt the user to select a configuration name. You can avoid this by setting a default dataset configuration with the "),$a=l(Qe,"CODE",{});var Xi=o($a);wr=i(Xi,"DEFAULT_CONFIG_NAME"),Xi.forEach(e),vr=i(Qe," attribute:"),Qe.forEach(e),Ys=u(t),_(Yt.$$.fragment,t),Ws=u(t),_(ft.$$.fragment,t),Xs=u(t),W=l(t,"H2",{class:!0});var Yl=o(W);ht=l(Yl,"A",{id:!0,class:!0,href:!0});var Ji=o(ht);Ea=l(Ji,"SPAN",{});var Ki=o(Ea);_(Wt.$$.fragment,Ki),Ki.forEach(e),Ji.forEach(e),$r=u(Yl),qa=l(Yl,"SPAN",{});var Zi=o(qa);Er=i(Zi,"Download data files and organize splits"),Zi.forEach(e),Yl.forEach(e),Js=u(t),Ie=l(t,"P",{});var td=o(Ie);qr=i(td,"After you\u2019ve defined the attributes of your dataset, the next step is to download the data files and organize them according to their splits."),td.forEach(e),Ks=u(t),xe=l(t,"OL",{});var ed=o(xe);ba=l(ed,"LI",{});var ad=o(ba);br=i(ad,"Create a dictionary of URLs in the loading script that point to the original SQuAD data files:"),ad.forEach(e),ed.forEach(e),Zs=u(t),_(Xt.$$.fragment,t),tl=u(t),_(ct.$$.fragment,t),el=u(t),Jt=l(t,"OL",{start:!0});var sd=o(Jt);Kt=l(sd,"LI",{});var Wl=o(Kt);mt=l(Wl,"P",{});var $s=o(mt);Se=l($s,"A",{href:!0});var ld=o(Se);jr=i(ld,"DownloadManager.download_and_extract()"),ld.forEach(e),kr=i($s," takes this dictionary and downloads the data files. Once the files are downloaded, use "),De=l($s,"A",{href:!0});var od=o(De);Ir=i(od,"SplitGenerator"),od.forEach(e),xr=i($s," to organize each split in the dataset. This is a simple class that contains:"),$s.forEach(e),Sr=u(Wl),Zt=l(Wl,"UL",{});var Xl=o(Zt);ja=l(Xl,"LI",{});var rd=o(ja);T=l(rd,"P",{});var z=o(T);Dr=i(z,"The "),ka=l(z,"CODE",{});var nd=o(ka);Ar=i(nd,"name"),nd.forEach(e),Tr=i(z," of each split. You should use the standard split names: "),Ia=l(z,"CODE",{});var id=o(Ia);Lr=i(id,"Split.TRAIN"),id.forEach(e),Cr=i(z,", "),xa=l(z,"CODE",{});var dd=o(xa);Or=i(dd,"Split.TEST"),dd.forEach(e),Nr=i(z,", and "),Sa=l(z,"CODE",{});var pd=o(Sa);Pr=i(pd,"Split.VALIDATION"),pd.forEach(e),Rr=i(z,"."),z.forEach(e),rd.forEach(e),Gr=u(Xl),Da=l(Xl,"LI",{});var ud=o(Da);Ae=l(ud,"P",{});var ni=o(Ae);Aa=l(ni,"CODE",{});var fd=o(Aa);Ur=i(fd,"gen_kwargs"),fd.forEach(e),Br=i(ni," provides the file paths to the data files to load for each split."),ni.forEach(e),ud.forEach(e),Xl.forEach(e),Wl.forEach(e),sd.forEach(e),al=u(t),_t=l(t,"P",{});var Jl=o(_t);Vr=i(Jl,"Your "),Ta=l(Jl,"CODE",{});var hd=o(Ta);zr=i(hd,"DatasetBuilder._split_generator()"),hd.forEach(e),Fr=i(Jl," should look like this now:"),Jl.forEach(e),sl=u(t),_(te.$$.fragment,t),ll=u(t),X=l(t,"H2",{class:!0});var Kl=o(X);gt=l(Kl,"A",{id:!0,class:!0,href:!0});var cd=o(gt);La=l(cd,"SPAN",{});var md=o(La);_(ee.$$.fragment,md),md.forEach(e),cd.forEach(e),Mr=u(Kl),Ca=l(Kl,"SPAN",{});var _d=o(Ca);Hr=i(_d,"Generate samples"),_d.forEach(e),Kl.forEach(e),ol=u(t),Te=l(t,"P",{});var gd=o(Te);Qr=i(gd,"At this point, you have:"),gd.forEach(e),rl=u(t),V=l(t,"UL",{});var Ye=o(V);Oa=l(Ye,"LI",{});var yd=o(Oa);Yr=i(yd,"Added the dataset attributes."),yd.forEach(e),Wr=u(Ye),Na=l(Ye,"LI",{});var wd=o(Na);Xr=i(wd,"Provided instructions for how to download the data files."),wd.forEach(e),Jr=u(Ye),Pa=l(Ye,"LI",{});var vd=o(Pa);Kr=i(vd,"Organized the splits."),vd.forEach(e),Ye.forEach(e),nl=u(t),Le=l(t,"P",{});var $d=o(Le);Zr=i($d,"The next step is to actually generate the samples in each split."),$d.forEach(e),il=u(t),yt=l(t,"OL",{});var Zl=o(yt);Ra=l(Zl,"LI",{});var Ed=o(Ra);wt=l(Ed,"P",{});var Es=o(wt);Ga=l(Es,"CODE",{});var qd=o(Ga);tn=i(qd,"DatasetBuilder._generate_examples"),qd.forEach(e),en=i(Es," takes the file path provided by "),Ua=l(Es,"CODE",{});var bd=o(Ua);an=i(bd,"gen_kwargs"),bd.forEach(e),sn=i(Es," to read and parse the data files. You need to write a function that loads the data files and extracts the columns."),Es.forEach(e),Ed.forEach(e),ln=u(Zl),Ba=l(Zl,"LI",{});var jd=o(Ba);ae=l(jd,"P",{});var to=o(ae);on=i(to,"Your function should yield a tuple of an "),Va=l(to,"CODE",{});var kd=o(Va);rn=i(kd,"id_"),kd.forEach(e),nn=i(to,", and an example from the dataset."),to.forEach(e),jd.forEach(e),Zl.forEach(e),dl=u(t),_(se.$$.fragment,t),pl=u(t),J=l(t,"H2",{class:!0});var eo=o(J);vt=l(eo,"A",{id:!0,class:!0,href:!0});var Id=o(vt);za=l(Id,"SPAN",{});var xd=o(za);_(le.$$.fragment,xd),xd.forEach(e),Id.forEach(e),dn=u(eo),Fa=l(eo,"SPAN",{});var Sd=o(Fa);pn=i(Sd,"Testing data and checksum metadata"),Sd.forEach(e),eo.forEach(e),ul=u(t),Ce=l(t,"P",{});var Dd=o(Ce);un=i(Dd,`We strongly recommend adding testing data and checksum metadata to your dataset to verify and test its behavior. This ensures the generated dataset matches your expectations.
Testing data and checksum metadata are mandatory for datasets stored in the GitHub repository of the \u{1F917} Datasets library.`),Dd.forEach(e),fl=u(t),_($t.$$.fragment,t),hl=u(t),K=l(t,"H3",{class:!0});var ao=o(K);Et=l(ao,"A",{id:!0,class:!0,href:!0});var Ad=o(Et);Ma=l(Ad,"SPAN",{});var Td=o(Ma);_(oe.$$.fragment,Td),Td.forEach(e),Ad.forEach(e),fn=u(ao),Ha=l(ao,"SPAN",{});var Ld=o(Ha);hn=i(Ld,"Dataset metadata"),Ld.forEach(e),ao.forEach(e),cl=u(t),Oe=l(t,"OL",{});var Cd=o(Oe);re=l(Cd,"LI",{});var so=o(re);cn=i(so,"Run the following command to create the metadata file, "),Qa=l(so,"CODE",{});var Od=o(Qa);mn=i(Od,"dataset_infos.json"),Od.forEach(e),_n=i(so,". This will also test your new dataset loading script and make sure it works correctly."),so.forEach(e),Cd.forEach(e),ml=u(t),_(ne.$$.fragment,t),_l=u(t),ie=l(t,"OL",{start:!0});var Nd=o(ie);R=l(Nd,"LI",{});var Dt=o(R);gn=i(Dt,"If your dataset loading script passed the test, you should now have a "),Ya=l(Dt,"CODE",{});var Pd=o(Ya);yn=i(Pd,"dataset_infos.json"),Pd.forEach(e),wn=i(Dt," file in your dataset folder. This file contains information about the dataset, like its "),Wa=l(Dt,"CODE",{});var Rd=o(Wa);vn=i(Rd,"features"),Rd.forEach(e),$n=i(Dt," and "),Xa=l(Dt,"CODE",{});var Gd=o(Xa);En=i(Gd,"download_size"),Gd.forEach(e),qn=i(Dt,"."),Dt.forEach(e),Nd.forEach(e),gl=u(t),Z=l(t,"H3",{class:!0});var lo=o(Z);qt=l(lo,"A",{id:!0,class:!0,href:!0});var Ud=o(qt);Ja=l(Ud,"SPAN",{});var Bd=o(Ja);_(de.$$.fragment,Bd),Bd.forEach(e),Ud.forEach(e),bn=u(lo),Ka=l(lo,"SPAN",{});var Vd=o(Ka);jn=i(Vd,"(Optional) Dummy data"),Vd.forEach(e),lo.forEach(e),yl=u(t),Ne=l(t,"P",{});var zd=o(Ne);kn=i(zd,"If you want to be able to test your dataset script without downloading the full dataset, you need to create some dummy data for automated testing. There are two methods for generating dummy data: automatically and manually."),zd.forEach(e),wl=u(t),tt=l(t,"H4",{class:!0});var oo=o(tt);bt=l(oo,"A",{id:!0,class:!0,href:!0});var Fd=o(bt);Za=l(Fd,"SPAN",{});var Md=o(Za);_(pe.$$.fragment,Md),Md.forEach(e),Fd.forEach(e),In=u(oo),ts=l(oo,"SPAN",{});var Hd=o(ts);xn=i(Hd,"Automatic"),Hd.forEach(e),oo.forEach(e),vl=u(t),Pe=l(t,"P",{});var Qd=o(Pe);Sn=i(Qd,"If your data file is one of the following formats, then you can automatically generate the dummy data:"),Qd.forEach(e),$l=u(t),S=l(t,"UL",{});var N=o(S);es=l(N,"LI",{});var Yd=o(es);Dn=i(Yd,"txt"),Yd.forEach(e),An=u(N),as=l(N,"LI",{});var Wd=o(as);Tn=i(Wd,"csv"),Wd.forEach(e),Ln=u(N),ss=l(N,"LI",{});var Xd=o(ss);Cn=i(Xd,"tsv"),Xd.forEach(e),On=u(N),ls=l(N,"LI",{});var Jd=o(ls);Nn=i(Jd,"jsonl"),Jd.forEach(e),Pn=u(N),os=l(N,"LI",{});var Kd=o(os);Rn=i(Kd,"json"),Kd.forEach(e),Gn=u(N),rs=l(N,"LI",{});var Zd=o(rs);Un=i(Zd,"xml"),Zd.forEach(e),N.forEach(e),El=u(t),Re=l(t,"P",{});var tp=o(Re);Bn=i(tp,"Run the command below to generate the dummy data:"),tp.forEach(e),ql=u(t),_(ue.$$.fragment,t),bl=u(t),et=l(t,"H4",{class:!0});var ro=o(et);jt=l(ro,"A",{id:!0,class:!0,href:!0});var ep=o(jt);ns=l(ep,"SPAN",{});var ap=o(ns);_(fe.$$.fragment,ap),ap.forEach(e),ep.forEach(e),Vn=u(ro),is=l(ro,"SPAN",{});var sp=o(is);zn=i(sp,"Manual"),sp.forEach(e),ro.forEach(e),jl=u(t),Ge=l(t,"P",{});var lp=o(Ge);Fn=i(lp,"If your data files are not among the supported formats, you will need to generate your dummy data manually. Run the command below to output detailed instructions on how to create the dummy data:"),lp.forEach(e),kl=u(t),_(he.$$.fragment,t),Il=u(t),_(kt.$$.fragment,t),xl=u(t),Ue=l(t,"P",{});var op=o(Ue);Mn=i(op,"There should be two new files in your dataset folder:"),op.forEach(e),Sl=u(t),It=l(t,"UL",{});var no=o(It);ds=l(no,"LI",{});var rp=o(ds);Be=l(rp,"P",{});var ii=o(Be);ps=l(ii,"CODE",{});var np=o(ps);Hn=i(np,"dataset_infos.json"),np.forEach(e),Qn=i(ii," stores the dataset metadata including the data file checksums, and the number of examples required to confirm the dataset was generated properly."),ii.forEach(e),rp.forEach(e),Yn=u(no),us=l(no,"LI",{});var ip=o(us);Ve=l(ip,"P",{});var di=o(Ve);fs=l(di,"CODE",{});var dp=o(fs);Wn=i(dp,"dummy_data.zip"),dp.forEach(e),Xn=i(di," is a file used to test the behavior of the loading script without having to download the full dataset."),di.forEach(e),ip.forEach(e),no.forEach(e),Dl=u(t),at=l(t,"H4",{class:!0});var io=o(at);xt=l(io,"A",{id:!0,class:!0,href:!0});var pp=o(xt);hs=l(pp,"SPAN",{});var up=o(hs);_(ce.$$.fragment,up),up.forEach(e),pp.forEach(e),Jn=u(io),cs=l(io,"SPAN",{});var fp=o(cs);Kn=i(fp,"Run the tests"),fp.forEach(e),io.forEach(e),Al=u(t),St=l(t,"P",{});var po=o(St);Zn=i(po,"The last step is to actually test dataset generation with the real and dummy data. Clone the "),ms=l(po,"CODE",{});var hp=o(ms);ti=i(hp,"huggingface/datasets"),hp.forEach(e),ei=i(po," repository and run the following command to test the real data:"),po.forEach(e),Tl=u(t),_(me.$$.fragment,t),Ll=u(t),ze=l(t,"P",{});var cp=o(ze);ai=i(cp,"Test the dummy data:"),cp.forEach(e),Cl=u(t),_(_e.$$.fragment,t),Ol=u(t),Fe=l(t,"P",{});var mp=o(Fe);si=i(mp,"If both tests pass, your dataset was generated correctly!"),mp.forEach(e),this.h()},h(){f(h,"name","hf:doc:metadata"),f(h,"content",JSON.stringify(Ip)),f($,"id","create-a-dataset-loading-script"),f($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f($,"href","#create-a-dataset-loading-script"),f(c,"class","relative group"),f(Tt,"href","https://github.com/huggingface/datasets/blob/master/datasets/squad/squad.py"),f(Tt,"rel","nofollow"),f(ot,"id","add-dataset-attributes"),f(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ot,"href","#add-dataset-attributes"),f(M,"class","relative group"),f(ve,"href","/docs/datasets/pr_4322/en/package_reference/main_classes#datasets.Features"),f(H,"start","3"),f(dt,"id","multiple-configurations"),f(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(dt,"href","#multiple-configurations"),f(Q,"class","relative group"),f(Pt,"href","https://huggingface.co/datasets/super_glue"),f(Pt,"rel","nofollow"),f(be,"href","/docs/datasets/pr_4322/en/package_reference/builder_classes#datasets.BuilderConfig"),f(Rt,"href","https://github.com/huggingface/datasets/blob/master/datasets/super_glue/super_glue.py"),f(Rt,"rel","nofollow"),f(ke,"href","/docs/datasets/pr_4322/en/package_reference/builder_classes#datasets.BuilderConfig"),f(Bt,"start","2"),f(Ft,"start","3"),f(ut,"id","default-configurations"),f(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ut,"href","#default-configurations"),f(Y,"class","relative group"),f(ht,"id","download-data-files-and-organize-splits"),f(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ht,"href","#download-data-files-and-organize-splits"),f(W,"class","relative group"),f(Se,"href","/docs/datasets/pr_4322/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract"),f(De,"href","/docs/datasets/pr_4322/en/package_reference/builder_classes#datasets.SplitGenerator"),f(Jt,"start","2"),f(gt,"id","generate-samples"),f(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(gt,"href","#generate-samples"),f(X,"class","relative group"),f(vt,"id","testing-data-and-checksum-metadata"),f(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(vt,"href","#testing-data-and-checksum-metadata"),f(J,"class","relative group"),f(Et,"id","dataset-metadata"),f(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Et,"href","#dataset-metadata"),f(K,"class","relative group"),f(ie,"start","2"),f(qt,"id","optional-dummy-data"),f(qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(qt,"href","#optional-dummy-data"),f(Z,"class","relative group"),f(bt,"id","automatic"),f(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(bt,"href","#automatic"),f(tt,"class","relative group"),f(jt,"id","manual"),f(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(jt,"href","#manual"),f(et,"class","relative group"),f(xt,"id","run-the-tests"),f(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xt,"href","#run-the-tests"),f(at,"class","relative group")},m(t,r){a(document.head,h),d(t,q,r),d(t,c,r),a(c,$),a($,k),g(E,k,null),a(c,j),a(c,I),a(I,D),d(t,b,r),d(t,C,r),a(C,F),d(t,bs,r),d(t,G,r),a(G,uo),a(G,We),a(We,fo),a(G,ho),a(G,Xe),a(Xe,co),a(G,mo),d(t,js,r),g(At,t,r),d(t,ks,r),d(t,ye,r),a(ye,_o),d(t,Is,r),d(t,x,r),a(x,Je),a(Je,go),a(x,yo),a(x,Ke),a(Ke,wo),a(x,vo),a(x,Ze),a(Ze,$o),a(x,Eo),a(x,ta),a(ta,qo),a(x,bo),a(x,ea),a(ea,jo),a(x,ko),a(x,aa),a(aa,Io),d(t,xs,r),d(t,st,r),a(st,xo),a(st,Tt),a(Tt,So),a(st,Do),d(t,Ss,r),g(lt,t,r),d(t,Ds,r),d(t,M,r),a(M,ot),a(ot,sa),g(Lt,sa,null),a(M,Ao),a(M,la),a(la,To),d(t,As,r),d(t,rt,r),a(rt,Lo),a(rt,oa),a(oa,Co),a(rt,Oo),d(t,Ts,r),d(t,nt,r),a(nt,ra),a(ra,we),a(we,na),a(na,No),a(we,Po),a(nt,Ro),a(nt,ia),a(ia,it),a(it,da),a(da,Go),a(it,Uo),a(it,ve),a(ve,Bo),a(it,Vo),d(t,Ls,r),g(Ct,t,r),d(t,Cs,r),d(t,H,r),a(H,pa),a(pa,$e),a($e,ua),a(ua,zo),a($e,Fo),a(H,Mo),a(H,fa),a(fa,Ee),a(Ee,ha),a(ha,Ho),a(Ee,Qo),d(t,Os,r),d(t,qe,r),a(qe,Yo),d(t,Ns,r),g(Ot,t,r),d(t,Ps,r),d(t,Q,r),a(Q,dt),a(dt,ca),g(Nt,ca,null),a(Q,Wo),a(Q,ma),a(ma,Xo),d(t,Rs,r),d(t,U,r),a(U,Jo),a(U,Pt),a(Pt,Ko),a(U,Zo),a(U,be),a(be,tr),a(U,er),d(t,Gs,r),d(t,pt,r),a(pt,ar),a(pt,Rt),a(Rt,sr),a(pt,lr),d(t,Us,r),d(t,je,r),a(je,Gt),a(Gt,or),a(Gt,ke),a(ke,rr),a(Gt,nr),d(t,Bs,r),g(Ut,t,r),d(t,Vs,r),d(t,Bt,r),a(Bt,Vt),a(Vt,ir),a(Vt,_a),a(_a,dr),a(Vt,pr),d(t,zs,r),g(zt,t,r),d(t,Fs,r),d(t,Ft,r),a(Ft,Mt),a(Mt,ur),a(Mt,ga),a(ga,fr),a(Mt,hr),d(t,Ms,r),g(Ht,t,r),d(t,Hs,r),d(t,Y,r),a(Y,ut),a(ut,ya),g(Qt,ya,null),a(Y,cr),a(Y,wa),a(wa,mr),d(t,Qs,r),d(t,B,r),a(B,_r),a(B,va),a(va,gr),a(B,yr),a(B,$a),a($a,wr),a(B,vr),d(t,Ys,r),g(Yt,t,r),d(t,Ws,r),g(ft,t,r),d(t,Xs,r),d(t,W,r),a(W,ht),a(ht,Ea),g(Wt,Ea,null),a(W,$r),a(W,qa),a(qa,Er),d(t,Js,r),d(t,Ie,r),a(Ie,qr),d(t,Ks,r),d(t,xe,r),a(xe,ba),a(ba,br),d(t,Zs,r),g(Xt,t,r),d(t,tl,r),g(ct,t,r),d(t,el,r),d(t,Jt,r),a(Jt,Kt),a(Kt,mt),a(mt,Se),a(Se,jr),a(mt,kr),a(mt,De),a(De,Ir),a(mt,xr),a(Kt,Sr),a(Kt,Zt),a(Zt,ja),a(ja,T),a(T,Dr),a(T,ka),a(ka,Ar),a(T,Tr),a(T,Ia),a(Ia,Lr),a(T,Cr),a(T,xa),a(xa,Or),a(T,Nr),a(T,Sa),a(Sa,Pr),a(T,Rr),a(Zt,Gr),a(Zt,Da),a(Da,Ae),a(Ae,Aa),a(Aa,Ur),a(Ae,Br),d(t,al,r),d(t,_t,r),a(_t,Vr),a(_t,Ta),a(Ta,zr),a(_t,Fr),d(t,sl,r),g(te,t,r),d(t,ll,r),d(t,X,r),a(X,gt),a(gt,La),g(ee,La,null),a(X,Mr),a(X,Ca),a(Ca,Hr),d(t,ol,r),d(t,Te,r),a(Te,Qr),d(t,rl,r),d(t,V,r),a(V,Oa),a(Oa,Yr),a(V,Wr),a(V,Na),a(Na,Xr),a(V,Jr),a(V,Pa),a(Pa,Kr),d(t,nl,r),d(t,Le,r),a(Le,Zr),d(t,il,r),d(t,yt,r),a(yt,Ra),a(Ra,wt),a(wt,Ga),a(Ga,tn),a(wt,en),a(wt,Ua),a(Ua,an),a(wt,sn),a(yt,ln),a(yt,Ba),a(Ba,ae),a(ae,on),a(ae,Va),a(Va,rn),a(ae,nn),d(t,dl,r),g(se,t,r),d(t,pl,r),d(t,J,r),a(J,vt),a(vt,za),g(le,za,null),a(J,dn),a(J,Fa),a(Fa,pn),d(t,ul,r),d(t,Ce,r),a(Ce,un),d(t,fl,r),g($t,t,r),d(t,hl,r),d(t,K,r),a(K,Et),a(Et,Ma),g(oe,Ma,null),a(K,fn),a(K,Ha),a(Ha,hn),d(t,cl,r),d(t,Oe,r),a(Oe,re),a(re,cn),a(re,Qa),a(Qa,mn),a(re,_n),d(t,ml,r),g(ne,t,r),d(t,_l,r),d(t,ie,r),a(ie,R),a(R,gn),a(R,Ya),a(Ya,yn),a(R,wn),a(R,Wa),a(Wa,vn),a(R,$n),a(R,Xa),a(Xa,En),a(R,qn),d(t,gl,r),d(t,Z,r),a(Z,qt),a(qt,Ja),g(de,Ja,null),a(Z,bn),a(Z,Ka),a(Ka,jn),d(t,yl,r),d(t,Ne,r),a(Ne,kn),d(t,wl,r),d(t,tt,r),a(tt,bt),a(bt,Za),g(pe,Za,null),a(tt,In),a(tt,ts),a(ts,xn),d(t,vl,r),d(t,Pe,r),a(Pe,Sn),d(t,$l,r),d(t,S,r),a(S,es),a(es,Dn),a(S,An),a(S,as),a(as,Tn),a(S,Ln),a(S,ss),a(ss,Cn),a(S,On),a(S,ls),a(ls,Nn),a(S,Pn),a(S,os),a(os,Rn),a(S,Gn),a(S,rs),a(rs,Un),d(t,El,r),d(t,Re,r),a(Re,Bn),d(t,ql,r),g(ue,t,r),d(t,bl,r),d(t,et,r),a(et,jt),a(jt,ns),g(fe,ns,null),a(et,Vn),a(et,is),a(is,zn),d(t,jl,r),d(t,Ge,r),a(Ge,Fn),d(t,kl,r),g(he,t,r),d(t,Il,r),g(kt,t,r),d(t,xl,r),d(t,Ue,r),a(Ue,Mn),d(t,Sl,r),d(t,It,r),a(It,ds),a(ds,Be),a(Be,ps),a(ps,Hn),a(Be,Qn),a(It,Yn),a(It,us),a(us,Ve),a(Ve,fs),a(fs,Wn),a(Ve,Xn),d(t,Dl,r),d(t,at,r),a(at,xt),a(xt,hs),g(ce,hs,null),a(at,Jn),a(at,cs),a(cs,Kn),d(t,Al,r),d(t,St,r),a(St,Zn),a(St,ms),a(ms,ti),a(St,ei),d(t,Tl,r),g(me,t,r),d(t,Ll,r),d(t,ze,r),a(ze,ai),d(t,Cl,r),g(_e,t,r),d(t,Ol,r),d(t,Fe,r),a(Fe,si),Nl=!0},p(t,[r]){const ge={};r&2&&(ge.$$scope={dirty:r,ctx:t}),lt.$set(ge);const _s={};r&2&&(_s.$$scope={dirty:r,ctx:t}),ft.$set(_s);const gs={};r&2&&(gs.$$scope={dirty:r,ctx:t}),ct.$set(gs);const ys={};r&2&&(ys.$$scope={dirty:r,ctx:t}),$t.$set(ys);const ws={};r&2&&(ws.$$scope={dirty:r,ctx:t}),kt.$set(ws)},i(t){Nl||(y(E.$$.fragment,t),y(At.$$.fragment,t),y(lt.$$.fragment,t),y(Lt.$$.fragment,t),y(Ct.$$.fragment,t),y(Ot.$$.fragment,t),y(Nt.$$.fragment,t),y(Ut.$$.fragment,t),y(zt.$$.fragment,t),y(Ht.$$.fragment,t),y(Qt.$$.fragment,t),y(Yt.$$.fragment,t),y(ft.$$.fragment,t),y(Wt.$$.fragment,t),y(Xt.$$.fragment,t),y(ct.$$.fragment,t),y(te.$$.fragment,t),y(ee.$$.fragment,t),y(se.$$.fragment,t),y(le.$$.fragment,t),y($t.$$.fragment,t),y(oe.$$.fragment,t),y(ne.$$.fragment,t),y(de.$$.fragment,t),y(pe.$$.fragment,t),y(ue.$$.fragment,t),y(fe.$$.fragment,t),y(he.$$.fragment,t),y(kt.$$.fragment,t),y(ce.$$.fragment,t),y(me.$$.fragment,t),y(_e.$$.fragment,t),Nl=!0)},o(t){w(E.$$.fragment,t),w(At.$$.fragment,t),w(lt.$$.fragment,t),w(Lt.$$.fragment,t),w(Ct.$$.fragment,t),w(Ot.$$.fragment,t),w(Nt.$$.fragment,t),w(Ut.$$.fragment,t),w(zt.$$.fragment,t),w(Ht.$$.fragment,t),w(Qt.$$.fragment,t),w(Yt.$$.fragment,t),w(ft.$$.fragment,t),w(Wt.$$.fragment,t),w(Xt.$$.fragment,t),w(ct.$$.fragment,t),w(te.$$.fragment,t),w(ee.$$.fragment,t),w(se.$$.fragment,t),w(le.$$.fragment,t),w($t.$$.fragment,t),w(oe.$$.fragment,t),w(ne.$$.fragment,t),w(de.$$.fragment,t),w(pe.$$.fragment,t),w(ue.$$.fragment,t),w(fe.$$.fragment,t),w(he.$$.fragment,t),w(kt.$$.fragment,t),w(ce.$$.fragment,t),w(me.$$.fragment,t),w(_e.$$.fragment,t),Nl=!1},d(t){e(h),t&&e(q),t&&e(c),v(E),t&&e(b),t&&e(C),t&&e(bs),t&&e(G),t&&e(js),v(At,t),t&&e(ks),t&&e(ye),t&&e(Is),t&&e(x),t&&e(xs),t&&e(st),t&&e(Ss),v(lt,t),t&&e(Ds),t&&e(M),v(Lt),t&&e(As),t&&e(rt),t&&e(Ts),t&&e(nt),t&&e(Ls),v(Ct,t),t&&e(Cs),t&&e(H),t&&e(Os),t&&e(qe),t&&e(Ns),v(Ot,t),t&&e(Ps),t&&e(Q),v(Nt),t&&e(Rs),t&&e(U),t&&e(Gs),t&&e(pt),t&&e(Us),t&&e(je),t&&e(Bs),v(Ut,t),t&&e(Vs),t&&e(Bt),t&&e(zs),v(zt,t),t&&e(Fs),t&&e(Ft),t&&e(Ms),v(Ht,t),t&&e(Hs),t&&e(Y),v(Qt),t&&e(Qs),t&&e(B),t&&e(Ys),v(Yt,t),t&&e(Ws),v(ft,t),t&&e(Xs),t&&e(W),v(Wt),t&&e(Js),t&&e(Ie),t&&e(Ks),t&&e(xe),t&&e(Zs),v(Xt,t),t&&e(tl),v(ct,t),t&&e(el),t&&e(Jt),t&&e(al),t&&e(_t),t&&e(sl),v(te,t),t&&e(ll),t&&e(X),v(ee),t&&e(ol),t&&e(Te),t&&e(rl),t&&e(V),t&&e(nl),t&&e(Le),t&&e(il),t&&e(yt),t&&e(dl),v(se,t),t&&e(pl),t&&e(J),v(le),t&&e(ul),t&&e(Ce),t&&e(fl),v($t,t),t&&e(hl),t&&e(K),v(oe),t&&e(cl),t&&e(Oe),t&&e(ml),v(ne,t),t&&e(_l),t&&e(ie),t&&e(gl),t&&e(Z),v(de),t&&e(yl),t&&e(Ne),t&&e(wl),t&&e(tt),v(pe),t&&e(vl),t&&e(Pe),t&&e($l),t&&e(S),t&&e(El),t&&e(Re),t&&e(ql),v(ue,t),t&&e(bl),t&&e(et),v(fe),t&&e(jl),t&&e(Ge),t&&e(kl),v(he,t),t&&e(Il),v(kt,t),t&&e(xl),t&&e(Ue),t&&e(Sl),t&&e(It),t&&e(Dl),t&&e(at),v(ce),t&&e(Al),t&&e(St),t&&e(Tl),v(me,t),t&&e(Ll),t&&e(ze),t&&e(Cl),v(_e,t),t&&e(Ol),t&&e(Fe)}}}const Ip={local:"create-a-dataset-loading-script",sections:[{local:"add-dataset-attributes",sections:[{local:"multiple-configurations",title:"Multiple configurations"},{local:"default-configurations",title:"Default configurations"}],title:"Add dataset attributes"},{local:"download-data-files-and-organize-splits",title:"Download data files and organize splits"},{local:"generate-samples",title:"Generate samples"},{local:"testing-data-and-checksum-metadata",sections:[{local:"dataset-metadata",title:"Dataset metadata"},{local:"optional-dummy-data",sections:[{local:"automatic",title:"Automatic"},{local:"manual",title:"Manual"},{local:"run-the-tests",title:"Run the tests"}],title:"(Optional) Dummy data"}],title:"Testing data and checksum metadata"}],title:"Create a dataset loading script"};function xp(L){return vp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Lp extends _p{constructor(h){super();gp(this,h,xp,kp,yp,{})}}export{Lp as default,Ip as metadata};
