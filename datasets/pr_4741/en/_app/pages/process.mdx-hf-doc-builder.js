import{S as oj,i as pj,s as ij,e as l,k as c,w as d,t,M as cj,c as r,d as a,m as h,a as o,x as m,h as n,b as u,G as e,g as i,y as g,q as _,o as j,B as v,v as hj}from"../chunks/vendor-hf-doc-builder.js";import{T as Yn}from"../chunks/Tip-hf-doc-builder.js";import{I as A}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as x}from"../chunks/CodeBlock-hf-doc-builder.js";function uj(N){let f,E,b,y,k;return{c(){f=l("p"),E=t("All processing methods in this guide return a new "),b=l("a"),y=t("Dataset"),k=t(" object. Modification is not done in-place. Be careful about overriding your previous dataset!"),this.h()},l(w){f=r(w,"P",{});var $=o(f);E=n($,"All processing methods in this guide return a new "),b=r($,"A",{href:!0});var q=o(b);y=n(q,"Dataset"),q.forEach(a),k=n($," object. Modification is not done in-place. Be careful about overriding your previous dataset!"),$.forEach(a),this.h()},h(){u(b,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset")},m(w,$){i(w,f,$),e(f,E),e(f,b),e(b,y),e(f,k)},d(w){w&&a(f)}}}function fj(N){let f,E,b,y,k,w,$,q;return{c(){f=l("p"),E=t("Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),b=l("code"),y=t('Value("int32")'),k=t(" to "),w=l("code"),$=t('Value("bool")'),q=t(" if the original column only contains ones and zeros.")},l(S){f=r(S,"P",{});var P=o(f);E=n(P,"Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),b=r(P,"CODE",{});var R=o(b);y=n(R,'Value("int32")'),R.forEach(a),k=n(P," to "),w=r(P,"CODE",{});var M=o(w);$=n(M,'Value("bool")'),M.forEach(a),q=n(P," if the original column only contains ones and zeros."),P.forEach(a)},m(S,P){i(S,f,P),e(f,E),e(f,b),e(b,y),e(f,k),e(f,w),e(w,$),e(f,q)},d(S){S&&a(f)}}}function dj(N){let f,E,b,y,k;return{c(){f=l("p"),E=t("\u{1F917} Datasets also has a "),b=l("a"),y=t("remove_columns()"),k=t(" function which is faster because it doesn\u2019t copy the data of the remaining columns."),this.h()},l(w){f=r(w,"P",{});var $=o(f);E=n($,"\u{1F917} Datasets also has a "),b=r($,"A",{href:!0});var q=o(b);y=n(q,"remove_columns()"),q.forEach(a),k=n($," function which is faster because it doesn\u2019t copy the data of the remaining columns."),$.forEach(a),this.h()},h(){u(b,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.remove_columns")},m(w,$){i(w,f,$),e(f,E),e(f,b),e(b,y),e(f,k)},d(w){w&&a(f)}}}function mj(N){let f,E,b,y,k,w,$,q,S,P,R,M,Is,K,Q,Ls,T,I,Ye,Ge,L,We,Je;return{c(){f=l("p"),E=t("You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as "),b=l("em"),y=t("interleaving"),k=t(", which is enabled by the "),w=l("a"),$=t("interleave_datasets()"),q=t(" function. Both "),S=l("a"),P=t("interleave_datasets()"),R=t(" and "),M=l("a"),Is=t("concatenate_datasets()"),K=t(" work with regular "),Q=l("a"),Ls=t("Dataset"),T=t(" and "),I=l("a"),Ye=t("IterableDataset"),Ge=t(" objects. Refer to the "),L=l("a"),We=t("Stream"),Je=t(" guide for an example of how to interleave datasets."),this.h()},l(W){f=r(W,"P",{});var D=o(f);E=n(D,"You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as "),b=r(D,"EM",{});var vt=o(b);y=n(vt,"interleaving"),vt.forEach(a),k=n(D,", which is enabled by the "),w=r(D,"A",{href:!0});var Us=o(w);$=n(Us,"interleave_datasets()"),Us.forEach(a),q=n(D," function. Both "),S=r(D,"A",{href:!0});var bt=o(S);P=n(bt,"interleave_datasets()"),bt.forEach(a),R=n(D," and "),M=r(D,"A",{href:!0});var wt=o(M);Is=n(wt,"concatenate_datasets()"),wt.forEach(a),K=n(D," work with regular "),Q=r(D,"A",{href:!0});var Vs=o(Q);Ls=n(Vs,"Dataset"),Vs.forEach(a),T=n(D," and "),I=r(D,"A",{href:!0});var $t=o(I);Ye=n($t,"IterableDataset"),$t.forEach(a),Ge=n(D," objects. Refer to the "),L=r(D,"A",{href:!0});var xt=o(L);We=n(xt,"Stream"),xt.forEach(a),Je=n(D," guide for an example of how to interleave datasets."),D.forEach(a),this.h()},h(){u(w,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.interleave_datasets"),u(S,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.interleave_datasets"),u(M,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.concatenate_datasets"),u(Q,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset"),u(I,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.IterableDataset"),u(L,"href","./stream#interleave")},m(W,D){i(W,f,D),e(f,E),e(f,b),e(b,y),e(f,k),e(f,w),e(w,$),e(f,q),e(f,S),e(S,P),e(f,R),e(f,M),e(M,Is),e(f,K),e(f,Q),e(Q,Ls),e(f,T),e(f,I),e(I,Ye),e(f,Ge),e(f,L),e(L,We),e(f,Je)},d(W){W&&a(f)}}}function gj(N){let f,E,b,y,k;return{c(){f=l("p"),E=t("\u{1F917} Datasets also provides support for other common data formats such as NumPy, Pandas, and JAX. Check out the "),b=l("a"),y=t("Using Datasets with TensorFlow"),k=t(" guide for more details on how to efficiently create a TensorFlow dataset."),this.h()},l(w){f=r(w,"P",{});var $=o(f);E=n($,"\u{1F917} Datasets also provides support for other common data formats such as NumPy, Pandas, and JAX. Check out the "),b=r($,"A",{href:!0,rel:!0});var q=o(b);y=n(q,"Using Datasets with TensorFlow"),q.forEach(a),k=n($," guide for more details on how to efficiently create a TensorFlow dataset."),$.forEach(a),this.h()},h(){u(b,"href","https://huggingface.co/docs/datasets/master/en/use_with_tensorflow#using-totfdataset"),u(b,"rel","nofollow")},m(w,$){i(w,f,$),e(f,E),e(f,b),e(b,y),e(f,k)},d(w){w&&a(f)}}}function _j(N){let f,E,b,y,k;return{c(){f=l("p"),E=t("Want to save your dataset to a cloud storage provider? Read our "),b=l("a"),y=t("Cloud Storage"),k=t(" guide to learn how to save your dataset to AWS or Google Cloud Storage."),this.h()},l(w){f=r(w,"P",{});var $=o(f);E=n($,"Want to save your dataset to a cloud storage provider? Read our "),b=r($,"A",{href:!0});var q=o(b);y=n(q,"Cloud Storage"),q.forEach(a),k=n($," guide to learn how to save your dataset to AWS or Google Cloud Storage."),$.forEach(a),this.h()},h(){u(b,"href","./filesystems")},m(w,$){i(w,f,$),e(f,E),e(f,b),e(b,y),e(f,k)},d(w){w&&a(f)}}}function jj(N){let f,E,b,y,k,w,$,q,S,P,R,M,Is,K,Q,Ls,T,I,Ye,Ge,L,We,Je,W,D,vt,Us,bt,wt,Vs,$t,xt,Gn,oc,Ur,U,pc,Ke,ic,cc,Qe,hc,uc,Xe,fc,dc,Vr,yt,mc,Br,Ze,Hr,Bs,Yr,gs,Hs,Wn,sa,gc,Jn,_c,Gr,kt,jc,Wr,_s,Ys,Kn,ea,vc,Qn,bc,Jr,Gs,wc,Et,$c,xc,Kr,aa,Qr,js,Ws,Xn,ta,yc,Zn,kc,Xr,V,Ec,qt,qc,Ac,sl,Dc,Tc,el,Pc,Sc,Zr,na,so,vs,Js,al,la,Cc,tl,Nc,eo,X,zc,At,Fc,Oc,Dt,Rc,Mc,ao,Tt,Pt,St,Ic,Lc,to,ra,no,Ct,Nt,zt,Uc,Vc,lo,oa,ro,bs,Ft,Bc,Hc,nl,Yc,Gc,oo,pa,po,ws,Ks,ll,ia,Wc,rl,Jc,io,Z,Kc,Ot,Qc,Xc,ol,Zc,sh,co,ca,ho,Qs,eh,pl,ah,th,uo,$s,Xs,il,ha,nh,cl,lh,fo,B,rh,hl,oh,ph,Rt,ih,ch,ul,hh,uh,mo,Zs,fh,ua,dh,mh,go,fa,_o,Mt,gh,jo,da,vo,xs,se,fl,ma,_h,dl,jh,bo,It,vh,wo,ys,ee,ml,ga,bh,gl,wh,$o,ae,$h,Lt,xh,yh,xo,te,kh,Ut,Eh,qh,yo,_a,ko,ks,ne,_l,ja,Ah,jl,Dh,Eo,le,Th,Vt,Ph,Sh,qo,va,Ao,Es,re,vl,ba,Ch,bl,Nh,Do,z,zh,Bt,Fh,Oh,Ht,Rh,Mh,Yt,Ih,Lh,Gt,Uh,Vh,To,wa,Po,oe,So,pe,Bh,Wt,Hh,Yh,Co,$a,No,qs,ie,wl,xa,Gh,$l,Wh,zo,Jt,Jh,Fo,ya,Oo,F,Kh,xl,Qh,Xh,yl,Zh,su,kl,eu,au,Kt,tu,nu,Ro,ka,Mo,ss,lu,El,ru,ou,ql,pu,iu,Io,As,ce,Al,Ea,cu,Dl,hu,Lo,es,uu,Qt,fu,du,Xt,mu,gu,Uo,as,_u,Tl,ju,vu,Pl,bu,wu,Vo,ts,$u,Sl,xu,yu,Cl,ku,Eu,Bo,qa,Ho,ns,qu,Zt,Au,Du,Nl,Tu,Pu,Yo,Aa,Go,he,Su,sn,Cu,Nu,Wo,ls,zu,zl,Fu,Ou,en,Ru,Mu,Jo,Da,Ko,ue,Qo,rs,Iu,an,Lu,Uu,Fl,Vu,Bu,Xo,Ta,Zo,C,Hu,tn,Yu,Gu,Ol,Wu,Ju,Rl,Ku,Qu,Ml,Xu,Zu,Il,sf,ef,sp,Pa,ep,fe,af,Ll,tf,nf,ap,Sa,tp,Ds,de,Ul,Ca,lf,Vl,rf,np,os,of,Bl,pf,cf,nn,hf,uf,lp,Na,rp,Ts,me,Hl,za,ff,Yl,df,op,H,mf,ln,gf,_f,Gl,jf,vf,Wl,bf,wf,pp,Ps,ge,Jl,Fa,$f,Kl,xf,ip,rn,yf,cp,_e,Ql,Oa,kf,Xl,Ef,qf,Af,Zl,sr,Df,hp,Ra,up,je,Tf,on,Pf,Sf,fp,Ma,dp,pn,Cf,mp,Ia,gp,Ss,ve,er,La,Nf,ar,zf,_p,be,Ff,cn,Of,Rf,jp,ps,Mf,Ua,If,Lf,Va,Uf,Vf,vp,Ba,bp,hn,Bf,wp,Ha,$p,we,Hf,un,Yf,Gf,xp,Ya,yp,O,Wf,tr,Jf,Kf,nr,Qf,Xf,lr,Zf,sd,rr,ed,ad,kp,Cs,$e,or,Ga,td,pr,nd,Ep,is,ld,fn,rd,od,ir,pd,id,qp,Wa,Ap,Ns,xe,cr,Ja,cd,hr,hd,Dp,cs,ud,dn,fd,dd,Ka,md,gd,Tp,ye,_d,ur,jd,vd,Pp,Qa,Sp,zs,ke,fr,Xa,bd,dr,wd,Cp,Ee,$d,mn,xd,yd,Np,Za,zp,qe,Fp,Ae,kd,mr,Ed,qd,Op,st,Rp,Fs,De,gr,et,Ad,_r,Dd,Mp,hs,Td,gn,Pd,Sd,jr,Cd,Nd,Ip,Te,zd,vr,Fd,Od,Lp,at,Up,us,Rd,_n,Md,Id,jn,Ld,Ud,Vp,tt,Bp,Pe,Hp,Se,Vd,vn,Bd,Hd,Yp,nt,Gp,Os,Ce,br,lt,Yd,wr,Gd,Wp,Ne,Wd,bn,Jd,Kd,Jp,rt,Kp,Rs,ze,$r,ot,Qd,xr,Xd,Qp,Fe,Zd,wn,sm,em,Xp,$n,am,Zp,pt,si,Oe,tm,xn,nm,lm,ei,it,ai,Re,ti,Ms,Me,yr,ct,rm,kr,om,ni,yn,pm,li,Ie,Er,ht,qr,im,cm,Ar,hm,um,J,ut,Dr,fm,dm,Tr,kn,mm,gm,ft,Pr,_m,jm,Sr,En,vm,bm,dt,Cr,wm,$m,Nr,qn,xm,ym,mt,zr,km,Em,gt,An,qm,Am,Dn,Dm,ri,Tn,Tm,oi,_t,pi;return w=new A({}),Ze=new x({props:{code:`from datasets import load_dataset
dataset = load_dataset("glue", "mrpc", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Bs=new Yn({props:{warning:!0,$$slots:{default:[uj]},$$scope:{ctx:N}}}),sa=new A({}),ea=new A({}),aa=new x({props:{code:`dataset["label"][:10]
sorted_dataset = dataset.sort("label")
sorted_dataset["label"][:10]
sorted_dataset["label"][-10:]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset = dataset.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&quot;label&quot;</span>][-<span class="hljs-number">10</span>:]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`}}),ta=new A({}),na=new x({props:{code:`shuffled_dataset = sorted_dataset.shuffle(seed=42)
shuffled_dataset["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = sorted_dataset.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),la=new A({}),ra=new x({props:{code:`small_dataset = dataset.select([0, 10, 20, 30, 40, 50])
len(small_dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>small_dataset = dataset.select([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(small_dataset)
<span class="hljs-number">6</span>`}}),oa=new x({props:{code:`start_with_ar = dataset.filter(lambda example: example["sentence1"].startswith("Ar"))
len(start_with_ar)
start_with_ar["sentence1"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&quot;sentence1&quot;</span>].startswith(<span class="hljs-string">&quot;Ar&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(start_with_ar)
<span class="hljs-number">6</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar[<span class="hljs-string">&quot;sentence1&quot;</span>]
[<span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
<span class="hljs-string">&#x27;Arison said Mann may have been one of the pioneers of the world music movement and he had a deep love of Brazilian music .&#x27;</span>,
<span class="hljs-string">&#x27;Arts helped coach the youth on an eighth-grade football team at Lombardi Middle School in Green Bay .&#x27;</span>,
<span class="hljs-string">&#x27;Around 9 : 00 a.m. EDT ( 1300 GMT ) , the euro was at $ 1.1566 against the dollar , up 0.07 percent on the day .&#x27;</span>,
<span class="hljs-string">&quot;Arguing that the case was an isolated example , Canada has threatened a trade backlash if Tokyo &#x27;s ban is not justified on scientific grounds .&quot;</span>,
<span class="hljs-string">&#x27;Artists are worried the plan would harm those who need help most - performers who have a difficult time lining up shows .&#x27;</span>
]`}}),pa=new x({props:{code:`even_dataset = dataset.filter(lambda example, idx: idx % 2 == 0, with_indices=True)
len(even_dataset)
len(dataset) / 2`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(even_dataset)
<span class="hljs-number">1834</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset) / <span class="hljs-number">2</span>
<span class="hljs-number">1834.0</span>`}}),ia=new A({}),ca=new x({props:{code:`dataset.train_test_split(test_size=0.1)
0.1 * len(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.train_test_split(test_size=<span class="hljs-number">0.1</span>)
{<span class="hljs-string">&#x27;train&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">3301</span>),
<span class="hljs-string">&#x27;test&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">367</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> * <span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">366.8</span>`}}),ha=new A({}),fa=new x({props:{code:`from datasets import load_dataset
datasets = load_dataset("imdb", split="train")
print(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})`}}),da=new x({props:{code:`dataset.shard(num_shards=4, index=0)
print(25000/4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.shard(num_shards=<span class="hljs-number">4</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">6250</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">25000</span>/<span class="hljs-number">4</span>)
<span class="hljs-number">6250.0</span>`}}),ma=new A({}),ga=new A({}),_a=new x({props:{code:`dataset
dataset = dataset.rename_column("sentence1", "sentenceA")
dataset = dataset.rename_column("sentence2", "sentenceB")
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentenceA&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence2&quot;</span>, <span class="hljs-string">&quot;sentenceB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentenceA&#x27;</span>, <span class="hljs-string">&#x27;sentenceB&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),ja=new A({}),va=new x({props:{code:`dataset = dataset.remove_columns("label")
dataset
dataset = dataset.remove_columns(["sentence1", "sentence2"])
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns([<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentence2&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),ba=new A({}),wa=new x({props:{code:`dataset.features

from datasets import ClassLabel, Value
new_features = dataset.features.copy()
new_features["label"] = ClassLabel(names=["negative", "positive"])
new_features["idx"] = Value("int64")
dataset = dataset.cast(new_features)
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;negative&quot;</span>, <span class="hljs-string">&quot;positive&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&quot;int64&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),oe=new Yn({props:{$$slots:{default:[fj]},$$scope:{ctx:N}}}),$a=new x({props:{code:`dataset.features

dataset = dataset.cast_column("audio", Audio(sampling_rate=16000))
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),xa=new A({}),ya=new x({props:{code:`from datasets import load_dataset
dataset = load_dataset("squad", split="train")
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),ka=new x({props:{code:`flat_dataset = dataset.flatten()
flat_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset = dataset.flatten()
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
 num_rows: <span class="hljs-number">87599</span>
})`}}),Ea=new A({}),qa=new x({props:{code:`def add_prefix(example):
    example["sentence1"] = 'My sentence: '' + example["sentence1"]
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;sentence1&quot;</span>] = <span class="hljs-string">&#x27;My sentence: &#x27;</span><span class="hljs-string">&#x27; + example[&quot;sentence1&quot;]
...     return example</span>`}}),Aa=new x({props:{code:`updated_dataset = small_dataset.map(add_prefix)
updated_dataset["sentence1"][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = small_dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&quot;sentence1&quot;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;My sentence: Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&quot;My sentence: Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
<span class="hljs-string">&#x27;My sentence: They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added .&#x27;</span>,
<span class="hljs-string">&#x27;My sentence: Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
]`}}),Da=new x({props:{code:`updated_dataset = dataset.map(lambda example: {"new_sentence": example["sentence1"]}, remove_columns=["sentence1"])
updated_dataset.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&quot;new_sentence&quot;</span>: example[<span class="hljs-string">&quot;sentence1&quot;</span>]}, remove_columns=[<span class="hljs-string">&quot;sentence1&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset.column_names
[<span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;new_sentence&#x27;</span>]`}}),ue=new Yn({props:{$$slots:{default:[dj]},$$scope:{ctx:N}}}),Ta=new x({props:{code:`updated_dataset = dataset.map(lambda example, idx: {"sentence2": f"{idx}: " + example["sentence2"]}, with_indices=True)
updated_dataset["sentence2"][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&quot;sentence2&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">{idx}</span>: &quot;</span> + example[<span class="hljs-string">&quot;sentence2&quot;</span>]}, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&quot;sentence2&quot;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;0: Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&quot;1: Yucaipa bought Dominick &#x27;s in 1995 for $ 693 million and sold it to Safeway for $ 1.8 billion in 1998 .&quot;</span>,
 <span class="hljs-string">&quot;2: On June 10 , the ship &#x27;s owners had published an advertisement on the Internet , offering the explosives for sale .&quot;</span>,
 <span class="hljs-string">&#x27;3: Tab shares jumped 20 cents , or 4.6 % , to set a record closing high at A $ 4.57 .&#x27;</span>,
 <span class="hljs-string">&#x27;4: PG &amp; E Corp. shares jumped $ 1.63 or 8 percent to $ 21.03 on the New York Stock Exchange on Friday .&#x27;</span>
]`}}),Pa=new x({props:{code:`from multiprocess import set_start_method
import torch
import os
set_start_method("spawn")
def gpu_computation(example, rank):
    os.environ["CUDA_VISIBLE_DEVICES"] = str(rank % torch.cuda.device_count())
    # Your big GPU call goes here
    return examples
updated_dataset = dataset.map(gpu_computation, with_rank=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> multiprocess <span class="hljs-keyword">import</span> set_start_method
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>set_start_method(<span class="hljs-string">&quot;spawn&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gpu_computation</span>(<span class="hljs-params">example, rank</span>):
<span class="hljs-meta">&gt;&gt;&gt; </span>    os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-built_in">str</span>(rank % torch.cuda.device_count())
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-comment"># Your big GPU call goes here</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-keyword">return</span> examples
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(gpu_computation, with_rank=<span class="hljs-literal">True</span>)`}}),Sa=new x({props:{code:"RuntimeError: Cannot re-initialize CUDA in forked subprocess. To use CUDA with multiprocessing, you must use the 'spawn' start method.",highlighted:'RuntimeError: Cannot re-initialize CUDA <span class="hljs-keyword">in</span> forked subprocess. To use CUDA with multiprocessing, you must use the <span class="hljs-string">&#x27;spawn&#x27;</span> start method.'}}),Ca=new A({}),Na=new x({props:{code:'updated_dataset = dataset.map(lambda example, idx: {"sentence2": f"{idx}: " + example["sentence2"]}, num_proc=4)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&quot;sentence2&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">{idx}</span>: &quot;</span> + example[<span class="hljs-string">&quot;sentence2&quot;</span>]}, num_proc=<span class="hljs-number">4</span>)'}}),za=new A({}),Fa=new A({}),Ra=new x({props:{code:`def chunk_examples(examples):
    chunks = []
    for sentence in examples["sentence1"]:
        chunks += [sentence[i:i + 50] for i in range(0, len(sentence), 50)]
    return {"chunks": chunks}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunk_examples</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    chunks = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;sentence1&quot;</span>]:
<span class="hljs-meta">... </span>        chunks += [sentence[i:i + <span class="hljs-number">50</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(sentence), <span class="hljs-number">50</span>)]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;chunks&quot;</span>: chunks}`}}),Ma=new x({props:{code:`chunked_dataset = dataset.map(chunk_examples, batched=True, remove_columns=dataset.column_names)
chunked_dataset[:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset = dataset.<span class="hljs-built_in">map</span>(chunk_examples, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names)
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset[:<span class="hljs-number">10</span>]
{<span class="hljs-string">&#x27;chunks&#x27;</span>: [<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the &#x27;</span>,
            <span class="hljs-string">&#x27;witness &quot; , of deliberately distorting his evidenc&#x27;</span>,
            <span class="hljs-string">&#x27;e .&#x27;</span>,
            <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain&quot;</span>,
            <span class="hljs-string">&#x27; to Safeway in 1998 for $ 2.5 billion .&#x27;</span>,
            <span class="hljs-string">&#x27;They had published an advertisement on the Interne&#x27;</span>,
            <span class="hljs-string">&#x27;t on June 10 , offering the cargo for sale , he ad&#x27;</span>,
            <span class="hljs-string">&#x27;ded .&#x27;</span>,
            <span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or&#x27;</span>,
            <span class="hljs-string">&#x27; 4.4 % , at A $ 4.56 , having earlier set a record&#x27;</span>]}`}}),Ia=new x({props:{code:`dataset
chunked_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
 features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
 num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset
Dataset(schema: {<span class="hljs-string">&#x27;chunks&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>}, num_rows: <span class="hljs-number">10470</span>)`}}),La=new A({}),Ba=new x({props:{code:`from random import randint
from transformers import pipeline

fillmask = pipeline("fill-mask", model="roberta-base")
mask_token = fillmask.tokenizer.mask_token
smaller_dataset = dataset.filter(lambda e, i: i<100, with_indices=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>fillmask = pipeline(<span class="hljs-string">&quot;fill-mask&quot;</span>, model=<span class="hljs-string">&quot;roberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token = fillmask.tokenizer.mask_token
<span class="hljs-meta">&gt;&gt;&gt; </span>smaller_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> e, i: i&lt;<span class="hljs-number">100</span>, with_indices=<span class="hljs-literal">True</span>)`}}),Ha=new x({props:{code:`def augment_data(examples):
    outputs = []
    for sentence in examples["sentence1"]:
        words = sentence.split(' ')
        K = randint(1, len(words)-1)
        masked_sentence = " ".join(words[:K]  + [mask_token] + words[K+1:])
        predictions = fillmask(masked_sentence)
        augmented_sequences = [predictions[i]["sequence"] for i in range(3)]
        outputs += [sentence] + augmented_sequences
    return {"data": outputs}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">augment_data</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    outputs = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;sentence1&quot;</span>]:
<span class="hljs-meta">... </span>        words = sentence.split(<span class="hljs-string">&#x27; &#x27;</span>)
<span class="hljs-meta">... </span>        K = randint(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(words)-<span class="hljs-number">1</span>)
<span class="hljs-meta">... </span>        masked_sentence = <span class="hljs-string">&quot; &quot;</span>.join(words[:K]  + [mask_token] + words[K+<span class="hljs-number">1</span>:])
<span class="hljs-meta">... </span>        predictions = fillmask(masked_sentence)
<span class="hljs-meta">... </span>        augmented_sequences = [predictions[i][<span class="hljs-string">&quot;sequence&quot;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]
<span class="hljs-meta">... </span>        outputs += [sentence] + augmented_sequences
...
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;data&quot;</span>: outputs}`}}),Ya=new x({props:{code:`augmented_dataset = smaller_dataset.map(augment_data, batched=True, remove_columns=dataset.column_names, batch_size=8)
augmented_dataset[:9]["data"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset = smaller_dataset.<span class="hljs-built_in">map</span>(augment_data, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names, batch_size=<span class="hljs-number">8</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset[:<span class="hljs-number">9</span>][<span class="hljs-string">&quot;data&quot;</span>]
[<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately withholding his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately suppressing his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately destroying his evidence.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Stores before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick&#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion.&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Pizza before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>
]`}}),Ga=new A({}),Wa=new x({props:{code:`from datasets import load_dataset

dataset = load_dataset('glue', 'mrpc')
encoded_dataset = dataset.map(lambda examples: tokenizer(examples["sentence1"]), batched=True)
encoded_dataset["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load all the splits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&quot;sentence1&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
<span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`}}),Ja=new A({}),Qa=new x({props:{code:`from datasets import Dataset
import torch.distributed

dataset1 = Dataset.from_dict({"a": [0, 1, 2]})

if training_args.local_rank > 0:
    print("Waiting for main process to perform the mapping")
    torch.distributed.barrier()

dataset2 = dataset1.map(lambda x: {"a": x["a"] + 1})

if training_args.local_rank == 0:
    print("Loading results from main process")
    torch.distributed.barrier()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch.distributed

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank &gt; <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Waiting for main process to perform the mapping&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset2 = dataset1.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;a&quot;</span>: x[<span class="hljs-string">&quot;a&quot;</span>] + <span class="hljs-number">1</span>})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loading results from main process&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()`}}),Xa=new A({}),Za=new x({props:{code:`from datasets import concatenate_datasets, load_dataset

bookcorpus = load_dataset("bookcorpus", split="train")
wiki = load_dataset("wikipedia", "20220301.en", split="train")
wiki = wiki.remove_columns([col for col in wiki.column_names if col != "text"])  # only keep the 'text' column

assert bookcorpus.features.type == wiki.features.type
bert_dataset = concatenate_datasets([bookcorpus, wiki])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> concatenate_datasets, load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus = load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;wikipedia&quot;</span>, <span class="hljs-string">&quot;20220301.en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = wiki.remove_columns([col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> wiki.column_names <span class="hljs-keyword">if</span> col != <span class="hljs-string">&quot;text&quot;</span>])  <span class="hljs-comment"># only keep the &#x27;text&#x27; column</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> bookcorpus.features.<span class="hljs-built_in">type</span> == wiki.features.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>bert_dataset = concatenate_datasets([bookcorpus, wiki])`}}),qe=new Yn({props:{$$slots:{default:[mj]},$$scope:{ctx:N}}}),st=new x({props:{code:`from datasets import Dataset
bookcorpus_ids = Dataset.from_dict({"ids": list(range(len(bookcorpus)))})
bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_ids = Dataset.from_dict({<span class="hljs-string">&quot;ids&quot;</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bookcorpus)))})
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=<span class="hljs-number">1</span>)`}}),et=new A({}),at=new x({props:{code:`import torch
dataset.set_format(type="torch", columns=["input_ids", "token_type_ids", "attention_mask", "label"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;torch&quot;</span>, columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>])`}}),tt=new x({props:{code:'dataset = dataset.with_format(type="torch", columns=["input_ids", "token_type_ids", "attention_mask", "label"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;torch&quot;</span>, columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>])'}}),Pe=new Yn({props:{$$slots:{default:[gj]},$$scope:{ctx:N}}}),nt=new x({props:{code:`dataset.format
dataset.reset_format()
dataset.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;torch&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;label&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`}}),lt=new A({}),rt=new x({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(batch):
    return tokenizer(batch["sentence1"], padding="longest", truncation=True, max_length=512, return_tensors="pt")
dataset.set_transform(encode)
dataset.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&quot;sentence1&quot;</span>], padding=<span class="hljs-string">&quot;longest&quot;</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;custom&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {<span class="hljs-string">&#x27;transform&#x27;</span>: &lt;function __main__.encode(batch)&gt;}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`}}),ot=new A({}),pt=new x({props:{code:'encoded_dataset.save_to_disk("path/of/my/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)'}}),it=new x({props:{code:`from datasets import load_from_disk
reloaded_dataset = load_from_disk("path/of/my/dataset/directory")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span>reloaded_dataset = load_from_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)`}}),Re=new Yn({props:{$$slots:{default:[_j]},$$scope:{ctx:N}}}),ct=new A({}),_t=new x({props:{code:'encoded_dataset.to_csv("path/of/my/dataset.csv")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.to_csv(<span class="hljs-string">&quot;path/of/my/dataset.csv&quot;</span>)'}}),{c(){f=l("meta"),E=c(),b=l("h1"),y=l("a"),k=l("span"),d(w.$$.fragment),$=c(),q=l("span"),S=t("Process"),P=c(),R=l("p"),M=t("\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. These tools are important for tidying up a dataset, creating additional columns, converting between features and formats, and much more."),Is=c(),K=l("p"),Q=t("This guide will show you how to:"),Ls=c(),T=l("ul"),I=l("li"),Ye=t("Reorder rows and split the dataset."),Ge=c(),L=l("li"),We=t("Rename and remove columns, and other common column operations."),Je=c(),W=l("li"),D=t("Apply processing functions to each example in a dataset."),vt=c(),Us=l("li"),bt=t("Concatenate datasets."),wt=c(),Vs=l("li"),$t=t("Apply a custom formatting transform."),xt=c(),Gn=l("li"),oc=t("Save and export processed datasets."),Ur=c(),U=l("p"),pc=t("For more details specific to processing other dataset modalities, take a look at the "),Ke=l("a"),ic=t("process audio dataset guide"),cc=t(", the "),Qe=l("a"),hc=t("process image dataset guide"),uc=t(", or the "),Xe=l("a"),fc=t("process text dataset guide"),dc=t("."),Vr=c(),yt=l("p"),mc=t("The examples in this guide use the MRPC dataset, but feel free to load any dataset of your choice and follow along!"),Br=c(),d(Ze.$$.fragment),Hr=c(),d(Bs.$$.fragment),Yr=c(),gs=l("h2"),Hs=l("a"),Wn=l("span"),d(sa.$$.fragment),gc=c(),Jn=l("span"),_c=t("Sort, shuffle, select, split, and shard"),Gr=c(),kt=l("p"),jc=t("There are several functions for rearranging the structure of a dataset. These functions are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),Wr=c(),_s=l("h3"),Ys=l("a"),Kn=l("span"),d(ea.$$.fragment),vc=c(),Qn=l("span"),bc=t("Sort"),Jr=c(),Gs=l("p"),wc=t("Use "),Et=l("a"),$c=t("sort()"),xc=t(" to sort column values according to their numerical values. The provided column must be NumPy compatible."),Kr=c(),d(aa.$$.fragment),Qr=c(),js=l("h3"),Ws=l("a"),Xn=l("span"),d(ta.$$.fragment),yc=c(),Zn=l("span"),kc=t("Shuffle"),Xr=c(),V=l("p"),Ec=t("The "),qt=l("a"),qc=t("shuffle()"),Ac=t(" function randomly rearranges the column values. You can specify the "),sl=l("code"),Dc=t("generator"),Tc=t(" parameter in this function to use a different "),el=l("code"),Pc=t("numpy.random.Generator"),Sc=t(" if you want more control over the algorithm used to shuffle the dataset."),Zr=c(),d(na.$$.fragment),so=c(),vs=l("h3"),Js=l("a"),al=l("span"),d(la.$$.fragment),Cc=c(),tl=l("span"),Nc=t("Select and Filter"),eo=c(),X=l("p"),zc=t("There are two options for filtering rows in a dataset: "),At=l("a"),Fc=t("select()"),Oc=t(" and "),Dt=l("a"),Rc=t("filter()"),Mc=t("."),ao=c(),Tt=l("ul"),Pt=l("li"),St=l("a"),Ic=t("select()"),Lc=t(" returns rows according to a list of indices:"),to=c(),d(ra.$$.fragment),no=c(),Ct=l("ul"),Nt=l("li"),zt=l("a"),Uc=t("filter()"),Vc=t(" returns rows that match a specified condition:"),lo=c(),d(oa.$$.fragment),ro=c(),bs=l("p"),Ft=l("a"),Bc=t("filter()"),Hc=t(" can also filter by indices if you set "),nl=l("code"),Yc=t("with_indices=True"),Gc=t(":"),oo=c(),d(pa.$$.fragment),po=c(),ws=l("h3"),Ks=l("a"),ll=l("span"),d(ia.$$.fragment),Wc=c(),rl=l("span"),Jc=t("Split"),io=c(),Z=l("p"),Kc=t("The "),Ot=l("a"),Qc=t("train_test_split()"),Xc=t(" function creates train and test splits if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or an absolute number of samples in each split. In the example below, use the "),ol=l("code"),Zc=t("test_size"),sh=t(" parameter to create a test split that is 10% of the original dataset:"),co=c(),d(ca.$$.fragment),ho=c(),Qs=l("p"),eh=t("The splits are shuffled by default, but you can set "),pl=l("code"),ah=t("shuffle=False"),th=t(" to prevent shuffling."),uo=c(),$s=l("h3"),Xs=l("a"),il=l("span"),d(ha.$$.fragment),nh=c(),cl=l("span"),lh=t("Shard"),fo=c(),B=l("p"),rh=t("\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),hl=l("code"),oh=t("num_shards"),ph=t(" parameter in "),Rt=l("a"),ih=t("shard()"),ch=t(" to determine the number of shards to split the dataset into. You\u2019ll also need to provide the shard you want to return with the "),ul=l("code"),hh=t("index"),uh=t(" parameter."),mo=c(),Zs=l("p"),fh=t("For example, the "),ua=l("a"),dh=t("imdb"),mh=t(" dataset has 25000 examples:"),go=c(),d(fa.$$.fragment),_o=c(),Mt=l("p"),gh=t("After sharding the dataset into four chunks, the first shard will only have 6250 examples:"),jo=c(),d(da.$$.fragment),vo=c(),xs=l("h2"),se=l("a"),fl=l("span"),d(ma.$$.fragment),_h=c(),dl=l("span"),jh=t("Rename, remove, cast, and flatten"),bo=c(),It=l("p"),vh=t("The following functions allow you to modify the columns of a dataset. These functions are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),wo=c(),ys=l("h3"),ee=l("a"),ml=l("span"),d(ga.$$.fragment),bh=c(),gl=l("span"),wh=t("Rename"),$o=c(),ae=l("p"),$h=t("Use "),Lt=l("a"),xh=t("rename_column()"),yh=t(" when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),xo=c(),te=l("p"),kh=t("Provide "),Ut=l("a"),Eh=t("rename_column()"),qh=t(" with the name of the original column, and the new column name:"),yo=c(),d(_a.$$.fragment),ko=c(),ks=l("h3"),ne=l("a"),_l=l("span"),d(ja.$$.fragment),Ah=c(),jl=l("span"),Dh=t("Remove"),Eo=c(),le=l("p"),Th=t("When you need to remove one or more columns, provide the column name to remove to the "),Vt=l("a"),Ph=t("remove_columns()"),Sh=t(" function. Remove more than one column by providing a list of column names:"),qo=c(),d(va.$$.fragment),Ao=c(),Es=l("h3"),re=l("a"),vl=l("span"),d(ba.$$.fragment),Ch=c(),bl=l("span"),Nh=t("Cast"),Do=c(),z=l("p"),zh=t("The "),Bt=l("a"),Fh=t("cast()"),Oh=t(" function transforms the feature type of one or more columns. This function accepts your new "),Ht=l("a"),Rh=t("Features"),Mh=t(" as its argument. The example below demonstrates how to change the "),Yt=l("a"),Ih=t("ClassLabel"),Lh=t(" and "),Gt=l("a"),Uh=t("Value"),Vh=t(" features:"),To=c(),d(wa.$$.fragment),Po=c(),d(oe.$$.fragment),So=c(),pe=l("p"),Bh=t("Use the "),Wt=l("a"),Hh=t("cast_column()"),Yh=t(" function to change the feature type of a single column. Pass the column name and its new feature type as arguments:"),Co=c(),d($a.$$.fragment),No=c(),qs=l("h3"),ie=l("a"),wl=l("span"),d(xa.$$.fragment),Gh=c(),$l=l("span"),Wh=t("Flatten"),zo=c(),Jt=l("p"),Jh=t("Sometimes a column can be a nested structure of several types. Take a look at the nested structure below from the SQuAD dataset:"),Fo=c(),d(ya.$$.fragment),Oo=c(),F=l("p"),Kh=t("The "),xl=l("code"),Qh=t("answers"),Xh=t(" field contains two subfields: "),yl=l("code"),Zh=t("text"),su=t(" and "),kl=l("code"),eu=t("answer_start"),au=t(". Use the "),Kt=l("a"),tu=t("flatten()"),nu=t(" function to extract the subfields into their own separate columns:"),Ro=c(),d(ka.$$.fragment),Mo=c(),ss=l("p"),lu=t("Notice how the subfields are now their own independent columns: "),El=l("code"),ru=t("answers.text"),ou=t(" and "),ql=l("code"),pu=t("answers.answer_start"),iu=t("."),Io=c(),As=l("h2"),ce=l("a"),Al=l("span"),d(Ea.$$.fragment),cu=c(),Dl=l("span"),hu=t("Map"),Lo=c(),es=l("p"),uu=t("Some of the more powerful applications of \u{1F917} Datasets come from using the "),Qt=l("a"),fu=t("map()"),du=t(" function. The primary purpose of "),Xt=l("a"),mu=t("map()"),gu=t(" is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),Uo=c(),as=l("p"),_u=t("In the following example, prefix each "),Tl=l("code"),ju=t("sentence1"),vu=t(" value in the dataset with "),Pl=l("code"),bu=t("'My sentence: '"),wu=t("."),Vo=c(),ts=l("p"),$u=t("Start by creating a function that adds "),Sl=l("code"),xu=t("'My sentence: '"),yu=t(" to the beginning of each sentence. The function needs to accept and output a "),Cl=l("code"),ku=t("dict"),Eu=t(":"),Bo=c(),d(qa.$$.fragment),Ho=c(),ns=l("p"),qu=t("Now use "),Zt=l("a"),Au=t("map()"),Du=t(" to apply the "),Nl=l("code"),Tu=t("add_prefix"),Pu=t(" function to the entire dataset:"),Yo=c(),d(Aa.$$.fragment),Go=c(),he=l("p"),Su=t("Let\u2019s take a look at another example, except this time, you\u2019ll remove a column with "),sn=l("a"),Cu=t("map()"),Nu=t(". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Wo=c(),ls=l("p"),zu=t("Specify the column to remove with the "),zl=l("code"),Fu=t("remove_columns"),Ou=t(" parameter in "),en=l("a"),Ru=t("map()"),Mu=t(":"),Jo=c(),d(Da.$$.fragment),Ko=c(),d(ue.$$.fragment),Qo=c(),rs=l("p"),Iu=t("You can also use "),an=l("a"),Lu=t("map()"),Uu=t(" with indices if you set "),Fl=l("code"),Vu=t("with_indices=True"),Bu=t(". The example below adds the index to the beginning of each sentence:"),Xo=c(),d(Ta.$$.fragment),Zo=c(),C=l("p"),Hu=t("The "),tn=l("a"),Yu=t("map()"),Gu=t(" also works with the rank of the process if you set "),Ol=l("code"),Wu=t("with_rank=True"),Ju=t(". This is analogous to the "),Rl=l("code"),Ku=t("with_indices"),Qu=t(" parameter. The "),Ml=l("code"),Xu=t("with_rank"),Zu=t(" parameter in the mapped function goes after the "),Il=l("code"),sf=t("index"),ef=t(" one if it is already present."),sp=c(),d(Pa.$$.fragment),ep=c(),fe=l("p"),af=t("The main use-case for rank is to parallelize computation across several GPUs. This requires setting "),Ll=l("code"),tf=t('multiprocess.set_start_method("spawn")'),nf=t(". If you don\u2019t you\u2019ll receive the following CUDA error:"),ap=c(),d(Sa.$$.fragment),tp=c(),Ds=l("h3"),de=l("a"),Ul=l("span"),d(Ca.$$.fragment),lf=c(),Vl=l("span"),rf=t("Multiprocessing"),np=c(),os=l("p"),of=t("Multiprocessing significantly speeds up processing by parallelizing processes on the CPU. Set the "),Bl=l("code"),pf=t("num_proc"),cf=t(" parameter in "),nn=l("a"),hf=t("map()"),uf=t(" to set the number of processes to use:"),lp=c(),d(Na.$$.fragment),rp=c(),Ts=l("h3"),me=l("a"),Hl=l("span"),d(za.$$.fragment),ff=c(),Yl=l("span"),df=t("Batch processing"),op=c(),H=l("p"),mf=t("The "),ln=l("a"),gf=t("map()"),_f=t(" function supports working with batches of examples. Operate on batches by setting "),Gl=l("code"),jf=t("batched=True"),vf=t(". The default batch size is 1000, but you can adjust it with the "),Wl=l("code"),bf=t("batch_size"),wf=t(" parameter. Batch processing enables interesting applications such as splitting long sentences into shorter chunks and data augmentation."),pp=c(),Ps=l("h4"),ge=l("a"),Jl=l("span"),d(Fa.$$.fragment),$f=c(),Kl=l("span"),xf=t("Split long examples"),ip=c(),rn=l("p"),yf=t("When examples are too long, you may want to split them into several smaller chunks. Begin by creating a function that:"),cp=c(),_e=l("ol"),Ql=l("li"),Oa=l("p"),kf=t("Splits the "),Xl=l("code"),Ef=t("sentence1"),qf=t(" field into chunks of 50 characters."),Af=c(),Zl=l("li"),sr=l("p"),Df=t("Stacks all the chunks together to create the new dataset."),hp=c(),d(Ra.$$.fragment),up=c(),je=l("p"),Tf=t("Apply the function with "),on=l("a"),Pf=t("map()"),Sf=t(":"),fp=c(),d(Ma.$$.fragment),dp=c(),pn=l("p"),Cf=t("Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),mp=c(),d(Ia.$$.fragment),gp=c(),Ss=l("h4"),ve=l("a"),er=l("span"),d(La.$$.fragment),Nf=c(),ar=l("span"),zf=t("Data augmentation"),_p=c(),be=l("p"),Ff=t("The "),cn=l("a"),Of=t("map()"),Rf=t(" function could also be used for data augmentation. The following example generates additional words for a masked token in a sentence."),jp=c(),ps=l("p"),Mf=t("Load and use the "),Ua=l("a"),If=t("RoBERTA"),Lf=t(" model in \u{1F917} Transformers\u2019 "),Va=l("a"),Uf=t("FillMaskPipeline"),Vf=t(":"),vp=c(),d(Ba.$$.fragment),bp=c(),hn=l("p"),Bf=t("Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),wp=c(),d(Ha.$$.fragment),$p=c(),we=l("p"),Hf=t("Use "),un=l("a"),Yf=t("map()"),Gf=t(" to apply the function over the whole dataset:"),xp=c(),d(Ya.$$.fragment),yp=c(),O=l("p"),Wf=t("For each original sentence, RoBERTA augmented a random word with three alternatives. The original word "),tr=l("code"),Jf=t("distorting"),Kf=t(" is supplemented by "),nr=l("code"),Qf=t("withholding"),Xf=t(", "),lr=l("code"),Zf=t("suppressing"),sd=t(", and "),rr=l("code"),ed=t("destroying"),ad=t("."),kp=c(),Cs=l("h3"),$e=l("a"),or=l("span"),d(Ga.$$.fragment),td=c(),pr=l("span"),nd=t("Process multiple splits"),Ep=c(),is=l("p"),ld=t("Many datasets have splits that can be processed simultaneously with "),fn=l("a"),rd=t("DatasetDict.map()"),od=t(". For example, tokenize the "),ir=l("code"),pd=t("sentence1"),id=t(" field in the train and test split by:"),qp=c(),d(Wa.$$.fragment),Ap=c(),Ns=l("h3"),xe=l("a"),cr=l("span"),d(Ja.$$.fragment),cd=c(),hr=l("span"),hd=t("Distributed usage"),Dp=c(),cs=l("p"),ud=t("When you use "),dn=l("a"),fd=t("map()"),dd=t(" in a distributed setting, you should also use "),Ka=l("a"),md=t("torch.distributed.barrier"),gd=t(". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),Tp=c(),ye=l("p"),_d=t("The following example shows how you can use "),ur=l("code"),jd=t("torch.distributed.barrier"),vd=t(" to synchronize the processes:"),Pp=c(),d(Qa.$$.fragment),Sp=c(),zs=l("h2"),ke=l("a"),fr=l("span"),d(Xa.$$.fragment),bd=c(),dr=l("span"),wd=t("Concatenate"),Cp=c(),Ee=l("p"),$d=t("Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),mn=l("a"),xd=t("concatenate_datasets()"),yd=t(":"),Np=c(),d(Za.$$.fragment),zp=c(),d(qe.$$.fragment),Fp=c(),Ae=l("p"),kd=t("You can also concatenate two datasets horizontally by setting "),mr=l("code"),Ed=t("axis=1"),qd=t(" as long as the datasets have the same number of rows:"),Op=c(),d(st.$$.fragment),Rp=c(),Fs=l("h2"),De=l("a"),gr=l("span"),d(et.$$.fragment),Ad=c(),_r=l("span"),Dd=t("Format"),Mp=c(),hs=l("p"),Td=t("The "),gn=l("a"),Pd=t("set_format()"),Sd=t(" function changes the format of a column to be compatible with some common data formats. Specify the output you\u2019d like in the "),jr=l("code"),Cd=t("type"),Nd=t(" parameter and the columns you want to format. Formatting is applied on-the-fly."),Ip=c(),Te=l("p"),zd=t("For example, create PyTorch tensors by setting "),vr=l("code"),Fd=t('type="torch"'),Od=t(":"),Lp=c(),d(at.$$.fragment),Up=c(),us=l("p"),Rd=t("The "),_n=l("a"),Md=t("with_format()"),Id=t(" function also changes the format of a column, except it returns a new "),jn=l("a"),Ld=t("Dataset"),Ud=t(" object:"),Vp=c(),d(tt.$$.fragment),Bp=c(),d(Pe.$$.fragment),Hp=c(),Se=l("p"),Vd=t("If you need to reset the dataset to its original format, use the "),vn=l("a"),Bd=t("reset_format()"),Hd=t(" function:"),Yp=c(),d(nt.$$.fragment),Gp=c(),Os=l("h3"),Ce=l("a"),br=l("span"),d(lt.$$.fragment),Yd=c(),wr=l("span"),Gd=t("Format transform"),Wp=c(),Ne=l("p"),Wd=t("The "),bn=l("a"),Jd=t("set_transform()"),Kd=t(" function applies a custom formatting transform on-the-fly. This function replaces any previously specified format. For example, you can use this function to tokenize and pad tokens on-the-fly. Tokenization is only applied when examples are accessed:"),Jp=c(),d(rt.$$.fragment),Kp=c(),Rs=l("h2"),ze=l("a"),$r=l("span"),d(ot.$$.fragment),Qd=c(),xr=l("span"),Xd=t("Save"),Qp=c(),Fe=l("p"),Zd=t("Once you are done processing your dataset, you can save and reuse it later with "),wn=l("a"),sm=t("save_to_disk()"),em=t("."),Xp=c(),$n=l("p"),am=t("Save your dataset by providing the path to the directory you wish to save it to:"),Zp=c(),d(pt.$$.fragment),si=c(),Oe=l("p"),tm=t("Use the "),xn=l("a"),nm=t("load_from_disk()"),lm=t(" function to reload the dataset:"),ei=c(),d(it.$$.fragment),ai=c(),d(Re.$$.fragment),ti=c(),Ms=l("h2"),Me=l("a"),yr=l("span"),d(ct.$$.fragment),rm=c(),kr=l("span"),om=t("Export"),ni=c(),yn=l("p"),pm=t("\u{1F917} Datasets supports exporting as well so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),li=c(),Ie=l("table"),Er=l("thead"),ht=l("tr"),qr=l("th"),im=t("File type"),cm=c(),Ar=l("th"),hm=t("Export method"),um=c(),J=l("tbody"),ut=l("tr"),Dr=l("td"),fm=t("CSV"),dm=c(),Tr=l("td"),kn=l("a"),mm=t("Dataset.to_csv()"),gm=c(),ft=l("tr"),Pr=l("td"),_m=t("JSON"),jm=c(),Sr=l("td"),En=l("a"),vm=t("Dataset.to_json()"),bm=c(),dt=l("tr"),Cr=l("td"),wm=t("Parquet"),$m=c(),Nr=l("td"),qn=l("a"),xm=t("Dataset.to_parquet()"),ym=c(),mt=l("tr"),zr=l("td"),km=t("In-memory Python object"),Em=c(),gt=l("td"),An=l("a"),qm=t("Dataset.to_pandas()"),Am=t(" or "),Dn=l("a"),Dm=t("Dataset.to_dict()"),ri=c(),Tn=l("p"),Tm=t("For example, export your dataset to a CSV file like this:"),oi=c(),d(_t.$$.fragment),this.h()},l(s){const p=cj('[data-svelte="svelte-1phssyn"]',document.head);f=r(p,"META",{name:!0,content:!0}),p.forEach(a),E=h(s),b=r(s,"H1",{class:!0});var jt=o(b);y=r(jt,"A",{id:!0,class:!0,href:!0});var Fr=o(y);k=r(Fr,"SPAN",{});var Or=o(k);m(w.$$.fragment,Or),Or.forEach(a),Fr.forEach(a),$=h(jt),q=r(jt,"SPAN",{});var Rr=o(q);S=n(Rr,"Process"),Rr.forEach(a),jt.forEach(a),P=h(s),R=r(s,"P",{});var Mr=o(R);M=n(Mr,"\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. These tools are important for tidying up a dataset, creating additional columns, converting between features and formats, and much more."),Mr.forEach(a),Is=h(s),K=r(s,"P",{});var Ir=o(K);Q=n(Ir,"This guide will show you how to:"),Ir.forEach(a),Ls=h(s),T=r(s,"UL",{});var Y=o(T);I=r(Y,"LI",{});var Cm=o(I);Ye=n(Cm,"Reorder rows and split the dataset."),Cm.forEach(a),Ge=h(Y),L=r(Y,"LI",{});var Nm=o(L);We=n(Nm,"Rename and remove columns, and other common column operations."),Nm.forEach(a),Je=h(Y),W=r(Y,"LI",{});var zm=o(W);D=n(zm,"Apply processing functions to each example in a dataset."),zm.forEach(a),vt=h(Y),Us=r(Y,"LI",{});var Fm=o(Us);bt=n(Fm,"Concatenate datasets."),Fm.forEach(a),wt=h(Y),Vs=r(Y,"LI",{});var Om=o(Vs);$t=n(Om,"Apply a custom formatting transform."),Om.forEach(a),xt=h(Y),Gn=r(Y,"LI",{});var Rm=o(Gn);oc=n(Rm,"Save and export processed datasets."),Rm.forEach(a),Y.forEach(a),Ur=h(s),U=r(s,"P",{});var Le=o(U);pc=n(Le,"For more details specific to processing other dataset modalities, take a look at the "),Ke=r(Le,"A",{class:!0,href:!0});var Mm=o(Ke);ic=n(Mm,"process audio dataset guide"),Mm.forEach(a),cc=n(Le,", the "),Qe=r(Le,"A",{class:!0,href:!0});var Im=o(Qe);hc=n(Im,"process image dataset guide"),Im.forEach(a),uc=n(Le,", or the "),Xe=r(Le,"A",{class:!0,href:!0});var Lm=o(Xe);fc=n(Lm,"process text dataset guide"),Lm.forEach(a),dc=n(Le,"."),Le.forEach(a),Vr=h(s),yt=r(s,"P",{});var Um=o(yt);mc=n(Um,"The examples in this guide use the MRPC dataset, but feel free to load any dataset of your choice and follow along!"),Um.forEach(a),Br=h(s),m(Ze.$$.fragment,s),Hr=h(s),m(Bs.$$.fragment,s),Yr=h(s),gs=r(s,"H2",{class:!0});var ii=o(gs);Hs=r(ii,"A",{id:!0,class:!0,href:!0});var Vm=o(Hs);Wn=r(Vm,"SPAN",{});var Bm=o(Wn);m(sa.$$.fragment,Bm),Bm.forEach(a),Vm.forEach(a),gc=h(ii),Jn=r(ii,"SPAN",{});var Hm=o(Jn);_c=n(Hm,"Sort, shuffle, select, split, and shard"),Hm.forEach(a),ii.forEach(a),Gr=h(s),kt=r(s,"P",{});var Ym=o(kt);jc=n(Ym,"There are several functions for rearranging the structure of a dataset. These functions are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),Ym.forEach(a),Wr=h(s),_s=r(s,"H3",{class:!0});var ci=o(_s);Ys=r(ci,"A",{id:!0,class:!0,href:!0});var Gm=o(Ys);Kn=r(Gm,"SPAN",{});var Wm=o(Kn);m(ea.$$.fragment,Wm),Wm.forEach(a),Gm.forEach(a),vc=h(ci),Qn=r(ci,"SPAN",{});var Jm=o(Qn);bc=n(Jm,"Sort"),Jm.forEach(a),ci.forEach(a),Jr=h(s),Gs=r(s,"P",{});var hi=o(Gs);wc=n(hi,"Use "),Et=r(hi,"A",{href:!0});var Km=o(Et);$c=n(Km,"sort()"),Km.forEach(a),xc=n(hi," to sort column values according to their numerical values. The provided column must be NumPy compatible."),hi.forEach(a),Kr=h(s),m(aa.$$.fragment,s),Qr=h(s),js=r(s,"H3",{class:!0});var ui=o(js);Ws=r(ui,"A",{id:!0,class:!0,href:!0});var Qm=o(Ws);Xn=r(Qm,"SPAN",{});var Xm=o(Xn);m(ta.$$.fragment,Xm),Xm.forEach(a),Qm.forEach(a),yc=h(ui),Zn=r(ui,"SPAN",{});var Zm=o(Zn);kc=n(Zm,"Shuffle"),Zm.forEach(a),ui.forEach(a),Xr=h(s),V=r(s,"P",{});var Ue=o(V);Ec=n(Ue,"The "),qt=r(Ue,"A",{href:!0});var sg=o(qt);qc=n(sg,"shuffle()"),sg.forEach(a),Ac=n(Ue," function randomly rearranges the column values. You can specify the "),sl=r(Ue,"CODE",{});var eg=o(sl);Dc=n(eg,"generator"),eg.forEach(a),Tc=n(Ue," parameter in this function to use a different "),el=r(Ue,"CODE",{});var ag=o(el);Pc=n(ag,"numpy.random.Generator"),ag.forEach(a),Sc=n(Ue," if you want more control over the algorithm used to shuffle the dataset."),Ue.forEach(a),Zr=h(s),m(na.$$.fragment,s),so=h(s),vs=r(s,"H3",{class:!0});var fi=o(vs);Js=r(fi,"A",{id:!0,class:!0,href:!0});var tg=o(Js);al=r(tg,"SPAN",{});var ng=o(al);m(la.$$.fragment,ng),ng.forEach(a),tg.forEach(a),Cc=h(fi),tl=r(fi,"SPAN",{});var lg=o(tl);Nc=n(lg,"Select and Filter"),lg.forEach(a),fi.forEach(a),eo=h(s),X=r(s,"P",{});var Pn=o(X);zc=n(Pn,"There are two options for filtering rows in a dataset: "),At=r(Pn,"A",{href:!0});var rg=o(At);Fc=n(rg,"select()"),rg.forEach(a),Oc=n(Pn," and "),Dt=r(Pn,"A",{href:!0});var og=o(Dt);Rc=n(og,"filter()"),og.forEach(a),Mc=n(Pn,"."),Pn.forEach(a),ao=h(s),Tt=r(s,"UL",{});var pg=o(Tt);Pt=r(pg,"LI",{});var Pm=o(Pt);St=r(Pm,"A",{href:!0});var ig=o(St);Ic=n(ig,"select()"),ig.forEach(a),Lc=n(Pm," returns rows according to a list of indices:"),Pm.forEach(a),pg.forEach(a),to=h(s),m(ra.$$.fragment,s),no=h(s),Ct=r(s,"UL",{});var cg=o(Ct);Nt=r(cg,"LI",{});var Sm=o(Nt);zt=r(Sm,"A",{href:!0});var hg=o(zt);Uc=n(hg,"filter()"),hg.forEach(a),Vc=n(Sm," returns rows that match a specified condition:"),Sm.forEach(a),cg.forEach(a),lo=h(s),m(oa.$$.fragment,s),ro=h(s),bs=r(s,"P",{});var Lr=o(bs);Ft=r(Lr,"A",{href:!0});var ug=o(Ft);Bc=n(ug,"filter()"),ug.forEach(a),Hc=n(Lr," can also filter by indices if you set "),nl=r(Lr,"CODE",{});var fg=o(nl);Yc=n(fg,"with_indices=True"),fg.forEach(a),Gc=n(Lr,":"),Lr.forEach(a),oo=h(s),m(pa.$$.fragment,s),po=h(s),ws=r(s,"H3",{class:!0});var di=o(ws);Ks=r(di,"A",{id:!0,class:!0,href:!0});var dg=o(Ks);ll=r(dg,"SPAN",{});var mg=o(ll);m(ia.$$.fragment,mg),mg.forEach(a),dg.forEach(a),Wc=h(di),rl=r(di,"SPAN",{});var gg=o(rl);Jc=n(gg,"Split"),gg.forEach(a),di.forEach(a),io=h(s),Z=r(s,"P",{});var Sn=o(Z);Kc=n(Sn,"The "),Ot=r(Sn,"A",{href:!0});var _g=o(Ot);Qc=n(_g,"train_test_split()"),_g.forEach(a),Xc=n(Sn," function creates train and test splits if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or an absolute number of samples in each split. In the example below, use the "),ol=r(Sn,"CODE",{});var jg=o(ol);Zc=n(jg,"test_size"),jg.forEach(a),sh=n(Sn," parameter to create a test split that is 10% of the original dataset:"),Sn.forEach(a),co=h(s),m(ca.$$.fragment,s),ho=h(s),Qs=r(s,"P",{});var mi=o(Qs);eh=n(mi,"The splits are shuffled by default, but you can set "),pl=r(mi,"CODE",{});var vg=o(pl);ah=n(vg,"shuffle=False"),vg.forEach(a),th=n(mi," to prevent shuffling."),mi.forEach(a),uo=h(s),$s=r(s,"H3",{class:!0});var gi=o($s);Xs=r(gi,"A",{id:!0,class:!0,href:!0});var bg=o(Xs);il=r(bg,"SPAN",{});var wg=o(il);m(ha.$$.fragment,wg),wg.forEach(a),bg.forEach(a),nh=h(gi),cl=r(gi,"SPAN",{});var $g=o(cl);lh=n($g,"Shard"),$g.forEach(a),gi.forEach(a),fo=h(s),B=r(s,"P",{});var Ve=o(B);rh=n(Ve,"\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),hl=r(Ve,"CODE",{});var xg=o(hl);oh=n(xg,"num_shards"),xg.forEach(a),ph=n(Ve," parameter in "),Rt=r(Ve,"A",{href:!0});var yg=o(Rt);ih=n(yg,"shard()"),yg.forEach(a),ch=n(Ve," to determine the number of shards to split the dataset into. You\u2019ll also need to provide the shard you want to return with the "),ul=r(Ve,"CODE",{});var kg=o(ul);hh=n(kg,"index"),kg.forEach(a),uh=n(Ve," parameter."),Ve.forEach(a),mo=h(s),Zs=r(s,"P",{});var _i=o(Zs);fh=n(_i,"For example, the "),ua=r(_i,"A",{href:!0,rel:!0});var Eg=o(ua);dh=n(Eg,"imdb"),Eg.forEach(a),mh=n(_i," dataset has 25000 examples:"),_i.forEach(a),go=h(s),m(fa.$$.fragment,s),_o=h(s),Mt=r(s,"P",{});var qg=o(Mt);gh=n(qg,"After sharding the dataset into four chunks, the first shard will only have 6250 examples:"),qg.forEach(a),jo=h(s),m(da.$$.fragment,s),vo=h(s),xs=r(s,"H2",{class:!0});var ji=o(xs);se=r(ji,"A",{id:!0,class:!0,href:!0});var Ag=o(se);fl=r(Ag,"SPAN",{});var Dg=o(fl);m(ma.$$.fragment,Dg),Dg.forEach(a),Ag.forEach(a),_h=h(ji),dl=r(ji,"SPAN",{});var Tg=o(dl);jh=n(Tg,"Rename, remove, cast, and flatten"),Tg.forEach(a),ji.forEach(a),bo=h(s),It=r(s,"P",{});var Pg=o(It);vh=n(Pg,"The following functions allow you to modify the columns of a dataset. These functions are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),Pg.forEach(a),wo=h(s),ys=r(s,"H3",{class:!0});var vi=o(ys);ee=r(vi,"A",{id:!0,class:!0,href:!0});var Sg=o(ee);ml=r(Sg,"SPAN",{});var Cg=o(ml);m(ga.$$.fragment,Cg),Cg.forEach(a),Sg.forEach(a),bh=h(vi),gl=r(vi,"SPAN",{});var Ng=o(gl);wh=n(Ng,"Rename"),Ng.forEach(a),vi.forEach(a),$o=h(s),ae=r(s,"P",{});var bi=o(ae);$h=n(bi,"Use "),Lt=r(bi,"A",{href:!0});var zg=o(Lt);xh=n(zg,"rename_column()"),zg.forEach(a),yh=n(bi," when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),bi.forEach(a),xo=h(s),te=r(s,"P",{});var wi=o(te);kh=n(wi,"Provide "),Ut=r(wi,"A",{href:!0});var Fg=o(Ut);Eh=n(Fg,"rename_column()"),Fg.forEach(a),qh=n(wi," with the name of the original column, and the new column name:"),wi.forEach(a),yo=h(s),m(_a.$$.fragment,s),ko=h(s),ks=r(s,"H3",{class:!0});var $i=o(ks);ne=r($i,"A",{id:!0,class:!0,href:!0});var Og=o(ne);_l=r(Og,"SPAN",{});var Rg=o(_l);m(ja.$$.fragment,Rg),Rg.forEach(a),Og.forEach(a),Ah=h($i),jl=r($i,"SPAN",{});var Mg=o(jl);Dh=n(Mg,"Remove"),Mg.forEach(a),$i.forEach(a),Eo=h(s),le=r(s,"P",{});var xi=o(le);Th=n(xi,"When you need to remove one or more columns, provide the column name to remove to the "),Vt=r(xi,"A",{href:!0});var Ig=o(Vt);Ph=n(Ig,"remove_columns()"),Ig.forEach(a),Sh=n(xi," function. Remove more than one column by providing a list of column names:"),xi.forEach(a),qo=h(s),m(va.$$.fragment,s),Ao=h(s),Es=r(s,"H3",{class:!0});var yi=o(Es);re=r(yi,"A",{id:!0,class:!0,href:!0});var Lg=o(re);vl=r(Lg,"SPAN",{});var Ug=o(vl);m(ba.$$.fragment,Ug),Ug.forEach(a),Lg.forEach(a),Ch=h(yi),bl=r(yi,"SPAN",{});var Vg=o(bl);Nh=n(Vg,"Cast"),Vg.forEach(a),yi.forEach(a),Do=h(s),z=r(s,"P",{});var fs=o(z);zh=n(fs,"The "),Bt=r(fs,"A",{href:!0});var Bg=o(Bt);Fh=n(Bg,"cast()"),Bg.forEach(a),Oh=n(fs," function transforms the feature type of one or more columns. This function accepts your new "),Ht=r(fs,"A",{href:!0});var Hg=o(Ht);Rh=n(Hg,"Features"),Hg.forEach(a),Mh=n(fs," as its argument. The example below demonstrates how to change the "),Yt=r(fs,"A",{href:!0});var Yg=o(Yt);Ih=n(Yg,"ClassLabel"),Yg.forEach(a),Lh=n(fs," and "),Gt=r(fs,"A",{href:!0});var Gg=o(Gt);Uh=n(Gg,"Value"),Gg.forEach(a),Vh=n(fs," features:"),fs.forEach(a),To=h(s),m(wa.$$.fragment,s),Po=h(s),m(oe.$$.fragment,s),So=h(s),pe=r(s,"P",{});var ki=o(pe);Bh=n(ki,"Use the "),Wt=r(ki,"A",{href:!0});var Wg=o(Wt);Hh=n(Wg,"cast_column()"),Wg.forEach(a),Yh=n(ki," function to change the feature type of a single column. Pass the column name and its new feature type as arguments:"),ki.forEach(a),Co=h(s),m($a.$$.fragment,s),No=h(s),qs=r(s,"H3",{class:!0});var Ei=o(qs);ie=r(Ei,"A",{id:!0,class:!0,href:!0});var Jg=o(ie);wl=r(Jg,"SPAN",{});var Kg=o(wl);m(xa.$$.fragment,Kg),Kg.forEach(a),Jg.forEach(a),Gh=h(Ei),$l=r(Ei,"SPAN",{});var Qg=o($l);Wh=n(Qg,"Flatten"),Qg.forEach(a),Ei.forEach(a),zo=h(s),Jt=r(s,"P",{});var Xg=o(Jt);Jh=n(Xg,"Sometimes a column can be a nested structure of several types. Take a look at the nested structure below from the SQuAD dataset:"),Xg.forEach(a),Fo=h(s),m(ya.$$.fragment,s),Oo=h(s),F=r(s,"P",{});var ds=o(F);Kh=n(ds,"The "),xl=r(ds,"CODE",{});var Zg=o(xl);Qh=n(Zg,"answers"),Zg.forEach(a),Xh=n(ds," field contains two subfields: "),yl=r(ds,"CODE",{});var s_=o(yl);Zh=n(s_,"text"),s_.forEach(a),su=n(ds," and "),kl=r(ds,"CODE",{});var e_=o(kl);eu=n(e_,"answer_start"),e_.forEach(a),au=n(ds,". Use the "),Kt=r(ds,"A",{href:!0});var a_=o(Kt);tu=n(a_,"flatten()"),a_.forEach(a),nu=n(ds," function to extract the subfields into their own separate columns:"),ds.forEach(a),Ro=h(s),m(ka.$$.fragment,s),Mo=h(s),ss=r(s,"P",{});var Cn=o(ss);lu=n(Cn,"Notice how the subfields are now their own independent columns: "),El=r(Cn,"CODE",{});var t_=o(El);ru=n(t_,"answers.text"),t_.forEach(a),ou=n(Cn," and "),ql=r(Cn,"CODE",{});var n_=o(ql);pu=n(n_,"answers.answer_start"),n_.forEach(a),iu=n(Cn,"."),Cn.forEach(a),Io=h(s),As=r(s,"H2",{class:!0});var qi=o(As);ce=r(qi,"A",{id:!0,class:!0,href:!0});var l_=o(ce);Al=r(l_,"SPAN",{});var r_=o(Al);m(Ea.$$.fragment,r_),r_.forEach(a),l_.forEach(a),cu=h(qi),Dl=r(qi,"SPAN",{});var o_=o(Dl);hu=n(o_,"Map"),o_.forEach(a),qi.forEach(a),Lo=h(s),es=r(s,"P",{});var Nn=o(es);uu=n(Nn,"Some of the more powerful applications of \u{1F917} Datasets come from using the "),Qt=r(Nn,"A",{href:!0});var p_=o(Qt);fu=n(p_,"map()"),p_.forEach(a),du=n(Nn," function. The primary purpose of "),Xt=r(Nn,"A",{href:!0});var i_=o(Xt);mu=n(i_,"map()"),i_.forEach(a),gu=n(Nn," is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),Nn.forEach(a),Uo=h(s),as=r(s,"P",{});var zn=o(as);_u=n(zn,"In the following example, prefix each "),Tl=r(zn,"CODE",{});var c_=o(Tl);ju=n(c_,"sentence1"),c_.forEach(a),vu=n(zn," value in the dataset with "),Pl=r(zn,"CODE",{});var h_=o(Pl);bu=n(h_,"'My sentence: '"),h_.forEach(a),wu=n(zn,"."),zn.forEach(a),Vo=h(s),ts=r(s,"P",{});var Fn=o(ts);$u=n(Fn,"Start by creating a function that adds "),Sl=r(Fn,"CODE",{});var u_=o(Sl);xu=n(u_,"'My sentence: '"),u_.forEach(a),yu=n(Fn," to the beginning of each sentence. The function needs to accept and output a "),Cl=r(Fn,"CODE",{});var f_=o(Cl);ku=n(f_,"dict"),f_.forEach(a),Eu=n(Fn,":"),Fn.forEach(a),Bo=h(s),m(qa.$$.fragment,s),Ho=h(s),ns=r(s,"P",{});var On=o(ns);qu=n(On,"Now use "),Zt=r(On,"A",{href:!0});var d_=o(Zt);Au=n(d_,"map()"),d_.forEach(a),Du=n(On," to apply the "),Nl=r(On,"CODE",{});var m_=o(Nl);Tu=n(m_,"add_prefix"),m_.forEach(a),Pu=n(On," function to the entire dataset:"),On.forEach(a),Yo=h(s),m(Aa.$$.fragment,s),Go=h(s),he=r(s,"P",{});var Ai=o(he);Su=n(Ai,"Let\u2019s take a look at another example, except this time, you\u2019ll remove a column with "),sn=r(Ai,"A",{href:!0});var g_=o(sn);Cu=n(g_,"map()"),g_.forEach(a),Nu=n(Ai,". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Ai.forEach(a),Wo=h(s),ls=r(s,"P",{});var Rn=o(ls);zu=n(Rn,"Specify the column to remove with the "),zl=r(Rn,"CODE",{});var __=o(zl);Fu=n(__,"remove_columns"),__.forEach(a),Ou=n(Rn," parameter in "),en=r(Rn,"A",{href:!0});var j_=o(en);Ru=n(j_,"map()"),j_.forEach(a),Mu=n(Rn,":"),Rn.forEach(a),Jo=h(s),m(Da.$$.fragment,s),Ko=h(s),m(ue.$$.fragment,s),Qo=h(s),rs=r(s,"P",{});var Mn=o(rs);Iu=n(Mn,"You can also use "),an=r(Mn,"A",{href:!0});var v_=o(an);Lu=n(v_,"map()"),v_.forEach(a),Uu=n(Mn," with indices if you set "),Fl=r(Mn,"CODE",{});var b_=o(Fl);Vu=n(b_,"with_indices=True"),b_.forEach(a),Bu=n(Mn,". The example below adds the index to the beginning of each sentence:"),Mn.forEach(a),Xo=h(s),m(Ta.$$.fragment,s),Zo=h(s),C=r(s,"P",{});var G=o(C);Hu=n(G,"The "),tn=r(G,"A",{href:!0});var w_=o(tn);Yu=n(w_,"map()"),w_.forEach(a),Gu=n(G," also works with the rank of the process if you set "),Ol=r(G,"CODE",{});var $_=o(Ol);Wu=n($_,"with_rank=True"),$_.forEach(a),Ju=n(G,". This is analogous to the "),Rl=r(G,"CODE",{});var x_=o(Rl);Ku=n(x_,"with_indices"),x_.forEach(a),Qu=n(G," parameter. The "),Ml=r(G,"CODE",{});var y_=o(Ml);Xu=n(y_,"with_rank"),y_.forEach(a),Zu=n(G," parameter in the mapped function goes after the "),Il=r(G,"CODE",{});var k_=o(Il);sf=n(k_,"index"),k_.forEach(a),ef=n(G," one if it is already present."),G.forEach(a),sp=h(s),m(Pa.$$.fragment,s),ep=h(s),fe=r(s,"P",{});var Di=o(fe);af=n(Di,"The main use-case for rank is to parallelize computation across several GPUs. This requires setting "),Ll=r(Di,"CODE",{});var E_=o(Ll);tf=n(E_,'multiprocess.set_start_method("spawn")'),E_.forEach(a),nf=n(Di,". If you don\u2019t you\u2019ll receive the following CUDA error:"),Di.forEach(a),ap=h(s),m(Sa.$$.fragment,s),tp=h(s),Ds=r(s,"H3",{class:!0});var Ti=o(Ds);de=r(Ti,"A",{id:!0,class:!0,href:!0});var q_=o(de);Ul=r(q_,"SPAN",{});var A_=o(Ul);m(Ca.$$.fragment,A_),A_.forEach(a),q_.forEach(a),lf=h(Ti),Vl=r(Ti,"SPAN",{});var D_=o(Vl);rf=n(D_,"Multiprocessing"),D_.forEach(a),Ti.forEach(a),np=h(s),os=r(s,"P",{});var In=o(os);of=n(In,"Multiprocessing significantly speeds up processing by parallelizing processes on the CPU. Set the "),Bl=r(In,"CODE",{});var T_=o(Bl);pf=n(T_,"num_proc"),T_.forEach(a),cf=n(In," parameter in "),nn=r(In,"A",{href:!0});var P_=o(nn);hf=n(P_,"map()"),P_.forEach(a),uf=n(In," to set the number of processes to use:"),In.forEach(a),lp=h(s),m(Na.$$.fragment,s),rp=h(s),Ts=r(s,"H3",{class:!0});var Pi=o(Ts);me=r(Pi,"A",{id:!0,class:!0,href:!0});var S_=o(me);Hl=r(S_,"SPAN",{});var C_=o(Hl);m(za.$$.fragment,C_),C_.forEach(a),S_.forEach(a),ff=h(Pi),Yl=r(Pi,"SPAN",{});var N_=o(Yl);df=n(N_,"Batch processing"),N_.forEach(a),Pi.forEach(a),op=h(s),H=r(s,"P",{});var Be=o(H);mf=n(Be,"The "),ln=r(Be,"A",{href:!0});var z_=o(ln);gf=n(z_,"map()"),z_.forEach(a),_f=n(Be," function supports working with batches of examples. Operate on batches by setting "),Gl=r(Be,"CODE",{});var F_=o(Gl);jf=n(F_,"batched=True"),F_.forEach(a),vf=n(Be,". The default batch size is 1000, but you can adjust it with the "),Wl=r(Be,"CODE",{});var O_=o(Wl);bf=n(O_,"batch_size"),O_.forEach(a),wf=n(Be," parameter. Batch processing enables interesting applications such as splitting long sentences into shorter chunks and data augmentation."),Be.forEach(a),pp=h(s),Ps=r(s,"H4",{class:!0});var Si=o(Ps);ge=r(Si,"A",{id:!0,class:!0,href:!0});var R_=o(ge);Jl=r(R_,"SPAN",{});var M_=o(Jl);m(Fa.$$.fragment,M_),M_.forEach(a),R_.forEach(a),$f=h(Si),Kl=r(Si,"SPAN",{});var I_=o(Kl);xf=n(I_,"Split long examples"),I_.forEach(a),Si.forEach(a),ip=h(s),rn=r(s,"P",{});var L_=o(rn);yf=n(L_,"When examples are too long, you may want to split them into several smaller chunks. Begin by creating a function that:"),L_.forEach(a),cp=h(s),_e=r(s,"OL",{});var Ci=o(_e);Ql=r(Ci,"LI",{});var U_=o(Ql);Oa=r(U_,"P",{});var Ni=o(Oa);kf=n(Ni,"Splits the "),Xl=r(Ni,"CODE",{});var V_=o(Xl);Ef=n(V_,"sentence1"),V_.forEach(a),qf=n(Ni," field into chunks of 50 characters."),Ni.forEach(a),U_.forEach(a),Af=h(Ci),Zl=r(Ci,"LI",{});var B_=o(Zl);sr=r(B_,"P",{});var H_=o(sr);Df=n(H_,"Stacks all the chunks together to create the new dataset."),H_.forEach(a),B_.forEach(a),Ci.forEach(a),hp=h(s),m(Ra.$$.fragment,s),up=h(s),je=r(s,"P",{});var zi=o(je);Tf=n(zi,"Apply the function with "),on=r(zi,"A",{href:!0});var Y_=o(on);Pf=n(Y_,"map()"),Y_.forEach(a),Sf=n(zi,":"),zi.forEach(a),fp=h(s),m(Ma.$$.fragment,s),dp=h(s),pn=r(s,"P",{});var G_=o(pn);Cf=n(G_,"Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),G_.forEach(a),mp=h(s),m(Ia.$$.fragment,s),gp=h(s),Ss=r(s,"H4",{class:!0});var Fi=o(Ss);ve=r(Fi,"A",{id:!0,class:!0,href:!0});var W_=o(ve);er=r(W_,"SPAN",{});var J_=o(er);m(La.$$.fragment,J_),J_.forEach(a),W_.forEach(a),Nf=h(Fi),ar=r(Fi,"SPAN",{});var K_=o(ar);zf=n(K_,"Data augmentation"),K_.forEach(a),Fi.forEach(a),_p=h(s),be=r(s,"P",{});var Oi=o(be);Ff=n(Oi,"The "),cn=r(Oi,"A",{href:!0});var Q_=o(cn);Of=n(Q_,"map()"),Q_.forEach(a),Rf=n(Oi," function could also be used for data augmentation. The following example generates additional words for a masked token in a sentence."),Oi.forEach(a),jp=h(s),ps=r(s,"P",{});var Ln=o(ps);Mf=n(Ln,"Load and use the "),Ua=r(Ln,"A",{href:!0,rel:!0});var X_=o(Ua);If=n(X_,"RoBERTA"),X_.forEach(a),Lf=n(Ln," model in \u{1F917} Transformers\u2019 "),Va=r(Ln,"A",{href:!0,rel:!0});var Z_=o(Va);Uf=n(Z_,"FillMaskPipeline"),Z_.forEach(a),Vf=n(Ln,":"),Ln.forEach(a),vp=h(s),m(Ba.$$.fragment,s),bp=h(s),hn=r(s,"P",{});var s2=o(hn);Bf=n(s2,"Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),s2.forEach(a),wp=h(s),m(Ha.$$.fragment,s),$p=h(s),we=r(s,"P",{});var Ri=o(we);Hf=n(Ri,"Use "),un=r(Ri,"A",{href:!0});var e2=o(un);Yf=n(e2,"map()"),e2.forEach(a),Gf=n(Ri," to apply the function over the whole dataset:"),Ri.forEach(a),xp=h(s),m(Ya.$$.fragment,s),yp=h(s),O=r(s,"P",{});var ms=o(O);Wf=n(ms,"For each original sentence, RoBERTA augmented a random word with three alternatives. The original word "),tr=r(ms,"CODE",{});var a2=o(tr);Jf=n(a2,"distorting"),a2.forEach(a),Kf=n(ms," is supplemented by "),nr=r(ms,"CODE",{});var t2=o(nr);Qf=n(t2,"withholding"),t2.forEach(a),Xf=n(ms,", "),lr=r(ms,"CODE",{});var n2=o(lr);Zf=n(n2,"suppressing"),n2.forEach(a),sd=n(ms,", and "),rr=r(ms,"CODE",{});var l2=o(rr);ed=n(l2,"destroying"),l2.forEach(a),ad=n(ms,"."),ms.forEach(a),kp=h(s),Cs=r(s,"H3",{class:!0});var Mi=o(Cs);$e=r(Mi,"A",{id:!0,class:!0,href:!0});var r2=o($e);or=r(r2,"SPAN",{});var o2=o(or);m(Ga.$$.fragment,o2),o2.forEach(a),r2.forEach(a),td=h(Mi),pr=r(Mi,"SPAN",{});var p2=o(pr);nd=n(p2,"Process multiple splits"),p2.forEach(a),Mi.forEach(a),Ep=h(s),is=r(s,"P",{});var Un=o(is);ld=n(Un,"Many datasets have splits that can be processed simultaneously with "),fn=r(Un,"A",{href:!0});var i2=o(fn);rd=n(i2,"DatasetDict.map()"),i2.forEach(a),od=n(Un,". For example, tokenize the "),ir=r(Un,"CODE",{});var c2=o(ir);pd=n(c2,"sentence1"),c2.forEach(a),id=n(Un," field in the train and test split by:"),Un.forEach(a),qp=h(s),m(Wa.$$.fragment,s),Ap=h(s),Ns=r(s,"H3",{class:!0});var Ii=o(Ns);xe=r(Ii,"A",{id:!0,class:!0,href:!0});var h2=o(xe);cr=r(h2,"SPAN",{});var u2=o(cr);m(Ja.$$.fragment,u2),u2.forEach(a),h2.forEach(a),cd=h(Ii),hr=r(Ii,"SPAN",{});var f2=o(hr);hd=n(f2,"Distributed usage"),f2.forEach(a),Ii.forEach(a),Dp=h(s),cs=r(s,"P",{});var Vn=o(cs);ud=n(Vn,"When you use "),dn=r(Vn,"A",{href:!0});var d2=o(dn);fd=n(d2,"map()"),d2.forEach(a),dd=n(Vn," in a distributed setting, you should also use "),Ka=r(Vn,"A",{href:!0,rel:!0});var m2=o(Ka);md=n(m2,"torch.distributed.barrier"),m2.forEach(a),gd=n(Vn,". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),Vn.forEach(a),Tp=h(s),ye=r(s,"P",{});var Li=o(ye);_d=n(Li,"The following example shows how you can use "),ur=r(Li,"CODE",{});var g2=o(ur);jd=n(g2,"torch.distributed.barrier"),g2.forEach(a),vd=n(Li," to synchronize the processes:"),Li.forEach(a),Pp=h(s),m(Qa.$$.fragment,s),Sp=h(s),zs=r(s,"H2",{class:!0});var Ui=o(zs);ke=r(Ui,"A",{id:!0,class:!0,href:!0});var _2=o(ke);fr=r(_2,"SPAN",{});var j2=o(fr);m(Xa.$$.fragment,j2),j2.forEach(a),_2.forEach(a),bd=h(Ui),dr=r(Ui,"SPAN",{});var v2=o(dr);wd=n(v2,"Concatenate"),v2.forEach(a),Ui.forEach(a),Cp=h(s),Ee=r(s,"P",{});var Vi=o(Ee);$d=n(Vi,"Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),mn=r(Vi,"A",{href:!0});var b2=o(mn);xd=n(b2,"concatenate_datasets()"),b2.forEach(a),yd=n(Vi,":"),Vi.forEach(a),Np=h(s),m(Za.$$.fragment,s),zp=h(s),m(qe.$$.fragment,s),Fp=h(s),Ae=r(s,"P",{});var Bi=o(Ae);kd=n(Bi,"You can also concatenate two datasets horizontally by setting "),mr=r(Bi,"CODE",{});var w2=o(mr);Ed=n(w2,"axis=1"),w2.forEach(a),qd=n(Bi," as long as the datasets have the same number of rows:"),Bi.forEach(a),Op=h(s),m(st.$$.fragment,s),Rp=h(s),Fs=r(s,"H2",{class:!0});var Hi=o(Fs);De=r(Hi,"A",{id:!0,class:!0,href:!0});var $2=o(De);gr=r($2,"SPAN",{});var x2=o(gr);m(et.$$.fragment,x2),x2.forEach(a),$2.forEach(a),Ad=h(Hi),_r=r(Hi,"SPAN",{});var y2=o(_r);Dd=n(y2,"Format"),y2.forEach(a),Hi.forEach(a),Mp=h(s),hs=r(s,"P",{});var Bn=o(hs);Td=n(Bn,"The "),gn=r(Bn,"A",{href:!0});var k2=o(gn);Pd=n(k2,"set_format()"),k2.forEach(a),Sd=n(Bn," function changes the format of a column to be compatible with some common data formats. Specify the output you\u2019d like in the "),jr=r(Bn,"CODE",{});var E2=o(jr);Cd=n(E2,"type"),E2.forEach(a),Nd=n(Bn," parameter and the columns you want to format. Formatting is applied on-the-fly."),Bn.forEach(a),Ip=h(s),Te=r(s,"P",{});var Yi=o(Te);zd=n(Yi,"For example, create PyTorch tensors by setting "),vr=r(Yi,"CODE",{});var q2=o(vr);Fd=n(q2,'type="torch"'),q2.forEach(a),Od=n(Yi,":"),Yi.forEach(a),Lp=h(s),m(at.$$.fragment,s),Up=h(s),us=r(s,"P",{});var Hn=o(us);Rd=n(Hn,"The "),_n=r(Hn,"A",{href:!0});var A2=o(_n);Md=n(A2,"with_format()"),A2.forEach(a),Id=n(Hn," function also changes the format of a column, except it returns a new "),jn=r(Hn,"A",{href:!0});var D2=o(jn);Ld=n(D2,"Dataset"),D2.forEach(a),Ud=n(Hn," object:"),Hn.forEach(a),Vp=h(s),m(tt.$$.fragment,s),Bp=h(s),m(Pe.$$.fragment,s),Hp=h(s),Se=r(s,"P",{});var Gi=o(Se);Vd=n(Gi,"If you need to reset the dataset to its original format, use the "),vn=r(Gi,"A",{href:!0});var T2=o(vn);Bd=n(T2,"reset_format()"),T2.forEach(a),Hd=n(Gi," function:"),Gi.forEach(a),Yp=h(s),m(nt.$$.fragment,s),Gp=h(s),Os=r(s,"H3",{class:!0});var Wi=o(Os);Ce=r(Wi,"A",{id:!0,class:!0,href:!0});var P2=o(Ce);br=r(P2,"SPAN",{});var S2=o(br);m(lt.$$.fragment,S2),S2.forEach(a),P2.forEach(a),Yd=h(Wi),wr=r(Wi,"SPAN",{});var C2=o(wr);Gd=n(C2,"Format transform"),C2.forEach(a),Wi.forEach(a),Wp=h(s),Ne=r(s,"P",{});var Ji=o(Ne);Wd=n(Ji,"The "),bn=r(Ji,"A",{href:!0});var N2=o(bn);Jd=n(N2,"set_transform()"),N2.forEach(a),Kd=n(Ji," function applies a custom formatting transform on-the-fly. This function replaces any previously specified format. For example, you can use this function to tokenize and pad tokens on-the-fly. Tokenization is only applied when examples are accessed:"),Ji.forEach(a),Jp=h(s),m(rt.$$.fragment,s),Kp=h(s),Rs=r(s,"H2",{class:!0});var Ki=o(Rs);ze=r(Ki,"A",{id:!0,class:!0,href:!0});var z2=o(ze);$r=r(z2,"SPAN",{});var F2=o($r);m(ot.$$.fragment,F2),F2.forEach(a),z2.forEach(a),Qd=h(Ki),xr=r(Ki,"SPAN",{});var O2=o(xr);Xd=n(O2,"Save"),O2.forEach(a),Ki.forEach(a),Qp=h(s),Fe=r(s,"P",{});var Qi=o(Fe);Zd=n(Qi,"Once you are done processing your dataset, you can save and reuse it later with "),wn=r(Qi,"A",{href:!0});var R2=o(wn);sm=n(R2,"save_to_disk()"),R2.forEach(a),em=n(Qi,"."),Qi.forEach(a),Xp=h(s),$n=r(s,"P",{});var M2=o($n);am=n(M2,"Save your dataset by providing the path to the directory you wish to save it to:"),M2.forEach(a),Zp=h(s),m(pt.$$.fragment,s),si=h(s),Oe=r(s,"P",{});var Xi=o(Oe);tm=n(Xi,"Use the "),xn=r(Xi,"A",{href:!0});var I2=o(xn);nm=n(I2,"load_from_disk()"),I2.forEach(a),lm=n(Xi," function to reload the dataset:"),Xi.forEach(a),ei=h(s),m(it.$$.fragment,s),ai=h(s),m(Re.$$.fragment,s),ti=h(s),Ms=r(s,"H2",{class:!0});var Zi=o(Ms);Me=r(Zi,"A",{id:!0,class:!0,href:!0});var L2=o(Me);yr=r(L2,"SPAN",{});var U2=o(yr);m(ct.$$.fragment,U2),U2.forEach(a),L2.forEach(a),rm=h(Zi),kr=r(Zi,"SPAN",{});var V2=o(kr);om=n(V2,"Export"),V2.forEach(a),Zi.forEach(a),ni=h(s),yn=r(s,"P",{});var B2=o(yn);pm=n(B2,"\u{1F917} Datasets supports exporting as well so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),B2.forEach(a),li=h(s),Ie=r(s,"TABLE",{});var sc=o(Ie);Er=r(sc,"THEAD",{});var H2=o(Er);ht=r(H2,"TR",{});var ec=o(ht);qr=r(ec,"TH",{});var Y2=o(qr);im=n(Y2,"File type"),Y2.forEach(a),cm=h(ec),Ar=r(ec,"TH",{});var G2=o(Ar);hm=n(G2,"Export method"),G2.forEach(a),ec.forEach(a),H2.forEach(a),um=h(sc),J=r(sc,"TBODY",{});var He=o(J);ut=r(He,"TR",{});var ac=o(ut);Dr=r(ac,"TD",{});var W2=o(Dr);fm=n(W2,"CSV"),W2.forEach(a),dm=h(ac),Tr=r(ac,"TD",{});var J2=o(Tr);kn=r(J2,"A",{href:!0});var K2=o(kn);mm=n(K2,"Dataset.to_csv()"),K2.forEach(a),J2.forEach(a),ac.forEach(a),gm=h(He),ft=r(He,"TR",{});var tc=o(ft);Pr=r(tc,"TD",{});var Q2=o(Pr);_m=n(Q2,"JSON"),Q2.forEach(a),jm=h(tc),Sr=r(tc,"TD",{});var X2=o(Sr);En=r(X2,"A",{href:!0});var Z2=o(En);vm=n(Z2,"Dataset.to_json()"),Z2.forEach(a),X2.forEach(a),tc.forEach(a),bm=h(He),dt=r(He,"TR",{});var nc=o(dt);Cr=r(nc,"TD",{});var sj=o(Cr);wm=n(sj,"Parquet"),sj.forEach(a),$m=h(nc),Nr=r(nc,"TD",{});var ej=o(Nr);qn=r(ej,"A",{href:!0});var aj=o(qn);xm=n(aj,"Dataset.to_parquet()"),aj.forEach(a),ej.forEach(a),nc.forEach(a),ym=h(He),mt=r(He,"TR",{});var lc=o(mt);zr=r(lc,"TD",{});var tj=o(zr);km=n(tj,"In-memory Python object"),tj.forEach(a),Em=h(lc),gt=r(lc,"TD",{});var rc=o(gt);An=r(rc,"A",{href:!0});var nj=o(An);qm=n(nj,"Dataset.to_pandas()"),nj.forEach(a),Am=n(rc," or "),Dn=r(rc,"A",{href:!0});var lj=o(Dn);Dm=n(lj,"Dataset.to_dict()"),lj.forEach(a),rc.forEach(a),lc.forEach(a),He.forEach(a),sc.forEach(a),ri=h(s),Tn=r(s,"P",{});var rj=o(Tn);Tm=n(rj,"For example, export your dataset to a CSV file like this:"),rj.forEach(a),oi=h(s),m(_t.$$.fragment,s),this.h()},h(){u(f,"name","hf:doc:metadata"),u(f,"content",JSON.stringify(vj)),u(y,"id","process"),u(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(y,"href","#process"),u(b,"class","relative group"),u(Ke,"class","underline decoration-pink-400 decoration-2 font-semibold"),u(Ke,"href","./audio_process"),u(Qe,"class","underline decoration-yellow-400 decoration-2 font-semibold"),u(Qe,"href","./image_process"),u(Xe,"class","underline decoration-green-400 decoration-2 font-semibold"),u(Xe,"href","./nlp_process"),u(Hs,"id","sort-shuffle-select-split-and-shard"),u(Hs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Hs,"href","#sort-shuffle-select-split-and-shard"),u(gs,"class","relative group"),u(Ys,"id","sort"),u(Ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ys,"href","#sort"),u(_s,"class","relative group"),u(Et,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.sort"),u(Ws,"id","shuffle"),u(Ws,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ws,"href","#shuffle"),u(js,"class","relative group"),u(qt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.shuffle"),u(Js,"id","select-and-filter"),u(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Js,"href","#select-and-filter"),u(vs,"class","relative group"),u(At,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.select"),u(Dt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.filter"),u(St,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.select"),u(zt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.filter"),u(Ft,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.filter"),u(Ks,"id","split"),u(Ks,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ks,"href","#split"),u(ws,"class","relative group"),u(Ot,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.train_test_split"),u(Xs,"id","shard"),u(Xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Xs,"href","#shard"),u($s,"class","relative group"),u(Rt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.shard"),u(ua,"href","https://huggingface.co/datasets/imdb"),u(ua,"rel","nofollow"),u(se,"id","rename-remove-cast-and-flatten"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#rename-remove-cast-and-flatten"),u(xs,"class","relative group"),u(ee,"id","rename"),u(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ee,"href","#rename"),u(ys,"class","relative group"),u(Lt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.rename_column"),u(Ut,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.rename_column"),u(ne,"id","remove"),u(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ne,"href","#remove"),u(ks,"class","relative group"),u(Vt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.remove_columns"),u(re,"id","cast"),u(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(re,"href","#cast"),u(Es,"class","relative group"),u(Bt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.cast"),u(Ht,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Features"),u(Yt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.ClassLabel"),u(Gt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Value"),u(Wt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.cast_column"),u(ie,"id","flatten"),u(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ie,"href","#flatten"),u(qs,"class","relative group"),u(Kt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.flatten"),u(ce,"id","map"),u(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ce,"href","#map"),u(As,"class","relative group"),u(Qt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(Xt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(Zt,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(sn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(en,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(an,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(tn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(de,"id","multiprocessing"),u(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(de,"href","#multiprocessing"),u(Ds,"class","relative group"),u(nn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(me,"id","batch-processing"),u(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(me,"href","#batch-processing"),u(Ts,"class","relative group"),u(ln,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(ge,"id","split-long-examples"),u(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ge,"href","#split-long-examples"),u(Ps,"class","relative group"),u(on,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(ve,"id","data-augmentation"),u(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ve,"href","#data-augmentation"),u(Ss,"class","relative group"),u(cn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(Ua,"href","https://huggingface.co/roberta-base"),u(Ua,"rel","nofollow"),u(Va,"href","https://huggingface.co/transformers/main_classes/pipelines#transformers.FillMaskPipeline"),u(Va,"rel","nofollow"),u(un,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u($e,"id","process-multiple-splits"),u($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u($e,"href","#process-multiple-splits"),u(Cs,"class","relative group"),u(fn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.DatasetDict.map"),u(xe,"id","distributed-usage"),u(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(xe,"href","#distributed-usage"),u(Ns,"class","relative group"),u(dn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.map"),u(Ka,"href","https://pytorch.org/docs/stable/distributed?highlight=barrier#torch.distributed.barrier"),u(Ka,"rel","nofollow"),u(ke,"id","concatenate"),u(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ke,"href","#concatenate"),u(zs,"class","relative group"),u(mn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.concatenate_datasets"),u(De,"id","format"),u(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(De,"href","#format"),u(Fs,"class","relative group"),u(gn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.set_format"),u(_n,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.with_format"),u(jn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset"),u(vn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.reset_format"),u(Ce,"id","format-transform"),u(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ce,"href","#format-transform"),u(Os,"class","relative group"),u(bn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.set_transform"),u(ze,"id","save"),u(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ze,"href","#save"),u(Rs,"class","relative group"),u(wn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),u(xn,"href","/docs/datasets/pr_4741/en/package_reference/loading_methods#datasets.load_from_disk"),u(Me,"id","export"),u(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Me,"href","#export"),u(Ms,"class","relative group"),u(kn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.to_csv"),u(En,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.to_json"),u(qn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.to_parquet"),u(An,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.to_pandas"),u(Dn,"href","/docs/datasets/pr_4741/en/package_reference/main_classes#datasets.Dataset.to_dict")},m(s,p){e(document.head,f),i(s,E,p),i(s,b,p),e(b,y),e(y,k),g(w,k,null),e(b,$),e(b,q),e(q,S),i(s,P,p),i(s,R,p),e(R,M),i(s,Is,p),i(s,K,p),e(K,Q),i(s,Ls,p),i(s,T,p),e(T,I),e(I,Ye),e(T,Ge),e(T,L),e(L,We),e(T,Je),e(T,W),e(W,D),e(T,vt),e(T,Us),e(Us,bt),e(T,wt),e(T,Vs),e(Vs,$t),e(T,xt),e(T,Gn),e(Gn,oc),i(s,Ur,p),i(s,U,p),e(U,pc),e(U,Ke),e(Ke,ic),e(U,cc),e(U,Qe),e(Qe,hc),e(U,uc),e(U,Xe),e(Xe,fc),e(U,dc),i(s,Vr,p),i(s,yt,p),e(yt,mc),i(s,Br,p),g(Ze,s,p),i(s,Hr,p),g(Bs,s,p),i(s,Yr,p),i(s,gs,p),e(gs,Hs),e(Hs,Wn),g(sa,Wn,null),e(gs,gc),e(gs,Jn),e(Jn,_c),i(s,Gr,p),i(s,kt,p),e(kt,jc),i(s,Wr,p),i(s,_s,p),e(_s,Ys),e(Ys,Kn),g(ea,Kn,null),e(_s,vc),e(_s,Qn),e(Qn,bc),i(s,Jr,p),i(s,Gs,p),e(Gs,wc),e(Gs,Et),e(Et,$c),e(Gs,xc),i(s,Kr,p),g(aa,s,p),i(s,Qr,p),i(s,js,p),e(js,Ws),e(Ws,Xn),g(ta,Xn,null),e(js,yc),e(js,Zn),e(Zn,kc),i(s,Xr,p),i(s,V,p),e(V,Ec),e(V,qt),e(qt,qc),e(V,Ac),e(V,sl),e(sl,Dc),e(V,Tc),e(V,el),e(el,Pc),e(V,Sc),i(s,Zr,p),g(na,s,p),i(s,so,p),i(s,vs,p),e(vs,Js),e(Js,al),g(la,al,null),e(vs,Cc),e(vs,tl),e(tl,Nc),i(s,eo,p),i(s,X,p),e(X,zc),e(X,At),e(At,Fc),e(X,Oc),e(X,Dt),e(Dt,Rc),e(X,Mc),i(s,ao,p),i(s,Tt,p),e(Tt,Pt),e(Pt,St),e(St,Ic),e(Pt,Lc),i(s,to,p),g(ra,s,p),i(s,no,p),i(s,Ct,p),e(Ct,Nt),e(Nt,zt),e(zt,Uc),e(Nt,Vc),i(s,lo,p),g(oa,s,p),i(s,ro,p),i(s,bs,p),e(bs,Ft),e(Ft,Bc),e(bs,Hc),e(bs,nl),e(nl,Yc),e(bs,Gc),i(s,oo,p),g(pa,s,p),i(s,po,p),i(s,ws,p),e(ws,Ks),e(Ks,ll),g(ia,ll,null),e(ws,Wc),e(ws,rl),e(rl,Jc),i(s,io,p),i(s,Z,p),e(Z,Kc),e(Z,Ot),e(Ot,Qc),e(Z,Xc),e(Z,ol),e(ol,Zc),e(Z,sh),i(s,co,p),g(ca,s,p),i(s,ho,p),i(s,Qs,p),e(Qs,eh),e(Qs,pl),e(pl,ah),e(Qs,th),i(s,uo,p),i(s,$s,p),e($s,Xs),e(Xs,il),g(ha,il,null),e($s,nh),e($s,cl),e(cl,lh),i(s,fo,p),i(s,B,p),e(B,rh),e(B,hl),e(hl,oh),e(B,ph),e(B,Rt),e(Rt,ih),e(B,ch),e(B,ul),e(ul,hh),e(B,uh),i(s,mo,p),i(s,Zs,p),e(Zs,fh),e(Zs,ua),e(ua,dh),e(Zs,mh),i(s,go,p),g(fa,s,p),i(s,_o,p),i(s,Mt,p),e(Mt,gh),i(s,jo,p),g(da,s,p),i(s,vo,p),i(s,xs,p),e(xs,se),e(se,fl),g(ma,fl,null),e(xs,_h),e(xs,dl),e(dl,jh),i(s,bo,p),i(s,It,p),e(It,vh),i(s,wo,p),i(s,ys,p),e(ys,ee),e(ee,ml),g(ga,ml,null),e(ys,bh),e(ys,gl),e(gl,wh),i(s,$o,p),i(s,ae,p),e(ae,$h),e(ae,Lt),e(Lt,xh),e(ae,yh),i(s,xo,p),i(s,te,p),e(te,kh),e(te,Ut),e(Ut,Eh),e(te,qh),i(s,yo,p),g(_a,s,p),i(s,ko,p),i(s,ks,p),e(ks,ne),e(ne,_l),g(ja,_l,null),e(ks,Ah),e(ks,jl),e(jl,Dh),i(s,Eo,p),i(s,le,p),e(le,Th),e(le,Vt),e(Vt,Ph),e(le,Sh),i(s,qo,p),g(va,s,p),i(s,Ao,p),i(s,Es,p),e(Es,re),e(re,vl),g(ba,vl,null),e(Es,Ch),e(Es,bl),e(bl,Nh),i(s,Do,p),i(s,z,p),e(z,zh),e(z,Bt),e(Bt,Fh),e(z,Oh),e(z,Ht),e(Ht,Rh),e(z,Mh),e(z,Yt),e(Yt,Ih),e(z,Lh),e(z,Gt),e(Gt,Uh),e(z,Vh),i(s,To,p),g(wa,s,p),i(s,Po,p),g(oe,s,p),i(s,So,p),i(s,pe,p),e(pe,Bh),e(pe,Wt),e(Wt,Hh),e(pe,Yh),i(s,Co,p),g($a,s,p),i(s,No,p),i(s,qs,p),e(qs,ie),e(ie,wl),g(xa,wl,null),e(qs,Gh),e(qs,$l),e($l,Wh),i(s,zo,p),i(s,Jt,p),e(Jt,Jh),i(s,Fo,p),g(ya,s,p),i(s,Oo,p),i(s,F,p),e(F,Kh),e(F,xl),e(xl,Qh),e(F,Xh),e(F,yl),e(yl,Zh),e(F,su),e(F,kl),e(kl,eu),e(F,au),e(F,Kt),e(Kt,tu),e(F,nu),i(s,Ro,p),g(ka,s,p),i(s,Mo,p),i(s,ss,p),e(ss,lu),e(ss,El),e(El,ru),e(ss,ou),e(ss,ql),e(ql,pu),e(ss,iu),i(s,Io,p),i(s,As,p),e(As,ce),e(ce,Al),g(Ea,Al,null),e(As,cu),e(As,Dl),e(Dl,hu),i(s,Lo,p),i(s,es,p),e(es,uu),e(es,Qt),e(Qt,fu),e(es,du),e(es,Xt),e(Xt,mu),e(es,gu),i(s,Uo,p),i(s,as,p),e(as,_u),e(as,Tl),e(Tl,ju),e(as,vu),e(as,Pl),e(Pl,bu),e(as,wu),i(s,Vo,p),i(s,ts,p),e(ts,$u),e(ts,Sl),e(Sl,xu),e(ts,yu),e(ts,Cl),e(Cl,ku),e(ts,Eu),i(s,Bo,p),g(qa,s,p),i(s,Ho,p),i(s,ns,p),e(ns,qu),e(ns,Zt),e(Zt,Au),e(ns,Du),e(ns,Nl),e(Nl,Tu),e(ns,Pu),i(s,Yo,p),g(Aa,s,p),i(s,Go,p),i(s,he,p),e(he,Su),e(he,sn),e(sn,Cu),e(he,Nu),i(s,Wo,p),i(s,ls,p),e(ls,zu),e(ls,zl),e(zl,Fu),e(ls,Ou),e(ls,en),e(en,Ru),e(ls,Mu),i(s,Jo,p),g(Da,s,p),i(s,Ko,p),g(ue,s,p),i(s,Qo,p),i(s,rs,p),e(rs,Iu),e(rs,an),e(an,Lu),e(rs,Uu),e(rs,Fl),e(Fl,Vu),e(rs,Bu),i(s,Xo,p),g(Ta,s,p),i(s,Zo,p),i(s,C,p),e(C,Hu),e(C,tn),e(tn,Yu),e(C,Gu),e(C,Ol),e(Ol,Wu),e(C,Ju),e(C,Rl),e(Rl,Ku),e(C,Qu),e(C,Ml),e(Ml,Xu),e(C,Zu),e(C,Il),e(Il,sf),e(C,ef),i(s,sp,p),g(Pa,s,p),i(s,ep,p),i(s,fe,p),e(fe,af),e(fe,Ll),e(Ll,tf),e(fe,nf),i(s,ap,p),g(Sa,s,p),i(s,tp,p),i(s,Ds,p),e(Ds,de),e(de,Ul),g(Ca,Ul,null),e(Ds,lf),e(Ds,Vl),e(Vl,rf),i(s,np,p),i(s,os,p),e(os,of),e(os,Bl),e(Bl,pf),e(os,cf),e(os,nn),e(nn,hf),e(os,uf),i(s,lp,p),g(Na,s,p),i(s,rp,p),i(s,Ts,p),e(Ts,me),e(me,Hl),g(za,Hl,null),e(Ts,ff),e(Ts,Yl),e(Yl,df),i(s,op,p),i(s,H,p),e(H,mf),e(H,ln),e(ln,gf),e(H,_f),e(H,Gl),e(Gl,jf),e(H,vf),e(H,Wl),e(Wl,bf),e(H,wf),i(s,pp,p),i(s,Ps,p),e(Ps,ge),e(ge,Jl),g(Fa,Jl,null),e(Ps,$f),e(Ps,Kl),e(Kl,xf),i(s,ip,p),i(s,rn,p),e(rn,yf),i(s,cp,p),i(s,_e,p),e(_e,Ql),e(Ql,Oa),e(Oa,kf),e(Oa,Xl),e(Xl,Ef),e(Oa,qf),e(_e,Af),e(_e,Zl),e(Zl,sr),e(sr,Df),i(s,hp,p),g(Ra,s,p),i(s,up,p),i(s,je,p),e(je,Tf),e(je,on),e(on,Pf),e(je,Sf),i(s,fp,p),g(Ma,s,p),i(s,dp,p),i(s,pn,p),e(pn,Cf),i(s,mp,p),g(Ia,s,p),i(s,gp,p),i(s,Ss,p),e(Ss,ve),e(ve,er),g(La,er,null),e(Ss,Nf),e(Ss,ar),e(ar,zf),i(s,_p,p),i(s,be,p),e(be,Ff),e(be,cn),e(cn,Of),e(be,Rf),i(s,jp,p),i(s,ps,p),e(ps,Mf),e(ps,Ua),e(Ua,If),e(ps,Lf),e(ps,Va),e(Va,Uf),e(ps,Vf),i(s,vp,p),g(Ba,s,p),i(s,bp,p),i(s,hn,p),e(hn,Bf),i(s,wp,p),g(Ha,s,p),i(s,$p,p),i(s,we,p),e(we,Hf),e(we,un),e(un,Yf),e(we,Gf),i(s,xp,p),g(Ya,s,p),i(s,yp,p),i(s,O,p),e(O,Wf),e(O,tr),e(tr,Jf),e(O,Kf),e(O,nr),e(nr,Qf),e(O,Xf),e(O,lr),e(lr,Zf),e(O,sd),e(O,rr),e(rr,ed),e(O,ad),i(s,kp,p),i(s,Cs,p),e(Cs,$e),e($e,or),g(Ga,or,null),e(Cs,td),e(Cs,pr),e(pr,nd),i(s,Ep,p),i(s,is,p),e(is,ld),e(is,fn),e(fn,rd),e(is,od),e(is,ir),e(ir,pd),e(is,id),i(s,qp,p),g(Wa,s,p),i(s,Ap,p),i(s,Ns,p),e(Ns,xe),e(xe,cr),g(Ja,cr,null),e(Ns,cd),e(Ns,hr),e(hr,hd),i(s,Dp,p),i(s,cs,p),e(cs,ud),e(cs,dn),e(dn,fd),e(cs,dd),e(cs,Ka),e(Ka,md),e(cs,gd),i(s,Tp,p),i(s,ye,p),e(ye,_d),e(ye,ur),e(ur,jd),e(ye,vd),i(s,Pp,p),g(Qa,s,p),i(s,Sp,p),i(s,zs,p),e(zs,ke),e(ke,fr),g(Xa,fr,null),e(zs,bd),e(zs,dr),e(dr,wd),i(s,Cp,p),i(s,Ee,p),e(Ee,$d),e(Ee,mn),e(mn,xd),e(Ee,yd),i(s,Np,p),g(Za,s,p),i(s,zp,p),g(qe,s,p),i(s,Fp,p),i(s,Ae,p),e(Ae,kd),e(Ae,mr),e(mr,Ed),e(Ae,qd),i(s,Op,p),g(st,s,p),i(s,Rp,p),i(s,Fs,p),e(Fs,De),e(De,gr),g(et,gr,null),e(Fs,Ad),e(Fs,_r),e(_r,Dd),i(s,Mp,p),i(s,hs,p),e(hs,Td),e(hs,gn),e(gn,Pd),e(hs,Sd),e(hs,jr),e(jr,Cd),e(hs,Nd),i(s,Ip,p),i(s,Te,p),e(Te,zd),e(Te,vr),e(vr,Fd),e(Te,Od),i(s,Lp,p),g(at,s,p),i(s,Up,p),i(s,us,p),e(us,Rd),e(us,_n),e(_n,Md),e(us,Id),e(us,jn),e(jn,Ld),e(us,Ud),i(s,Vp,p),g(tt,s,p),i(s,Bp,p),g(Pe,s,p),i(s,Hp,p),i(s,Se,p),e(Se,Vd),e(Se,vn),e(vn,Bd),e(Se,Hd),i(s,Yp,p),g(nt,s,p),i(s,Gp,p),i(s,Os,p),e(Os,Ce),e(Ce,br),g(lt,br,null),e(Os,Yd),e(Os,wr),e(wr,Gd),i(s,Wp,p),i(s,Ne,p),e(Ne,Wd),e(Ne,bn),e(bn,Jd),e(Ne,Kd),i(s,Jp,p),g(rt,s,p),i(s,Kp,p),i(s,Rs,p),e(Rs,ze),e(ze,$r),g(ot,$r,null),e(Rs,Qd),e(Rs,xr),e(xr,Xd),i(s,Qp,p),i(s,Fe,p),e(Fe,Zd),e(Fe,wn),e(wn,sm),e(Fe,em),i(s,Xp,p),i(s,$n,p),e($n,am),i(s,Zp,p),g(pt,s,p),i(s,si,p),i(s,Oe,p),e(Oe,tm),e(Oe,xn),e(xn,nm),e(Oe,lm),i(s,ei,p),g(it,s,p),i(s,ai,p),g(Re,s,p),i(s,ti,p),i(s,Ms,p),e(Ms,Me),e(Me,yr),g(ct,yr,null),e(Ms,rm),e(Ms,kr),e(kr,om),i(s,ni,p),i(s,yn,p),e(yn,pm),i(s,li,p),i(s,Ie,p),e(Ie,Er),e(Er,ht),e(ht,qr),e(qr,im),e(ht,cm),e(ht,Ar),e(Ar,hm),e(Ie,um),e(Ie,J),e(J,ut),e(ut,Dr),e(Dr,fm),e(ut,dm),e(ut,Tr),e(Tr,kn),e(kn,mm),e(J,gm),e(J,ft),e(ft,Pr),e(Pr,_m),e(ft,jm),e(ft,Sr),e(Sr,En),e(En,vm),e(J,bm),e(J,dt),e(dt,Cr),e(Cr,wm),e(dt,$m),e(dt,Nr),e(Nr,qn),e(qn,xm),e(J,ym),e(J,mt),e(mt,zr),e(zr,km),e(mt,Em),e(mt,gt),e(gt,An),e(An,qm),e(gt,Am),e(gt,Dn),e(Dn,Dm),i(s,ri,p),i(s,Tn,p),e(Tn,Tm),i(s,oi,p),g(_t,s,p),pi=!0},p(s,[p]){const jt={};p&2&&(jt.$$scope={dirty:p,ctx:s}),Bs.$set(jt);const Fr={};p&2&&(Fr.$$scope={dirty:p,ctx:s}),oe.$set(Fr);const Or={};p&2&&(Or.$$scope={dirty:p,ctx:s}),ue.$set(Or);const Rr={};p&2&&(Rr.$$scope={dirty:p,ctx:s}),qe.$set(Rr);const Mr={};p&2&&(Mr.$$scope={dirty:p,ctx:s}),Pe.$set(Mr);const Ir={};p&2&&(Ir.$$scope={dirty:p,ctx:s}),Re.$set(Ir)},i(s){pi||(_(w.$$.fragment,s),_(Ze.$$.fragment,s),_(Bs.$$.fragment,s),_(sa.$$.fragment,s),_(ea.$$.fragment,s),_(aa.$$.fragment,s),_(ta.$$.fragment,s),_(na.$$.fragment,s),_(la.$$.fragment,s),_(ra.$$.fragment,s),_(oa.$$.fragment,s),_(pa.$$.fragment,s),_(ia.$$.fragment,s),_(ca.$$.fragment,s),_(ha.$$.fragment,s),_(fa.$$.fragment,s),_(da.$$.fragment,s),_(ma.$$.fragment,s),_(ga.$$.fragment,s),_(_a.$$.fragment,s),_(ja.$$.fragment,s),_(va.$$.fragment,s),_(ba.$$.fragment,s),_(wa.$$.fragment,s),_(oe.$$.fragment,s),_($a.$$.fragment,s),_(xa.$$.fragment,s),_(ya.$$.fragment,s),_(ka.$$.fragment,s),_(Ea.$$.fragment,s),_(qa.$$.fragment,s),_(Aa.$$.fragment,s),_(Da.$$.fragment,s),_(ue.$$.fragment,s),_(Ta.$$.fragment,s),_(Pa.$$.fragment,s),_(Sa.$$.fragment,s),_(Ca.$$.fragment,s),_(Na.$$.fragment,s),_(za.$$.fragment,s),_(Fa.$$.fragment,s),_(Ra.$$.fragment,s),_(Ma.$$.fragment,s),_(Ia.$$.fragment,s),_(La.$$.fragment,s),_(Ba.$$.fragment,s),_(Ha.$$.fragment,s),_(Ya.$$.fragment,s),_(Ga.$$.fragment,s),_(Wa.$$.fragment,s),_(Ja.$$.fragment,s),_(Qa.$$.fragment,s),_(Xa.$$.fragment,s),_(Za.$$.fragment,s),_(qe.$$.fragment,s),_(st.$$.fragment,s),_(et.$$.fragment,s),_(at.$$.fragment,s),_(tt.$$.fragment,s),_(Pe.$$.fragment,s),_(nt.$$.fragment,s),_(lt.$$.fragment,s),_(rt.$$.fragment,s),_(ot.$$.fragment,s),_(pt.$$.fragment,s),_(it.$$.fragment,s),_(Re.$$.fragment,s),_(ct.$$.fragment,s),_(_t.$$.fragment,s),pi=!0)},o(s){j(w.$$.fragment,s),j(Ze.$$.fragment,s),j(Bs.$$.fragment,s),j(sa.$$.fragment,s),j(ea.$$.fragment,s),j(aa.$$.fragment,s),j(ta.$$.fragment,s),j(na.$$.fragment,s),j(la.$$.fragment,s),j(ra.$$.fragment,s),j(oa.$$.fragment,s),j(pa.$$.fragment,s),j(ia.$$.fragment,s),j(ca.$$.fragment,s),j(ha.$$.fragment,s),j(fa.$$.fragment,s),j(da.$$.fragment,s),j(ma.$$.fragment,s),j(ga.$$.fragment,s),j(_a.$$.fragment,s),j(ja.$$.fragment,s),j(va.$$.fragment,s),j(ba.$$.fragment,s),j(wa.$$.fragment,s),j(oe.$$.fragment,s),j($a.$$.fragment,s),j(xa.$$.fragment,s),j(ya.$$.fragment,s),j(ka.$$.fragment,s),j(Ea.$$.fragment,s),j(qa.$$.fragment,s),j(Aa.$$.fragment,s),j(Da.$$.fragment,s),j(ue.$$.fragment,s),j(Ta.$$.fragment,s),j(Pa.$$.fragment,s),j(Sa.$$.fragment,s),j(Ca.$$.fragment,s),j(Na.$$.fragment,s),j(za.$$.fragment,s),j(Fa.$$.fragment,s),j(Ra.$$.fragment,s),j(Ma.$$.fragment,s),j(Ia.$$.fragment,s),j(La.$$.fragment,s),j(Ba.$$.fragment,s),j(Ha.$$.fragment,s),j(Ya.$$.fragment,s),j(Ga.$$.fragment,s),j(Wa.$$.fragment,s),j(Ja.$$.fragment,s),j(Qa.$$.fragment,s),j(Xa.$$.fragment,s),j(Za.$$.fragment,s),j(qe.$$.fragment,s),j(st.$$.fragment,s),j(et.$$.fragment,s),j(at.$$.fragment,s),j(tt.$$.fragment,s),j(Pe.$$.fragment,s),j(nt.$$.fragment,s),j(lt.$$.fragment,s),j(rt.$$.fragment,s),j(ot.$$.fragment,s),j(pt.$$.fragment,s),j(it.$$.fragment,s),j(Re.$$.fragment,s),j(ct.$$.fragment,s),j(_t.$$.fragment,s),pi=!1},d(s){a(f),s&&a(E),s&&a(b),v(w),s&&a(P),s&&a(R),s&&a(Is),s&&a(K),s&&a(Ls),s&&a(T),s&&a(Ur),s&&a(U),s&&a(Vr),s&&a(yt),s&&a(Br),v(Ze,s),s&&a(Hr),v(Bs,s),s&&a(Yr),s&&a(gs),v(sa),s&&a(Gr),s&&a(kt),s&&a(Wr),s&&a(_s),v(ea),s&&a(Jr),s&&a(Gs),s&&a(Kr),v(aa,s),s&&a(Qr),s&&a(js),v(ta),s&&a(Xr),s&&a(V),s&&a(Zr),v(na,s),s&&a(so),s&&a(vs),v(la),s&&a(eo),s&&a(X),s&&a(ao),s&&a(Tt),s&&a(to),v(ra,s),s&&a(no),s&&a(Ct),s&&a(lo),v(oa,s),s&&a(ro),s&&a(bs),s&&a(oo),v(pa,s),s&&a(po),s&&a(ws),v(ia),s&&a(io),s&&a(Z),s&&a(co),v(ca,s),s&&a(ho),s&&a(Qs),s&&a(uo),s&&a($s),v(ha),s&&a(fo),s&&a(B),s&&a(mo),s&&a(Zs),s&&a(go),v(fa,s),s&&a(_o),s&&a(Mt),s&&a(jo),v(da,s),s&&a(vo),s&&a(xs),v(ma),s&&a(bo),s&&a(It),s&&a(wo),s&&a(ys),v(ga),s&&a($o),s&&a(ae),s&&a(xo),s&&a(te),s&&a(yo),v(_a,s),s&&a(ko),s&&a(ks),v(ja),s&&a(Eo),s&&a(le),s&&a(qo),v(va,s),s&&a(Ao),s&&a(Es),v(ba),s&&a(Do),s&&a(z),s&&a(To),v(wa,s),s&&a(Po),v(oe,s),s&&a(So),s&&a(pe),s&&a(Co),v($a,s),s&&a(No),s&&a(qs),v(xa),s&&a(zo),s&&a(Jt),s&&a(Fo),v(ya,s),s&&a(Oo),s&&a(F),s&&a(Ro),v(ka,s),s&&a(Mo),s&&a(ss),s&&a(Io),s&&a(As),v(Ea),s&&a(Lo),s&&a(es),s&&a(Uo),s&&a(as),s&&a(Vo),s&&a(ts),s&&a(Bo),v(qa,s),s&&a(Ho),s&&a(ns),s&&a(Yo),v(Aa,s),s&&a(Go),s&&a(he),s&&a(Wo),s&&a(ls),s&&a(Jo),v(Da,s),s&&a(Ko),v(ue,s),s&&a(Qo),s&&a(rs),s&&a(Xo),v(Ta,s),s&&a(Zo),s&&a(C),s&&a(sp),v(Pa,s),s&&a(ep),s&&a(fe),s&&a(ap),v(Sa,s),s&&a(tp),s&&a(Ds),v(Ca),s&&a(np),s&&a(os),s&&a(lp),v(Na,s),s&&a(rp),s&&a(Ts),v(za),s&&a(op),s&&a(H),s&&a(pp),s&&a(Ps),v(Fa),s&&a(ip),s&&a(rn),s&&a(cp),s&&a(_e),s&&a(hp),v(Ra,s),s&&a(up),s&&a(je),s&&a(fp),v(Ma,s),s&&a(dp),s&&a(pn),s&&a(mp),v(Ia,s),s&&a(gp),s&&a(Ss),v(La),s&&a(_p),s&&a(be),s&&a(jp),s&&a(ps),s&&a(vp),v(Ba,s),s&&a(bp),s&&a(hn),s&&a(wp),v(Ha,s),s&&a($p),s&&a(we),s&&a(xp),v(Ya,s),s&&a(yp),s&&a(O),s&&a(kp),s&&a(Cs),v(Ga),s&&a(Ep),s&&a(is),s&&a(qp),v(Wa,s),s&&a(Ap),s&&a(Ns),v(Ja),s&&a(Dp),s&&a(cs),s&&a(Tp),s&&a(ye),s&&a(Pp),v(Qa,s),s&&a(Sp),s&&a(zs),v(Xa),s&&a(Cp),s&&a(Ee),s&&a(Np),v(Za,s),s&&a(zp),v(qe,s),s&&a(Fp),s&&a(Ae),s&&a(Op),v(st,s),s&&a(Rp),s&&a(Fs),v(et),s&&a(Mp),s&&a(hs),s&&a(Ip),s&&a(Te),s&&a(Lp),v(at,s),s&&a(Up),s&&a(us),s&&a(Vp),v(tt,s),s&&a(Bp),v(Pe,s),s&&a(Hp),s&&a(Se),s&&a(Yp),v(nt,s),s&&a(Gp),s&&a(Os),v(lt),s&&a(Wp),s&&a(Ne),s&&a(Jp),v(rt,s),s&&a(Kp),s&&a(Rs),v(ot),s&&a(Qp),s&&a(Fe),s&&a(Xp),s&&a($n),s&&a(Zp),v(pt,s),s&&a(si),s&&a(Oe),s&&a(ei),v(it,s),s&&a(ai),v(Re,s),s&&a(ti),s&&a(Ms),v(ct),s&&a(ni),s&&a(yn),s&&a(li),s&&a(Ie),s&&a(ri),s&&a(Tn),s&&a(oi),v(_t,s)}}}const vj={local:"process",sections:[{local:"sort-shuffle-select-split-and-shard",sections:[{local:"sort",title:"Sort"},{local:"shuffle",title:"Shuffle"},{local:"select-and-filter",title:"Select and Filter"},{local:"split",title:"Split"},{local:"shard",title:"Shard"}],title:"Sort, shuffle, select, split, and shard"},{local:"rename-remove-cast-and-flatten",sections:[{local:"rename",title:"Rename"},{local:"remove",title:"Remove"},{local:"cast",title:"Cast"},{local:"flatten",title:"Flatten"}],title:"Rename, remove, cast, and flatten"},{local:"map",sections:[{local:"multiprocessing",title:"Multiprocessing"},{local:"batch-processing",sections:[{local:"split-long-examples",title:"Split long examples"},{local:"data-augmentation",title:"Data augmentation"}],title:"Batch processing"},{local:"process-multiple-splits",title:"Process multiple splits"},{local:"distributed-usage",title:"Distributed usage"}],title:"Map"},{local:"concatenate",title:"Concatenate"},{local:"format",sections:[{local:"format-transform",title:"Format transform"}],title:"Format"},{local:"save",title:"Save"},{local:"export",title:"Export"}],title:"Process"};function bj(N){return hj(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kj extends oj{constructor(f){super();pj(this,f,bj,jj,ij,{})}}export{kj as default,vj as metadata};
