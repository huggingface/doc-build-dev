import{S as Fte,i as Ate,s as Ste,e as n,k as d,w as _,t as l,M as Ote,c as r,d as a,m,a as o,x as b,h as i,b as j,G as e,g as D,y as $,q as x,o as v,B as y,v as Cte,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as zte}from"../../chunks/Tip-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ta}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as T}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Vte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ute(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Mte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Rte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Bte(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Hte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Gte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Wte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Yte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Jte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Kte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Zte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Xte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Qte(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function eae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function tae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function aae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function sae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function nae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function rae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function oae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function lae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function iae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function pae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function cae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function dae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function mae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function hae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function fae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function uae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function gae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function _ae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function bae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function $ae(k){let c,g,f,p,u;return p=new P({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function xae(k){let c,g,f,p,u;return p=new P({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function vae(k){let c,g,f,p,u;return p=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=n("p"),g=l("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function yae(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function jae(k){let c,g,f,p,u;return p=new P({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function wae(k){let c,g,f,p,u;return p=new P({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Dae(k){let c,g,f,p,u;return p=new P({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function kae(k){let c,g,f,p,u;return p=new P({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Eae(k){let c,g,f,p,u;return p=new P({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Iae(k){let c,g,f,p,u;return p=new P({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function qae(k){let c,g,f,p,u;return p=new P({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Tae(k){let c,g,f,p,u;return p=new P({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Nae(k){let c,g,f,p,u;return p=new P({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Pae(k){let c,g,f,p,u;return p=new P({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){c=n("p"),g=l("Default config is:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Default config is:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Lae(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Fae(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Aae(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Sae(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Oae(k){let c,g,f,p,u;return p=new P({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Cae(k){let c,g,f,p,u;return p=new P({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function zae(k){let c,g,f,p,u;return p=new P({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Vae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Uae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Mae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Rae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Bae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Hae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Gae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Wae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Yae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Jae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Kae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Zae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Xae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Qae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ese(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function tse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ase(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function sse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function nse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function rse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ose(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function lse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ise(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function pse(k){let c,g,f,p,u;return p=new P({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function cse(k){let c,g,f,p,u;return p=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=n("p"),g=l("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function dse(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function mse(k){let c,g,f,p,u;return p=new P({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function hse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function fse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function use(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function gse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function _se(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function bse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function $se(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function xse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function vse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function yse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function jse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function wse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
ds = ds.skip(1)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Dse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function kse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ese(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ise(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function qse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Tse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Nse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Pse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.remove_columns("label")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Lse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Fse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ase(k){let c,g,f,p,u,t,h,Ys,aa,gr,Ae;return{c(){c=n("p"),g=l("A "),f=n("a"),p=l("datasets.Sequence"),u=l(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=n("code"),h=l("list"),Ys=l(` instead of the
`),aa=n("a"),gr=l("datasets.Sequence"),Ae=l("."),this.h()},l(_e){c=r(_e,"P",{});var se=o(c);g=i(se,"A "),f=r(se,"A",{href:!0});var sa=o(f);p=i(sa,"datasets.Sequence"),sa.forEach(a),u=i(se,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r(se,"CODE",{});var wf=o(t);h=i(wf,"list"),wf.forEach(a),Ys=i(se,` instead of the
`),aa=r(se,"A",{href:!0});var _r=o(aa);gr=i(_r,"datasets.Sequence"),_r.forEach(a),Ae=i(se,"."),se.forEach(a),this.h()},h(){j(f,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Sequence"),j(aa,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Sequence")},m(_e,se){D(_e,c,se),e(c,g),e(c,f),e(f,p),e(c,u),e(c,t),e(t,h),e(c,Ys),e(c,aa),e(aa,gr),e(c,Ae)},d(_e){_e&&a(c)}}}function Sse(k){let c,g,f,p,u;return p=new P({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ose(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Cse(k){let c,g,f,p,u;return p=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function zse(k){let c,g,f,p,u;return p=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Vse(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)
s3.ls('public-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Use(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
s3.ls('my-private-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Mse(k){let c,g;return c=new P({props:{code:`import botocore
from datasets.filesystems import S3Filesystem

s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Rse(k){let c,g;return c=new P({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem

s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset = load_from_disk('s3://my-private-datasets/imdb/train', fs=s3)
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Bse(k){let c,g;return c=new P({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem

dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset.save_to_disk('s3://my-private-datasets/imdb/train', fs=s3)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Hse(k){let c,g,f,p,u,t,h,Ys,aa,gr,Ae,_e,se,sa,wf,_r,J4,g0,K,op,K4,qb,Z4,X4,Df,Tb,Q4,eD,tD,Nb,aD,sD,be,lp,nD,ip,rD,Pb,oD,lD,iD,Lb,pD,cD,Fb,dD,mD,br,hD,na,pp,fD,Js,uD,Ab,gD,_D,Sb,bD,$D,xD,$r,_0,Ks,xr,Ob,cp,vD,Cb,yD,b0,vr,jD,kf,wD,DD,$0,I,dp,kD,zb,ED,ID,Ze,mp,qD,Vb,TD,ND,Ub,Mb,PD,LD,yr,FD,Xe,hp,AD,Rb,SD,OD,Bb,Hb,CD,zD,jr,VD,wr,fp,UD,Gb,MD,RD,Dr,up,BD,Wb,HD,GD,$e,gp,WD,Et,YD,Yb,JD,KD,Jb,ZD,XD,Ef,QD,e3,t3,_p,a3,Kb,s3,n3,r3,bp,o3,Zb,l3,i3,p3,kr,c3,Er,$p,d3,It,m3,Xb,h3,f3,Qb,u3,g3,If,_3,b3,$3,ra,xp,x3,e$,v3,y3,Ir,j3,oa,vp,w3,t$,D3,k3,qr,E3,la,yp,I3,a$,q3,T3,Tr,N3,ia,jp,P3,wp,L3,Nr,F3,s$,A3,S3,O3,C3,Pr,z3,pa,Dp,V3,n$,U3,M3,Lr,R3,ca,kp,B3,r$,H3,G3,Fr,W3,Qe,Ep,Y3,o$,J3,K3,l$,Z3,X3,Ar,Q3,da,Ip,ek,i$,tk,ak,Sr,sk,ma,qp,nk,p$,rk,ok,Or,lk,ha,Tp,ik,c$,pk,ck,Cr,dk,et,Np,mk,d$,hk,fk,Zs,uk,qf,gk,_k,m$,bk,$k,xk,zr,vk,fa,Pp,yk,h$,jk,wk,Vr,Dk,ua,Lp,kk,f$,Ek,Ik,Ur,qk,ga,Fp,Tk,Ap,Nk,u$,Pk,Lk,Fk,Mr,Ak,_a,Sp,Sk,g$,Ok,Ck,Rr,zk,ba,Op,Vk,_$,Uk,Mk,Cp,Rk,Tf,Bk,Hk,Gk,Br,zp,Wk,Xs,Yk,b$,Jk,Kk,$$,Zk,Xk,Qk,xe,Vp,e8,Se,t8,x$,a8,s8,v$,n8,r8,y$,o8,l8,Nf,i8,p8,c8,Oe,d8,j$,m8,h8,w$,f8,u8,D$,g8,_8,k$,b8,$8,x8,E$,v8,y8,Hr,j8,$a,Up,w8,tt,D8,I$,k8,E8,q$,I8,q8,Pf,T8,N8,Lf,P8,L8,Gr,F8,at,Mp,A8,Rp,S8,T$,O8,C8,z8,Ff,V8,N$,U8,M8,Wr,R8,ve,Bp,B8,qt,H8,P$,G8,W8,L$,Y8,J8,F$,K8,Z8,X8,Hp,Q8,Af,eE,tE,aE,Qs,sE,Sf,nE,rE,A$,oE,lE,iE,Yr,pE,ye,Gp,cE,en,dE,S$,mE,hE,O$,fE,uE,gE,tn,_E,Of,bE,$E,Cf,xE,vE,yE,an,jE,zf,wE,DE,C$,kE,EE,IE,Jr,qE,Kr,Wp,TE,z$,NE,PE,st,Yp,LE,V$,FE,AE,U$,SE,OE,Zr,CE,je,Jp,zE,M$,VE,UE,Kp,ME,R$,RE,BE,HE,sn,B$,GE,WE,H$,YE,JE,ce,KE,G$,ZE,XE,W$,QE,e6,Y$,t6,a6,J$,s6,n6,K$,r6,o6,l6,Xr,i6,xa,Zp,p6,Z$,c6,d6,Qr,m6,va,Xp,h6,X$,f6,u6,eo,g6,nt,Qp,_6,Q$,b6,$6,e2,x6,v6,to,y6,rt,ec,j6,t2,w6,D6,a2,k6,E6,ao,I6,ot,tc,q6,H,T6,s2,N6,P6,n2,L6,F6,r2,A6,S6,o2,O6,C6,l2,z6,V6,i2,U6,M6,p2,R6,B6,H6,ac,G6,c2,W6,Y6,J6,so,K6,ne,sc,Z6,nn,X6,d2,Q6,e5,m2,t5,a5,s5,h2,n5,r5,nc,o5,f2,l5,i5,p5,u2,c5,d5,no,m5,ya,rc,h5,g2,f5,u5,ro,g5,lt,oc,_5,_2,b5,$5,Tt,x5,Vf,v5,y5,Uf,j5,w5,b2,D5,k5,E5,oo,I5,W,lc,q5,rn,T5,Mf,N5,P5,$2,L5,F5,A5,on,S5,Rf,O5,C5,Bf,z5,V5,U5,ic,M5,x2,R5,B5,H5,lo,G5,io,W5,po,Y5,ja,pc,J5,Nt,K5,v2,Z5,X5,Hf,Q5,eI,y2,tI,aI,sI,co,nI,mo,cc,rI,j2,oI,lI,wa,dc,iI,w2,pI,cI,ho,dI,Da,mc,mI,hc,hI,D2,fI,uI,gI,fo,_I,ka,fc,bI,k2,$I,xI,uo,vI,Ea,uc,yI,E2,jI,wI,go,DI,Ia,gc,kI,I2,EI,II,_o,qI,it,_c,TI,ln,NI,q2,PI,LI,T2,FI,AI,SI,N2,Gf,OI,bc,CI,zI,bo,VI,qa,$c,UI,Pt,MI,P2,RI,BI,L2,HI,GI,F2,WI,YI,JI,A2,Wf,KI,xc,ZI,XI,$o,vc,QI,S2,e9,t9,Ta,yc,a9,O2,s9,n9,jc,r9,C2,o9,l9,i9,Na,wc,p9,z2,c9,d9,xo,m9,Pa,Dc,h9,V2,f9,u9,vo,g9,yo,kc,_9,U2,b9,$9,jo,Ec,x9,M2,v9,y9,wo,Ic,j9,R2,w9,D9,Do,qc,k9,B2,E9,I9,ko,Tc,q9,H2,T9,N9,Eo,Nc,P9,G2,L9,F9,Io,Pc,A9,W2,S9,O9,qo,Lc,C9,Yf,Jf,z9,V9,U9,To,Fc,M9,Kf,Zf,R9,B9,H9,Xf,Ac,G9,Qf,Sc,W9,eu,Oc,Y9,tu,Cc,J9,au,zc,K9,su,Vc,Z9,nu,Uc,X9,ru,Mc,Q9,ou,Rc,eq,lu,Bc,tq,iu,Hc,aq,pu,Gc,sq,cu,Wc,nq,La,Yc,rq,Y2,oq,lq,No,iq,Fa,Jc,pq,J2,cq,dq,Po,mq,Aa,Kc,hq,K2,fq,uq,Lo,gq,Sa,Zc,_q,Z2,bq,$q,Fo,xq,Oa,Xc,vq,pn,yq,du,jq,wq,mu,Dq,kq,Eq,cn,Iq,X2,qq,Tq,Q2,Nq,Pq,Lq,Ca,Qc,Fq,ed,Aq,ex,Sq,Oq,Cq,Ao,x0,Lt,td,zq,dn,Vq,hu,Uq,Mq,fu,Rq,Bq,Hq,So,v0,Z,ad,Gq,tx,Wq,Yq,mn,Jq,uu,Kq,Zq,gu,Xq,Qq,eT,Ce,tT,ax,aT,sT,sx,nT,rT,nx,oT,lT,rx,iT,pT,cT,ox,dT,mT,Oo,y0,de,sd,hT,lx,fT,uT,ix,gT,_T,px,bT,$T,ze,cx,xT,vT,dx,yT,jT,mx,wT,DT,nd,kT,_u,ET,IT,qT,Ft,TT,bu,NT,PT,hx,LT,FT,$u,AT,ST,j0,me,rd,OT,fx,CT,zT,ux,VT,UT,gx,MT,RT,Ve,_x,BT,HT,bx,GT,WT,$x,YT,JT,od,KT,xu,ZT,XT,QT,At,eN,vu,tN,aN,xx,sN,nN,yu,rN,oN,w0,he,ld,lN,vx,iN,pN,yx,cN,dN,jx,mN,hN,Ue,wx,fN,uN,Dx,gN,_N,kx,bN,$N,id,xN,ju,vN,yN,jN,St,wN,wu,DN,kN,Ex,EN,IN,Du,qN,TN,D0,hn,Co,Ix,pd,NN,qx,PN,k0,zo,LN,Tx,FN,AN,E0,L,cd,SN,Nx,ON,CN,za,dd,zN,Px,VN,UN,Vo,MN,Va,md,RN,Lx,BN,HN,Uo,GN,Ua,hd,WN,Fx,YN,JN,Mo,KN,Ma,fd,ZN,ud,XN,Ro,QN,Ax,eP,tP,aP,sP,Bo,nP,Ra,gd,rP,Sx,oP,lP,Ho,iP,Ba,_d,pP,Ox,cP,dP,Go,mP,pt,bd,hP,Cx,fP,uP,zx,gP,_P,Wo,bP,Ha,$d,$P,Vx,xP,vP,Yo,yP,Ga,xd,jP,Ux,wP,DP,Jo,kP,Wa,vd,EP,Mx,IP,qP,Ko,TP,ct,yd,NP,Rx,PP,LP,Bx,FP,AP,Zo,SP,we,jd,OP,Hx,CP,zP,Gx,VP,UP,Wx,MP,RP,Xo,BP,De,wd,HP,Dd,GP,Yx,WP,YP,JP,Me,KP,Jx,ZP,XP,Kx,QP,eL,Zx,tL,aL,Xx,sL,nL,rL,Qx,oL,lL,Qo,iL,dt,kd,pL,Ed,cL,e1,dL,mL,hL,ku,fL,t1,uL,gL,el,_L,tl,Id,bL,fn,$L,a1,xL,vL,s1,yL,jL,wL,ke,qd,DL,Ot,kL,n1,EL,IL,r1,qL,TL,o1,NL,PL,LL,Td,FL,Eu,AL,SL,OL,un,CL,Iu,zL,VL,l1,UL,ML,RL,al,BL,Ee,Nd,HL,gn,GL,i1,WL,YL,p1,JL,KL,ZL,_n,XL,qu,QL,eF,Tu,tF,aF,sF,bn,nF,c1,rF,oF,d1,lF,iF,pF,sl,cF,Ya,Pd,dF,m1,mF,hF,nl,fF,mt,Ld,uF,h1,gF,_F,Ct,bF,Nu,$F,xF,f1,vF,yF,u1,jF,wF,DF,rl,kF,Ja,Fd,EF,g1,IF,qF,ol,TF,Ie,Ad,NF,_1,PF,LF,b1,FF,AF,$n,SF,Pu,OF,CF,$1,zF,VF,UF,ll,MF,qe,Sd,RF,x1,BF,HF,xn,GF,Lu,WF,YF,v1,JF,KF,ZF,Od,y1,XF,QF,j1,eA,tA,il,aA,Ka,Cd,sA,w1,nA,rA,pl,oA,Za,zd,lA,Vd,iA,D1,pA,cA,dA,cl,mA,Te,Ud,hA,vn,fA,k1,uA,gA,E1,_A,bA,$A,I1,xA,vA,zt,yA,Fu,jA,wA,Au,DA,kA,q1,EA,IA,qA,dl,TA,re,Md,NA,yn,PA,Su,LA,FA,T1,AA,SA,OA,jn,CA,Ou,zA,VA,Cu,UA,MA,RA,Rd,BA,N1,HA,GA,WA,ml,YA,hl,JA,Xa,Bd,KA,Vt,ZA,P1,XA,QA,zu,eS,tS,L1,aS,sS,nS,fl,rS,Qa,Hd,oS,F1,lS,iS,ul,pS,es,Gd,cS,A1,dS,mS,gl,hS,ts,Wd,fS,S1,uS,gS,_l,_S,as,Yd,bS,O1,$S,xS,bl,vS,ss,Jd,yS,wn,jS,Vu,wS,DS,Uu,kS,ES,IS,Dn,qS,C1,TS,NS,z1,PS,LS,I0,Mu,q0,kn,$l,V1,Kd,FS,U1,AS,T0,xl,SS,Ru,OS,CS,N0,A,Zd,zS,M1,VS,US,ns,Xd,MS,R1,RS,BS,vl,HS,rs,Qd,GS,B1,WS,YS,yl,JS,os,em,KS,H1,ZS,XS,jl,QS,Bu,tm,eO,Ne,am,tO,G1,aO,sO,sm,nO,W1,rO,oO,lO,En,Y1,iO,pO,J1,cO,dO,fe,mO,K1,hO,fO,Z1,uO,gO,X1,_O,bO,Q1,$O,xO,ev,vO,yO,jO,wl,wO,ls,nm,DO,tv,kO,EO,Dl,IO,is,rm,qO,av,TO,NO,kl,PO,oe,om,LO,sv,FO,AO,nv,SO,OO,lm,CO,rv,zO,VO,UO,In,MO,Hu,RO,BO,Gu,HO,GO,WO,El,YO,ps,im,JO,pm,KO,ov,ZO,XO,QO,Il,eC,cs,cm,tC,dm,aC,lv,sC,nC,rC,ql,oC,Tl,mm,lC,Wu,Yu,iC,pC,cC,Nl,hm,dC,Ju,Ku,mC,hC,fC,Zu,fm,uC,Xu,um,gC,Qu,gm,_C,eg,_m,bC,tg,bm,$C,ag,$m,xC,sg,xm,vC,ng,vm,yC,rg,ym,jC,og,jm,wC,lg,wm,DC,ig,Dm,kC,pg,km,P0,qn,Pl,iv,Em,EC,pv,IC,L0,Ll,qC,cv,TC,NC,F0,U,Im,PC,Pe,qm,LC,dv,FC,AC,Tm,SC,mv,OC,CC,zC,Tn,hv,VC,UC,fv,MC,RC,ue,BC,uv,HC,GC,gv,WC,YC,_v,JC,KC,bv,ZC,XC,$v,QC,ez,tz,Fl,az,ds,Nm,sz,xv,nz,rz,Al,oz,le,Pm,lz,vv,iz,pz,yv,cz,dz,Lm,mz,jv,hz,fz,uz,Nn,gz,cg,_z,bz,dg,$z,xz,vz,Sl,yz,ms,Fm,jz,wv,wz,Dz,Ol,kz,hs,Am,Ez,Dv,Iz,qz,Cl,Tz,fs,Sm,Nz,kv,Pz,Lz,zl,Fz,us,Om,Az,Ev,Sz,Oz,Vl,Cz,gs,Cm,zz,Iv,Vz,Uz,Ul,Mz,_s,zm,Rz,qv,Bz,Hz,Ml,A0,Pn,Rl,Tv,Vm,Gz,Nv,Wz,S0,O,Um,Yz,Pv,Jz,Kz,Mm,Zz,Lv,Xz,Qz,eV,mg,Fv,tV,aV,sV,G,Av,bs,nV,hg,rV,oV,Sv,lV,iV,Ov,pV,cV,Cv,Rm,dV,fg,mV,hV,fV,zv,Bm,uV,Vv,gV,_V,bV,Hm,Re,$V,Uv,xV,vV,ug,yV,jV,Mv,wV,DV,gg,kV,EV,IV,Bl,qV,Rv,Be,TV,_g,NV,PV,bg,LV,FV,$g,AV,SV,xg,OV,CV,zV,Bv,Gm,VV,vg,UV,MV,RV,Hv,Ut,BV,yg,HV,GV,Gv,WV,YV,Wv,JV,KV,ZV,Yv,Hl,jg,XV,QV,wg,eU,tU,aU,Gl,Wm,sU,Jv,nU,rU,Wl,Ym,oU,Kv,lU,iU,Yl,Jm,pU,Zv,cU,dU,Jl,Km,mU,Xv,hU,fU,Kl,Zm,uU,Qv,gU,_U,Zl,Xm,bU,ey,$U,xU,$s,Qm,vU,ty,yU,jU,ay,wU,DU,Xl,eh,kU,sy,EU,IU,Le,th,qU,ny,TU,NU,ry,PU,LU,Mt,FU,Dg,AU,SU,kg,OU,CU,Eg,zU,VU,UU,Ql,MU,ht,ah,RU,oy,BU,HU,ly,GU,WU,ei,O0,Ln,sh,YU,iy,JU,C0,X,nh,KU,py,ZU,XU,rh,QU,cy,eM,tM,aM,Fn,Ig,dy,sM,nM,rM,qg,my,oM,lM,iM,Tg,hy,pM,cM,dM,ti,oh,mM,fy,hM,fM,ai,lh,uM,uy,gM,z0,Rt,ih,_M,gy,bM,$M,_y,xM,V0,Q,ph,vM,Ng,by,yM,jM,wM,$y,DM,kM,ch,EM,xy,IM,qM,TM,si,NM,ni,dh,PM,vy,LM,U0,ee,mh,FM,Pg,yy,AM,SM,OM,jy,CM,zM,wy,VM,UM,ri,MM,oi,hh,RM,Dy,BM,M0,fh,uh,R0,gh,_h,B0,bh,$h,H0,xh,vh,G0,M,yh,HM,ky,GM,WM,Ey,YM,JM,An,Iy,jh,KM,qy,ZM,XM,QM,Sn,wh,eR,Ty,tR,aR,sR,Dh,Ny,nR,rR,Py,oR,lR,Ly,iR,pR,On,kh,cR,Fy,dR,mR,hR,Cn,Ay,fR,uR,Sy,gR,_R,Oy,bR,$R,Cy,xR,vR,xs,Eh,yR,zy,jR,wR,Bt,Vy,DR,kR,Uy,ER,IR,My,qR,TR,Ry,NR,PR,li,Ih,LR,By,FR,AR,ii,qh,SR,Hy,OR,CR,pi,Th,zR,Gy,VR,UR,ci,Nh,MR,Wy,RR,W0,R,Ph,BR,Yy,HR,GR,Jy,WR,YR,Ht,Ky,Lh,JR,Zy,KR,ZR,XR,zn,Fh,QR,Xy,eB,tB,aB,Ah,Qy,sB,nB,ej,rB,oB,tj,lB,iB,aj,Sh,pB,sj,cB,dB,mB,nj,Oh,hB,rj,fB,uB,gB,vs,Ch,_B,oj,bB,$B,He,lj,xB,vB,ij,yB,jB,pj,wB,DB,cj,kB,EB,dj,IB,qB,di,zh,TB,mj,NB,PB,mi,Vh,LB,hj,FB,AB,hi,Uh,SB,fj,OB,CB,fi,Mh,zB,uj,VB,Y0,Vn,ui,gj,Rh,UB,_j,MB,J0,te,Bh,RB,bj,BB,HB,Lg,$j,GB,WB,YB,xj,JB,KB,gi,Hh,ZB,Gh,XB,vj,QB,eH,tH,_i,Wh,aH,Gt,sH,yj,nH,rH,jj,oH,lH,wj,iH,pH,K0,Un,bi,Dj,Yh,cH,kj,dH,Z0,ys,mH,Ej,hH,fH,Fg,uH,gH,X0,ae,Jh,_H,Ij,bH,$H,$i,Kh,xH,qj,vH,yH,xi,Zh,jH,Tj,wH,DH,js,Xh,kH,Nj,EH,IH,Pj,qH,TH,vi,Qh,NH,Lj,PH,Q0,Mn,yi,Fj,ef,LH,Aj,FH,ew,C,tf,AH,ji,Sj,SH,OH,af,Oj,CH,zH,VH,Wt,UH,Cj,MH,RH,zj,BH,HH,Vj,GH,WH,YH,Uj,JH,KH,Mj,ZH,XH,wi,QH,Rn,eG,Rj,tG,aG,Bj,sG,nG,rG,Di,oG,Yt,lG,Hj,iG,pG,Gj,cG,dG,Wj,mG,hG,fG,ki,uG,Bn,gG,Yj,_G,bG,Ag,$G,xG,vG,Ei,yG,Hn,jG,Jj,wG,DG,Sg,kG,EG,IG,Ii,tw,Gn,sf,qG,Wn,TG,Kj,NG,PG,Zj,LG,FG,aw,Yn,nf,AG,Xj,SG,sw,Jn,qi,Qj,rf,OG,e7,CG,nw,Kn,of,zG,t7,VG,rw;return t=new ta({}),sa=new ta({}),op=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/info.py#L87"}}),lp=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/info.py#L241"}}),br=new T({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[Vte]},$$scope:{ctx:k}}}),pp=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/info.py#L182"}}),$r=new T({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[Ute]},$$scope:{ctx:k}}}),cp=new ta({}),dp=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L625"}}),mp=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4099",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),yr=new T({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[Mte]},$$scope:{ctx:k}}}),hp=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4332",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),jr=new T({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[Rte]},$$scope:{ctx:k}}}),fp=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L691",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),up=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L726",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),gp=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L754",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),kr=new T({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[Bte]},$$scope:{ctx:k}}}),$p=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L806",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),xp=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1205"}}),Ir=new T({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[Hte]},$$scope:{ctx:k}}}),vp=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1225"}}),qr=new T({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[Gte]},$$scope:{ctx:k}}}),yp=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1243"}}),Tr=new T({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[Wte]},$$scope:{ctx:k}}}),jp=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1258"}}),Pr=new T({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[Yte]},$$scope:{ctx:k}}}),Dp=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1275"}}),Lr=new T({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[Jte]},$$scope:{ctx:k}}}),kp=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1290"}}),Fr=new T({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[Kte]},$$scope:{ctx:k}}}),Ep=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1307",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Ar=new T({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[Zte]},$$scope:{ctx:k}}}),Ip=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1411",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Sr=new T({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[Xte]},$$scope:{ctx:k}}}),qp=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1450",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Or=new T({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[Qte]},$$scope:{ctx:k}}}),Tp=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1526",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Cr=new T({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[eae]},$$scope:{ctx:k}}}),Np=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1563",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),zr=new T({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[tae]},$$scope:{ctx:k}}}),Pp=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1611",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vr=new T({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[aae]},$$scope:{ctx:k}}}),Lp=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1673",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ur=new T({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[sae]},$$scope:{ctx:k}}}),Fp=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1337"}}),Mr=new T({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[nae]},$$scope:{ctx:k}}}),Sp=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1737"}}),Rr=new T({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[rae]},$$scope:{ctx:k}}}),Op=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1766"}}),zp=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1786"}}),Vp=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1814"}}),Hr=new T({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[oae]},$$scope:{ctx:k}}}),Up=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1915"}}),Gr=new T({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[lae]},$$scope:{ctx:k}}}),Mp=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1886"}}),Wr=new T({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[iae]},$$scope:{ctx:k}}}),Bp=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1955"}}),Yr=new T({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[pae]},$$scope:{ctx:k}}}),Gp=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2003"}}),Jr=new T({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[cae]},$$scope:{ctx:k}}}),Wp=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2122"}}),Yp=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2128",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Zr=new T({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[dae]},$$scope:{ctx:k}}}),Jp=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2175"}}),Xr=new T({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[mae]},$$scope:{ctx:k}}}),Zp=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2783"}}),Qr=new T({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[hae]},$$scope:{ctx:k}}}),Xp=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2957"}}),eo=new T({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[fae]},$$scope:{ctx:k}}}),Qp=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3059"}}),to=new T({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[uae]},$$scope:{ctx:k}}}),ec=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3153"}}),ao=new T({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[gae]},$$scope:{ctx:k}}}),tc=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3245"}}),so=new T({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[_ae]},$$scope:{ctx:k}}}),sc=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3466"}}),no=new T({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[bae]},$$scope:{ctx:k}}}),rc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L306",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),ro=new T({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[$ae]},$$scope:{ctx:k}}}),oc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4008"}}),oo=new T({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[xae]},$$scope:{ctx:k}}}),lc=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1016"}}),lo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[vae]},$$scope:{ctx:k}}}),io=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[yae]},$$scope:{ctx:k}}}),po=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[jae]},$$scope:{ctx:k}}}),pc=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L1138",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),co=new T({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[wae]},$$scope:{ctx:k}}}),cc=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2888"}}),dc=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3622",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),ho=new T({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[Dae]},$$scope:{ctx:k}}}),mc=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3735",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),fo=new T({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[kae]},$$scope:{ctx:k}}}),fc=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3655",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),uo=new T({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[Eae]},$$scope:{ctx:k}}}),uc=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3690",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),go=new T({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[Iae]},$$scope:{ctx:k}}}),gc=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.
parquet_writer_kwargs &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L3772",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),_o=new T({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[qae]},$$scope:{ctx:k}}}),_c=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4137"}}),bo=new T({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[Tae]},$$scope:{ctx:k}}}),$c=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4210"}}),vc=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L513"}}),yc=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L526"}}),wc=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4262"}}),xo=new T({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[Nae]},$$scope:{ctx:k}}}),Dc=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L604"}}),vo=new T({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[Pae]},$$scope:{ctx:k}}}),kc=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L426"}}),Ec=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L430",returnType:`
<p><code>BaseIndex</code></p>
`}}),Ic=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L648"}}),qc=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L656",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),Tc=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L671",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),Nc=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L686",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),Pc=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/search.py#L705",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),Lc=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L145"}}),Fc=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L150"}}),Ac=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L155"}}),Sc=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L159"}}),Oc=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L163"}}),Cc=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L167"}}),zc=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L171"}}),Vc=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L175"}}),Uc=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L179"}}),Mc=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L183"}}),Rc=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L187"}}),Bc=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L191"}}),Hc=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L195"}}),Gc=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L199"}}),Wc=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L207"}}),Yc=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L845",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),No=new T({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[Lae]},$$scope:{ctx:k}}}),Jc=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L880",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Po=new T({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[Fae]},$$scope:{ctx:k}}}),Kc=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L923",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Lo=new T({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[Aae]},$$scope:{ctx:k}}}),Zc=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L968",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Fo=new T({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[Sae]},$$scope:{ctx:k}}}),Xc=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L2048"}}),Qc=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4383"}}),Ao=new T({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[Oae]},$$scope:{ctx:k}}}),td=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L4461"}}),So=new T({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[Cae]},$$scope:{ctx:k}}}),ad=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/combine.py#L20",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Oo=new T({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[zae]},$$scope:{ctx:k}}}),sd=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/fingerprint.py#L96"}}),rd=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/fingerprint.py#L117"}}),ld=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/fingerprint.py#L162"}}),pd=new ta({}),cd=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L32"}}),dd=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L54"}}),Vo=new T({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[Vae]},$$scope:{ctx:k}}}),md=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L69"}}),Uo=new T({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[Uae]},$$scope:{ctx:k}}}),hd=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L87"}}),Mo=new T({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[Mae]},$$scope:{ctx:k}}}),fd=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L103"}}),Bo=new T({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[Rae]},$$scope:{ctx:k}}}),gd=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L119"}}),Ho=new T({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[Bae]},$$scope:{ctx:k}}}),_d=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L137"}}),Go=new T({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[Hae]},$$scope:{ctx:k}}}),bd=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L185",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),Wo=new T({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[Gae]},$$scope:{ctx:k}}}),$d=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L209",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),Yo=new T({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[Wae]},$$scope:{ctx:k}}}),xd=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L674"}}),Jo=new T({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[Yae]},$$scope:{ctx:k}}}),vd=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L786"}}),Ko=new T({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[Jae]},$$scope:{ctx:k}}}),yd=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L876"}}),Zo=new T({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[Kae]},$$scope:{ctx:k}}}),jd=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L944"}}),Xo=new T({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[Zae]},$$scope:{ctx:k}}}),wd=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L476"}}),Qo=new T({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[Xae]},$$scope:{ctx:k}}}),kd=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L518"}}),el=new T({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[Qae]},$$scope:{ctx:k}}}),Id=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L443"}}),qd=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L574"}}),al=new T({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[ese]},$$scope:{ctx:k}}}),Nd=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L623"}}),sl=new T({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[tse]},$$scope:{ctx:k}}}),Pd=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L153"}}),nl=new T({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[ase]},$$scope:{ctx:k}}}),Ld=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L233"}}),rl=new T({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[sse]},$$scope:{ctx:k}}}),Fd=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L267",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ol=new T({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[nse]},$$scope:{ctx:k}}}),Ad=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L294"}}),ll=new T({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[rse]},$$scope:{ctx:k}}}),Sd=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L332"}}),il=new T({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[ose]},$$scope:{ctx:k}}}),Cd=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L375",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),pl=new T({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[lse]},$$scope:{ctx:k}}}),zd=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L412"}}),cl=new T({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[ise]},$$scope:{ctx:k}}}),Ud=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1275"}}),dl=new T({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[pse]},$$scope:{ctx:k}}}),Md=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1020"}}),ml=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[cse]},$$scope:{ctx:k}}}),hl=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[dse]},$$scope:{ctx:k}}}),Bd=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1068",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),fl=new T({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[mse]},$$scope:{ctx:k}}}),Hd=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1115",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ul=new T({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[hse]},$$scope:{ctx:k}}}),Gd=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1149",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),gl=new T({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[fse]},$$scope:{ctx:k}}}),Wd=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1183",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),_l=new T({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[use]},$$scope:{ctx:k}}}),Yd=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1226",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),bl=new T({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[gse]},$$scope:{ctx:k}}}),Jd=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1260"}}),Kd=new ta({}),Zd=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L456"}}),Xd=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L922",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),vl=new T({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[_se]},$$scope:{ctx:k}}}),Qd=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L948",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),yl=new T({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[bse]},$$scope:{ctx:k}}}),em=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L996",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),jl=new T({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[$se]},$$scope:{ctx:k}}}),tm=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L502"}}),am=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L542"}}),wl=new T({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[xse]},$$scope:{ctx:k}}}),nm=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L854",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Dl=new T({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[vse]},$$scope:{ctx:k}}}),rm=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L636"}}),kl=new T({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[yse]},$$scope:{ctx:k}}}),om=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L703"}}),El=new T({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[jse]},$$scope:{ctx:k}}}),im=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L769"}}),Il=new T({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[wse]},$$scope:{ctx:k}}}),cm=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/iterable_dataset.py#L806"}}),ql=new T({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[Dse]},$$scope:{ctx:k}}}),mm=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L145"}}),hm=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L150"}}),fm=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L155"}}),um=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L159"}}),gm=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L163"}}),_m=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L167"}}),bm=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L171"}}),$m=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L175"}}),xm=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L179"}}),vm=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L183"}}),ym=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L187"}}),jm=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L191"}}),wm=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L195"}}),Dm=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L199"}}),km=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/arrow_dataset.py#L207"}}),Em=new ta({}),Im=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1375"}}),qm=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1405"}}),Fl=new T({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[kse]},$$scope:{ctx:k}}}),Nm=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1483"}}),Al=new T({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[Ese]},$$scope:{ctx:k}}}),Pm=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1537"}}),Sl=new T({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[Ise]},$$scope:{ctx:k}}}),Fm=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1376"}}),Ol=new T({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[qse]},$$scope:{ctx:k}}}),Am=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1704",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Cl=new T({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[Tse]},$$scope:{ctx:k}}}),Sm=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1675",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),zl=new T({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[Nse]},$$scope:{ctx:k}}}),Om=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1650",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Vl=new T({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[Pse]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1592",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ul=new T({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[Lse]},$$scope:{ctx:k}}}),zm=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/dataset_dict.py#L1623",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ml=new T({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[Fse]},$$scope:{ctx:k}}}),Vm=new ta({}),Um=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1290"}}),Bl=new zte({props:{$$slots:{default:[Ase]},$$scope:{ctx:k}}}),Wm=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1499",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Ym=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1481",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Jm=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1465",returnDescription:`
<p><code>list[Any]</code></p>
`}}),Km=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1443",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Zm=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1425",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Xm=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1412",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Qm=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1569",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),eh=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1361",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),th=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1381",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Ql=new T({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[Sse]},$$scope:{ctx:k}}}),ah=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L1508",returnType:`
<p><a
  href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ei=new T({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[Ose]},$$scope:{ctx:k}}}),sh=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L911"}}),nh=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L781"}}),oh=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L866"}}),lh=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L837"}}),ih=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L402"}}),ph=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/translation.py#L12"}}),si=new T({props:{anchor:"datasets.Translation.example",$$slots:{default:[Cse]},$$scope:{ctx:k}}}),dh=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/translation.py#L46"}}),mh=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/translation.py#L54"}}),ri=new T({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[zse]},$$scope:{ctx:k}}}),hh=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/translation.py#L123"}}),uh=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L478"}}),_h=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L487"}}),$h=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L496"}}),vh=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/features.py#L505"}}),yh=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/audio.py#L20"}}),Eh=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/audio.py#L139",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Ih=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/audio.py#L91",returnDescription:`
<p>dict</p>
`}}),qh=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/audio.py#L172",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Th=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/audio.py#L60",returnType:`
<p><code>dict</code></p>
`}}),Nh=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/audio.py#L128"}}),Ph=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/image.py#L26"}}),Ch=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/image.py#L149",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),zh=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/image.py#L90",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),Vh=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/image.py#L198",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Uh=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/image.py#L56",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),Mh=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/features/image.py#L136"}}),Rh=new ta({}),Bh=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/info.py#L317"}}),Hh=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/info.py#L364"}}),Wh=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/info.py#L352"}}),Yh=new ta({}),Jh=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/metric.py#L138"}}),Kh=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/metric.py#L490"}}),Zh=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/metric.py#L451"}}),Xh=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/metric.py#L388",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),Qh=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/metric.py#L565"}}),ef=new ta({}),tf=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.filesystems.S3FileSystem.anon",description:`<strong>anon</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to use anonymous connection (public buckets only). If False, uses the key/secret given,
or boto&#x2019;s credential resolver (client_kwargs, environment, variables, config files, EC2 IAM server, in that order).`,name:"anon"},{anchor:"datasets.filesystems.S3FileSystem.key",description:"<strong>key</strong> (<code>str</code>) &#x2014; If not anonymous, use this access key ID, if specified.",name:"key"},{anchor:"datasets.filesystems.S3FileSystem.secret",description:"<strong>secret</strong> (<code>str</code>) &#x2014; If not anonymous, use this secret access key, if specified.",name:"secret"},{anchor:"datasets.filesystems.S3FileSystem.token",description:"<strong>token</strong> (<code>str</code>) &#x2014; If not anonymous, use this security token, if specified.",name:"token"},{anchor:"datasets.filesystems.S3FileSystem.use_ssl",description:`<strong>use_ssl</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use SSL in connections to S3; may be faster without, but insecure. If <code>use_ssl</code> is
also set in <code>client_kwargs</code>, the value set in <code>client_kwargs</code> will take priority.`,name:"use_ssl"},{anchor:"datasets.filesystems.S3FileSystem.s3_additional_kwargs",description:`<strong>s3_additional_kwargs</strong> (<code>dict</code>) &#x2014; Parameters that are used when calling S3 API methods. Typically used for things
like ServerSideEncryption.`,name:"s3_additional_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.client_kwargs",description:"<strong>client_kwargs</strong> (<code>dict</code>) &#x2014; Parameters for the botocore client.",name:"client_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.requester_pays",description:"<strong>requester_pays</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether RequesterPays buckets are supported.",name:"requester_pays"},{anchor:"datasets.filesystems.S3FileSystem.default_block_size",description:`<strong>default_block_size</strong> (<code>int</code>) &#x2014; If given, the default block size value used for <code>open()</code>, if no specific value is given at all time.
The built-in default is 5MB.`,name:"default_block_size"},{anchor:"datasets.filesystems.S3FileSystem.default_fill_cache",description:"<strong>default_fill_cache</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use cache filling with open by default. Refer to <code>S3File.open</code>.",name:"default_fill_cache"},{anchor:"datasets.filesystems.S3FileSystem.default_cache_type",description:`<strong>default_cache_type</strong> (<code>str</code>, default to <code>bytes</code>) &#x2014; If given, the default cache_type value used for <code>open()</code>. Set to <code>none</code> if no
caching is desired. See fsspec&#x2019;s documentation for other available cache_type values.`,name:"default_cache_type"},{anchor:"datasets.filesystems.S3FileSystem.version_aware",description:`<strong>version_aware</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to support bucket versioning. If enable this will require the user to have
the necessary IAM permissions for dealing with versioned objects.`,name:"version_aware"},{anchor:"datasets.filesystems.S3FileSystem.cache_regions",description:`<strong>cache_regions</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to cache bucket regions. Whenever a new bucket is used, it will
first find out which region it belongs to and then use the client for that region.`,name:"cache_regions"},{anchor:"datasets.filesystems.S3FileSystem.asynchronous",description:"<strong>asynchronous</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether this instance is to be used from inside coroutines.",name:"asynchronous"},{anchor:"datasets.filesystems.S3FileSystem.config_kwargs",description:`<strong>config_kwargs</strong> (<code>dict</code>) &#x2014; Parameters passed to <code>botocore.client.Config</code>.
kwargs &#x2014; Other parameters for core session.`,name:"config_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.session",description:`<strong>session</strong> (<code>aiobotocore.session.AioSession</code>) &#x2014; Session to be used for all connections. This session will be used inplace of creating
a new session inside S3FileSystem. For example: <code>aiobotocore.session.AioSession(profile=&apos;test_user&apos;)</code>.`,name:"session"},{anchor:"datasets.filesystems.S3FileSystem.skip_instance_cache",description:"<strong>skip_instance_cache</strong> (<code>bool</code>) &#x2014; Control reuse of instances. Passed on to <code>fsspec</code>.",name:"skip_instance_cache"},{anchor:"datasets.filesystems.S3FileSystem.use_listings_cache",description:"<strong>use_listings_cache</strong> (<code>bool</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"use_listings_cache"},{anchor:"datasets.filesystems.S3FileSystem.listings_expiry_time",description:"<strong>listings_expiry_time</strong> (<code>int</code> or <code>float</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"listings_expiry_time"},{anchor:"datasets.filesystems.S3FileSystem.max_paths",description:"<strong>max_paths</strong> (<code>int</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"max_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/filesystems/s3filesystem.py#L4"}}),wi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[Vse]},$$scope:{ctx:k}}}),Di=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[Use]},$$scope:{ctx:k}}}),ki=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[Mse]},$$scope:{ctx:k}}}),Ei=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[Rse]},$$scope:{ctx:k}}}),Ii=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[Bse]},$$scope:{ctx:k}}}),sf=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/filesystems/__init__.py#L28"}}),nf=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/filesystems/__init__.py#L40"}}),rf=new ta({}),of=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4378/src/datasets/fingerprint.py#L212"}}),{c(){c=n("meta"),g=d(),f=n("h1"),p=n("a"),u=n("span"),_(t.$$.fragment),h=d(),Ys=n("span"),aa=l("Main classes"),gr=d(),Ae=n("h2"),_e=n("a"),se=n("span"),_(sa.$$.fragment),wf=d(),_r=n("span"),J4=l("DatasetInfo"),g0=d(),K=n("div"),_(op.$$.fragment),K4=d(),qb=n("p"),Z4=l("Information about a dataset."),X4=d(),Df=n("p"),Tb=n("em"),Q4=l("DatasetInfo"),eD=l(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),tD=d(),Nb=n("p"),aD=l("Note: Not all fields are known on construction and may be updated later."),sD=d(),be=n("div"),_(lp.$$.fragment),nD=d(),ip=n("p"),rD=l("Create DatasetInfo from the JSON file in "),Pb=n("code"),oD=l("dataset_info_dir"),lD=l("."),iD=d(),Lb=n("p"),pD=l(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),cD=d(),Fb=n("p"),dD=l("This will overwrite all previous metadata."),mD=d(),_(br.$$.fragment),hD=d(),na=n("div"),_(pp.$$.fragment),fD=d(),Js=n("p"),uD=l("Write "),Ab=n("em"),gD=l("DatasetInfo"),_D=l(" and license (if present) as JSON files to "),Sb=n("em"),bD=l("dataset_info_dir"),$D=l("."),xD=d(),_($r.$$.fragment),_0=d(),Ks=n("h2"),xr=n("a"),Ob=n("span"),_(cp.$$.fragment),vD=d(),Cb=n("span"),yD=l("Dataset"),b0=d(),vr=n("p"),jD=l("The base class "),kf=n("a"),wD=l("Dataset"),DD=l(" implements a Dataset backed by an Apache Arrow table."),$0=d(),I=n("div"),_(dp.$$.fragment),kD=d(),zb=n("p"),ED=l("A Dataset backed by an Arrow table."),ID=d(),Ze=n("div"),_(mp.$$.fragment),qD=d(),Vb=n("p"),TD=l("Add column to Dataset."),ND=d(),Ub=n("p"),Mb=n("em"),PD=l("New in version 1.7."),LD=d(),_(yr.$$.fragment),FD=d(),Xe=n("div"),_(hp.$$.fragment),AD=d(),Rb=n("p"),SD=l("Add item to Dataset."),OD=d(),Bb=n("p"),Hb=n("em"),CD=l("New in version 1.7."),zD=d(),_(jr.$$.fragment),VD=d(),wr=n("div"),_(fp.$$.fragment),UD=d(),Gb=n("p"),MD=l("Instantiate a Dataset backed by an Arrow table at filename."),RD=d(),Dr=n("div"),_(up.$$.fragment),BD=d(),Wb=n("p"),HD=l("Instantiate a Dataset backed by an Arrow buffer."),GD=d(),$e=n("div"),_(gp.$$.fragment),WD=d(),Et=n("p"),YD=l("Convert "),Yb=n("code"),JD=l("pandas.DataFrame"),KD=l(" to a "),Jb=n("code"),ZD=l("pyarrow.Table"),XD=l(" to create a "),Ef=n("a"),QD=l("Dataset"),e3=l("."),t3=d(),_p=n("p"),a3=l(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Kb=n("em"),s3=l("object"),n3=l(", we need to guess the datatype by looking at the Python objects in this Series."),r3=d(),bp=n("p"),o3=l("Be aware that Series of the "),Zb=n("em"),l3=l("object"),i3=l(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),p3=d(),_(kr.$$.fragment),c3=d(),Er=n("div"),_($p.$$.fragment),d3=d(),It=n("p"),m3=l("Convert "),Xb=n("code"),h3=l("dict"),f3=l(" to a "),Qb=n("code"),u3=l("pyarrow.Table"),g3=l(" to create a "),If=n("a"),_3=l("Dataset"),b3=l("."),$3=d(),ra=n("div"),_(xp.$$.fragment),x3=d(),e$=n("p"),v3=l("The Apache Arrow table backing the dataset."),y3=d(),_(Ir.$$.fragment),j3=d(),oa=n("div"),_(vp.$$.fragment),w3=d(),t$=n("p"),D3=l("The cache files containing the Apache Arrow table backing the dataset."),k3=d(),_(qr.$$.fragment),E3=d(),la=n("div"),_(yp.$$.fragment),I3=d(),a$=n("p"),q3=l("Number of columns in the dataset."),T3=d(),_(Tr.$$.fragment),N3=d(),ia=n("div"),_(jp.$$.fragment),P3=d(),wp=n("p"),L3=l("Number of rows in the dataset (same as "),Nr=n("a"),F3=l("Dataset."),s$=n("strong"),A3=l("len"),S3=l("()"),O3=l(")."),C3=d(),_(Pr.$$.fragment),z3=d(),pa=n("div"),_(Dp.$$.fragment),V3=d(),n$=n("p"),U3=l("Names of the columns in the dataset."),M3=d(),_(Lr.$$.fragment),R3=d(),ca=n("div"),_(kp.$$.fragment),B3=d(),r$=n("p"),H3=l("Shape of the dataset (number of columns, number of rows)."),G3=d(),_(Fr.$$.fragment),W3=d(),Qe=n("div"),_(Ep.$$.fragment),Y3=d(),o$=n("p"),J3=l("Return a list of the unique elements in a column."),K3=d(),l$=n("p"),Z3=l("This is implemented in the low-level backend and as such, very fast."),X3=d(),_(Ar.$$.fragment),Q3=d(),da=n("div"),_(Ip.$$.fragment),ek=d(),i$=n("p"),tk=l(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),ak=d(),_(Sr.$$.fragment),sk=d(),ma=n("div"),_(qp.$$.fragment),nk=d(),p$=n("p"),rk=l("Cast the dataset to a new set of features."),ok=d(),_(Or.$$.fragment),lk=d(),ha=n("div"),_(Tp.$$.fragment),ik=d(),c$=n("p"),pk=l("Cast column to feature for decoding."),ck=d(),_(Cr.$$.fragment),dk=d(),et=n("div"),_(Np.$$.fragment),mk=d(),d$=n("p"),hk=l("Remove one or several column(s) in the dataset and the features associated to them."),fk=d(),Zs=n("p"),uk=l("You can also remove a column using "),qf=n("a"),gk=l("Dataset.map()"),_k=l(" with "),m$=n("em"),bk=l("remove_columns"),$k=l(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),xk=d(),_(zr.$$.fragment),vk=d(),fa=n("div"),_(Pp.$$.fragment),yk=d(),h$=n("p"),jk=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),wk=d(),_(Vr.$$.fragment),Dk=d(),ua=n("div"),_(Lp.$$.fragment),kk=d(),f$=n("p"),Ek=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),Ik=d(),_(Ur.$$.fragment),qk=d(),ga=n("div"),_(Fp.$$.fragment),Tk=d(),Ap=n("p"),Nk=l("Casts the given column as :obj:"),u$=n("code"),Pk=l("datasets.features.ClassLabel"),Lk=l(" and updates the table."),Fk=d(),_(Mr.$$.fragment),Ak=d(),_a=n("div"),_(Sp.$$.fragment),Sk=d(),g$=n("p"),Ok=l("Number of rows in the dataset."),Ck=d(),_(Rr.$$.fragment),zk=d(),ba=n("div"),_(Op.$$.fragment),Vk=d(),_$=n("p"),Uk=l("Iterate through the examples."),Mk=d(),Cp=n("p"),Rk=l("If a formatting is set with "),Tf=n("a"),Bk=l("Dataset.set_format()"),Hk=l(` rows will be returned with the
selected format.`),Gk=d(),Br=n("div"),_(zp.$$.fragment),Wk=d(),Xs=n("p"),Yk=l("To be used in a "),b$=n("code"),Jk=l("with"),Kk=l(" statement. Set "),$$=n("code"),Zk=l("__getitem__"),Xk=l(" return format (type and columns)."),Qk=d(),xe=n("div"),_(Vp.$$.fragment),e8=d(),Se=n("p"),t8=l("Set "),x$=n("strong"),a8=l("getitem"),s8=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),v$=n("code"),n8=l("type"),r8=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),y$=n("strong"),o8=l("getitem"),l8=l(`.
It\u2019s also possible to use custom transforms for formatting using `),Nf=n("a"),i8=l("datasets.Dataset.set_transform()"),p8=l("."),c8=d(),Oe=n("p"),d8=l("It is possible to call "),j$=n("code"),m8=l("map"),h8=l(" after calling "),w$=n("code"),f8=l("set_format"),u8=l(". Since "),D$=n("code"),g8=l("map"),_8=l(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),k$=n("code"),b8=l("map"),$8=l(" on a dataset to add a new column, then this column will be formatted:"),x8=d(),E$=n("p"),v8=l("new formatted columns = (all columns - previously unformatted columns)"),y8=d(),_(Hr.$$.fragment),j8=d(),$a=n("div"),_(Up.$$.fragment),w8=d(),tt=n("p"),D8=l("Set "),I$=n("strong"),k8=l("getitem"),E8=l(" return format using this transform. The transform is applied on-the-fly on batches when "),q$=n("strong"),I8=l("getitem"),q8=l(` is called.
As `),Pf=n("a"),T8=l("datasets.Dataset.set_format()"),N8=l(", this can be reset using "),Lf=n("a"),P8=l("datasets.Dataset.reset_format()"),L8=d(),_(Gr.$$.fragment),F8=d(),at=n("div"),_(Mp.$$.fragment),A8=d(),Rp=n("p"),S8=l("Reset "),T$=n("strong"),O8=l("getitem"),C8=l(" return format to python objects and all columns."),z8=d(),Ff=n("p"),V8=l("Same as "),N$=n("code"),U8=l("self.set_format()"),M8=d(),_(Wr.$$.fragment),R8=d(),ve=n("div"),_(Bp.$$.fragment),B8=d(),qt=n("p"),H8=l("Set "),P$=n("strong"),G8=l("getitem"),W8=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),L$=n("code"),Y8=l("type"),J8=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),F$=n("strong"),K8=l("getitem"),Z8=l("."),X8=d(),Hp=n("p"),Q8=l("It\u2019s also possible to use custom transforms for formatting using "),Af=n("a"),eE=l("datasets.Dataset.with_transform()"),tE=l("."),aE=d(),Qs=n("p"),sE=l("Contrary to "),Sf=n("a"),nE=l("datasets.Dataset.set_format()"),rE=l(", "),A$=n("code"),oE=l("with_format"),lE=l(" returns a new Dataset object."),iE=d(),_(Yr.$$.fragment),pE=d(),ye=n("div"),_(Gp.$$.fragment),cE=d(),en=n("p"),dE=l("Set "),S$=n("strong"),mE=l("getitem"),hE=l(" return format using this transform. The transform is applied on-the-fly on batches when "),O$=n("strong"),fE=l("getitem"),uE=l(" is called."),gE=d(),tn=n("p"),_E=l("As "),Of=n("a"),bE=l("datasets.Dataset.set_format()"),$E=l(", this can be reset using "),Cf=n("a"),xE=l("datasets.Dataset.reset_format()"),vE=l("."),yE=d(),an=n("p"),jE=l("Contrary to "),zf=n("a"),wE=l("datasets.Dataset.set_transform()"),DE=l(", "),C$=n("code"),kE=l("with_transform"),EE=l(" returns a new Dataset object."),IE=d(),_(Jr.$$.fragment),qE=d(),Kr=n("div"),_(Wp.$$.fragment),TE=d(),z$=n("p"),NE=l("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),PE=d(),st=n("div"),_(Yp.$$.fragment),LE=d(),V$=n("p"),FE=l(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),AE=d(),U$=n("p"),SE=l("Be careful when running this command that no other process is currently using other cache files."),OE=d(),_(Zr.$$.fragment),CE=d(),je=n("div"),_(Jp.$$.fragment),zE=d(),M$=n("p"),VE=l(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),UE=d(),Kp=n("p"),ME=l("You can specify whether the function should be batched or not with the "),R$=n("code"),RE=l("batched"),BE=l(" parameter:"),HE=d(),sn=n("ul"),B$=n("li"),GE=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),WE=d(),H$=n("li"),YE=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),JE=d(),ce=n("li"),KE=l("If batched is True and batch_size is "),G$=n("code"),ZE=l("n"),XE=l(" > 1, then the function takes a batch of "),W$=n("code"),QE=l("n"),e6=l(" examples as input and can return a batch with "),Y$=n("code"),t6=l("n"),a6=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),J$=n("code"),s6=l("n"),n6=l(` examples.
A batch is a dictionary, e.g. a batch of `),K$=n("code"),r6=l("n"),o6=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),l6=d(),_(Xr.$$.fragment),i6=d(),xa=n("div"),_(Zp.$$.fragment),p6=d(),Z$=n("p"),c6=l(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),d6=d(),_(Qr.$$.fragment),m6=d(),va=n("div"),_(Xp.$$.fragment),h6=d(),X$=n("p"),f6=l("Create a new dataset with rows selected following the list/array of indices."),u6=d(),_(eo.$$.fragment),g6=d(),nt=n("div"),_(Qp.$$.fragment),_6=d(),Q$=n("p"),b6=l("Create a new dataset sorted according to a column."),$6=d(),e2=n("p"),x6=l(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),v6=d(),_(to.$$.fragment),y6=d(),rt=n("div"),_(ec.$$.fragment),j6=d(),t2=n("p"),w6=l("Create a new Dataset where the rows are shuffled."),D6=d(),a2=n("p"),k6=l(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),E6=d(),_(ao.$$.fragment),I6=d(),ot=n("div"),_(tc.$$.fragment),q6=d(),H=n("p"),T6=l("Return a dictionary ("),s2=n("code"),N6=l("datasets.DatasetDict"),P6=l(") with two random train and test subsets ("),n2=n("em"),L6=l("train"),F6=l(" and "),r2=n("em"),A6=l("test"),S6=d(),o2=n("code"),O6=l("Dataset"),C6=l(` splits).
Splits are created from the dataset according to `),l2=n("em"),z6=l("test_size"),V6=l(", "),i2=n("em"),U6=l("train_size"),M6=l(" and "),p2=n("em"),R6=l("shuffle"),B6=l("."),H6=d(),ac=n("p"),G6=l("This method is similar to scikit-learn "),c2=n("em"),W6=l("train_test_split"),Y6=l(" with the omission of the stratified options."),J6=d(),_(so.$$.fragment),K6=d(),ne=n("div"),_(sc.$$.fragment),Z6=d(),nn=n("p"),X6=l("Return the "),d2=n("em"),Q6=l("index"),e5=l("-nth shard from dataset split into "),m2=n("em"),t5=l("num_shards"),a5=l(" pieces."),s5=d(),h2=n("p"),n5=l(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),r5=d(),nc=n("p"),o5=l(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),f2=n("em"),l5=l("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),i5=l(` will return
a dataset with the same order as the original.`),p5=d(),u2=n("p"),c5=l(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),d5=d(),_(no.$$.fragment),m5=d(),ya=n("div"),_(rc.$$.fragment),h5=d(),g2=n("p"),f5=l(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),u5=d(),_(ro.$$.fragment),g5=d(),lt=n("div"),_(oc.$$.fragment),_5=d(),_2=n("p"),b5=l(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),$5=d(),Tt=n("p"),x5=l("The resulting Parquet files are self-contained by default: if your dataset contains "),Vf=n("a"),v5=l("Image"),y5=l(" or "),Uf=n("a"),j5=l("Audio"),w5=l(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),b2=n("em"),D5=l("embed_external_files"),k5=l(" to False."),E5=d(),_(oo.$$.fragment),I5=d(),W=n("div"),_(lc.$$.fragment),q5=d(),rn=n("p"),T5=l("Saves a dataset to a dataset directory, or in a filesystem using either "),Mf=n("a"),N5=l("S3FileSystem"),P5=l(` or
any implementation of `),$2=n("code"),L5=l("fsspec.spec.AbstractFileSystem"),F5=l("."),A5=d(),on=n("p"),S5=l("For "),Rf=n("a"),O5=l("Image"),C5=l(" and "),Bf=n("a"),z5=l("Audio"),V5=l(" data:"),U5=d(),ic=n("p"),M5=l(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),x2=n("em"),R5=l("read()"),B5=l(" those files first."),H5=d(),_(lo.$$.fragment),G5=d(),_(io.$$.fragment),W5=d(),_(po.$$.fragment),Y5=d(),ja=n("div"),_(pc.$$.fragment),J5=d(),Nt=n("p"),K5=l("Loads a dataset that was previously saved using "),v2=n("code"),Z5=l("save_to_disk"),X5=l(` from a dataset directory, or from a
filesystem using either `),Hf=n("a"),Q5=l("S3FileSystem"),eI=l(` or any implementation of
`),y2=n("code"),tI=l("fsspec.spec.AbstractFileSystem"),aI=l("."),sI=d(),_(co.$$.fragment),nI=d(),mo=n("div"),_(cc.$$.fragment),rI=d(),j2=n("p"),oI=l("Create and cache a new Dataset by flattening the indices mapping."),lI=d(),wa=n("div"),_(dc.$$.fragment),iI=d(),w2=n("p"),pI=l("Exports the dataset to csv"),cI=d(),_(ho.$$.fragment),dI=d(),Da=n("div"),_(mc.$$.fragment),mI=d(),hc=n("p"),hI=l("Returns the dataset as a "),D2=n("code"),fI=l("pandas.DataFrame"),uI=l(". Can also return a generator for large datasets."),gI=d(),_(fo.$$.fragment),_I=d(),ka=n("div"),_(fc.$$.fragment),bI=d(),k2=n("p"),$I=l("Returns the dataset as a Python dict. Can also return a generator for large datasets."),xI=d(),_(uo.$$.fragment),vI=d(),Ea=n("div"),_(uc.$$.fragment),yI=d(),E2=n("p"),jI=l("Export the dataset to JSON Lines or JSON."),wI=d(),_(go.$$.fragment),DI=d(),Ia=n("div"),_(gc.$$.fragment),kI=d(),I2=n("p"),EI=l("Exports the dataset to parquet"),II=d(),_(_o.$$.fragment),qI=d(),it=n("div"),_(_c.$$.fragment),TI=d(),ln=n("p"),NI=l(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),q2=n("code"),PI=l("device"),LI=l(" if you want to run it on GPU ("),T2=n("code"),FI=l("device"),AI=l(` must be the GPU index).
You can find more information about Faiss here:`),SI=d(),N2=n("ul"),Gf=n("li"),OI=l("For "),bc=n("a"),CI=l("string factory"),zI=d(),_(bo.$$.fragment),VI=d(),qa=n("div"),_($c.$$.fragment),UI=d(),Pt=n("p"),MI=l(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),P2=n("em"),RI=l("external_arrays"),BI=l(`.
You can specify `),L2=n("em"),HI=l("device"),GI=l(" if you want to run it on GPU ("),F2=n("em"),WI=l("device"),YI=l(` must be the GPU index).
You can find more information about Faiss here:`),JI=d(),A2=n("ul"),Wf=n("li"),KI=l("For "),xc=n("a"),ZI=l("string factory"),XI=d(),$o=n("div"),_(vc.$$.fragment),QI=d(),S2=n("p"),e9=l("Save a FaissIndex on disk."),t9=d(),Ta=n("div"),_(yc.$$.fragment),a9=d(),O2=n("p"),s9=l("Load a FaissIndex from disk."),n9=d(),jc=n("p"),r9=l(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),C2=n("em"),o9=l(".get_index(index_name).faiss_index"),l9=l(" to make it fit your needs."),i9=d(),Na=n("div"),_(wc.$$.fragment),p9=d(),z2=n("p"),c9=l("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),d9=d(),_(xo.$$.fragment),m9=d(),Pa=n("div"),_(Dc.$$.fragment),h9=d(),V2=n("p"),f9=l("Load an existing text index using ElasticSearch for fast retrieval."),u9=d(),_(vo.$$.fragment),g9=d(),yo=n("div"),_(kc.$$.fragment),_9=d(),U2=n("p"),b9=l("List the colindex_nameumns/identifiers of all the attached indexes."),$9=d(),jo=n("div"),_(Ec.$$.fragment),x9=d(),M2=n("p"),v9=l("List the index_name/identifiers of all the attached indexes."),y9=d(),wo=n("div"),_(Ic.$$.fragment),j9=d(),R2=n("p"),w9=l("Drop the index with the specified column."),D9=d(),Do=n("div"),_(qc.$$.fragment),k9=d(),B2=n("p"),E9=l("Find the nearest examples indices in the dataset to the query."),I9=d(),ko=n("div"),_(Tc.$$.fragment),q9=d(),H2=n("p"),T9=l("Find the nearest examples indices in the dataset to the query."),N9=d(),Eo=n("div"),_(Nc.$$.fragment),P9=d(),G2=n("p"),L9=l("Find the nearest examples in the dataset to the query."),F9=d(),Io=n("div"),_(Pc.$$.fragment),A9=d(),W2=n("p"),S9=l("Find the nearest examples in the dataset to the query."),O9=d(),qo=n("div"),_(Lc.$$.fragment),C9=d(),Yf=n("p"),Jf=n("a"),z9=l("datasets.DatasetInfo"),V9=l(" object containing all the metadata in the dataset."),U9=d(),To=n("div"),_(Fc.$$.fragment),M9=d(),Kf=n("p"),Zf=n("a"),R9=l("datasets.NamedSplit"),B9=l(" object corresponding to a named dataset split."),H9=d(),Xf=n("div"),_(Ac.$$.fragment),G9=d(),Qf=n("div"),_(Sc.$$.fragment),W9=d(),eu=n("div"),_(Oc.$$.fragment),Y9=d(),tu=n("div"),_(Cc.$$.fragment),J9=d(),au=n("div"),_(zc.$$.fragment),K9=d(),su=n("div"),_(Vc.$$.fragment),Z9=d(),nu=n("div"),_(Uc.$$.fragment),X9=d(),ru=n("div"),_(Mc.$$.fragment),Q9=d(),ou=n("div"),_(Rc.$$.fragment),eq=d(),lu=n("div"),_(Bc.$$.fragment),tq=d(),iu=n("div"),_(Hc.$$.fragment),aq=d(),pu=n("div"),_(Gc.$$.fragment),sq=d(),cu=n("div"),_(Wc.$$.fragment),nq=d(),La=n("div"),_(Yc.$$.fragment),rq=d(),Y2=n("p"),oq=l("Create Dataset from CSV file(s)."),lq=d(),_(No.$$.fragment),iq=d(),Fa=n("div"),_(Jc.$$.fragment),pq=d(),J2=n("p"),cq=l("Create Dataset from JSON or JSON Lines file(s)."),dq=d(),_(Po.$$.fragment),mq=d(),Aa=n("div"),_(Kc.$$.fragment),hq=d(),K2=n("p"),fq=l("Create Dataset from Parquet file(s)."),uq=d(),_(Lo.$$.fragment),gq=d(),Sa=n("div"),_(Zc.$$.fragment),_q=d(),Z2=n("p"),bq=l("Create Dataset from text file(s)."),$q=d(),_(Fo.$$.fragment),xq=d(),Oa=n("div"),_(Xc.$$.fragment),vq=d(),pn=n("p"),yq=l("Prepare a dataset for the given task by casting the dataset\u2019s "),du=n("a"),jq=l("Features"),wq=l(" to standardized column names and types as detailed in "),mu=n("a"),Dq=l("datasets.tasks"),kq=l("."),Eq=d(),cn=n("p"),Iq=l("Casts "),X2=n("code"),qq=l("datasets.DatasetInfo.features"),Tq=l(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Q2=n("code"),Nq=l("datasets.DatasetInfo.task_templates"),Pq=l(" after casting."),Lq=d(),Ca=n("div"),_(Qc.$$.fragment),Fq=d(),ed=n("p"),Aq=l("Align the dataset\u2019s label ID and label name mapping to match an input "),ex=n("code"),Sq=l("label2id"),Oq=l(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),Cq=d(),_(Ao.$$.fragment),x0=d(),Lt=n("div"),_(td.$$.fragment),zq=d(),dn=n("p"),Vq=l("Converts a list of "),hu=n("a"),Uq=l("Dataset"),Mq=l(" with the same schema into a single "),fu=n("a"),Rq=l("Dataset"),Bq=l("."),Hq=d(),_(So.$$.fragment),v0=d(),Z=n("div"),_(ad.$$.fragment),Gq=d(),tx=n("p"),Wq=l(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),Yq=d(),mn=n("p"),Jq=l("You can use this function on a list of "),uu=n("a"),Kq=l("Dataset"),Zq=l(" objects, or on a list of "),gu=n("a"),Xq=l("IterableDataset"),Qq=l(" objects."),eT=d(),Ce=n("p"),tT=l("If "),ax=n("code"),aT=l("probabilities"),sT=l(" is "),sx=n("code"),nT=l("None"),rT=l(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),nx=n("code"),oT=l("probabilities"),lT=l(" is not "),rx=n("code"),iT=l("None"),pT=l(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),cT=d(),ox=n("p"),dT=l("The resulting dataset ends when one of the source datasets runs out of examples."),mT=d(),_(Oo.$$.fragment),y0=d(),de=n("div"),_(sd.$$.fragment),hT=d(),lx=n("p"),fT=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),uT=d(),ix=n("p"),gT=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),_T=d(),px=n("p"),bT=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),$T=d(),ze=n("ul"),cx=n("li"),xT=l("cache files are always recreated"),vT=d(),dx=n("li"),yT=l("cache files are written to a temporary directory that is deleted when session closes"),jT=d(),mx=n("li"),wT=l("cache files are named using a random hash instead of the dataset fingerprint"),DT=d(),nd=n("li"),kT=l("use "),_u=n("a"),ET=l("datasets.Dataset.save_to_disk()"),IT=l(" to save a transformed dataset or it will be deleted when session closes"),qT=d(),Ft=n("li"),TT=l("caching doesn\u2019t affect "),bu=n("a"),NT=l("datasets.load_dataset()"),PT=l(`. If you want to regenerate a dataset from scratch you should use
the `),hx=n("code"),LT=l("download_mode"),FT=l(" parameter in "),$u=n("a"),AT=l("datasets.load_dataset()"),ST=l("."),j0=d(),me=n("div"),_(rd.$$.fragment),OT=d(),fx=n("p"),CT=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),zT=d(),ux=n("p"),VT=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),UT=d(),gx=n("p"),MT=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),RT=d(),Ve=n("ul"),_x=n("li"),BT=l("cache files are always recreated"),HT=d(),bx=n("li"),GT=l("cache files are written to a temporary directory that is deleted when session closes"),WT=d(),$x=n("li"),YT=l("cache files are named using a random hash instead of the dataset fingerprint"),JT=d(),od=n("li"),KT=l("use "),xu=n("a"),ZT=l("datasets.Dataset.save_to_disk()"),XT=l(" to save a transformed dataset or it will be deleted when session closes"),QT=d(),At=n("li"),eN=l("caching doesn\u2019t affect "),vu=n("a"),tN=l("datasets.load_dataset()"),aN=l(`. If you want to regenerate a dataset from scratch you should use
the `),xx=n("code"),sN=l("download_mode"),nN=l(" parameter in "),yu=n("a"),rN=l("datasets.load_dataset()"),oN=l("."),w0=d(),he=n("div"),_(ld.$$.fragment),lN=d(),vx=n("p"),iN=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),pN=d(),yx=n("p"),cN=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),dN=d(),jx=n("p"),mN=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),hN=d(),Ue=n("ul"),wx=n("li"),fN=l("cache files are always recreated"),uN=d(),Dx=n("li"),gN=l("cache files are written to a temporary directory that is deleted when session closes"),_N=d(),kx=n("li"),bN=l("cache files are named using a random hash instead of the dataset fingerprint"),$N=d(),id=n("li"),xN=l("use "),ju=n("a"),vN=l("datasets.Dataset.save_to_disk()"),yN=l(" to save a transformed dataset or it will be deleted when session closes"),jN=d(),St=n("li"),wN=l("caching doesn\u2019t affect "),wu=n("a"),DN=l("datasets.load_dataset()"),kN=l(`. If you want to regenerate a dataset from scratch you should use
the `),Ex=n("code"),EN=l("download_mode"),IN=l(" parameter in "),Du=n("a"),qN=l("datasets.load_dataset()"),TN=l("."),D0=d(),hn=n("h2"),Co=n("a"),Ix=n("span"),_(pd.$$.fragment),NN=d(),qx=n("span"),PN=l("DatasetDict"),k0=d(),zo=n("p"),LN=l("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Tx=n("code"),FN=l("Dataset"),AN=l(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),E0=d(),L=n("div"),_(cd.$$.fragment),SN=d(),Nx=n("p"),ON=l("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),CN=d(),za=n("div"),_(dd.$$.fragment),zN=d(),Px=n("p"),VN=l("The Apache Arrow tables backing each split."),UN=d(),_(Vo.$$.fragment),MN=d(),Va=n("div"),_(md.$$.fragment),RN=d(),Lx=n("p"),BN=l("The cache files containing the Apache Arrow table backing each split."),HN=d(),_(Uo.$$.fragment),GN=d(),Ua=n("div"),_(hd.$$.fragment),WN=d(),Fx=n("p"),YN=l("Number of columns in each split of the dataset."),JN=d(),_(Mo.$$.fragment),KN=d(),Ma=n("div"),_(fd.$$.fragment),ZN=d(),ud=n("p"),XN=l("Number of rows in each split of the dataset (same as "),Ro=n("a"),QN=l("datasets.Dataset."),Ax=n("strong"),eP=l("len"),tP=l("()"),aP=l(")."),sP=d(),_(Bo.$$.fragment),nP=d(),Ra=n("div"),_(gd.$$.fragment),rP=d(),Sx=n("p"),oP=l("Names of the columns in each split of the dataset."),lP=d(),_(Ho.$$.fragment),iP=d(),Ba=n("div"),_(_d.$$.fragment),pP=d(),Ox=n("p"),cP=l("Shape of each split of the dataset (number of columns, number of rows)."),dP=d(),_(Go.$$.fragment),mP=d(),pt=n("div"),_(bd.$$.fragment),hP=d(),Cx=n("p"),fP=l("Return a list of the unique elements in a column for each split."),uP=d(),zx=n("p"),gP=l("This is implemented in the low-level backend and as such, very fast."),_P=d(),_(Wo.$$.fragment),bP=d(),Ha=n("div"),_($d.$$.fragment),$P=d(),Vx=n("p"),xP=l(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),vP=d(),_(Yo.$$.fragment),yP=d(),Ga=n("div"),_(xd.$$.fragment),jP=d(),Ux=n("p"),wP=l(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),DP=d(),_(Jo.$$.fragment),kP=d(),Wa=n("div"),_(vd.$$.fragment),EP=d(),Mx=n("p"),IP=l(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),qP=d(),_(Ko.$$.fragment),TP=d(),ct=n("div"),_(yd.$$.fragment),NP=d(),Rx=n("p"),PP=l(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),LP=d(),Bx=n("p"),FP=l(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),AP=d(),_(Zo.$$.fragment),SP=d(),we=n("div"),_(jd.$$.fragment),OP=d(),Hx=n("p"),CP=l("Create a new Dataset where the rows are shuffled."),zP=d(),Gx=n("p"),VP=l("The transformation is applied to all the datasets of the dataset dictionary."),UP=d(),Wx=n("p"),MP=l(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),RP=d(),_(Xo.$$.fragment),BP=d(),De=n("div"),_(wd.$$.fragment),HP=d(),Dd=n("p"),GP=l("Set "),Yx=n("code"),WP=l("__getitem__"),YP=l(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),JP=d(),Me=n("p"),KP=l("It is possible to call "),Jx=n("code"),ZP=l("map"),XP=l(" after calling "),Kx=n("code"),QP=l("set_format"),eL=l(". Since "),Zx=n("code"),tL=l("map"),aL=l(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Xx=n("code"),sL=l("map"),nL=l(" on a dataset to add a new column, then this column will be formatted:"),rL=d(),Qx=n("p"),oL=l("new formatted columns = (all columns - previously unformatted columns)"),lL=d(),_(Qo.$$.fragment),iL=d(),dt=n("div"),_(kd.$$.fragment),pL=d(),Ed=n("p"),cL=l("Reset "),e1=n("code"),dL=l("__getitem__"),mL=l(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),hL=d(),ku=n("p"),fL=l("Same as "),t1=n("code"),uL=l("self.set_format()"),gL=d(),_(el.$$.fragment),_L=d(),tl=n("div"),_(Id.$$.fragment),bL=d(),fn=n("p"),$L=l("To be used in a "),a1=n("em"),xL=l("with"),vL=l(" statement. Set "),s1=n("code"),yL=l("__getitem__"),jL=l(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),wL=d(),ke=n("div"),_(qd.$$.fragment),DL=d(),Ot=n("p"),kL=l("Set "),n1=n("code"),EL=l("__getitem__"),IL=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),r1=n("code"),qL=l("type"),TL=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),o1=n("code"),NL=l("__getitem__"),PL=l(`.
The format is set for every dataset in the dataset dictionary`),LL=d(),Td=n("p"),FL=l("It\u2019s also possible to use custom transforms for formatting using "),Eu=n("a"),AL=l("datasets.Dataset.with_transform()"),SL=l("."),OL=d(),un=n("p"),CL=l("Contrary to "),Iu=n("a"),zL=l("datasets.DatasetDict.set_format()"),VL=l(", "),l1=n("code"),UL=l("with_format"),ML=l(" returns a new DatasetDict object with new Dataset objects."),RL=d(),_(al.$$.fragment),BL=d(),Ee=n("div"),_(Nd.$$.fragment),HL=d(),gn=n("p"),GL=l("Set "),i1=n("code"),WL=l("__getitem__"),YL=l(" return format using this transform. The transform is applied on-the-fly on batches when "),p1=n("code"),JL=l("__getitem__"),KL=l(` is called.
The transform is set for every dataset in the dataset dictionary`),ZL=d(),_n=n("p"),XL=l("As "),qu=n("a"),QL=l("datasets.Dataset.set_format()"),eF=l(", this can be reset using "),Tu=n("a"),tF=l("datasets.Dataset.reset_format()"),aF=l("."),sF=d(),bn=n("p"),nF=l("Contrary to "),c1=n("code"),rF=l("datasets.DatasetDict.set_transform()"),oF=l(", "),d1=n("code"),lF=l("with_transform"),iF=l(" returns a new DatasetDict object with new Dataset objects."),pF=d(),_(sl.$$.fragment),cF=d(),Ya=n("div"),_(Pd.$$.fragment),dF=d(),m1=n("p"),mF=l(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),hF=d(),_(nl.$$.fragment),fF=d(),mt=n("div"),_(Ld.$$.fragment),uF=d(),h1=n("p"),gF=l(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),_F=d(),Ct=n("p"),bF=l("You can also remove a column using "),Nu=n("a"),$F=l("Dataset.map()"),xF=l(" with "),f1=n("em"),vF=l("feature"),yF=l(" but "),u1=n("code"),jF=l("cast_"),wF=l(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),DF=d(),_(rl.$$.fragment),kF=d(),Ja=n("div"),_(Fd.$$.fragment),EF=d(),g1=n("p"),IF=l("Cast column to feature for decoding."),qF=d(),_(ol.$$.fragment),TF=d(),Ie=n("div"),_(Ad.$$.fragment),NF=d(),_1=n("p"),PF=l(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),LF=d(),b1=n("p"),FF=l("The transformation is applied to all the splits of the dataset dictionary."),AF=d(),$n=n("p"),SF=l("You can also remove a column using "),Pu=n("a"),OF=l("Dataset.map()"),CF=l(" with "),$1=n("em"),zF=l("remove_columns"),VF=l(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),UF=d(),_(ll.$$.fragment),MF=d(),qe=n("div"),_(Sd.$$.fragment),RF=d(),x1=n("p"),BF=l(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),HF=d(),xn=n("p"),GF=l("You can also rename a column using "),Lu=n("a"),WF=l("Dataset.map()"),YF=l(" with "),v1=n("em"),JF=l("remove_columns"),KF=l(" but the present method:"),ZF=d(),Od=n("ul"),y1=n("li"),XF=l("takes care of moving the original features under the new column name."),QF=d(),j1=n("li"),eA=l("doesn\u2019t copy the data to a new dataset and is thus much faster."),tA=d(),_(il.$$.fragment),aA=d(),Ka=n("div"),_(Cd.$$.fragment),sA=d(),w1=n("p"),nA=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),rA=d(),_(pl.$$.fragment),oA=d(),Za=n("div"),_(zd.$$.fragment),lA=d(),Vd=n("p"),iA=l("Casts the given column as :obj:"),D1=n("code"),pA=l("datasets.features.ClassLabel"),cA=l(" and updates the tables."),dA=d(),_(cl.$$.fragment),mA=d(),Te=n("div"),_(Ud.$$.fragment),hA=d(),vn=n("p"),fA=l("Pushes the "),k1=n("code"),uA=l("DatasetDict"),gA=l(` to the hub as a Parquet dataset.
The `),E1=n("code"),_A=l("DatasetDict"),bA=l(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),$A=d(),I1=n("p"),xA=l("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),vA=d(),zt=n("p"),yA=l("The resulting Parquet files are self-contained by default: if your dataset contains "),Fu=n("a"),jA=l("Image"),wA=l(" or "),Au=n("a"),DA=l("Audio"),kA=l(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),q1=n("em"),EA=l("embed_external_files"),IA=l(" to False."),qA=d(),_(dl.$$.fragment),TA=d(),re=n("div"),_(Md.$$.fragment),NA=d(),yn=n("p"),PA=l("Saves a dataset dict to a filesystem using either "),Su=n("a"),LA=l("S3FileSystem"),FA=l(` or
`),T1=n("code"),AA=l("fsspec.spec.AbstractFileSystem"),SA=l("."),OA=d(),jn=n("p"),CA=l("For "),Ou=n("a"),zA=l("Image"),VA=l(" and "),Cu=n("a"),UA=l("Audio"),MA=l(" data:"),RA=d(),Rd=n("p"),BA=l(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),N1=n("em"),HA=l("read()"),GA=l(" those files first."),WA=d(),_(ml.$$.fragment),YA=d(),_(hl.$$.fragment),JA=d(),Xa=n("div"),_(Bd.$$.fragment),KA=d(),Vt=n("p"),ZA=l("Load a dataset that was previously saved using "),P1=n("code"),XA=l("save_to_disk"),QA=l(` from a filesystem using either
`),zu=n("a"),eS=l("S3FileSystem"),tS=l(" or "),L1=n("code"),aS=l("fsspec.spec.AbstractFileSystem"),sS=l("."),nS=d(),_(fl.$$.fragment),rS=d(),Qa=n("div"),_(Hd.$$.fragment),oS=d(),F1=n("p"),lS=l("Create DatasetDict from CSV file(s)."),iS=d(),_(ul.$$.fragment),pS=d(),es=n("div"),_(Gd.$$.fragment),cS=d(),A1=n("p"),dS=l("Create DatasetDict from JSON Lines file(s)."),mS=d(),_(gl.$$.fragment),hS=d(),ts=n("div"),_(Wd.$$.fragment),fS=d(),S1=n("p"),uS=l("Create DatasetDict from Parquet file(s)."),gS=d(),_(_l.$$.fragment),_S=d(),as=n("div"),_(Yd.$$.fragment),bS=d(),O1=n("p"),$S=l("Create DatasetDict from text file(s)."),xS=d(),_(bl.$$.fragment),vS=d(),ss=n("div"),_(Jd.$$.fragment),yS=d(),wn=n("p"),jS=l("Prepare a dataset for the given task by casting the dataset\u2019s "),Vu=n("a"),wS=l("Features"),DS=l(" to standardized column names and types as detailed in "),Uu=n("a"),kS=l("datasets.tasks"),ES=l("."),IS=d(),Dn=n("p"),qS=l("Casts "),C1=n("code"),TS=l("datasets.DatasetInfo.features"),NS=l(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),z1=n("code"),PS=l("datasets.DatasetInfo.task_templates"),LS=l(" after casting."),I0=d(),Mu=n("a"),q0=d(),kn=n("h2"),$l=n("a"),V1=n("span"),_(Kd.$$.fragment),FS=d(),U1=n("span"),AS=l("IterableDataset"),T0=d(),xl=n("p"),SS=l("The base class "),Ru=n("a"),OS=l("IterableDataset"),CS=l(" implements an iterable Dataset backed by python generators."),N0=d(),A=n("div"),_(Zd.$$.fragment),zS=d(),M1=n("p"),VS=l("A Dataset backed by an iterable."),US=d(),ns=n("div"),_(Xd.$$.fragment),MS=d(),R1=n("p"),RS=l(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),BS=d(),_(vl.$$.fragment),HS=d(),rs=n("div"),_(Qd.$$.fragment),GS=d(),B1=n("p"),WS=l("Cast column to feature for decoding."),YS=d(),_(yl.$$.fragment),JS=d(),os=n("div"),_(em.$$.fragment),KS=d(),H1=n("p"),ZS=l("Cast the dataset to a new set of features."),XS=d(),_(jl.$$.fragment),QS=d(),Bu=n("div"),_(tm.$$.fragment),eO=d(),Ne=n("div"),_(am.$$.fragment),tO=d(),G1=n("p"),aO=l(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),sO=d(),sm=n("p"),nO=l("You can specify whether the function should be batched or not with the "),W1=n("code"),rO=l("batched"),oO=l(" parameter:"),lO=d(),En=n("ul"),Y1=n("li"),iO=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),pO=d(),J1=n("li"),cO=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),dO=d(),fe=n("li"),mO=l("If batched is True and batch_size is "),K1=n("code"),hO=l("n"),fO=l(" > 1, then the function takes a batch of "),Z1=n("code"),uO=l("n"),gO=l(" examples as input and can return a batch with "),X1=n("code"),_O=l("n"),bO=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Q1=n("code"),$O=l("n"),xO=l(` examples.
A batch is a dictionary, e.g. a batch of `),ev=n("code"),vO=l("n"),yO=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),jO=d(),_(wl.$$.fragment),wO=d(),ls=n("div"),_(nm.$$.fragment),DO=d(),tv=n("p"),kO=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),EO=d(),_(Dl.$$.fragment),IO=d(),is=n("div"),_(rm.$$.fragment),qO=d(),av=n("p"),TO=l(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),NO=d(),_(kl.$$.fragment),PO=d(),oe=n("div"),_(om.$$.fragment),LO=d(),sv=n("p"),FO=l("Randomly shuffles the elements of this dataset."),AO=d(),nv=n("p"),SO=l(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),OO=d(),lm=n("p"),CO=l("For instance, if your dataset contains 10,000 elements but "),rv=n("code"),zO=l("buffer_size"),VO=l(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),UO=d(),In=n("p"),MO=l(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Hu=n("a"),RO=l("datasets.IterableDataset.skip()"),BO=l(" or "),Gu=n("a"),HO=l("datasets.IterableDataset.take()"),GO=l(`
then the order of the shards is kept unchanged.`),WO=d(),_(El.$$.fragment),YO=d(),ps=n("div"),_(im.$$.fragment),JO=d(),pm=n("p"),KO=l("Create a new IterableDataset that skips the first "),ov=n("code"),ZO=l("n"),XO=l(" elements."),QO=d(),_(Il.$$.fragment),eC=d(),cs=n("div"),_(cm.$$.fragment),tC=d(),dm=n("p"),aC=l("Create a new IterableDataset with only the first "),lv=n("code"),sC=l("n"),nC=l(" elements."),rC=d(),_(ql.$$.fragment),oC=d(),Tl=n("div"),_(mm.$$.fragment),lC=d(),Wu=n("p"),Yu=n("a"),iC=l("datasets.DatasetInfo"),pC=l(" object containing all the metadata in the dataset."),cC=d(),Nl=n("div"),_(hm.$$.fragment),dC=d(),Ju=n("p"),Ku=n("a"),mC=l("datasets.NamedSplit"),hC=l(" object corresponding to a named dataset split."),fC=d(),Zu=n("div"),_(fm.$$.fragment),uC=d(),Xu=n("div"),_(um.$$.fragment),gC=d(),Qu=n("div"),_(gm.$$.fragment),_C=d(),eg=n("div"),_(_m.$$.fragment),bC=d(),tg=n("div"),_(bm.$$.fragment),$C=d(),ag=n("div"),_($m.$$.fragment),xC=d(),sg=n("div"),_(xm.$$.fragment),vC=d(),ng=n("div"),_(vm.$$.fragment),yC=d(),rg=n("div"),_(ym.$$.fragment),jC=d(),og=n("div"),_(jm.$$.fragment),wC=d(),lg=n("div"),_(wm.$$.fragment),DC=d(),ig=n("div"),_(Dm.$$.fragment),kC=d(),pg=n("div"),_(km.$$.fragment),P0=d(),qn=n("h2"),Pl=n("a"),iv=n("span"),_(Em.$$.fragment),EC=d(),pv=n("span"),IC=l("IterableDatasetDict"),L0=d(),Ll=n("p"),qC=l("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),cv=n("code"),TC=l("IterableDataset"),NC=l(" objects as values."),F0=d(),U=n("div"),_(Im.$$.fragment),PC=d(),Pe=n("div"),_(qm.$$.fragment),LC=d(),dv=n("p"),FC=l(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),AC=d(),Tm=n("p"),SC=l("You can specify whether the function should be batched or not with the "),mv=n("code"),OC=l("batched"),CC=l(" parameter:"),zC=d(),Tn=n("ul"),hv=n("li"),VC=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),UC=d(),fv=n("li"),MC=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),RC=d(),ue=n("li"),BC=l("If batched is True and batch_size is "),uv=n("code"),HC=l("n"),GC=l(" > 1, then the function takes a batch of "),gv=n("code"),WC=l("n"),YC=l(" examples as input and can return a batch with "),_v=n("code"),JC=l("n"),KC=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),bv=n("code"),ZC=l("n"),XC=l(` examples.
A batch is a dictionary, e.g. a batch of `),$v=n("code"),QC=l("n"),ez=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),tz=d(),_(Fl.$$.fragment),az=d(),ds=n("div"),_(Nm.$$.fragment),sz=d(),xv=n("p"),nz=l(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),rz=d(),_(Al.$$.fragment),oz=d(),le=n("div"),_(Pm.$$.fragment),lz=d(),vv=n("p"),iz=l(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),pz=d(),yv=n("p"),cz=l(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),dz=d(),Lm=n("p"),mz=l("For instance, if your dataset contains 10,000 elements but "),jv=n("code"),hz=l("buffer_size"),fz=l(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),uz=d(),Nn=n("p"),gz=l(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),cg=n("a"),_z=l("datasets.IterableDataset.skip()"),bz=l(" or "),dg=n("a"),$z=l("datasets.IterableDataset.take()"),xz=l(`
then the order of the shards is kept unchanged.`),vz=d(),_(Sl.$$.fragment),yz=d(),ms=n("div"),_(Fm.$$.fragment),jz=d(),wv=n("p"),wz=l(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),Dz=d(),_(Ol.$$.fragment),kz=d(),hs=n("div"),_(Am.$$.fragment),Ez=d(),Dv=n("p"),Iz=l(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),qz=d(),_(Cl.$$.fragment),Tz=d(),fs=n("div"),_(Sm.$$.fragment),Nz=d(),kv=n("p"),Pz=l(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),Lz=d(),_(zl.$$.fragment),Fz=d(),us=n("div"),_(Om.$$.fragment),Az=d(),Ev=n("p"),Sz=l(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),Oz=d(),_(Vl.$$.fragment),Cz=d(),gs=n("div"),_(Cm.$$.fragment),zz=d(),Iv=n("p"),Vz=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),Uz=d(),_(Ul.$$.fragment),Mz=d(),_s=n("div"),_(zm.$$.fragment),Rz=d(),qv=n("p"),Bz=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),Hz=d(),_(Ml.$$.fragment),A0=d(),Pn=n("h2"),Rl=n("a"),Tv=n("span"),_(Vm.$$.fragment),Gz=d(),Nv=n("span"),Wz=l("Features"),S0=d(),O=n("div"),_(Um.$$.fragment),Yz=d(),Pv=n("p"),Jz=l("A special dictionary that defines the internal structure of a dataset."),Kz=d(),Mm=n("p"),Zz=l("Instantiated with a dictionary of type "),Lv=n("code"),Xz=l("dict[str, FieldType]"),Qz=l(`, where keys are the desired column names,
and values are the type of that column.`),eV=d(),mg=n("p"),Fv=n("code"),tV=l("FieldType"),aV=l(" can be one of the following:"),sV=d(),G=n("ul"),Av=n("li"),bs=n("p"),nV=l("a "),hg=n("a"),rV=l("datasets.Value"),oV=l(" feature specifies a single typed value, e.g. "),Sv=n("code"),lV=l("int64"),iV=l(" or "),Ov=n("code"),pV=l("string"),cV=d(),Cv=n("li"),Rm=n("p"),dV=l("a "),fg=n("a"),mV=l("datasets.ClassLabel"),hV=l(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),fV=d(),zv=n("li"),Bm=n("p"),uV=l("a python "),Vv=n("code"),gV=l("dict"),_V=l(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),bV=d(),Hm=n("li"),Re=n("p"),$V=l("a python "),Uv=n("code"),xV=l("list"),vV=l(" or a "),ug=n("a"),yV=l("datasets.Sequence"),jV=l(` specifies that the field contains a list of objects. The python
`),Mv=n("code"),wV=l("list"),DV=l(" or "),gg=n("a"),kV=l("datasets.Sequence"),EV=l(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),IV=d(),_(Bl.$$.fragment),qV=d(),Rv=n("li"),Be=n("p"),TV=l("a "),_g=n("a"),NV=l("Array2D"),PV=l(", "),bg=n("a"),LV=l("Array3D"),FV=l(", "),$g=n("a"),AV=l("Array4D"),SV=l(" or "),xg=n("a"),OV=l("Array5D"),CV=l(" feature for multidimensional arrays"),zV=d(),Bv=n("li"),Gm=n("p"),VV=l("an "),vg=n("a"),UV=l("Audio"),MV=l(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),RV=d(),Hv=n("li"),Ut=n("p"),BV=l("an "),yg=n("a"),HV=l("Image"),GV=l(" feature to store the absolute path to an image file, an "),Gv=n("code"),WV=l("np.ndarray"),YV=l(" object, a "),Wv=n("code"),JV=l("PIL.Image.Image"),KV=l(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),ZV=d(),Yv=n("li"),Hl=n("p"),jg=n("a"),XV=l("datasets.Translation"),QV=l(" and "),wg=n("a"),eU=l("datasets.TranslationVariableLanguages"),tU=l(", the two features specific to Machine Translation"),aU=d(),Gl=n("div"),_(Wm.$$.fragment),sU=d(),Jv=n("p"),nU=l("Make a deep copy of Features."),rU=d(),Wl=n("div"),_(Ym.$$.fragment),oU=d(),Kv=n("p"),lU=l("Decode batch with custom feature decoding."),iU=d(),Yl=n("div"),_(Jm.$$.fragment),pU=d(),Zv=n("p"),cU=l("Decode column with custom feature decoding."),dU=d(),Jl=n("div"),_(Km.$$.fragment),mU=d(),Xv=n("p"),hU=l("Decode example with custom feature decoding."),fU=d(),Kl=n("div"),_(Zm.$$.fragment),uU=d(),Qv=n("p"),gU=l("Encode batch into a format for Arrow."),_U=d(),Zl=n("div"),_(Xm.$$.fragment),bU=d(),ey=n("p"),$U=l("Encode example into a format for Arrow."),xU=d(),$s=n("div"),_(Qm.$$.fragment),vU=d(),ty=n("p"),yU=l(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),jU=d(),ay=n("p"),wU=l(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),DU=d(),Xl=n("div"),_(eh.$$.fragment),kU=d(),sy=n("p"),EU=l(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),IU=d(),Le=n("div"),_(th.$$.fragment),qU=d(),ny=n("p"),TU=l("Construct Features from dict."),NU=d(),ry=n("p"),PU=l(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),LU=d(),Mt=n("p"),FU=l(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Dg=n("a"),AU=l("DatasetInfo"),SU=l(` that was dumped to a JSON object. This acts as an analogue to
`),kg=n("a"),OU=l("Features.from_arrow_schema()"),CU=l(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Eg=n("a"),zU=l("Value"),VU=l(" automatically performs."),UU=d(),_(Ql.$$.fragment),MU=d(),ht=n("div"),_(ah.$$.fragment),RU=d(),oy=n("p"),BU=l("Reorder Features fields to match the field order of other Features."),HU=d(),ly=n("p"),GU=l(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),WU=d(),_(ei.$$.fragment),O0=d(),Ln=n("div"),_(sh.$$.fragment),YU=d(),iy=n("p"),JU=l(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),C0=d(),X=n("div"),_(nh.$$.fragment),KU=d(),py=n("p"),ZU=l("Feature type for integer class labels."),XU=d(),rh=n("p"),QU=l("There are 3 ways to define a "),cy=n("em"),eM=l("ClassLabel"),tM=l(", which correspond to the 3 arguments:"),aM=d(),Fn=n("ul"),Ig=n("li"),dy=n("em"),sM=l("num_classes"),nM=l(": Create 0 to (num_classes-1) labels."),rM=d(),qg=n("li"),my=n("em"),oM=l("names"),lM=l(": List of label strings."),iM=d(),Tg=n("li"),hy=n("em"),pM=l("names_file"),cM=l(": File containing the list of labels."),dM=d(),ti=n("div"),_(oh.$$.fragment),mM=d(),fy=n("p"),hM=l("Conversion integer => class name string."),fM=d(),ai=n("div"),_(lh.$$.fragment),uM=d(),uy=n("p"),gM=l("Conversion class name string => integer."),z0=d(),Rt=n("div"),_(ih.$$.fragment),_M=d(),gy=n("p"),bM=l("The Value dtypes are as follows:"),$M=d(),_y=n("p"),xM=l(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),V0=d(),Q=n("div"),_(ph.$$.fragment),vM=d(),Ng=n("p"),by=n("code"),yM=l("FeatureConnector"),jM=l(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),wM=d(),$y=n("p"),DM=l(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),kM=d(),ch=n("p"),EM=l("Output: A dictionary mapping string language codes to translations as "),xy=n("code"),IM=l("Text"),qM=l(`
features.`),TM=d(),_(si.$$.fragment),NM=d(),ni=n("div"),_(dh.$$.fragment),PM=d(),vy=n("p"),LM=l("Flatten the Translation feature into a dictionary."),U0=d(),ee=n("div"),_(mh.$$.fragment),FM=d(),Pg=n("p"),yy=n("code"),AM=l("FeatureConnector"),SM=l(` for translations with variable languages per example.
Here for compatiblity with tfds.`),OM=d(),jy=n("p"),CM=l(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),zM=d(),wy=n("p"),VM=l(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),UM=d(),_(ri.$$.fragment),MM=d(),oi=n("div"),_(hh.$$.fragment),RM=d(),Dy=n("p"),BM=l("Flatten the TranslationVariableLanguages feature into a dictionary."),M0=d(),fh=n("div"),_(uh.$$.fragment),R0=d(),gh=n("div"),_(_h.$$.fragment),B0=d(),bh=n("div"),_($h.$$.fragment),H0=d(),xh=n("div"),_(vh.$$.fragment),G0=d(),M=n("div"),_(yh.$$.fragment),HM=d(),ky=n("p"),GM=l("Audio Feature to extract audio data from an audio file."),WM=d(),Ey=n("p"),YM=l("Input: The Audio feature accepts as input:"),JM=d(),An=n("ul"),Iy=n("li"),jh=n("p"),KM=l("A "),qy=n("code"),ZM=l("str"),XM=l(": Absolute path to the audio file (i.e. random access is allowed)."),QM=d(),Sn=n("li"),wh=n("p"),eR=l("A "),Ty=n("code"),tR=l("dict"),aR=l(" with the keys:"),sR=d(),Dh=n("ul"),Ny=n("li"),nR=l("path: String with relative path of the audio file to the archive file."),rR=d(),Py=n("li"),oR=l("bytes: Bytes content of the audio file."),lR=d(),Ly=n("p"),iR=l("This is useful for archived files with sequential access."),pR=d(),On=n("li"),kh=n("p"),cR=l("A "),Fy=n("code"),dR=l("dict"),mR=l(" with the keys:"),hR=d(),Cn=n("ul"),Ay=n("li"),fR=l("path: String with relative path of the audio file to the archive file."),uR=d(),Sy=n("li"),gR=l("array: Array containing the audio sample"),_R=d(),Oy=n("li"),bR=l("sampling_rate: Integer corresponding to the samping rate of the audio sample."),$R=d(),Cy=n("p"),xR=l("This is useful for archived files with sequential access."),vR=d(),xs=n("div"),_(Eh.$$.fragment),yR=d(),zy=n("p"),jR=l(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),wR=d(),Bt=n("ul"),Vy=n("li"),DR=l("pa.string() - it must contain the \u201Cpath\u201D data"),kR=d(),Uy=n("li"),ER=l("pa.struct({\u201Cbytes\u201D: pa.binary()})"),IR=d(),My=n("li"),qR=l("pa.struct({\u201Cpath\u201D: pa.string()})"),TR=d(),Ry=n("li"),NR=l("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),PR=d(),li=n("div"),_(Ih.$$.fragment),LR=d(),By=n("p"),FR=l("Decode example audio file into audio data."),AR=d(),ii=n("div"),_(qh.$$.fragment),SR=d(),Hy=n("p"),OR=l("Embed audio files into the Arrow array."),CR=d(),pi=n("div"),_(Th.$$.fragment),zR=d(),Gy=n("p"),VR=l("Encode example into a format for Arrow."),UR=d(),ci=n("div"),_(Nh.$$.fragment),MR=d(),Wy=n("p"),RR=l("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),W0=d(),R=n("div"),_(Ph.$$.fragment),BR=d(),Yy=n("p"),HR=l("Image feature to read image data from an image file."),GR=d(),Jy=n("p"),WR=l("Input: The Image feature accepts as input:"),YR=d(),Ht=n("ul"),Ky=n("li"),Lh=n("p"),JR=l("A "),Zy=n("code"),KR=l("str"),ZR=l(": Absolute path to the image file (i.e. random access is allowed)."),XR=d(),zn=n("li"),Fh=n("p"),QR=l("A "),Xy=n("code"),eB=l("dict"),tB=l(" with the keys:"),aB=d(),Ah=n("ul"),Qy=n("li"),sB=l("path: String with relative path of the image file to the archive file."),nB=d(),ej=n("li"),rB=l("bytes: Bytes of the image file."),oB=d(),tj=n("p"),lB=l("This is useful for archived files with sequential access."),iB=d(),aj=n("li"),Sh=n("p"),pB=l("An "),sj=n("code"),cB=l("np.ndarray"),dB=l(": NumPy array representing an image."),mB=d(),nj=n("li"),Oh=n("p"),hB=l("A "),rj=n("code"),fB=l("PIL.Image.Image"),uB=l(": PIL image object."),gB=d(),vs=n("div"),_(Ch.$$.fragment),_B=d(),oj=n("p"),bB=l(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),$B=d(),He=n("ul"),lj=n("li"),xB=l("pa.string() - it must contain the \u201Cpath\u201D data"),vB=d(),ij=n("li"),yB=l("pa.struct({\u201Cbytes\u201D: pa.binary()})"),jB=d(),pj=n("li"),wB=l("pa.struct({\u201Cpath\u201D: pa.string()})"),DB=d(),cj=n("li"),kB=l("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),EB=d(),dj=n("li"),IB=l("pa.list(*) - it must contain the image array data"),qB=d(),di=n("div"),_(zh.$$.fragment),TB=d(),mj=n("p"),NB=l("Decode example image file into image data."),PB=d(),mi=n("div"),_(Vh.$$.fragment),LB=d(),hj=n("p"),FB=l("Embed image files into the Arrow array."),AB=d(),hi=n("div"),_(Uh.$$.fragment),SB=d(),fj=n("p"),OB=l("Encode example into a format for Arrow."),CB=d(),fi=n("div"),_(Mh.$$.fragment),zB=d(),uj=n("p"),VB=l("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),Y0=d(),Vn=n("h2"),ui=n("a"),gj=n("span"),_(Rh.$$.fragment),UB=d(),_j=n("span"),MB=l("MetricInfo"),J0=d(),te=n("div"),_(Bh.$$.fragment),RB=d(),bj=n("p"),BB=l("Information about a metric."),HB=d(),Lg=n("p"),$j=n("code"),GB=l("MetricInfo"),WB=l(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),YB=d(),xj=n("p"),JB=l("Note: Not all fields are known on construction and may be updated later."),KB=d(),gi=n("div"),_(Hh.$$.fragment),ZB=d(),Gh=n("p"),XB=l("Create MetricInfo from the JSON file in "),vj=n("code"),QB=l("metric_info_dir"),eH=l("."),tH=d(),_i=n("div"),_(Wh.$$.fragment),aH=d(),Gt=n("p"),sH=l("Write "),yj=n("code"),nH=l("MetricInfo"),rH=l(" as JSON to "),jj=n("code"),oH=l("metric_info_dir"),lH=l(`.
Also save the license separately in LICENCE.
If `),wj=n("code"),iH=l("pretty_print"),pH=l(" is True, the JSON will be pretty-printed with the indent level of 4."),K0=d(),Un=n("h2"),bi=n("a"),Dj=n("span"),_(Yh.$$.fragment),cH=d(),kj=n("span"),dH=l("Metric"),Z0=d(),ys=n("p"),mH=l("The base class "),Ej=n("code"),hH=l("Metric"),fH=l(" implements a Metric backed by one or several "),Fg=n("a"),uH=l("Dataset"),gH=l("."),X0=d(),ae=n("div"),_(Jh.$$.fragment),_H=d(),Ij=n("p"),bH=l("A Metric is the base class and common API for all metrics."),$H=d(),$i=n("div"),_(Kh.$$.fragment),xH=d(),qj=n("p"),vH=l("Add one prediction and reference for the metric\u2019s stack."),yH=d(),xi=n("div"),_(Zh.$$.fragment),jH=d(),Tj=n("p"),wH=l("Add a batch of predictions and references for the metric\u2019s stack."),DH=d(),js=n("div"),_(Xh.$$.fragment),kH=d(),Nj=n("p"),EH=l("Compute the metrics."),IH=d(),Pj=n("p"),qH=l("Usage of positional arguments is not allowed to prevent mistakes."),TH=d(),vi=n("div"),_(Qh.$$.fragment),NH=d(),Lj=n("p"),PH=l("Downloads and prepares dataset for reading."),Q0=d(),Mn=n("h2"),yi=n("a"),Fj=n("span"),_(ef.$$.fragment),LH=d(),Aj=n("span"),FH=l("Filesystems"),ew=d(),C=n("div"),_(tf.$$.fragment),AH=d(),ji=n("p"),Sj=n("code"),SH=l("datasets.filesystems.S3FileSystem"),OH=l(" is a subclass of "),af=n("a"),Oj=n("code"),CH=l("s3fs.S3FileSystem"),zH=l("."),VH=d(),Wt=n("p"),UH=l("Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),Cj=n("code"),MH=l("key="),RH=l(", "),zj=n("code"),BH=l("secret="),HH=l(") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),Vj=n("code"),GH=l("anon=True"),WH=l("."),YH=d(),Uj=n("p"),JH=l("Examples:"),KH=d(),Mj=n("p"),ZH=l("Listing files from public S3 bucket."),XH=d(),_(wi.$$.fragment),QH=d(),Rn=n("p"),eG=l("Listing files from private S3 bucket using "),Rj=n("code"),tG=l("aws_access_key_id"),aG=l(" and "),Bj=n("code"),sG=l("aws_secret_access_key"),nG=l("."),rG=d(),_(Di.$$.fragment),oG=d(),Yt=n("p"),lG=l("Using "),Hj=n("code"),iG=l("S3Filesystem"),pG=l(" with "),Gj=n("code"),cG=l("botocore.session.Session"),dG=l(" and custom "),Wj=n("code"),mG=l("aws_profile"),hG=l("."),fG=d(),_(ki.$$.fragment),uG=d(),Bn=n("p"),gG=l("Loading dataset from S3 using "),Yj=n("code"),_G=l("S3Filesystem"),bG=l(" and "),Ag=n("a"),$G=l("load_from_disk()"),xG=l("."),vG=d(),_(Ei.$$.fragment),yG=d(),Hn=n("p"),jG=l("Saving dataset to S3 using "),Jj=n("code"),wG=l("S3Filesystem"),DG=l(" and "),Sg=n("a"),kG=l("Dataset.save_to_disk()"),EG=l("."),IG=d(),_(Ii.$$.fragment),tw=d(),Gn=n("div"),_(sf.$$.fragment),qG=d(),Wn=n("p"),TG=l("preprocesses "),Kj=n("em"),NG=l("dataset_path"),PG=l(" and removes remote filesystem (e.g. removing "),Zj=n("code"),LG=l("s3://"),FG=l(")"),aw=d(),Yn=n("div"),_(nf.$$.fragment),AG=d(),Xj=n("p"),SG=l("Validates if filesystem has remote protocol."),sw=d(),Jn=n("h2"),qi=n("a"),Qj=n("span"),_(rf.$$.fragment),OG=d(),e7=n("span"),CG=l("Fingerprint"),nw=d(),Kn=n("div"),_(of.$$.fragment),zG=d(),t7=n("p"),VG=l("Hasher that accepts python objects as inputs."),this.h()},l(s){const w=Ote('[data-svelte="svelte-1phssyn"]',document.head);c=r(w,"META",{name:!0,content:!0}),w.forEach(a),g=m(s),f=r(s,"H1",{class:!0});var lf=o(f);p=r(lf,"A",{id:!0,class:!0,href:!0});var a7=o(p);u=r(a7,"SPAN",{});var s7=o(u);b(t.$$.fragment,s7),s7.forEach(a),a7.forEach(a),h=m(lf),Ys=r(lf,"SPAN",{});var n7=o(Ys);aa=i(n7,"Main classes"),n7.forEach(a),lf.forEach(a),gr=m(s),Ae=r(s,"H2",{class:!0});var pf=o(Ae);_e=r(pf,"A",{id:!0,class:!0,href:!0});var r7=o(_e);se=r(r7,"SPAN",{});var o7=o(se);b(sa.$$.fragment,o7),o7.forEach(a),r7.forEach(a),wf=m(pf),_r=r(pf,"SPAN",{});var l7=o(_r);J4=i(l7,"DatasetInfo"),l7.forEach(a),pf.forEach(a),g0=m(s),K=r(s,"DIV",{class:!0});var ge=o(K);b(op.$$.fragment,ge),K4=m(ge),qb=r(ge,"P",{});var i7=o(qb);Z4=i(i7,"Information about a dataset."),i7.forEach(a),X4=m(ge),Df=r(ge,"P",{});var Og=o(Df);Tb=r(Og,"EM",{});var p7=o(Tb);Q4=i(p7,"DatasetInfo"),p7.forEach(a),eD=i(Og,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Og.forEach(a),tD=m(ge),Nb=r(ge,"P",{});var c7=o(Nb);aD=i(c7,"Note: Not all fields are known on construction and may be updated later."),c7.forEach(a),sD=m(ge),be=r(ge,"DIV",{class:!0});var Ge=o(be);b(lp.$$.fragment,Ge),nD=m(Ge),ip=r(Ge,"P",{});var cf=o(ip);rD=i(cf,"Create DatasetInfo from the JSON file in "),Pb=r(cf,"CODE",{});var d7=o(Pb);oD=i(d7,"dataset_info_dir"),d7.forEach(a),lD=i(cf,"."),cf.forEach(a),iD=m(Ge),Lb=r(Ge,"P",{});var m7=o(Lb);pD=i(m7,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),m7.forEach(a),cD=m(Ge),Fb=r(Ge,"P",{});var h7=o(Fb);dD=i(h7,"This will overwrite all previous metadata."),h7.forEach(a),mD=m(Ge),b(br.$$.fragment,Ge),Ge.forEach(a),hD=m(ge),na=r(ge,"DIV",{class:!0});var Zn=o(na);b(pp.$$.fragment,Zn),fD=m(Zn),Js=r(Zn,"P",{});var Xn=o(Js);uD=i(Xn,"Write "),Ab=r(Xn,"EM",{});var f7=o(Ab);gD=i(f7,"DatasetInfo"),f7.forEach(a),_D=i(Xn," and license (if present) as JSON files to "),Sb=r(Xn,"EM",{});var u7=o(Sb);bD=i(u7,"dataset_info_dir"),u7.forEach(a),$D=i(Xn,"."),Xn.forEach(a),xD=m(Zn),b($r.$$.fragment,Zn),Zn.forEach(a),ge.forEach(a),_0=m(s),Ks=r(s,"H2",{class:!0});var df=o(Ks);xr=r(df,"A",{id:!0,class:!0,href:!0});var g7=o(xr);Ob=r(g7,"SPAN",{});var _7=o(Ob);b(cp.$$.fragment,_7),_7.forEach(a),g7.forEach(a),vD=m(df),Cb=r(df,"SPAN",{});var b7=o(Cb);yD=i(b7,"Dataset"),b7.forEach(a),df.forEach(a),b0=m(s),vr=r(s,"P",{});var mf=o(vr);jD=i(mf,"The base class "),kf=r(mf,"A",{href:!0});var $7=o(kf);wD=i($7,"Dataset"),$7.forEach(a),DD=i(mf," implements a Dataset backed by an Apache Arrow table."),mf.forEach(a),$0=m(s),I=r(s,"DIV",{class:!0});var q=o(I);b(dp.$$.fragment,q),kD=m(q),zb=r(q,"P",{});var x7=o(zb);ED=i(x7,"A Dataset backed by an Arrow table."),x7.forEach(a),ID=m(q),Ze=r(q,"DIV",{class:!0});var Jt=o(Ze);b(mp.$$.fragment,Jt),qD=m(Jt),Vb=r(Jt,"P",{});var v7=o(Vb);TD=i(v7,"Add column to Dataset."),v7.forEach(a),ND=m(Jt),Ub=r(Jt,"P",{});var y7=o(Ub);Mb=r(y7,"EM",{});var j7=o(Mb);PD=i(j7,"New in version 1.7."),j7.forEach(a),y7.forEach(a),LD=m(Jt),b(yr.$$.fragment,Jt),Jt.forEach(a),FD=m(q),Xe=r(q,"DIV",{class:!0});var Kt=o(Xe);b(hp.$$.fragment,Kt),AD=m(Kt),Rb=r(Kt,"P",{});var w7=o(Rb);SD=i(w7,"Add item to Dataset."),w7.forEach(a),OD=m(Kt),Bb=r(Kt,"P",{});var D7=o(Bb);Hb=r(D7,"EM",{});var k7=o(Hb);CD=i(k7,"New in version 1.7."),k7.forEach(a),D7.forEach(a),zD=m(Kt),b(jr.$$.fragment,Kt),Kt.forEach(a),VD=m(q),wr=r(q,"DIV",{class:!0});var hf=o(wr);b(fp.$$.fragment,hf),UD=m(hf),Gb=r(hf,"P",{});var E7=o(Gb);MD=i(E7,"Instantiate a Dataset backed by an Arrow table at filename."),E7.forEach(a),hf.forEach(a),RD=m(q),Dr=r(q,"DIV",{class:!0});var ff=o(Dr);b(up.$$.fragment,ff),BD=m(ff),Wb=r(ff,"P",{});var I7=o(Wb);HD=i(I7,"Instantiate a Dataset backed by an Arrow buffer."),I7.forEach(a),ff.forEach(a),GD=m(q),$e=r(q,"DIV",{class:!0});var We=o($e);b(gp.$$.fragment,We),WD=m(We),Et=r(We,"P",{});var Zt=o(Et);YD=i(Zt,"Convert "),Yb=r(Zt,"CODE",{});var q7=o(Yb);JD=i(q7,"pandas.DataFrame"),q7.forEach(a),KD=i(Zt," to a "),Jb=r(Zt,"CODE",{});var T7=o(Jb);ZD=i(T7,"pyarrow.Table"),T7.forEach(a),XD=i(Zt," to create a "),Ef=r(Zt,"A",{href:!0});var N7=o(Ef);QD=i(N7,"Dataset"),N7.forEach(a),e3=i(Zt,"."),Zt.forEach(a),t3=m(We),_p=r(We,"P",{});var uf=o(_p);a3=i(uf,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Kb=r(uf,"EM",{});var P7=o(Kb);s3=i(P7,"object"),P7.forEach(a),n3=i(uf,", we need to guess the datatype by looking at the Python objects in this Series."),uf.forEach(a),r3=m(We),bp=r(We,"P",{});var gf=o(bp);o3=i(gf,"Be aware that Series of the "),Zb=r(gf,"EM",{});var L7=o(Zb);l3=i(L7,"object"),L7.forEach(a),i3=i(gf,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),gf.forEach(a),p3=m(We),b(kr.$$.fragment,We),We.forEach(a),c3=m(q),Er=r(q,"DIV",{class:!0});var _f=o(Er);b($p.$$.fragment,_f),d3=m(_f),It=r(_f,"P",{});var Xt=o(It);m3=i(Xt,"Convert "),Xb=r(Xt,"CODE",{});var F7=o(Xb);h3=i(F7,"dict"),F7.forEach(a),f3=i(Xt," to a "),Qb=r(Xt,"CODE",{});var A7=o(Qb);u3=i(A7,"pyarrow.Table"),A7.forEach(a),g3=i(Xt," to create a "),If=r(Xt,"A",{href:!0});var S7=o(If);_3=i(S7,"Dataset"),S7.forEach(a),b3=i(Xt,"."),Xt.forEach(a),_f.forEach(a),$3=m(q),ra=r(q,"DIV",{class:!0});var Qn=o(ra);b(xp.$$.fragment,Qn),x3=m(Qn),e$=r(Qn,"P",{});var O7=o(e$);v3=i(O7,"The Apache Arrow table backing the dataset."),O7.forEach(a),y3=m(Qn),b(Ir.$$.fragment,Qn),Qn.forEach(a),j3=m(q),oa=r(q,"DIV",{class:!0});var er=o(oa);b(vp.$$.fragment,er),w3=m(er),t$=r(er,"P",{});var C7=o(t$);D3=i(C7,"The cache files containing the Apache Arrow table backing the dataset."),C7.forEach(a),k3=m(er),b(qr.$$.fragment,er),er.forEach(a),E3=m(q),la=r(q,"DIV",{class:!0});var tr=o(la);b(yp.$$.fragment,tr),I3=m(tr),a$=r(tr,"P",{});var z7=o(a$);q3=i(z7,"Number of columns in the dataset."),z7.forEach(a),T3=m(tr),b(Tr.$$.fragment,tr),tr.forEach(a),N3=m(q),ia=r(q,"DIV",{class:!0});var ar=o(ia);b(jp.$$.fragment,ar),P3=m(ar),wp=r(ar,"P",{});var bf=o(wp);L3=i(bf,"Number of rows in the dataset (same as "),Nr=r(bf,"A",{href:!0});var $f=o(Nr);F3=i($f,"Dataset."),s$=r($f,"STRONG",{});var V7=o(s$);A3=i(V7,"len"),V7.forEach(a),S3=i($f,"()"),$f.forEach(a),O3=i(bf,")."),bf.forEach(a),C3=m(ar),b(Pr.$$.fragment,ar),ar.forEach(a),z3=m(q),pa=r(q,"DIV",{class:!0});var sr=o(pa);b(Dp.$$.fragment,sr),V3=m(sr),n$=r(sr,"P",{});var U7=o(n$);U3=i(U7,"Names of the columns in the dataset."),U7.forEach(a),M3=m(sr),b(Lr.$$.fragment,sr),sr.forEach(a),R3=m(q),ca=r(q,"DIV",{class:!0});var nr=o(ca);b(kp.$$.fragment,nr),B3=m(nr),r$=r(nr,"P",{});var M7=o(r$);H3=i(M7,"Shape of the dataset (number of columns, number of rows)."),M7.forEach(a),G3=m(nr),b(Fr.$$.fragment,nr),nr.forEach(a),W3=m(q),Qe=r(q,"DIV",{class:!0});var Qt=o(Qe);b(Ep.$$.fragment,Qt),Y3=m(Qt),o$=r(Qt,"P",{});var R7=o(o$);J3=i(R7,"Return a list of the unique elements in a column."),R7.forEach(a),K3=m(Qt),l$=r(Qt,"P",{});var B7=o(l$);Z3=i(B7,"This is implemented in the low-level backend and as such, very fast."),B7.forEach(a),X3=m(Qt),b(Ar.$$.fragment,Qt),Qt.forEach(a),Q3=m(q),da=r(q,"DIV",{class:!0});var rr=o(da);b(Ip.$$.fragment,rr),ek=m(rr),i$=r(rr,"P",{});var H7=o(i$);tk=i(H7,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),H7.forEach(a),ak=m(rr),b(Sr.$$.fragment,rr),rr.forEach(a),sk=m(q),ma=r(q,"DIV",{class:!0});var or=o(ma);b(qp.$$.fragment,or),nk=m(or),p$=r(or,"P",{});var G7=o(p$);rk=i(G7,"Cast the dataset to a new set of features."),G7.forEach(a),ok=m(or),b(Or.$$.fragment,or),or.forEach(a),lk=m(q),ha=r(q,"DIV",{class:!0});var lr=o(ha);b(Tp.$$.fragment,lr),ik=m(lr),c$=r(lr,"P",{});var W7=o(c$);pk=i(W7,"Cast column to feature for decoding."),W7.forEach(a),ck=m(lr),b(Cr.$$.fragment,lr),lr.forEach(a),dk=m(q),et=r(q,"DIV",{class:!0});var ea=o(et);b(Np.$$.fragment,ea),mk=m(ea),d$=r(ea,"P",{});var Y7=o(d$);hk=i(Y7,"Remove one or several column(s) in the dataset and the features associated to them."),Y7.forEach(a),fk=m(ea),Zs=r(ea,"P",{});var ir=o(Zs);uk=i(ir,"You can also remove a column using "),qf=r(ir,"A",{href:!0});var J7=o(qf);gk=i(J7,"Dataset.map()"),J7.forEach(a),_k=i(ir," with "),m$=r(ir,"EM",{});var K7=o(m$);bk=i(K7,"remove_columns"),K7.forEach(a),$k=i(ir,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),ir.forEach(a),xk=m(ea),b(zr.$$.fragment,ea),ea.forEach(a),vk=m(q),fa=r(q,"DIV",{class:!0});var pr=o(fa);b(Pp.$$.fragment,pr),yk=m(pr),h$=r(pr,"P",{});var Z7=o(h$);jk=i(Z7,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),Z7.forEach(a),wk=m(pr),b(Vr.$$.fragment,pr),pr.forEach(a),Dk=m(q),ua=r(q,"DIV",{class:!0});var cr=o(ua);b(Lp.$$.fragment,cr),kk=m(cr),f$=r(cr,"P",{});var X7=o(f$);Ek=i(X7,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),X7.forEach(a),Ik=m(cr),b(Ur.$$.fragment,cr),cr.forEach(a),qk=m(q),ga=r(q,"DIV",{class:!0});var dr=o(ga);b(Fp.$$.fragment,dr),Tk=m(dr),Ap=r(dr,"P",{});var xf=o(Ap);Nk=i(xf,"Casts the given column as :obj:"),u$=r(xf,"CODE",{});var Q7=o(u$);Pk=i(Q7,"datasets.features.ClassLabel"),Q7.forEach(a),Lk=i(xf," and updates the table."),xf.forEach(a),Fk=m(dr),b(Mr.$$.fragment,dr),dr.forEach(a),Ak=m(q),_a=r(q,"DIV",{class:!0});var mr=o(_a);b(Sp.$$.fragment,mr),Sk=m(mr),g$=r(mr,"P",{});var e0=o(g$);Ok=i(e0,"Number of rows in the dataset."),e0.forEach(a),Ck=m(mr),b(Rr.$$.fragment,mr),mr.forEach(a),zk=m(q),ba=r(q,"DIV",{class:!0});var hr=o(ba);b(Op.$$.fragment,hr),Vk=m(hr),_$=r(hr,"P",{});var t0=o(_$);Uk=i(t0,"Iterate through the examples."),t0.forEach(a),Mk=m(hr),Cp=r(hr,"P",{});var vf=o(Cp);Rk=i(vf,"If a formatting is set with "),Tf=r(vf,"A",{href:!0});var a0=o(Tf);Bk=i(a0,"Dataset.set_format()"),a0.forEach(a),Hk=i(vf,` rows will be returned with the
selected format.`),vf.forEach(a),hr.forEach(a),Gk=m(q),Br=r(q,"DIV",{class:!0});var yf=o(Br);b(zp.$$.fragment,yf),Wk=m(yf),Xs=r(yf,"P",{});var fr=o(Xs);Yk=i(fr,"To be used in a "),b$=r(fr,"CODE",{});var s0=o(b$);Jk=i(s0,"with"),s0.forEach(a),Kk=i(fr," statement. Set "),$$=r(fr,"CODE",{});var n0=o($$);Zk=i(n0,"__getitem__"),n0.forEach(a),Xk=i(fr," return format (type and columns)."),fr.forEach(a),yf.forEach(a),Qk=m(q),xe=r(q,"DIV",{class:!0});var Ye=o(xe);b(Vp.$$.fragment,Ye),e8=m(Ye),Se=r(Ye,"P",{});var Je=o(Se);t8=i(Je,"Set "),x$=r(Je,"STRONG",{});var r0=o(x$);a8=i(r0,"getitem"),r0.forEach(a),s8=i(Je,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),v$=r(Je,"CODE",{});var o0=o(v$);n8=i(o0,"type"),o0.forEach(a),r8=i(Je," (for example \u201Cnumpy\u201D) is used to format batches when using "),y$=r(Je,"STRONG",{});var l0=o(y$);o8=i(l0,"getitem"),l0.forEach(a),l8=i(Je,`.
It\u2019s also possible to use custom transforms for formatting using `),Nf=r(Je,"A",{href:!0});var i0=o(Nf);i8=i(i0,"datasets.Dataset.set_transform()"),i0.forEach(a),p8=i(Je,"."),Je.forEach(a),c8=m(Ye),Oe=r(Ye,"P",{});var Ke=o(Oe);d8=i(Ke,"It is possible to call "),j$=r(Ke,"CODE",{});var p0=o(j$);m8=i(p0,"map"),p0.forEach(a),h8=i(Ke," after calling "),w$=r(Ke,"CODE",{});var c0=o(w$);f8=i(c0,"set_format"),c0.forEach(a),u8=i(Ke,". Since "),D$=r(Ke,"CODE",{});var d0=o(D$);g8=i(d0,"map"),d0.forEach(a),_8=i(Ke,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),k$=r(Ke,"CODE",{});var m0=o(k$);b8=i(m0,"map"),m0.forEach(a),$8=i(Ke," on a dataset to add a new column, then this column will be formatted:"),Ke.forEach(a),x8=m(Ye),E$=r(Ye,"P",{});var h0=o(E$);v8=i(h0,"new formatted columns = (all columns - previously unformatted columns)"),h0.forEach(a),y8=m(Ye),b(Hr.$$.fragment,Ye),Ye.forEach(a),j8=m(q),$a=r(q,"DIV",{class:!0});var Cg=o($a);b(Up.$$.fragment,Cg),w8=m(Cg),tt=r(Cg,"P",{});var ur=o(tt);D8=i(ur,"Set "),I$=r(ur,"STRONG",{});var aW=o(I$);k8=i(aW,"getitem"),aW.forEach(a),E8=i(ur," return format using this transform. The transform is applied on-the-fly on batches when "),q$=r(ur,"STRONG",{});var sW=o(q$);I8=i(sW,"getitem"),sW.forEach(a),q8=i(ur,` is called.
As `),Pf=r(ur,"A",{href:!0});var nW=o(Pf);T8=i(nW,"datasets.Dataset.set_format()"),nW.forEach(a),N8=i(ur,", this can be reset using "),Lf=r(ur,"A",{href:!0});var rW=o(Lf);P8=i(rW,"datasets.Dataset.reset_format()"),rW.forEach(a),ur.forEach(a),L8=m(Cg),b(Gr.$$.fragment,Cg),Cg.forEach(a),F8=m(q),at=r(q,"DIV",{class:!0});var Ti=o(at);b(Mp.$$.fragment,Ti),A8=m(Ti),Rp=r(Ti,"P",{});var ow=o(Rp);S8=i(ow,"Reset "),T$=r(ow,"STRONG",{});var oW=o(T$);O8=i(oW,"getitem"),oW.forEach(a),C8=i(ow," return format to python objects and all columns."),ow.forEach(a),z8=m(Ti),Ff=r(Ti,"P",{});var UG=o(Ff);V8=i(UG,"Same as "),N$=r(UG,"CODE",{});var lW=o(N$);U8=i(lW,"self.set_format()"),lW.forEach(a),UG.forEach(a),M8=m(Ti),b(Wr.$$.fragment,Ti),Ti.forEach(a),R8=m(q),ve=r(q,"DIV",{class:!0});var ws=o(ve);b(Bp.$$.fragment,ws),B8=m(ws),qt=r(ws,"P",{});var Ni=o(qt);H8=i(Ni,"Set "),P$=r(Ni,"STRONG",{});var iW=o(P$);G8=i(iW,"getitem"),iW.forEach(a),W8=i(Ni,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),L$=r(Ni,"CODE",{});var pW=o(L$);Y8=i(pW,"type"),pW.forEach(a),J8=i(Ni," (for example \u201Cnumpy\u201D) is used to format batches when using "),F$=r(Ni,"STRONG",{});var cW=o(F$);K8=i(cW,"getitem"),cW.forEach(a),Z8=i(Ni,"."),Ni.forEach(a),X8=m(ws),Hp=r(ws,"P",{});var lw=o(Hp);Q8=i(lw,"It\u2019s also possible to use custom transforms for formatting using "),Af=r(lw,"A",{href:!0});var dW=o(Af);eE=i(dW,"datasets.Dataset.with_transform()"),dW.forEach(a),tE=i(lw,"."),lw.forEach(a),aE=m(ws),Qs=r(ws,"P",{});var zg=o(Qs);sE=i(zg,"Contrary to "),Sf=r(zg,"A",{href:!0});var mW=o(Sf);nE=i(mW,"datasets.Dataset.set_format()"),mW.forEach(a),rE=i(zg,", "),A$=r(zg,"CODE",{});var hW=o(A$);oE=i(hW,"with_format"),hW.forEach(a),lE=i(zg," returns a new Dataset object."),zg.forEach(a),iE=m(ws),b(Yr.$$.fragment,ws),ws.forEach(a),pE=m(q),ye=r(q,"DIV",{class:!0});var Ds=o(ye);b(Gp.$$.fragment,Ds),cE=m(Ds),en=r(Ds,"P",{});var Vg=o(en);dE=i(Vg,"Set "),S$=r(Vg,"STRONG",{});var fW=o(S$);mE=i(fW,"getitem"),fW.forEach(a),hE=i(Vg," return format using this transform. The transform is applied on-the-fly on batches when "),O$=r(Vg,"STRONG",{});var uW=o(O$);fE=i(uW,"getitem"),uW.forEach(a),uE=i(Vg," is called."),Vg.forEach(a),gE=m(Ds),tn=r(Ds,"P",{});var Ug=o(tn);_E=i(Ug,"As "),Of=r(Ug,"A",{href:!0});var gW=o(Of);bE=i(gW,"datasets.Dataset.set_format()"),gW.forEach(a),$E=i(Ug,", this can be reset using "),Cf=r(Ug,"A",{href:!0});var _W=o(Cf);xE=i(_W,"datasets.Dataset.reset_format()"),_W.forEach(a),vE=i(Ug,"."),Ug.forEach(a),yE=m(Ds),an=r(Ds,"P",{});var Mg=o(an);jE=i(Mg,"Contrary to "),zf=r(Mg,"A",{href:!0});var bW=o(zf);wE=i(bW,"datasets.Dataset.set_transform()"),bW.forEach(a),DE=i(Mg,", "),C$=r(Mg,"CODE",{});var $W=o(C$);kE=i($W,"with_transform"),$W.forEach(a),EE=i(Mg," returns a new Dataset object."),Mg.forEach(a),IE=m(Ds),b(Jr.$$.fragment,Ds),Ds.forEach(a),qE=m(q),Kr=r(q,"DIV",{class:!0});var iw=o(Kr);b(Wp.$$.fragment,iw),TE=m(iw),z$=r(iw,"P",{});var xW=o(z$);NE=i(xW,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),xW.forEach(a),iw.forEach(a),PE=m(q),st=r(q,"DIV",{class:!0});var Pi=o(st);b(Yp.$$.fragment,Pi),LE=m(Pi),V$=r(Pi,"P",{});var vW=o(V$);FE=i(vW,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),vW.forEach(a),AE=m(Pi),U$=r(Pi,"P",{});var yW=o(U$);SE=i(yW,"Be careful when running this command that no other process is currently using other cache files."),yW.forEach(a),OE=m(Pi),b(Zr.$$.fragment,Pi),Pi.forEach(a),CE=m(q),je=r(q,"DIV",{class:!0});var ks=o(je);b(Jp.$$.fragment,ks),zE=m(ks),M$=r(ks,"P",{});var jW=o(M$);VE=i(jW,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),jW.forEach(a),UE=m(ks),Kp=r(ks,"P",{});var pw=o(Kp);ME=i(pw,"You can specify whether the function should be batched or not with the "),R$=r(pw,"CODE",{});var wW=o(R$);RE=i(wW,"batched"),wW.forEach(a),BE=i(pw," parameter:"),pw.forEach(a),HE=m(ks),sn=r(ks,"UL",{});var Rg=o(sn);B$=r(Rg,"LI",{});var DW=o(B$);GE=i(DW,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),DW.forEach(a),WE=m(Rg),H$=r(Rg,"LI",{});var kW=o(H$);YE=i(kW,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),kW.forEach(a),JE=m(Rg),ce=r(Rg,"LI",{});var ft=o(ce);KE=i(ft,"If batched is True and batch_size is "),G$=r(ft,"CODE",{});var EW=o(G$);ZE=i(EW,"n"),EW.forEach(a),XE=i(ft," > 1, then the function takes a batch of "),W$=r(ft,"CODE",{});var IW=o(W$);QE=i(IW,"n"),IW.forEach(a),e6=i(ft," examples as input and can return a batch with "),Y$=r(ft,"CODE",{});var qW=o(Y$);t6=i(qW,"n"),qW.forEach(a),a6=i(ft,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),J$=r(ft,"CODE",{});var TW=o(J$);s6=i(TW,"n"),TW.forEach(a),n6=i(ft,` examples.
A batch is a dictionary, e.g. a batch of `),K$=r(ft,"CODE",{});var NW=o(K$);r6=i(NW,"n"),NW.forEach(a),o6=i(ft," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),ft.forEach(a),Rg.forEach(a),l6=m(ks),b(Xr.$$.fragment,ks),ks.forEach(a),i6=m(q),xa=r(q,"DIV",{class:!0});var Bg=o(xa);b(Zp.$$.fragment,Bg),p6=m(Bg),Z$=r(Bg,"P",{});var PW=o(Z$);c6=i(PW,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),PW.forEach(a),d6=m(Bg),b(Qr.$$.fragment,Bg),Bg.forEach(a),m6=m(q),va=r(q,"DIV",{class:!0});var Hg=o(va);b(Xp.$$.fragment,Hg),h6=m(Hg),X$=r(Hg,"P",{});var LW=o(X$);f6=i(LW,"Create a new dataset with rows selected following the list/array of indices."),LW.forEach(a),u6=m(Hg),b(eo.$$.fragment,Hg),Hg.forEach(a),g6=m(q),nt=r(q,"DIV",{class:!0});var Li=o(nt);b(Qp.$$.fragment,Li),_6=m(Li),Q$=r(Li,"P",{});var FW=o(Q$);b6=i(FW,"Create a new dataset sorted according to a column."),FW.forEach(a),$6=m(Li),e2=r(Li,"P",{});var AW=o(e2);x6=i(AW,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),AW.forEach(a),v6=m(Li),b(to.$$.fragment,Li),Li.forEach(a),y6=m(q),rt=r(q,"DIV",{class:!0});var Fi=o(rt);b(ec.$$.fragment,Fi),j6=m(Fi),t2=r(Fi,"P",{});var SW=o(t2);w6=i(SW,"Create a new Dataset where the rows are shuffled."),SW.forEach(a),D6=m(Fi),a2=r(Fi,"P",{});var OW=o(a2);k6=i(OW,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),OW.forEach(a),E6=m(Fi),b(ao.$$.fragment,Fi),Fi.forEach(a),I6=m(q),ot=r(q,"DIV",{class:!0});var Ai=o(ot);b(tc.$$.fragment,Ai),q6=m(Ai),H=r(Ai,"P",{});var ie=o(H);T6=i(ie,"Return a dictionary ("),s2=r(ie,"CODE",{});var CW=o(s2);N6=i(CW,"datasets.DatasetDict"),CW.forEach(a),P6=i(ie,") with two random train and test subsets ("),n2=r(ie,"EM",{});var zW=o(n2);L6=i(zW,"train"),zW.forEach(a),F6=i(ie," and "),r2=r(ie,"EM",{});var VW=o(r2);A6=i(VW,"test"),VW.forEach(a),S6=m(ie),o2=r(ie,"CODE",{});var UW=o(o2);O6=i(UW,"Dataset"),UW.forEach(a),C6=i(ie,` splits).
Splits are created from the dataset according to `),l2=r(ie,"EM",{});var MW=o(l2);z6=i(MW,"test_size"),MW.forEach(a),V6=i(ie,", "),i2=r(ie,"EM",{});var RW=o(i2);U6=i(RW,"train_size"),RW.forEach(a),M6=i(ie," and "),p2=r(ie,"EM",{});var BW=o(p2);R6=i(BW,"shuffle"),BW.forEach(a),B6=i(ie,"."),ie.forEach(a),H6=m(Ai),ac=r(Ai,"P",{});var cw=o(ac);G6=i(cw,"This method is similar to scikit-learn "),c2=r(cw,"EM",{});var HW=o(c2);W6=i(HW,"train_test_split"),HW.forEach(a),Y6=i(cw," with the omission of the stratified options."),cw.forEach(a),J6=m(Ai),b(so.$$.fragment,Ai),Ai.forEach(a),K6=m(q),ne=r(q,"DIV",{class:!0});var ut=o(ne);b(sc.$$.fragment,ut),Z6=m(ut),nn=r(ut,"P",{});var Gg=o(nn);X6=i(Gg,"Return the "),d2=r(Gg,"EM",{});var GW=o(d2);Q6=i(GW,"index"),GW.forEach(a),e5=i(Gg,"-nth shard from dataset split into "),m2=r(Gg,"EM",{});var WW=o(m2);t5=i(WW,"num_shards"),WW.forEach(a),a5=i(Gg," pieces."),Gg.forEach(a),s5=m(ut),h2=r(ut,"P",{});var YW=o(h2);n5=i(YW,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),YW.forEach(a),r5=m(ut),nc=r(ut,"P",{});var dw=o(nc);o5=i(dw,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),f2=r(dw,"EM",{});var JW=o(f2);l5=i(JW,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),JW.forEach(a),i5=i(dw,` will return
a dataset with the same order as the original.`),dw.forEach(a),p5=m(ut),u2=r(ut,"P",{});var KW=o(u2);c5=i(KW,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),KW.forEach(a),d5=m(ut),b(no.$$.fragment,ut),ut.forEach(a),m5=m(q),ya=r(q,"DIV",{class:!0});var Wg=o(ya);b(rc.$$.fragment,Wg),h5=m(Wg),g2=r(Wg,"P",{});var ZW=o(g2);f5=i(ZW,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),ZW.forEach(a),u5=m(Wg),b(ro.$$.fragment,Wg),Wg.forEach(a),g5=m(q),lt=r(q,"DIV",{class:!0});var Si=o(lt);b(oc.$$.fragment,Si),_5=m(Si),_2=r(Si,"P",{});var XW=o(_2);b5=i(XW,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),XW.forEach(a),$5=m(Si),Tt=r(Si,"P",{});var Oi=o(Tt);x5=i(Oi,"The resulting Parquet files are self-contained by default: if your dataset contains "),Vf=r(Oi,"A",{href:!0});var QW=o(Vf);v5=i(QW,"Image"),QW.forEach(a),y5=i(Oi," or "),Uf=r(Oi,"A",{href:!0});var eY=o(Uf);j5=i(eY,"Audio"),eY.forEach(a),w5=i(Oi,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),b2=r(Oi,"EM",{});var tY=o(b2);D5=i(tY,"embed_external_files"),tY.forEach(a),k5=i(Oi," to False."),Oi.forEach(a),E5=m(Si),b(oo.$$.fragment,Si),Si.forEach(a),I5=m(q),W=r(q,"DIV",{class:!0});var Fe=o(W);b(lc.$$.fragment,Fe),q5=m(Fe),rn=r(Fe,"P",{});var Yg=o(rn);T5=i(Yg,"Saves a dataset to a dataset directory, or in a filesystem using either "),Mf=r(Yg,"A",{href:!0});var aY=o(Mf);N5=i(aY,"S3FileSystem"),aY.forEach(a),P5=i(Yg,` or
any implementation of `),$2=r(Yg,"CODE",{});var sY=o($2);L5=i(sY,"fsspec.spec.AbstractFileSystem"),sY.forEach(a),F5=i(Yg,"."),Yg.forEach(a),A5=m(Fe),on=r(Fe,"P",{});var Jg=o(on);S5=i(Jg,"For "),Rf=r(Jg,"A",{href:!0});var nY=o(Rf);O5=i(nY,"Image"),nY.forEach(a),C5=i(Jg," and "),Bf=r(Jg,"A",{href:!0});var rY=o(Bf);z5=i(rY,"Audio"),rY.forEach(a),V5=i(Jg," data:"),Jg.forEach(a),U5=m(Fe),ic=r(Fe,"P",{});var mw=o(ic);M5=i(mw,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),x2=r(mw,"EM",{});var oY=o(x2);R5=i(oY,"read()"),oY.forEach(a),B5=i(mw," those files first."),mw.forEach(a),H5=m(Fe),b(lo.$$.fragment,Fe),G5=m(Fe),b(io.$$.fragment,Fe),W5=m(Fe),b(po.$$.fragment,Fe),Fe.forEach(a),Y5=m(q),ja=r(q,"DIV",{class:!0});var Kg=o(ja);b(pc.$$.fragment,Kg),J5=m(Kg),Nt=r(Kg,"P",{});var Ci=o(Nt);K5=i(Ci,"Loads a dataset that was previously saved using "),v2=r(Ci,"CODE",{});var lY=o(v2);Z5=i(lY,"save_to_disk"),lY.forEach(a),X5=i(Ci,` from a dataset directory, or from a
filesystem using either `),Hf=r(Ci,"A",{href:!0});var iY=o(Hf);Q5=i(iY,"S3FileSystem"),iY.forEach(a),eI=i(Ci,` or any implementation of
`),y2=r(Ci,"CODE",{});var pY=o(y2);tI=i(pY,"fsspec.spec.AbstractFileSystem"),pY.forEach(a),aI=i(Ci,"."),Ci.forEach(a),sI=m(Kg),b(co.$$.fragment,Kg),Kg.forEach(a),nI=m(q),mo=r(q,"DIV",{class:!0});var hw=o(mo);b(cc.$$.fragment,hw),rI=m(hw),j2=r(hw,"P",{});var cY=o(j2);oI=i(cY,"Create and cache a new Dataset by flattening the indices mapping."),cY.forEach(a),hw.forEach(a),lI=m(q),wa=r(q,"DIV",{class:!0});var Zg=o(wa);b(dc.$$.fragment,Zg),iI=m(Zg),w2=r(Zg,"P",{});var dY=o(w2);pI=i(dY,"Exports the dataset to csv"),dY.forEach(a),cI=m(Zg),b(ho.$$.fragment,Zg),Zg.forEach(a),dI=m(q),Da=r(q,"DIV",{class:!0});var Xg=o(Da);b(mc.$$.fragment,Xg),mI=m(Xg),hc=r(Xg,"P",{});var fw=o(hc);hI=i(fw,"Returns the dataset as a "),D2=r(fw,"CODE",{});var mY=o(D2);fI=i(mY,"pandas.DataFrame"),mY.forEach(a),uI=i(fw,". Can also return a generator for large datasets."),fw.forEach(a),gI=m(Xg),b(fo.$$.fragment,Xg),Xg.forEach(a),_I=m(q),ka=r(q,"DIV",{class:!0});var Qg=o(ka);b(fc.$$.fragment,Qg),bI=m(Qg),k2=r(Qg,"P",{});var hY=o(k2);$I=i(hY,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),hY.forEach(a),xI=m(Qg),b(uo.$$.fragment,Qg),Qg.forEach(a),vI=m(q),Ea=r(q,"DIV",{class:!0});var e_=o(Ea);b(uc.$$.fragment,e_),yI=m(e_),E2=r(e_,"P",{});var fY=o(E2);jI=i(fY,"Export the dataset to JSON Lines or JSON."),fY.forEach(a),wI=m(e_),b(go.$$.fragment,e_),e_.forEach(a),DI=m(q),Ia=r(q,"DIV",{class:!0});var t_=o(Ia);b(gc.$$.fragment,t_),kI=m(t_),I2=r(t_,"P",{});var uY=o(I2);EI=i(uY,"Exports the dataset to parquet"),uY.forEach(a),II=m(t_),b(_o.$$.fragment,t_),t_.forEach(a),qI=m(q),it=r(q,"DIV",{class:!0});var zi=o(it);b(_c.$$.fragment,zi),TI=m(zi),ln=r(zi,"P",{});var a_=o(ln);NI=i(a_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),q2=r(a_,"CODE",{});var gY=o(q2);PI=i(gY,"device"),gY.forEach(a),LI=i(a_," if you want to run it on GPU ("),T2=r(a_,"CODE",{});var _Y=o(T2);FI=i(_Y,"device"),_Y.forEach(a),AI=i(a_,` must be the GPU index).
You can find more information about Faiss here:`),a_.forEach(a),SI=m(zi),N2=r(zi,"UL",{});var bY=o(N2);Gf=r(bY,"LI",{});var MG=o(Gf);OI=i(MG,"For "),bc=r(MG,"A",{href:!0,rel:!0});var $Y=o(bc);CI=i($Y,"string factory"),$Y.forEach(a),MG.forEach(a),bY.forEach(a),zI=m(zi),b(bo.$$.fragment,zi),zi.forEach(a),VI=m(q),qa=r(q,"DIV",{class:!0});var s_=o(qa);b($c.$$.fragment,s_),UI=m(s_),Pt=r(s_,"P",{});var Vi=o(Pt);MI=i(Vi,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),P2=r(Vi,"EM",{});var xY=o(P2);RI=i(xY,"external_arrays"),xY.forEach(a),BI=i(Vi,`.
You can specify `),L2=r(Vi,"EM",{});var vY=o(L2);HI=i(vY,"device"),vY.forEach(a),GI=i(Vi," if you want to run it on GPU ("),F2=r(Vi,"EM",{});var yY=o(F2);WI=i(yY,"device"),yY.forEach(a),YI=i(Vi,` must be the GPU index).
You can find more information about Faiss here:`),Vi.forEach(a),JI=m(s_),A2=r(s_,"UL",{});var jY=o(A2);Wf=r(jY,"LI",{});var RG=o(Wf);KI=i(RG,"For "),xc=r(RG,"A",{href:!0,rel:!0});var wY=o(xc);ZI=i(wY,"string factory"),wY.forEach(a),RG.forEach(a),jY.forEach(a),s_.forEach(a),XI=m(q),$o=r(q,"DIV",{class:!0});var uw=o($o);b(vc.$$.fragment,uw),QI=m(uw),S2=r(uw,"P",{});var DY=o(S2);e9=i(DY,"Save a FaissIndex on disk."),DY.forEach(a),uw.forEach(a),t9=m(q),Ta=r(q,"DIV",{class:!0});var n_=o(Ta);b(yc.$$.fragment,n_),a9=m(n_),O2=r(n_,"P",{});var kY=o(O2);s9=i(kY,"Load a FaissIndex from disk."),kY.forEach(a),n9=m(n_),jc=r(n_,"P",{});var gw=o(jc);r9=i(gw,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),C2=r(gw,"EM",{});var EY=o(C2);o9=i(EY,".get_index(index_name).faiss_index"),EY.forEach(a),l9=i(gw," to make it fit your needs."),gw.forEach(a),n_.forEach(a),i9=m(q),Na=r(q,"DIV",{class:!0});var r_=o(Na);b(wc.$$.fragment,r_),p9=m(r_),z2=r(r_,"P",{});var IY=o(z2);c9=i(IY,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),IY.forEach(a),d9=m(r_),b(xo.$$.fragment,r_),r_.forEach(a),m9=m(q),Pa=r(q,"DIV",{class:!0});var o_=o(Pa);b(Dc.$$.fragment,o_),h9=m(o_),V2=r(o_,"P",{});var qY=o(V2);f9=i(qY,"Load an existing text index using ElasticSearch for fast retrieval."),qY.forEach(a),u9=m(o_),b(vo.$$.fragment,o_),o_.forEach(a),g9=m(q),yo=r(q,"DIV",{class:!0});var _w=o(yo);b(kc.$$.fragment,_w),_9=m(_w),U2=r(_w,"P",{});var TY=o(U2);b9=i(TY,"List the colindex_nameumns/identifiers of all the attached indexes."),TY.forEach(a),_w.forEach(a),$9=m(q),jo=r(q,"DIV",{class:!0});var bw=o(jo);b(Ec.$$.fragment,bw),x9=m(bw),M2=r(bw,"P",{});var NY=o(M2);v9=i(NY,"List the index_name/identifiers of all the attached indexes."),NY.forEach(a),bw.forEach(a),y9=m(q),wo=r(q,"DIV",{class:!0});var $w=o(wo);b(Ic.$$.fragment,$w),j9=m($w),R2=r($w,"P",{});var PY=o(R2);w9=i(PY,"Drop the index with the specified column."),PY.forEach(a),$w.forEach(a),D9=m(q),Do=r(q,"DIV",{class:!0});var xw=o(Do);b(qc.$$.fragment,xw),k9=m(xw),B2=r(xw,"P",{});var LY=o(B2);E9=i(LY,"Find the nearest examples indices in the dataset to the query."),LY.forEach(a),xw.forEach(a),I9=m(q),ko=r(q,"DIV",{class:!0});var vw=o(ko);b(Tc.$$.fragment,vw),q9=m(vw),H2=r(vw,"P",{});var FY=o(H2);T9=i(FY,"Find the nearest examples indices in the dataset to the query."),FY.forEach(a),vw.forEach(a),N9=m(q),Eo=r(q,"DIV",{class:!0});var yw=o(Eo);b(Nc.$$.fragment,yw),P9=m(yw),G2=r(yw,"P",{});var AY=o(G2);L9=i(AY,"Find the nearest examples in the dataset to the query."),AY.forEach(a),yw.forEach(a),F9=m(q),Io=r(q,"DIV",{class:!0});var jw=o(Io);b(Pc.$$.fragment,jw),A9=m(jw),W2=r(jw,"P",{});var SY=o(W2);S9=i(SY,"Find the nearest examples in the dataset to the query."),SY.forEach(a),jw.forEach(a),O9=m(q),qo=r(q,"DIV",{class:!0});var ww=o(qo);b(Lc.$$.fragment,ww),C9=m(ww),Yf=r(ww,"P",{});var BG=o(Yf);Jf=r(BG,"A",{href:!0});var OY=o(Jf);z9=i(OY,"datasets.DatasetInfo"),OY.forEach(a),V9=i(BG," object containing all the metadata in the dataset."),BG.forEach(a),ww.forEach(a),U9=m(q),To=r(q,"DIV",{class:!0});var Dw=o(To);b(Fc.$$.fragment,Dw),M9=m(Dw),Kf=r(Dw,"P",{});var HG=o(Kf);Zf=r(HG,"A",{href:!0});var CY=o(Zf);R9=i(CY,"datasets.NamedSplit"),CY.forEach(a),B9=i(HG," object corresponding to a named dataset split."),HG.forEach(a),Dw.forEach(a),H9=m(q),Xf=r(q,"DIV",{class:!0});var zY=o(Xf);b(Ac.$$.fragment,zY),zY.forEach(a),G9=m(q),Qf=r(q,"DIV",{class:!0});var VY=o(Qf);b(Sc.$$.fragment,VY),VY.forEach(a),W9=m(q),eu=r(q,"DIV",{class:!0});var UY=o(eu);b(Oc.$$.fragment,UY),UY.forEach(a),Y9=m(q),tu=r(q,"DIV",{class:!0});var MY=o(tu);b(Cc.$$.fragment,MY),MY.forEach(a),J9=m(q),au=r(q,"DIV",{class:!0});var RY=o(au);b(zc.$$.fragment,RY),RY.forEach(a),K9=m(q),su=r(q,"DIV",{class:!0});var BY=o(su);b(Vc.$$.fragment,BY),BY.forEach(a),Z9=m(q),nu=r(q,"DIV",{class:!0});var HY=o(nu);b(Uc.$$.fragment,HY),HY.forEach(a),X9=m(q),ru=r(q,"DIV",{class:!0});var GY=o(ru);b(Mc.$$.fragment,GY),GY.forEach(a),Q9=m(q),ou=r(q,"DIV",{class:!0});var WY=o(ou);b(Rc.$$.fragment,WY),WY.forEach(a),eq=m(q),lu=r(q,"DIV",{class:!0});var YY=o(lu);b(Bc.$$.fragment,YY),YY.forEach(a),tq=m(q),iu=r(q,"DIV",{class:!0});var JY=o(iu);b(Hc.$$.fragment,JY),JY.forEach(a),aq=m(q),pu=r(q,"DIV",{class:!0});var KY=o(pu);b(Gc.$$.fragment,KY),KY.forEach(a),sq=m(q),cu=r(q,"DIV",{class:!0});var ZY=o(cu);b(Wc.$$.fragment,ZY),ZY.forEach(a),nq=m(q),La=r(q,"DIV",{class:!0});var l_=o(La);b(Yc.$$.fragment,l_),rq=m(l_),Y2=r(l_,"P",{});var XY=o(Y2);oq=i(XY,"Create Dataset from CSV file(s)."),XY.forEach(a),lq=m(l_),b(No.$$.fragment,l_),l_.forEach(a),iq=m(q),Fa=r(q,"DIV",{class:!0});var i_=o(Fa);b(Jc.$$.fragment,i_),pq=m(i_),J2=r(i_,"P",{});var QY=o(J2);cq=i(QY,"Create Dataset from JSON or JSON Lines file(s)."),QY.forEach(a),dq=m(i_),b(Po.$$.fragment,i_),i_.forEach(a),mq=m(q),Aa=r(q,"DIV",{class:!0});var p_=o(Aa);b(Kc.$$.fragment,p_),hq=m(p_),K2=r(p_,"P",{});var eJ=o(K2);fq=i(eJ,"Create Dataset from Parquet file(s)."),eJ.forEach(a),uq=m(p_),b(Lo.$$.fragment,p_),p_.forEach(a),gq=m(q),Sa=r(q,"DIV",{class:!0});var c_=o(Sa);b(Zc.$$.fragment,c_),_q=m(c_),Z2=r(c_,"P",{});var tJ=o(Z2);bq=i(tJ,"Create Dataset from text file(s)."),tJ.forEach(a),$q=m(c_),b(Fo.$$.fragment,c_),c_.forEach(a),xq=m(q),Oa=r(q,"DIV",{class:!0});var d_=o(Oa);b(Xc.$$.fragment,d_),vq=m(d_),pn=r(d_,"P",{});var m_=o(pn);yq=i(m_,"Prepare a dataset for the given task by casting the dataset\u2019s "),du=r(m_,"A",{href:!0});var aJ=o(du);jq=i(aJ,"Features"),aJ.forEach(a),wq=i(m_," to standardized column names and types as detailed in "),mu=r(m_,"A",{href:!0});var sJ=o(mu);Dq=i(sJ,"datasets.tasks"),sJ.forEach(a),kq=i(m_,"."),m_.forEach(a),Eq=m(d_),cn=r(d_,"P",{});var h_=o(cn);Iq=i(h_,"Casts "),X2=r(h_,"CODE",{});var nJ=o(X2);qq=i(nJ,"datasets.DatasetInfo.features"),nJ.forEach(a),Tq=i(h_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Q2=r(h_,"CODE",{});var rJ=o(Q2);Nq=i(rJ,"datasets.DatasetInfo.task_templates"),rJ.forEach(a),Pq=i(h_," after casting."),h_.forEach(a),d_.forEach(a),Lq=m(q),Ca=r(q,"DIV",{class:!0});var f_=o(Ca);b(Qc.$$.fragment,f_),Fq=m(f_),ed=r(f_,"P",{});var kw=o(ed);Aq=i(kw,"Align the dataset\u2019s label ID and label name mapping to match an input "),ex=r(kw,"CODE",{});var oJ=o(ex);Sq=i(oJ,"label2id"),oJ.forEach(a),Oq=i(kw,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),kw.forEach(a),Cq=m(f_),b(Ao.$$.fragment,f_),f_.forEach(a),q.forEach(a),x0=m(s),Lt=r(s,"DIV",{class:!0});var u_=o(Lt);b(td.$$.fragment,u_),zq=m(u_),dn=r(u_,"P",{});var g_=o(dn);Vq=i(g_,"Converts a list of "),hu=r(g_,"A",{href:!0});var lJ=o(hu);Uq=i(lJ,"Dataset"),lJ.forEach(a),Mq=i(g_," with the same schema into a single "),fu=r(g_,"A",{href:!0});var iJ=o(fu);Rq=i(iJ,"Dataset"),iJ.forEach(a),Bq=i(g_,"."),g_.forEach(a),Hq=m(u_),b(So.$$.fragment,u_),u_.forEach(a),v0=m(s),Z=r(s,"DIV",{class:!0});var gt=o(Z);b(ad.$$.fragment,gt),Gq=m(gt),tx=r(gt,"P",{});var pJ=o(tx);Wq=i(pJ,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),pJ.forEach(a),Yq=m(gt),mn=r(gt,"P",{});var __=o(mn);Jq=i(__,"You can use this function on a list of "),uu=r(__,"A",{href:!0});var cJ=o(uu);Kq=i(cJ,"Dataset"),cJ.forEach(a),Zq=i(__," objects, or on a list of "),gu=r(__,"A",{href:!0});var dJ=o(gu);Xq=i(dJ,"IterableDataset"),dJ.forEach(a),Qq=i(__," objects."),__.forEach(a),eT=m(gt),Ce=r(gt,"P",{});var Es=o(Ce);tT=i(Es,"If "),ax=r(Es,"CODE",{});var mJ=o(ax);aT=i(mJ,"probabilities"),mJ.forEach(a),sT=i(Es," is "),sx=r(Es,"CODE",{});var hJ=o(sx);nT=i(hJ,"None"),hJ.forEach(a),rT=i(Es,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),nx=r(Es,"CODE",{});var fJ=o(nx);oT=i(fJ,"probabilities"),fJ.forEach(a),lT=i(Es," is not "),rx=r(Es,"CODE",{});var uJ=o(rx);iT=i(uJ,"None"),uJ.forEach(a),pT=i(Es,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Es.forEach(a),cT=m(gt),ox=r(gt,"P",{});var gJ=o(ox);dT=i(gJ,"The resulting dataset ends when one of the source datasets runs out of examples."),gJ.forEach(a),mT=m(gt),b(Oo.$$.fragment,gt),gt.forEach(a),y0=m(s),de=r(s,"DIV",{class:!0});var Is=o(de);b(sd.$$.fragment,Is),hT=m(Is),lx=r(Is,"P",{});var _J=o(lx);fT=i(_J,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),_J.forEach(a),uT=m(Is),ix=r(Is,"P",{});var bJ=o(ix);gT=i(bJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),bJ.forEach(a),_T=m(Is),px=r(Is,"P",{});var $J=o(px);bT=i($J,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),$J.forEach(a),$T=m(Is),ze=r(Is,"UL",{});var qs=o(ze);cx=r(qs,"LI",{});var xJ=o(cx);xT=i(xJ,"cache files are always recreated"),xJ.forEach(a),vT=m(qs),dx=r(qs,"LI",{});var vJ=o(dx);yT=i(vJ,"cache files are written to a temporary directory that is deleted when session closes"),vJ.forEach(a),jT=m(qs),mx=r(qs,"LI",{});var yJ=o(mx);wT=i(yJ,"cache files are named using a random hash instead of the dataset fingerprint"),yJ.forEach(a),DT=m(qs),nd=r(qs,"LI",{});var Ew=o(nd);kT=i(Ew,"use "),_u=r(Ew,"A",{href:!0});var jJ=o(_u);ET=i(jJ,"datasets.Dataset.save_to_disk()"),jJ.forEach(a),IT=i(Ew," to save a transformed dataset or it will be deleted when session closes"),Ew.forEach(a),qT=m(qs),Ft=r(qs,"LI",{});var Ui=o(Ft);TT=i(Ui,"caching doesn\u2019t affect "),bu=r(Ui,"A",{href:!0});var wJ=o(bu);NT=i(wJ,"datasets.load_dataset()"),wJ.forEach(a),PT=i(Ui,`. If you want to regenerate a dataset from scratch you should use
the `),hx=r(Ui,"CODE",{});var DJ=o(hx);LT=i(DJ,"download_mode"),DJ.forEach(a),FT=i(Ui," parameter in "),$u=r(Ui,"A",{href:!0});var kJ=o($u);AT=i(kJ,"datasets.load_dataset()"),kJ.forEach(a),ST=i(Ui,"."),Ui.forEach(a),qs.forEach(a),Is.forEach(a),j0=m(s),me=r(s,"DIV",{class:!0});var Ts=o(me);b(rd.$$.fragment,Ts),OT=m(Ts),fx=r(Ts,"P",{});var EJ=o(fx);CT=i(EJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),EJ.forEach(a),zT=m(Ts),ux=r(Ts,"P",{});var IJ=o(ux);VT=i(IJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),IJ.forEach(a),UT=m(Ts),gx=r(Ts,"P",{});var qJ=o(gx);MT=i(qJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),qJ.forEach(a),RT=m(Ts),Ve=r(Ts,"UL",{});var Ns=o(Ve);_x=r(Ns,"LI",{});var TJ=o(_x);BT=i(TJ,"cache files are always recreated"),TJ.forEach(a),HT=m(Ns),bx=r(Ns,"LI",{});var NJ=o(bx);GT=i(NJ,"cache files are written to a temporary directory that is deleted when session closes"),NJ.forEach(a),WT=m(Ns),$x=r(Ns,"LI",{});var PJ=o($x);YT=i(PJ,"cache files are named using a random hash instead of the dataset fingerprint"),PJ.forEach(a),JT=m(Ns),od=r(Ns,"LI",{});var Iw=o(od);KT=i(Iw,"use "),xu=r(Iw,"A",{href:!0});var LJ=o(xu);ZT=i(LJ,"datasets.Dataset.save_to_disk()"),LJ.forEach(a),XT=i(Iw," to save a transformed dataset or it will be deleted when session closes"),Iw.forEach(a),QT=m(Ns),At=r(Ns,"LI",{});var Mi=o(At);eN=i(Mi,"caching doesn\u2019t affect "),vu=r(Mi,"A",{href:!0});var FJ=o(vu);tN=i(FJ,"datasets.load_dataset()"),FJ.forEach(a),aN=i(Mi,`. If you want to regenerate a dataset from scratch you should use
the `),xx=r(Mi,"CODE",{});var AJ=o(xx);sN=i(AJ,"download_mode"),AJ.forEach(a),nN=i(Mi," parameter in "),yu=r(Mi,"A",{href:!0});var SJ=o(yu);rN=i(SJ,"datasets.load_dataset()"),SJ.forEach(a),oN=i(Mi,"."),Mi.forEach(a),Ns.forEach(a),Ts.forEach(a),w0=m(s),he=r(s,"DIV",{class:!0});var Ps=o(he);b(ld.$$.fragment,Ps),lN=m(Ps),vx=r(Ps,"P",{});var OJ=o(vx);iN=i(OJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),OJ.forEach(a),pN=m(Ps),yx=r(Ps,"P",{});var CJ=o(yx);cN=i(CJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),CJ.forEach(a),dN=m(Ps),jx=r(Ps,"P",{});var zJ=o(jx);mN=i(zJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),zJ.forEach(a),hN=m(Ps),Ue=r(Ps,"UL",{});var Ls=o(Ue);wx=r(Ls,"LI",{});var VJ=o(wx);fN=i(VJ,"cache files are always recreated"),VJ.forEach(a),uN=m(Ls),Dx=r(Ls,"LI",{});var UJ=o(Dx);gN=i(UJ,"cache files are written to a temporary directory that is deleted when session closes"),UJ.forEach(a),_N=m(Ls),kx=r(Ls,"LI",{});var MJ=o(kx);bN=i(MJ,"cache files are named using a random hash instead of the dataset fingerprint"),MJ.forEach(a),$N=m(Ls),id=r(Ls,"LI",{});var qw=o(id);xN=i(qw,"use "),ju=r(qw,"A",{href:!0});var RJ=o(ju);vN=i(RJ,"datasets.Dataset.save_to_disk()"),RJ.forEach(a),yN=i(qw," to save a transformed dataset or it will be deleted when session closes"),qw.forEach(a),jN=m(Ls),St=r(Ls,"LI",{});var Ri=o(St);wN=i(Ri,"caching doesn\u2019t affect "),wu=r(Ri,"A",{href:!0});var BJ=o(wu);DN=i(BJ,"datasets.load_dataset()"),BJ.forEach(a),kN=i(Ri,`. If you want to regenerate a dataset from scratch you should use
the `),Ex=r(Ri,"CODE",{});var HJ=o(Ex);EN=i(HJ,"download_mode"),HJ.forEach(a),IN=i(Ri," parameter in "),Du=r(Ri,"A",{href:!0});var GJ=o(Du);qN=i(GJ,"datasets.load_dataset()"),GJ.forEach(a),TN=i(Ri,"."),Ri.forEach(a),Ls.forEach(a),Ps.forEach(a),D0=m(s),hn=r(s,"H2",{class:!0});var Tw=o(hn);Co=r(Tw,"A",{id:!0,class:!0,href:!0});var WJ=o(Co);Ix=r(WJ,"SPAN",{});var YJ=o(Ix);b(pd.$$.fragment,YJ),YJ.forEach(a),WJ.forEach(a),NN=m(Tw),qx=r(Tw,"SPAN",{});var JJ=o(qx);PN=i(JJ,"DatasetDict"),JJ.forEach(a),Tw.forEach(a),k0=m(s),zo=r(s,"P",{});var Nw=o(zo);LN=i(Nw,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Tx=r(Nw,"CODE",{});var KJ=o(Tx);FN=i(KJ,"Dataset"),KJ.forEach(a),AN=i(Nw,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),Nw.forEach(a),E0=m(s),L=r(s,"DIV",{class:!0});var F=o(L);b(cd.$$.fragment,F),SN=m(F),Nx=r(F,"P",{});var ZJ=o(Nx);ON=i(ZJ,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),ZJ.forEach(a),CN=m(F),za=r(F,"DIV",{class:!0});var b_=o(za);b(dd.$$.fragment,b_),zN=m(b_),Px=r(b_,"P",{});var XJ=o(Px);VN=i(XJ,"The Apache Arrow tables backing each split."),XJ.forEach(a),UN=m(b_),b(Vo.$$.fragment,b_),b_.forEach(a),MN=m(F),Va=r(F,"DIV",{class:!0});var $_=o(Va);b(md.$$.fragment,$_),RN=m($_),Lx=r($_,"P",{});var QJ=o(Lx);BN=i(QJ,"The cache files containing the Apache Arrow table backing each split."),QJ.forEach(a),HN=m($_),b(Uo.$$.fragment,$_),$_.forEach(a),GN=m(F),Ua=r(F,"DIV",{class:!0});var x_=o(Ua);b(hd.$$.fragment,x_),WN=m(x_),Fx=r(x_,"P",{});var eK=o(Fx);YN=i(eK,"Number of columns in each split of the dataset."),eK.forEach(a),JN=m(x_),b(Mo.$$.fragment,x_),x_.forEach(a),KN=m(F),Ma=r(F,"DIV",{class:!0});var v_=o(Ma);b(fd.$$.fragment,v_),ZN=m(v_),ud=r(v_,"P",{});var Pw=o(ud);XN=i(Pw,"Number of rows in each split of the dataset (same as "),Ro=r(Pw,"A",{href:!0});var Lw=o(Ro);QN=i(Lw,"datasets.Dataset."),Ax=r(Lw,"STRONG",{});var tK=o(Ax);eP=i(tK,"len"),tK.forEach(a),tP=i(Lw,"()"),Lw.forEach(a),aP=i(Pw,")."),Pw.forEach(a),sP=m(v_),b(Bo.$$.fragment,v_),v_.forEach(a),nP=m(F),Ra=r(F,"DIV",{class:!0});var y_=o(Ra);b(gd.$$.fragment,y_),rP=m(y_),Sx=r(y_,"P",{});var aK=o(Sx);oP=i(aK,"Names of the columns in each split of the dataset."),aK.forEach(a),lP=m(y_),b(Ho.$$.fragment,y_),y_.forEach(a),iP=m(F),Ba=r(F,"DIV",{class:!0});var j_=o(Ba);b(_d.$$.fragment,j_),pP=m(j_),Ox=r(j_,"P",{});var sK=o(Ox);cP=i(sK,"Shape of each split of the dataset (number of columns, number of rows)."),sK.forEach(a),dP=m(j_),b(Go.$$.fragment,j_),j_.forEach(a),mP=m(F),pt=r(F,"DIV",{class:!0});var Bi=o(pt);b(bd.$$.fragment,Bi),hP=m(Bi),Cx=r(Bi,"P",{});var nK=o(Cx);fP=i(nK,"Return a list of the unique elements in a column for each split."),nK.forEach(a),uP=m(Bi),zx=r(Bi,"P",{});var rK=o(zx);gP=i(rK,"This is implemented in the low-level backend and as such, very fast."),rK.forEach(a),_P=m(Bi),b(Wo.$$.fragment,Bi),Bi.forEach(a),bP=m(F),Ha=r(F,"DIV",{class:!0});var w_=o(Ha);b($d.$$.fragment,w_),$P=m(w_),Vx=r(w_,"P",{});var oK=o(Vx);xP=i(oK,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),oK.forEach(a),vP=m(w_),b(Yo.$$.fragment,w_),w_.forEach(a),yP=m(F),Ga=r(F,"DIV",{class:!0});var D_=o(Ga);b(xd.$$.fragment,D_),jP=m(D_),Ux=r(D_,"P",{});var lK=o(Ux);wP=i(lK,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),lK.forEach(a),DP=m(D_),b(Jo.$$.fragment,D_),D_.forEach(a),kP=m(F),Wa=r(F,"DIV",{class:!0});var k_=o(Wa);b(vd.$$.fragment,k_),EP=m(k_),Mx=r(k_,"P",{});var iK=o(Mx);IP=i(iK,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),iK.forEach(a),qP=m(k_),b(Ko.$$.fragment,k_),k_.forEach(a),TP=m(F),ct=r(F,"DIV",{class:!0});var Hi=o(ct);b(yd.$$.fragment,Hi),NP=m(Hi),Rx=r(Hi,"P",{});var pK=o(Rx);PP=i(pK,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),pK.forEach(a),LP=m(Hi),Bx=r(Hi,"P",{});var cK=o(Bx);FP=i(cK,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),cK.forEach(a),AP=m(Hi),b(Zo.$$.fragment,Hi),Hi.forEach(a),SP=m(F),we=r(F,"DIV",{class:!0});var Fs=o(we);b(jd.$$.fragment,Fs),OP=m(Fs),Hx=r(Fs,"P",{});var dK=o(Hx);CP=i(dK,"Create a new Dataset where the rows are shuffled."),dK.forEach(a),zP=m(Fs),Gx=r(Fs,"P",{});var mK=o(Gx);VP=i(mK,"The transformation is applied to all the datasets of the dataset dictionary."),mK.forEach(a),UP=m(Fs),Wx=r(Fs,"P",{});var hK=o(Wx);MP=i(hK,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),hK.forEach(a),RP=m(Fs),b(Xo.$$.fragment,Fs),Fs.forEach(a),BP=m(F),De=r(F,"DIV",{class:!0});var As=o(De);b(wd.$$.fragment,As),HP=m(As),Dd=r(As,"P",{});var Fw=o(Dd);GP=i(Fw,"Set "),Yx=r(Fw,"CODE",{});var fK=o(Yx);WP=i(fK,"__getitem__"),fK.forEach(a),YP=i(Fw,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),Fw.forEach(a),JP=m(As),Me=r(As,"P",{});var Ss=o(Me);KP=i(Ss,"It is possible to call "),Jx=r(Ss,"CODE",{});var uK=o(Jx);ZP=i(uK,"map"),uK.forEach(a),XP=i(Ss," after calling "),Kx=r(Ss,"CODE",{});var gK=o(Kx);QP=i(gK,"set_format"),gK.forEach(a),eL=i(Ss,". Since "),Zx=r(Ss,"CODE",{});var _K=o(Zx);tL=i(_K,"map"),_K.forEach(a),aL=i(Ss,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Xx=r(Ss,"CODE",{});var bK=o(Xx);sL=i(bK,"map"),bK.forEach(a),nL=i(Ss," on a dataset to add a new column, then this column will be formatted:"),Ss.forEach(a),rL=m(As),Qx=r(As,"P",{});var $K=o(Qx);oL=i($K,"new formatted columns = (all columns - previously unformatted columns)"),$K.forEach(a),lL=m(As),b(Qo.$$.fragment,As),As.forEach(a),iL=m(F),dt=r(F,"DIV",{class:!0});var Gi=o(dt);b(kd.$$.fragment,Gi),pL=m(Gi),Ed=r(Gi,"P",{});var Aw=o(Ed);cL=i(Aw,"Reset "),e1=r(Aw,"CODE",{});var xK=o(e1);dL=i(xK,"__getitem__"),xK.forEach(a),mL=i(Aw,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),Aw.forEach(a),hL=m(Gi),ku=r(Gi,"P",{});var GG=o(ku);fL=i(GG,"Same as "),t1=r(GG,"CODE",{});var vK=o(t1);uL=i(vK,"self.set_format()"),vK.forEach(a),GG.forEach(a),gL=m(Gi),b(el.$$.fragment,Gi),Gi.forEach(a),_L=m(F),tl=r(F,"DIV",{class:!0});var Sw=o(tl);b(Id.$$.fragment,Sw),bL=m(Sw),fn=r(Sw,"P",{});var E_=o(fn);$L=i(E_,"To be used in a "),a1=r(E_,"EM",{});var yK=o(a1);xL=i(yK,"with"),yK.forEach(a),vL=i(E_," statement. Set "),s1=r(E_,"CODE",{});var jK=o(s1);yL=i(jK,"__getitem__"),jK.forEach(a),jL=i(E_,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),E_.forEach(a),Sw.forEach(a),wL=m(F),ke=r(F,"DIV",{class:!0});var Os=o(ke);b(qd.$$.fragment,Os),DL=m(Os),Ot=r(Os,"P",{});var Wi=o(Ot);kL=i(Wi,"Set "),n1=r(Wi,"CODE",{});var wK=o(n1);EL=i(wK,"__getitem__"),wK.forEach(a),IL=i(Wi,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),r1=r(Wi,"CODE",{});var DK=o(r1);qL=i(DK,"type"),DK.forEach(a),TL=i(Wi," (for example \u201Cnumpy\u201D) is used to format batches when using "),o1=r(Wi,"CODE",{});var kK=o(o1);NL=i(kK,"__getitem__"),kK.forEach(a),PL=i(Wi,`.
The format is set for every dataset in the dataset dictionary`),Wi.forEach(a),LL=m(Os),Td=r(Os,"P",{});var Ow=o(Td);FL=i(Ow,"It\u2019s also possible to use custom transforms for formatting using "),Eu=r(Ow,"A",{href:!0});var EK=o(Eu);AL=i(EK,"datasets.Dataset.with_transform()"),EK.forEach(a),SL=i(Ow,"."),Ow.forEach(a),OL=m(Os),un=r(Os,"P",{});var I_=o(un);CL=i(I_,"Contrary to "),Iu=r(I_,"A",{href:!0});var IK=o(Iu);zL=i(IK,"datasets.DatasetDict.set_format()"),IK.forEach(a),VL=i(I_,", "),l1=r(I_,"CODE",{});var qK=o(l1);UL=i(qK,"with_format"),qK.forEach(a),ML=i(I_," returns a new DatasetDict object with new Dataset objects."),I_.forEach(a),RL=m(Os),b(al.$$.fragment,Os),Os.forEach(a),BL=m(F),Ee=r(F,"DIV",{class:!0});var Cs=o(Ee);b(Nd.$$.fragment,Cs),HL=m(Cs),gn=r(Cs,"P",{});var q_=o(gn);GL=i(q_,"Set "),i1=r(q_,"CODE",{});var TK=o(i1);WL=i(TK,"__getitem__"),TK.forEach(a),YL=i(q_," return format using this transform. The transform is applied on-the-fly on batches when "),p1=r(q_,"CODE",{});var NK=o(p1);JL=i(NK,"__getitem__"),NK.forEach(a),KL=i(q_,` is called.
The transform is set for every dataset in the dataset dictionary`),q_.forEach(a),ZL=m(Cs),_n=r(Cs,"P",{});var T_=o(_n);XL=i(T_,"As "),qu=r(T_,"A",{href:!0});var PK=o(qu);QL=i(PK,"datasets.Dataset.set_format()"),PK.forEach(a),eF=i(T_,", this can be reset using "),Tu=r(T_,"A",{href:!0});var LK=o(Tu);tF=i(LK,"datasets.Dataset.reset_format()"),LK.forEach(a),aF=i(T_,"."),T_.forEach(a),sF=m(Cs),bn=r(Cs,"P",{});var N_=o(bn);nF=i(N_,"Contrary to "),c1=r(N_,"CODE",{});var FK=o(c1);rF=i(FK,"datasets.DatasetDict.set_transform()"),FK.forEach(a),oF=i(N_,", "),d1=r(N_,"CODE",{});var AK=o(d1);lF=i(AK,"with_transform"),AK.forEach(a),iF=i(N_," returns a new DatasetDict object with new Dataset objects."),N_.forEach(a),pF=m(Cs),b(sl.$$.fragment,Cs),Cs.forEach(a),cF=m(F),Ya=r(F,"DIV",{class:!0});var P_=o(Ya);b(Pd.$$.fragment,P_),dF=m(P_),m1=r(P_,"P",{});var SK=o(m1);mF=i(SK,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),SK.forEach(a),hF=m(P_),b(nl.$$.fragment,P_),P_.forEach(a),fF=m(F),mt=r(F,"DIV",{class:!0});var Yi=o(mt);b(Ld.$$.fragment,Yi),uF=m(Yi),h1=r(Yi,"P",{});var OK=o(h1);gF=i(OK,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),OK.forEach(a),_F=m(Yi),Ct=r(Yi,"P",{});var Ji=o(Ct);bF=i(Ji,"You can also remove a column using "),Nu=r(Ji,"A",{href:!0});var CK=o(Nu);$F=i(CK,"Dataset.map()"),CK.forEach(a),xF=i(Ji," with "),f1=r(Ji,"EM",{});var zK=o(f1);vF=i(zK,"feature"),zK.forEach(a),yF=i(Ji," but "),u1=r(Ji,"CODE",{});var VK=o(u1);jF=i(VK,"cast_"),VK.forEach(a),wF=i(Ji,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Ji.forEach(a),DF=m(Yi),b(rl.$$.fragment,Yi),Yi.forEach(a),kF=m(F),Ja=r(F,"DIV",{class:!0});var L_=o(Ja);b(Fd.$$.fragment,L_),EF=m(L_),g1=r(L_,"P",{});var UK=o(g1);IF=i(UK,"Cast column to feature for decoding."),UK.forEach(a),qF=m(L_),b(ol.$$.fragment,L_),L_.forEach(a),TF=m(F),Ie=r(F,"DIV",{class:!0});var zs=o(Ie);b(Ad.$$.fragment,zs),NF=m(zs),_1=r(zs,"P",{});var MK=o(_1);PF=i(MK,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),MK.forEach(a),LF=m(zs),b1=r(zs,"P",{});var RK=o(b1);FF=i(RK,"The transformation is applied to all the splits of the dataset dictionary."),RK.forEach(a),AF=m(zs),$n=r(zs,"P",{});var F_=o($n);SF=i(F_,"You can also remove a column using "),Pu=r(F_,"A",{href:!0});var BK=o(Pu);OF=i(BK,"Dataset.map()"),BK.forEach(a),CF=i(F_," with "),$1=r(F_,"EM",{});var HK=o($1);zF=i(HK,"remove_columns"),HK.forEach(a),VF=i(F_,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),F_.forEach(a),UF=m(zs),b(ll.$$.fragment,zs),zs.forEach(a),MF=m(F),qe=r(F,"DIV",{class:!0});var Vs=o(qe);b(Sd.$$.fragment,Vs),RF=m(Vs),x1=r(Vs,"P",{});var GK=o(x1);BF=i(GK,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),GK.forEach(a),HF=m(Vs),xn=r(Vs,"P",{});var A_=o(xn);GF=i(A_,"You can also rename a column using "),Lu=r(A_,"A",{href:!0});var WK=o(Lu);WF=i(WK,"Dataset.map()"),WK.forEach(a),YF=i(A_," with "),v1=r(A_,"EM",{});var YK=o(v1);JF=i(YK,"remove_columns"),YK.forEach(a),KF=i(A_," but the present method:"),A_.forEach(a),ZF=m(Vs),Od=r(Vs,"UL",{});var Cw=o(Od);y1=r(Cw,"LI",{});var JK=o(y1);XF=i(JK,"takes care of moving the original features under the new column name."),JK.forEach(a),QF=m(Cw),j1=r(Cw,"LI",{});var KK=o(j1);eA=i(KK,"doesn\u2019t copy the data to a new dataset and is thus much faster."),KK.forEach(a),Cw.forEach(a),tA=m(Vs),b(il.$$.fragment,Vs),Vs.forEach(a),aA=m(F),Ka=r(F,"DIV",{class:!0});var S_=o(Ka);b(Cd.$$.fragment,S_),sA=m(S_),w1=r(S_,"P",{});var ZK=o(w1);nA=i(ZK,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),ZK.forEach(a),rA=m(S_),b(pl.$$.fragment,S_),S_.forEach(a),oA=m(F),Za=r(F,"DIV",{class:!0});var O_=o(Za);b(zd.$$.fragment,O_),lA=m(O_),Vd=r(O_,"P",{});var zw=o(Vd);iA=i(zw,"Casts the given column as :obj:"),D1=r(zw,"CODE",{});var XK=o(D1);pA=i(XK,"datasets.features.ClassLabel"),XK.forEach(a),cA=i(zw," and updates the tables."),zw.forEach(a),dA=m(O_),b(cl.$$.fragment,O_),O_.forEach(a),mA=m(F),Te=r(F,"DIV",{class:!0});var Us=o(Te);b(Ud.$$.fragment,Us),hA=m(Us),vn=r(Us,"P",{});var C_=o(vn);fA=i(C_,"Pushes the "),k1=r(C_,"CODE",{});var QK=o(k1);uA=i(QK,"DatasetDict"),QK.forEach(a),gA=i(C_,` to the hub as a Parquet dataset.
The `),E1=r(C_,"CODE",{});var eZ=o(E1);_A=i(eZ,"DatasetDict"),eZ.forEach(a),bA=i(C_," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),C_.forEach(a),$A=m(Us),I1=r(Us,"P",{});var tZ=o(I1);xA=i(tZ,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),tZ.forEach(a),vA=m(Us),zt=r(Us,"P",{});var Ki=o(zt);yA=i(Ki,"The resulting Parquet files are self-contained by default: if your dataset contains "),Fu=r(Ki,"A",{href:!0});var aZ=o(Fu);jA=i(aZ,"Image"),aZ.forEach(a),wA=i(Ki," or "),Au=r(Ki,"A",{href:!0});var sZ=o(Au);DA=i(sZ,"Audio"),sZ.forEach(a),kA=i(Ki,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),q1=r(Ki,"EM",{});var nZ=o(q1);EA=i(nZ,"embed_external_files"),nZ.forEach(a),IA=i(Ki," to False."),Ki.forEach(a),qA=m(Us),b(dl.$$.fragment,Us),Us.forEach(a),TA=m(F),re=r(F,"DIV",{class:!0});var _t=o(re);b(Md.$$.fragment,_t),NA=m(_t),yn=r(_t,"P",{});var z_=o(yn);PA=i(z_,"Saves a dataset dict to a filesystem using either "),Su=r(z_,"A",{href:!0});var rZ=o(Su);LA=i(rZ,"S3FileSystem"),rZ.forEach(a),FA=i(z_,` or
`),T1=r(z_,"CODE",{});var oZ=o(T1);AA=i(oZ,"fsspec.spec.AbstractFileSystem"),oZ.forEach(a),SA=i(z_,"."),z_.forEach(a),OA=m(_t),jn=r(_t,"P",{});var V_=o(jn);CA=i(V_,"For "),Ou=r(V_,"A",{href:!0});var lZ=o(Ou);zA=i(lZ,"Image"),lZ.forEach(a),VA=i(V_," and "),Cu=r(V_,"A",{href:!0});var iZ=o(Cu);UA=i(iZ,"Audio"),iZ.forEach(a),MA=i(V_," data:"),V_.forEach(a),RA=m(_t),Rd=r(_t,"P",{});var Vw=o(Rd);BA=i(Vw,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),N1=r(Vw,"EM",{});var pZ=o(N1);HA=i(pZ,"read()"),pZ.forEach(a),GA=i(Vw," those files first."),Vw.forEach(a),WA=m(_t),b(ml.$$.fragment,_t),YA=m(_t),b(hl.$$.fragment,_t),_t.forEach(a),JA=m(F),Xa=r(F,"DIV",{class:!0});var U_=o(Xa);b(Bd.$$.fragment,U_),KA=m(U_),Vt=r(U_,"P",{});var Zi=o(Vt);ZA=i(Zi,"Load a dataset that was previously saved using "),P1=r(Zi,"CODE",{});var cZ=o(P1);XA=i(cZ,"save_to_disk"),cZ.forEach(a),QA=i(Zi,` from a filesystem using either
`),zu=r(Zi,"A",{href:!0});var dZ=o(zu);eS=i(dZ,"S3FileSystem"),dZ.forEach(a),tS=i(Zi," or "),L1=r(Zi,"CODE",{});var mZ=o(L1);aS=i(mZ,"fsspec.spec.AbstractFileSystem"),mZ.forEach(a),sS=i(Zi,"."),Zi.forEach(a),nS=m(U_),b(fl.$$.fragment,U_),U_.forEach(a),rS=m(F),Qa=r(F,"DIV",{class:!0});var M_=o(Qa);b(Hd.$$.fragment,M_),oS=m(M_),F1=r(M_,"P",{});var hZ=o(F1);lS=i(hZ,"Create DatasetDict from CSV file(s)."),hZ.forEach(a),iS=m(M_),b(ul.$$.fragment,M_),M_.forEach(a),pS=m(F),es=r(F,"DIV",{class:!0});var R_=o(es);b(Gd.$$.fragment,R_),cS=m(R_),A1=r(R_,"P",{});var fZ=o(A1);dS=i(fZ,"Create DatasetDict from JSON Lines file(s)."),fZ.forEach(a),mS=m(R_),b(gl.$$.fragment,R_),R_.forEach(a),hS=m(F),ts=r(F,"DIV",{class:!0});var B_=o(ts);b(Wd.$$.fragment,B_),fS=m(B_),S1=r(B_,"P",{});var uZ=o(S1);uS=i(uZ,"Create DatasetDict from Parquet file(s)."),uZ.forEach(a),gS=m(B_),b(_l.$$.fragment,B_),B_.forEach(a),_S=m(F),as=r(F,"DIV",{class:!0});var H_=o(as);b(Yd.$$.fragment,H_),bS=m(H_),O1=r(H_,"P",{});var gZ=o(O1);$S=i(gZ,"Create DatasetDict from text file(s)."),gZ.forEach(a),xS=m(H_),b(bl.$$.fragment,H_),H_.forEach(a),vS=m(F),ss=r(F,"DIV",{class:!0});var G_=o(ss);b(Jd.$$.fragment,G_),yS=m(G_),wn=r(G_,"P",{});var W_=o(wn);jS=i(W_,"Prepare a dataset for the given task by casting the dataset\u2019s "),Vu=r(W_,"A",{href:!0});var _Z=o(Vu);wS=i(_Z,"Features"),_Z.forEach(a),DS=i(W_," to standardized column names and types as detailed in "),Uu=r(W_,"A",{href:!0});var bZ=o(Uu);kS=i(bZ,"datasets.tasks"),bZ.forEach(a),ES=i(W_,"."),W_.forEach(a),IS=m(G_),Dn=r(G_,"P",{});var Y_=o(Dn);qS=i(Y_,"Casts "),C1=r(Y_,"CODE",{});var $Z=o(C1);TS=i($Z,"datasets.DatasetInfo.features"),$Z.forEach(a),NS=i(Y_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),z1=r(Y_,"CODE",{});var xZ=o(z1);PS=i(xZ,"datasets.DatasetInfo.task_templates"),xZ.forEach(a),LS=i(Y_," after casting."),Y_.forEach(a),G_.forEach(a),F.forEach(a),I0=m(s),Mu=r(s,"A",{id:!0}),o(Mu).forEach(a),q0=m(s),kn=r(s,"H2",{class:!0});var Uw=o(kn);$l=r(Uw,"A",{id:!0,class:!0,href:!0});var vZ=o($l);V1=r(vZ,"SPAN",{});var yZ=o(V1);b(Kd.$$.fragment,yZ),yZ.forEach(a),vZ.forEach(a),FS=m(Uw),U1=r(Uw,"SPAN",{});var jZ=o(U1);AS=i(jZ,"IterableDataset"),jZ.forEach(a),Uw.forEach(a),T0=m(s),xl=r(s,"P",{});var Mw=o(xl);SS=i(Mw,"The base class "),Ru=r(Mw,"A",{href:!0});var wZ=o(Ru);OS=i(wZ,"IterableDataset"),wZ.forEach(a),CS=i(Mw," implements an iterable Dataset backed by python generators."),Mw.forEach(a),N0=m(s),A=r(s,"DIV",{class:!0});var S=o(A);b(Zd.$$.fragment,S),zS=m(S),M1=r(S,"P",{});var DZ=o(M1);VS=i(DZ,"A Dataset backed by an iterable."),DZ.forEach(a),US=m(S),ns=r(S,"DIV",{class:!0});var J_=o(ns);b(Xd.$$.fragment,J_),MS=m(J_),R1=r(J_,"P",{});var kZ=o(R1);RS=i(kZ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),kZ.forEach(a),BS=m(J_),b(vl.$$.fragment,J_),J_.forEach(a),HS=m(S),rs=r(S,"DIV",{class:!0});var K_=o(rs);b(Qd.$$.fragment,K_),GS=m(K_),B1=r(K_,"P",{});var EZ=o(B1);WS=i(EZ,"Cast column to feature for decoding."),EZ.forEach(a),YS=m(K_),b(yl.$$.fragment,K_),K_.forEach(a),JS=m(S),os=r(S,"DIV",{class:!0});var Z_=o(os);b(em.$$.fragment,Z_),KS=m(Z_),H1=r(Z_,"P",{});var IZ=o(H1);ZS=i(IZ,"Cast the dataset to a new set of features."),IZ.forEach(a),XS=m(Z_),b(jl.$$.fragment,Z_),Z_.forEach(a),QS=m(S),Bu=r(S,"DIV",{class:!0});var qZ=o(Bu);b(tm.$$.fragment,qZ),qZ.forEach(a),eO=m(S),Ne=r(S,"DIV",{class:!0});var Ms=o(Ne);b(am.$$.fragment,Ms),tO=m(Ms),G1=r(Ms,"P",{});var TZ=o(G1);aO=i(TZ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),TZ.forEach(a),sO=m(Ms),sm=r(Ms,"P",{});var Rw=o(sm);nO=i(Rw,"You can specify whether the function should be batched or not with the "),W1=r(Rw,"CODE",{});var NZ=o(W1);rO=i(NZ,"batched"),NZ.forEach(a),oO=i(Rw," parameter:"),Rw.forEach(a),lO=m(Ms),En=r(Ms,"UL",{});var X_=o(En);Y1=r(X_,"LI",{});var PZ=o(Y1);iO=i(PZ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),PZ.forEach(a),pO=m(X_),J1=r(X_,"LI",{});var LZ=o(J1);cO=i(LZ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),LZ.forEach(a),dO=m(X_),fe=r(X_,"LI",{});var bt=o(fe);mO=i(bt,"If batched is True and batch_size is "),K1=r(bt,"CODE",{});var FZ=o(K1);hO=i(FZ,"n"),FZ.forEach(a),fO=i(bt," > 1, then the function takes a batch of "),Z1=r(bt,"CODE",{});var AZ=o(Z1);uO=i(AZ,"n"),AZ.forEach(a),gO=i(bt," examples as input and can return a batch with "),X1=r(bt,"CODE",{});var SZ=o(X1);_O=i(SZ,"n"),SZ.forEach(a),bO=i(bt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Q1=r(bt,"CODE",{});var OZ=o(Q1);$O=i(OZ,"n"),OZ.forEach(a),xO=i(bt,` examples.
A batch is a dictionary, e.g. a batch of `),ev=r(bt,"CODE",{});var CZ=o(ev);vO=i(CZ,"n"),CZ.forEach(a),yO=i(bt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),bt.forEach(a),X_.forEach(a),jO=m(Ms),b(wl.$$.fragment,Ms),Ms.forEach(a),wO=m(S),ls=r(S,"DIV",{class:!0});var Q_=o(ls);b(nm.$$.fragment,Q_),DO=m(Q_),tv=r(Q_,"P",{});var zZ=o(tv);kO=i(zZ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),zZ.forEach(a),EO=m(Q_),b(Dl.$$.fragment,Q_),Q_.forEach(a),IO=m(S),is=r(S,"DIV",{class:!0});var eb=o(is);b(rm.$$.fragment,eb),qO=m(eb),av=r(eb,"P",{});var VZ=o(av);TO=i(VZ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),VZ.forEach(a),NO=m(eb),b(kl.$$.fragment,eb),eb.forEach(a),PO=m(S),oe=r(S,"DIV",{class:!0});var $t=o(oe);b(om.$$.fragment,$t),LO=m($t),sv=r($t,"P",{});var UZ=o(sv);FO=i(UZ,"Randomly shuffles the elements of this dataset."),UZ.forEach(a),AO=m($t),nv=r($t,"P",{});var MZ=o(nv);SO=i(MZ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),MZ.forEach(a),OO=m($t),lm=r($t,"P",{});var Bw=o(lm);CO=i(Bw,"For instance, if your dataset contains 10,000 elements but "),rv=r(Bw,"CODE",{});var RZ=o(rv);zO=i(RZ,"buffer_size"),RZ.forEach(a),VO=i(Bw,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Bw.forEach(a),UO=m($t),In=r($t,"P",{});var tb=o(In);MO=i(tb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Hu=r(tb,"A",{href:!0});var BZ=o(Hu);RO=i(BZ,"datasets.IterableDataset.skip()"),BZ.forEach(a),BO=i(tb," or "),Gu=r(tb,"A",{href:!0});var HZ=o(Gu);HO=i(HZ,"datasets.IterableDataset.take()"),HZ.forEach(a),GO=i(tb,`
then the order of the shards is kept unchanged.`),tb.forEach(a),WO=m($t),b(El.$$.fragment,$t),$t.forEach(a),YO=m(S),ps=r(S,"DIV",{class:!0});var ab=o(ps);b(im.$$.fragment,ab),JO=m(ab),pm=r(ab,"P",{});var Hw=o(pm);KO=i(Hw,"Create a new IterableDataset that skips the first "),ov=r(Hw,"CODE",{});var GZ=o(ov);ZO=i(GZ,"n"),GZ.forEach(a),XO=i(Hw," elements."),Hw.forEach(a),QO=m(ab),b(Il.$$.fragment,ab),ab.forEach(a),eC=m(S),cs=r(S,"DIV",{class:!0});var sb=o(cs);b(cm.$$.fragment,sb),tC=m(sb),dm=r(sb,"P",{});var Gw=o(dm);aC=i(Gw,"Create a new IterableDataset with only the first "),lv=r(Gw,"CODE",{});var WZ=o(lv);sC=i(WZ,"n"),WZ.forEach(a),nC=i(Gw," elements."),Gw.forEach(a),rC=m(sb),b(ql.$$.fragment,sb),sb.forEach(a),oC=m(S),Tl=r(S,"DIV",{class:!0});var Ww=o(Tl);b(mm.$$.fragment,Ww),lC=m(Ww),Wu=r(Ww,"P",{});var WG=o(Wu);Yu=r(WG,"A",{href:!0});var YZ=o(Yu);iC=i(YZ,"datasets.DatasetInfo"),YZ.forEach(a),pC=i(WG," object containing all the metadata in the dataset."),WG.forEach(a),Ww.forEach(a),cC=m(S),Nl=r(S,"DIV",{class:!0});var Yw=o(Nl);b(hm.$$.fragment,Yw),dC=m(Yw),Ju=r(Yw,"P",{});var YG=o(Ju);Ku=r(YG,"A",{href:!0});var JZ=o(Ku);mC=i(JZ,"datasets.NamedSplit"),JZ.forEach(a),hC=i(YG," object corresponding to a named dataset split."),YG.forEach(a),Yw.forEach(a),fC=m(S),Zu=r(S,"DIV",{class:!0});var KZ=o(Zu);b(fm.$$.fragment,KZ),KZ.forEach(a),uC=m(S),Xu=r(S,"DIV",{class:!0});var ZZ=o(Xu);b(um.$$.fragment,ZZ),ZZ.forEach(a),gC=m(S),Qu=r(S,"DIV",{class:!0});var XZ=o(Qu);b(gm.$$.fragment,XZ),XZ.forEach(a),_C=m(S),eg=r(S,"DIV",{class:!0});var QZ=o(eg);b(_m.$$.fragment,QZ),QZ.forEach(a),bC=m(S),tg=r(S,"DIV",{class:!0});var eX=o(tg);b(bm.$$.fragment,eX),eX.forEach(a),$C=m(S),ag=r(S,"DIV",{class:!0});var tX=o(ag);b($m.$$.fragment,tX),tX.forEach(a),xC=m(S),sg=r(S,"DIV",{class:!0});var aX=o(sg);b(xm.$$.fragment,aX),aX.forEach(a),vC=m(S),ng=r(S,"DIV",{class:!0});var sX=o(ng);b(vm.$$.fragment,sX),sX.forEach(a),yC=m(S),rg=r(S,"DIV",{class:!0});var nX=o(rg);b(ym.$$.fragment,nX),nX.forEach(a),jC=m(S),og=r(S,"DIV",{class:!0});var rX=o(og);b(jm.$$.fragment,rX),rX.forEach(a),wC=m(S),lg=r(S,"DIV",{class:!0});var oX=o(lg);b(wm.$$.fragment,oX),oX.forEach(a),DC=m(S),ig=r(S,"DIV",{class:!0});var lX=o(ig);b(Dm.$$.fragment,lX),lX.forEach(a),kC=m(S),pg=r(S,"DIV",{class:!0});var iX=o(pg);b(km.$$.fragment,iX),iX.forEach(a),S.forEach(a),P0=m(s),qn=r(s,"H2",{class:!0});var Jw=o(qn);Pl=r(Jw,"A",{id:!0,class:!0,href:!0});var pX=o(Pl);iv=r(pX,"SPAN",{});var cX=o(iv);b(Em.$$.fragment,cX),cX.forEach(a),pX.forEach(a),EC=m(Jw),pv=r(Jw,"SPAN",{});var dX=o(pv);IC=i(dX,"IterableDatasetDict"),dX.forEach(a),Jw.forEach(a),L0=m(s),Ll=r(s,"P",{});var Kw=o(Ll);qC=i(Kw,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),cv=r(Kw,"CODE",{});var mX=o(cv);TC=i(mX,"IterableDataset"),mX.forEach(a),NC=i(Kw," objects as values."),Kw.forEach(a),F0=m(s),U=r(s,"DIV",{class:!0});var B=o(U);b(Im.$$.fragment,B),PC=m(B),Pe=r(B,"DIV",{class:!0});var Rs=o(Pe);b(qm.$$.fragment,Rs),LC=m(Rs),dv=r(Rs,"P",{});var hX=o(dv);FC=i(hX,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),hX.forEach(a),AC=m(Rs),Tm=r(Rs,"P",{});var Zw=o(Tm);SC=i(Zw,"You can specify whether the function should be batched or not with the "),mv=r(Zw,"CODE",{});var fX=o(mv);OC=i(fX,"batched"),fX.forEach(a),CC=i(Zw," parameter:"),Zw.forEach(a),zC=m(Rs),Tn=r(Rs,"UL",{});var nb=o(Tn);hv=r(nb,"LI",{});var uX=o(hv);VC=i(uX,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),uX.forEach(a),UC=m(nb),fv=r(nb,"LI",{});var gX=o(fv);MC=i(gX,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),gX.forEach(a),RC=m(nb),ue=r(nb,"LI",{});var xt=o(ue);BC=i(xt,"If batched is True and batch_size is "),uv=r(xt,"CODE",{});var _X=o(uv);HC=i(_X,"n"),_X.forEach(a),GC=i(xt," > 1, then the function takes a batch of "),gv=r(xt,"CODE",{});var bX=o(gv);WC=i(bX,"n"),bX.forEach(a),YC=i(xt," examples as input and can return a batch with "),_v=r(xt,"CODE",{});var $X=o(_v);JC=i($X,"n"),$X.forEach(a),KC=i(xt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),bv=r(xt,"CODE",{});var xX=o(bv);ZC=i(xX,"n"),xX.forEach(a),XC=i(xt,` examples.
A batch is a dictionary, e.g. a batch of `),$v=r(xt,"CODE",{});var vX=o($v);QC=i(vX,"n"),vX.forEach(a),ez=i(xt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),xt.forEach(a),nb.forEach(a),tz=m(Rs),b(Fl.$$.fragment,Rs),Rs.forEach(a),az=m(B),ds=r(B,"DIV",{class:!0});var rb=o(ds);b(Nm.$$.fragment,rb),sz=m(rb),xv=r(rb,"P",{});var yX=o(xv);nz=i(yX,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),yX.forEach(a),rz=m(rb),b(Al.$$.fragment,rb),rb.forEach(a),oz=m(B),le=r(B,"DIV",{class:!0});var vt=o(le);b(Pm.$$.fragment,vt),lz=m(vt),vv=r(vt,"P",{});var jX=o(vv);iz=i(jX,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),jX.forEach(a),pz=m(vt),yv=r(vt,"P",{});var wX=o(yv);cz=i(wX,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),wX.forEach(a),dz=m(vt),Lm=r(vt,"P",{});var Xw=o(Lm);mz=i(Xw,"For instance, if your dataset contains 10,000 elements but "),jv=r(Xw,"CODE",{});var DX=o(jv);hz=i(DX,"buffer_size"),DX.forEach(a),fz=i(Xw,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Xw.forEach(a),uz=m(vt),Nn=r(vt,"P",{});var ob=o(Nn);gz=i(ob,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),cg=r(ob,"A",{href:!0});var kX=o(cg);_z=i(kX,"datasets.IterableDataset.skip()"),kX.forEach(a),bz=i(ob," or "),dg=r(ob,"A",{href:!0});var EX=o(dg);$z=i(EX,"datasets.IterableDataset.take()"),EX.forEach(a),xz=i(ob,`
then the order of the shards is kept unchanged.`),ob.forEach(a),vz=m(vt),b(Sl.$$.fragment,vt),vt.forEach(a),yz=m(B),ms=r(B,"DIV",{class:!0});var lb=o(ms);b(Fm.$$.fragment,lb),jz=m(lb),wv=r(lb,"P",{});var IX=o(wv);wz=i(IX,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),IX.forEach(a),Dz=m(lb),b(Ol.$$.fragment,lb),lb.forEach(a),kz=m(B),hs=r(B,"DIV",{class:!0});var ib=o(hs);b(Am.$$.fragment,ib),Ez=m(ib),Dv=r(ib,"P",{});var qX=o(Dv);Iz=i(qX,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),qX.forEach(a),qz=m(ib),b(Cl.$$.fragment,ib),ib.forEach(a),Tz=m(B),fs=r(B,"DIV",{class:!0});var pb=o(fs);b(Sm.$$.fragment,pb),Nz=m(pb),kv=r(pb,"P",{});var TX=o(kv);Pz=i(TX,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),TX.forEach(a),Lz=m(pb),b(zl.$$.fragment,pb),pb.forEach(a),Fz=m(B),us=r(B,"DIV",{class:!0});var cb=o(us);b(Om.$$.fragment,cb),Az=m(cb),Ev=r(cb,"P",{});var NX=o(Ev);Sz=i(NX,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),NX.forEach(a),Oz=m(cb),b(Vl.$$.fragment,cb),cb.forEach(a),Cz=m(B),gs=r(B,"DIV",{class:!0});var db=o(gs);b(Cm.$$.fragment,db),zz=m(db),Iv=r(db,"P",{});var PX=o(Iv);Vz=i(PX,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),PX.forEach(a),Uz=m(db),b(Ul.$$.fragment,db),db.forEach(a),Mz=m(B),_s=r(B,"DIV",{class:!0});var mb=o(_s);b(zm.$$.fragment,mb),Rz=m(mb),qv=r(mb,"P",{});var LX=o(qv);Bz=i(LX,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),LX.forEach(a),Hz=m(mb),b(Ml.$$.fragment,mb),mb.forEach(a),B.forEach(a),A0=m(s),Pn=r(s,"H2",{class:!0});var Qw=o(Pn);Rl=r(Qw,"A",{id:!0,class:!0,href:!0});var FX=o(Rl);Tv=r(FX,"SPAN",{});var AX=o(Tv);b(Vm.$$.fragment,AX),AX.forEach(a),FX.forEach(a),Gz=m(Qw),Nv=r(Qw,"SPAN",{});var SX=o(Nv);Wz=i(SX,"Features"),SX.forEach(a),Qw.forEach(a),S0=m(s),O=r(s,"DIV",{class:!0});var z=o(O);b(Um.$$.fragment,z),Yz=m(z),Pv=r(z,"P",{});var OX=o(Pv);Jz=i(OX,"A special dictionary that defines the internal structure of a dataset."),OX.forEach(a),Kz=m(z),Mm=r(z,"P",{});var e4=o(Mm);Zz=i(e4,"Instantiated with a dictionary of type "),Lv=r(e4,"CODE",{});var CX=o(Lv);Xz=i(CX,"dict[str, FieldType]"),CX.forEach(a),Qz=i(e4,`, where keys are the desired column names,
and values are the type of that column.`),e4.forEach(a),eV=m(z),mg=r(z,"P",{});var JG=o(mg);Fv=r(JG,"CODE",{});var zX=o(Fv);tV=i(zX,"FieldType"),zX.forEach(a),aV=i(JG," can be one of the following:"),JG.forEach(a),sV=m(z),G=r(z,"UL",{});var pe=o(G);Av=r(pe,"LI",{});var VX=o(Av);bs=r(VX,"P",{});var jf=o(bs);nV=i(jf,"a "),hg=r(jf,"A",{href:!0});var UX=o(hg);rV=i(UX,"datasets.Value"),UX.forEach(a),oV=i(jf," feature specifies a single typed value, e.g. "),Sv=r(jf,"CODE",{});var MX=o(Sv);lV=i(MX,"int64"),MX.forEach(a),iV=i(jf," or "),Ov=r(jf,"CODE",{});var RX=o(Ov);pV=i(RX,"string"),RX.forEach(a),jf.forEach(a),VX.forEach(a),cV=m(pe),Cv=r(pe,"LI",{});var BX=o(Cv);Rm=r(BX,"P",{});var t4=o(Rm);dV=i(t4,"a "),fg=r(t4,"A",{href:!0});var HX=o(fg);mV=i(HX,"datasets.ClassLabel"),HX.forEach(a),hV=i(t4,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),t4.forEach(a),BX.forEach(a),fV=m(pe),zv=r(pe,"LI",{});var GX=o(zv);Bm=r(GX,"P",{});var a4=o(Bm);uV=i(a4,"a python "),Vv=r(a4,"CODE",{});var WX=o(Vv);gV=i(WX,"dict"),WX.forEach(a),_V=i(a4,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),a4.forEach(a),GX.forEach(a),bV=m(pe),Hm=r(pe,"LI",{});var s4=o(Hm);Re=r(s4,"P",{});var Bs=o(Re);$V=i(Bs,"a python "),Uv=r(Bs,"CODE",{});var YX=o(Uv);xV=i(YX,"list"),YX.forEach(a),vV=i(Bs," or a "),ug=r(Bs,"A",{href:!0});var JX=o(ug);yV=i(JX,"datasets.Sequence"),JX.forEach(a),jV=i(Bs,` specifies that the field contains a list of objects. The python
`),Mv=r(Bs,"CODE",{});var KX=o(Mv);wV=i(KX,"list"),KX.forEach(a),DV=i(Bs," or "),gg=r(Bs,"A",{href:!0});var ZX=o(gg);kV=i(ZX,"datasets.Sequence"),ZX.forEach(a),EV=i(Bs,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),Bs.forEach(a),IV=m(s4),b(Bl.$$.fragment,s4),s4.forEach(a),qV=m(pe),Rv=r(pe,"LI",{});var XX=o(Rv);Be=r(XX,"P",{});var Hs=o(Be);TV=i(Hs,"a "),_g=r(Hs,"A",{href:!0});var QX=o(_g);NV=i(QX,"Array2D"),QX.forEach(a),PV=i(Hs,", "),bg=r(Hs,"A",{href:!0});var eQ=o(bg);LV=i(eQ,"Array3D"),eQ.forEach(a),FV=i(Hs,", "),$g=r(Hs,"A",{href:!0});var tQ=o($g);AV=i(tQ,"Array4D"),tQ.forEach(a),SV=i(Hs," or "),xg=r(Hs,"A",{href:!0});var aQ=o(xg);OV=i(aQ,"Array5D"),aQ.forEach(a),CV=i(Hs," feature for multidimensional arrays"),Hs.forEach(a),XX.forEach(a),zV=m(pe),Bv=r(pe,"LI",{});var sQ=o(Bv);Gm=r(sQ,"P",{});var n4=o(Gm);VV=i(n4,"an "),vg=r(n4,"A",{href:!0});var nQ=o(vg);UV=i(nQ,"Audio"),nQ.forEach(a),MV=i(n4,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),n4.forEach(a),sQ.forEach(a),RV=m(pe),Hv=r(pe,"LI",{});var rQ=o(Hv);Ut=r(rQ,"P",{});var Xi=o(Ut);BV=i(Xi,"an "),yg=r(Xi,"A",{href:!0});var oQ=o(yg);HV=i(oQ,"Image"),oQ.forEach(a),GV=i(Xi," feature to store the absolute path to an image file, an "),Gv=r(Xi,"CODE",{});var lQ=o(Gv);WV=i(lQ,"np.ndarray"),lQ.forEach(a),YV=i(Xi," object, a "),Wv=r(Xi,"CODE",{});var iQ=o(Wv);JV=i(iQ,"PIL.Image.Image"),iQ.forEach(a),KV=i(Xi,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Xi.forEach(a),rQ.forEach(a),ZV=m(pe),Yv=r(pe,"LI",{});var pQ=o(Yv);Hl=r(pQ,"P",{});var f0=o(Hl);jg=r(f0,"A",{href:!0});var cQ=o(jg);XV=i(cQ,"datasets.Translation"),cQ.forEach(a),QV=i(f0," and "),wg=r(f0,"A",{href:!0});var dQ=o(wg);eU=i(dQ,"datasets.TranslationVariableLanguages"),dQ.forEach(a),tU=i(f0,", the two features specific to Machine Translation"),f0.forEach(a),pQ.forEach(a),pe.forEach(a),aU=m(z),Gl=r(z,"DIV",{class:!0});var r4=o(Gl);b(Wm.$$.fragment,r4),sU=m(r4),Jv=r(r4,"P",{});var mQ=o(Jv);nU=i(mQ,"Make a deep copy of Features."),mQ.forEach(a),r4.forEach(a),rU=m(z),Wl=r(z,"DIV",{class:!0});var o4=o(Wl);b(Ym.$$.fragment,o4),oU=m(o4),Kv=r(o4,"P",{});var hQ=o(Kv);lU=i(hQ,"Decode batch with custom feature decoding."),hQ.forEach(a),o4.forEach(a),iU=m(z),Yl=r(z,"DIV",{class:!0});var l4=o(Yl);b(Jm.$$.fragment,l4),pU=m(l4),Zv=r(l4,"P",{});var fQ=o(Zv);cU=i(fQ,"Decode column with custom feature decoding."),fQ.forEach(a),l4.forEach(a),dU=m(z),Jl=r(z,"DIV",{class:!0});var i4=o(Jl);b(Km.$$.fragment,i4),mU=m(i4),Xv=r(i4,"P",{});var uQ=o(Xv);hU=i(uQ,"Decode example with custom feature decoding."),uQ.forEach(a),i4.forEach(a),fU=m(z),Kl=r(z,"DIV",{class:!0});var p4=o(Kl);b(Zm.$$.fragment,p4),uU=m(p4),Qv=r(p4,"P",{});var gQ=o(Qv);gU=i(gQ,"Encode batch into a format for Arrow."),gQ.forEach(a),p4.forEach(a),_U=m(z),Zl=r(z,"DIV",{class:!0});var c4=o(Zl);b(Xm.$$.fragment,c4),bU=m(c4),ey=r(c4,"P",{});var _Q=o(ey);$U=i(_Q,"Encode example into a format for Arrow."),_Q.forEach(a),c4.forEach(a),xU=m(z),$s=r(z,"DIV",{class:!0});var hb=o($s);b(Qm.$$.fragment,hb),vU=m(hb),ty=r(hb,"P",{});var bQ=o(ty);yU=i(bQ,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),bQ.forEach(a),jU=m(hb),ay=r(hb,"P",{});var $Q=o(ay);wU=i($Q,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),$Q.forEach(a),hb.forEach(a),DU=m(z),Xl=r(z,"DIV",{class:!0});var d4=o(Xl);b(eh.$$.fragment,d4),kU=m(d4),sy=r(d4,"P",{});var xQ=o(sy);EU=i(xQ,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),xQ.forEach(a),d4.forEach(a),IU=m(z),Le=r(z,"DIV",{class:!0});var Gs=o(Le);b(th.$$.fragment,Gs),qU=m(Gs),ny=r(Gs,"P",{});var vQ=o(ny);TU=i(vQ,"Construct Features from dict."),vQ.forEach(a),NU=m(Gs),ry=r(Gs,"P",{});var yQ=o(ry);PU=i(yQ,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),yQ.forEach(a),LU=m(Gs),Mt=r(Gs,"P",{});var Qi=o(Mt);FU=i(Qi,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Dg=r(Qi,"A",{href:!0});var jQ=o(Dg);AU=i(jQ,"DatasetInfo"),jQ.forEach(a),SU=i(Qi,` that was dumped to a JSON object. This acts as an analogue to
`),kg=r(Qi,"A",{href:!0});var wQ=o(kg);OU=i(wQ,"Features.from_arrow_schema()"),wQ.forEach(a),CU=i(Qi,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Eg=r(Qi,"A",{href:!0});var DQ=o(Eg);zU=i(DQ,"Value"),DQ.forEach(a),VU=i(Qi," automatically performs."),Qi.forEach(a),UU=m(Gs),b(Ql.$$.fragment,Gs),Gs.forEach(a),MU=m(z),ht=r(z,"DIV",{class:!0});var ep=o(ht);b(ah.$$.fragment,ep),RU=m(ep),oy=r(ep,"P",{});var kQ=o(oy);BU=i(kQ,"Reorder Features fields to match the field order of other Features."),kQ.forEach(a),HU=m(ep),ly=r(ep,"P",{});var EQ=o(ly);GU=i(EQ,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),EQ.forEach(a),WU=m(ep),b(ei.$$.fragment,ep),ep.forEach(a),z.forEach(a),O0=m(s),Ln=r(s,"DIV",{class:!0});var m4=o(Ln);b(sh.$$.fragment,m4),YU=m(m4),iy=r(m4,"P",{});var IQ=o(iy);JU=i(IQ,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),IQ.forEach(a),m4.forEach(a),C0=m(s),X=r(s,"DIV",{class:!0});var yt=o(X);b(nh.$$.fragment,yt),KU=m(yt),py=r(yt,"P",{});var qQ=o(py);ZU=i(qQ,"Feature type for integer class labels."),qQ.forEach(a),XU=m(yt),rh=r(yt,"P",{});var h4=o(rh);QU=i(h4,"There are 3 ways to define a "),cy=r(h4,"EM",{});var TQ=o(cy);eM=i(TQ,"ClassLabel"),TQ.forEach(a),tM=i(h4,", which correspond to the 3 arguments:"),h4.forEach(a),aM=m(yt),Fn=r(yt,"UL",{});var fb=o(Fn);Ig=r(fb,"LI",{});var KG=o(Ig);dy=r(KG,"EM",{});var NQ=o(dy);sM=i(NQ,"num_classes"),NQ.forEach(a),nM=i(KG,": Create 0 to (num_classes-1) labels."),KG.forEach(a),rM=m(fb),qg=r(fb,"LI",{});var ZG=o(qg);my=r(ZG,"EM",{});var PQ=o(my);oM=i(PQ,"names"),PQ.forEach(a),lM=i(ZG,": List of label strings."),ZG.forEach(a),iM=m(fb),Tg=r(fb,"LI",{});var XG=o(Tg);hy=r(XG,"EM",{});var LQ=o(hy);pM=i(LQ,"names_file"),LQ.forEach(a),cM=i(XG,": File containing the list of labels."),XG.forEach(a),fb.forEach(a),dM=m(yt),ti=r(yt,"DIV",{class:!0});var f4=o(ti);b(oh.$$.fragment,f4),mM=m(f4),fy=r(f4,"P",{});var FQ=o(fy);hM=i(FQ,"Conversion integer => class name string."),FQ.forEach(a),f4.forEach(a),fM=m(yt),ai=r(yt,"DIV",{class:!0});var u4=o(ai);b(lh.$$.fragment,u4),uM=m(u4),uy=r(u4,"P",{});var AQ=o(uy);gM=i(AQ,"Conversion class name string => integer."),AQ.forEach(a),u4.forEach(a),yt.forEach(a),z0=m(s),Rt=r(s,"DIV",{class:!0});var ub=o(Rt);b(ih.$$.fragment,ub),_M=m(ub),gy=r(ub,"P",{});var SQ=o(gy);bM=i(SQ,"The Value dtypes are as follows:"),SQ.forEach(a),$M=m(ub),_y=r(ub,"P",{});var OQ=o(_y);xM=i(OQ,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),OQ.forEach(a),ub.forEach(a),V0=m(s),Q=r(s,"DIV",{class:!0});var jt=o(Q);b(ph.$$.fragment,jt),vM=m(jt),Ng=r(jt,"P",{});var QG=o(Ng);by=r(QG,"CODE",{});var CQ=o(by);yM=i(CQ,"FeatureConnector"),CQ.forEach(a),jM=i(QG,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),QG.forEach(a),wM=m(jt),$y=r(jt,"P",{});var zQ=o($y);DM=i(zQ,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),zQ.forEach(a),kM=m(jt),ch=r(jt,"P",{});var g4=o(ch);EM=i(g4,"Output: A dictionary mapping string language codes to translations as "),xy=r(g4,"CODE",{});var VQ=o(xy);IM=i(VQ,"Text"),VQ.forEach(a),qM=i(g4,`
features.`),g4.forEach(a),TM=m(jt),b(si.$$.fragment,jt),NM=m(jt),ni=r(jt,"DIV",{class:!0});var _4=o(ni);b(dh.$$.fragment,_4),PM=m(_4),vy=r(_4,"P",{});var UQ=o(vy);LM=i(UQ,"Flatten the Translation feature into a dictionary."),UQ.forEach(a),_4.forEach(a),jt.forEach(a),U0=m(s),ee=r(s,"DIV",{class:!0});var wt=o(ee);b(mh.$$.fragment,wt),FM=m(wt),Pg=r(wt,"P",{});var eW=o(Pg);yy=r(eW,"CODE",{});var MQ=o(yy);AM=i(MQ,"FeatureConnector"),MQ.forEach(a),SM=i(eW,` for translations with variable languages per example.
Here for compatiblity with tfds.`),eW.forEach(a),OM=m(wt),jy=r(wt,"P",{});var RQ=o(jy);CM=i(RQ,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),RQ.forEach(a),zM=m(wt),wy=r(wt,"P",{});var BQ=o(wy);VM=i(BQ,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),BQ.forEach(a),UM=m(wt),b(ri.$$.fragment,wt),MM=m(wt),oi=r(wt,"DIV",{class:!0});var b4=o(oi);b(hh.$$.fragment,b4),RM=m(b4),Dy=r(b4,"P",{});var HQ=o(Dy);BM=i(HQ,"Flatten the TranslationVariableLanguages feature into a dictionary."),HQ.forEach(a),b4.forEach(a),wt.forEach(a),M0=m(s),fh=r(s,"DIV",{class:!0});var GQ=o(fh);b(uh.$$.fragment,GQ),GQ.forEach(a),R0=m(s),gh=r(s,"DIV",{class:!0});var WQ=o(gh);b(_h.$$.fragment,WQ),WQ.forEach(a),B0=m(s),bh=r(s,"DIV",{class:!0});var YQ=o(bh);b($h.$$.fragment,YQ),YQ.forEach(a),H0=m(s),xh=r(s,"DIV",{class:!0});var JQ=o(xh);b(vh.$$.fragment,JQ),JQ.forEach(a),G0=m(s),M=r(s,"DIV",{class:!0});var Y=o(M);b(yh.$$.fragment,Y),HM=m(Y),ky=r(Y,"P",{});var KQ=o(ky);GM=i(KQ,"Audio Feature to extract audio data from an audio file."),KQ.forEach(a),WM=m(Y),Ey=r(Y,"P",{});var ZQ=o(Ey);YM=i(ZQ,"Input: The Audio feature accepts as input:"),ZQ.forEach(a),JM=m(Y),An=r(Y,"UL",{});var gb=o(An);Iy=r(gb,"LI",{});var XQ=o(Iy);jh=r(XQ,"P",{});var $4=o(jh);KM=i($4,"A "),qy=r($4,"CODE",{});var QQ=o(qy);ZM=i(QQ,"str"),QQ.forEach(a),XM=i($4,": Absolute path to the audio file (i.e. random access is allowed)."),$4.forEach(a),XQ.forEach(a),QM=m(gb),Sn=r(gb,"LI",{});var _b=o(Sn);wh=r(_b,"P",{});var x4=o(wh);eR=i(x4,"A "),Ty=r(x4,"CODE",{});var eee=o(Ty);tR=i(eee,"dict"),eee.forEach(a),aR=i(x4," with the keys:"),x4.forEach(a),sR=m(_b),Dh=r(_b,"UL",{});var v4=o(Dh);Ny=r(v4,"LI",{});var tee=o(Ny);nR=i(tee,"path: String with relative path of the audio file to the archive file."),tee.forEach(a),rR=m(v4),Py=r(v4,"LI",{});var aee=o(Py);oR=i(aee,"bytes: Bytes content of the audio file."),aee.forEach(a),v4.forEach(a),lR=m(_b),Ly=r(_b,"P",{});var see=o(Ly);iR=i(see,"This is useful for archived files with sequential access."),see.forEach(a),_b.forEach(a),pR=m(gb),On=r(gb,"LI",{});var bb=o(On);kh=r(bb,"P",{});var y4=o(kh);cR=i(y4,"A "),Fy=r(y4,"CODE",{});var nee=o(Fy);dR=i(nee,"dict"),nee.forEach(a),mR=i(y4," with the keys:"),y4.forEach(a),hR=m(bb),Cn=r(bb,"UL",{});var $b=o(Cn);Ay=r($b,"LI",{});var ree=o(Ay);fR=i(ree,"path: String with relative path of the audio file to the archive file."),ree.forEach(a),uR=m($b),Sy=r($b,"LI",{});var oee=o(Sy);gR=i(oee,"array: Array containing the audio sample"),oee.forEach(a),_R=m($b),Oy=r($b,"LI",{});var lee=o(Oy);bR=i(lee,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),lee.forEach(a),$b.forEach(a),$R=m(bb),Cy=r(bb,"P",{});var iee=o(Cy);xR=i(iee,"This is useful for archived files with sequential access."),iee.forEach(a),bb.forEach(a),gb.forEach(a),vR=m(Y),xs=r(Y,"DIV",{class:!0});var xb=o(xs);b(Eh.$$.fragment,xb),yR=m(xb),zy=r(xb,"P",{});var pee=o(zy);jR=i(pee,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),pee.forEach(a),wR=m(xb),Bt=r(xb,"UL",{});var tp=o(Bt);Vy=r(tp,"LI",{});var cee=o(Vy);DR=i(cee,"pa.string() - it must contain the \u201Cpath\u201D data"),cee.forEach(a),kR=m(tp),Uy=r(tp,"LI",{});var dee=o(Uy);ER=i(dee,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),dee.forEach(a),IR=m(tp),My=r(tp,"LI",{});var mee=o(My);qR=i(mee,"pa.struct({\u201Cpath\u201D: pa.string()})"),mee.forEach(a),TR=m(tp),Ry=r(tp,"LI",{});var hee=o(Ry);NR=i(hee,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),hee.forEach(a),tp.forEach(a),xb.forEach(a),PR=m(Y),li=r(Y,"DIV",{class:!0});var j4=o(li);b(Ih.$$.fragment,j4),LR=m(j4),By=r(j4,"P",{});var fee=o(By);FR=i(fee,"Decode example audio file into audio data."),fee.forEach(a),j4.forEach(a),AR=m(Y),ii=r(Y,"DIV",{class:!0});var w4=o(ii);b(qh.$$.fragment,w4),SR=m(w4),Hy=r(w4,"P",{});var uee=o(Hy);OR=i(uee,"Embed audio files into the Arrow array."),uee.forEach(a),w4.forEach(a),CR=m(Y),pi=r(Y,"DIV",{class:!0});var D4=o(pi);b(Th.$$.fragment,D4),zR=m(D4),Gy=r(D4,"P",{});var gee=o(Gy);VR=i(gee,"Encode example into a format for Arrow."),gee.forEach(a),D4.forEach(a),UR=m(Y),ci=r(Y,"DIV",{class:!0});var k4=o(ci);b(Nh.$$.fragment,k4),MR=m(k4),Wy=r(k4,"P",{});var _ee=o(Wy);RR=i(_ee,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),_ee.forEach(a),k4.forEach(a),Y.forEach(a),W0=m(s),R=r(s,"DIV",{class:!0});var J=o(R);b(Ph.$$.fragment,J),BR=m(J),Yy=r(J,"P",{});var bee=o(Yy);HR=i(bee,"Image feature to read image data from an image file."),bee.forEach(a),GR=m(J),Jy=r(J,"P",{});var $ee=o(Jy);WR=i($ee,"Input: The Image feature accepts as input:"),$ee.forEach(a),YR=m(J),Ht=r(J,"UL",{});var ap=o(Ht);Ky=r(ap,"LI",{});var xee=o(Ky);Lh=r(xee,"P",{});var E4=o(Lh);JR=i(E4,"A "),Zy=r(E4,"CODE",{});var vee=o(Zy);KR=i(vee,"str"),vee.forEach(a),ZR=i(E4,": Absolute path to the image file (i.e. random access is allowed)."),E4.forEach(a),xee.forEach(a),XR=m(ap),zn=r(ap,"LI",{});var vb=o(zn);Fh=r(vb,"P",{});var I4=o(Fh);QR=i(I4,"A "),Xy=r(I4,"CODE",{});var yee=o(Xy);eB=i(yee,"dict"),yee.forEach(a),tB=i(I4," with the keys:"),I4.forEach(a),aB=m(vb),Ah=r(vb,"UL",{});var q4=o(Ah);Qy=r(q4,"LI",{});var jee=o(Qy);sB=i(jee,"path: String with relative path of the image file to the archive file."),jee.forEach(a),nB=m(q4),ej=r(q4,"LI",{});var wee=o(ej);rB=i(wee,"bytes: Bytes of the image file."),wee.forEach(a),q4.forEach(a),oB=m(vb),tj=r(vb,"P",{});var Dee=o(tj);lB=i(Dee,"This is useful for archived files with sequential access."),Dee.forEach(a),vb.forEach(a),iB=m(ap),aj=r(ap,"LI",{});var kee=o(aj);Sh=r(kee,"P",{});var T4=o(Sh);pB=i(T4,"An "),sj=r(T4,"CODE",{});var Eee=o(sj);cB=i(Eee,"np.ndarray"),Eee.forEach(a),dB=i(T4,": NumPy array representing an image."),T4.forEach(a),kee.forEach(a),mB=m(ap),nj=r(ap,"LI",{});var Iee=o(nj);Oh=r(Iee,"P",{});var N4=o(Oh);hB=i(N4,"A "),rj=r(N4,"CODE",{});var qee=o(rj);fB=i(qee,"PIL.Image.Image"),qee.forEach(a),uB=i(N4,": PIL image object."),N4.forEach(a),Iee.forEach(a),ap.forEach(a),gB=m(J),vs=r(J,"DIV",{class:!0});var yb=o(vs);b(Ch.$$.fragment,yb),_B=m(yb),oj=r(yb,"P",{});var Tee=o(oj);bB=i(Tee,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),Tee.forEach(a),$B=m(yb),He=r(yb,"UL",{});var Ws=o(He);lj=r(Ws,"LI",{});var Nee=o(lj);xB=i(Nee,"pa.string() - it must contain the \u201Cpath\u201D data"),Nee.forEach(a),vB=m(Ws),ij=r(Ws,"LI",{});var Pee=o(ij);yB=i(Pee,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Pee.forEach(a),jB=m(Ws),pj=r(Ws,"LI",{});var Lee=o(pj);wB=i(Lee,"pa.struct({\u201Cpath\u201D: pa.string()})"),Lee.forEach(a),DB=m(Ws),cj=r(Ws,"LI",{});var Fee=o(cj);kB=i(Fee,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Fee.forEach(a),EB=m(Ws),dj=r(Ws,"LI",{});var Aee=o(dj);IB=i(Aee,"pa.list(*) - it must contain the image array data"),Aee.forEach(a),Ws.forEach(a),yb.forEach(a),qB=m(J),di=r(J,"DIV",{class:!0});var P4=o(di);b(zh.$$.fragment,P4),TB=m(P4),mj=r(P4,"P",{});var See=o(mj);NB=i(See,"Decode example image file into image data."),See.forEach(a),P4.forEach(a),PB=m(J),mi=r(J,"DIV",{class:!0});var L4=o(mi);b(Vh.$$.fragment,L4),LB=m(L4),hj=r(L4,"P",{});var Oee=o(hj);FB=i(Oee,"Embed image files into the Arrow array."),Oee.forEach(a),L4.forEach(a),AB=m(J),hi=r(J,"DIV",{class:!0});var F4=o(hi);b(Uh.$$.fragment,F4),SB=m(F4),fj=r(F4,"P",{});var Cee=o(fj);OB=i(Cee,"Encode example into a format for Arrow."),Cee.forEach(a),F4.forEach(a),CB=m(J),fi=r(J,"DIV",{class:!0});var A4=o(fi);b(Mh.$$.fragment,A4),zB=m(A4),uj=r(A4,"P",{});var zee=o(uj);VB=i(zee,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),zee.forEach(a),A4.forEach(a),J.forEach(a),Y0=m(s),Vn=r(s,"H2",{class:!0});var S4=o(Vn);ui=r(S4,"A",{id:!0,class:!0,href:!0});var Vee=o(ui);gj=r(Vee,"SPAN",{});var Uee=o(gj);b(Rh.$$.fragment,Uee),Uee.forEach(a),Vee.forEach(a),UB=m(S4),_j=r(S4,"SPAN",{});var Mee=o(_j);MB=i(Mee,"MetricInfo"),Mee.forEach(a),S4.forEach(a),J0=m(s),te=r(s,"DIV",{class:!0});var Dt=o(te);b(Bh.$$.fragment,Dt),RB=m(Dt),bj=r(Dt,"P",{});var Ree=o(bj);BB=i(Ree,"Information about a metric."),Ree.forEach(a),HB=m(Dt),Lg=r(Dt,"P",{});var tW=o(Lg);$j=r(tW,"CODE",{});var Bee=o($j);GB=i(Bee,"MetricInfo"),Bee.forEach(a),WB=i(tW,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),tW.forEach(a),YB=m(Dt),xj=r(Dt,"P",{});var Hee=o(xj);JB=i(Hee,"Note: Not all fields are known on construction and may be updated later."),Hee.forEach(a),KB=m(Dt),gi=r(Dt,"DIV",{class:!0});var O4=o(gi);b(Hh.$$.fragment,O4),ZB=m(O4),Gh=r(O4,"P",{});var C4=o(Gh);XB=i(C4,"Create MetricInfo from the JSON file in "),vj=r(C4,"CODE",{});var Gee=o(vj);QB=i(Gee,"metric_info_dir"),Gee.forEach(a),eH=i(C4,"."),C4.forEach(a),O4.forEach(a),tH=m(Dt),_i=r(Dt,"DIV",{class:!0});var z4=o(_i);b(Wh.$$.fragment,z4),aH=m(z4),Gt=r(z4,"P",{});var sp=o(Gt);sH=i(sp,"Write "),yj=r(sp,"CODE",{});var Wee=o(yj);nH=i(Wee,"MetricInfo"),Wee.forEach(a),rH=i(sp," as JSON to "),jj=r(sp,"CODE",{});var Yee=o(jj);oH=i(Yee,"metric_info_dir"),Yee.forEach(a),lH=i(sp,`.
Also save the license separately in LICENCE.
If `),wj=r(sp,"CODE",{});var Jee=o(wj);iH=i(Jee,"pretty_print"),Jee.forEach(a),pH=i(sp," is True, the JSON will be pretty-printed with the indent level of 4."),sp.forEach(a),z4.forEach(a),Dt.forEach(a),K0=m(s),Un=r(s,"H2",{class:!0});var V4=o(Un);bi=r(V4,"A",{id:!0,class:!0,href:!0});var Kee=o(bi);Dj=r(Kee,"SPAN",{});var Zee=o(Dj);b(Yh.$$.fragment,Zee),Zee.forEach(a),Kee.forEach(a),cH=m(V4),kj=r(V4,"SPAN",{});var Xee=o(kj);dH=i(Xee,"Metric"),Xee.forEach(a),V4.forEach(a),Z0=m(s),ys=r(s,"P",{});var jb=o(ys);mH=i(jb,"The base class "),Ej=r(jb,"CODE",{});var Qee=o(Ej);hH=i(Qee,"Metric"),Qee.forEach(a),fH=i(jb," implements a Metric backed by one or several "),Fg=r(jb,"A",{href:!0});var ete=o(Fg);uH=i(ete,"Dataset"),ete.forEach(a),gH=i(jb,"."),jb.forEach(a),X0=m(s),ae=r(s,"DIV",{class:!0});var kt=o(ae);b(Jh.$$.fragment,kt),_H=m(kt),Ij=r(kt,"P",{});var tte=o(Ij);bH=i(tte,"A Metric is the base class and common API for all metrics."),tte.forEach(a),$H=m(kt),$i=r(kt,"DIV",{class:!0});var U4=o($i);b(Kh.$$.fragment,U4),xH=m(U4),qj=r(U4,"P",{});var ate=o(qj);vH=i(ate,"Add one prediction and reference for the metric\u2019s stack."),ate.forEach(a),U4.forEach(a),yH=m(kt),xi=r(kt,"DIV",{class:!0});var M4=o(xi);b(Zh.$$.fragment,M4),jH=m(M4),Tj=r(M4,"P",{});var ste=o(Tj);wH=i(ste,"Add a batch of predictions and references for the metric\u2019s stack."),ste.forEach(a),M4.forEach(a),DH=m(kt),js=r(kt,"DIV",{class:!0});var wb=o(js);b(Xh.$$.fragment,wb),kH=m(wb),Nj=r(wb,"P",{});var nte=o(Nj);EH=i(nte,"Compute the metrics."),nte.forEach(a),IH=m(wb),Pj=r(wb,"P",{});var rte=o(Pj);qH=i(rte,"Usage of positional arguments is not allowed to prevent mistakes."),rte.forEach(a),wb.forEach(a),TH=m(kt),vi=r(kt,"DIV",{class:!0});var R4=o(vi);b(Qh.$$.fragment,R4),NH=m(R4),Lj=r(R4,"P",{});var ote=o(Lj);PH=i(ote,"Downloads and prepares dataset for reading."),ote.forEach(a),R4.forEach(a),kt.forEach(a),Q0=m(s),Mn=r(s,"H2",{class:!0});var B4=o(Mn);yi=r(B4,"A",{id:!0,class:!0,href:!0});var lte=o(yi);Fj=r(lte,"SPAN",{});var ite=o(Fj);b(ef.$$.fragment,ite),ite.forEach(a),lte.forEach(a),LH=m(B4),Aj=r(B4,"SPAN",{});var pte=o(Aj);FH=i(pte,"Filesystems"),pte.forEach(a),B4.forEach(a),ew=m(s),C=r(s,"DIV",{class:!0});var V=o(C);b(tf.$$.fragment,V),AH=m(V),ji=r(V,"P",{});var u0=o(ji);Sj=r(u0,"CODE",{});var cte=o(Sj);SH=i(cte,"datasets.filesystems.S3FileSystem"),cte.forEach(a),OH=i(u0," is a subclass of "),af=r(u0,"A",{href:!0,rel:!0});var dte=o(af);Oj=r(dte,"CODE",{});var mte=o(Oj);CH=i(mte,"s3fs.S3FileSystem"),mte.forEach(a),dte.forEach(a),zH=i(u0,"."),u0.forEach(a),VH=m(V),Wt=r(V,"P",{});var np=o(Wt);UH=i(np,"Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),Cj=r(np,"CODE",{});var hte=o(Cj);MH=i(hte,"key="),hte.forEach(a),RH=i(np,", "),zj=r(np,"CODE",{});var fte=o(zj);BH=i(fte,"secret="),fte.forEach(a),HH=i(np,") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are availabe, use "),Vj=r(np,"CODE",{});var ute=o(Vj);GH=i(ute,"anon=True"),ute.forEach(a),WH=i(np,"."),np.forEach(a),YH=m(V),Uj=r(V,"P",{});var gte=o(Uj);JH=i(gte,"Examples:"),gte.forEach(a),KH=m(V),Mj=r(V,"P",{});var _te=o(Mj);ZH=i(_te,"Listing files from public S3 bucket."),_te.forEach(a),XH=m(V),b(wi.$$.fragment,V),QH=m(V),Rn=r(V,"P",{});var Db=o(Rn);eG=i(Db,"Listing files from private S3 bucket using "),Rj=r(Db,"CODE",{});var bte=o(Rj);tG=i(bte,"aws_access_key_id"),bte.forEach(a),aG=i(Db," and "),Bj=r(Db,"CODE",{});var $te=o(Bj);sG=i($te,"aws_secret_access_key"),$te.forEach(a),nG=i(Db,"."),Db.forEach(a),rG=m(V),b(Di.$$.fragment,V),oG=m(V),Yt=r(V,"P",{});var rp=o(Yt);lG=i(rp,"Using "),Hj=r(rp,"CODE",{});var xte=o(Hj);iG=i(xte,"S3Filesystem"),xte.forEach(a),pG=i(rp," with "),Gj=r(rp,"CODE",{});var vte=o(Gj);cG=i(vte,"botocore.session.Session"),vte.forEach(a),dG=i(rp," and custom "),Wj=r(rp,"CODE",{});var yte=o(Wj);mG=i(yte,"aws_profile"),yte.forEach(a),hG=i(rp,"."),rp.forEach(a),fG=m(V),b(ki.$$.fragment,V),uG=m(V),Bn=r(V,"P",{});var kb=o(Bn);gG=i(kb,"Loading dataset from S3 using "),Yj=r(kb,"CODE",{});var jte=o(Yj);_G=i(jte,"S3Filesystem"),jte.forEach(a),bG=i(kb," and "),Ag=r(kb,"A",{href:!0});var wte=o(Ag);$G=i(wte,"load_from_disk()"),wte.forEach(a),xG=i(kb,"."),kb.forEach(a),vG=m(V),b(Ei.$$.fragment,V),yG=m(V),Hn=r(V,"P",{});var Eb=o(Hn);jG=i(Eb,"Saving dataset to S3 using "),Jj=r(Eb,"CODE",{});var Dte=o(Jj);wG=i(Dte,"S3Filesystem"),Dte.forEach(a),DG=i(Eb," and "),Sg=r(Eb,"A",{href:!0});var kte=o(Sg);kG=i(kte,"Dataset.save_to_disk()"),kte.forEach(a),EG=i(Eb,"."),Eb.forEach(a),IG=m(V),b(Ii.$$.fragment,V),V.forEach(a),tw=m(s),Gn=r(s,"DIV",{class:!0});var H4=o(Gn);b(sf.$$.fragment,H4),qG=m(H4),Wn=r(H4,"P",{});var Ib=o(Wn);TG=i(Ib,"preprocesses "),Kj=r(Ib,"EM",{});var Ete=o(Kj);NG=i(Ete,"dataset_path"),Ete.forEach(a),PG=i(Ib," and removes remote filesystem (e.g. removing "),Zj=r(Ib,"CODE",{});var Ite=o(Zj);LG=i(Ite,"s3://"),Ite.forEach(a),FG=i(Ib,")"),Ib.forEach(a),H4.forEach(a),aw=m(s),Yn=r(s,"DIV",{class:!0});var G4=o(Yn);b(nf.$$.fragment,G4),AG=m(G4),Xj=r(G4,"P",{});var qte=o(Xj);SG=i(qte,"Validates if filesystem has remote protocol."),qte.forEach(a),G4.forEach(a),sw=m(s),Jn=r(s,"H2",{class:!0});var W4=o(Jn);qi=r(W4,"A",{id:!0,class:!0,href:!0});var Tte=o(qi);Qj=r(Tte,"SPAN",{});var Nte=o(Qj);b(rf.$$.fragment,Nte),Nte.forEach(a),Tte.forEach(a),OG=m(W4),e7=r(W4,"SPAN",{});var Pte=o(e7);CG=i(Pte,"Fingerprint"),Pte.forEach(a),W4.forEach(a),nw=m(s),Kn=r(s,"DIV",{class:!0});var Y4=o(Kn);b(of.$$.fragment,Y4),zG=m(Y4),t7=r(Y4,"P",{});var Lte=o(t7);VG=i(Lte,"Hasher that accepts python objects as inputs."),Lte.forEach(a),Y4.forEach(a),this.h()},h(){j(c,"name","hf:doc:metadata"),j(c,"content",JSON.stringify(Gse)),j(p,"id","main-classes"),j(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(p,"href","#main-classes"),j(f,"class","relative group"),j(_e,"id","datasets.DatasetInfo"),j(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(_e,"href","#datasets.DatasetInfo"),j(Ae,"class","relative group"),j(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xr,"id","datasets.Dataset"),j(xr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(xr,"href","#datasets.Dataset"),j(Ks,"class","relative group"),j(kf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"),j(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ef,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"),j($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(If,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"),j(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Nr,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.__len__"),j(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.map"),j(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Tf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format"),j(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Nf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_transform"),j(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Pf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Lf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.reset_format"),j($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Af,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.with_transform"),j(Sf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format"),j(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Of,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Cf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(zf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_transform"),j(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Vf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Image"),j(Uf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Audio"),j(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Mf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Rf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Image"),j(Bf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Audio"),j(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Hf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),j(bc,"rel","nofollow"),j(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),j(xc,"rel","nofollow"),j(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Jf,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo"),j(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Zf,"href","/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit"),j(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(eu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(su,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ou,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(iu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(du,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features"),j(mu,"href","/docs/datasets/package_reference/task_templates"),j(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"),j(fu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"),j(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(uu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"),j(gu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset"),j(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_u,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(bu,"href","/docs/datasets/pr_4378/en/package_reference/loading_methods#datasets.load_dataset"),j($u,"href","/docs/datasets/pr_4378/en/package_reference/loading_methods#datasets.load_dataset"),j(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(vu,"href","/docs/datasets/pr_4378/en/package_reference/loading_methods#datasets.load_dataset"),j(yu,"href","/docs/datasets/pr_4378/en/package_reference/loading_methods#datasets.load_dataset"),j(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ju,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(wu,"href","/docs/datasets/pr_4378/en/package_reference/loading_methods#datasets.load_dataset"),j(Du,"href","/docs/datasets/pr_4378/en/package_reference/loading_methods#datasets.load_dataset"),j(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Co,"id","datasets.DatasetDict"),j(Co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Co,"href","#datasets.DatasetDict"),j(hn,"class","relative group"),j(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ro,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.__len__"),j(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Eu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.with_transform"),j(Iu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetDict.set_format"),j(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Tu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Nu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.map"),j(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Pu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.map"),j(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Lu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.map"),j(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Fu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Image"),j(Au,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Audio"),j(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Su,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Ou,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Image"),j(Cu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Audio"),j(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(zu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(as,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Vu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features"),j(Uu,"href","/docs/datasets/package_reference/task_templates"),j(ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Mu,"id","package_reference_features"),j($l,"id","datasets.IterableDataset"),j($l,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j($l,"href","#datasets.IterableDataset"),j(kn,"class","relative group"),j(Ru,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset"),j(ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Bu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Hu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset.skip"),j(Gu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset.take"),j(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Yu,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo"),j(Tl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ku,"href","/docs/datasets/pr_4378/en/package_reference/builder_classes#datasets.NamedSplit"),j(Nl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Zu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Pl,"id","datasets.IterableDatasetDict"),j(Pl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Pl,"href","#datasets.IterableDatasetDict"),j(qn,"class","relative group"),j(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset.skip"),j(dg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.IterableDataset.take"),j(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Rl,"id","datasets.Features"),j(Rl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Rl,"href","#datasets.Features"),j(Pn,"class","relative group"),j(hg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Value"),j(fg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.ClassLabel"),j(ug,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Sequence"),j(gg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Sequence"),j(_g,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Array2D"),j(bg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Array3D"),j($g,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Array4D"),j(xg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Array5D"),j(vg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Audio"),j(yg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Image"),j(jg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Translation"),j(wg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),j(Gl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Wl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Yl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Jl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Kl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Zl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Dg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.DatasetInfo"),j(kg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),j(Eg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Value"),j(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ln,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ti,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ni,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ui,"id","datasets.MetricInfo"),j(ui,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(ui,"href","#datasets.MetricInfo"),j(Vn,"class","relative group"),j(gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bi,"id","datasets.Metric"),j(bi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(bi,"href","#datasets.Metric"),j(Un,"class","relative group"),j(Fg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset"),j($i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(vi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yi,"id","datasets.filesystems.S3FileSystem"),j(yi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(yi,"href","#datasets.filesystems.S3FileSystem"),j(Mn,"class","relative group"),j(af,"href","https://s3fs.readthedocs.io/en/latest/api.html"),j(af,"rel","nofollow"),j(Ag,"href","/docs/datasets/pr_4378/en/package_reference/loading_methods#datasets.load_from_disk"),j(Sg,"href","/docs/datasets/pr_4378/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Gn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Yn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qi,"id","datasets.fingerprint.Hasher"),j(qi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(qi,"href","#datasets.fingerprint.Hasher"),j(Jn,"class","relative group"),j(Kn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,w){e(document.head,c),D(s,g,w),D(s,f,w),e(f,p),e(p,u),$(t,u,null),e(f,h),e(f,Ys),e(Ys,aa),D(s,gr,w),D(s,Ae,w),e(Ae,_e),e(_e,se),$(sa,se,null),e(Ae,wf),e(Ae,_r),e(_r,J4),D(s,g0,w),D(s,K,w),$(op,K,null),e(K,K4),e(K,qb),e(qb,Z4),e(K,X4),e(K,Df),e(Df,Tb),e(Tb,Q4),e(Df,eD),e(K,tD),e(K,Nb),e(Nb,aD),e(K,sD),e(K,be),$(lp,be,null),e(be,nD),e(be,ip),e(ip,rD),e(ip,Pb),e(Pb,oD),e(ip,lD),e(be,iD),e(be,Lb),e(Lb,pD),e(be,cD),e(be,Fb),e(Fb,dD),e(be,mD),$(br,be,null),e(K,hD),e(K,na),$(pp,na,null),e(na,fD),e(na,Js),e(Js,uD),e(Js,Ab),e(Ab,gD),e(Js,_D),e(Js,Sb),e(Sb,bD),e(Js,$D),e(na,xD),$($r,na,null),D(s,_0,w),D(s,Ks,w),e(Ks,xr),e(xr,Ob),$(cp,Ob,null),e(Ks,vD),e(Ks,Cb),e(Cb,yD),D(s,b0,w),D(s,vr,w),e(vr,jD),e(vr,kf),e(kf,wD),e(vr,DD),D(s,$0,w),D(s,I,w),$(dp,I,null),e(I,kD),e(I,zb),e(zb,ED),e(I,ID),e(I,Ze),$(mp,Ze,null),e(Ze,qD),e(Ze,Vb),e(Vb,TD),e(Ze,ND),e(Ze,Ub),e(Ub,Mb),e(Mb,PD),e(Ze,LD),$(yr,Ze,null),e(I,FD),e(I,Xe),$(hp,Xe,null),e(Xe,AD),e(Xe,Rb),e(Rb,SD),e(Xe,OD),e(Xe,Bb),e(Bb,Hb),e(Hb,CD),e(Xe,zD),$(jr,Xe,null),e(I,VD),e(I,wr),$(fp,wr,null),e(wr,UD),e(wr,Gb),e(Gb,MD),e(I,RD),e(I,Dr),$(up,Dr,null),e(Dr,BD),e(Dr,Wb),e(Wb,HD),e(I,GD),e(I,$e),$(gp,$e,null),e($e,WD),e($e,Et),e(Et,YD),e(Et,Yb),e(Yb,JD),e(Et,KD),e(Et,Jb),e(Jb,ZD),e(Et,XD),e(Et,Ef),e(Ef,QD),e(Et,e3),e($e,t3),e($e,_p),e(_p,a3),e(_p,Kb),e(Kb,s3),e(_p,n3),e($e,r3),e($e,bp),e(bp,o3),e(bp,Zb),e(Zb,l3),e(bp,i3),e($e,p3),$(kr,$e,null),e(I,c3),e(I,Er),$($p,Er,null),e(Er,d3),e(Er,It),e(It,m3),e(It,Xb),e(Xb,h3),e(It,f3),e(It,Qb),e(Qb,u3),e(It,g3),e(It,If),e(If,_3),e(It,b3),e(I,$3),e(I,ra),$(xp,ra,null),e(ra,x3),e(ra,e$),e(e$,v3),e(ra,y3),$(Ir,ra,null),e(I,j3),e(I,oa),$(vp,oa,null),e(oa,w3),e(oa,t$),e(t$,D3),e(oa,k3),$(qr,oa,null),e(I,E3),e(I,la),$(yp,la,null),e(la,I3),e(la,a$),e(a$,q3),e(la,T3),$(Tr,la,null),e(I,N3),e(I,ia),$(jp,ia,null),e(ia,P3),e(ia,wp),e(wp,L3),e(wp,Nr),e(Nr,F3),e(Nr,s$),e(s$,A3),e(Nr,S3),e(wp,O3),e(ia,C3),$(Pr,ia,null),e(I,z3),e(I,pa),$(Dp,pa,null),e(pa,V3),e(pa,n$),e(n$,U3),e(pa,M3),$(Lr,pa,null),e(I,R3),e(I,ca),$(kp,ca,null),e(ca,B3),e(ca,r$),e(r$,H3),e(ca,G3),$(Fr,ca,null),e(I,W3),e(I,Qe),$(Ep,Qe,null),e(Qe,Y3),e(Qe,o$),e(o$,J3),e(Qe,K3),e(Qe,l$),e(l$,Z3),e(Qe,X3),$(Ar,Qe,null),e(I,Q3),e(I,da),$(Ip,da,null),e(da,ek),e(da,i$),e(i$,tk),e(da,ak),$(Sr,da,null),e(I,sk),e(I,ma),$(qp,ma,null),e(ma,nk),e(ma,p$),e(p$,rk),e(ma,ok),$(Or,ma,null),e(I,lk),e(I,ha),$(Tp,ha,null),e(ha,ik),e(ha,c$),e(c$,pk),e(ha,ck),$(Cr,ha,null),e(I,dk),e(I,et),$(Np,et,null),e(et,mk),e(et,d$),e(d$,hk),e(et,fk),e(et,Zs),e(Zs,uk),e(Zs,qf),e(qf,gk),e(Zs,_k),e(Zs,m$),e(m$,bk),e(Zs,$k),e(et,xk),$(zr,et,null),e(I,vk),e(I,fa),$(Pp,fa,null),e(fa,yk),e(fa,h$),e(h$,jk),e(fa,wk),$(Vr,fa,null),e(I,Dk),e(I,ua),$(Lp,ua,null),e(ua,kk),e(ua,f$),e(f$,Ek),e(ua,Ik),$(Ur,ua,null),e(I,qk),e(I,ga),$(Fp,ga,null),e(ga,Tk),e(ga,Ap),e(Ap,Nk),e(Ap,u$),e(u$,Pk),e(Ap,Lk),e(ga,Fk),$(Mr,ga,null),e(I,Ak),e(I,_a),$(Sp,_a,null),e(_a,Sk),e(_a,g$),e(g$,Ok),e(_a,Ck),$(Rr,_a,null),e(I,zk),e(I,ba),$(Op,ba,null),e(ba,Vk),e(ba,_$),e(_$,Uk),e(ba,Mk),e(ba,Cp),e(Cp,Rk),e(Cp,Tf),e(Tf,Bk),e(Cp,Hk),e(I,Gk),e(I,Br),$(zp,Br,null),e(Br,Wk),e(Br,Xs),e(Xs,Yk),e(Xs,b$),e(b$,Jk),e(Xs,Kk),e(Xs,$$),e($$,Zk),e(Xs,Xk),e(I,Qk),e(I,xe),$(Vp,xe,null),e(xe,e8),e(xe,Se),e(Se,t8),e(Se,x$),e(x$,a8),e(Se,s8),e(Se,v$),e(v$,n8),e(Se,r8),e(Se,y$),e(y$,o8),e(Se,l8),e(Se,Nf),e(Nf,i8),e(Se,p8),e(xe,c8),e(xe,Oe),e(Oe,d8),e(Oe,j$),e(j$,m8),e(Oe,h8),e(Oe,w$),e(w$,f8),e(Oe,u8),e(Oe,D$),e(D$,g8),e(Oe,_8),e(Oe,k$),e(k$,b8),e(Oe,$8),e(xe,x8),e(xe,E$),e(E$,v8),e(xe,y8),$(Hr,xe,null),e(I,j8),e(I,$a),$(Up,$a,null),e($a,w8),e($a,tt),e(tt,D8),e(tt,I$),e(I$,k8),e(tt,E8),e(tt,q$),e(q$,I8),e(tt,q8),e(tt,Pf),e(Pf,T8),e(tt,N8),e(tt,Lf),e(Lf,P8),e($a,L8),$(Gr,$a,null),e(I,F8),e(I,at),$(Mp,at,null),e(at,A8),e(at,Rp),e(Rp,S8),e(Rp,T$),e(T$,O8),e(Rp,C8),e(at,z8),e(at,Ff),e(Ff,V8),e(Ff,N$),e(N$,U8),e(at,M8),$(Wr,at,null),e(I,R8),e(I,ve),$(Bp,ve,null),e(ve,B8),e(ve,qt),e(qt,H8),e(qt,P$),e(P$,G8),e(qt,W8),e(qt,L$),e(L$,Y8),e(qt,J8),e(qt,F$),e(F$,K8),e(qt,Z8),e(ve,X8),e(ve,Hp),e(Hp,Q8),e(Hp,Af),e(Af,eE),e(Hp,tE),e(ve,aE),e(ve,Qs),e(Qs,sE),e(Qs,Sf),e(Sf,nE),e(Qs,rE),e(Qs,A$),e(A$,oE),e(Qs,lE),e(ve,iE),$(Yr,ve,null),e(I,pE),e(I,ye),$(Gp,ye,null),e(ye,cE),e(ye,en),e(en,dE),e(en,S$),e(S$,mE),e(en,hE),e(en,O$),e(O$,fE),e(en,uE),e(ye,gE),e(ye,tn),e(tn,_E),e(tn,Of),e(Of,bE),e(tn,$E),e(tn,Cf),e(Cf,xE),e(tn,vE),e(ye,yE),e(ye,an),e(an,jE),e(an,zf),e(zf,wE),e(an,DE),e(an,C$),e(C$,kE),e(an,EE),e(ye,IE),$(Jr,ye,null),e(I,qE),e(I,Kr),$(Wp,Kr,null),e(Kr,TE),e(Kr,z$),e(z$,NE),e(I,PE),e(I,st),$(Yp,st,null),e(st,LE),e(st,V$),e(V$,FE),e(st,AE),e(st,U$),e(U$,SE),e(st,OE),$(Zr,st,null),e(I,CE),e(I,je),$(Jp,je,null),e(je,zE),e(je,M$),e(M$,VE),e(je,UE),e(je,Kp),e(Kp,ME),e(Kp,R$),e(R$,RE),e(Kp,BE),e(je,HE),e(je,sn),e(sn,B$),e(B$,GE),e(sn,WE),e(sn,H$),e(H$,YE),e(sn,JE),e(sn,ce),e(ce,KE),e(ce,G$),e(G$,ZE),e(ce,XE),e(ce,W$),e(W$,QE),e(ce,e6),e(ce,Y$),e(Y$,t6),e(ce,a6),e(ce,J$),e(J$,s6),e(ce,n6),e(ce,K$),e(K$,r6),e(ce,o6),e(je,l6),$(Xr,je,null),e(I,i6),e(I,xa),$(Zp,xa,null),e(xa,p6),e(xa,Z$),e(Z$,c6),e(xa,d6),$(Qr,xa,null),e(I,m6),e(I,va),$(Xp,va,null),e(va,h6),e(va,X$),e(X$,f6),e(va,u6),$(eo,va,null),e(I,g6),e(I,nt),$(Qp,nt,null),e(nt,_6),e(nt,Q$),e(Q$,b6),e(nt,$6),e(nt,e2),e(e2,x6),e(nt,v6),$(to,nt,null),e(I,y6),e(I,rt),$(ec,rt,null),e(rt,j6),e(rt,t2),e(t2,w6),e(rt,D6),e(rt,a2),e(a2,k6),e(rt,E6),$(ao,rt,null),e(I,I6),e(I,ot),$(tc,ot,null),e(ot,q6),e(ot,H),e(H,T6),e(H,s2),e(s2,N6),e(H,P6),e(H,n2),e(n2,L6),e(H,F6),e(H,r2),e(r2,A6),e(H,S6),e(H,o2),e(o2,O6),e(H,C6),e(H,l2),e(l2,z6),e(H,V6),e(H,i2),e(i2,U6),e(H,M6),e(H,p2),e(p2,R6),e(H,B6),e(ot,H6),e(ot,ac),e(ac,G6),e(ac,c2),e(c2,W6),e(ac,Y6),e(ot,J6),$(so,ot,null),e(I,K6),e(I,ne),$(sc,ne,null),e(ne,Z6),e(ne,nn),e(nn,X6),e(nn,d2),e(d2,Q6),e(nn,e5),e(nn,m2),e(m2,t5),e(nn,a5),e(ne,s5),e(ne,h2),e(h2,n5),e(ne,r5),e(ne,nc),e(nc,o5),e(nc,f2),e(f2,l5),e(nc,i5),e(ne,p5),e(ne,u2),e(u2,c5),e(ne,d5),$(no,ne,null),e(I,m5),e(I,ya),$(rc,ya,null),e(ya,h5),e(ya,g2),e(g2,f5),e(ya,u5),$(ro,ya,null),e(I,g5),e(I,lt),$(oc,lt,null),e(lt,_5),e(lt,_2),e(_2,b5),e(lt,$5),e(lt,Tt),e(Tt,x5),e(Tt,Vf),e(Vf,v5),e(Tt,y5),e(Tt,Uf),e(Uf,j5),e(Tt,w5),e(Tt,b2),e(b2,D5),e(Tt,k5),e(lt,E5),$(oo,lt,null),e(I,I5),e(I,W),$(lc,W,null),e(W,q5),e(W,rn),e(rn,T5),e(rn,Mf),e(Mf,N5),e(rn,P5),e(rn,$2),e($2,L5),e(rn,F5),e(W,A5),e(W,on),e(on,S5),e(on,Rf),e(Rf,O5),e(on,C5),e(on,Bf),e(Bf,z5),e(on,V5),e(W,U5),e(W,ic),e(ic,M5),e(ic,x2),e(x2,R5),e(ic,B5),e(W,H5),$(lo,W,null),e(W,G5),$(io,W,null),e(W,W5),$(po,W,null),e(I,Y5),e(I,ja),$(pc,ja,null),e(ja,J5),e(ja,Nt),e(Nt,K5),e(Nt,v2),e(v2,Z5),e(Nt,X5),e(Nt,Hf),e(Hf,Q5),e(Nt,eI),e(Nt,y2),e(y2,tI),e(Nt,aI),e(ja,sI),$(co,ja,null),e(I,nI),e(I,mo),$(cc,mo,null),e(mo,rI),e(mo,j2),e(j2,oI),e(I,lI),e(I,wa),$(dc,wa,null),e(wa,iI),e(wa,w2),e(w2,pI),e(wa,cI),$(ho,wa,null),e(I,dI),e(I,Da),$(mc,Da,null),e(Da,mI),e(Da,hc),e(hc,hI),e(hc,D2),e(D2,fI),e(hc,uI),e(Da,gI),$(fo,Da,null),e(I,_I),e(I,ka),$(fc,ka,null),e(ka,bI),e(ka,k2),e(k2,$I),e(ka,xI),$(uo,ka,null),e(I,vI),e(I,Ea),$(uc,Ea,null),e(Ea,yI),e(Ea,E2),e(E2,jI),e(Ea,wI),$(go,Ea,null),e(I,DI),e(I,Ia),$(gc,Ia,null),e(Ia,kI),e(Ia,I2),e(I2,EI),e(Ia,II),$(_o,Ia,null),e(I,qI),e(I,it),$(_c,it,null),e(it,TI),e(it,ln),e(ln,NI),e(ln,q2),e(q2,PI),e(ln,LI),e(ln,T2),e(T2,FI),e(ln,AI),e(it,SI),e(it,N2),e(N2,Gf),e(Gf,OI),e(Gf,bc),e(bc,CI),e(it,zI),$(bo,it,null),e(I,VI),e(I,qa),$($c,qa,null),e(qa,UI),e(qa,Pt),e(Pt,MI),e(Pt,P2),e(P2,RI),e(Pt,BI),e(Pt,L2),e(L2,HI),e(Pt,GI),e(Pt,F2),e(F2,WI),e(Pt,YI),e(qa,JI),e(qa,A2),e(A2,Wf),e(Wf,KI),e(Wf,xc),e(xc,ZI),e(I,XI),e(I,$o),$(vc,$o,null),e($o,QI),e($o,S2),e(S2,e9),e(I,t9),e(I,Ta),$(yc,Ta,null),e(Ta,a9),e(Ta,O2),e(O2,s9),e(Ta,n9),e(Ta,jc),e(jc,r9),e(jc,C2),e(C2,o9),e(jc,l9),e(I,i9),e(I,Na),$(wc,Na,null),e(Na,p9),e(Na,z2),e(z2,c9),e(Na,d9),$(xo,Na,null),e(I,m9),e(I,Pa),$(Dc,Pa,null),e(Pa,h9),e(Pa,V2),e(V2,f9),e(Pa,u9),$(vo,Pa,null),e(I,g9),e(I,yo),$(kc,yo,null),e(yo,_9),e(yo,U2),e(U2,b9),e(I,$9),e(I,jo),$(Ec,jo,null),e(jo,x9),e(jo,M2),e(M2,v9),e(I,y9),e(I,wo),$(Ic,wo,null),e(wo,j9),e(wo,R2),e(R2,w9),e(I,D9),e(I,Do),$(qc,Do,null),e(Do,k9),e(Do,B2),e(B2,E9),e(I,I9),e(I,ko),$(Tc,ko,null),e(ko,q9),e(ko,H2),e(H2,T9),e(I,N9),e(I,Eo),$(Nc,Eo,null),e(Eo,P9),e(Eo,G2),e(G2,L9),e(I,F9),e(I,Io),$(Pc,Io,null),e(Io,A9),e(Io,W2),e(W2,S9),e(I,O9),e(I,qo),$(Lc,qo,null),e(qo,C9),e(qo,Yf),e(Yf,Jf),e(Jf,z9),e(Yf,V9),e(I,U9),e(I,To),$(Fc,To,null),e(To,M9),e(To,Kf),e(Kf,Zf),e(Zf,R9),e(Kf,B9),e(I,H9),e(I,Xf),$(Ac,Xf,null),e(I,G9),e(I,Qf),$(Sc,Qf,null),e(I,W9),e(I,eu),$(Oc,eu,null),e(I,Y9),e(I,tu),$(Cc,tu,null),e(I,J9),e(I,au),$(zc,au,null),e(I,K9),e(I,su),$(Vc,su,null),e(I,Z9),e(I,nu),$(Uc,nu,null),e(I,X9),e(I,ru),$(Mc,ru,null),e(I,Q9),e(I,ou),$(Rc,ou,null),e(I,eq),e(I,lu),$(Bc,lu,null),e(I,tq),e(I,iu),$(Hc,iu,null),e(I,aq),e(I,pu),$(Gc,pu,null),e(I,sq),e(I,cu),$(Wc,cu,null),e(I,nq),e(I,La),$(Yc,La,null),e(La,rq),e(La,Y2),e(Y2,oq),e(La,lq),$(No,La,null),e(I,iq),e(I,Fa),$(Jc,Fa,null),e(Fa,pq),e(Fa,J2),e(J2,cq),e(Fa,dq),$(Po,Fa,null),e(I,mq),e(I,Aa),$(Kc,Aa,null),e(Aa,hq),e(Aa,K2),e(K2,fq),e(Aa,uq),$(Lo,Aa,null),e(I,gq),e(I,Sa),$(Zc,Sa,null),e(Sa,_q),e(Sa,Z2),e(Z2,bq),e(Sa,$q),$(Fo,Sa,null),e(I,xq),e(I,Oa),$(Xc,Oa,null),e(Oa,vq),e(Oa,pn),e(pn,yq),e(pn,du),e(du,jq),e(pn,wq),e(pn,mu),e(mu,Dq),e(pn,kq),e(Oa,Eq),e(Oa,cn),e(cn,Iq),e(cn,X2),e(X2,qq),e(cn,Tq),e(cn,Q2),e(Q2,Nq),e(cn,Pq),e(I,Lq),e(I,Ca),$(Qc,Ca,null),e(Ca,Fq),e(Ca,ed),e(ed,Aq),e(ed,ex),e(ex,Sq),e(ed,Oq),e(Ca,Cq),$(Ao,Ca,null),D(s,x0,w),D(s,Lt,w),$(td,Lt,null),e(Lt,zq),e(Lt,dn),e(dn,Vq),e(dn,hu),e(hu,Uq),e(dn,Mq),e(dn,fu),e(fu,Rq),e(dn,Bq),e(Lt,Hq),$(So,Lt,null),D(s,v0,w),D(s,Z,w),$(ad,Z,null),e(Z,Gq),e(Z,tx),e(tx,Wq),e(Z,Yq),e(Z,mn),e(mn,Jq),e(mn,uu),e(uu,Kq),e(mn,Zq),e(mn,gu),e(gu,Xq),e(mn,Qq),e(Z,eT),e(Z,Ce),e(Ce,tT),e(Ce,ax),e(ax,aT),e(Ce,sT),e(Ce,sx),e(sx,nT),e(Ce,rT),e(Ce,nx),e(nx,oT),e(Ce,lT),e(Ce,rx),e(rx,iT),e(Ce,pT),e(Z,cT),e(Z,ox),e(ox,dT),e(Z,mT),$(Oo,Z,null),D(s,y0,w),D(s,de,w),$(sd,de,null),e(de,hT),e(de,lx),e(lx,fT),e(de,uT),e(de,ix),e(ix,gT),e(de,_T),e(de,px),e(px,bT),e(de,$T),e(de,ze),e(ze,cx),e(cx,xT),e(ze,vT),e(ze,dx),e(dx,yT),e(ze,jT),e(ze,mx),e(mx,wT),e(ze,DT),e(ze,nd),e(nd,kT),e(nd,_u),e(_u,ET),e(nd,IT),e(ze,qT),e(ze,Ft),e(Ft,TT),e(Ft,bu),e(bu,NT),e(Ft,PT),e(Ft,hx),e(hx,LT),e(Ft,FT),e(Ft,$u),e($u,AT),e(Ft,ST),D(s,j0,w),D(s,me,w),$(rd,me,null),e(me,OT),e(me,fx),e(fx,CT),e(me,zT),e(me,ux),e(ux,VT),e(me,UT),e(me,gx),e(gx,MT),e(me,RT),e(me,Ve),e(Ve,_x),e(_x,BT),e(Ve,HT),e(Ve,bx),e(bx,GT),e(Ve,WT),e(Ve,$x),e($x,YT),e(Ve,JT),e(Ve,od),e(od,KT),e(od,xu),e(xu,ZT),e(od,XT),e(Ve,QT),e(Ve,At),e(At,eN),e(At,vu),e(vu,tN),e(At,aN),e(At,xx),e(xx,sN),e(At,nN),e(At,yu),e(yu,rN),e(At,oN),D(s,w0,w),D(s,he,w),$(ld,he,null),e(he,lN),e(he,vx),e(vx,iN),e(he,pN),e(he,yx),e(yx,cN),e(he,dN),e(he,jx),e(jx,mN),e(he,hN),e(he,Ue),e(Ue,wx),e(wx,fN),e(Ue,uN),e(Ue,Dx),e(Dx,gN),e(Ue,_N),e(Ue,kx),e(kx,bN),e(Ue,$N),e(Ue,id),e(id,xN),e(id,ju),e(ju,vN),e(id,yN),e(Ue,jN),e(Ue,St),e(St,wN),e(St,wu),e(wu,DN),e(St,kN),e(St,Ex),e(Ex,EN),e(St,IN),e(St,Du),e(Du,qN),e(St,TN),D(s,D0,w),D(s,hn,w),e(hn,Co),e(Co,Ix),$(pd,Ix,null),e(hn,NN),e(hn,qx),e(qx,PN),D(s,k0,w),D(s,zo,w),e(zo,LN),e(zo,Tx),e(Tx,FN),e(zo,AN),D(s,E0,w),D(s,L,w),$(cd,L,null),e(L,SN),e(L,Nx),e(Nx,ON),e(L,CN),e(L,za),$(dd,za,null),e(za,zN),e(za,Px),e(Px,VN),e(za,UN),$(Vo,za,null),e(L,MN),e(L,Va),$(md,Va,null),e(Va,RN),e(Va,Lx),e(Lx,BN),e(Va,HN),$(Uo,Va,null),e(L,GN),e(L,Ua),$(hd,Ua,null),e(Ua,WN),e(Ua,Fx),e(Fx,YN),e(Ua,JN),$(Mo,Ua,null),e(L,KN),e(L,Ma),$(fd,Ma,null),e(Ma,ZN),e(Ma,ud),e(ud,XN),e(ud,Ro),e(Ro,QN),e(Ro,Ax),e(Ax,eP),e(Ro,tP),e(ud,aP),e(Ma,sP),$(Bo,Ma,null),e(L,nP),e(L,Ra),$(gd,Ra,null),e(Ra,rP),e(Ra,Sx),e(Sx,oP),e(Ra,lP),$(Ho,Ra,null),e(L,iP),e(L,Ba),$(_d,Ba,null),e(Ba,pP),e(Ba,Ox),e(Ox,cP),e(Ba,dP),$(Go,Ba,null),e(L,mP),e(L,pt),$(bd,pt,null),e(pt,hP),e(pt,Cx),e(Cx,fP),e(pt,uP),e(pt,zx),e(zx,gP),e(pt,_P),$(Wo,pt,null),e(L,bP),e(L,Ha),$($d,Ha,null),e(Ha,$P),e(Ha,Vx),e(Vx,xP),e(Ha,vP),$(Yo,Ha,null),e(L,yP),e(L,Ga),$(xd,Ga,null),e(Ga,jP),e(Ga,Ux),e(Ux,wP),e(Ga,DP),$(Jo,Ga,null),e(L,kP),e(L,Wa),$(vd,Wa,null),e(Wa,EP),e(Wa,Mx),e(Mx,IP),e(Wa,qP),$(Ko,Wa,null),e(L,TP),e(L,ct),$(yd,ct,null),e(ct,NP),e(ct,Rx),e(Rx,PP),e(ct,LP),e(ct,Bx),e(Bx,FP),e(ct,AP),$(Zo,ct,null),e(L,SP),e(L,we),$(jd,we,null),e(we,OP),e(we,Hx),e(Hx,CP),e(we,zP),e(we,Gx),e(Gx,VP),e(we,UP),e(we,Wx),e(Wx,MP),e(we,RP),$(Xo,we,null),e(L,BP),e(L,De),$(wd,De,null),e(De,HP),e(De,Dd),e(Dd,GP),e(Dd,Yx),e(Yx,WP),e(Dd,YP),e(De,JP),e(De,Me),e(Me,KP),e(Me,Jx),e(Jx,ZP),e(Me,XP),e(Me,Kx),e(Kx,QP),e(Me,eL),e(Me,Zx),e(Zx,tL),e(Me,aL),e(Me,Xx),e(Xx,sL),e(Me,nL),e(De,rL),e(De,Qx),e(Qx,oL),e(De,lL),$(Qo,De,null),e(L,iL),e(L,dt),$(kd,dt,null),e(dt,pL),e(dt,Ed),e(Ed,cL),e(Ed,e1),e(e1,dL),e(Ed,mL),e(dt,hL),e(dt,ku),e(ku,fL),e(ku,t1),e(t1,uL),e(dt,gL),$(el,dt,null),e(L,_L),e(L,tl),$(Id,tl,null),e(tl,bL),e(tl,fn),e(fn,$L),e(fn,a1),e(a1,xL),e(fn,vL),e(fn,s1),e(s1,yL),e(fn,jL),e(L,wL),e(L,ke),$(qd,ke,null),e(ke,DL),e(ke,Ot),e(Ot,kL),e(Ot,n1),e(n1,EL),e(Ot,IL),e(Ot,r1),e(r1,qL),e(Ot,TL),e(Ot,o1),e(o1,NL),e(Ot,PL),e(ke,LL),e(ke,Td),e(Td,FL),e(Td,Eu),e(Eu,AL),e(Td,SL),e(ke,OL),e(ke,un),e(un,CL),e(un,Iu),e(Iu,zL),e(un,VL),e(un,l1),e(l1,UL),e(un,ML),e(ke,RL),$(al,ke,null),e(L,BL),e(L,Ee),$(Nd,Ee,null),e(Ee,HL),e(Ee,gn),e(gn,GL),e(gn,i1),e(i1,WL),e(gn,YL),e(gn,p1),e(p1,JL),e(gn,KL),e(Ee,ZL),e(Ee,_n),e(_n,XL),e(_n,qu),e(qu,QL),e(_n,eF),e(_n,Tu),e(Tu,tF),e(_n,aF),e(Ee,sF),e(Ee,bn),e(bn,nF),e(bn,c1),e(c1,rF),e(bn,oF),e(bn,d1),e(d1,lF),e(bn,iF),e(Ee,pF),$(sl,Ee,null),e(L,cF),e(L,Ya),$(Pd,Ya,null),e(Ya,dF),e(Ya,m1),e(m1,mF),e(Ya,hF),$(nl,Ya,null),e(L,fF),e(L,mt),$(Ld,mt,null),e(mt,uF),e(mt,h1),e(h1,gF),e(mt,_F),e(mt,Ct),e(Ct,bF),e(Ct,Nu),e(Nu,$F),e(Ct,xF),e(Ct,f1),e(f1,vF),e(Ct,yF),e(Ct,u1),e(u1,jF),e(Ct,wF),e(mt,DF),$(rl,mt,null),e(L,kF),e(L,Ja),$(Fd,Ja,null),e(Ja,EF),e(Ja,g1),e(g1,IF),e(Ja,qF),$(ol,Ja,null),e(L,TF),e(L,Ie),$(Ad,Ie,null),e(Ie,NF),e(Ie,_1),e(_1,PF),e(Ie,LF),e(Ie,b1),e(b1,FF),e(Ie,AF),e(Ie,$n),e($n,SF),e($n,Pu),e(Pu,OF),e($n,CF),e($n,$1),e($1,zF),e($n,VF),e(Ie,UF),$(ll,Ie,null),e(L,MF),e(L,qe),$(Sd,qe,null),e(qe,RF),e(qe,x1),e(x1,BF),e(qe,HF),e(qe,xn),e(xn,GF),e(xn,Lu),e(Lu,WF),e(xn,YF),e(xn,v1),e(v1,JF),e(xn,KF),e(qe,ZF),e(qe,Od),e(Od,y1),e(y1,XF),e(Od,QF),e(Od,j1),e(j1,eA),e(qe,tA),$(il,qe,null),e(L,aA),e(L,Ka),$(Cd,Ka,null),e(Ka,sA),e(Ka,w1),e(w1,nA),e(Ka,rA),$(pl,Ka,null),e(L,oA),e(L,Za),$(zd,Za,null),e(Za,lA),e(Za,Vd),e(Vd,iA),e(Vd,D1),e(D1,pA),e(Vd,cA),e(Za,dA),$(cl,Za,null),e(L,mA),e(L,Te),$(Ud,Te,null),e(Te,hA),e(Te,vn),e(vn,fA),e(vn,k1),e(k1,uA),e(vn,gA),e(vn,E1),e(E1,_A),e(vn,bA),e(Te,$A),e(Te,I1),e(I1,xA),e(Te,vA),e(Te,zt),e(zt,yA),e(zt,Fu),e(Fu,jA),e(zt,wA),e(zt,Au),e(Au,DA),e(zt,kA),e(zt,q1),e(q1,EA),e(zt,IA),e(Te,qA),$(dl,Te,null),e(L,TA),e(L,re),$(Md,re,null),e(re,NA),e(re,yn),e(yn,PA),e(yn,Su),e(Su,LA),e(yn,FA),e(yn,T1),e(T1,AA),e(yn,SA),e(re,OA),e(re,jn),e(jn,CA),e(jn,Ou),e(Ou,zA),e(jn,VA),e(jn,Cu),e(Cu,UA),e(jn,MA),e(re,RA),e(re,Rd),e(Rd,BA),e(Rd,N1),e(N1,HA),e(Rd,GA),e(re,WA),$(ml,re,null),e(re,YA),$(hl,re,null),e(L,JA),e(L,Xa),$(Bd,Xa,null),e(Xa,KA),e(Xa,Vt),e(Vt,ZA),e(Vt,P1),e(P1,XA),e(Vt,QA),e(Vt,zu),e(zu,eS),e(Vt,tS),e(Vt,L1),e(L1,aS),e(Vt,sS),e(Xa,nS),$(fl,Xa,null),e(L,rS),e(L,Qa),$(Hd,Qa,null),e(Qa,oS),e(Qa,F1),e(F1,lS),e(Qa,iS),$(ul,Qa,null),e(L,pS),e(L,es),$(Gd,es,null),e(es,cS),e(es,A1),e(A1,dS),e(es,mS),$(gl,es,null),e(L,hS),e(L,ts),$(Wd,ts,null),e(ts,fS),e(ts,S1),e(S1,uS),e(ts,gS),$(_l,ts,null),e(L,_S),e(L,as),$(Yd,as,null),e(as,bS),e(as,O1),e(O1,$S),e(as,xS),$(bl,as,null),e(L,vS),e(L,ss),$(Jd,ss,null),e(ss,yS),e(ss,wn),e(wn,jS),e(wn,Vu),e(Vu,wS),e(wn,DS),e(wn,Uu),e(Uu,kS),e(wn,ES),e(ss,IS),e(ss,Dn),e(Dn,qS),e(Dn,C1),e(C1,TS),e(Dn,NS),e(Dn,z1),e(z1,PS),e(Dn,LS),D(s,I0,w),D(s,Mu,w),D(s,q0,w),D(s,kn,w),e(kn,$l),e($l,V1),$(Kd,V1,null),e(kn,FS),e(kn,U1),e(U1,AS),D(s,T0,w),D(s,xl,w),e(xl,SS),e(xl,Ru),e(Ru,OS),e(xl,CS),D(s,N0,w),D(s,A,w),$(Zd,A,null),e(A,zS),e(A,M1),e(M1,VS),e(A,US),e(A,ns),$(Xd,ns,null),e(ns,MS),e(ns,R1),e(R1,RS),e(ns,BS),$(vl,ns,null),e(A,HS),e(A,rs),$(Qd,rs,null),e(rs,GS),e(rs,B1),e(B1,WS),e(rs,YS),$(yl,rs,null),e(A,JS),e(A,os),$(em,os,null),e(os,KS),e(os,H1),e(H1,ZS),e(os,XS),$(jl,os,null),e(A,QS),e(A,Bu),$(tm,Bu,null),e(A,eO),e(A,Ne),$(am,Ne,null),e(Ne,tO),e(Ne,G1),e(G1,aO),e(Ne,sO),e(Ne,sm),e(sm,nO),e(sm,W1),e(W1,rO),e(sm,oO),e(Ne,lO),e(Ne,En),e(En,Y1),e(Y1,iO),e(En,pO),e(En,J1),e(J1,cO),e(En,dO),e(En,fe),e(fe,mO),e(fe,K1),e(K1,hO),e(fe,fO),e(fe,Z1),e(Z1,uO),e(fe,gO),e(fe,X1),e(X1,_O),e(fe,bO),e(fe,Q1),e(Q1,$O),e(fe,xO),e(fe,ev),e(ev,vO),e(fe,yO),e(Ne,jO),$(wl,Ne,null),e(A,wO),e(A,ls),$(nm,ls,null),e(ls,DO),e(ls,tv),e(tv,kO),e(ls,EO),$(Dl,ls,null),e(A,IO),e(A,is),$(rm,is,null),e(is,qO),e(is,av),e(av,TO),e(is,NO),$(kl,is,null),e(A,PO),e(A,oe),$(om,oe,null),e(oe,LO),e(oe,sv),e(sv,FO),e(oe,AO),e(oe,nv),e(nv,SO),e(oe,OO),e(oe,lm),e(lm,CO),e(lm,rv),e(rv,zO),e(lm,VO),e(oe,UO),e(oe,In),e(In,MO),e(In,Hu),e(Hu,RO),e(In,BO),e(In,Gu),e(Gu,HO),e(In,GO),e(oe,WO),$(El,oe,null),e(A,YO),e(A,ps),$(im,ps,null),e(ps,JO),e(ps,pm),e(pm,KO),e(pm,ov),e(ov,ZO),e(pm,XO),e(ps,QO),$(Il,ps,null),e(A,eC),e(A,cs),$(cm,cs,null),e(cs,tC),e(cs,dm),e(dm,aC),e(dm,lv),e(lv,sC),e(dm,nC),e(cs,rC),$(ql,cs,null),e(A,oC),e(A,Tl),$(mm,Tl,null),e(Tl,lC),e(Tl,Wu),e(Wu,Yu),e(Yu,iC),e(Wu,pC),e(A,cC),e(A,Nl),$(hm,Nl,null),e(Nl,dC),e(Nl,Ju),e(Ju,Ku),e(Ku,mC),e(Ju,hC),e(A,fC),e(A,Zu),$(fm,Zu,null),e(A,uC),e(A,Xu),$(um,Xu,null),e(A,gC),e(A,Qu),$(gm,Qu,null),e(A,_C),e(A,eg),$(_m,eg,null),e(A,bC),e(A,tg),$(bm,tg,null),e(A,$C),e(A,ag),$($m,ag,null),e(A,xC),e(A,sg),$(xm,sg,null),e(A,vC),e(A,ng),$(vm,ng,null),e(A,yC),e(A,rg),$(ym,rg,null),e(A,jC),e(A,og),$(jm,og,null),e(A,wC),e(A,lg),$(wm,lg,null),e(A,DC),e(A,ig),$(Dm,ig,null),e(A,kC),e(A,pg),$(km,pg,null),D(s,P0,w),D(s,qn,w),e(qn,Pl),e(Pl,iv),$(Em,iv,null),e(qn,EC),e(qn,pv),e(pv,IC),D(s,L0,w),D(s,Ll,w),e(Ll,qC),e(Ll,cv),e(cv,TC),e(Ll,NC),D(s,F0,w),D(s,U,w),$(Im,U,null),e(U,PC),e(U,Pe),$(qm,Pe,null),e(Pe,LC),e(Pe,dv),e(dv,FC),e(Pe,AC),e(Pe,Tm),e(Tm,SC),e(Tm,mv),e(mv,OC),e(Tm,CC),e(Pe,zC),e(Pe,Tn),e(Tn,hv),e(hv,VC),e(Tn,UC),e(Tn,fv),e(fv,MC),e(Tn,RC),e(Tn,ue),e(ue,BC),e(ue,uv),e(uv,HC),e(ue,GC),e(ue,gv),e(gv,WC),e(ue,YC),e(ue,_v),e(_v,JC),e(ue,KC),e(ue,bv),e(bv,ZC),e(ue,XC),e(ue,$v),e($v,QC),e(ue,ez),e(Pe,tz),$(Fl,Pe,null),e(U,az),e(U,ds),$(Nm,ds,null),e(ds,sz),e(ds,xv),e(xv,nz),e(ds,rz),$(Al,ds,null),e(U,oz),e(U,le),$(Pm,le,null),e(le,lz),e(le,vv),e(vv,iz),e(le,pz),e(le,yv),e(yv,cz),e(le,dz),e(le,Lm),e(Lm,mz),e(Lm,jv),e(jv,hz),e(Lm,fz),e(le,uz),e(le,Nn),e(Nn,gz),e(Nn,cg),e(cg,_z),e(Nn,bz),e(Nn,dg),e(dg,$z),e(Nn,xz),e(le,vz),$(Sl,le,null),e(U,yz),e(U,ms),$(Fm,ms,null),e(ms,jz),e(ms,wv),e(wv,wz),e(ms,Dz),$(Ol,ms,null),e(U,kz),e(U,hs),$(Am,hs,null),e(hs,Ez),e(hs,Dv),e(Dv,Iz),e(hs,qz),$(Cl,hs,null),e(U,Tz),e(U,fs),$(Sm,fs,null),e(fs,Nz),e(fs,kv),e(kv,Pz),e(fs,Lz),$(zl,fs,null),e(U,Fz),e(U,us),$(Om,us,null),e(us,Az),e(us,Ev),e(Ev,Sz),e(us,Oz),$(Vl,us,null),e(U,Cz),e(U,gs),$(Cm,gs,null),e(gs,zz),e(gs,Iv),e(Iv,Vz),e(gs,Uz),$(Ul,gs,null),e(U,Mz),e(U,_s),$(zm,_s,null),e(_s,Rz),e(_s,qv),e(qv,Bz),e(_s,Hz),$(Ml,_s,null),D(s,A0,w),D(s,Pn,w),e(Pn,Rl),e(Rl,Tv),$(Vm,Tv,null),e(Pn,Gz),e(Pn,Nv),e(Nv,Wz),D(s,S0,w),D(s,O,w),$(Um,O,null),e(O,Yz),e(O,Pv),e(Pv,Jz),e(O,Kz),e(O,Mm),e(Mm,Zz),e(Mm,Lv),e(Lv,Xz),e(Mm,Qz),e(O,eV),e(O,mg),e(mg,Fv),e(Fv,tV),e(mg,aV),e(O,sV),e(O,G),e(G,Av),e(Av,bs),e(bs,nV),e(bs,hg),e(hg,rV),e(bs,oV),e(bs,Sv),e(Sv,lV),e(bs,iV),e(bs,Ov),e(Ov,pV),e(G,cV),e(G,Cv),e(Cv,Rm),e(Rm,dV),e(Rm,fg),e(fg,mV),e(Rm,hV),e(G,fV),e(G,zv),e(zv,Bm),e(Bm,uV),e(Bm,Vv),e(Vv,gV),e(Bm,_V),e(G,bV),e(G,Hm),e(Hm,Re),e(Re,$V),e(Re,Uv),e(Uv,xV),e(Re,vV),e(Re,ug),e(ug,yV),e(Re,jV),e(Re,Mv),e(Mv,wV),e(Re,DV),e(Re,gg),e(gg,kV),e(Re,EV),e(Hm,IV),$(Bl,Hm,null),e(G,qV),e(G,Rv),e(Rv,Be),e(Be,TV),e(Be,_g),e(_g,NV),e(Be,PV),e(Be,bg),e(bg,LV),e(Be,FV),e(Be,$g),e($g,AV),e(Be,SV),e(Be,xg),e(xg,OV),e(Be,CV),e(G,zV),e(G,Bv),e(Bv,Gm),e(Gm,VV),e(Gm,vg),e(vg,UV),e(Gm,MV),e(G,RV),e(G,Hv),e(Hv,Ut),e(Ut,BV),e(Ut,yg),e(yg,HV),e(Ut,GV),e(Ut,Gv),e(Gv,WV),e(Ut,YV),e(Ut,Wv),e(Wv,JV),e(Ut,KV),e(G,ZV),e(G,Yv),e(Yv,Hl),e(Hl,jg),e(jg,XV),e(Hl,QV),e(Hl,wg),e(wg,eU),e(Hl,tU),e(O,aU),e(O,Gl),$(Wm,Gl,null),e(Gl,sU),e(Gl,Jv),e(Jv,nU),e(O,rU),e(O,Wl),$(Ym,Wl,null),e(Wl,oU),e(Wl,Kv),e(Kv,lU),e(O,iU),e(O,Yl),$(Jm,Yl,null),e(Yl,pU),e(Yl,Zv),e(Zv,cU),e(O,dU),e(O,Jl),$(Km,Jl,null),e(Jl,mU),e(Jl,Xv),e(Xv,hU),e(O,fU),e(O,Kl),$(Zm,Kl,null),e(Kl,uU),e(Kl,Qv),e(Qv,gU),e(O,_U),e(O,Zl),$(Xm,Zl,null),e(Zl,bU),e(Zl,ey),e(ey,$U),e(O,xU),e(O,$s),$(Qm,$s,null),e($s,vU),e($s,ty),e(ty,yU),e($s,jU),e($s,ay),e(ay,wU),e(O,DU),e(O,Xl),$(eh,Xl,null),e(Xl,kU),e(Xl,sy),e(sy,EU),e(O,IU),e(O,Le),$(th,Le,null),e(Le,qU),e(Le,ny),e(ny,TU),e(Le,NU),e(Le,ry),e(ry,PU),e(Le,LU),e(Le,Mt),e(Mt,FU),e(Mt,Dg),e(Dg,AU),e(Mt,SU),e(Mt,kg),e(kg,OU),e(Mt,CU),e(Mt,Eg),e(Eg,zU),e(Mt,VU),e(Le,UU),$(Ql,Le,null),e(O,MU),e(O,ht),$(ah,ht,null),e(ht,RU),e(ht,oy),e(oy,BU),e(ht,HU),e(ht,ly),e(ly,GU),e(ht,WU),$(ei,ht,null),D(s,O0,w),D(s,Ln,w),$(sh,Ln,null),e(Ln,YU),e(Ln,iy),e(iy,JU),D(s,C0,w),D(s,X,w),$(nh,X,null),e(X,KU),e(X,py),e(py,ZU),e(X,XU),e(X,rh),e(rh,QU),e(rh,cy),e(cy,eM),e(rh,tM),e(X,aM),e(X,Fn),e(Fn,Ig),e(Ig,dy),e(dy,sM),e(Ig,nM),e(Fn,rM),e(Fn,qg),e(qg,my),e(my,oM),e(qg,lM),e(Fn,iM),e(Fn,Tg),e(Tg,hy),e(hy,pM),e(Tg,cM),e(X,dM),e(X,ti),$(oh,ti,null),e(ti,mM),e(ti,fy),e(fy,hM),e(X,fM),e(X,ai),$(lh,ai,null),e(ai,uM),e(ai,uy),e(uy,gM),D(s,z0,w),D(s,Rt,w),$(ih,Rt,null),e(Rt,_M),e(Rt,gy),e(gy,bM),e(Rt,$M),e(Rt,_y),e(_y,xM),D(s,V0,w),D(s,Q,w),$(ph,Q,null),e(Q,vM),e(Q,Ng),e(Ng,by),e(by,yM),e(Ng,jM),e(Q,wM),e(Q,$y),e($y,DM),e(Q,kM),e(Q,ch),e(ch,EM),e(ch,xy),e(xy,IM),e(ch,qM),e(Q,TM),$(si,Q,null),e(Q,NM),e(Q,ni),$(dh,ni,null),e(ni,PM),e(ni,vy),e(vy,LM),D(s,U0,w),D(s,ee,w),$(mh,ee,null),e(ee,FM),e(ee,Pg),e(Pg,yy),e(yy,AM),e(Pg,SM),e(ee,OM),e(ee,jy),e(jy,CM),e(ee,zM),e(ee,wy),e(wy,VM),e(ee,UM),$(ri,ee,null),e(ee,MM),e(ee,oi),$(hh,oi,null),e(oi,RM),e(oi,Dy),e(Dy,BM),D(s,M0,w),D(s,fh,w),$(uh,fh,null),D(s,R0,w),D(s,gh,w),$(_h,gh,null),D(s,B0,w),D(s,bh,w),$($h,bh,null),D(s,H0,w),D(s,xh,w),$(vh,xh,null),D(s,G0,w),D(s,M,w),$(yh,M,null),e(M,HM),e(M,ky),e(ky,GM),e(M,WM),e(M,Ey),e(Ey,YM),e(M,JM),e(M,An),e(An,Iy),e(Iy,jh),e(jh,KM),e(jh,qy),e(qy,ZM),e(jh,XM),e(An,QM),e(An,Sn),e(Sn,wh),e(wh,eR),e(wh,Ty),e(Ty,tR),e(wh,aR),e(Sn,sR),e(Sn,Dh),e(Dh,Ny),e(Ny,nR),e(Dh,rR),e(Dh,Py),e(Py,oR),e(Sn,lR),e(Sn,Ly),e(Ly,iR),e(An,pR),e(An,On),e(On,kh),e(kh,cR),e(kh,Fy),e(Fy,dR),e(kh,mR),e(On,hR),e(On,Cn),e(Cn,Ay),e(Ay,fR),e(Cn,uR),e(Cn,Sy),e(Sy,gR),e(Cn,_R),e(Cn,Oy),e(Oy,bR),e(On,$R),e(On,Cy),e(Cy,xR),e(M,vR),e(M,xs),$(Eh,xs,null),e(xs,yR),e(xs,zy),e(zy,jR),e(xs,wR),e(xs,Bt),e(Bt,Vy),e(Vy,DR),e(Bt,kR),e(Bt,Uy),e(Uy,ER),e(Bt,IR),e(Bt,My),e(My,qR),e(Bt,TR),e(Bt,Ry),e(Ry,NR),e(M,PR),e(M,li),$(Ih,li,null),e(li,LR),e(li,By),e(By,FR),e(M,AR),e(M,ii),$(qh,ii,null),e(ii,SR),e(ii,Hy),e(Hy,OR),e(M,CR),e(M,pi),$(Th,pi,null),e(pi,zR),e(pi,Gy),e(Gy,VR),e(M,UR),e(M,ci),$(Nh,ci,null),e(ci,MR),e(ci,Wy),e(Wy,RR),D(s,W0,w),D(s,R,w),$(Ph,R,null),e(R,BR),e(R,Yy),e(Yy,HR),e(R,GR),e(R,Jy),e(Jy,WR),e(R,YR),e(R,Ht),e(Ht,Ky),e(Ky,Lh),e(Lh,JR),e(Lh,Zy),e(Zy,KR),e(Lh,ZR),e(Ht,XR),e(Ht,zn),e(zn,Fh),e(Fh,QR),e(Fh,Xy),e(Xy,eB),e(Fh,tB),e(zn,aB),e(zn,Ah),e(Ah,Qy),e(Qy,sB),e(Ah,nB),e(Ah,ej),e(ej,rB),e(zn,oB),e(zn,tj),e(tj,lB),e(Ht,iB),e(Ht,aj),e(aj,Sh),e(Sh,pB),e(Sh,sj),e(sj,cB),e(Sh,dB),e(Ht,mB),e(Ht,nj),e(nj,Oh),e(Oh,hB),e(Oh,rj),e(rj,fB),e(Oh,uB),e(R,gB),e(R,vs),$(Ch,vs,null),e(vs,_B),e(vs,oj),e(oj,bB),e(vs,$B),e(vs,He),e(He,lj),e(lj,xB),e(He,vB),e(He,ij),e(ij,yB),e(He,jB),e(He,pj),e(pj,wB),e(He,DB),e(He,cj),e(cj,kB),e(He,EB),e(He,dj),e(dj,IB),e(R,qB),e(R,di),$(zh,di,null),e(di,TB),e(di,mj),e(mj,NB),e(R,PB),e(R,mi),$(Vh,mi,null),e(mi,LB),e(mi,hj),e(hj,FB),e(R,AB),e(R,hi),$(Uh,hi,null),e(hi,SB),e(hi,fj),e(fj,OB),e(R,CB),e(R,fi),$(Mh,fi,null),e(fi,zB),e(fi,uj),e(uj,VB),D(s,Y0,w),D(s,Vn,w),e(Vn,ui),e(ui,gj),$(Rh,gj,null),e(Vn,UB),e(Vn,_j),e(_j,MB),D(s,J0,w),D(s,te,w),$(Bh,te,null),e(te,RB),e(te,bj),e(bj,BB),e(te,HB),e(te,Lg),e(Lg,$j),e($j,GB),e(Lg,WB),e(te,YB),e(te,xj),e(xj,JB),e(te,KB),e(te,gi),$(Hh,gi,null),e(gi,ZB),e(gi,Gh),e(Gh,XB),e(Gh,vj),e(vj,QB),e(Gh,eH),e(te,tH),e(te,_i),$(Wh,_i,null),e(_i,aH),e(_i,Gt),e(Gt,sH),e(Gt,yj),e(yj,nH),e(Gt,rH),e(Gt,jj),e(jj,oH),e(Gt,lH),e(Gt,wj),e(wj,iH),e(Gt,pH),D(s,K0,w),D(s,Un,w),e(Un,bi),e(bi,Dj),$(Yh,Dj,null),e(Un,cH),e(Un,kj),e(kj,dH),D(s,Z0,w),D(s,ys,w),e(ys,mH),e(ys,Ej),e(Ej,hH),e(ys,fH),e(ys,Fg),e(Fg,uH),e(ys,gH),D(s,X0,w),D(s,ae,w),$(Jh,ae,null),e(ae,_H),e(ae,Ij),e(Ij,bH),e(ae,$H),e(ae,$i),$(Kh,$i,null),e($i,xH),e($i,qj),e(qj,vH),e(ae,yH),e(ae,xi),$(Zh,xi,null),e(xi,jH),e(xi,Tj),e(Tj,wH),e(ae,DH),e(ae,js),$(Xh,js,null),e(js,kH),e(js,Nj),e(Nj,EH),e(js,IH),e(js,Pj),e(Pj,qH),e(ae,TH),e(ae,vi),$(Qh,vi,null),e(vi,NH),e(vi,Lj),e(Lj,PH),D(s,Q0,w),D(s,Mn,w),e(Mn,yi),e(yi,Fj),$(ef,Fj,null),e(Mn,LH),e(Mn,Aj),e(Aj,FH),D(s,ew,w),D(s,C,w),$(tf,C,null),e(C,AH),e(C,ji),e(ji,Sj),e(Sj,SH),e(ji,OH),e(ji,af),e(af,Oj),e(Oj,CH),e(ji,zH),e(C,VH),e(C,Wt),e(Wt,UH),e(Wt,Cj),e(Cj,MH),e(Wt,RH),e(Wt,zj),e(zj,BH),e(Wt,HH),e(Wt,Vj),e(Vj,GH),e(Wt,WH),e(C,YH),e(C,Uj),e(Uj,JH),e(C,KH),e(C,Mj),e(Mj,ZH),e(C,XH),$(wi,C,null),e(C,QH),e(C,Rn),e(Rn,eG),e(Rn,Rj),e(Rj,tG),e(Rn,aG),e(Rn,Bj),e(Bj,sG),e(Rn,nG),e(C,rG),$(Di,C,null),e(C,oG),e(C,Yt),e(Yt,lG),e(Yt,Hj),e(Hj,iG),e(Yt,pG),e(Yt,Gj),e(Gj,cG),e(Yt,dG),e(Yt,Wj),e(Wj,mG),e(Yt,hG),e(C,fG),$(ki,C,null),e(C,uG),e(C,Bn),e(Bn,gG),e(Bn,Yj),e(Yj,_G),e(Bn,bG),e(Bn,Ag),e(Ag,$G),e(Bn,xG),e(C,vG),$(Ei,C,null),e(C,yG),e(C,Hn),e(Hn,jG),e(Hn,Jj),e(Jj,wG),e(Hn,DG),e(Hn,Sg),e(Sg,kG),e(Hn,EG),e(C,IG),$(Ii,C,null),D(s,tw,w),D(s,Gn,w),$(sf,Gn,null),e(Gn,qG),e(Gn,Wn),e(Wn,TG),e(Wn,Kj),e(Kj,NG),e(Wn,PG),e(Wn,Zj),e(Zj,LG),e(Wn,FG),D(s,aw,w),D(s,Yn,w),$(nf,Yn,null),e(Yn,AG),e(Yn,Xj),e(Xj,SG),D(s,sw,w),D(s,Jn,w),e(Jn,qi),e(qi,Qj),$(rf,Qj,null),e(Jn,OG),e(Jn,e7),e(e7,CG),D(s,nw,w),D(s,Kn,w),$(of,Kn,null),e(Kn,zG),e(Kn,t7),e(t7,VG),rw=!0},p(s,[w]){const lf={};w&2&&(lf.$$scope={dirty:w,ctx:s}),br.$set(lf);const a7={};w&2&&(a7.$$scope={dirty:w,ctx:s}),$r.$set(a7);const s7={};w&2&&(s7.$$scope={dirty:w,ctx:s}),yr.$set(s7);const n7={};w&2&&(n7.$$scope={dirty:w,ctx:s}),jr.$set(n7);const pf={};w&2&&(pf.$$scope={dirty:w,ctx:s}),kr.$set(pf);const r7={};w&2&&(r7.$$scope={dirty:w,ctx:s}),Ir.$set(r7);const o7={};w&2&&(o7.$$scope={dirty:w,ctx:s}),qr.$set(o7);const l7={};w&2&&(l7.$$scope={dirty:w,ctx:s}),Tr.$set(l7);const ge={};w&2&&(ge.$$scope={dirty:w,ctx:s}),Pr.$set(ge);const i7={};w&2&&(i7.$$scope={dirty:w,ctx:s}),Lr.$set(i7);const Og={};w&2&&(Og.$$scope={dirty:w,ctx:s}),Fr.$set(Og);const p7={};w&2&&(p7.$$scope={dirty:w,ctx:s}),Ar.$set(p7);const c7={};w&2&&(c7.$$scope={dirty:w,ctx:s}),Sr.$set(c7);const Ge={};w&2&&(Ge.$$scope={dirty:w,ctx:s}),Or.$set(Ge);const cf={};w&2&&(cf.$$scope={dirty:w,ctx:s}),Cr.$set(cf);const d7={};w&2&&(d7.$$scope={dirty:w,ctx:s}),zr.$set(d7);const m7={};w&2&&(m7.$$scope={dirty:w,ctx:s}),Vr.$set(m7);const h7={};w&2&&(h7.$$scope={dirty:w,ctx:s}),Ur.$set(h7);const Zn={};w&2&&(Zn.$$scope={dirty:w,ctx:s}),Mr.$set(Zn);const Xn={};w&2&&(Xn.$$scope={dirty:w,ctx:s}),Rr.$set(Xn);const f7={};w&2&&(f7.$$scope={dirty:w,ctx:s}),Hr.$set(f7);const u7={};w&2&&(u7.$$scope={dirty:w,ctx:s}),Gr.$set(u7);const df={};w&2&&(df.$$scope={dirty:w,ctx:s}),Wr.$set(df);const g7={};w&2&&(g7.$$scope={dirty:w,ctx:s}),Yr.$set(g7);const _7={};w&2&&(_7.$$scope={dirty:w,ctx:s}),Jr.$set(_7);const b7={};w&2&&(b7.$$scope={dirty:w,ctx:s}),Zr.$set(b7);const mf={};w&2&&(mf.$$scope={dirty:w,ctx:s}),Xr.$set(mf);const $7={};w&2&&($7.$$scope={dirty:w,ctx:s}),Qr.$set($7);const q={};w&2&&(q.$$scope={dirty:w,ctx:s}),eo.$set(q);const x7={};w&2&&(x7.$$scope={dirty:w,ctx:s}),to.$set(x7);const Jt={};w&2&&(Jt.$$scope={dirty:w,ctx:s}),ao.$set(Jt);const v7={};w&2&&(v7.$$scope={dirty:w,ctx:s}),so.$set(v7);const y7={};w&2&&(y7.$$scope={dirty:w,ctx:s}),no.$set(y7);const j7={};w&2&&(j7.$$scope={dirty:w,ctx:s}),ro.$set(j7);const Kt={};w&2&&(Kt.$$scope={dirty:w,ctx:s}),oo.$set(Kt);const w7={};w&2&&(w7.$$scope={dirty:w,ctx:s}),lo.$set(w7);const D7={};w&2&&(D7.$$scope={dirty:w,ctx:s}),io.$set(D7);const k7={};w&2&&(k7.$$scope={dirty:w,ctx:s}),po.$set(k7);const hf={};w&2&&(hf.$$scope={dirty:w,ctx:s}),co.$set(hf);const E7={};w&2&&(E7.$$scope={dirty:w,ctx:s}),ho.$set(E7);const ff={};w&2&&(ff.$$scope={dirty:w,ctx:s}),fo.$set(ff);const I7={};w&2&&(I7.$$scope={dirty:w,ctx:s}),uo.$set(I7);const We={};w&2&&(We.$$scope={dirty:w,ctx:s}),go.$set(We);const Zt={};w&2&&(Zt.$$scope={dirty:w,ctx:s}),_o.$set(Zt);const q7={};w&2&&(q7.$$scope={dirty:w,ctx:s}),bo.$set(q7);const T7={};w&2&&(T7.$$scope={dirty:w,ctx:s}),xo.$set(T7);const N7={};w&2&&(N7.$$scope={dirty:w,ctx:s}),vo.$set(N7);const uf={};w&2&&(uf.$$scope={dirty:w,ctx:s}),No.$set(uf);const P7={};w&2&&(P7.$$scope={dirty:w,ctx:s}),Po.$set(P7);const gf={};w&2&&(gf.$$scope={dirty:w,ctx:s}),Lo.$set(gf);const L7={};w&2&&(L7.$$scope={dirty:w,ctx:s}),Fo.$set(L7);const _f={};w&2&&(_f.$$scope={dirty:w,ctx:s}),Ao.$set(_f);const Xt={};w&2&&(Xt.$$scope={dirty:w,ctx:s}),So.$set(Xt);const F7={};w&2&&(F7.$$scope={dirty:w,ctx:s}),Oo.$set(F7);const A7={};w&2&&(A7.$$scope={dirty:w,ctx:s}),Vo.$set(A7);const S7={};w&2&&(S7.$$scope={dirty:w,ctx:s}),Uo.$set(S7);const Qn={};w&2&&(Qn.$$scope={dirty:w,ctx:s}),Mo.$set(Qn);const O7={};w&2&&(O7.$$scope={dirty:w,ctx:s}),Bo.$set(O7);const er={};w&2&&(er.$$scope={dirty:w,ctx:s}),Ho.$set(er);const C7={};w&2&&(C7.$$scope={dirty:w,ctx:s}),Go.$set(C7);const tr={};w&2&&(tr.$$scope={dirty:w,ctx:s}),Wo.$set(tr);const z7={};w&2&&(z7.$$scope={dirty:w,ctx:s}),Yo.$set(z7);const ar={};w&2&&(ar.$$scope={dirty:w,ctx:s}),Jo.$set(ar);const bf={};w&2&&(bf.$$scope={dirty:w,ctx:s}),Ko.$set(bf);const $f={};w&2&&($f.$$scope={dirty:w,ctx:s}),Zo.$set($f);const V7={};w&2&&(V7.$$scope={dirty:w,ctx:s}),Xo.$set(V7);const sr={};w&2&&(sr.$$scope={dirty:w,ctx:s}),Qo.$set(sr);const U7={};w&2&&(U7.$$scope={dirty:w,ctx:s}),el.$set(U7);const nr={};w&2&&(nr.$$scope={dirty:w,ctx:s}),al.$set(nr);const M7={};w&2&&(M7.$$scope={dirty:w,ctx:s}),sl.$set(M7);const Qt={};w&2&&(Qt.$$scope={dirty:w,ctx:s}),nl.$set(Qt);const R7={};w&2&&(R7.$$scope={dirty:w,ctx:s}),rl.$set(R7);const B7={};w&2&&(B7.$$scope={dirty:w,ctx:s}),ol.$set(B7);const rr={};w&2&&(rr.$$scope={dirty:w,ctx:s}),ll.$set(rr);const H7={};w&2&&(H7.$$scope={dirty:w,ctx:s}),il.$set(H7);const or={};w&2&&(or.$$scope={dirty:w,ctx:s}),pl.$set(or);const G7={};w&2&&(G7.$$scope={dirty:w,ctx:s}),cl.$set(G7);const lr={};w&2&&(lr.$$scope={dirty:w,ctx:s}),dl.$set(lr);const W7={};w&2&&(W7.$$scope={dirty:w,ctx:s}),ml.$set(W7);const ea={};w&2&&(ea.$$scope={dirty:w,ctx:s}),hl.$set(ea);const Y7={};w&2&&(Y7.$$scope={dirty:w,ctx:s}),fl.$set(Y7);const ir={};w&2&&(ir.$$scope={dirty:w,ctx:s}),ul.$set(ir);const J7={};w&2&&(J7.$$scope={dirty:w,ctx:s}),gl.$set(J7);const K7={};w&2&&(K7.$$scope={dirty:w,ctx:s}),_l.$set(K7);const pr={};w&2&&(pr.$$scope={dirty:w,ctx:s}),bl.$set(pr);const Z7={};w&2&&(Z7.$$scope={dirty:w,ctx:s}),vl.$set(Z7);const cr={};w&2&&(cr.$$scope={dirty:w,ctx:s}),yl.$set(cr);const X7={};w&2&&(X7.$$scope={dirty:w,ctx:s}),jl.$set(X7);const dr={};w&2&&(dr.$$scope={dirty:w,ctx:s}),wl.$set(dr);const xf={};w&2&&(xf.$$scope={dirty:w,ctx:s}),Dl.$set(xf);const Q7={};w&2&&(Q7.$$scope={dirty:w,ctx:s}),kl.$set(Q7);const mr={};w&2&&(mr.$$scope={dirty:w,ctx:s}),El.$set(mr);const e0={};w&2&&(e0.$$scope={dirty:w,ctx:s}),Il.$set(e0);const hr={};w&2&&(hr.$$scope={dirty:w,ctx:s}),ql.$set(hr);const t0={};w&2&&(t0.$$scope={dirty:w,ctx:s}),Fl.$set(t0);const vf={};w&2&&(vf.$$scope={dirty:w,ctx:s}),Al.$set(vf);const a0={};w&2&&(a0.$$scope={dirty:w,ctx:s}),Sl.$set(a0);const yf={};w&2&&(yf.$$scope={dirty:w,ctx:s}),Ol.$set(yf);const fr={};w&2&&(fr.$$scope={dirty:w,ctx:s}),Cl.$set(fr);const s0={};w&2&&(s0.$$scope={dirty:w,ctx:s}),zl.$set(s0);const n0={};w&2&&(n0.$$scope={dirty:w,ctx:s}),Vl.$set(n0);const Ye={};w&2&&(Ye.$$scope={dirty:w,ctx:s}),Ul.$set(Ye);const Je={};w&2&&(Je.$$scope={dirty:w,ctx:s}),Ml.$set(Je);const r0={};w&2&&(r0.$$scope={dirty:w,ctx:s}),Bl.$set(r0);const o0={};w&2&&(o0.$$scope={dirty:w,ctx:s}),Ql.$set(o0);const l0={};w&2&&(l0.$$scope={dirty:w,ctx:s}),ei.$set(l0);const i0={};w&2&&(i0.$$scope={dirty:w,ctx:s}),si.$set(i0);const Ke={};w&2&&(Ke.$$scope={dirty:w,ctx:s}),ri.$set(Ke);const p0={};w&2&&(p0.$$scope={dirty:w,ctx:s}),wi.$set(p0);const c0={};w&2&&(c0.$$scope={dirty:w,ctx:s}),Di.$set(c0);const d0={};w&2&&(d0.$$scope={dirty:w,ctx:s}),ki.$set(d0);const m0={};w&2&&(m0.$$scope={dirty:w,ctx:s}),Ei.$set(m0);const h0={};w&2&&(h0.$$scope={dirty:w,ctx:s}),Ii.$set(h0)},i(s){rw||(x(t.$$.fragment,s),x(sa.$$.fragment,s),x(op.$$.fragment,s),x(lp.$$.fragment,s),x(br.$$.fragment,s),x(pp.$$.fragment,s),x($r.$$.fragment,s),x(cp.$$.fragment,s),x(dp.$$.fragment,s),x(mp.$$.fragment,s),x(yr.$$.fragment,s),x(hp.$$.fragment,s),x(jr.$$.fragment,s),x(fp.$$.fragment,s),x(up.$$.fragment,s),x(gp.$$.fragment,s),x(kr.$$.fragment,s),x($p.$$.fragment,s),x(xp.$$.fragment,s),x(Ir.$$.fragment,s),x(vp.$$.fragment,s),x(qr.$$.fragment,s),x(yp.$$.fragment,s),x(Tr.$$.fragment,s),x(jp.$$.fragment,s),x(Pr.$$.fragment,s),x(Dp.$$.fragment,s),x(Lr.$$.fragment,s),x(kp.$$.fragment,s),x(Fr.$$.fragment,s),x(Ep.$$.fragment,s),x(Ar.$$.fragment,s),x(Ip.$$.fragment,s),x(Sr.$$.fragment,s),x(qp.$$.fragment,s),x(Or.$$.fragment,s),x(Tp.$$.fragment,s),x(Cr.$$.fragment,s),x(Np.$$.fragment,s),x(zr.$$.fragment,s),x(Pp.$$.fragment,s),x(Vr.$$.fragment,s),x(Lp.$$.fragment,s),x(Ur.$$.fragment,s),x(Fp.$$.fragment,s),x(Mr.$$.fragment,s),x(Sp.$$.fragment,s),x(Rr.$$.fragment,s),x(Op.$$.fragment,s),x(zp.$$.fragment,s),x(Vp.$$.fragment,s),x(Hr.$$.fragment,s),x(Up.$$.fragment,s),x(Gr.$$.fragment,s),x(Mp.$$.fragment,s),x(Wr.$$.fragment,s),x(Bp.$$.fragment,s),x(Yr.$$.fragment,s),x(Gp.$$.fragment,s),x(Jr.$$.fragment,s),x(Wp.$$.fragment,s),x(Yp.$$.fragment,s),x(Zr.$$.fragment,s),x(Jp.$$.fragment,s),x(Xr.$$.fragment,s),x(Zp.$$.fragment,s),x(Qr.$$.fragment,s),x(Xp.$$.fragment,s),x(eo.$$.fragment,s),x(Qp.$$.fragment,s),x(to.$$.fragment,s),x(ec.$$.fragment,s),x(ao.$$.fragment,s),x(tc.$$.fragment,s),x(so.$$.fragment,s),x(sc.$$.fragment,s),x(no.$$.fragment,s),x(rc.$$.fragment,s),x(ro.$$.fragment,s),x(oc.$$.fragment,s),x(oo.$$.fragment,s),x(lc.$$.fragment,s),x(lo.$$.fragment,s),x(io.$$.fragment,s),x(po.$$.fragment,s),x(pc.$$.fragment,s),x(co.$$.fragment,s),x(cc.$$.fragment,s),x(dc.$$.fragment,s),x(ho.$$.fragment,s),x(mc.$$.fragment,s),x(fo.$$.fragment,s),x(fc.$$.fragment,s),x(uo.$$.fragment,s),x(uc.$$.fragment,s),x(go.$$.fragment,s),x(gc.$$.fragment,s),x(_o.$$.fragment,s),x(_c.$$.fragment,s),x(bo.$$.fragment,s),x($c.$$.fragment,s),x(vc.$$.fragment,s),x(yc.$$.fragment,s),x(wc.$$.fragment,s),x(xo.$$.fragment,s),x(Dc.$$.fragment,s),x(vo.$$.fragment,s),x(kc.$$.fragment,s),x(Ec.$$.fragment,s),x(Ic.$$.fragment,s),x(qc.$$.fragment,s),x(Tc.$$.fragment,s),x(Nc.$$.fragment,s),x(Pc.$$.fragment,s),x(Lc.$$.fragment,s),x(Fc.$$.fragment,s),x(Ac.$$.fragment,s),x(Sc.$$.fragment,s),x(Oc.$$.fragment,s),x(Cc.$$.fragment,s),x(zc.$$.fragment,s),x(Vc.$$.fragment,s),x(Uc.$$.fragment,s),x(Mc.$$.fragment,s),x(Rc.$$.fragment,s),x(Bc.$$.fragment,s),x(Hc.$$.fragment,s),x(Gc.$$.fragment,s),x(Wc.$$.fragment,s),x(Yc.$$.fragment,s),x(No.$$.fragment,s),x(Jc.$$.fragment,s),x(Po.$$.fragment,s),x(Kc.$$.fragment,s),x(Lo.$$.fragment,s),x(Zc.$$.fragment,s),x(Fo.$$.fragment,s),x(Xc.$$.fragment,s),x(Qc.$$.fragment,s),x(Ao.$$.fragment,s),x(td.$$.fragment,s),x(So.$$.fragment,s),x(ad.$$.fragment,s),x(Oo.$$.fragment,s),x(sd.$$.fragment,s),x(rd.$$.fragment,s),x(ld.$$.fragment,s),x(pd.$$.fragment,s),x(cd.$$.fragment,s),x(dd.$$.fragment,s),x(Vo.$$.fragment,s),x(md.$$.fragment,s),x(Uo.$$.fragment,s),x(hd.$$.fragment,s),x(Mo.$$.fragment,s),x(fd.$$.fragment,s),x(Bo.$$.fragment,s),x(gd.$$.fragment,s),x(Ho.$$.fragment,s),x(_d.$$.fragment,s),x(Go.$$.fragment,s),x(bd.$$.fragment,s),x(Wo.$$.fragment,s),x($d.$$.fragment,s),x(Yo.$$.fragment,s),x(xd.$$.fragment,s),x(Jo.$$.fragment,s),x(vd.$$.fragment,s),x(Ko.$$.fragment,s),x(yd.$$.fragment,s),x(Zo.$$.fragment,s),x(jd.$$.fragment,s),x(Xo.$$.fragment,s),x(wd.$$.fragment,s),x(Qo.$$.fragment,s),x(kd.$$.fragment,s),x(el.$$.fragment,s),x(Id.$$.fragment,s),x(qd.$$.fragment,s),x(al.$$.fragment,s),x(Nd.$$.fragment,s),x(sl.$$.fragment,s),x(Pd.$$.fragment,s),x(nl.$$.fragment,s),x(Ld.$$.fragment,s),x(rl.$$.fragment,s),x(Fd.$$.fragment,s),x(ol.$$.fragment,s),x(Ad.$$.fragment,s),x(ll.$$.fragment,s),x(Sd.$$.fragment,s),x(il.$$.fragment,s),x(Cd.$$.fragment,s),x(pl.$$.fragment,s),x(zd.$$.fragment,s),x(cl.$$.fragment,s),x(Ud.$$.fragment,s),x(dl.$$.fragment,s),x(Md.$$.fragment,s),x(ml.$$.fragment,s),x(hl.$$.fragment,s),x(Bd.$$.fragment,s),x(fl.$$.fragment,s),x(Hd.$$.fragment,s),x(ul.$$.fragment,s),x(Gd.$$.fragment,s),x(gl.$$.fragment,s),x(Wd.$$.fragment,s),x(_l.$$.fragment,s),x(Yd.$$.fragment,s),x(bl.$$.fragment,s),x(Jd.$$.fragment,s),x(Kd.$$.fragment,s),x(Zd.$$.fragment,s),x(Xd.$$.fragment,s),x(vl.$$.fragment,s),x(Qd.$$.fragment,s),x(yl.$$.fragment,s),x(em.$$.fragment,s),x(jl.$$.fragment,s),x(tm.$$.fragment,s),x(am.$$.fragment,s),x(wl.$$.fragment,s),x(nm.$$.fragment,s),x(Dl.$$.fragment,s),x(rm.$$.fragment,s),x(kl.$$.fragment,s),x(om.$$.fragment,s),x(El.$$.fragment,s),x(im.$$.fragment,s),x(Il.$$.fragment,s),x(cm.$$.fragment,s),x(ql.$$.fragment,s),x(mm.$$.fragment,s),x(hm.$$.fragment,s),x(fm.$$.fragment,s),x(um.$$.fragment,s),x(gm.$$.fragment,s),x(_m.$$.fragment,s),x(bm.$$.fragment,s),x($m.$$.fragment,s),x(xm.$$.fragment,s),x(vm.$$.fragment,s),x(ym.$$.fragment,s),x(jm.$$.fragment,s),x(wm.$$.fragment,s),x(Dm.$$.fragment,s),x(km.$$.fragment,s),x(Em.$$.fragment,s),x(Im.$$.fragment,s),x(qm.$$.fragment,s),x(Fl.$$.fragment,s),x(Nm.$$.fragment,s),x(Al.$$.fragment,s),x(Pm.$$.fragment,s),x(Sl.$$.fragment,s),x(Fm.$$.fragment,s),x(Ol.$$.fragment,s),x(Am.$$.fragment,s),x(Cl.$$.fragment,s),x(Sm.$$.fragment,s),x(zl.$$.fragment,s),x(Om.$$.fragment,s),x(Vl.$$.fragment,s),x(Cm.$$.fragment,s),x(Ul.$$.fragment,s),x(zm.$$.fragment,s),x(Ml.$$.fragment,s),x(Vm.$$.fragment,s),x(Um.$$.fragment,s),x(Bl.$$.fragment,s),x(Wm.$$.fragment,s),x(Ym.$$.fragment,s),x(Jm.$$.fragment,s),x(Km.$$.fragment,s),x(Zm.$$.fragment,s),x(Xm.$$.fragment,s),x(Qm.$$.fragment,s),x(eh.$$.fragment,s),x(th.$$.fragment,s),x(Ql.$$.fragment,s),x(ah.$$.fragment,s),x(ei.$$.fragment,s),x(sh.$$.fragment,s),x(nh.$$.fragment,s),x(oh.$$.fragment,s),x(lh.$$.fragment,s),x(ih.$$.fragment,s),x(ph.$$.fragment,s),x(si.$$.fragment,s),x(dh.$$.fragment,s),x(mh.$$.fragment,s),x(ri.$$.fragment,s),x(hh.$$.fragment,s),x(uh.$$.fragment,s),x(_h.$$.fragment,s),x($h.$$.fragment,s),x(vh.$$.fragment,s),x(yh.$$.fragment,s),x(Eh.$$.fragment,s),x(Ih.$$.fragment,s),x(qh.$$.fragment,s),x(Th.$$.fragment,s),x(Nh.$$.fragment,s),x(Ph.$$.fragment,s),x(Ch.$$.fragment,s),x(zh.$$.fragment,s),x(Vh.$$.fragment,s),x(Uh.$$.fragment,s),x(Mh.$$.fragment,s),x(Rh.$$.fragment,s),x(Bh.$$.fragment,s),x(Hh.$$.fragment,s),x(Wh.$$.fragment,s),x(Yh.$$.fragment,s),x(Jh.$$.fragment,s),x(Kh.$$.fragment,s),x(Zh.$$.fragment,s),x(Xh.$$.fragment,s),x(Qh.$$.fragment,s),x(ef.$$.fragment,s),x(tf.$$.fragment,s),x(wi.$$.fragment,s),x(Di.$$.fragment,s),x(ki.$$.fragment,s),x(Ei.$$.fragment,s),x(Ii.$$.fragment,s),x(sf.$$.fragment,s),x(nf.$$.fragment,s),x(rf.$$.fragment,s),x(of.$$.fragment,s),rw=!0)},o(s){v(t.$$.fragment,s),v(sa.$$.fragment,s),v(op.$$.fragment,s),v(lp.$$.fragment,s),v(br.$$.fragment,s),v(pp.$$.fragment,s),v($r.$$.fragment,s),v(cp.$$.fragment,s),v(dp.$$.fragment,s),v(mp.$$.fragment,s),v(yr.$$.fragment,s),v(hp.$$.fragment,s),v(jr.$$.fragment,s),v(fp.$$.fragment,s),v(up.$$.fragment,s),v(gp.$$.fragment,s),v(kr.$$.fragment,s),v($p.$$.fragment,s),v(xp.$$.fragment,s),v(Ir.$$.fragment,s),v(vp.$$.fragment,s),v(qr.$$.fragment,s),v(yp.$$.fragment,s),v(Tr.$$.fragment,s),v(jp.$$.fragment,s),v(Pr.$$.fragment,s),v(Dp.$$.fragment,s),v(Lr.$$.fragment,s),v(kp.$$.fragment,s),v(Fr.$$.fragment,s),v(Ep.$$.fragment,s),v(Ar.$$.fragment,s),v(Ip.$$.fragment,s),v(Sr.$$.fragment,s),v(qp.$$.fragment,s),v(Or.$$.fragment,s),v(Tp.$$.fragment,s),v(Cr.$$.fragment,s),v(Np.$$.fragment,s),v(zr.$$.fragment,s),v(Pp.$$.fragment,s),v(Vr.$$.fragment,s),v(Lp.$$.fragment,s),v(Ur.$$.fragment,s),v(Fp.$$.fragment,s),v(Mr.$$.fragment,s),v(Sp.$$.fragment,s),v(Rr.$$.fragment,s),v(Op.$$.fragment,s),v(zp.$$.fragment,s),v(Vp.$$.fragment,s),v(Hr.$$.fragment,s),v(Up.$$.fragment,s),v(Gr.$$.fragment,s),v(Mp.$$.fragment,s),v(Wr.$$.fragment,s),v(Bp.$$.fragment,s),v(Yr.$$.fragment,s),v(Gp.$$.fragment,s),v(Jr.$$.fragment,s),v(Wp.$$.fragment,s),v(Yp.$$.fragment,s),v(Zr.$$.fragment,s),v(Jp.$$.fragment,s),v(Xr.$$.fragment,s),v(Zp.$$.fragment,s),v(Qr.$$.fragment,s),v(Xp.$$.fragment,s),v(eo.$$.fragment,s),v(Qp.$$.fragment,s),v(to.$$.fragment,s),v(ec.$$.fragment,s),v(ao.$$.fragment,s),v(tc.$$.fragment,s),v(so.$$.fragment,s),v(sc.$$.fragment,s),v(no.$$.fragment,s),v(rc.$$.fragment,s),v(ro.$$.fragment,s),v(oc.$$.fragment,s),v(oo.$$.fragment,s),v(lc.$$.fragment,s),v(lo.$$.fragment,s),v(io.$$.fragment,s),v(po.$$.fragment,s),v(pc.$$.fragment,s),v(co.$$.fragment,s),v(cc.$$.fragment,s),v(dc.$$.fragment,s),v(ho.$$.fragment,s),v(mc.$$.fragment,s),v(fo.$$.fragment,s),v(fc.$$.fragment,s),v(uo.$$.fragment,s),v(uc.$$.fragment,s),v(go.$$.fragment,s),v(gc.$$.fragment,s),v(_o.$$.fragment,s),v(_c.$$.fragment,s),v(bo.$$.fragment,s),v($c.$$.fragment,s),v(vc.$$.fragment,s),v(yc.$$.fragment,s),v(wc.$$.fragment,s),v(xo.$$.fragment,s),v(Dc.$$.fragment,s),v(vo.$$.fragment,s),v(kc.$$.fragment,s),v(Ec.$$.fragment,s),v(Ic.$$.fragment,s),v(qc.$$.fragment,s),v(Tc.$$.fragment,s),v(Nc.$$.fragment,s),v(Pc.$$.fragment,s),v(Lc.$$.fragment,s),v(Fc.$$.fragment,s),v(Ac.$$.fragment,s),v(Sc.$$.fragment,s),v(Oc.$$.fragment,s),v(Cc.$$.fragment,s),v(zc.$$.fragment,s),v(Vc.$$.fragment,s),v(Uc.$$.fragment,s),v(Mc.$$.fragment,s),v(Rc.$$.fragment,s),v(Bc.$$.fragment,s),v(Hc.$$.fragment,s),v(Gc.$$.fragment,s),v(Wc.$$.fragment,s),v(Yc.$$.fragment,s),v(No.$$.fragment,s),v(Jc.$$.fragment,s),v(Po.$$.fragment,s),v(Kc.$$.fragment,s),v(Lo.$$.fragment,s),v(Zc.$$.fragment,s),v(Fo.$$.fragment,s),v(Xc.$$.fragment,s),v(Qc.$$.fragment,s),v(Ao.$$.fragment,s),v(td.$$.fragment,s),v(So.$$.fragment,s),v(ad.$$.fragment,s),v(Oo.$$.fragment,s),v(sd.$$.fragment,s),v(rd.$$.fragment,s),v(ld.$$.fragment,s),v(pd.$$.fragment,s),v(cd.$$.fragment,s),v(dd.$$.fragment,s),v(Vo.$$.fragment,s),v(md.$$.fragment,s),v(Uo.$$.fragment,s),v(hd.$$.fragment,s),v(Mo.$$.fragment,s),v(fd.$$.fragment,s),v(Bo.$$.fragment,s),v(gd.$$.fragment,s),v(Ho.$$.fragment,s),v(_d.$$.fragment,s),v(Go.$$.fragment,s),v(bd.$$.fragment,s),v(Wo.$$.fragment,s),v($d.$$.fragment,s),v(Yo.$$.fragment,s),v(xd.$$.fragment,s),v(Jo.$$.fragment,s),v(vd.$$.fragment,s),v(Ko.$$.fragment,s),v(yd.$$.fragment,s),v(Zo.$$.fragment,s),v(jd.$$.fragment,s),v(Xo.$$.fragment,s),v(wd.$$.fragment,s),v(Qo.$$.fragment,s),v(kd.$$.fragment,s),v(el.$$.fragment,s),v(Id.$$.fragment,s),v(qd.$$.fragment,s),v(al.$$.fragment,s),v(Nd.$$.fragment,s),v(sl.$$.fragment,s),v(Pd.$$.fragment,s),v(nl.$$.fragment,s),v(Ld.$$.fragment,s),v(rl.$$.fragment,s),v(Fd.$$.fragment,s),v(ol.$$.fragment,s),v(Ad.$$.fragment,s),v(ll.$$.fragment,s),v(Sd.$$.fragment,s),v(il.$$.fragment,s),v(Cd.$$.fragment,s),v(pl.$$.fragment,s),v(zd.$$.fragment,s),v(cl.$$.fragment,s),v(Ud.$$.fragment,s),v(dl.$$.fragment,s),v(Md.$$.fragment,s),v(ml.$$.fragment,s),v(hl.$$.fragment,s),v(Bd.$$.fragment,s),v(fl.$$.fragment,s),v(Hd.$$.fragment,s),v(ul.$$.fragment,s),v(Gd.$$.fragment,s),v(gl.$$.fragment,s),v(Wd.$$.fragment,s),v(_l.$$.fragment,s),v(Yd.$$.fragment,s),v(bl.$$.fragment,s),v(Jd.$$.fragment,s),v(Kd.$$.fragment,s),v(Zd.$$.fragment,s),v(Xd.$$.fragment,s),v(vl.$$.fragment,s),v(Qd.$$.fragment,s),v(yl.$$.fragment,s),v(em.$$.fragment,s),v(jl.$$.fragment,s),v(tm.$$.fragment,s),v(am.$$.fragment,s),v(wl.$$.fragment,s),v(nm.$$.fragment,s),v(Dl.$$.fragment,s),v(rm.$$.fragment,s),v(kl.$$.fragment,s),v(om.$$.fragment,s),v(El.$$.fragment,s),v(im.$$.fragment,s),v(Il.$$.fragment,s),v(cm.$$.fragment,s),v(ql.$$.fragment,s),v(mm.$$.fragment,s),v(hm.$$.fragment,s),v(fm.$$.fragment,s),v(um.$$.fragment,s),v(gm.$$.fragment,s),v(_m.$$.fragment,s),v(bm.$$.fragment,s),v($m.$$.fragment,s),v(xm.$$.fragment,s),v(vm.$$.fragment,s),v(ym.$$.fragment,s),v(jm.$$.fragment,s),v(wm.$$.fragment,s),v(Dm.$$.fragment,s),v(km.$$.fragment,s),v(Em.$$.fragment,s),v(Im.$$.fragment,s),v(qm.$$.fragment,s),v(Fl.$$.fragment,s),v(Nm.$$.fragment,s),v(Al.$$.fragment,s),v(Pm.$$.fragment,s),v(Sl.$$.fragment,s),v(Fm.$$.fragment,s),v(Ol.$$.fragment,s),v(Am.$$.fragment,s),v(Cl.$$.fragment,s),v(Sm.$$.fragment,s),v(zl.$$.fragment,s),v(Om.$$.fragment,s),v(Vl.$$.fragment,s),v(Cm.$$.fragment,s),v(Ul.$$.fragment,s),v(zm.$$.fragment,s),v(Ml.$$.fragment,s),v(Vm.$$.fragment,s),v(Um.$$.fragment,s),v(Bl.$$.fragment,s),v(Wm.$$.fragment,s),v(Ym.$$.fragment,s),v(Jm.$$.fragment,s),v(Km.$$.fragment,s),v(Zm.$$.fragment,s),v(Xm.$$.fragment,s),v(Qm.$$.fragment,s),v(eh.$$.fragment,s),v(th.$$.fragment,s),v(Ql.$$.fragment,s),v(ah.$$.fragment,s),v(ei.$$.fragment,s),v(sh.$$.fragment,s),v(nh.$$.fragment,s),v(oh.$$.fragment,s),v(lh.$$.fragment,s),v(ih.$$.fragment,s),v(ph.$$.fragment,s),v(si.$$.fragment,s),v(dh.$$.fragment,s),v(mh.$$.fragment,s),v(ri.$$.fragment,s),v(hh.$$.fragment,s),v(uh.$$.fragment,s),v(_h.$$.fragment,s),v($h.$$.fragment,s),v(vh.$$.fragment,s),v(yh.$$.fragment,s),v(Eh.$$.fragment,s),v(Ih.$$.fragment,s),v(qh.$$.fragment,s),v(Th.$$.fragment,s),v(Nh.$$.fragment,s),v(Ph.$$.fragment,s),v(Ch.$$.fragment,s),v(zh.$$.fragment,s),v(Vh.$$.fragment,s),v(Uh.$$.fragment,s),v(Mh.$$.fragment,s),v(Rh.$$.fragment,s),v(Bh.$$.fragment,s),v(Hh.$$.fragment,s),v(Wh.$$.fragment,s),v(Yh.$$.fragment,s),v(Jh.$$.fragment,s),v(Kh.$$.fragment,s),v(Zh.$$.fragment,s),v(Xh.$$.fragment,s),v(Qh.$$.fragment,s),v(ef.$$.fragment,s),v(tf.$$.fragment,s),v(wi.$$.fragment,s),v(Di.$$.fragment,s),v(ki.$$.fragment,s),v(Ei.$$.fragment,s),v(Ii.$$.fragment,s),v(sf.$$.fragment,s),v(nf.$$.fragment,s),v(rf.$$.fragment,s),v(of.$$.fragment,s),rw=!1},d(s){a(c),s&&a(g),s&&a(f),y(t),s&&a(gr),s&&a(Ae),y(sa),s&&a(g0),s&&a(K),y(op),y(lp),y(br),y(pp),y($r),s&&a(_0),s&&a(Ks),y(cp),s&&a(b0),s&&a(vr),s&&a($0),s&&a(I),y(dp),y(mp),y(yr),y(hp),y(jr),y(fp),y(up),y(gp),y(kr),y($p),y(xp),y(Ir),y(vp),y(qr),y(yp),y(Tr),y(jp),y(Pr),y(Dp),y(Lr),y(kp),y(Fr),y(Ep),y(Ar),y(Ip),y(Sr),y(qp),y(Or),y(Tp),y(Cr),y(Np),y(zr),y(Pp),y(Vr),y(Lp),y(Ur),y(Fp),y(Mr),y(Sp),y(Rr),y(Op),y(zp),y(Vp),y(Hr),y(Up),y(Gr),y(Mp),y(Wr),y(Bp),y(Yr),y(Gp),y(Jr),y(Wp),y(Yp),y(Zr),y(Jp),y(Xr),y(Zp),y(Qr),y(Xp),y(eo),y(Qp),y(to),y(ec),y(ao),y(tc),y(so),y(sc),y(no),y(rc),y(ro),y(oc),y(oo),y(lc),y(lo),y(io),y(po),y(pc),y(co),y(cc),y(dc),y(ho),y(mc),y(fo),y(fc),y(uo),y(uc),y(go),y(gc),y(_o),y(_c),y(bo),y($c),y(vc),y(yc),y(wc),y(xo),y(Dc),y(vo),y(kc),y(Ec),y(Ic),y(qc),y(Tc),y(Nc),y(Pc),y(Lc),y(Fc),y(Ac),y(Sc),y(Oc),y(Cc),y(zc),y(Vc),y(Uc),y(Mc),y(Rc),y(Bc),y(Hc),y(Gc),y(Wc),y(Yc),y(No),y(Jc),y(Po),y(Kc),y(Lo),y(Zc),y(Fo),y(Xc),y(Qc),y(Ao),s&&a(x0),s&&a(Lt),y(td),y(So),s&&a(v0),s&&a(Z),y(ad),y(Oo),s&&a(y0),s&&a(de),y(sd),s&&a(j0),s&&a(me),y(rd),s&&a(w0),s&&a(he),y(ld),s&&a(D0),s&&a(hn),y(pd),s&&a(k0),s&&a(zo),s&&a(E0),s&&a(L),y(cd),y(dd),y(Vo),y(md),y(Uo),y(hd),y(Mo),y(fd),y(Bo),y(gd),y(Ho),y(_d),y(Go),y(bd),y(Wo),y($d),y(Yo),y(xd),y(Jo),y(vd),y(Ko),y(yd),y(Zo),y(jd),y(Xo),y(wd),y(Qo),y(kd),y(el),y(Id),y(qd),y(al),y(Nd),y(sl),y(Pd),y(nl),y(Ld),y(rl),y(Fd),y(ol),y(Ad),y(ll),y(Sd),y(il),y(Cd),y(pl),y(zd),y(cl),y(Ud),y(dl),y(Md),y(ml),y(hl),y(Bd),y(fl),y(Hd),y(ul),y(Gd),y(gl),y(Wd),y(_l),y(Yd),y(bl),y(Jd),s&&a(I0),s&&a(Mu),s&&a(q0),s&&a(kn),y(Kd),s&&a(T0),s&&a(xl),s&&a(N0),s&&a(A),y(Zd),y(Xd),y(vl),y(Qd),y(yl),y(em),y(jl),y(tm),y(am),y(wl),y(nm),y(Dl),y(rm),y(kl),y(om),y(El),y(im),y(Il),y(cm),y(ql),y(mm),y(hm),y(fm),y(um),y(gm),y(_m),y(bm),y($m),y(xm),y(vm),y(ym),y(jm),y(wm),y(Dm),y(km),s&&a(P0),s&&a(qn),y(Em),s&&a(L0),s&&a(Ll),s&&a(F0),s&&a(U),y(Im),y(qm),y(Fl),y(Nm),y(Al),y(Pm),y(Sl),y(Fm),y(Ol),y(Am),y(Cl),y(Sm),y(zl),y(Om),y(Vl),y(Cm),y(Ul),y(zm),y(Ml),s&&a(A0),s&&a(Pn),y(Vm),s&&a(S0),s&&a(O),y(Um),y(Bl),y(Wm),y(Ym),y(Jm),y(Km),y(Zm),y(Xm),y(Qm),y(eh),y(th),y(Ql),y(ah),y(ei),s&&a(O0),s&&a(Ln),y(sh),s&&a(C0),s&&a(X),y(nh),y(oh),y(lh),s&&a(z0),s&&a(Rt),y(ih),s&&a(V0),s&&a(Q),y(ph),y(si),y(dh),s&&a(U0),s&&a(ee),y(mh),y(ri),y(hh),s&&a(M0),s&&a(fh),y(uh),s&&a(R0),s&&a(gh),y(_h),s&&a(B0),s&&a(bh),y($h),s&&a(H0),s&&a(xh),y(vh),s&&a(G0),s&&a(M),y(yh),y(Eh),y(Ih),y(qh),y(Th),y(Nh),s&&a(W0),s&&a(R),y(Ph),y(Ch),y(zh),y(Vh),y(Uh),y(Mh),s&&a(Y0),s&&a(Vn),y(Rh),s&&a(J0),s&&a(te),y(Bh),y(Hh),y(Wh),s&&a(K0),s&&a(Un),y(Yh),s&&a(Z0),s&&a(ys),s&&a(X0),s&&a(ae),y(Jh),y(Kh),y(Zh),y(Xh),y(Qh),s&&a(Q0),s&&a(Mn),y(ef),s&&a(ew),s&&a(C),y(tf),y(wi),y(Di),y(ki),y(Ei),y(Ii),s&&a(tw),s&&a(Gn),y(sf),s&&a(aw),s&&a(Yn),y(nf),s&&a(sw),s&&a(Jn),y(rf),s&&a(nw),s&&a(Kn),y(of)}}}const Gse={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function Wse(k){return Cte(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ene extends Fte{constructor(c){super();Ate(this,c,Wse,Hse,Ste,{})}}export{ene as default,Gse as metadata};
